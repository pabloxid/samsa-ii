
SAMSA II v9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003a8  00800200  00010304  00010398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00010304  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f15  008005a8  008005a8  00010740  2**0
                  ALLOC
  3 .debug_aranges 00000ed8  00000000  00000000  00010740  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000237b  00000000  00000000  00011618  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000162d1  00000000  00000000  00013993  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003e5a  00000000  00000000  00029c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000851f  00000000  00000000  0002dabe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001a90  00000000  00000000  00035fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003911  00000000  00000000  00037a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00008871  00000000  00000000  0003b381  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000f60  00000000  00000000  00043bf2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
  
	// esto quedó sin implementar
	// porque es realmente un huevo
	// pero la idea es muy buena, una red con n cantidad de layers
	
       0:	0c 94 a3 02 	jmp	0x546	; 0x546 <__dtors_end>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
       4:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <__vector_1>
{
  while (size--)
    write(*buffer++);
}

void Print::print(const String &s)
       8:	0c 94 c8 05 	jmp	0xb90	; 0xb90 <__vector_2>
    #endif
      break;
#endif
    }
      
    intFunc[interruptNum] = 0;
       c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__vector_3>
		SREG = oldSREG;
	}
}

int digitalRead(uint8_t pin)
{
      10:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <__vector_4>

char String::operator[]( unsigned int index ) const
{
  // need to check for valid index, to do later
  return _buffer[ index ];
}
      14:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <__vector_5>
    //bitSet(TIMSK0, TOIE0);        // rehabilita la interrupción del timer0 (nota: esto es sólo para entornos Arduino)
#endif    
}

/** Sends a character out the serial port */
byte AX12::writeByte (byte data) {
      18:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__vector_6>
	}
	if (status == MODE_FAST) {blue_serial.send_msg (pata, 3, data);}   // esta comprobación evita que el buffer del modem se sature, 
																																				// en caso de que no esté conectado
}

void Bluetooth::send_msg (byte instruccion, byte largo, byte* data) {
      1c:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <__vector_7>
}
*/

int Cabeza::twobyte2int (byte* data) {          // transforma 2 bytes de 7 bits en un int
  return 128*data[0] + data[1];
} 
      20:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__vector_8>
byte Conducta::estado;

Conducta::Conducta (byte in_prioridad) {
	prioridad = in_prioridad;
	enabled = false;                      // todas las conductas arrancan apagadas, y sus respectivos recursos también
}
      24:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
// acá hay mucho que arreglar:
// habilitar movimiento continuo
// habilitar curvas
// probablemente hay que sofisticar el sistema de acciones en lo que tiene que ver con caminata

bool Correa::evaluar () {
      28:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
Display pantalla;                  // preinstanciado

Display::Display () {               // constructor
  text = NULL;
  mode = DISPLAY_OFF;
}
      2c:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
  if (size > 0) {
    return buffer [head].timestamp;
  } else {
    return -1;                                           // este -1 en realidad lo que retorna es el valor más alto posible, impidiendo que la isr llame a la get_data()
  }
}
      30:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {             // esta rutina sólo se usaría para diagnóstico
      34:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>

///////////////////////////////////////// OSCILADORES /////////////////////////////////////////

void Movimiento::set_oscilador (byte parametro, float amplitud, float frecuencia, float fase, bool brown) {
	bd.oscilator [parametro] = (OSCILATOR) {amplitud, frecuencia, fase, brown};
}
      38:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
void Movimiento::stop () {
	sh.cn.enable = false;
}

// prosigue el movimiento
void Movimiento::cont () {
      3c:	0c 94 9b 1b 	jmp	0x3736	; 0x3736 <__vector_15>

void pos_ang (byte pata, ANGULOS A, int duracion) {                       // mueve 1 pata
  servo (pata, 0, A.gama, duracion);                           
  servo (pata, 1, A.alfa, duracion);                          
  servo (pata, 2, A.beta, duracion);    
}
      40:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
			
		////////////////////////////*/	
		
	}

}
      44:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
#include "wiring.h"
#include <string.h>

#define TIMEOUT 3000

Serialcomm::Serialcomm () { }   // construtor por defeto
      48:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
  }
  float diff = howbig - howsmall;
  return random(diff) + howsmall;
}

float map(float value, float istart, float istop, float ostart, float ostop) {
      4c:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>

COORD2D xyz2xz (COORD3D vector) {
  return (COORD2D) {vector.x, vector.z}; 
}

float sumaproducto (COORD3D vector1, COORD3D vector2) {
      50:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      54:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      58:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      5c:	0c 94 d1 1b 	jmp	0x37a2	; 0x37a2 <__vector_23>
      60:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      64:	0c 94 d1 03 	jmp	0x7a2	; 0x7a2 <__vector_25>
      68:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      6c:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      70:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      74:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      78:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      7c:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      80:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      84:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      88:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      8c:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      90:	0c 94 45 09 	jmp	0x128a	; 0x128a <__vector_36>
      94:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      98:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      9c:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      a0:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      a4:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      a8:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      ac:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      b0:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      b4:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      b8:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      bc:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      c0:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      c4:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      c8:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      cc:	0c 94 06 04 	jmp	0x80c	; 0x80c <__vector_51>
      d0:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      d4:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      d8:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      dc:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      e0:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      e4:	5c 0a       	sbc	r5, r28
      e6:	5a 0a       	sbc	r5, r26
      e8:	58 0a       	sbc	r5, r24
      ea:	58 0a       	sbc	r5, r24
      ec:	58 0a       	sbc	r5, r24
      ee:	58 0a       	sbc	r5, r24
      f0:	5c 0a       	sbc	r5, r28
      f2:	5a 0a       	sbc	r5, r26
      f4:	5c 0a       	sbc	r5, r28
      f6:	5a 0a       	sbc	r5, r26
      f8:	5a 0a       	sbc	r5, r26
      fa:	58 0a       	sbc	r5, r24
      fc:	58 0a       	sbc	r5, r24
      fe:	58 0a       	sbc	r5, r24
     100:	5c 0a       	sbc	r5, r28
     102:	5a 0a       	sbc	r5, r26
     104:	58 0a       	sbc	r5, r24
     106:	58 0a       	sbc	r5, r24
     108:	58 0a       	sbc	r5, r24
     10a:	58 0a       	sbc	r5, r24
     10c:	5c 0a       	sbc	r5, r28
     10e:	5a 0a       	sbc	r5, r26
     110:	5c 0a       	sbc	r5, r28
     112:	5a 0a       	sbc	r5, r26
     114:	58 0a       	sbc	r5, r24
     116:	58 0a       	sbc	r5, r24
     118:	58 0a       	sbc	r5, r24
     11a:	58 0a       	sbc	r5, r24
     11c:	58 0a       	sbc	r5, r24
     11e:	58 0a       	sbc	r5, r24
     120:	5c 0a       	sbc	r5, r28
     122:	5a 0a       	sbc	r5, r26
     124:	5c 0a       	sbc	r5, r28
     126:	5a 0a       	sbc	r5, r26
     128:	5c 0a       	sbc	r5, r28
     12a:	5a 0a       	sbc	r5, r26
     12c:	5c 0a       	sbc	r5, r28
     12e:	5a 0a       	sbc	r5, r26
     130:	5c 0a       	sbc	r5, r28
     132:	5a 0a       	sbc	r5, r26
     134:	5c 0a       	sbc	r5, r28
     136:	5a 0a       	sbc	r5, r26
     138:	58 0a       	sbc	r5, r24
     13a:	58 0a       	sbc	r5, r24
     13c:	58 0a       	sbc	r5, r24
     13e:	5a 0a       	sbc	r5, r26
     140:	58 0a       	sbc	r5, r24
     142:	58 0a       	sbc	r5, r24
     144:	5c 0a       	sbc	r5, r28
     146:	6c 0a       	sbc	r6, r28
     148:	6c 0a       	sbc	r6, r28
     14a:	6c 0a       	sbc	r6, r28
     14c:	70 0a       	sbc	r7, r16
     14e:	6e 0a       	sbc	r6, r30
     150:	70 0a       	sbc	r7, r16
     152:	6e 0a       	sbc	r6, r30
     154:	6e 0a       	sbc	r6, r30
     156:	6c 0a       	sbc	r6, r28
     158:	6c 0a       	sbc	r6, r28
     15a:	6c 0a       	sbc	r6, r28
     15c:	70 0a       	sbc	r7, r16
     15e:	6e 0a       	sbc	r6, r30
     160:	6c 0a       	sbc	r6, r28
     162:	6c 0a       	sbc	r6, r28
     164:	6c 0a       	sbc	r6, r28
     166:	6c 0a       	sbc	r6, r28
     168:	6e 0a       	sbc	r6, r30
     16a:	6e 0a       	sbc	r6, r30
     16c:	6e 0a       	sbc	r6, r30
     16e:	6e 0a       	sbc	r6, r30
     170:	6c 0a       	sbc	r6, r28
     172:	6c 0a       	sbc	r6, r28
     174:	6c 0a       	sbc	r6, r28
     176:	6c 0a       	sbc	r6, r28
     178:	6c 0a       	sbc	r6, r28
     17a:	6c 0a       	sbc	r6, r28
     17c:	70 0a       	sbc	r7, r16
     17e:	6e 0a       	sbc	r6, r30
     180:	70 0a       	sbc	r7, r16
     182:	6e 0a       	sbc	r6, r30
     184:	70 0a       	sbc	r7, r16
     186:	6e 0a       	sbc	r6, r30
     188:	6e 0a       	sbc	r6, r30
     18a:	6e 0a       	sbc	r6, r30
     18c:	6e 0a       	sbc	r6, r30
     18e:	6e 0a       	sbc	r6, r30
     190:	6e 0a       	sbc	r6, r30
     192:	6e 0a       	sbc	r6, r30
     194:	6e 0a       	sbc	r6, r30
     196:	6e 0a       	sbc	r6, r30
     198:	6c 0a       	sbc	r6, r28
     19a:	6e 0a       	sbc	r6, r30
     19c:	6e 0a       	sbc	r6, r30
     19e:	6c 0a       	sbc	r6, r28
     1a0:	70 0a       	sbc	r7, r16
     1a2:	8b 15       	cp	r24, r11
     1a4:	89 15       	cp	r24, r9
     1a6:	93 15       	cp	r25, r3
     1a8:	93 15       	cp	r25, r3
     1aa:	93 15       	cp	r25, r3
     1ac:	8f 15       	cp	r24, r15
     1ae:	89 15       	cp	r24, r9
     1b0:	93 15       	cp	r25, r3
     1b2:	8d 15       	cp	r24, r13
     1b4:	8d 15       	cp	r24, r13
     1b6:	91 15       	cp	r25, r1
     1b8:	93 15       	cp	r25, r3
     1ba:	8d 15       	cp	r24, r13
     1bc:	89 15       	cp	r24, r9
     1be:	8d 15       	cp	r24, r13
     1c0:	87 15       	cp	r24, r7
     1c2:	89 15       	cp	r24, r9
     1c4:	8d 15       	cp	r24, r13
     1c6:	89 15       	cp	r24, r9
     1c8:	89 15       	cp	r24, r9
     1ca:	89 15       	cp	r24, r9
     1cc:	89 15       	cp	r24, r9
     1ce:	89 15       	cp	r24, r9
     1d0:	89 15       	cp	r24, r9
     1d2:	89 15       	cp	r24, r9
     1d4:	89 15       	cp	r24, r9
     1d6:	8d 15       	cp	r24, r13
     1d8:	8d 15       	cp	r24, r13
     1da:	91 15       	cp	r25, r1
     1dc:	89 15       	cp	r24, r9
     1de:	91 15       	cp	r25, r1
     1e0:	89 15       	cp	r24, r9
     1e2:	91 15       	cp	r25, r1
     1e4:	93 15       	cp	r25, r3
     1e6:	93 15       	cp	r25, r3
     1e8:	93 15       	cp	r25, r3
     1ea:	93 15       	cp	r25, r3
     1ec:	89 15       	cp	r24, r9
     1ee:	89 15       	cp	r24, r9
     1f0:	93 15       	cp	r25, r3
     1f2:	89 15       	cp	r24, r9
     1f4:	8b 15       	cp	r24, r11
     1f6:	89 15       	cp	r24, r9
     1f8:	89 15       	cp	r24, r9
     1fa:	89 15       	cp	r24, r9
     1fc:	93 15       	cp	r25, r3
     1fe:	93 15       	cp	r25, r3
     200:	93 15       	cp	r25, r3
     202:	89 15       	cp	r24, r9
     204:	93 15       	cp	r25, r3
     206:	93 15       	cp	r25, r3
     208:	93 15       	cp	r25, r3
     20a:	93 15       	cp	r25, r3
     20c:	93 15       	cp	r25, r3
     20e:	93 15       	cp	r25, r3
     210:	91 15       	cp	r25, r1
     212:	93 15       	cp	r25, r3
     214:	93 15       	cp	r25, r3
     216:	89 15       	cp	r24, r9
     218:	91 15       	cp	r25, r1
     21a:	93 15       	cp	r25, r3
     21c:	91 15       	cp	r25, r1
     21e:	91 15       	cp	r25, r1
     220:	91 15       	cp	r25, r1
     222:	93 15       	cp	r25, r3
     224:	89 15       	cp	r24, r9
     226:	89 15       	cp	r24, r9
     228:	89 15       	cp	r24, r9
     22a:	89 15       	cp	r24, r9
     22c:	89 15       	cp	r24, r9
     22e:	87 15       	cp	r24, r7
     230:	89 15       	cp	r24, r9
     232:	89 15       	cp	r24, r9
     234:	8b 15       	cp	r24, r11
     236:	8d 15       	cp	r24, r13
     238:	89 15       	cp	r24, r9
     23a:	8b 15       	cp	r24, r11
     23c:	93 15       	cp	r25, r3
     23e:	89 15       	cp	r24, r9
     240:	89 15       	cp	r24, r9
     242:	89 15       	cp	r24, r9
     244:	89 15       	cp	r24, r9
     246:	87 15       	cp	r24, r7
     248:	89 15       	cp	r24, r9
     24a:	87 15       	cp	r24, r7
     24c:	89 15       	cp	r24, r9
     24e:	93 15       	cp	r25, r3
     250:	93 15       	cp	r25, r3
     252:	93 15       	cp	r25, r3
     254:	89 15       	cp	r24, r9
     256:	89 15       	cp	r24, r9
     258:	89 15       	cp	r24, r9
     25a:	91 15       	cp	r25, r1
     25c:	89 15       	cp	r24, r9
     25e:	91 15       	cp	r25, r1
     260:	a7 15       	cp	r26, r7
     262:	a9 15       	cp	r26, r9
     264:	a9 15       	cp	r26, r9
     266:	ab 15       	cp	r26, r11
     268:	ab 15       	cp	r26, r11
     26a:	ab 15       	cp	r26, r11
     26c:	a9 15       	cp	r26, r9
     26e:	ab 15       	cp	r26, r11
     270:	a7 15       	cp	r26, r7
     272:	a7 15       	cp	r26, r7
     274:	ab 15       	cp	r26, r11
     276:	ab 15       	cp	r26, r11
     278:	a7 15       	cp	r26, r7
     27a:	a9 15       	cp	r26, r9
     27c:	a7 15       	cp	r26, r7
     27e:	a9 15       	cp	r26, r9
     280:	a9 15       	cp	r26, r9
     282:	a7 15       	cp	r26, r7
     284:	a9 15       	cp	r26, r9
     286:	a9 15       	cp	r26, r9
     288:	a9 15       	cp	r26, r9
     28a:	a9 15       	cp	r26, r9
     28c:	a9 15       	cp	r26, r9
     28e:	a9 15       	cp	r26, r9
     290:	a9 15       	cp	r26, r9
     292:	a9 15       	cp	r26, r9
     294:	a7 15       	cp	r26, r7
     296:	a7 15       	cp	r26, r7
     298:	ab 15       	cp	r26, r11
     29a:	a9 15       	cp	r26, r9
     29c:	ab 15       	cp	r26, r11
     29e:	a9 15       	cp	r26, r9
     2a0:	ab 15       	cp	r26, r11
     2a2:	ab 15       	cp	r26, r11
     2a4:	ab 15       	cp	r26, r11
     2a6:	ab 15       	cp	r26, r11
     2a8:	ab 15       	cp	r26, r11
     2aa:	a9 15       	cp	r26, r9
     2ac:	a9 15       	cp	r26, r9
     2ae:	ab 15       	cp	r26, r11
     2b0:	a9 15       	cp	r26, r9
     2b2:	a7 15       	cp	r26, r7
     2b4:	a9 15       	cp	r26, r9
     2b6:	a9 15       	cp	r26, r9
     2b8:	a9 15       	cp	r26, r9
     2ba:	ab 15       	cp	r26, r11
     2bc:	ab 15       	cp	r26, r11
     2be:	ab 15       	cp	r26, r11
     2c0:	a9 15       	cp	r26, r9
     2c2:	ab 15       	cp	r26, r11
     2c4:	ab 15       	cp	r26, r11
     2c6:	ab 15       	cp	r26, r11
     2c8:	ab 15       	cp	r26, r11
     2ca:	ab 15       	cp	r26, r11
     2cc:	ab 15       	cp	r26, r11
     2ce:	ab 15       	cp	r26, r11
     2d0:	ab 15       	cp	r26, r11
     2d2:	ab 15       	cp	r26, r11
     2d4:	a9 15       	cp	r26, r9
     2d6:	ab 15       	cp	r26, r11
     2d8:	ab 15       	cp	r26, r11
     2da:	ab 15       	cp	r26, r11
     2dc:	ab 15       	cp	r26, r11
     2de:	ab 15       	cp	r26, r11
     2e0:	ab 15       	cp	r26, r11
     2e2:	a9 15       	cp	r26, r9
     2e4:	a9 15       	cp	r26, r9
     2e6:	a9 15       	cp	r26, r9
     2e8:	a9 15       	cp	r26, r9
     2ea:	a9 15       	cp	r26, r9
     2ec:	a9 15       	cp	r26, r9
     2ee:	a9 15       	cp	r26, r9
     2f0:	a9 15       	cp	r26, r9
     2f2:	a7 15       	cp	r26, r7
     2f4:	a7 15       	cp	r26, r7
     2f6:	a9 15       	cp	r26, r9
     2f8:	a7 15       	cp	r26, r7
     2fa:	ab 15       	cp	r26, r11
     2fc:	a9 15       	cp	r26, r9
     2fe:	a9 15       	cp	r26, r9
     300:	a9 15       	cp	r26, r9
     302:	a9 15       	cp	r26, r9
     304:	a9 15       	cp	r26, r9
     306:	a9 15       	cp	r26, r9
     308:	a9 15       	cp	r26, r9
     30a:	a9 15       	cp	r26, r9
     30c:	ab 15       	cp	r26, r11
     30e:	ab 15       	cp	r26, r11
     310:	ab 15       	cp	r26, r11
     312:	a9 15       	cp	r26, r9
     314:	a9 15       	cp	r26, r9
     316:	a9 15       	cp	r26, r9
     318:	ab 15       	cp	r26, r11
     31a:	a9 15       	cp	r26, r9
     31c:	08 4a       	sbci	r16, 0xA8	; 168
     31e:	d7 3b       	cpi	r29, 0xB7	; 183
     320:	3b ce       	rjmp	.-906    	; 0xffffff98 <__eeprom_end+0xff7eff98>
     322:	01 6e       	ori	r16, 0xE1	; 225
     324:	84 bc       	out	0x24, r8	; 36
     326:	bf fd       	.word	0xfdbf	; ????
     328:	c1 2f       	mov	r28, r17
     32a:	3d 6c       	ori	r19, 0xCD	; 205
     32c:	74 31       	cpi	r23, 0x14	; 20
     32e:	9a bd       	out	0x2a, r25	; 42
     330:	56 83       	std	Z+6, r21	; 0x06
     332:	3d da       	rcall	.-2950   	; 0xfffff7ae <__eeprom_end+0xff7ef7ae>
     334:	3d 00       	.word	0x003d	; ????
     336:	c7 7f       	andi	r28, 0xF7	; 247
     338:	11 be       	out	0x31, r1	; 49
     33a:	d9 e4       	ldi	r29, 0x49	; 73
     33c:	bb 4c       	sbci	r27, 0xCB	; 203
     33e:	3e 91       	ld	r19, -X
     340:	6b aa       	std	Y+51, r6	; 0x33
     342:	aa be       	out	0x3a, r10	; 58
     344:	00 00       	nop
     346:	00 80       	ld	r0, Z
     348:	3f 07       	cpc	r19, r31
     34a:	63 42       	sbci	r22, 0x23	; 35
     34c:	36 b7       	in	r19, 0x36	; 54
     34e:	9b d8       	rcall	.-3786   	; 0xfffff486 <__eeprom_end+0xff7ef486>
     350:	a7 1a       	sub	r10, r23
     352:	39 68       	ori	r19, 0x89	; 137
     354:	56 18       	sub	r5, r6
     356:	ae ba       	out	0x1e, r10	; 30
     358:	ab 55       	subi	r26, 0x5B	; 91
     35a:	8c 1d       	adc	r24, r12
     35c:	3c b7       	in	r19, 0x3c	; 60
     35e:	cc 57       	subi	r28, 0x7C	; 124
     360:	63 bd       	out	0x23, r22	; 35
     362:	6d ed       	ldi	r22, 0xDD	; 221
     364:	fd 75       	andi	r31, 0x5D	; 93
     366:	3e f6       	brtc	.-114    	; 0x2f6 <__SREG__+0x2b7>
     368:	17 72       	andi	r17, 0x27	; 39
     36a:	31 bf       	out	0x31, r19	; 49
     36c:	00 00       	nop
     36e:	00 80       	ld	r0, Z
     370:	3f 07       	cpc	r19, r31
     372:	2c 7a       	andi	r18, 0xAC	; 172
     374:	a5 ba       	out	0x15, r10	; 21
     376:	6c c5       	rjmp	.+2776   	; 0xe50 <pinMode+0x12>
     378:	90 da       	rcall	.-2784   	; 0xfffff89a <__eeprom_end+0xff7ef89a>
     37a:	3b 93       	.word	0x933b	; ????
     37c:	65 fc       	sbrc	r6, 5
     37e:	8b bc       	out	0x2b, r8	; 43
     380:	53 f8       	bld	r5, 3
     382:	10 fd       	sbrc	r17, 0
     384:	3c 56       	subi	r19, 0x6C	; 108
     386:	92 83       	std	Z+2, r25	; 0x02
     388:	4d bd       	out	0x2d, r20	; 45
     38a:	87 9d       	mul	r24, r7
     38c:	3a b6       	in	r3, 0x3a	; 58
     38e:	3d cb       	rjmp	.-2438   	; 0xfffffa0a <__eeprom_end+0xff7efa0a>
     390:	c9 bf       	out	0x39, r28	; 57
     392:	5b be       	out	0x3b, r5	; 59
     394:	73 da       	rcall	.-2842   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
     396:	0f c9       	rjmp	.-3554   	; 0xfffff5b6 <__eeprom_end+0xff7ef5b6>
     398:	3f 05       	cpc	r19, r15
     39a:	a8 4c       	sbci	r26, 0xC8	; 200
     39c:	cd b2       	in	r12, 0x1d	; 29
     39e:	d4 4e       	sbci	r29, 0xE4	; 228
     3a0:	b9 38       	cpi	r27, 0x89	; 137
     3a2:	36 a9       	ldd	r19, Z+54	; 0x36
     3a4:	02 0c       	add	r0, r2
     3a6:	50 b9       	out	0x00, r21	; 0
     3a8:	91 86       	std	Z+9, r9	; 0x09
     3aa:	88 08       	sbc	r8, r8
     3ac:	3c a6       	std	Y+44, r3	; 0x2c
     3ae:	aa aa       	std	Y+50, r10	; 0x32
     3b0:	2a be       	out	0x3a, r2	; 58
     3b2:	00 00       	nop
     3b4:	00 80       	ld	r0, Z
     3b6:	3f 08       	sbc	r3, r15
     3b8:	00 00       	nop
     3ba:	00 be       	out	0x30, r0	; 48
     3bc:	92 24       	eor	r9, r2
     3be:	49 12       	cpse	r4, r25
     3c0:	3e ab       	std	Y+54, r19	; 0x36
     3c2:	aa aa       	std	Y+50, r10	; 0x32
     3c4:	2a be       	out	0x3a, r2	; 58
     3c6:	cd cc       	rjmp	.-1638   	; 0xfffffd62 <__eeprom_end+0xff7efd62>
     3c8:	cc 4c       	sbci	r28, 0xCC	; 204
     3ca:	3e 00       	.word	0x003e	; ????
     3cc:	00 00       	nop
     3ce:	80 be       	out	0x30, r8	; 48
     3d0:	ab aa       	std	Y+51, r10	; 0x33
     3d2:	aa aa       	std	Y+50, r10	; 0x32
     3d4:	3e 00       	.word	0x003e	; ????
     3d6:	00 00       	nop
     3d8:	00 bf       	out	0x30, r16	; 48
     3da:	00 00       	nop
     3dc:	00 80       	ld	r0, Z
     3de:	3f 00       	.word	0x003f	; ????
     3e0:	00 00       	nop
     3e2:	00 00       	nop
     3e4:	08 41       	sbci	r16, 0x18	; 24
     3e6:	78 d3       	rcall	.+1776   	; 0xad8 <_ZN5Print5writeEPKc+0x28>
     3e8:	bb 43       	sbci	r27, 0x3B	; 59
     3ea:	87 d1       	rcall	.+782    	; 0x6fa <_ZN5Nnode7computeEPf+0x96>
     3ec:	13 3d       	cpi	r17, 0xD3	; 211
     3ee:	19 0e       	add	r1, r25
     3f0:	3c c3       	rjmp	.+1656   	; 0xa6a <_GLOBAL__I_rx_buffer+0x92>
     3f2:	bd 42       	sbci	r27, 0x2D	; 45
     3f4:	82 ad       	ldd	r24, Z+58	; 0x3a
     3f6:	2b 3e       	cpi	r18, 0xEB	; 235
     3f8:	68 ec       	ldi	r22, 0xC8	; 200
     3fa:	82 76       	andi	r24, 0x62	; 98
     3fc:	be d9       	rcall	.-3204   	; 0xfffff77a <__eeprom_end+0xff7ef77a>
     3fe:	8f e1       	ldi	r24, 0x1F	; 31
     400:	a9 3e       	cpi	r26, 0xE9	; 233
     402:	4c 80       	ldd	r4, Y+4	; 0x04
     404:	ef ff       	.word	0xffef	; ????
     406:	be 01       	movw	r22, r28
     408:	c4 ff       	sbrs	r28, 4
     40a:	7f 3f       	cpi	r23, 0xFF	; 255
     40c:	00 00       	nop
     40e:	00 00       	nop
	...

00000411 <port_to_mode_PGM>:
     411:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     421:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000042b <port_to_output_PGM>:
     42b:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     43b:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000445 <port_to_input_PGM>:
     445:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     455:	00 01 00 00 03 01 06 01 09 01                       ..........

0000045f <digital_pin_to_port_PGM>:
     45f:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     46f:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     47f:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     48f:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     49f:	0b 0b 0b 0b 0b 0b                                   ......

000004a5 <digital_pin_to_bit_mask_PGM>:
     4a5:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     4b5:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     4c5:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     4d5:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     4e5:	04 08 10 20 40 80                                   ... @.

000004eb <digital_pin_to_timer_PGM>:
     4eb:	00 00 09 0a 02 08 0b 0c 0d 07 06 03 04 01 00 00     ................
	...
     517:	10 0f 0e 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000532 <__ctors_start>:
     532:	ec 04       	cpc	r14, r12
     534:	ae 0f       	add	r26, r30
     536:	d4 10       	cpse	r13, r4
     538:	11 12       	cpse	r1, r17
     53a:	bb 15       	cp	r27, r11
     53c:	67 19       	sub	r22, r7
     53e:	63 28       	or	r6, r3
     540:	bd 45       	sbci	r27, 0x5D	; 93
     542:	45 4d       	sbci	r20, 0xD5	; 213

00000544 <__ctors_end>:
     544:	3e 4d       	sbci	r19, 0xDE	; 222

00000546 <__dtors_end>:
     546:	11 24       	eor	r1, r1
     548:	1f be       	out	0x3f, r1	; 63
     54a:	cf ef       	ldi	r28, 0xFF	; 255
     54c:	d1 e2       	ldi	r29, 0x21	; 33
     54e:	de bf       	out	0x3e, r29	; 62
     550:	cd bf       	out	0x3d, r28	; 61

00000552 <__do_copy_data>:
     552:	15 e0       	ldi	r17, 0x05	; 5
     554:	a0 e0       	ldi	r26, 0x00	; 0
     556:	b2 e0       	ldi	r27, 0x02	; 2
     558:	e4 e0       	ldi	r30, 0x04	; 4
     55a:	f3 e0       	ldi	r31, 0x03	; 3
     55c:	01 e0       	ldi	r16, 0x01	; 1
     55e:	0b bf       	out	0x3b, r16	; 59
     560:	02 c0       	rjmp	.+4      	; 0x566 <__do_copy_data+0x14>
     562:	07 90       	elpm	r0, Z+
     564:	0d 92       	st	X+, r0
     566:	a8 3a       	cpi	r26, 0xA8	; 168
     568:	b1 07       	cpc	r27, r17
     56a:	d9 f7       	brne	.-10     	; 0x562 <__do_copy_data+0x10>

0000056c <__do_clear_bss>:
     56c:	14 e1       	ldi	r17, 0x14	; 20
     56e:	a8 ea       	ldi	r26, 0xA8	; 168
     570:	b5 e0       	ldi	r27, 0x05	; 5
     572:	01 c0       	rjmp	.+2      	; 0x576 <.do_clear_bss_start>

00000574 <.do_clear_bss_loop>:
     574:	1d 92       	st	X+, r1

00000576 <.do_clear_bss_start>:
     576:	ad 3b       	cpi	r26, 0xBD	; 189
     578:	b1 07       	cpc	r27, r17
     57a:	e1 f7       	brne	.-8      	; 0x574 <.do_clear_bss_loop>

0000057c <__do_global_ctors>:
     57c:	15 e0       	ldi	r17, 0x05	; 5
     57e:	c4 e4       	ldi	r28, 0x44	; 68
     580:	d5 e0       	ldi	r29, 0x05	; 5
     582:	04 c0       	rjmp	.+8      	; 0x58c <.do_global_ctors_start>

00000584 <.do_global_ctors_loop>:
     584:	22 97       	sbiw	r28, 0x02	; 2
     586:	fe 01       	movw	r30, r28
     588:	0e 94 71 81 	call	0x102e2	; 0x102e2 <__tablejump__>

0000058c <.do_global_ctors_start>:
     58c:	c2 33       	cpi	r28, 0x32	; 50
     58e:	d1 07       	cpc	r29, r17
     590:	c9 f7       	brne	.-14     	; 0x584 <.do_global_ctors_loop>
     592:	0e 94 84 1c 	call	0x3908	; 0x3908 <main>
     596:	0c 94 6c 7b 	jmp	0xf6d8	; 0xf6d8 <exit>

0000059a <__bad_interrupt>:
     59a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000059e <_ZN5NnodeC1Eh>:
#include "util.h"
#include <math.h>
#include <stdlib.h>
#include <string.h>

Nnode::Nnode (byte n_inputs) {
     59e:	0f 93       	push	r16
     5a0:	1f 93       	push	r17
     5a2:	8c 01       	movw	r16, r24
     5a4:	86 2f       	mov	r24, r22
	this->n_inputs = n_inputs;
     5a6:	f8 01       	movw	r30, r16
     5a8:	62 83       	std	Z+2, r22	; 0x02
	weight = (float*) malloc ((n_inputs+1)*sizeof(float));
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	01 96       	adiw	r24, 0x01	; 1
     5ae:	88 0f       	add	r24, r24
     5b0:	99 1f       	adc	r25, r25
     5b2:	88 0f       	add	r24, r24
     5b4:	99 1f       	adc	r25, r25
     5b6:	0e 94 20 79 	call	0xf240	; 0xf240 <malloc>
     5ba:	f8 01       	movw	r30, r16
     5bc:	80 83       	st	Z, r24
     5be:	91 83       	std	Z+1, r25	; 0x01
}
     5c0:	1f 91       	pop	r17
     5c2:	0f 91       	pop	r16
     5c4:	08 95       	ret

000005c6 <_ZN6NlayerC1Ehh>:
	acumulator += weight[n_inputs];                             // procesa el 'bias weight'
	// if (acumulator < -22.52) {acumulator = -22.52;}                   // esto es por algún bug 
	return sigmoide (acumulator);                               // sigmoid
}

Nlayer::Nlayer (byte n_nodes, byte n_inputs) {
     5c6:	7f 92       	push	r7
     5c8:	8f 92       	push	r8
     5ca:	9f 92       	push	r9
     5cc:	af 92       	push	r10
     5ce:	bf 92       	push	r11
     5d0:	cf 92       	push	r12
     5d2:	df 92       	push	r13
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	df 93       	push	r29
     5de:	cf 93       	push	r28
     5e0:	00 d0       	rcall	.+0      	; 0x5e2 <_ZN6NlayerC1Ehh+0x1c>
     5e2:	0f 92       	push	r0
     5e4:	cd b7       	in	r28, 0x3d	; 61
     5e6:	de b7       	in	r29, 0x3e	; 62
     5e8:	6c 01       	movw	r12, r24
     5ea:	a6 2e       	mov	r10, r22
     5ec:	74 2e       	mov	r7, r20
	this->n_nodes = n_nodes;
     5ee:	fc 01       	movw	r30, r24
     5f0:	62 83       	std	Z+2, r22	; 0x02
	node = (Nnode*) malloc (n_nodes*sizeof(Nnode));
     5f2:	83 e0       	ldi	r24, 0x03	; 3
     5f4:	68 9f       	mul	r22, r24
     5f6:	c0 01       	movw	r24, r0
     5f8:	11 24       	eor	r1, r1
     5fa:	0e 94 20 79 	call	0xf240	; 0xf240 <malloc>
     5fe:	f6 01       	movw	r30, r12
     600:	80 83       	st	Z, r24
     602:	91 83       	std	Z+1, r25	; 0x01
     604:	bb 24       	eor	r11, r11
     606:	ee 24       	eor	r14, r14
     608:	ff 24       	eor	r15, r15
	for (byte n=0; n<n_nodes; n++) {
		node [n] = Nnode (n_inputs);
     60a:	4e 01       	movw	r8, r28
     60c:	08 94       	sec
     60e:	81 1c       	adc	r8, r1
     610:	91 1c       	adc	r9, r1
     612:	15 c0       	rjmp	.+42     	; 0x63e <_ZN6NlayerC1Ehh+0x78>
     614:	f6 01       	movw	r30, r12
     616:	00 81       	ld	r16, Z
     618:	11 81       	ldd	r17, Z+1	; 0x01
     61a:	0e 0d       	add	r16, r14
     61c:	1f 1d       	adc	r17, r15
     61e:	c4 01       	movw	r24, r8
     620:	67 2d       	mov	r22, r7
     622:	0e 94 cf 02 	call	0x59e	; 0x59e <_ZN5NnodeC1Eh>
     626:	d8 01       	movw	r26, r16
     628:	f4 01       	movw	r30, r8
     62a:	83 e0       	ldi	r24, 0x03	; 3
     62c:	01 90       	ld	r0, Z+
     62e:	0d 92       	st	X+, r0
     630:	81 50       	subi	r24, 0x01	; 1
     632:	e1 f7       	brne	.-8      	; 0x62c <_ZN6NlayerC1Ehh+0x66>
}

Nlayer::Nlayer (byte n_nodes, byte n_inputs) {
	this->n_nodes = n_nodes;
	node = (Nnode*) malloc (n_nodes*sizeof(Nnode));
	for (byte n=0; n<n_nodes; n++) {
     634:	b3 94       	inc	r11
     636:	83 e0       	ldi	r24, 0x03	; 3
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	e8 0e       	add	r14, r24
     63c:	f9 1e       	adc	r15, r25
     63e:	ba 14       	cp	r11, r10
     640:	48 f3       	brcs	.-46     	; 0x614 <_ZN6NlayerC1Ehh+0x4e>
		node [n] = Nnode (n_inputs);
	}
}
     642:	0f 90       	pop	r0
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	cf 91       	pop	r28
     64a:	df 91       	pop	r29
     64c:	1f 91       	pop	r17
     64e:	0f 91       	pop	r16
     650:	ff 90       	pop	r15
     652:	ef 90       	pop	r14
     654:	df 90       	pop	r13
     656:	cf 90       	pop	r12
     658:	bf 90       	pop	r11
     65a:	af 90       	pop	r10
     65c:	9f 90       	pop	r9
     65e:	8f 90       	pop	r8
     660:	7f 90       	pop	r7
     662:	08 95       	ret

00000664 <_ZN5Nnode7computeEPf>:

void Nnode::set_weights (float *weight_) {
	memcpy (weight, weight_, (n_inputs+1)*sizeof(float));
}
	
float Nnode::compute (float* input) {
     664:	8f 92       	push	r8
     666:	9f 92       	push	r9
     668:	af 92       	push	r10
     66a:	bf 92       	push	r11
     66c:	cf 92       	push	r12
     66e:	df 92       	push	r13
     670:	ef 92       	push	r14
     672:	ff 92       	push	r15
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	5c 01       	movw	r10, r24
     67e:	4b 01       	movw	r8, r22
	double acumulator = 0;
	for (byte n=0; n<n_inputs; n++) {
     680:	fc 01       	movw	r30, r24
     682:	c2 80       	ldd	r12, Z+2	; 0x02
     684:	0f 2e       	mov	r0, r31
     686:	f0 e0       	ldi	r31, 0x00	; 0
     688:	ef 2e       	mov	r14, r31
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	ff 2e       	mov	r15, r31
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	0f 2f       	mov	r16, r31
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	1f 2f       	mov	r17, r31
     696:	f0 2d       	mov	r31, r0
     698:	dd 24       	eor	r13, r13
     69a:	c0 e0       	ldi	r28, 0x00	; 0
     69c:	d0 e0       	ldi	r29, 0x00	; 0
     69e:	19 c0       	rjmp	.+50     	; 0x6d2 <_ZN5Nnode7computeEPf+0x6e>
		acumulator += input[n]*weight[n];
     6a0:	f4 01       	movw	r30, r8
     6a2:	ec 0f       	add	r30, r28
     6a4:	fd 1f       	adc	r31, r29
     6a6:	ac 0f       	add	r26, r28
     6a8:	bd 1f       	adc	r27, r29
     6aa:	60 81       	ld	r22, Z
     6ac:	71 81       	ldd	r23, Z+1	; 0x01
     6ae:	82 81       	ldd	r24, Z+2	; 0x02
     6b0:	93 81       	ldd	r25, Z+3	; 0x03
     6b2:	2d 91       	ld	r18, X+
     6b4:	3d 91       	ld	r19, X+
     6b6:	4d 91       	ld	r20, X+
     6b8:	5c 91       	ld	r21, X
     6ba:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
     6be:	9b 01       	movw	r18, r22
     6c0:	ac 01       	movw	r20, r24
     6c2:	c8 01       	movw	r24, r16
     6c4:	b7 01       	movw	r22, r14
     6c6:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
     6ca:	7b 01       	movw	r14, r22
     6cc:	8c 01       	movw	r16, r24
	memcpy (weight, weight_, (n_inputs+1)*sizeof(float));
}
	
float Nnode::compute (float* input) {
	double acumulator = 0;
	for (byte n=0; n<n_inputs; n++) {
     6ce:	d3 94       	inc	r13
     6d0:	24 96       	adiw	r28, 0x04	; 4
     6d2:	f5 01       	movw	r30, r10
     6d4:	a0 81       	ld	r26, Z
     6d6:	b1 81       	ldd	r27, Z+1	; 0x01
     6d8:	dc 14       	cp	r13, r12
     6da:	10 f3       	brcs	.-60     	; 0x6a0 <_ZN5Nnode7computeEPf+0x3c>
		acumulator += input[n]*weight[n];
	}
	acumulator += weight[n_inputs];                             // procesa el 'bias weight'
	// if (acumulator < -22.52) {acumulator = -22.52;}                   // esto es por algún bug 
	return sigmoide (acumulator);                               // sigmoid
     6dc:	8c 2d       	mov	r24, r12
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	88 0f       	add	r24, r24
     6e2:	99 1f       	adc	r25, r25
     6e4:	88 0f       	add	r24, r24
     6e6:	99 1f       	adc	r25, r25
     6e8:	a8 0f       	add	r26, r24
     6ea:	b9 1f       	adc	r27, r25
     6ec:	c8 01       	movw	r24, r16
     6ee:	b7 01       	movw	r22, r14
     6f0:	2d 91       	ld	r18, X+
     6f2:	3d 91       	ld	r19, X+
     6f4:	4d 91       	ld	r20, X+
     6f6:	5c 91       	ld	r21, X
     6f8:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
     6fc:	0e 94 9b 68 	call	0xd136	; 0xd136 <_Z8sigmoided>
}
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	1f 91       	pop	r17
     706:	0f 91       	pop	r16
     708:	ff 90       	pop	r15
     70a:	ef 90       	pop	r14
     70c:	df 90       	pop	r13
     70e:	cf 90       	pop	r12
     710:	bf 90       	pop	r11
     712:	af 90       	pop	r10
     714:	9f 90       	pop	r9
     716:	8f 90       	pop	r8
     718:	08 95       	ret

0000071a <_ZN6Nlayer7computeEPfS0_>:
	for (byte n=0; n<n_nodes; n++) {
		node [n] = Nnode (n_inputs);
	}
}

void Nlayer::compute (float *input, float *output) {
     71a:	af 92       	push	r10
     71c:	bf 92       	push	r11
     71e:	cf 92       	push	r12
     720:	df 92       	push	r13
     722:	ff 92       	push	r15
     724:	0f 93       	push	r16
     726:	1f 93       	push	r17
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	ec 01       	movw	r28, r24
     72e:	5b 01       	movw	r10, r22
     730:	6a 01       	movw	r12, r20
     732:	ff 24       	eor	r15, r15
     734:	1a c0       	rjmp	.+52     	; 0x76a <_ZN6Nlayer7computeEPfS0_+0x50>
	for (byte n=0; n<n_nodes; n++) {
		output[n] = node[n].compute(input);
     736:	0f 2d       	mov	r16, r15
     738:	10 e0       	ldi	r17, 0x00	; 0
     73a:	98 01       	movw	r18, r16
     73c:	22 0f       	add	r18, r18
     73e:	33 1f       	adc	r19, r19
     740:	20 0f       	add	r18, r16
     742:	31 1f       	adc	r19, r17
     744:	88 81       	ld	r24, Y
     746:	99 81       	ldd	r25, Y+1	; 0x01
     748:	82 0f       	add	r24, r18
     74a:	93 1f       	adc	r25, r19
     74c:	b5 01       	movw	r22, r10
     74e:	0e 94 32 03 	call	0x664	; 0x664 <_ZN5Nnode7computeEPf>
     752:	00 0f       	add	r16, r16
     754:	11 1f       	adc	r17, r17
     756:	00 0f       	add	r16, r16
     758:	11 1f       	adc	r17, r17
     75a:	0c 0d       	add	r16, r12
     75c:	1d 1d       	adc	r17, r13
     75e:	f8 01       	movw	r30, r16
     760:	60 83       	st	Z, r22
     762:	71 83       	std	Z+1, r23	; 0x01
     764:	82 83       	std	Z+2, r24	; 0x02
     766:	93 83       	std	Z+3, r25	; 0x03
		node [n] = Nnode (n_inputs);
	}
}

void Nlayer::compute (float *input, float *output) {
	for (byte n=0; n<n_nodes; n++) {
     768:	f3 94       	inc	r15
     76a:	8a 81       	ldd	r24, Y+2	; 0x02
     76c:	f8 16       	cp	r15, r24
     76e:	18 f3       	brcs	.-58     	; 0x736 <_ZN6Nlayer7computeEPfS0_+0x1c>
		output[n] = node[n].compute(input);
	}
}
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	1f 91       	pop	r17
     776:	0f 91       	pop	r16
     778:	ff 90       	pop	r15
     77a:	df 90       	pop	r13
     77c:	cf 90       	pop	r12
     77e:	bf 90       	pop	r11
     780:	af 90       	pop	r10
     782:	08 95       	ret

00000784 <_ZN5Nnode11set_weightsEPf>:
Nnode::Nnode (byte n_inputs) {
	this->n_inputs = n_inputs;
	weight = (float*) malloc ((n_inputs+1)*sizeof(float));
}

void Nnode::set_weights (float *weight_) {
     784:	fc 01       	movw	r30, r24
	memcpy (weight, weight_, (n_inputs+1)*sizeof(float));
     786:	22 81       	ldd	r18, Z+2	; 0x02
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	2f 5f       	subi	r18, 0xFF	; 255
     78c:	3f 4f       	sbci	r19, 0xFF	; 255
     78e:	22 0f       	add	r18, r18
     790:	33 1f       	adc	r19, r19
     792:	22 0f       	add	r18, r18
     794:	33 1f       	adc	r19, r19
     796:	80 81       	ld	r24, Z
     798:	91 81       	ldd	r25, Z+1	; 0x01
     79a:	a9 01       	movw	r20, r18
     79c:	0e 94 6f 7b 	call	0xf6de	; 0xf6de <memcpy>
}
     7a0:	08 95       	ret

000007a2 <__vector_25>:
  }
}

// declaración de ISRs

SIGNAL (USART0_RX_vect) {            // SIG_USART0_RECV
     7a2:	1f 92       	push	r1
     7a4:	0f 92       	push	r0
     7a6:	0f b6       	in	r0, 0x3f	; 63
     7a8:	0f 92       	push	r0
     7aa:	0b b6       	in	r0, 0x3b	; 59
     7ac:	0f 92       	push	r0
     7ae:	11 24       	eor	r1, r1
     7b0:	2f 93       	push	r18
     7b2:	3f 93       	push	r19
     7b4:	4f 93       	push	r20
     7b6:	8f 93       	push	r24
     7b8:	9f 93       	push	r25
     7ba:	ef 93       	push	r30
     7bc:	ff 93       	push	r31
	unsigned char c  =  UDR0;
     7be:	40 91 c6 00 	lds	r20, 0x00C6
ring_buffer rx_buffer2  =  { { 0 }, 0, 0 };
// ring_buffer rx_buffer3  =  { { 0 }, 0, 0 };

inline void store_char (unsigned char c, ring_buffer *rx_buffer)
{
  int i = (unsigned int)(rx_buffer->head + 1) % RX_BUFFER_SIZE;
     7c2:	e0 91 e8 05 	lds	r30, 0x05E8
     7c6:	f0 91 e9 05 	lds	r31, 0x05E9

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != rx_buffer->tail) {
     7ca:	31 96       	adiw	r30, 0x01	; 1
     7cc:	9f 01       	movw	r18, r30
     7ce:	2f 73       	andi	r18, 0x3F	; 63
     7d0:	30 70       	andi	r19, 0x00	; 0
     7d2:	31 97       	sbiw	r30, 0x01	; 1
     7d4:	80 91 ea 05 	lds	r24, 0x05EA
     7d8:	90 91 eb 05 	lds	r25, 0x05EB
     7dc:	28 17       	cp	r18, r24
     7de:	39 07       	cpc	r19, r25
     7e0:	39 f0       	breq	.+14     	; 0x7f0 <__vector_25+0x4e>
    rx_buffer->buffer[rx_buffer->head] = c;
     7e2:	e8 55       	subi	r30, 0x58	; 88
     7e4:	fa 4f       	sbci	r31, 0xFA	; 250
     7e6:	40 83       	st	Z, r20
    rx_buffer->head = i;
     7e8:	30 93 e9 05 	sts	0x05E9, r19
     7ec:	20 93 e8 05 	sts	0x05E8, r18
// declaración de ISRs

SIGNAL (USART0_RX_vect) {            // SIG_USART0_RECV
	unsigned char c  =  UDR0;
	store_char(c, &rx_buffer);
}
     7f0:	ff 91       	pop	r31
     7f2:	ef 91       	pop	r30
     7f4:	9f 91       	pop	r25
     7f6:	8f 91       	pop	r24
     7f8:	4f 91       	pop	r20
     7fa:	3f 91       	pop	r19
     7fc:	2f 91       	pop	r18
     7fe:	0f 90       	pop	r0
     800:	0b be       	out	0x3b, r0	; 59
     802:	0f 90       	pop	r0
     804:	0f be       	out	0x3f, r0	; 63
     806:	0f 90       	pop	r0
     808:	1f 90       	pop	r1
     80a:	18 95       	reti

0000080c <__vector_51>:
	unsigned char c = UDR1;
	store_char(c, &rx_buffer1);
}
*/

SIGNAL (USART2_RX_vect) {
     80c:	1f 92       	push	r1
     80e:	0f 92       	push	r0
     810:	0f b6       	in	r0, 0x3f	; 63
     812:	0f 92       	push	r0
     814:	0b b6       	in	r0, 0x3b	; 59
     816:	0f 92       	push	r0
     818:	11 24       	eor	r1, r1
     81a:	2f 93       	push	r18
     81c:	3f 93       	push	r19
     81e:	4f 93       	push	r20
     820:	8f 93       	push	r24
     822:	9f 93       	push	r25
     824:	ef 93       	push	r30
     826:	ff 93       	push	r31
	unsigned char c = UDR2;
     828:	40 91 d6 00 	lds	r20, 0x00D6
ring_buffer rx_buffer2  =  { { 0 }, 0, 0 };
// ring_buffer rx_buffer3  =  { { 0 }, 0, 0 };

inline void store_char (unsigned char c, ring_buffer *rx_buffer)
{
  int i = (unsigned int)(rx_buffer->head + 1) % RX_BUFFER_SIZE;
     82c:	e0 91 2c 06 	lds	r30, 0x062C
     830:	f0 91 2d 06 	lds	r31, 0x062D

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != rx_buffer->tail) {
     834:	31 96       	adiw	r30, 0x01	; 1
     836:	9f 01       	movw	r18, r30
     838:	2f 73       	andi	r18, 0x3F	; 63
     83a:	30 70       	andi	r19, 0x00	; 0
     83c:	31 97       	sbiw	r30, 0x01	; 1
     83e:	80 91 2e 06 	lds	r24, 0x062E
     842:	90 91 2f 06 	lds	r25, 0x062F
     846:	28 17       	cp	r18, r24
     848:	39 07       	cpc	r19, r25
     84a:	39 f0       	breq	.+14     	; 0x85a <__vector_51+0x4e>
    rx_buffer->buffer[rx_buffer->head] = c;
     84c:	e4 51       	subi	r30, 0x14	; 20
     84e:	fa 4f       	sbci	r31, 0xFA	; 250
     850:	40 83       	st	Z, r20
    rx_buffer->head = i;
     852:	30 93 2d 06 	sts	0x062D, r19
     856:	20 93 2c 06 	sts	0x062C, r18
	unsigned char c = UDR2;
	store_char(c, &rx_buffer2);            // esto no iria si va el harcodeo
	//kbza.comm.leer_serial (c);           // este harcodeo es para acelerar la cosa
	// pero provoca que se cuelgue al interpretar comandos del Control remoto, porque nunca sale de la interrupcion serial
	// corregir eso haciendo un flag o algo                 
}
     85a:	ff 91       	pop	r31
     85c:	ef 91       	pop	r30
     85e:	9f 91       	pop	r25
     860:	8f 91       	pop	r24
     862:	4f 91       	pop	r20
     864:	3f 91       	pop	r19
     866:	2f 91       	pop	r18
     868:	0f 90       	pop	r0
     86a:	0b be       	out	0x3b, r0	; 59
     86c:	0f 90       	pop	r0
     86e:	0f be       	out	0x3f, r0	; 63
     870:	0f 90       	pop	r0
     872:	1f 90       	pop	r1
     874:	18 95       	reti

00000876 <_ZN14HardwareSerial5beginEl>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(long baud)
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	ec 01       	movw	r28, r24
     87c:	9a 01       	movw	r18, r20
     87e:	ab 01       	movw	r20, r22
     880:	e8 85       	ldd	r30, Y+8	; 0x08
     882:	f9 85       	ldd	r31, Y+9	; 0x09

#if F_CPU == 16000000UL
  // hardcoded exception for compatibility with the bootloader shipped
  // with the Duemilanove and previous boards and the firmware on the 8U2
  // on the Uno and Mega 2560.
  if (baud == 57600) {
     884:	20 30       	cpi	r18, 0x00	; 0
     886:	81 ee       	ldi	r24, 0xE1	; 225
     888:	38 07       	cpc	r19, r24
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	48 07       	cpc	r20, r24
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	58 07       	cpc	r21, r24
     892:	09 f4       	brne	.+2      	; 0x896 <_ZN14HardwareSerial5beginEl+0x20>
     894:	49 c0       	rjmp	.+146    	; 0x928 <_ZN14HardwareSerial5beginEl+0xb2>
    use_u2x = false;
  }
#endif
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	0a 88       	ldd	r0, Y+18	; 0x12
     89c:	02 c0       	rjmp	.+4      	; 0x8a2 <_ZN14HardwareSerial5beginEl+0x2c>
     89e:	88 0f       	add	r24, r24
     8a0:	99 1f       	adc	r25, r25
     8a2:	0a 94       	dec	r0
     8a4:	e2 f7       	brpl	.-8      	; 0x89e <_ZN14HardwareSerial5beginEl+0x28>
     8a6:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	79 e0       	ldi	r23, 0x09	; 9
     8ac:	8d e3       	ldi	r24, 0x3D	; 61
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	0e 94 54 81 	call	0x102a8	; 0x102a8 <__divmodsi4>
     8b4:	21 50       	subi	r18, 0x01	; 1
     8b6:	30 40       	sbci	r19, 0x00	; 0
     8b8:	40 40       	sbci	r20, 0x00	; 0
     8ba:	50 40       	sbci	r21, 0x00	; 0
     8bc:	ca 01       	movw	r24, r20
     8be:	b9 01       	movw	r22, r18
     8c0:	22 e0       	ldi	r18, 0x02	; 2
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	40 e0       	ldi	r20, 0x00	; 0
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	0e 94 54 81 	call	0x102a8	; 0x102a8 <__divmodsi4>
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     8cc:	ec 81       	ldd	r30, Y+4	; 0x04
     8ce:	fd 81       	ldd	r31, Y+5	; 0x05
     8d0:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     8d2:	ee 81       	ldd	r30, Y+6	; 0x06
     8d4:	ff 81       	ldd	r31, Y+7	; 0x07
     8d6:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
     8d8:	ea 85       	ldd	r30, Y+10	; 0x0a
     8da:	fb 85       	ldd	r31, Y+11	; 0x0b
     8dc:	20 81       	ld	r18, Z
     8de:	41 e0       	ldi	r20, 0x01	; 1
     8e0:	50 e0       	ldi	r21, 0x00	; 0
     8e2:	ca 01       	movw	r24, r20
     8e4:	0e 84       	ldd	r0, Y+14	; 0x0e
     8e6:	02 c0       	rjmp	.+4      	; 0x8ec <_ZN14HardwareSerial5beginEl+0x76>
     8e8:	88 0f       	add	r24, r24
     8ea:	99 1f       	adc	r25, r25
     8ec:	0a 94       	dec	r0
     8ee:	e2 f7       	brpl	.-8      	; 0x8e8 <_ZN14HardwareSerial5beginEl+0x72>
     8f0:	28 2b       	or	r18, r24
     8f2:	20 83       	st	Z, r18
  sbi(*_ucsrb, _txen);
     8f4:	ea 85       	ldd	r30, Y+10	; 0x0a
     8f6:	fb 85       	ldd	r31, Y+11	; 0x0b
     8f8:	20 81       	ld	r18, Z
     8fa:	ca 01       	movw	r24, r20
     8fc:	0f 84       	ldd	r0, Y+15	; 0x0f
     8fe:	02 c0       	rjmp	.+4      	; 0x904 <_ZN14HardwareSerial5beginEl+0x8e>
     900:	88 0f       	add	r24, r24
     902:	99 1f       	adc	r25, r25
     904:	0a 94       	dec	r0
     906:	e2 f7       	brpl	.-8      	; 0x900 <_ZN14HardwareSerial5beginEl+0x8a>
     908:	28 2b       	or	r18, r24
     90a:	20 83       	st	Z, r18
  sbi(*_ucsrb, _rxcie);
     90c:	ea 85       	ldd	r30, Y+10	; 0x0a
     90e:	fb 85       	ldd	r31, Y+11	; 0x0b
     910:	80 81       	ld	r24, Z
     912:	08 88       	ldd	r0, Y+16	; 0x10
     914:	02 c0       	rjmp	.+4      	; 0x91a <_ZN14HardwareSerial5beginEl+0xa4>
     916:	44 0f       	add	r20, r20
     918:	55 1f       	adc	r21, r21
     91a:	0a 94       	dec	r0
     91c:	e2 f7       	brpl	.-8      	; 0x916 <_ZN14HardwareSerial5beginEl+0xa0>
     91e:	84 2b       	or	r24, r20
     920:	80 83       	st	Z, r24
}
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	08 95       	ret
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
     928:	10 82       	st	Z, r1
     92a:	20 e1       	ldi	r18, 0x10	; 16
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	ce cf       	rjmp	.-100    	; 0x8cc <_ZN14HardwareSerial5beginEl+0x56>

00000930 <_ZN14HardwareSerial9availableEv>:
  cbi(*_ucsrb, _rxcie);  
}

int HardwareSerial::available(void)
{
  return (unsigned int)(RX_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % RX_BUFFER_SIZE;
     930:	dc 01       	movw	r26, r24
     932:	12 96       	adiw	r26, 0x02	; 2
     934:	ed 91       	ld	r30, X+
     936:	fc 91       	ld	r31, X
     938:	13 97       	sbiw	r26, 0x03	; 3
     93a:	e0 5c       	subi	r30, 0xC0	; 192
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	21 91       	ld	r18, Z+
     940:	31 91       	ld	r19, Z+
     942:	80 81       	ld	r24, Z
     944:	91 81       	ldd	r25, Z+1	; 0x01
     946:	28 1b       	sub	r18, r24
     948:	39 0b       	sbc	r19, r25
     94a:	2f 73       	andi	r18, 0x3F	; 63
     94c:	30 70       	andi	r19, 0x00	; 0
}
     94e:	c9 01       	movw	r24, r18
     950:	08 95       	ret

00000952 <_ZN14HardwareSerial4readEv>:
}

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     952:	dc 01       	movw	r26, r24
     954:	12 96       	adiw	r26, 0x02	; 2
     956:	ed 91       	ld	r30, X+
     958:	fc 91       	ld	r31, X
     95a:	13 97       	sbiw	r26, 0x03	; 3
     95c:	df 01       	movw	r26, r30
     95e:	ae 5b       	subi	r26, 0xBE	; 190
     960:	bf 4f       	sbci	r27, 0xFF	; 255
     962:	2d 91       	ld	r18, X+
     964:	3c 91       	ld	r19, X
     966:	11 97       	sbiw	r26, 0x01	; 1
     968:	e0 5c       	subi	r30, 0xC0	; 192
     96a:	ff 4f       	sbci	r31, 0xFF	; 255
     96c:	80 81       	ld	r24, Z
     96e:	91 81       	ldd	r25, Z+1	; 0x01
     970:	e0 54       	subi	r30, 0x40	; 64
     972:	f0 40       	sbci	r31, 0x00	; 0
     974:	82 17       	cp	r24, r18
     976:	93 07       	cpc	r25, r19
     978:	19 f4       	brne	.+6      	; 0x980 <_ZN14HardwareSerial4readEv+0x2e>
     97a:	2f ef       	ldi	r18, 0xFF	; 255
     97c:	3f ef       	ldi	r19, 0xFF	; 255
     97e:	0b c0       	rjmp	.+22     	; 0x996 <_ZN14HardwareSerial4readEv+0x44>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     980:	e2 0f       	add	r30, r18
     982:	f3 1f       	adc	r31, r19
     984:	80 81       	ld	r24, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % RX_BUFFER_SIZE;
     986:	2f 5f       	subi	r18, 0xFF	; 255
     988:	3f 4f       	sbci	r19, 0xFF	; 255
     98a:	2f 73       	andi	r18, 0x3F	; 63
     98c:	30 70       	andi	r19, 0x00	; 0
     98e:	2d 93       	st	X+, r18
     990:	3c 93       	st	X, r19
    return c;
     992:	28 2f       	mov	r18, r24
     994:	30 e0       	ldi	r19, 0x00	; 0
  }
}
     996:	c9 01       	movw	r24, r18
     998:	08 95       	ret

0000099a <_ZN14HardwareSerial5flushEv>:
  // don't reverse this or there may be problems if the RX interrupt
  // occurs after reading the value of rx_buffer_head but before writing
  // the value to rx_buffer_tail; the previous value of rx_buffer_head
  // may be written to rx_buffer_tail, making it appear as if the buffer
  // were full, not empty.
  _rx_buffer->head = _rx_buffer->tail;
     99a:	dc 01       	movw	r26, r24
     99c:	12 96       	adiw	r26, 0x02	; 2
     99e:	ed 91       	ld	r30, X+
     9a0:	fc 91       	ld	r31, X
     9a2:	13 97       	sbiw	r26, 0x03	; 3
     9a4:	ee 5b       	subi	r30, 0xBE	; 190
     9a6:	ff 4f       	sbci	r31, 0xFF	; 255
     9a8:	80 81       	ld	r24, Z
     9aa:	91 81       	ldd	r25, Z+1	; 0x01
     9ac:	92 93       	st	-Z, r25
     9ae:	82 93       	st	-Z, r24
}
     9b0:	08 95       	ret

000009b2 <_ZN14HardwareSerial5writeEh>:

void HardwareSerial::write(uint8_t c)
     9b2:	fc 01       	movw	r30, r24
{
  while (!((*_ucsra) & (1 << _udre)))
     9b4:	a0 85       	ldd	r26, Z+8	; 0x08
     9b6:	b1 85       	ldd	r27, Z+9	; 0x09
     9b8:	21 89       	ldd	r18, Z+17	; 0x11
     9ba:	8c 91       	ld	r24, X
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	02 2e       	mov	r0, r18
     9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <_ZN14HardwareSerial5writeEh+0x14>
     9c2:	95 95       	asr	r25
     9c4:	87 95       	ror	r24
     9c6:	0a 94       	dec	r0
     9c8:	e2 f7       	brpl	.-8      	; 0x9c2 <_ZN14HardwareSerial5writeEh+0x10>
     9ca:	80 ff       	sbrs	r24, 0
     9cc:	f6 cf       	rjmp	.-20     	; 0x9ba <_ZN14HardwareSerial5writeEh+0x8>
    ;

  *_udr = c;
     9ce:	04 84       	ldd	r0, Z+12	; 0x0c
     9d0:	f5 85       	ldd	r31, Z+13	; 0x0d
     9d2:	e0 2d       	mov	r30, r0
     9d4:	60 83       	st	Z, r22
}
     9d6:	08 95       	ret

000009d8 <_GLOBAL__I_rx_buffer>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
     9d8:	28 ef       	ldi	r18, 0xF8	; 248
     9da:	33 e0       	ldi	r19, 0x03	; 3
     9dc:	30 93 31 06 	sts	0x0631, r19
     9e0:	20 93 30 06 	sts	0x0630, r18
{
  _rx_buffer = rx_buffer;
     9e4:	88 ea       	ldi	r24, 0xA8	; 168
     9e6:	95 e0       	ldi	r25, 0x05	; 5
     9e8:	90 93 33 06 	sts	0x0633, r25
     9ec:	80 93 32 06 	sts	0x0632, r24
  _ubrrh = ubrrh;
     9f0:	85 ec       	ldi	r24, 0xC5	; 197
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	90 93 35 06 	sts	0x0635, r25
     9f8:	80 93 34 06 	sts	0x0634, r24
  _ubrrl = ubrrl;
     9fc:	84 ec       	ldi	r24, 0xC4	; 196
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	90 93 37 06 	sts	0x0637, r25
     a04:	80 93 36 06 	sts	0x0636, r24
  _ucsra = ucsra;
     a08:	80 ec       	ldi	r24, 0xC0	; 192
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	90 93 39 06 	sts	0x0639, r25
     a10:	80 93 38 06 	sts	0x0638, r24
  _ucsrb = ucsrb;
     a14:	81 ec       	ldi	r24, 0xC1	; 193
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	90 93 3b 06 	sts	0x063B, r25
     a1c:	80 93 3a 06 	sts	0x063A, r24
  _udr = udr;
     a20:	86 ec       	ldi	r24, 0xC6	; 198
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	90 93 3d 06 	sts	0x063D, r25
     a28:	80 93 3c 06 	sts	0x063C, r24
  _rxen = rxen;
     a2c:	e4 e0       	ldi	r30, 0x04	; 4
     a2e:	e0 93 3e 06 	sts	0x063E, r30
  _txen = txen;
     a32:	73 e0       	ldi	r23, 0x03	; 3
     a34:	70 93 3f 06 	sts	0x063F, r23
  _rxcie = rxcie;
     a38:	67 e0       	ldi	r22, 0x07	; 7
     a3a:	60 93 40 06 	sts	0x0640, r22
  _udre = udre;
     a3e:	55 e0       	ldi	r21, 0x05	; 5
     a40:	50 93 41 06 	sts	0x0641, r21
  _u2x = u2x;
     a44:	41 e0       	ldi	r20, 0x01	; 1
     a46:	40 93 42 06 	sts	0x0642, r20

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
     a4a:	30 93 44 06 	sts	0x0644, r19
     a4e:	20 93 43 06 	sts	0x0643, r18
{
  _rx_buffer = rx_buffer;
     a52:	8c ee       	ldi	r24, 0xEC	; 236
     a54:	95 e0       	ldi	r25, 0x05	; 5
     a56:	90 93 46 06 	sts	0x0646, r25
     a5a:	80 93 45 06 	sts	0x0645, r24
  _ubrrh = ubrrh;
     a5e:	85 ed       	ldi	r24, 0xD5	; 213
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	90 93 48 06 	sts	0x0648, r25
     a66:	80 93 47 06 	sts	0x0647, r24
  _ubrrl = ubrrl;
     a6a:	84 ed       	ldi	r24, 0xD4	; 212
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	90 93 4a 06 	sts	0x064A, r25
     a72:	80 93 49 06 	sts	0x0649, r24
  _ucsra = ucsra;
     a76:	80 ed       	ldi	r24, 0xD0	; 208
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	90 93 4c 06 	sts	0x064C, r25
     a7e:	80 93 4b 06 	sts	0x064B, r24
  _ucsrb = ucsrb;
     a82:	81 ed       	ldi	r24, 0xD1	; 209
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	90 93 4e 06 	sts	0x064E, r25
     a8a:	80 93 4d 06 	sts	0x064D, r24
  _udr = udr;
     a8e:	86 ed       	ldi	r24, 0xD6	; 214
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	90 93 50 06 	sts	0x0650, r25
     a96:	80 93 4f 06 	sts	0x064F, r24
  _rxen = rxen;
     a9a:	e0 93 51 06 	sts	0x0651, r30
  _txen = txen;
     a9e:	70 93 52 06 	sts	0x0652, r23
  _rxcie = rxcie;
     aa2:	60 93 53 06 	sts	0x0653, r22
  _udre = udre;
     aa6:	50 93 54 06 	sts	0x0654, r21
  _u2x = u2x;
     aaa:	40 93 55 06 	sts	0x0655, r20

// Preinstantiate Objects //////////////////////////////////////////////////////

HardwareSerial Serial (&rx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRE0, U2X0);
// HardwareSerial Serial1 (&rx_buffer1, &UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UDR1, RXEN1, TXEN1, RXCIE1, UDRE1, U2X1);
HardwareSerial Serial2 (&rx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRE2, U2X2);
     aae:	08 95       	ret

00000ab0 <_ZN5Print5writeEPKc>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
     ab0:	0f 93       	push	r16
     ab2:	1f 93       	push	r17
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	8c 01       	movw	r16, r24
     aba:	eb 01       	movw	r28, r22
     abc:	09 c0       	rjmp	.+18     	; 0xad0 <_ZN5Print5writeEPKc+0x20>
{
  while (*str)
    write(*str++);
     abe:	21 96       	adiw	r28, 0x01	; 1
     ac0:	d8 01       	movw	r26, r16
     ac2:	ed 91       	ld	r30, X+
     ac4:	fc 91       	ld	r31, X
     ac6:	01 90       	ld	r0, Z+
     ac8:	f0 81       	ld	r31, Z
     aca:	e0 2d       	mov	r30, r0
     acc:	c8 01       	movw	r24, r16
     ace:	09 95       	icall
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
{
  while (*str)
     ad0:	68 81       	ld	r22, Y
     ad2:	66 23       	and	r22, r22
     ad4:	a1 f7       	brne	.-24     	; 0xabe <_ZN5Print5writeEPKc+0xe>
    write(*str++);
}
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	0f 91       	pop	r16
     ade:	08 95       	ret

00000ae0 <_ZN5Print5writeEPKhj>:

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
     ae0:	ef 92       	push	r14
     ae2:	ff 92       	push	r15
     ae4:	0f 93       	push	r16
     ae6:	1f 93       	push	r17
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
     aec:	8c 01       	movw	r16, r24
     aee:	7b 01       	movw	r14, r22
     af0:	ea 01       	movw	r28, r20
     af2:	0c c0       	rjmp	.+24     	; 0xb0c <_ZN5Print5writeEPKhj+0x2c>
{
  while (size--)
    write(*buffer++);
     af4:	d7 01       	movw	r26, r14
     af6:	6d 91       	ld	r22, X+
     af8:	7d 01       	movw	r14, r26
     afa:	d8 01       	movw	r26, r16
     afc:	ed 91       	ld	r30, X+
     afe:	fc 91       	ld	r31, X
     b00:	01 90       	ld	r0, Z+
     b02:	f0 81       	ld	r31, Z
     b04:	e0 2d       	mov	r30, r0
     b06:	c8 01       	movw	r24, r16
     b08:	09 95       	icall
     b0a:	21 97       	sbiw	r28, 0x01	; 1
}

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
{
  while (size--)
     b0c:	20 97       	sbiw	r28, 0x00	; 0
     b0e:	91 f7       	brne	.-28     	; 0xaf4 <_ZN5Print5writeEPKhj+0x14>
    write(*buffer++);
}
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	1f 91       	pop	r17
     b16:	0f 91       	pop	r16
     b18:	ff 90       	pop	r15
     b1a:	ef 90       	pop	r14
     b1c:	08 95       	ret

00000b1e <_ZN5Print5printEPKc>:
	for (int i = 0; i < s.length(); i++) {
    write(s[i]);
  }
}

void Print::print(const char str[])
     b1e:	dc 01       	movw	r26, r24
{
  write(str);
     b20:	ed 91       	ld	r30, X+
     b22:	fc 91       	ld	r31, X
     b24:	02 80       	ldd	r0, Z+2	; 0x02
     b26:	f3 81       	ldd	r31, Z+3	; 0x03
     b28:	e0 2d       	mov	r30, r0
     b2a:	09 95       	icall
}
     b2c:	08 95       	ret

00000b2e <__vector_1>:
}
*/

#if defined(EICRA) && defined(EICRB)

SIGNAL(INT0_vect) {
     b2e:	1f 92       	push	r1
     b30:	0f 92       	push	r0
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	0f 92       	push	r0
     b36:	0b b6       	in	r0, 0x3b	; 59
     b38:	0f 92       	push	r0
     b3a:	11 24       	eor	r1, r1
     b3c:	2f 93       	push	r18
     b3e:	3f 93       	push	r19
     b40:	4f 93       	push	r20
     b42:	5f 93       	push	r21
     b44:	6f 93       	push	r22
     b46:	7f 93       	push	r23
     b48:	8f 93       	push	r24
     b4a:	9f 93       	push	r25
     b4c:	af 93       	push	r26
     b4e:	bf 93       	push	r27
     b50:	ef 93       	push	r30
     b52:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_2])
     b54:	80 91 5a 06 	lds	r24, 0x065A
     b58:	90 91 5b 06 	lds	r25, 0x065B
     b5c:	89 2b       	or	r24, r25
     b5e:	29 f0       	breq	.+10     	; 0xb6a <__vector_1+0x3c>
    intFunc[EXTERNAL_INT_2]();
     b60:	e0 91 5a 06 	lds	r30, 0x065A
     b64:	f0 91 5b 06 	lds	r31, 0x065B
     b68:	09 95       	icall
}
     b6a:	ff 91       	pop	r31
     b6c:	ef 91       	pop	r30
     b6e:	bf 91       	pop	r27
     b70:	af 91       	pop	r26
     b72:	9f 91       	pop	r25
     b74:	8f 91       	pop	r24
     b76:	7f 91       	pop	r23
     b78:	6f 91       	pop	r22
     b7a:	5f 91       	pop	r21
     b7c:	4f 91       	pop	r20
     b7e:	3f 91       	pop	r19
     b80:	2f 91       	pop	r18
     b82:	0f 90       	pop	r0
     b84:	0b be       	out	0x3b, r0	; 59
     b86:	0f 90       	pop	r0
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	0f 90       	pop	r0
     b8c:	1f 90       	pop	r1
     b8e:	18 95       	reti

00000b90 <__vector_2>:

SIGNAL(INT1_vect) {
     b90:	1f 92       	push	r1
     b92:	0f 92       	push	r0
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	0f 92       	push	r0
     b98:	0b b6       	in	r0, 0x3b	; 59
     b9a:	0f 92       	push	r0
     b9c:	11 24       	eor	r1, r1
     b9e:	2f 93       	push	r18
     ba0:	3f 93       	push	r19
     ba2:	4f 93       	push	r20
     ba4:	5f 93       	push	r21
     ba6:	6f 93       	push	r22
     ba8:	7f 93       	push	r23
     baa:	8f 93       	push	r24
     bac:	9f 93       	push	r25
     bae:	af 93       	push	r26
     bb0:	bf 93       	push	r27
     bb2:	ef 93       	push	r30
     bb4:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_3])
     bb6:	80 91 5c 06 	lds	r24, 0x065C
     bba:	90 91 5d 06 	lds	r25, 0x065D
     bbe:	89 2b       	or	r24, r25
     bc0:	29 f0       	breq	.+10     	; 0xbcc <__vector_2+0x3c>
    intFunc[EXTERNAL_INT_3]();
     bc2:	e0 91 5c 06 	lds	r30, 0x065C
     bc6:	f0 91 5d 06 	lds	r31, 0x065D
     bca:	09 95       	icall
}
     bcc:	ff 91       	pop	r31
     bce:	ef 91       	pop	r30
     bd0:	bf 91       	pop	r27
     bd2:	af 91       	pop	r26
     bd4:	9f 91       	pop	r25
     bd6:	8f 91       	pop	r24
     bd8:	7f 91       	pop	r23
     bda:	6f 91       	pop	r22
     bdc:	5f 91       	pop	r21
     bde:	4f 91       	pop	r20
     be0:	3f 91       	pop	r19
     be2:	2f 91       	pop	r18
     be4:	0f 90       	pop	r0
     be6:	0b be       	out	0x3b, r0	; 59
     be8:	0f 90       	pop	r0
     bea:	0f be       	out	0x3f, r0	; 63
     bec:	0f 90       	pop	r0
     bee:	1f 90       	pop	r1
     bf0:	18 95       	reti

00000bf2 <__vector_3>:

SIGNAL(INT2_vect) {
     bf2:	1f 92       	push	r1
     bf4:	0f 92       	push	r0
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	0f 92       	push	r0
     bfa:	0b b6       	in	r0, 0x3b	; 59
     bfc:	0f 92       	push	r0
     bfe:	11 24       	eor	r1, r1
     c00:	2f 93       	push	r18
     c02:	3f 93       	push	r19
     c04:	4f 93       	push	r20
     c06:	5f 93       	push	r21
     c08:	6f 93       	push	r22
     c0a:	7f 93       	push	r23
     c0c:	8f 93       	push	r24
     c0e:	9f 93       	push	r25
     c10:	af 93       	push	r26
     c12:	bf 93       	push	r27
     c14:	ef 93       	push	r30
     c16:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_4])
     c18:	80 91 5e 06 	lds	r24, 0x065E
     c1c:	90 91 5f 06 	lds	r25, 0x065F
     c20:	89 2b       	or	r24, r25
     c22:	29 f0       	breq	.+10     	; 0xc2e <__vector_3+0x3c>
    intFunc[EXTERNAL_INT_4]();
     c24:	e0 91 5e 06 	lds	r30, 0x065E
     c28:	f0 91 5f 06 	lds	r31, 0x065F
     c2c:	09 95       	icall
}
     c2e:	ff 91       	pop	r31
     c30:	ef 91       	pop	r30
     c32:	bf 91       	pop	r27
     c34:	af 91       	pop	r26
     c36:	9f 91       	pop	r25
     c38:	8f 91       	pop	r24
     c3a:	7f 91       	pop	r23
     c3c:	6f 91       	pop	r22
     c3e:	5f 91       	pop	r21
     c40:	4f 91       	pop	r20
     c42:	3f 91       	pop	r19
     c44:	2f 91       	pop	r18
     c46:	0f 90       	pop	r0
     c48:	0b be       	out	0x3b, r0	; 59
     c4a:	0f 90       	pop	r0
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	0f 90       	pop	r0
     c50:	1f 90       	pop	r1
     c52:	18 95       	reti

00000c54 <__vector_4>:

SIGNAL(INT3_vect) {
     c54:	1f 92       	push	r1
     c56:	0f 92       	push	r0
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	0f 92       	push	r0
     c5c:	0b b6       	in	r0, 0x3b	; 59
     c5e:	0f 92       	push	r0
     c60:	11 24       	eor	r1, r1
     c62:	2f 93       	push	r18
     c64:	3f 93       	push	r19
     c66:	4f 93       	push	r20
     c68:	5f 93       	push	r21
     c6a:	6f 93       	push	r22
     c6c:	7f 93       	push	r23
     c6e:	8f 93       	push	r24
     c70:	9f 93       	push	r25
     c72:	af 93       	push	r26
     c74:	bf 93       	push	r27
     c76:	ef 93       	push	r30
     c78:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_5])
     c7a:	80 91 60 06 	lds	r24, 0x0660
     c7e:	90 91 61 06 	lds	r25, 0x0661
     c82:	89 2b       	or	r24, r25
     c84:	29 f0       	breq	.+10     	; 0xc90 <__vector_4+0x3c>
    intFunc[EXTERNAL_INT_5]();
     c86:	e0 91 60 06 	lds	r30, 0x0660
     c8a:	f0 91 61 06 	lds	r31, 0x0661
     c8e:	09 95       	icall
}
     c90:	ff 91       	pop	r31
     c92:	ef 91       	pop	r30
     c94:	bf 91       	pop	r27
     c96:	af 91       	pop	r26
     c98:	9f 91       	pop	r25
     c9a:	8f 91       	pop	r24
     c9c:	7f 91       	pop	r23
     c9e:	6f 91       	pop	r22
     ca0:	5f 91       	pop	r21
     ca2:	4f 91       	pop	r20
     ca4:	3f 91       	pop	r19
     ca6:	2f 91       	pop	r18
     ca8:	0f 90       	pop	r0
     caa:	0b be       	out	0x3b, r0	; 59
     cac:	0f 90       	pop	r0
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	0f 90       	pop	r0
     cb2:	1f 90       	pop	r1
     cb4:	18 95       	reti

00000cb6 <__vector_5>:

SIGNAL(INT4_vect) {
     cb6:	1f 92       	push	r1
     cb8:	0f 92       	push	r0
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	0f 92       	push	r0
     cbe:	0b b6       	in	r0, 0x3b	; 59
     cc0:	0f 92       	push	r0
     cc2:	11 24       	eor	r1, r1
     cc4:	2f 93       	push	r18
     cc6:	3f 93       	push	r19
     cc8:	4f 93       	push	r20
     cca:	5f 93       	push	r21
     ccc:	6f 93       	push	r22
     cce:	7f 93       	push	r23
     cd0:	8f 93       	push	r24
     cd2:	9f 93       	push	r25
     cd4:	af 93       	push	r26
     cd6:	bf 93       	push	r27
     cd8:	ef 93       	push	r30
     cda:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
     cdc:	80 91 56 06 	lds	r24, 0x0656
     ce0:	90 91 57 06 	lds	r25, 0x0657
     ce4:	89 2b       	or	r24, r25
     ce6:	29 f0       	breq	.+10     	; 0xcf2 <__vector_5+0x3c>
    intFunc[EXTERNAL_INT_0]();
     ce8:	e0 91 56 06 	lds	r30, 0x0656
     cec:	f0 91 57 06 	lds	r31, 0x0657
     cf0:	09 95       	icall
}
     cf2:	ff 91       	pop	r31
     cf4:	ef 91       	pop	r30
     cf6:	bf 91       	pop	r27
     cf8:	af 91       	pop	r26
     cfa:	9f 91       	pop	r25
     cfc:	8f 91       	pop	r24
     cfe:	7f 91       	pop	r23
     d00:	6f 91       	pop	r22
     d02:	5f 91       	pop	r21
     d04:	4f 91       	pop	r20
     d06:	3f 91       	pop	r19
     d08:	2f 91       	pop	r18
     d0a:	0f 90       	pop	r0
     d0c:	0b be       	out	0x3b, r0	; 59
     d0e:	0f 90       	pop	r0
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	0f 90       	pop	r0
     d14:	1f 90       	pop	r1
     d16:	18 95       	reti

00000d18 <__vector_6>:

SIGNAL(INT5_vect) {
     d18:	1f 92       	push	r1
     d1a:	0f 92       	push	r0
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	0f 92       	push	r0
     d20:	0b b6       	in	r0, 0x3b	; 59
     d22:	0f 92       	push	r0
     d24:	11 24       	eor	r1, r1
     d26:	2f 93       	push	r18
     d28:	3f 93       	push	r19
     d2a:	4f 93       	push	r20
     d2c:	5f 93       	push	r21
     d2e:	6f 93       	push	r22
     d30:	7f 93       	push	r23
     d32:	8f 93       	push	r24
     d34:	9f 93       	push	r25
     d36:	af 93       	push	r26
     d38:	bf 93       	push	r27
     d3a:	ef 93       	push	r30
     d3c:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
     d3e:	80 91 58 06 	lds	r24, 0x0658
     d42:	90 91 59 06 	lds	r25, 0x0659
     d46:	89 2b       	or	r24, r25
     d48:	29 f0       	breq	.+10     	; 0xd54 <__vector_6+0x3c>
    intFunc[EXTERNAL_INT_1]();
     d4a:	e0 91 58 06 	lds	r30, 0x0658
     d4e:	f0 91 59 06 	lds	r31, 0x0659
     d52:	09 95       	icall
}
     d54:	ff 91       	pop	r31
     d56:	ef 91       	pop	r30
     d58:	bf 91       	pop	r27
     d5a:	af 91       	pop	r26
     d5c:	9f 91       	pop	r25
     d5e:	8f 91       	pop	r24
     d60:	7f 91       	pop	r23
     d62:	6f 91       	pop	r22
     d64:	5f 91       	pop	r21
     d66:	4f 91       	pop	r20
     d68:	3f 91       	pop	r19
     d6a:	2f 91       	pop	r18
     d6c:	0f 90       	pop	r0
     d6e:	0b be       	out	0x3b, r0	; 59
     d70:	0f 90       	pop	r0
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	0f 90       	pop	r0
     d76:	1f 90       	pop	r1
     d78:	18 95       	reti

00000d7a <__vector_7>:

SIGNAL(INT6_vect) {
     d7a:	1f 92       	push	r1
     d7c:	0f 92       	push	r0
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	0f 92       	push	r0
     d82:	0b b6       	in	r0, 0x3b	; 59
     d84:	0f 92       	push	r0
     d86:	11 24       	eor	r1, r1
     d88:	2f 93       	push	r18
     d8a:	3f 93       	push	r19
     d8c:	4f 93       	push	r20
     d8e:	5f 93       	push	r21
     d90:	6f 93       	push	r22
     d92:	7f 93       	push	r23
     d94:	8f 93       	push	r24
     d96:	9f 93       	push	r25
     d98:	af 93       	push	r26
     d9a:	bf 93       	push	r27
     d9c:	ef 93       	push	r30
     d9e:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_6])
     da0:	80 91 62 06 	lds	r24, 0x0662
     da4:	90 91 63 06 	lds	r25, 0x0663
     da8:	89 2b       	or	r24, r25
     daa:	29 f0       	breq	.+10     	; 0xdb6 <__vector_7+0x3c>
    intFunc[EXTERNAL_INT_6]();
     dac:	e0 91 62 06 	lds	r30, 0x0662
     db0:	f0 91 63 06 	lds	r31, 0x0663
     db4:	09 95       	icall
}
     db6:	ff 91       	pop	r31
     db8:	ef 91       	pop	r30
     dba:	bf 91       	pop	r27
     dbc:	af 91       	pop	r26
     dbe:	9f 91       	pop	r25
     dc0:	8f 91       	pop	r24
     dc2:	7f 91       	pop	r23
     dc4:	6f 91       	pop	r22
     dc6:	5f 91       	pop	r21
     dc8:	4f 91       	pop	r20
     dca:	3f 91       	pop	r19
     dcc:	2f 91       	pop	r18
     dce:	0f 90       	pop	r0
     dd0:	0b be       	out	0x3b, r0	; 59
     dd2:	0f 90       	pop	r0
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	0f 90       	pop	r0
     dd8:	1f 90       	pop	r1
     dda:	18 95       	reti

00000ddc <__vector_8>:

SIGNAL(INT7_vect) {
     ddc:	1f 92       	push	r1
     dde:	0f 92       	push	r0
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	0f 92       	push	r0
     de4:	0b b6       	in	r0, 0x3b	; 59
     de6:	0f 92       	push	r0
     de8:	11 24       	eor	r1, r1
     dea:	2f 93       	push	r18
     dec:	3f 93       	push	r19
     dee:	4f 93       	push	r20
     df0:	5f 93       	push	r21
     df2:	6f 93       	push	r22
     df4:	7f 93       	push	r23
     df6:	8f 93       	push	r24
     df8:	9f 93       	push	r25
     dfa:	af 93       	push	r26
     dfc:	bf 93       	push	r27
     dfe:	ef 93       	push	r30
     e00:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
     e02:	80 91 64 06 	lds	r24, 0x0664
     e06:	90 91 65 06 	lds	r25, 0x0665
     e0a:	89 2b       	or	r24, r25
     e0c:	29 f0       	breq	.+10     	; 0xe18 <__vector_8+0x3c>
    intFunc[EXTERNAL_INT_7]();
     e0e:	e0 91 64 06 	lds	r30, 0x0664
     e12:	f0 91 65 06 	lds	r31, 0x0665
     e16:	09 95       	icall
}
     e18:	ff 91       	pop	r31
     e1a:	ef 91       	pop	r30
     e1c:	bf 91       	pop	r27
     e1e:	af 91       	pop	r26
     e20:	9f 91       	pop	r25
     e22:	8f 91       	pop	r24
     e24:	7f 91       	pop	r23
     e26:	6f 91       	pop	r22
     e28:	5f 91       	pop	r21
     e2a:	4f 91       	pop	r20
     e2c:	3f 91       	pop	r19
     e2e:	2f 91       	pop	r18
     e30:	0f 90       	pop	r0
     e32:	0b be       	out	0x3b, r0	; 59
     e34:	0f 90       	pop	r0
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	0f 90       	pop	r0
     e3a:	1f 90       	pop	r1
     e3c:	18 95       	reti

00000e3e <pinMode>:
#include "wiring.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
     e3e:	48 2f       	mov	r20, r24
     e40:	50 e0       	ldi	r21, 0x00	; 0
     e42:	ca 01       	movw	r24, r20
     e44:	8b 55       	subi	r24, 0x5B	; 91
     e46:	9b 4f       	sbci	r25, 0xFB	; 251
     e48:	fc 01       	movw	r30, r24
     e4a:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
     e4c:	41 5a       	subi	r20, 0xA1	; 161
     e4e:	5b 4f       	sbci	r21, 0xFB	; 251
     e50:	fa 01       	movw	r30, r20
     e52:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
     e54:	88 23       	and	r24, r24
     e56:	c1 f0       	breq	.+48     	; 0xe88 <pinMode+0x4a>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     e58:	e8 2f       	mov	r30, r24
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	ee 0f       	add	r30, r30
     e5e:	ff 1f       	adc	r31, r31
     e60:	ef 5e       	subi	r30, 0xEF	; 239
     e62:	fb 4f       	sbci	r31, 0xFB	; 251
     e64:	a5 91       	lpm	r26, Z+
     e66:	b4 91       	lpm	r27, Z+

	if (mode == INPUT) { 
     e68:	66 23       	and	r22, r22
     e6a:	41 f4       	brne	.+16     	; 0xe7c <pinMode+0x3e>
		uint8_t oldSREG = SREG;
     e6c:	9f b7       	in	r25, 0x3f	; 63
                cli();
     e6e:	f8 94       	cli
		*reg &= ~bit;
     e70:	8c 91       	ld	r24, X
     e72:	20 95       	com	r18
     e74:	82 23       	and	r24, r18
     e76:	8c 93       	st	X, r24
		SREG = oldSREG;
     e78:	9f bf       	out	0x3f, r25	; 63
     e7a:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
     e7c:	9f b7       	in	r25, 0x3f	; 63
                cli();
     e7e:	f8 94       	cli
		*reg |= bit;
     e80:	8c 91       	ld	r24, X
     e82:	82 2b       	or	r24, r18
     e84:	8c 93       	st	X, r24
		SREG = oldSREG;
     e86:	9f bf       	out	0x3f, r25	; 63
     e88:	08 95       	ret

00000e8a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     e8a:	89 30       	cpi	r24, 0x09	; 9
     e8c:	09 f4       	brne	.+2      	; 0xe90 <turnOffPWM+0x6>
     e8e:	48 c0       	rjmp	.+144    	; 0xf20 <turnOffPWM+0x96>
     e90:	8a 30       	cpi	r24, 0x0A	; 10
     e92:	a0 f4       	brcc	.+40     	; 0xebc <turnOffPWM+0x32>
     e94:	84 30       	cpi	r24, 0x04	; 4
     e96:	49 f1       	breq	.+82     	; 0xeea <turnOffPWM+0x60>
     e98:	85 30       	cpi	r24, 0x05	; 5
     e9a:	40 f4       	brcc	.+16     	; 0xeac <turnOffPWM+0x22>
     e9c:	82 30       	cpi	r24, 0x02	; 2
     e9e:	71 f1       	breq	.+92     	; 0xefc <turnOffPWM+0x72>
     ea0:	83 30       	cpi	r24, 0x03	; 3
     ea2:	f8 f4       	brcc	.+62     	; 0xee2 <turnOffPWM+0x58>
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	09 f0       	breq	.+2      	; 0xeaa <turnOffPWM+0x20>
     ea8:	62 c0       	rjmp	.+196    	; 0xf6e <turnOffPWM+0xe4>
     eaa:	25 c0       	rjmp	.+74     	; 0xef6 <turnOffPWM+0x6c>
     eac:	87 30       	cpi	r24, 0x07	; 7
     eae:	71 f1       	breq	.+92     	; 0xf0c <turnOffPWM+0x82>
     eb0:	88 30       	cpi	r24, 0x08	; 8
     eb2:	90 f5       	brcc	.+100    	; 0xf18 <turnOffPWM+0x8e>
     eb4:	86 30       	cpi	r24, 0x06	; 6
     eb6:	09 f0       	breq	.+2      	; 0xeba <turnOffPWM+0x30>
     eb8:	5a c0       	rjmp	.+180    	; 0xf6e <turnOffPWM+0xe4>
     eba:	24 c0       	rjmp	.+72     	; 0xf04 <turnOffPWM+0x7a>
     ebc:	8d 30       	cpi	r24, 0x0D	; 13
     ebe:	09 f4       	brne	.+2      	; 0xec2 <turnOffPWM+0x38>
     ec0:	41 c0       	rjmp	.+130    	; 0xf44 <turnOffPWM+0xba>
     ec2:	8e 30       	cpi	r24, 0x0E	; 14
     ec4:	28 f4       	brcc	.+10     	; 0xed0 <turnOffPWM+0x46>
     ec6:	8b 30       	cpi	r24, 0x0B	; 11
     ec8:	a9 f1       	breq	.+106    	; 0xf34 <turnOffPWM+0xaa>
     eca:	8c 30       	cpi	r24, 0x0C	; 12
     ecc:	b8 f5       	brcc	.+110    	; 0xf3c <turnOffPWM+0xb2>
     ece:	2c c0       	rjmp	.+88     	; 0xf28 <turnOffPWM+0x9e>
     ed0:	8f 30       	cpi	r24, 0x0F	; 15
     ed2:	09 f4       	brne	.+2      	; 0xed6 <turnOffPWM+0x4c>
     ed4:	41 c0       	rjmp	.+130    	; 0xf58 <turnOffPWM+0xce>
     ed6:	8f 30       	cpi	r24, 0x0F	; 15
     ed8:	d8 f1       	brcs	.+118    	; 0xf50 <turnOffPWM+0xc6>
     eda:	80 31       	cpi	r24, 0x10	; 16
     edc:	09 f0       	breq	.+2      	; 0xee0 <turnOffPWM+0x56>
     ede:	47 c0       	rjmp	.+142    	; 0xf6e <turnOffPWM+0xe4>
     ee0:	41 c0       	rjmp	.+130    	; 0xf64 <turnOffPWM+0xda>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     ee2:	80 91 80 00 	lds	r24, 0x0080
     ee6:	8f 77       	andi	r24, 0x7F	; 127
     ee8:	03 c0       	rjmp	.+6      	; 0xef0 <turnOffPWM+0x66>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     eea:	80 91 80 00 	lds	r24, 0x0080
     eee:	8f 7d       	andi	r24, 0xDF	; 223
     ef0:	80 93 80 00 	sts	0x0080, r24
     ef4:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     ef6:	84 b5       	in	r24, 0x24	; 36
     ef8:	8f 77       	andi	r24, 0x7F	; 127
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <turnOffPWM+0x76>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     efc:	84 b5       	in	r24, 0x24	; 36
     efe:	8f 7d       	andi	r24, 0xDF	; 223
     f00:	84 bd       	out	0x24, r24	; 36
     f02:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     f04:	80 91 b0 00 	lds	r24, 0x00B0
     f08:	8f 77       	andi	r24, 0x7F	; 127
     f0a:	03 c0       	rjmp	.+6      	; 0xf12 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     f0c:	80 91 b0 00 	lds	r24, 0x00B0
     f10:	8f 7d       	andi	r24, 0xDF	; 223
     f12:	80 93 b0 00 	sts	0x00B0, r24
     f16:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
     f18:	80 91 90 00 	lds	r24, 0x0090
     f1c:	8f 77       	andi	r24, 0x7F	; 127
     f1e:	07 c0       	rjmp	.+14     	; 0xf2e <turnOffPWM+0xa4>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
     f20:	80 91 90 00 	lds	r24, 0x0090
     f24:	8f 7d       	andi	r24, 0xDF	; 223
     f26:	03 c0       	rjmp	.+6      	; 0xf2e <turnOffPWM+0xa4>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
     f28:	80 91 90 00 	lds	r24, 0x0090
     f2c:	87 7f       	andi	r24, 0xF7	; 247
     f2e:	80 93 90 00 	sts	0x0090, r24
     f32:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
     f34:	80 91 a0 00 	lds	r24, 0x00A0
     f38:	8f 77       	andi	r24, 0x7F	; 127
     f3a:	07 c0       	rjmp	.+14     	; 0xf4a <turnOffPWM+0xc0>
		#endif
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
     f3c:	80 91 a0 00 	lds	r24, 0x00A0
     f40:	8f 7d       	andi	r24, 0xDF	; 223
     f42:	03 c0       	rjmp	.+6      	; 0xf4a <turnOffPWM+0xc0>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
     f44:	80 91 a0 00 	lds	r24, 0x00A0
     f48:	87 7f       	andi	r24, 0xF7	; 247
     f4a:	80 93 a0 00 	sts	0x00A0, r24
     f4e:	08 95       	ret
		#endif
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
     f50:	80 91 20 01 	lds	r24, 0x0120
     f54:	8f 77       	andi	r24, 0x7F	; 127
     f56:	03 c0       	rjmp	.+6      	; 0xf5e <turnOffPWM+0xd4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
     f58:	80 91 20 01 	lds	r24, 0x0120
     f5c:	8f 7d       	andi	r24, 0xDF	; 223
     f5e:	80 93 20 01 	sts	0x0120, r24
     f62:	08 95       	ret
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
     f64:	80 91 20 01 	lds	r24, 0x0120
     f68:	87 7f       	andi	r24, 0xF7	; 247
     f6a:	80 93 20 01 	sts	0x0120, r24
     f6e:	08 95       	ret

00000f70 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     f70:	ff 92       	push	r15
     f72:	0f 93       	push	r16
     f74:	1f 93       	push	r17
     f76:	f6 2e       	mov	r15, r22
	uint8_t timer = digitalPinToTimer(pin);
     f78:	48 2f       	mov	r20, r24
     f7a:	50 e0       	ldi	r21, 0x00	; 0
     f7c:	ca 01       	movw	r24, r20
     f7e:	85 51       	subi	r24, 0x15	; 21
     f80:	9b 4f       	sbci	r25, 0xFB	; 251
     f82:	fc 01       	movw	r30, r24
     f84:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
     f86:	ca 01       	movw	r24, r20
     f88:	8b 55       	subi	r24, 0x5B	; 91
     f8a:	9b 4f       	sbci	r25, 0xFB	; 251
     f8c:	fc 01       	movw	r30, r24
     f8e:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
     f90:	41 5a       	subi	r20, 0xA1	; 161
     f92:	5b 4f       	sbci	r21, 0xFB	; 251
     f94:	fa 01       	movw	r30, r20
     f96:	04 91       	lpm	r16, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     f98:	00 23       	and	r16, r16
     f9a:	d9 f0       	breq	.+54     	; 0xfd2 <digitalWrite+0x62>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     f9c:	22 23       	and	r18, r18
     f9e:	19 f0       	breq	.+6      	; 0xfa6 <digitalWrite+0x36>
     fa0:	82 2f       	mov	r24, r18
     fa2:	0e 94 45 07 	call	0xe8a	; 0xe8a <turnOffPWM>

	out = portOutputRegister(port);
     fa6:	e0 2f       	mov	r30, r16
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	ee 0f       	add	r30, r30
     fac:	ff 1f       	adc	r31, r31
     fae:	e5 5d       	subi	r30, 0xD5	; 213
     fb0:	fb 4f       	sbci	r31, 0xFB	; 251
     fb2:	a5 91       	lpm	r26, Z+
     fb4:	b4 91       	lpm	r27, Z+

	if (val == LOW) {
     fb6:	ff 20       	and	r15, r15
     fb8:	31 f4       	brne	.+12     	; 0xfc6 <digitalWrite+0x56>
		uint8_t oldSREG = SREG;
     fba:	9f b7       	in	r25, 0x3f	; 63
                cli();
     fbc:	f8 94       	cli
		*out &= ~bit;
     fbe:	8c 91       	ld	r24, X
     fc0:	10 95       	com	r17
     fc2:	81 23       	and	r24, r17
     fc4:	04 c0       	rjmp	.+8      	; 0xfce <digitalWrite+0x5e>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
     fc6:	9f b7       	in	r25, 0x3f	; 63
                cli();
     fc8:	f8 94       	cli
		*out |= bit;
     fca:	8c 91       	ld	r24, X
     fcc:	81 2b       	or	r24, r17
     fce:	8c 93       	st	X, r24
		SREG = oldSREG;
     fd0:	9f bf       	out	0x3f, r25	; 63
	}
}
     fd2:	1f 91       	pop	r17
     fd4:	0f 91       	pop	r16
     fd6:	ff 90       	pop	r15
     fd8:	08 95       	ret

00000fda <_ZN6String11toCharArrayEv>:
  if (len > _length) len = _length;
  strncpy(buf, _buffer, len);
  buf[len] = 0;
}

char* String::toCharArray()
     fda:	fc 01       	movw	r30, r24
{
  return _buffer;
}
     fdc:	80 81       	ld	r24, Z
     fde:	91 81       	ldd	r25, Z+1	; 0x01
     fe0:	08 95       	ret

00000fe2 <_ZN6StringD1Ev>:
  _capacity = maxStrLen;
  _buffer = (char *) malloc(_capacity + 1);
  if (_buffer == NULL) _length = _capacity = 0;
}

     fe2:	0f 93       	push	r16
     fe4:	1f 93       	push	r17
     fe6:	8c 01       	movw	r16, r24
     fe8:	fc 01       	movw	r30, r24
     fea:	80 81       	ld	r24, Z
     fec:	91 81       	ldd	r25, Z+1	; 0x01
     fee:	0e 94 cd 79 	call	0xf39a	; 0xf39a <free>
     ff2:	f8 01       	movw	r30, r16
     ff4:	13 82       	std	Z+3, r1	; 0x03
     ff6:	12 82       	std	Z+2, r1	; 0x02
     ff8:	15 82       	std	Z+5, r1	; 0x05
     ffa:	14 82       	std	Z+4, r1	; 0x04
     ffc:	1f 91       	pop	r17
     ffe:	0f 91       	pop	r16
    1000:	08 95       	ret

00001002 <_ZNK6String7indexOfERKS_j>:
int String::indexOf( const String &s2 ) const
{
  return indexOf( s2, 0 );
}

int String::indexOf( const String &s2, unsigned int fromIndex ) const
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	fc 01       	movw	r30, r24
    1008:	db 01       	movw	r26, r22
{
  if ( fromIndex >= _length )
    100a:	84 81       	ldd	r24, Z+4	; 0x04
    100c:	95 81       	ldd	r25, Z+5	; 0x05
    100e:	48 17       	cp	r20, r24
    1010:	59 07       	cpc	r21, r25
    1012:	60 f4       	brcc	.+24     	; 0x102c <_ZNK6String7indexOfERKS_j+0x2a>
    return -1;

  const char *theFind = strstr( &_buffer[ fromIndex ], s2._buffer );
    1014:	c0 81       	ld	r28, Z
    1016:	d1 81       	ldd	r29, Z+1	; 0x01
    1018:	6d 91       	ld	r22, X+
    101a:	7c 91       	ld	r23, X
    101c:	ce 01       	movw	r24, r28
    101e:	84 0f       	add	r24, r20
    1020:	95 1f       	adc	r25, r21
    1022:	0e 94 8a 7b 	call	0xf714	; 0xf714 <strstr>
    1026:	9c 01       	movw	r18, r24

  if ( theFind == NULL )
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	19 f4       	brne	.+6      	; 0x1032 <_ZNK6String7indexOfERKS_j+0x30>
    102c:	2f ef       	ldi	r18, 0xFF	; 255
    102e:	3f ef       	ldi	r19, 0xFF	; 255
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <_ZNK6String7indexOfERKS_j+0x34>
    return -1;

  return theFind - _buffer; // pointer subtraction
    1032:	2c 1b       	sub	r18, r28
    1034:	3d 0b       	sbc	r19, r29
}
    1036:	c9 01       	movw	r24, r18
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	08 95       	ret

0000103e <_ZNK6String7indexOfERKS_>:
  return temp - _buffer;
}

int String::indexOf( const String &s2 ) const
{
  return indexOf( s2, 0 );
    103e:	40 e0       	ldi	r20, 0x00	; 0
    1040:	50 e0       	ldi	r21, 0x00	; 0
    1042:	0e 94 01 08 	call	0x1002	; 0x1002 <_ZNK6String7indexOfERKS_j>
}
    1046:	08 95       	ret

00001048 <_ZN6StringpLERKS_>:
//  _buffer[ _length++ ] = aChar;
//  _buffer[ _length ] = '\0';
//  return *this;
//}

const String & String::operator+=( const String &other )
    1048:	0f 93       	push	r16
    104a:	1f 93       	push	r17
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	ec 01       	movw	r28, r24
    1052:	8b 01       	movw	r16, r22
{
  _length += other._length;
    1054:	fb 01       	movw	r30, r22
    1056:	64 81       	ldd	r22, Z+4	; 0x04
    1058:	75 81       	ldd	r23, Z+5	; 0x05
    105a:	8c 81       	ldd	r24, Y+4	; 0x04
    105c:	9d 81       	ldd	r25, Y+5	; 0x05
    105e:	68 0f       	add	r22, r24
    1060:	79 1f       	adc	r23, r25
    1062:	7d 83       	std	Y+5, r23	; 0x05
    1064:	6c 83       	std	Y+4, r22	; 0x04
  if ( _length > _capacity )
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	9b 81       	ldd	r25, Y+3	; 0x03
    106a:	86 17       	cp	r24, r22
    106c:	97 07       	cpc	r25, r23
    106e:	b8 f4       	brcc	.+46     	; 0x109e <_ZN6StringpLERKS_+0x56>
  {
    char *temp = (char *)realloc(_buffer, _length + 1);
    1070:	6f 5f       	subi	r22, 0xFF	; 255
    1072:	7f 4f       	sbci	r23, 0xFF	; 255
    1074:	88 81       	ld	r24, Y
    1076:	99 81       	ldd	r25, Y+1	; 0x01
    1078:	0e 94 90 7a 	call	0xf520	; 0xf520 <realloc>
    107c:	4c 81       	ldd	r20, Y+4	; 0x04
    107e:	5d 81       	ldd	r21, Y+5	; 0x05
    if ( temp != NULL ) {
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	29 f0       	breq	.+10     	; 0x108e <_ZN6StringpLERKS_+0x46>
      _buffer = temp;
    1084:	99 83       	std	Y+1, r25	; 0x01
    1086:	88 83       	st	Y, r24
      _capacity = _length;
    1088:	5b 83       	std	Y+3, r21	; 0x03
    108a:	4a 83       	std	Y+2, r20	; 0x02
    108c:	08 c0       	rjmp	.+16     	; 0x109e <_ZN6StringpLERKS_+0x56>
    } else {
      _length -= other._length;
    108e:	f8 01       	movw	r30, r16
    1090:	84 81       	ldd	r24, Z+4	; 0x04
    1092:	95 81       	ldd	r25, Z+5	; 0x05
    1094:	48 1b       	sub	r20, r24
    1096:	59 0b       	sbc	r21, r25
    1098:	5d 83       	std	Y+5, r21	; 0x05
    109a:	4c 83       	std	Y+4, r20	; 0x04
    109c:	07 c0       	rjmp	.+14     	; 0x10ac <_ZN6StringpLERKS_+0x64>
      return *this;
    }
  }
  strcat( _buffer, other._buffer );
    109e:	f8 01       	movw	r30, r16
    10a0:	60 81       	ld	r22, Z
    10a2:	71 81       	ldd	r23, Z+1	; 0x01
    10a4:	88 81       	ld	r24, Y
    10a6:	99 81       	ldd	r25, Y+1	; 0x01
    10a8:	0e 94 78 7b 	call	0xf6f0	; 0xf6f0 <strcat>
  return *this;
}
    10ac:	ce 01       	movw	r24, r28
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	1f 91       	pop	r17
    10b4:	0f 91       	pop	r16
    10b6:	08 95       	ret

000010b8 <_ZN6String9getBufferEj>:
long String::toInt() {
  return atol(_buffer);
}

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
    10bc:	ec 01       	movw	r28, r24
    10be:	cb 01       	movw	r24, r22
{
  _capacity = maxStrLen;
    10c0:	7b 83       	std	Y+3, r23	; 0x03
    10c2:	6a 83       	std	Y+2, r22	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    10c4:	01 96       	adiw	r24, 0x01	; 1
    10c6:	0e 94 20 79 	call	0xf240	; 0xf240 <malloc>
    10ca:	99 83       	std	Y+1, r25	; 0x01
    10cc:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    10ce:	00 97       	sbiw	r24, 0x00	; 0
    10d0:	21 f4       	brne	.+8      	; 0x10da <_ZN6String9getBufferEj+0x22>
    10d2:	1b 82       	std	Y+3, r1	; 0x03
    10d4:	1a 82       	std	Y+2, r1	; 0x02
    10d6:	1d 82       	std	Y+5, r1	; 0x05
    10d8:	1c 82       	std	Y+4, r1	; 0x04
}
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	08 95       	ret

000010e0 <_ZN6StringaSERKS_>:
const String & String::concat( const String &s2 )
{
  return (*this) += s2;
}

const String & String::operator=( const String &rhs )
    10e0:	0f 93       	push	r16
    10e2:	1f 93       	push	r17
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	ec 01       	movw	r28, r24
    10ea:	8b 01       	movw	r16, r22
{
  if ( this == &rhs )
    10ec:	86 17       	cp	r24, r22
    10ee:	97 07       	cpc	r25, r23
    10f0:	09 f1       	breq	.+66     	; 0x1134 <_ZN6StringaSERKS_+0x54>
    return *this;

  if ( rhs._length > _length )
    10f2:	fb 01       	movw	r30, r22
    10f4:	24 81       	ldd	r18, Z+4	; 0x04
    10f6:	35 81       	ldd	r19, Z+5	; 0x05
    10f8:	8c 81       	ldd	r24, Y+4	; 0x04
    10fa:	9d 81       	ldd	r25, Y+5	; 0x05
    10fc:	82 17       	cp	r24, r18
    10fe:	93 07       	cpc	r25, r19
    1100:	50 f4       	brcc	.+20     	; 0x1116 <_ZN6StringaSERKS_+0x36>
  {
    free(_buffer);
    1102:	88 81       	ld	r24, Y
    1104:	99 81       	ldd	r25, Y+1	; 0x01
    1106:	0e 94 cd 79 	call	0xf39a	; 0xf39a <free>
    getBuffer( rhs._length );
    110a:	f8 01       	movw	r30, r16
    110c:	64 81       	ldd	r22, Z+4	; 0x04
    110e:	75 81       	ldd	r23, Z+5	; 0x05
    1110:	ce 01       	movw	r24, r28
    1112:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <_ZN6String9getBufferEj>
  }
  
  if ( _buffer != NULL ) {
    1116:	28 81       	ld	r18, Y
    1118:	39 81       	ldd	r19, Y+1	; 0x01
    111a:	21 15       	cp	r18, r1
    111c:	31 05       	cpc	r19, r1
    111e:	51 f0       	breq	.+20     	; 0x1134 <_ZN6StringaSERKS_+0x54>
    _length = rhs._length;
    1120:	f8 01       	movw	r30, r16
    1122:	84 81       	ldd	r24, Z+4	; 0x04
    1124:	95 81       	ldd	r25, Z+5	; 0x05
    1126:	9d 83       	std	Y+5, r25	; 0x05
    1128:	8c 83       	std	Y+4, r24	; 0x04
    strcpy( _buffer, rhs._buffer );
    112a:	60 81       	ld	r22, Z
    112c:	71 81       	ldd	r23, Z+1	; 0x01
    112e:	c9 01       	movw	r24, r18
    1130:	0e 94 83 7b 	call	0xf706	; 0xf706 <strcpy>
  }
  return *this;
}
    1134:	ce 01       	movw	r24, r28
    1136:	df 91       	pop	r29
    1138:	cf 91       	pop	r28
    113a:	1f 91       	pop	r17
    113c:	0f 91       	pop	r16
    113e:	08 95       	ret

00001140 <_ZN6StringC1ERKS_>:
  getBuffer( _length = strlen( value ) );
  if ( _buffer != NULL )
    strcpy( _buffer, value ); 
}

String::String( const String &value )
    1140:	0f 93       	push	r16
    1142:	1f 93       	push	r17
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	8c 01       	movw	r16, r24
    114a:	eb 01       	movw	r28, r22
{
  getBuffer( _length = value._length );
    114c:	6c 81       	ldd	r22, Y+4	; 0x04
    114e:	7d 81       	ldd	r23, Y+5	; 0x05
    1150:	fc 01       	movw	r30, r24
    1152:	75 83       	std	Z+5, r23	; 0x05
    1154:	64 83       	std	Z+4, r22	; 0x04
    1156:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <_ZN6String9getBufferEj>
  if ( _buffer != NULL )
    115a:	f8 01       	movw	r30, r16
    115c:	80 81       	ld	r24, Z
    115e:	91 81       	ldd	r25, Z+1	; 0x01
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	21 f0       	breq	.+8      	; 0x116c <_ZN6StringC1ERKS_+0x2c>
    strcpy( _buffer, value._buffer );
    1164:	68 81       	ld	r22, Y
    1166:	79 81       	ldd	r23, Y+1	; 0x01
    1168:	0e 94 83 7b 	call	0xf706	; 0xf706 <strcpy>
}
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
    1174:	08 95       	ret

00001176 <_ZN6StringC1EPKc>:
#include "WString.h"
#include "WCharacter.h"
#include "Wiring.h"
#include <string.h>

String::String( const char *value )
    1176:	0f 93       	push	r16
    1178:	1f 93       	push	r17
    117a:	cf 93       	push	r28
    117c:	df 93       	push	r29
    117e:	8c 01       	movw	r16, r24
    1180:	eb 01       	movw	r28, r22
{
  if ( value == NULL )
    1182:	61 15       	cp	r22, r1
    1184:	71 05       	cpc	r23, r1
    1186:	11 f4       	brne	.+4      	; 0x118c <_ZN6StringC1EPKc+0x16>
    1188:	c0 e0       	ldi	r28, 0x00	; 0
    118a:	d2 e0       	ldi	r29, 0x02	; 2
    value = "";
  getBuffer( _length = strlen( value ) );
    118c:	fe 01       	movw	r30, r28
    118e:	01 90       	ld	r0, Z+
    1190:	00 20       	and	r0, r0
    1192:	e9 f7       	brne	.-6      	; 0x118e <_ZN6StringC1EPKc+0x18>
    1194:	31 97       	sbiw	r30, 0x01	; 1
    1196:	ec 1b       	sub	r30, r28
    1198:	fd 0b       	sbc	r31, r29
    119a:	d8 01       	movw	r26, r16
    119c:	15 96       	adiw	r26, 0x05	; 5
    119e:	fc 93       	st	X, r31
    11a0:	ee 93       	st	-X, r30
    11a2:	14 97       	sbiw	r26, 0x04	; 4
    11a4:	c8 01       	movw	r24, r16
    11a6:	bf 01       	movw	r22, r30
    11a8:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <_ZN6String9getBufferEj>
  if ( _buffer != NULL )
    11ac:	f8 01       	movw	r30, r16
    11ae:	80 81       	ld	r24, Z
    11b0:	91 81       	ldd	r25, Z+1	; 0x01
    11b2:	00 97       	sbiw	r24, 0x00	; 0
    11b4:	19 f0       	breq	.+6      	; 0x11bc <_ZN6StringC1EPKc+0x46>
    strcpy( _buffer, value ); 
    11b6:	be 01       	movw	r22, r28
    11b8:	0e 94 83 7b 	call	0xf706	; 0xf706 <strcpy>
}
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	1f 91       	pop	r17
    11c2:	0f 91       	pop	r16
    11c4:	08 95       	ret

000011c6 <_ZN6StringC1Eii>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const int value, const int base )
    11c6:	ef 92       	push	r14
    11c8:	ff 92       	push	r15
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	a1 97       	sbiw	r28, 0x21	; 33
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	de bf       	out	0x3e, r29	; 62
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	cd bf       	out	0x3d, r28	; 61
    11e2:	8c 01       	movw	r16, r24
    11e4:	cb 01       	movw	r24, r22
{
  char buf[33];   
  itoa((signed long)value, buf, base);
    11e6:	7e 01       	movw	r14, r28
    11e8:	08 94       	sec
    11ea:	e1 1c       	adc	r14, r1
    11ec:	f1 1c       	adc	r15, r1
    11ee:	b7 01       	movw	r22, r14
    11f0:	0e 94 a4 7b 	call	0xf748	; 0xf748 <itoa>
  getBuffer( _length = strlen(buf) );
    11f4:	f7 01       	movw	r30, r14
    11f6:	01 90       	ld	r0, Z+
    11f8:	00 20       	and	r0, r0
    11fa:	e9 f7       	brne	.-6      	; 0x11f6 <_ZN6StringC1Eii+0x30>
    11fc:	31 97       	sbiw	r30, 0x01	; 1
    11fe:	ee 19       	sub	r30, r14
    1200:	ff 09       	sbc	r31, r15
    1202:	d8 01       	movw	r26, r16
    1204:	15 96       	adiw	r26, 0x05	; 5
    1206:	fc 93       	st	X, r31
    1208:	ee 93       	st	-X, r30
    120a:	14 97       	sbiw	r26, 0x04	; 4
    120c:	c8 01       	movw	r24, r16
    120e:	bf 01       	movw	r22, r30
    1210:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <_ZN6String9getBufferEj>
  if ( _buffer != NULL )
    1214:	f8 01       	movw	r30, r16
    1216:	80 81       	ld	r24, Z
    1218:	91 81       	ldd	r25, Z+1	; 0x01
    121a:	00 97       	sbiw	r24, 0x00	; 0
    121c:	19 f0       	breq	.+6      	; 0x1224 <_ZN6StringC1Eii+0x5e>
    strcpy( _buffer, buf );
    121e:	b7 01       	movw	r22, r14
    1220:	0e 94 83 7b 	call	0xf706	; 0xf706 <strcpy>
}
    1224:	a1 96       	adiw	r28, 0x21	; 33
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
    1230:	cf 91       	pop	r28
    1232:	df 91       	pop	r29
    1234:	1f 91       	pop	r17
    1236:	0f 91       	pop	r16
    1238:	ff 90       	pop	r15
    123a:	ef 90       	pop	r14
    123c:	08 95       	ret

0000123e <_ZN4AX125setTXEv>:
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
    bitClear(UCSR0B, RXCIE0);    // deshabilita la interrupción de recepción
    bitClear(UCSR0B, RXEN0);     // deshabilila la recepción
    bitSet(UCSR0B, TXEN0);       // habilita la trasmisión
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)   
    bitClear(UCSR1B, RXCIE1);    // deshabilita la interrupción de recepción
    123e:	e9 ec       	ldi	r30, 0xC9	; 201
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	8f 77       	andi	r24, 0x7F	; 127
    1246:	80 83       	st	Z, r24
    bitClear(UCSR1B, RXEN1);     // deshabilila la recepción
    1248:	80 81       	ld	r24, Z
    124a:	8f 7e       	andi	r24, 0xEF	; 239
    124c:	80 83       	st	Z, r24
    bitSet(UCSR1B, TXEN1);       // habilita la trasmisión
    124e:	80 81       	ld	r24, Z
    1250:	88 60       	ori	r24, 0x08	; 8
    1252:	80 83       	st	Z, r24
#elif defined (__AVR_ATmega8__)
    bitClear(UCSRB, RXCIE);    // deshabilita la interrupción de recepción
    bitClear(UCSRB, RXEN);     // deshabilila la recepción
    bitSet(UCSRB, TXEN);       // habilita la trasmisión
#endif    
}
    1254:	08 95       	ret

00001256 <_ZN4AX125setRXEv>:
    bitClear(UCSR0B, TXEN0);   // deshabilita la trasmisión
    bitSet(UCSR0B, RXEN0);     // habilita la recepción
    bitSet(UCSR0B, RXCIE0);    // habilita la interrupción de recepción
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    //bitClear(TIMSK0, TOIE0);   // deshabilita la interrupción del timer0 (nota: esto es sólo para entornos Arduino)
    bitClear(UCSR1B, TXEN1);   // deshabilita la trasmisión
    1256:	e9 ec       	ldi	r30, 0xC9	; 201
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	87 7f       	andi	r24, 0xF7	; 247
    125e:	80 83       	st	Z, r24
    bitSet(UCSR1B, RXEN1);     // habilita la recepción
    1260:	80 81       	ld	r24, Z
    1262:	80 61       	ori	r24, 0x10	; 16
    1264:	80 83       	st	Z, r24
    bitSet(UCSR1B, RXCIE1);    // habilita la interrupción de recepción
    1266:	80 81       	ld	r24, Z
    1268:	80 68       	ori	r24, 0x80	; 128
    126a:	80 83       	st	Z, r24
    //bitClear(TIMSK0, TOIE0); // deshabilita la interrupción del timer0 (nota: esto es sólo para entornos Arduino)
    bitClear(UCSRB, TXEN);   // deshabilita la trasmisión
    bitSet(UCSRB, RXEN);     // habilita la recepción
    bitSet(UCSRB, RXCIE);    // habilita la interrupción de recepción 
#endif    
    ax_rx_Pointer = 0;         // resetea el puntero del buffer
    126c:	10 92 86 06 	sts	0x0686, r1
}
    1270:	08 95       	ret

00001272 <_ZN4AX127setNoneEv>:
    bitClear(UCSR0B, RXCIE0);    // deshabilita la interrupción de recepción
    bitClear(UCSR0B, RXEN0);     // deshabilila la recepción
    bitClear(UCSR0B, TXEN0);     // deshabilita la trasmisión
    //bitSet(TIMSK0, TOIE0);          // rehabilita la interrupción del timer0 (nota: esto es sólo para entornos Arduino)
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    bitClear(UCSR1B, RXCIE1);    // deshabilita la interrupción de recepción
    1272:	e9 ec       	ldi	r30, 0xC9	; 201
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	8f 77       	andi	r24, 0x7F	; 127
    127a:	80 83       	st	Z, r24
    bitClear(UCSR1B, RXEN1);     // deshabilila la recepción
    127c:	80 81       	ld	r24, Z
    127e:	8f 7e       	andi	r24, 0xEF	; 239
    1280:	80 83       	st	Z, r24
    bitClear(UCSR1B, TXEN1);     // deshabilita la trasmisión
    1282:	80 81       	ld	r24, Z
    1284:	87 7f       	andi	r24, 0xF7	; 247
    1286:	80 83       	st	Z, r24
    bitClear(UCSRB, RXCIE);    // deshabilita la interrupción de recepción
    bitClear(UCSRB, RXEN);     // deshabilila la recepción
    bitClear(UCSRB, TXEN);     // deshabilita la trasmisión 
    //bitSet(TIMSK0, TOIE0);        // rehabilita la interrupción del timer0 (nota: esto es sólo para entornos Arduino)
#endif    
}
    1288:	08 95       	ret

0000128a <__vector_36>:
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
ISR (USART_RX_vect) {
    AX12::ax_rx_buffer[(AX12::ax_rx_Pointer++)] = UDR0;    // esta es la rutina de interrupción de recepción
}                                                          
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
ISR (USART1_RX_vect) {
    128a:	1f 92       	push	r1
    128c:	0f 92       	push	r0
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	0f 92       	push	r0
    1292:	0b b6       	in	r0, 0x3b	; 59
    1294:	0f 92       	push	r0
    1296:	11 24       	eor	r1, r1
    1298:	8f 93       	push	r24
    129a:	9f 93       	push	r25
    129c:	ef 93       	push	r30
    129e:	ff 93       	push	r31
    AX12::ax_rx_buffer[(AX12::ax_rx_Pointer++)] = UDR1;    // esta es la rutina de interrupción de recepción
    12a0:	80 91 86 06 	lds	r24, 0x0686
    12a4:	90 91 ce 00 	lds	r25, 0x00CE
    12a8:	e6 e6       	ldi	r30, 0x66	; 102
    12aa:	f6 e0       	ldi	r31, 0x06	; 6
    12ac:	e8 0f       	add	r30, r24
    12ae:	f1 1d       	adc	r31, r1
    12b0:	90 83       	st	Z, r25
    12b2:	8f 5f       	subi	r24, 0xFF	; 255
    12b4:	80 93 86 06 	sts	0x0686, r24
}                                               // lo que hace es meter el byte recibido en el buffer
    12b8:	ff 91       	pop	r31
    12ba:	ef 91       	pop	r30
    12bc:	9f 91       	pop	r25
    12be:	8f 91       	pop	r24
    12c0:	0f 90       	pop	r0
    12c2:	0b be       	out	0x3b, r0	; 59
    12c4:	0f 90       	pop	r0
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	0f 90       	pop	r0
    12ca:	1f 90       	pop	r1
    12cc:	18 95       	reti

000012ce <_ZN4AX124initEl>:
}                                               // lo que hace es meter el byte recibido en el buffer
#endif    

/** initializes serial transmit at baud, 8-N-1 */
// nota: el AX12 internamente usa el Double Speed Operation (U2Xn=1). Ciertos baudrates no coinciden si no se usa este seteo
void AX12::init (long baud) {
    12ce:	9b 01       	movw	r18, r22
    12d0:	ac 01       	movw	r20, r24
    unsigned int reg = F_CPU / (baud * 8) - 1;
    12d2:	83 e0       	ldi	r24, 0x03	; 3
    12d4:	22 0f       	add	r18, r18
    12d6:	33 1f       	adc	r19, r19
    12d8:	44 1f       	adc	r20, r20
    12da:	55 1f       	adc	r21, r21
    12dc:	8a 95       	dec	r24
    12de:	d1 f7       	brne	.-12     	; 0x12d4 <_ZN4AX124initEl+0x6>
    12e0:	60 e0       	ldi	r22, 0x00	; 0
    12e2:	74 e2       	ldi	r23, 0x24	; 36
    12e4:	84 ef       	ldi	r24, 0xF4	; 244
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	0e 94 54 81 	call	0x102a8	; 0x102a8 <__divmodsi4>
    12ec:	21 50       	subi	r18, 0x01	; 1
    12ee:	30 40       	sbci	r19, 0x00	; 0
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
    bitSet (UCSR0A, U2X0); 
    UBRR0H = reg >> 8;                 // setea la velocidad del USART
    UBRR0L = reg & 0xFF; 
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    bitSet (UCSR1A, U2X1); 
    12f0:	e8 ec       	ldi	r30, 0xC8	; 200
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	82 60       	ori	r24, 0x02	; 2
    12f8:	80 83       	st	Z, r24
    UBRR1H = reg >> 8;
    12fa:	30 93 cd 00 	sts	0x00CD, r19
    UBRR1L = reg & 0xFF;               // setea la velocidad del USART
    12fe:	20 93 cc 00 	sts	0x00CC, r18
#elif defined (__AVR_ATmega8__)
    bitSet (UCSRA, U2X); 
    UBRRH = reg >> 8;
    UBRRL = reg & 0xFF;                // setea la velocidad del USART
#endif    
    ax_rx_Pointer = 0;
    1302:	10 92 86 06 	sts	0x0686, r1
    // deshabilita tanto recepción como trasmisión
    setNone();
    1306:	0e 94 39 09 	call	0x1272	; 0x1272 <_ZN4AX127setNoneEv>
}
    130a:	08 95       	ret

0000130c <_ZN4AX12C1Eh>:
    inverse = false;
    SRL = RETURN_ALL;
    init (baud);
}

AX12::AX12 (byte motor_id) {
    130c:	fc 01       	movw	r30, r24
    id = motor_id;
    130e:	60 83       	st	Z, r22
    inverse = false;
    1310:	11 82       	std	Z+1, r1	; 0x01
    SRL = RETURN_ALL;
    1312:	82 e0       	ldi	r24, 0x02	; 2
    1314:	82 83       	std	Z+2, r24	; 0x02
}
    1316:	08 95       	ret

00001318 <_ZN4AX12C1Ev>:

AX12::AX12 () {
    1318:	fc 01       	movw	r30, r24
    id = BROADCAST_ID;
    131a:	8e ef       	ldi	r24, 0xFE	; 254
    131c:	80 83       	st	Z, r24
    inverse = false;
    131e:	11 82       	std	Z+1, r1	; 0x01
    SRL = RETURN_NONE;
    1320:	12 82       	std	Z+2, r1	; 0x02
}
    1322:	08 95       	ret

00001324 <_ZN4AX1210sendPacketEhhhPh>:
/******************************************************************************
 * Packet Level
 ******************************************************************************/

/** send instruction packet */
void AX12::sendPacket (byte _id, byte datalength, byte instruction, byte* data) {
    1324:	df 92       	push	r13
    1326:	ef 92       	push	r14
    1328:	ff 92       	push	r15
    132a:	0f 93       	push	r16
    132c:	1f 93       	push	r17
    132e:	08 2f       	mov	r16, r24
    1330:	d6 2e       	mov	r13, r22
    1332:	14 2f       	mov	r17, r20
    1334:	f2 2e       	mov	r15, r18
    1336:	e3 2e       	mov	r14, r19
    byte checksum = 0;
    setTX();
    1338:	0e 94 1f 09 	call	0x123e	; 0x123e <_ZN4AX125setTXEv>
byte AX12::writeByte (byte data) {
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
    while (bit_is_clear(UCSR0A, UDRE0));    // espera que el micro esté pronto para trasmitir
    UDR0 = data;                       // escribe el byte a trasmitir
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    while (bit_is_clear(UCSR1A, UDRE1));    // espera que el micro esté pronto para trasmitir
    133c:	80 91 c8 00 	lds	r24, 0x00C8
    1340:	85 ff       	sbrs	r24, 5
    1342:	fc cf       	rjmp	.-8      	; 0x133c <_ZN4AX1210sendPacketEhhhPh+0x18>
    UDR1 = data;                       // escribe el byte a trasmitir
    1344:	8f ef       	ldi	r24, 0xFF	; 255
    1346:	80 93 ce 00 	sts	0x00CE, r24
byte AX12::writeByte (byte data) {
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
    while (bit_is_clear(UCSR0A, UDRE0));    // espera que el micro esté pronto para trasmitir
    UDR0 = data;                       // escribe el byte a trasmitir
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    while (bit_is_clear(UCSR1A, UDRE1));    // espera que el micro esté pronto para trasmitir
    134a:	80 91 c8 00 	lds	r24, 0x00C8
    134e:	85 ff       	sbrs	r24, 5
    1350:	fc cf       	rjmp	.-8      	; 0x134a <_ZN4AX1210sendPacketEhhhPh+0x26>
    UDR1 = data;                       // escribe el byte a trasmitir
    1352:	8f ef       	ldi	r24, 0xFF	; 255
    1354:	80 93 ce 00 	sts	0x00CE, r24
byte AX12::writeByte (byte data) {
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
    while (bit_is_clear(UCSR0A, UDRE0));    // espera que el micro esté pronto para trasmitir
    UDR0 = data;                       // escribe el byte a trasmitir
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    while (bit_is_clear(UCSR1A, UDRE1));    // espera que el micro esté pronto para trasmitir
    1358:	80 91 c8 00 	lds	r24, 0x00C8
    135c:	85 ff       	sbrs	r24, 5
    135e:	fc cf       	rjmp	.-8      	; 0x1358 <_ZN4AX1210sendPacketEhhhPh+0x34>
    UDR1 = data;                       // escribe el byte a trasmitir
    1360:	00 93 ce 00 	sts	0x00CE, r16
    byte checksum = 0;
    setTX();
    writeByte (0xFF);
    writeByte (0xFF);
    checksum += writeByte (_id);
    checksum += writeByte (datalength + 2);
    1364:	4d 2d       	mov	r20, r13
    1366:	4e 5f       	subi	r20, 0xFE	; 254
byte AX12::writeByte (byte data) {
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
    while (bit_is_clear(UCSR0A, UDRE0));    // espera que el micro esté pronto para trasmitir
    UDR0 = data;                       // escribe el byte a trasmitir
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    while (bit_is_clear(UCSR1A, UDRE1));    // espera que el micro esté pronto para trasmitir
    1368:	80 91 c8 00 	lds	r24, 0x00C8
    136c:	85 ff       	sbrs	r24, 5
    136e:	fc cf       	rjmp	.-8      	; 0x1368 <_ZN4AX1210sendPacketEhhhPh+0x44>
    UDR1 = data;                       // escribe el byte a trasmitir
    1370:	40 93 ce 00 	sts	0x00CE, r20
byte AX12::writeByte (byte data) {
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
    while (bit_is_clear(UCSR0A, UDRE0));    // espera que el micro esté pronto para trasmitir
    UDR0 = data;                       // escribe el byte a trasmitir
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    while (bit_is_clear(UCSR1A, UDRE1));    // espera que el micro esté pronto para trasmitir
    1374:	80 91 c8 00 	lds	r24, 0x00C8
    1378:	85 ff       	sbrs	r24, 5
    137a:	fc cf       	rjmp	.-8      	; 0x1374 <_ZN4AX1210sendPacketEhhhPh+0x50>
    UDR1 = data;                       // escribe el byte a trasmitir
    137c:	10 93 ce 00 	sts	0x00CE, r17
    byte checksum = 0;
    setTX();
    writeByte (0xFF);
    writeByte (0xFF);
    checksum += writeByte (_id);
    checksum += writeByte (datalength + 2);
    1380:	41 0f       	add	r20, r17
    checksum += writeByte (instruction);
    1382:	40 0f       	add	r20, r16
    1384:	8f 2d       	mov	r24, r15
    1386:	9e 2d       	mov	r25, r14
    1388:	9c 01       	movw	r18, r24
    138a:	f9 01       	movw	r30, r18
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	0a c0       	rjmp	.+20     	; 0x13a4 <_ZN4AX1210sendPacketEhhhPh+0x80>
    for (byte f=0; f<datalength; f++) {     // data = parámetros
      checksum += writeByte (data[f]);
    1390:	20 81       	ld	r18, Z
byte AX12::writeByte (byte data) {
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
    while (bit_is_clear(UCSR0A, UDRE0));    // espera que el micro esté pronto para trasmitir
    UDR0 = data;                       // escribe el byte a trasmitir
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    while (bit_is_clear(UCSR1A, UDRE1));    // espera que el micro esté pronto para trasmitir
    1392:	80 91 c8 00 	lds	r24, 0x00C8
    1396:	85 ff       	sbrs	r24, 5
    1398:	fc cf       	rjmp	.-8      	; 0x1392 <_ZN4AX1210sendPacketEhhhPh+0x6e>
    UDR1 = data;                       // escribe el byte a trasmitir
    139a:	20 93 ce 00 	sts	0x00CE, r18
    writeByte (0xFF);
    checksum += writeByte (_id);
    checksum += writeByte (datalength + 2);
    checksum += writeByte (instruction);
    for (byte f=0; f<datalength; f++) {     // data = parámetros
      checksum += writeByte (data[f]);
    139e:	42 0f       	add	r20, r18
    writeByte (0xFF);
    writeByte (0xFF);
    checksum += writeByte (_id);
    checksum += writeByte (datalength + 2);
    checksum += writeByte (instruction);
    for (byte f=0; f<datalength; f++) {     // data = parámetros
    13a0:	9f 5f       	subi	r25, 0xFF	; 255
    13a2:	31 96       	adiw	r30, 0x01	; 1
    13a4:	9d 15       	cp	r25, r13
    13a6:	a0 f3       	brcs	.-24     	; 0x1390 <_ZN4AX1210sendPacketEhhhPh+0x6c>
byte AX12::writeByte (byte data) {
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
    while (bit_is_clear(UCSR0A, UDRE0));    // espera que el micro esté pronto para trasmitir
    UDR0 = data;                       // escribe el byte a trasmitir
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    while (bit_is_clear(UCSR1A, UDRE1));    // espera que el micro esté pronto para trasmitir
    13a8:	80 91 c8 00 	lds	r24, 0x00C8
    13ac:	85 ff       	sbrs	r24, 5
    13ae:	fc cf       	rjmp	.-8      	; 0x13a8 <_ZN4AX1210sendPacketEhhhPh+0x84>
    checksum += writeByte (instruction);
    for (byte f=0; f<datalength; f++) {     // data = parámetros
      checksum += writeByte (data[f]);
    }
    // checksum =
    writeByte (~checksum);
    13b0:	40 95       	com	r20
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
    while (bit_is_clear(UCSR0A, UDRE0));    // espera que el micro esté pronto para trasmitir
    UDR0 = data;                       // escribe el byte a trasmitir
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    while (bit_is_clear(UCSR1A, UDRE1));    // espera que el micro esté pronto para trasmitir
    UDR1 = data;                       // escribe el byte a trasmitir
    13b2:	40 93 ce 00 	sts	0x00CE, r20
    for (byte f=0; f<datalength; f++) {     // data = parámetros
      checksum += writeByte (data[f]);
    }
    // checksum =
    writeByte (~checksum);
    setRX();
    13b6:	0e 94 2b 09 	call	0x1256	; 0x1256 <_ZN4AX125setRXEv>
}
    13ba:	1f 91       	pop	r17
    13bc:	0f 91       	pop	r16
    13be:	ff 90       	pop	r15
    13c0:	ef 90       	pop	r14
    13c2:	df 90       	pop	r13
    13c4:	08 95       	ret

000013c6 <_ZN4AX1210readPacketEv>:
/** retorna la posición en el buffer a partir de la cual se lee lo siguiente:
    posición [0] = status_id
    posición [1] = internal error (0 = OK)
    posición [2] = status_error
    posición [3,4,...] = status_data        */
byte AX12::readPacket () {
    13c6:	ff 92       	push	r15
    13c8:	0f 93       	push	r16
    13ca:	1f 93       	push	r17
    13cc:	00 e0       	ldi	r16, 0x00	; 0
    13ce:	10 e0       	ldi	r17, 0x00	; 0
    13d0:	07 c0       	rjmp	.+14     	; 0x13e0 <_ZN4AX1210readPacketEv+0x1a>
    13d2:	2f 5f       	subi	r18, 0xFF	; 255
    13d4:	3f 4f       	sbci	r19, 0xFF	; 255
    // primero espera que llegue toda la data
    offset = 0; timeout = 0; bcount = 0;
    while (bcount < 13) {       // 13 es el largo máximo que puede tener un packet
        ulCounter = 0;
        while ((bcount + offset) == ax_rx_Pointer) {
            if (ulCounter++ > 1100L) {                   // was 3000
    13d6:	84 e0       	ldi	r24, 0x04	; 4
    13d8:	2e 34       	cpi	r18, 0x4E	; 78
    13da:	38 07       	cpc	r19, r24
    13dc:	41 f4       	brne	.+16     	; 0x13ee <_ZN4AX1210readPacketEv+0x28>
    13de:	15 c0       	rjmp	.+42     	; 0x140a <_ZN4AX1210readPacketEv+0x44>
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    byte timeout, error, status_length, checksum, offset, bcount;
    // primero espera que llegue toda la data
    offset = 0; timeout = 0; bcount = 0;
    while (bcount < 13) {       // 13 es el largo máximo que puede tener un packet
        ulCounter = 0;
        while ((bcount + offset) == ax_rx_Pointer) {
    13e4:	e0 2f       	mov	r30, r16
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	af 01       	movw	r20, r30
    13ea:	41 0f       	add	r20, r17
    13ec:	51 1d       	adc	r21, r1
    13ee:	80 91 86 06 	lds	r24, 0x0686
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	48 17       	cp	r20, r24
    13f6:	59 07       	cpc	r21, r25
    13f8:	61 f3       	breq	.-40     	; 0x13d2 <_ZN4AX1210readPacketEv+0xc>
    13fa:	3c c0       	rjmp	.+120    	; 0x1474 <_ZN4AX1210readPacketEv+0xae>
                timeout = 1;
                break;
            }
        }
        if (timeout) break;
        if ((bcount == 0) && (ax_rx_buffer[offset] != 0xff)) offset++;
    13fc:	ea 59       	subi	r30, 0x9A	; 154
    13fe:	f9 4f       	sbci	r31, 0xF9	; 249
    1400:	80 81       	ld	r24, Z
    1402:	8f 3f       	cpi	r24, 0xFF	; 255
    1404:	c9 f1       	breq	.+114    	; 0x1478 <_ZN4AX1210readPacketEv+0xb2>
    1406:	0f 5f       	subi	r16, 0xFF	; 255
    1408:	eb cf       	rjmp	.-42     	; 0x13e0 <_ZN4AX1210readPacketEv+0x1a>
        else bcount++;
    }
    setNone();
    140a:	0e 94 39 09 	call	0x1272	; 0x1272 <_ZN4AX127setNoneEv>
    140e:	90 e0       	ldi	r25, 0x00	; 0
    // ahora decodifica el packet
    // corrección de cabecera
    error = 0;                                             // código interno de error
    do {
        error++;
    1410:	9f 5f       	subi	r25, 0xFF	; 255
    1412:	f9 2e       	mov	r15, r25
    1414:	f0 0e       	add	r15, r16
    1416:	21 2f       	mov	r18, r17
    1418:	29 1b       	sub	r18, r25
    }
    setNone();
    // ahora decodifica el packet
    // corrección de cabecera
    error = 0;                                             // código interno de error
    do {
    141a:	4f 2d       	mov	r20, r15
    141c:	50 e0       	ldi	r21, 0x00	; 0
    141e:	fa 01       	movw	r30, r20
    1420:	ea 59       	subi	r30, 0x9A	; 154
    1422:	f9 4f       	sbci	r31, 0xF9	; 249
    1424:	80 81       	ld	r24, Z
    1426:	8f 3f       	cpi	r24, 0xFF	; 255
    1428:	99 f3       	breq	.-26     	; 0x1410 <_ZN4AX1210readPacketEv+0x4a>
        error++;
        offset++;
        bcount--;
    } while (ax_rx_buffer[offset] == 255);
    if (error > 1) error = 0;                               // prueba de cabecera
    142a:	92 30       	cpi	r25, 0x02	; 2
    142c:	08 f0       	brcs	.+2      	; 0x1430 <_ZN4AX1210readPacketEv+0x6a>
    142e:	90 e0       	ldi	r25, 0x00	; 0
    // offset = primer byte del mensaje (sin cabecera)
    // bcount = largo del mensaje leido (sin cabecera)
    status_length = 2 + ax_rx_buffer[offset+1];            // largo del mensaje decodificado
    1430:	da 01       	movw	r26, r20
    1432:	11 96       	adiw	r26, 0x01	; 1
    1434:	fd 01       	movw	r30, r26
    1436:	ea 59       	subi	r30, 0x9A	; 154
    1438:	f9 4f       	sbci	r31, 0xF9	; 249
    143a:	70 81       	ld	r23, Z
    143c:	7e 5f       	subi	r23, 0xFE	; 254
    if (bcount != status_length) error+=2;                 // prueba de coherencia de data
    143e:	27 13       	cpse	r18, r23
    1440:	9e 5f       	subi	r25, 0xFE	; 254
    1442:	9a 01       	movw	r18, r20
    1444:	60 e0       	ldi	r22, 0x00	; 0
    1446:	07 c0       	rjmp	.+14     	; 0x1456 <_ZN4AX1210readPacketEv+0x90>
    checksum = 0;                                          // cálculo de checksum
    for (byte f=0; f<status_length; f++)
        checksum += ax_rx_buffer[offset+f];
    1448:	f9 01       	movw	r30, r18
    144a:	ea 59       	subi	r30, 0x9A	; 154
    144c:	f9 4f       	sbci	r31, 0xF9	; 249
    144e:	80 81       	ld	r24, Z
    1450:	68 0f       	add	r22, r24
    1452:	2f 5f       	subi	r18, 0xFF	; 255
    1454:	3f 4f       	sbci	r19, 0xFF	; 255
    // offset = primer byte del mensaje (sin cabecera)
    // bcount = largo del mensaje leido (sin cabecera)
    status_length = 2 + ax_rx_buffer[offset+1];            // largo del mensaje decodificado
    if (bcount != status_length) error+=2;                 // prueba de coherencia de data
    checksum = 0;                                          // cálculo de checksum
    for (byte f=0; f<status_length; f++)
    1456:	82 2f       	mov	r24, r18
    1458:	84 1b       	sub	r24, r20
    145a:	87 17       	cp	r24, r23
    145c:	a8 f3       	brcs	.-22     	; 0x1448 <_ZN4AX1210readPacketEv+0x82>
        checksum += ax_rx_buffer[offset+f];
    if (checksum != 255) error+=4;                          // prueba de checksum
    145e:	6f 3f       	cpi	r22, 0xFF	; 255
    1460:	09 f0       	breq	.+2      	; 0x1464 <_ZN4AX1210readPacketEv+0x9e>
    1462:	9c 5f       	subi	r25, 0xFC	; 252
    ax_rx_buffer[offset+1] = error;
    1464:	aa 59       	subi	r26, 0x9A	; 154
    1466:	b9 4f       	sbci	r27, 0xF9	; 249
    1468:	9c 93       	st	X, r25
    return offset;   
}
    146a:	8f 2d       	mov	r24, r15
    146c:	1f 91       	pop	r17
    146e:	0f 91       	pop	r16
    1470:	ff 90       	pop	r15
    1472:	08 95       	ret
                timeout = 1;
                break;
            }
        }
        if (timeout) break;
        if ((bcount == 0) && (ax_rx_buffer[offset] != 0xff)) offset++;
    1474:	11 23       	and	r17, r17
    1476:	11 f2       	breq	.-124    	; 0x13fc <_ZN4AX1210readPacketEv+0x36>
        else bcount++;
    1478:	1f 5f       	subi	r17, 0xFF	; 255
byte AX12::readPacket () {
    unsigned long ulCounter;
    byte timeout, error, status_length, checksum, offset, bcount;
    // primero espera que llegue toda la data
    offset = 0; timeout = 0; bcount = 0;
    while (bcount < 13) {       // 13 es el largo máximo que puede tener un packet
    147a:	1d 30       	cpi	r17, 0x0D	; 13
    147c:	08 f4       	brcc	.+2      	; 0x1480 <_ZN4AX1210readPacketEv+0xba>
    147e:	b0 cf       	rjmp	.-160    	; 0x13e0 <_ZN4AX1210readPacketEv+0x1a>
    1480:	c4 cf       	rjmp	.-120    	; 0x140a <_ZN4AX1210readPacketEv+0x44>

00001482 <_Z8sign2bini>:
 * Misc.
 ******************************************************************************/

// solución para que bin2sign y sign2bin queden fuera de acá: distribuir junto con "util.cpp"
 
bool sign2bin (int numero) {         // numero > 0 --> true; numero <= 0 --> false
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	18 16       	cp	r1, r24
    1486:	19 06       	cpc	r1, r25
    1488:	0c f4       	brge	.+2      	; 0x148c <_Z8sign2bini+0xa>
    148a:	21 e0       	ldi	r18, 0x01	; 1
  return (numero > 0);
}
    148c:	82 2f       	mov	r24, r18
    148e:	08 95       	ret

00001490 <_Z8bin2signb>:

char bin2sign (bool var) {           // var = 0 --> sign = -1; var = 1 --> sign = 1
    1490:	88 0f       	add	r24, r24
  return 2*var - 1;
}
    1492:	81 50       	subi	r24, 0x01	; 1
    1494:	08 95       	ret

00001496 <_Z10lengthReadh>:
  }
}

byte lengthRead (byte registr) {
    byte reglength = 0;
    switch (registr) {
    1496:	e8 2f       	mov	r30, r24
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	e1 33       	cpi	r30, 0x31	; 49
    149c:	f1 05       	cpc	r31, r1
    149e:	50 f4       	brcc	.+20     	; 0x14b4 <_Z10lengthReadh+0x1e>
    14a0:	ee 58       	subi	r30, 0x8E	; 142
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	ee 0f       	add	r30, r30
    14a6:	ff 1f       	adc	r31, r31
    14a8:	05 90       	lpm	r0, Z+
    14aa:	f4 91       	lpm	r31, Z+
    14ac:	e0 2d       	mov	r30, r0
    14ae:	09 94       	ijmp
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	08 95       	ret
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	08 95       	ret
    14b8:	82 e0       	ldi	r24, 0x02	; 2
      case MAX_TORQUE: case DOWN_CALIBRATION: case UP_CALIBRATION: 
      case GOAL_POSITION: case MOVING_SPEED: case TORQUE_LIMIT: 
      case PRESENT_POSITION: case PRESENT_SPEED: case PRESENT_LOAD: case PUNCH: reglength = 2; break;
    }
    return reglength;
}
    14ba:	08 95       	ret

000014bc <_Z11lengthWriteh>:

byte lengthWrite (byte registr) {
    byte reglength = 0;
    switch (registr) {
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	fc 01       	movw	r30, r24
    14c0:	33 97       	sbiw	r30, 0x03	; 3
    14c2:	ee 32       	cpi	r30, 0x2E	; 46
    14c4:	f1 05       	cpc	r31, r1
    14c6:	50 f4       	brcc	.+20     	; 0x14dc <_Z11lengthWriteh+0x20>
    14c8:	ed 55       	subi	r30, 0x5D	; 93
    14ca:	ff 4f       	sbci	r31, 0xFF	; 255
    14cc:	ee 0f       	add	r30, r30
    14ce:	ff 1f       	adc	r31, r31
    14d0:	05 90       	lpm	r0, Z+
    14d2:	f4 91       	lpm	r31, Z+
    14d4:	e0 2d       	mov	r30, r0
    14d6:	09 94       	ijmp
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	08 95       	ret
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	08 95       	ret
    14e0:	82 e0       	ldi	r24, 0x02	; 2
      case CW_ANGLE_LIMIT: case CCW_ANGLE_LIMIT: 
      case MAX_TORQUE: case GOAL_POSITION: 
      case MOVING_SPEED: case TORQUE_LIMIT: case PUNCH: reglength = 2; break;
    }
    return reglength;
}
    14e2:	08 95       	ret

000014e4 <_ZN4AX1210returnDataEh>:

AX12data AX12::returnData (byte _srl) {
    14e4:	cf 93       	push	r28
    14e6:	df 93       	push	r29
    14e8:	ec 01       	movw	r28, r24
  AX12data returndata;
  if (SRL >= _srl) {
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	86 17       	cp	r24, r22
    14ee:	50 f1       	brcs	.+84     	; 0x1544 <_ZN4AX1210returnDataEh+0x60>
    byte index = readPacket ();
    14f0:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <_ZN4AX1210readPacketEv>
    byte status_id = ax_rx_buffer [index];
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	f9 01       	movw	r30, r18
    14fa:	ea 59       	subi	r30, 0x9A	; 154
    14fc:	f9 4f       	sbci	r31, 0xF9	; 249
    14fe:	90 81       	ld	r25, Z
    byte int_error = ax_rx_buffer [index+1];
    1500:	f9 01       	movw	r30, r18
    1502:	e9 59       	subi	r30, 0x99	; 153
    1504:	f9 4f       	sbci	r31, 0xF9	; 249
    1506:	60 81       	ld	r22, Z
    byte status_error = ax_rx_buffer [index+2];
    1508:	f9 01       	movw	r30, r18
    150a:	e8 59       	subi	r30, 0x98	; 152
    150c:	f9 4f       	sbci	r31, 0xF9	; 249
    150e:	a0 81       	ld	r26, Z
    returndata.error = (int_error<<7) | status_error | ((status_id != id)<<10);       // genera el mensaje de error, combinación de error interno con error ax12
    1510:	88 81       	ld	r24, Y
    1512:	98 17       	cp	r25, r24
    1514:	19 f4       	brne	.+6      	; 0x151c <_ZN4AX1210returnDataEh+0x38>
    1516:	40 e0       	ldi	r20, 0x00	; 0
    1518:	50 e0       	ldi	r21, 0x00	; 0
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <_ZN4AX1210returnDataEh+0x3c>
    151c:	40 e0       	ldi	r20, 0x00	; 0
    151e:	54 e0       	ldi	r21, 0x04	; 4
    1520:	e6 2f       	mov	r30, r22
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	f6 95       	lsr	r31
    1526:	fe 2f       	mov	r31, r30
    1528:	ee 27       	eor	r30, r30
    152a:	f7 95       	ror	r31
    152c:	e7 95       	ror	r30
    152e:	8a 2f       	mov	r24, r26
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	e8 2b       	or	r30, r24
    1534:	f9 2b       	or	r31, r25
    1536:	e4 2b       	or	r30, r20
    1538:	f5 2b       	or	r31, r21
    returndata.data = (byte*) &(ax_rx_buffer [index+3]);
    153a:	c9 01       	movw	r24, r18
    153c:	87 59       	subi	r24, 0x97	; 151
    153e:	99 4f       	sbci	r25, 0xF9	; 249
    1540:	38 2f       	mov	r19, r24
    1542:	04 c0       	rjmp	.+8      	; 0x154c <_ZN4AX1210returnDataEh+0x68>
  } else {
    setNone();
    1544:	0e 94 39 09 	call	0x1272	; 0x1272 <_ZN4AX127setNoneEv>
    1548:	ef ef       	ldi	r30, 0xFF	; 255
    154a:	ff ef       	ldi	r31, 0xFF	; 255
    returndata.error = -1;
  }
  return returndata;
    154c:	83 2f       	mov	r24, r19
}
    154e:	bf 01       	movw	r22, r30
    1550:	df 91       	pop	r29
    1552:	cf 91       	pop	r28
    1554:	08 95       	ret

00001556 <_ZN4AX128readDataEhh>:
  sendPacket (id, 0, ACTION, data);
  return returnData (RETURN_ALL).error;
}

/** read data */
AX12data AX12::readData (byte start, byte length) {
    1556:	0f 93       	push	r16
    1558:	1f 93       	push	r17
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	00 d0       	rcall	.+0      	; 0x1560 <_ZN4AX128readDataEhh+0xa>
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	8c 01       	movw	r16, r24
  byte data [2];
  data [0] = start; data [1] = length;
    1566:	69 83       	std	Y+1, r22	; 0x01
    1568:	4a 83       	std	Y+2, r20	; 0x02
  sendPacket (id, 2, READ_DATA, data);
    156a:	fc 01       	movw	r30, r24
    156c:	80 81       	ld	r24, Z
    156e:	62 e0       	ldi	r22, 0x02	; 2
    1570:	42 e0       	ldi	r20, 0x02	; 2
    1572:	9e 01       	movw	r18, r28
    1574:	2f 5f       	subi	r18, 0xFF	; 255
    1576:	3f 4f       	sbci	r19, 0xFF	; 255
    1578:	0e 94 92 09 	call	0x1324	; 0x1324 <_ZN4AX1210sendPacketEhhhPh>
  return returnData (RETURN_READ);
    157c:	c8 01       	movw	r24, r16
    157e:	61 e0       	ldi	r22, 0x01	; 1
    1580:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <_ZN4AX1210returnDataEh>
}
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	1f 91       	pop	r17
    158e:	0f 91       	pop	r16
    1590:	08 95       	ret

00001592 <_ZN4AX124pingEv>:
/******************************************************************************
 * Instruction Level
 ******************************************************************************/

/** ping */
int AX12::ping () {
    1592:	0f 93       	push	r16
    1594:	1f 93       	push	r17
    1596:	8c 01       	movw	r16, r24
  byte* data;
  sendPacket (id, 0, AX_PING, data);
    1598:	fc 01       	movw	r30, r24
    159a:	80 81       	ld	r24, Z
    159c:	60 e0       	ldi	r22, 0x00	; 0
    159e:	41 e0       	ldi	r20, 0x01	; 1
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	0e 94 92 09 	call	0x1324	; 0x1324 <_ZN4AX1210sendPacketEhhhPh>
  return returnData (RETURN_NONE).error;
    15a8:	c8 01       	movw	r24, r16
    15aa:	60 e0       	ldi	r22, 0x00	; 0
    15ac:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <_ZN4AX1210returnDataEh>
    15b0:	cb 01       	movw	r24, r22
}
    15b2:	1f 91       	pop	r17
    15b4:	0f 91       	pop	r16
    15b6:	08 95       	ret

000015b8 <_ZN4AX1212processValueEhPi>:
    returndata.error = -1;
  }
  return returndata;
}

void AX12::processValue (byte registr, int* value) {                           // procesa el valor para la salida segun la propiedad "inverse"
    15b8:	dc 01       	movw	r26, r24
    15ba:	fa 01       	movw	r30, r20
  switch (registr) {
    15bc:	64 32       	cpi	r22, 0x24	; 36
    15be:	51 f0       	breq	.+20     	; 0x15d4 <_ZN4AX1212processValueEhPi+0x1c>
    15c0:	65 32       	cpi	r22, 0x25	; 37
    15c2:	18 f4       	brcc	.+6      	; 0x15ca <_ZN4AX1212processValueEhPi+0x12>
    15c4:	6e 31       	cpi	r22, 0x1E	; 30
    15c6:	c9 f5       	brne	.+114    	; 0x163a <_ZN4AX1212processValueEhPi+0x82>
    15c8:	05 c0       	rjmp	.+10     	; 0x15d4 <_ZN4AX1212processValueEhPi+0x1c>
    15ca:	66 32       	cpi	r22, 0x26	; 38
    15cc:	81 f0       	breq	.+32     	; 0x15ee <_ZN4AX1212processValueEhPi+0x36>
    15ce:	68 32       	cpi	r22, 0x28	; 40
    15d0:	a1 f5       	brne	.+104    	; 0x163a <_ZN4AX1212processValueEhPi+0x82>
    15d2:	0d c0       	rjmp	.+26     	; 0x15ee <_ZN4AX1212processValueEhPi+0x36>
    case PRESENT_POSITION: case GOAL_POSITION:
      if (inverse) {*value = 1023 - *value;}
    15d4:	11 96       	adiw	r26, 0x01	; 1
    15d6:	8c 91       	ld	r24, X
    15d8:	88 23       	and	r24, r24
    15da:	79 f1       	breq	.+94     	; 0x163a <_ZN4AX1212processValueEhPi+0x82>
    15dc:	8f ef       	ldi	r24, 0xFF	; 255
    15de:	93 e0       	ldi	r25, 0x03	; 3
    15e0:	20 81       	ld	r18, Z
    15e2:	31 81       	ldd	r19, Z+1	; 0x01
    15e4:	82 1b       	sub	r24, r18
    15e6:	93 0b       	sbc	r25, r19
    15e8:	91 83       	std	Z+1, r25	; 0x01
    15ea:	80 83       	st	Z, r24
    15ec:	08 95       	ret
      break;
    case PRESENT_SPEED: case PRESENT_LOAD:
      *value = ((*value)&0x03FF) * bin2sign(((*value)>0x03FF)^inverse); 
    15ee:	40 81       	ld	r20, Z
    15f0:	51 81       	ldd	r21, Z+1	; 0x01
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	60 e0       	ldi	r22, 0x00	; 0
    15f8:	70 e0       	ldi	r23, 0x00	; 0
    15fa:	84 e0       	ldi	r24, 0x04	; 4
    15fc:	40 30       	cpi	r20, 0x00	; 0
    15fe:	58 07       	cpc	r21, r24
    1600:	14 f0       	brlt	.+4      	; 0x1606 <_ZN4AX1212processValueEhPi+0x4e>
    1602:	61 e0       	ldi	r22, 0x01	; 1
    1604:	70 e0       	ldi	r23, 0x00	; 0
    1606:	11 96       	adiw	r26, 0x01	; 1
    1608:	8c 91       	ld	r24, X
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	68 17       	cp	r22, r24
    160e:	79 07       	cpc	r23, r25
    1610:	11 f0       	breq	.+4      	; 0x1616 <_ZN4AX1212processValueEhPi+0x5e>
    1612:	21 e0       	ldi	r18, 0x01	; 1
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	22 0f       	add	r18, r18
    1618:	33 1f       	adc	r19, r19
    161a:	82 2f       	mov	r24, r18
    161c:	81 50       	subi	r24, 0x01	; 1
    161e:	99 27       	eor	r25, r25
    1620:	87 fd       	sbrc	r24, 7
    1622:	90 95       	com	r25
    1624:	53 70       	andi	r21, 0x03	; 3
    1626:	9c 01       	movw	r18, r24
    1628:	24 9f       	mul	r18, r20
    162a:	c0 01       	movw	r24, r0
    162c:	25 9f       	mul	r18, r21
    162e:	90 0d       	add	r25, r0
    1630:	34 9f       	mul	r19, r20
    1632:	90 0d       	add	r25, r0
    1634:	11 24       	eor	r1, r1
    1636:	91 83       	std	Z+1, r25	; 0x01
    1638:	80 83       	st	Z, r24
    163a:	08 95       	ret

0000163c <_ZN4AX128readInfoEh>:
/******************************************************************************
 * Register Level
 ******************************************************************************/

/** "intelligent" read data */
AX12info AX12::readInfo (byte registr) {
    163c:	ef 92       	push	r14
    163e:	ff 92       	push	r15
    1640:	0f 93       	push	r16
    1642:	1f 93       	push	r17
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	00 d0       	rcall	.+0      	; 0x164a <_ZN4AX128readInfoEh+0xe>
    164a:	00 d0       	rcall	.+0      	; 0x164c <_ZN4AX128readInfoEh+0x10>
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	7c 01       	movw	r14, r24
    1652:	06 2f       	mov	r16, r22
    byte reglength = lengthRead (registr);
    1654:	86 2f       	mov	r24, r22
    1656:	0e 94 4b 0a 	call	0x1496	; 0x1496 <_Z10lengthReadh>
    165a:	18 2f       	mov	r17, r24
    AX12info returninfo;
    returninfo.error = -2;
    165c:	8e ef       	ldi	r24, 0xFE	; 254
    165e:	9f ef       	ldi	r25, 0xFF	; 255
    1660:	9a 83       	std	Y+2, r25	; 0x02
    1662:	89 83       	std	Y+1, r24	; 0x01
    if (reglength == 0) {return returninfo;}
    1664:	11 23       	and	r17, r17
    1666:	d9 f0       	breq	.+54     	; 0x169e <_ZN4AX128readInfoEh+0x62>
    AX12data returndata = readData (registr, reglength);
    1668:	c7 01       	movw	r24, r14
    166a:	60 2f       	mov	r22, r16
    166c:	41 2f       	mov	r20, r17
    166e:	0e 94 ab 0a 	call	0x1556	; 0x1556 <_ZN4AX128readDataEhh>
    1672:	fc 01       	movw	r30, r24
    returninfo.error = returndata.error;
    1674:	7a 83       	std	Y+2, r23	; 0x02
    1676:	69 83       	std	Y+1, r22	; 0x01
    1678:	20 81       	ld	r18, Z
char bin2sign (bool var) {           // var = 0 --> sign = -1; var = 1 --> sign = 1
  return 2*var - 1;
}

int makeInt (byte *dir, byte reglength) {          // transforma 2 bytes en un int (según la lógica AX12)
  if (reglength > 1) {
    167a:	11 30       	cpi	r17, 0x01	; 1
    167c:	31 f0       	breq	.+12     	; 0x168a <_ZN4AX128readInfoEh+0x4e>
    return (dir[1] << 8) | dir[0];
    167e:	91 81       	ldd	r25, Z+1	; 0x01
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	28 2b       	or	r18, r24
    1686:	39 2b       	or	r19, r25
    1688:	01 c0       	rjmp	.+2      	; 0x168c <_ZN4AX128readInfoEh+0x50>
  } else {
    return dir[0];
    168a:	30 e0       	ldi	r19, 0x00	; 0
    AX12info returninfo;
    returninfo.error = -2;
    if (reglength == 0) {return returninfo;}
    AX12data returndata = readData (registr, reglength);
    returninfo.error = returndata.error;
    returninfo.value = makeInt (returndata.data, reglength);    
    168c:	3c 83       	std	Y+4, r19	; 0x04
    168e:	2b 83       	std	Y+3, r18	; 0x03
    processValue (registr, &returninfo.value);
    1690:	c7 01       	movw	r24, r14
    1692:	60 2f       	mov	r22, r16
    1694:	ae 01       	movw	r20, r28
    1696:	4d 5f       	subi	r20, 0xFD	; 253
    1698:	5f 4f       	sbci	r21, 0xFF	; 255
    169a:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <_ZN4AX1212processValueEhPi>
    return returninfo;
    169e:	69 81       	ldd	r22, Y+1	; 0x01
    16a0:	7a 81       	ldd	r23, Y+2	; 0x02
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	9c 81       	ldd	r25, Y+4	; 0x04
}
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	1f 91       	pop	r17
    16b4:	0f 91       	pop	r16
    16b6:	ff 90       	pop	r15
    16b8:	ef 90       	pop	r14
    16ba:	08 95       	ret

000016bc <_ZN4AX129syncWriteEhhhPhPS0_>:
                                                   // (las operaciones en la EEPROM no suelen ser real-time)
    return error;
}

/** sync write */
void AX12::syncWrite (byte start, byte length, byte targetlength, byte* targets, byte** valuess) {
    16bc:	2f 92       	push	r2
    16be:	3f 92       	push	r3
    16c0:	4f 92       	push	r4
    16c2:	5f 92       	push	r5
    16c4:	6f 92       	push	r6
    16c6:	7f 92       	push	r7
    16c8:	8f 92       	push	r8
    16ca:	9f 92       	push	r9
    16cc:	af 92       	push	r10
    16ce:	bf 92       	push	r11
    16d0:	cf 92       	push	r12
    16d2:	df 92       	push	r13
    16d4:	ef 92       	push	r14
    16d6:	ff 92       	push	r15
    16d8:	0f 93       	push	r16
    16da:	1f 93       	push	r17
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	86 2e       	mov	r8, r22
    16e6:	24 2e       	mov	r2, r20
    16e8:	39 01       	movw	r6, r18
      memcpy (&data[index], valuess[f], length);   // copio los valores
      index += length;
    }
    sendPacket (BROADCAST_ID, superlength, SYNC_WRITE, data);
    setNone();   
}
    16ea:	4d b6       	in	r4, 0x3d	; 61
    16ec:	5e b6       	in	r5, 0x3e	; 62
    return error;
}

/** sync write */
void AX12::syncWrite (byte start, byte length, byte targetlength, byte* targets, byte** valuess) {
    byte rowlength = length + 1;
    16ee:	36 2e       	mov	r3, r22
    16f0:	33 94       	inc	r3
    byte superlength = rowlength*targetlength + 2; 
    16f2:	43 9d       	mul	r20, r3
    16f4:	90 2c       	mov	r9, r0
    16f6:	11 24       	eor	r1, r1
    16f8:	22 e0       	ldi	r18, 0x02	; 2
    16fa:	92 0e       	add	r9, r18
    byte data [superlength];
    16fc:	ed b7       	in	r30, 0x3d	; 61
    16fe:	fe b7       	in	r31, 0x3e	; 62
    1700:	e9 19       	sub	r30, r9
    1702:	f1 09       	sbc	r31, r1
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	f8 94       	cli
    1708:	fe bf       	out	0x3e, r31	; 62
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	ed bf       	out	0x3d, r30	; 61
    170e:	ad b6       	in	r10, 0x3d	; 61
    1710:	be b6       	in	r11, 0x3e	; 62
    1712:	08 94       	sec
    1714:	a1 1c       	adc	r10, r1
    1716:	b1 1c       	adc	r11, r1
    data [0] = start; 
    1718:	81 83       	std	Z+1, r24	; 0x01
    data [1] = length;
    171a:	f5 01       	movw	r30, r10
    171c:	61 83       	std	Z+1, r22	; 0x01
    171e:	68 01       	movw	r12, r16
    1720:	12 e0       	ldi	r17, 0x02	; 2
    1722:	ee 24       	eor	r14, r14
    1724:	ff 24       	eor	r15, r15
    1726:	1d c0       	rjmp	.+58     	; 0x1762 <_ZN4AX129syncWriteEhhhPhPS0_+0xa6>
    byte index = 2;
    for (byte f=0; f<targetlength; f++) {
      data [index++] = targets[f];                 // pongo el ID
    1728:	d5 01       	movw	r26, r10
    172a:	a1 0f       	add	r26, r17
    172c:	b1 1d       	adc	r27, r1
    172e:	f3 01       	movw	r30, r6
    1730:	ee 0d       	add	r30, r14
    1732:	ff 1d       	adc	r31, r15
    1734:	80 81       	ld	r24, Z
    1736:	8c 93       	st	X, r24
      memcpy (&data[index], valuess[f], length);   // copio los valores
    1738:	1f 5f       	subi	r17, 0xFF	; 255
    173a:	95 01       	movw	r18, r10
    173c:	21 0f       	add	r18, r17
    173e:	31 1d       	adc	r19, r1
    1740:	11 50       	subi	r17, 0x01	; 1
    1742:	f6 01       	movw	r30, r12
    1744:	60 81       	ld	r22, Z
    1746:	71 81       	ldd	r23, Z+1	; 0x01
    1748:	c9 01       	movw	r24, r18
    174a:	48 2d       	mov	r20, r8
    174c:	50 e0       	ldi	r21, 0x00	; 0
    174e:	0e 94 6f 7b 	call	0xf6de	; 0xf6de <memcpy>
    1752:	13 0d       	add	r17, r3
    1754:	08 94       	sec
    1756:	e1 1c       	adc	r14, r1
    1758:	f1 1c       	adc	r15, r1
    175a:	22 e0       	ldi	r18, 0x02	; 2
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	c2 0e       	add	r12, r18
    1760:	d3 1e       	adc	r13, r19
    byte superlength = rowlength*targetlength + 2; 
    byte data [superlength];
    data [0] = start; 
    data [1] = length;
    byte index = 2;
    for (byte f=0; f<targetlength; f++) {
    1762:	e2 14       	cp	r14, r2
    1764:	08 f3       	brcs	.-62     	; 0x1728 <_ZN4AX129syncWriteEhhhPhPS0_+0x6c>
      data [index++] = targets[f];                 // pongo el ID
      memcpy (&data[index], valuess[f], length);   // copio los valores
      index += length;
    }
    sendPacket (BROADCAST_ID, superlength, SYNC_WRITE, data);
    1766:	8e ef       	ldi	r24, 0xFE	; 254
    1768:	69 2d       	mov	r22, r9
    176a:	43 e8       	ldi	r20, 0x83	; 131
    176c:	95 01       	movw	r18, r10
    176e:	0e 94 92 09 	call	0x1324	; 0x1324 <_ZN4AX1210sendPacketEhhhPh>
    setNone();   
    1772:	0e 94 39 09 	call	0x1272	; 0x1272 <_ZN4AX127setNoneEv>
}
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	f8 94       	cli
    177a:	5e be       	out	0x3e, r5	; 62
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	4d be       	out	0x3d, r4	; 61
    1780:	cf 91       	pop	r28
    1782:	df 91       	pop	r29
    1784:	1f 91       	pop	r17
    1786:	0f 91       	pop	r16
    1788:	ff 90       	pop	r15
    178a:	ef 90       	pop	r14
    178c:	df 90       	pop	r13
    178e:	cf 90       	pop	r12
    1790:	bf 90       	pop	r11
    1792:	af 90       	pop	r10
    1794:	9f 90       	pop	r9
    1796:	8f 90       	pop	r8
    1798:	7f 90       	pop	r7
    179a:	6f 90       	pop	r6
    179c:	5f 90       	pop	r5
    179e:	4f 90       	pop	r4
    17a0:	3f 90       	pop	r3
    17a2:	2f 90       	pop	r2
    17a4:	08 95       	ret

000017a6 <_ZN4AX1214setMultiPosVelEhPhPiS1_>:
    values [2] = lowByte(vel);
    values[3] = highByte(vel);
    return writeData (GOAL_POSITION, 4, values);
}

void AX12::setMultiPosVel (byte targetlength, byte* targets, int* posvalues, int* velvalues) {
    17a6:	6f 92       	push	r6
    17a8:	7f 92       	push	r7
    17aa:	8f 92       	push	r8
    17ac:	9f 92       	push	r9
    17ae:	af 92       	push	r10
    17b0:	bf 92       	push	r11
    17b2:	cf 92       	push	r12
    17b4:	df 92       	push	r13
    17b6:	ef 92       	push	r14
    17b8:	ff 92       	push	r15
    17ba:	0f 93       	push	r16
    17bc:	1f 93       	push	r17
    17be:	df 93       	push	r29
    17c0:	cf 93       	push	r28
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
    17c6:	08 2f       	mov	r16, r24
    17c8:	5b 01       	movw	r10, r22
      valuess[f][3] = highByte(velvalues[f]);
      pointers[f] = &valuess[f][0];
    }    
    //nota: la sync write no respeta la propiedad "inverse"
    syncWrite (GOAL_POSITION, 4, targetlength, targets, pointers);  
}
    17ca:	8d b6       	in	r8, 0x3d	; 61
    17cc:	9e b6       	in	r9, 0x3e	; 62
    values[3] = highByte(vel);
    return writeData (GOAL_POSITION, 4, values);
}

void AX12::setMultiPosVel (byte targetlength, byte* targets, int* posvalues, int* velvalues) {
    byte valuess [targetlength][4];
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	bc 01       	movw	r22, r24
    17d2:	66 0f       	add	r22, r22
    17d4:	77 1f       	adc	r23, r23
    17d6:	66 0f       	add	r22, r22
    17d8:	77 1f       	adc	r23, r23
    17da:	ad b7       	in	r26, 0x3d	; 61
    17dc:	be b7       	in	r27, 0x3e	; 62
    17de:	a6 1b       	sub	r26, r22
    17e0:	b7 0b       	sbc	r27, r23
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	f8 94       	cli
    17e6:	be bf       	out	0x3e, r27	; 62
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	ad bf       	out	0x3d, r26	; 61
    17ec:	ed b6       	in	r14, 0x3d	; 61
    17ee:	fe b6       	in	r15, 0x3e	; 62
    17f0:	08 94       	sec
    17f2:	e1 1c       	adc	r14, r1
    17f4:	f1 1c       	adc	r15, r1
    byte * pointers [targetlength];
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	ed b7       	in	r30, 0x3d	; 61
    17fc:	fe b7       	in	r31, 0x3e	; 62
    17fe:	e8 1b       	sub	r30, r24
    1800:	f9 0b       	sbc	r31, r25
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	fe bf       	out	0x3e, r31	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	ed bf       	out	0x3d, r30	; 61
    180c:	cd b6       	in	r12, 0x3d	; 61
    180e:	de b6       	in	r13, 0x3e	; 62
    1810:	08 94       	sec
    1812:	c1 1c       	adc	r12, r1
    1814:	d1 1c       	adc	r13, r1
    1816:	ba 01       	movw	r22, r20
    1818:	a9 01       	movw	r20, r18
    181a:	10 e0       	ldi	r17, 0x00	; 0
    181c:	32 c0       	rjmp	.+100    	; 0x1882 <_ZN4AX1214setMultiPosVelEhPhPiS1_+0xdc>
    for (byte f=0; f<targetlength; f++) {
      valuess [f][0] = lowByte(posvalues[f]);
    181e:	a1 2f       	mov	r26, r17
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	9d 01       	movw	r18, r26
    1824:	22 0f       	add	r18, r18
    1826:	33 1f       	adc	r19, r19
    1828:	22 0f       	add	r18, r18
    182a:	33 1f       	adc	r19, r19
    182c:	2e 0d       	add	r18, r14
    182e:	3f 1d       	adc	r19, r15
    1830:	fb 01       	movw	r30, r22
    1832:	80 81       	ld	r24, Z
    1834:	f9 01       	movw	r30, r18
    1836:	80 83       	st	Z, r24
      valuess[f][1] = highByte(posvalues[f]);
    1838:	fb 01       	movw	r30, r22
    183a:	81 91       	ld	r24, Z+
    183c:	91 91       	ld	r25, Z+
    183e:	bf 01       	movw	r22, r30
    1840:	89 2f       	mov	r24, r25
    1842:	99 0f       	add	r25, r25
    1844:	99 0b       	sbc	r25, r25
    1846:	f9 01       	movw	r30, r18
    1848:	81 83       	std	Z+1, r24	; 0x01
      valuess [f][2] = lowByte(velvalues[f]);
    184a:	3d 01       	movw	r6, r26
    184c:	66 0c       	add	r6, r6
    184e:	77 1c       	adc	r7, r7
    1850:	f3 01       	movw	r30, r6
    1852:	31 96       	adiw	r30, 0x01	; 1
    1854:	ee 0f       	add	r30, r30
    1856:	ff 1f       	adc	r31, r31
    1858:	ee 0d       	add	r30, r14
    185a:	ff 1d       	adc	r31, r15
    185c:	da 01       	movw	r26, r20
    185e:	8c 91       	ld	r24, X
    1860:	80 83       	st	Z, r24
      valuess[f][3] = highByte(velvalues[f]);
    1862:	fa 01       	movw	r30, r20
    1864:	81 91       	ld	r24, Z+
    1866:	91 91       	ld	r25, Z+
    1868:	af 01       	movw	r20, r30
    186a:	89 2f       	mov	r24, r25
    186c:	99 0f       	add	r25, r25
    186e:	99 0b       	sbc	r25, r25
    1870:	d9 01       	movw	r26, r18
    1872:	13 96       	adiw	r26, 0x03	; 3
    1874:	8c 93       	st	X, r24
      pointers[f] = &valuess[f][0];
    1876:	6c 0c       	add	r6, r12
    1878:	7d 1c       	adc	r7, r13
    187a:	f3 01       	movw	r30, r6
    187c:	31 83       	std	Z+1, r19	; 0x01
    187e:	20 83       	st	Z, r18
}

void AX12::setMultiPosVel (byte targetlength, byte* targets, int* posvalues, int* velvalues) {
    byte valuess [targetlength][4];
    byte * pointers [targetlength];
    for (byte f=0; f<targetlength; f++) {
    1880:	1f 5f       	subi	r17, 0xFF	; 255
    1882:	10 17       	cp	r17, r16
    1884:	60 f2       	brcs	.-104    	; 0x181e <_ZN4AX1214setMultiPosVelEhPhPiS1_+0x78>
      valuess [f][2] = lowByte(velvalues[f]);
      valuess[f][3] = highByte(velvalues[f]);
      pointers[f] = &valuess[f][0];
    }    
    //nota: la sync write no respeta la propiedad "inverse"
    syncWrite (GOAL_POSITION, 4, targetlength, targets, pointers);  
    1886:	8e e1       	ldi	r24, 0x1E	; 30
    1888:	64 e0       	ldi	r22, 0x04	; 4
    188a:	40 2f       	mov	r20, r16
    188c:	95 01       	movw	r18, r10
    188e:	86 01       	movw	r16, r12
    1890:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <_ZN4AX129syncWriteEhhhPhPS0_>
}
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	f8 94       	cli
    1898:	9e be       	out	0x3e, r9	; 62
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	8d be       	out	0x3d, r8	; 61
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	1f 91       	pop	r17
    18a4:	0f 91       	pop	r16
    18a6:	ff 90       	pop	r15
    18a8:	ef 90       	pop	r14
    18aa:	df 90       	pop	r13
    18ac:	cf 90       	pop	r12
    18ae:	bf 90       	pop	r11
    18b0:	af 90       	pop	r10
    18b2:	9f 90       	pop	r9
    18b4:	8f 90       	pop	r8
    18b6:	7f 90       	pop	r7
    18b8:	6f 90       	pop	r6
    18ba:	08 95       	ret

000018bc <_ZN4AX129writeDataEhhPhb>:
  return returnData (RETURN_READ);
}

/** write data + reg write */
// seteando a "true" el parámetro adicional (isReg) se transforma en un reg write
int AX12::writeData (byte start, byte length, byte* values, bool isReg) {
    18bc:	9f 92       	push	r9
    18be:	af 92       	push	r10
    18c0:	bf 92       	push	r11
    18c2:	cf 92       	push	r12
    18c4:	df 92       	push	r13
    18c6:	ef 92       	push	r14
    18c8:	ff 92       	push	r15
    18ca:	0f 93       	push	r16
    18cc:	1f 93       	push	r17
    18ce:	df 93       	push	r29
    18d0:	cf 93       	push	r28
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
    18d6:	6c 01       	movw	r12, r24
    18d8:	96 2e       	mov	r9, r22
    18da:	14 2f       	mov	r17, r20
    }
    int error = returnData (RETURN_ALL).error;
    if (start < 23) {delayMicroseconds (5000);}       // si la operación de escritura es en la EEPROM, este delay previene el embotellamiento
                                                   // (las operaciones en la EEPROM no suelen ser real-time)
    return error;
}
    18dc:	ad b6       	in	r10, 0x3d	; 61
    18de:	be b6       	in	r11, 0x3e	; 62
}

/** write data + reg write */
// seteando a "true" el parámetro adicional (isReg) se transforma en un reg write
int AX12::writeData (byte start, byte length, byte* values, bool isReg) {
    byte data [length+1];
    18e0:	84 2f       	mov	r24, r20
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	01 96       	adiw	r24, 0x01	; 1
    18e6:	4d b7       	in	r20, 0x3d	; 61
    18e8:	5e b7       	in	r21, 0x3e	; 62
    18ea:	48 1b       	sub	r20, r24
    18ec:	59 0b       	sbc	r21, r25
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	5e bf       	out	0x3e, r21	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	4d bf       	out	0x3d, r20	; 61
    18f8:	ed b6       	in	r14, 0x3d	; 61
    18fa:	fe b6       	in	r15, 0x3e	; 62
    18fc:	08 94       	sec
    18fe:	e1 1c       	adc	r14, r1
    1900:	f1 1c       	adc	r15, r1
    data [0] = start; 
    1902:	ed b7       	in	r30, 0x3d	; 61
    1904:	fe b7       	in	r31, 0x3e	; 62
    1906:	61 83       	std	Z+1, r22	; 0x01
    memcpy (&data[1], values, length);
    1908:	a7 01       	movw	r20, r14
    190a:	4f 5f       	subi	r20, 0xFF	; 255
    190c:	5f 4f       	sbci	r21, 0xFF	; 255
    190e:	ca 01       	movw	r24, r20
    1910:	b9 01       	movw	r22, r18
    1912:	41 2f       	mov	r20, r17
    1914:	50 e0       	ldi	r21, 0x00	; 0
    1916:	0e 94 6f 7b 	call	0xf6de	; 0xf6de <memcpy>
    191a:	61 2f       	mov	r22, r17
    191c:	6f 5f       	subi	r22, 0xFF	; 255
    if (isReg) {
    191e:	00 23       	and	r16, r16
    1920:	21 f0       	breq	.+8      	; 0x192a <_ZN4AX129writeDataEhhPhb+0x6e>
      sendPacket (id, length+1, REG_WRITE, data);
    1922:	f6 01       	movw	r30, r12
    1924:	80 81       	ld	r24, Z
    1926:	44 e0       	ldi	r20, 0x04	; 4
    1928:	03 c0       	rjmp	.+6      	; 0x1930 <_ZN4AX129writeDataEhhPhb+0x74>
    } else {
      sendPacket (id, length+1, WRITE_DATA, data);
    192a:	f6 01       	movw	r30, r12
    192c:	80 81       	ld	r24, Z
    192e:	43 e0       	ldi	r20, 0x03	; 3
    1930:	97 01       	movw	r18, r14
    1932:	0e 94 92 09 	call	0x1324	; 0x1324 <_ZN4AX1210sendPacketEhhhPh>
    }
    int error = returnData (RETURN_ALL).error;
    1936:	c6 01       	movw	r24, r12
    1938:	62 e0       	ldi	r22, 0x02	; 2
    193a:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <_ZN4AX1210returnDataEh>
    193e:	07 2f       	mov	r16, r23
    1940:	16 2f       	mov	r17, r22
    if (start < 23) {delayMicroseconds (5000);}       // si la operación de escritura es en la EEPROM, este delay previene el embotellamiento
    1942:	f6 e1       	ldi	r31, 0x16	; 22
    1944:	f9 15       	cp	r31, r9
    1946:	20 f0       	brcs	.+8      	; 0x1950 <_ZN4AX129writeDataEhhPhb+0x94>
    1948:	88 e8       	ldi	r24, 0x88	; 136
    194a:	93 e1       	ldi	r25, 0x13	; 19
    194c:	0e 94 91 1b 	call	0x3722	; 0x3722 <_Z17delayMicrosecondsj>
                                                   // (las operaciones en la EEPROM no suelen ser real-time)
    return error;
}
    1950:	81 2f       	mov	r24, r17
    1952:	90 2f       	mov	r25, r16
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	be be       	out	0x3e, r11	; 62
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	ad be       	out	0x3d, r10	; 61
    195e:	cf 91       	pop	r28
    1960:	df 91       	pop	r29
    1962:	1f 91       	pop	r17
    1964:	0f 91       	pop	r16
    1966:	ff 90       	pop	r15
    1968:	ef 90       	pop	r14
    196a:	df 90       	pop	r13
    196c:	cf 90       	pop	r12
    196e:	bf 90       	pop	r11
    1970:	af 90       	pop	r10
    1972:	9f 90       	pop	r9
    1974:	08 95       	ret

00001976 <_ZN4AX129writeInfoEhib>:
    return returninfo;
}

/** "intelligent" write data + reg write */
// seteando a "true" el parámetro adicional se transforma en un reg write
int AX12::writeInfo (byte registr, int value, bool isReg) {
    1976:	bf 92       	push	r11
    1978:	cf 92       	push	r12
    197a:	df 92       	push	r13
    197c:	ef 92       	push	r14
    197e:	ff 92       	push	r15
    1980:	0f 93       	push	r16
    1982:	1f 93       	push	r17
    1984:	df 93       	push	r29
    1986:	cf 93       	push	r28
    1988:	00 d0       	rcall	.+0      	; 0x198a <_ZN4AX129writeInfoEhib+0x14>
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	7c 01       	movw	r14, r24
    1990:	06 2f       	mov	r16, r22
    1992:	5a 83       	std	Y+2, r21	; 0x02
    1994:	49 83       	std	Y+1, r20	; 0x01
    1996:	b2 2e       	mov	r11, r18
    processValue (registr, &value);
    byte values [reglength];
    values [0] = lowByte(value);
    if (reglength > 1) {values[1] = highByte(value);}
    return writeData (registr, reglength, values, isReg);
}
    1998:	cd b6       	in	r12, 0x3d	; 61
    199a:	de b6       	in	r13, 0x3e	; 62
}

/** "intelligent" write data + reg write */
// seteando a "true" el parámetro adicional se transforma en un reg write
int AX12::writeInfo (byte registr, int value, bool isReg) {
    byte reglength = lengthWrite (registr);
    199c:	86 2f       	mov	r24, r22
    199e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <_Z11lengthWriteh>
    19a2:	18 2f       	mov	r17, r24
    if (reglength==0) {return -2;}
    19a4:	88 23       	and	r24, r24
    19a6:	19 f4       	brne	.+6      	; 0x19ae <_ZN4AX129writeInfoEhib+0x38>
    19a8:	2e ef       	ldi	r18, 0xFE	; 254
    19aa:	3f ef       	ldi	r19, 0xFF	; 255
    19ac:	27 c0       	rjmp	.+78     	; 0x19fc <_ZN4AX129writeInfoEhib+0x86>
    processValue (registr, &value);
    19ae:	c7 01       	movw	r24, r14
    19b0:	60 2f       	mov	r22, r16
    19b2:	ae 01       	movw	r20, r28
    19b4:	4f 5f       	subi	r20, 0xFF	; 255
    19b6:	5f 4f       	sbci	r21, 0xFF	; 255
    19b8:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <_ZN4AX1212processValueEhPi>
    byte values [reglength];
    19bc:	8d b7       	in	r24, 0x3d	; 61
    19be:	9e b7       	in	r25, 0x3e	; 62
    19c0:	81 1b       	sub	r24, r17
    19c2:	91 09       	sbc	r25, r1
    19c4:	0f b6       	in	r0, 0x3f	; 63
    19c6:	f8 94       	cli
    19c8:	9e bf       	out	0x3e, r25	; 62
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	8d bf       	out	0x3d, r24	; 61
    19ce:	ed b7       	in	r30, 0x3d	; 61
    19d0:	fe b7       	in	r31, 0x3e	; 62
    19d2:	31 96       	adiw	r30, 0x01	; 1
    values [0] = lowByte(value);
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	9a 81       	ldd	r25, Y+2	; 0x02
    19d8:	ad b7       	in	r26, 0x3d	; 61
    19da:	be b7       	in	r27, 0x3e	; 62
    19dc:	11 96       	adiw	r26, 0x01	; 1
    19de:	8c 93       	st	X, r24
    if (reglength > 1) {values[1] = highByte(value);}
    19e0:	11 30       	cpi	r17, 0x01	; 1
    19e2:	21 f0       	breq	.+8      	; 0x19ec <_ZN4AX129writeInfoEhib+0x76>
    19e4:	89 2f       	mov	r24, r25
    19e6:	99 0f       	add	r25, r25
    19e8:	99 0b       	sbc	r25, r25
    19ea:	81 83       	std	Z+1, r24	; 0x01
    return writeData (registr, reglength, values, isReg);
    19ec:	c7 01       	movw	r24, r14
    19ee:	60 2f       	mov	r22, r16
    19f0:	41 2f       	mov	r20, r17
    19f2:	9f 01       	movw	r18, r30
    19f4:	0b 2d       	mov	r16, r11
    19f6:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <_ZN4AX129writeDataEhhPhb>
    19fa:	9c 01       	movw	r18, r24
}
    19fc:	c9 01       	movw	r24, r18
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	f8 94       	cli
    1a02:	de be       	out	0x3e, r13	; 62
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	cd be       	out	0x3d, r12	; 61
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	1f 91       	pop	r17
    1a12:	0f 91       	pop	r16
    1a14:	ff 90       	pop	r15
    1a16:	ef 90       	pop	r14
    1a18:	df 90       	pop	r13
    1a1a:	cf 90       	pop	r12
    1a1c:	bf 90       	pop	r11
    1a1e:	08 95       	ret

00001a20 <_ZN9Bluetooth12blue_processEhhPh>:
	return 0;
}
		
void Bluetooth::blue_process (byte instruccion, byte largo, byte* data) {
	
    1a20:	08 95       	ret

00001a22 <_ZN9Bluetooth9ATcommandEPKcihz>:
		}
	}
	return false;
}

byte Bluetooth::ATcommand (const char *command, int timeout, byte numstrings, ...) {
    1a22:	2f 92       	push	r2
    1a24:	3f 92       	push	r3
    1a26:	4f 92       	push	r4
    1a28:	5f 92       	push	r5
    1a2a:	6f 92       	push	r6
    1a2c:	7f 92       	push	r7
    1a2e:	8f 92       	push	r8
    1a30:	9f 92       	push	r9
    1a32:	af 92       	push	r10
    1a34:	bf 92       	push	r11
    1a36:	cf 92       	push	r12
    1a38:	df 92       	push	r13
    1a3a:	ef 92       	push	r14
    1a3c:	ff 92       	push	r15
    1a3e:	0f 93       	push	r16
    1a40:	1f 93       	push	r17
    1a42:	df 93       	push	r29
    1a44:	cf 93       	push	r28
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
    1a4a:	2c 97       	sbiw	r28, 0x0c	; 12
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	de bf       	out	0x3e, r29	; 62
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	cd bf       	out	0x3d, r28	; 61
    1a56:	4f a0       	ldd	r4, Y+39	; 0x27
		for (byte f=0; f<numstrings; f++) {
			if (R.indexOf(key[f])>-1) {return f+1;}
		}
	}
	return 0;
}
    1a58:	2d b6       	in	r2, 0x3d	; 61
    1a5a:	3e b6       	in	r3, 0x3e	; 62
	return false;
}

byte Bluetooth::ATcommand (const char *command, int timeout, byte numstrings, ...) {
	// capturar parámetros
	String key [numstrings];
    1a5c:	84 2c       	mov	r8, r4
    1a5e:	99 24       	eor	r9, r9
    1a60:	c4 01       	movw	r24, r8
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	88 0d       	add	r24, r8
    1a68:	99 1d       	adc	r25, r9
    1a6a:	88 0f       	add	r24, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	2d b7       	in	r18, 0x3d	; 61
    1a70:	3e b7       	in	r19, 0x3e	; 62
    1a72:	28 1b       	sub	r18, r24
    1a74:	39 0b       	sbc	r19, r25
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	3e bf       	out	0x3e, r19	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	2d bf       	out	0x3d, r18	; 61
    1a80:	6d b6       	in	r6, 0x3d	; 61
    1a82:	7e b6       	in	r7, 0x3e	; 62
    1a84:	08 94       	sec
    1a86:	61 1c       	adc	r6, r1
    1a88:	71 1c       	adc	r7, r1
    1a8a:	83 01       	movw	r16, r6
    1a8c:	ee 24       	eor	r14, r14
    1a8e:	ff 24       	eor	r15, r15
    1a90:	64 01       	movw	r12, r8
    1a92:	08 94       	sec
    1a94:	c1 1c       	adc	r12, r1
    1a96:	d1 1c       	adc	r13, r1
    1a98:	04 c0       	rjmp	.+8      	; 0x1aa2 <_ZN9Bluetooth9ATcommandEPKcihz+0x80>
    1a9a:	61 e0       	ldi	r22, 0x01	; 1
    1a9c:	72 e0       	ldi	r23, 0x02	; 2
    1a9e:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    1aa2:	c8 01       	movw	r24, r16
    1aa4:	08 94       	sec
    1aa6:	e1 1c       	adc	r14, r1
    1aa8:	f1 1c       	adc	r15, r1
    1aaa:	0a 5f       	subi	r16, 0xFA	; 250
    1aac:	1f 4f       	sbci	r17, 0xFF	; 255
    1aae:	ec 14       	cp	r14, r12
    1ab0:	fd 04       	cpc	r15, r13
    1ab2:	99 f7       	brne	.-26     	; 0x1a9a <_ZN9Bluetooth9ATcommandEPKcihz+0x78>
		}
	}
	return false;
}

byte Bluetooth::ATcommand (const char *command, int timeout, byte numstrings, ...) {
    1ab4:	ce 01       	movw	r24, r28
    1ab6:	88 96       	adiw	r24, 0x28	; 40
    1ab8:	6c 01       	movw	r12, r24
    1aba:	10 e0       	ldi	r17, 0x00	; 0
	// capturar parámetros
	String key [numstrings];
	va_list args;
	va_start (args, numstrings);
	for (byte f=0; f<numstrings; f++) {
		key [f] = String (va_arg(args,const char*));
    1abc:	7e 01       	movw	r14, r28
    1abe:	08 94       	sec
    1ac0:	e1 1c       	adc	r14, r1
    1ac2:	f1 1c       	adc	r15, r1
    1ac4:	06 e0       	ldi	r16, 0x06	; 6
    1ac6:	13 c0       	rjmp	.+38     	; 0x1aee <_ZN9Bluetooth9ATcommandEPKcihz+0xcc>
    1ac8:	f6 01       	movw	r30, r12
    1aca:	61 91       	ld	r22, Z+
    1acc:	71 91       	ld	r23, Z+
    1ace:	6f 01       	movw	r12, r30
    1ad0:	c7 01       	movw	r24, r14
    1ad2:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    1ad6:	10 9f       	mul	r17, r16
    1ad8:	c0 01       	movw	r24, r0
    1ada:	11 24       	eor	r1, r1
    1adc:	86 0d       	add	r24, r6
    1ade:	97 1d       	adc	r25, r7
    1ae0:	b7 01       	movw	r22, r14
    1ae2:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    1ae6:	c7 01       	movw	r24, r14
    1ae8:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
byte Bluetooth::ATcommand (const char *command, int timeout, byte numstrings, ...) {
	// capturar parámetros
	String key [numstrings];
	va_list args;
	va_start (args, numstrings);
	for (byte f=0; f<numstrings; f++) {
    1aec:	1f 5f       	subi	r17, 0xFF	; 255
    1aee:	14 15       	cp	r17, r4
    1af0:	58 f3       	brcs	.-42     	; 0x1ac8 <_ZN9Bluetooth9ATcommandEPKcihz+0xa6>
		key [f] = String (va_arg(args,const char*));
	}
	va_end(args);
	// enviar comando
	Serial.flush();
    1af2:	80 e3       	ldi	r24, 0x30	; 48
    1af4:	96 e0       	ldi	r25, 0x06	; 6
    1af6:	0e 94 cd 04 	call	0x99a	; 0x99a <_ZN14HardwareSerial5flushEv>
	Serial.print (command); 
    1afa:	80 e3       	ldi	r24, 0x30	; 48
    1afc:	96 e0       	ldi	r25, 0x06	; 6
    1afe:	6b a1       	ldd	r22, Y+35	; 0x23
    1b00:	7c a1       	ldd	r23, Y+36	; 0x24
    1b02:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_ZN5Print5printEPKc>
	delay (timeout);            // wait response
    1b06:	6d a1       	ldd	r22, Y+37	; 0x25
    1b08:	7e a1       	ldd	r23, Y+38	; 0x26
    1b0a:	88 27       	eor	r24, r24
    1b0c:	77 fd       	sbrc	r23, 7
    1b0e:	80 95       	com	r24
    1b10:	98 2f       	mov	r25, r24
    1b12:	0e 94 67 1b 	call	0x36ce	; 0x36ce <_Z5delaym>
	// leer respuesta
	byte len = Serial.available();
    1b16:	80 e3       	ldi	r24, 0x30	; 48
    1b18:	96 e0       	ldi	r25, 0x06	; 6
    1b1a:	0e 94 98 04 	call	0x930	; 0x930 <_ZN14HardwareSerial9availableEv>
    1b1e:	b8 2e       	mov	r11, r24
	if (len > 0) {
    1b20:	88 23       	and	r24, r24
    1b22:	09 f4       	brne	.+2      	; 0x1b26 <_ZN9Bluetooth9ATcommandEPKcihz+0x104>
    1b24:	58 c0       	rjmp	.+176    	; 0x1bd6 <_ZN9Bluetooth9ATcommandEPKcihz+0x1b4>
    1b26:	ad b6       	in	r10, 0x3d	; 61
    1b28:	5e b6       	in	r5, 0x3e	; 62
		char respuesta[len+1];
    1b2a:	e8 2e       	mov	r14, r24
    1b2c:	ff 24       	eor	r15, r15
    1b2e:	c7 01       	movw	r24, r14
    1b30:	01 96       	adiw	r24, 0x01	; 1
    1b32:	2d b7       	in	r18, 0x3d	; 61
    1b34:	3e b7       	in	r19, 0x3e	; 62
    1b36:	28 1b       	sub	r18, r24
    1b38:	39 0b       	sbc	r19, r25
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	f8 94       	cli
    1b3e:	3e bf       	out	0x3e, r19	; 62
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	2d bf       	out	0x3d, r18	; 61
    1b44:	cd b6       	in	r12, 0x3d	; 61
    1b46:	de b6       	in	r13, 0x3e	; 62
    1b48:	08 94       	sec
    1b4a:	c1 1c       	adc	r12, r1
    1b4c:	d1 1c       	adc	r13, r1
    1b4e:	00 e0       	ldi	r16, 0x00	; 0
    1b50:	10 e0       	ldi	r17, 0x00	; 0
		for (byte f=0; f<len; f++){
			respuesta[f] = Serial.read();
    1b52:	80 e3       	ldi	r24, 0x30	; 48
    1b54:	96 e0       	ldi	r25, 0x06	; 6
    1b56:	0e 94 a9 04 	call	0x952	; 0x952 <_ZN14HardwareSerial4readEv>
    1b5a:	f6 01       	movw	r30, r12
    1b5c:	e0 0f       	add	r30, r16
    1b5e:	f1 1f       	adc	r31, r17
    1b60:	80 83       	st	Z, r24
    1b62:	0f 5f       	subi	r16, 0xFF	; 255
    1b64:	1f 4f       	sbci	r17, 0xFF	; 255
	delay (timeout);            // wait response
	// leer respuesta
	byte len = Serial.available();
	if (len > 0) {
		char respuesta[len+1];
		for (byte f=0; f<len; f++){
    1b66:	0b 15       	cp	r16, r11
    1b68:	a0 f3       	brcs	.-24     	; 0x1b52 <_ZN9Bluetooth9ATcommandEPKcihz+0x130>
			respuesta[f] = Serial.read();
		}
		respuesta[len] = NULL;
    1b6a:	ec 0c       	add	r14, r12
    1b6c:	fd 1c       	adc	r15, r13
    1b6e:	f7 01       	movw	r30, r14
    1b70:	10 82       	st	Z, r1
		String R = String (respuesta);
    1b72:	8e 01       	movw	r16, r28
    1b74:	09 5f       	subi	r16, 0xF9	; 249
    1b76:	1f 4f       	sbci	r17, 0xFF	; 255
    1b78:	c8 01       	movw	r24, r16
    1b7a:	b6 01       	movw	r22, r12
    1b7c:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    1b80:	ff 24       	eor	r15, r15
		// comparar con cada uno de los argumentos
		for (byte f=0; f<numstrings; f++) {
			if (R.indexOf(key[f])>-1) {return f+1;}
    1b82:	26 e0       	ldi	r18, 0x06	; 6
    1b84:	e2 2e       	mov	r14, r18
    1b86:	1a c0       	rjmp	.+52     	; 0x1bbc <_ZN9Bluetooth9ATcommandEPKcihz+0x19a>
    1b88:	fe 9c       	mul	r15, r14
    1b8a:	b0 01       	movw	r22, r0
    1b8c:	11 24       	eor	r1, r1
    1b8e:	66 0d       	add	r22, r6
    1b90:	77 1d       	adc	r23, r7
    1b92:	c8 01       	movw	r24, r16
    1b94:	0e 94 1f 08 	call	0x103e	; 0x103e <_ZNK6String7indexOfERKS_>
    1b98:	2f 2d       	mov	r18, r15
    1b9a:	2f 5f       	subi	r18, 0xFF	; 255
    1b9c:	97 fd       	sbrc	r25, 7
    1b9e:	0d c0       	rjmp	.+26     	; 0x1bba <_ZN9Bluetooth9ATcommandEPKcihz+0x198>
    1ba0:	f2 2e       	mov	r15, r18
		}
    1ba2:	c8 01       	movw	r24, r16
    1ba4:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    1ba8:	8a 2d       	mov	r24, r10
    1baa:	95 2d       	mov	r25, r5
    1bac:	9c 01       	movw	r18, r24
    1bae:	0f b6       	in	r0, 0x3f	; 63
    1bb0:	f8 94       	cli
    1bb2:	3e bf       	out	0x3e, r19	; 62
    1bb4:	0f be       	out	0x3f, r0	; 63
    1bb6:	2d bf       	out	0x3d, r18	; 61
    1bb8:	0f c0       	rjmp	.+30     	; 0x1bd8 <_ZN9Bluetooth9ATcommandEPKcihz+0x1b6>
			respuesta[f] = Serial.read();
		}
		respuesta[len] = NULL;
		String R = String (respuesta);
		// comparar con cada uno de los argumentos
		for (byte f=0; f<numstrings; f++) {
    1bba:	f2 2e       	mov	r15, r18
    1bbc:	f4 14       	cp	r15, r4
    1bbe:	20 f3       	brcs	.-56     	; 0x1b88 <_ZN9Bluetooth9ATcommandEPKcihz+0x166>
			if (R.indexOf(key[f])>-1) {return f+1;}
		}
    1bc0:	c8 01       	movw	r24, r16
    1bc2:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    1bc6:	8a 2d       	mov	r24, r10
    1bc8:	95 2d       	mov	r25, r5
    1bca:	9c 01       	movw	r18, r24
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	3e bf       	out	0x3e, r19	; 62
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	2d bf       	out	0x3d, r18	; 61
    1bd6:	ff 24       	eor	r15, r15
	}
	return 0;
    1bd8:	84 01       	movw	r16, r8
    1bda:	00 0f       	add	r16, r16
    1bdc:	11 1f       	adc	r17, r17
    1bde:	08 0d       	add	r16, r8
    1be0:	19 1d       	adc	r17, r9
    1be2:	00 0f       	add	r16, r16
    1be4:	11 1f       	adc	r17, r17
    1be6:	06 0d       	add	r16, r6
    1be8:	17 1d       	adc	r17, r7
    1bea:	06 15       	cp	r16, r6
    1bec:	17 05       	cpc	r17, r7
    1bee:	31 f0       	breq	.+12     	; 0x1bfc <_ZN9Bluetooth9ATcommandEPKcihz+0x1da>
    1bf0:	06 50       	subi	r16, 0x06	; 6
    1bf2:	10 40       	sbci	r17, 0x00	; 0
    1bf4:	c8 01       	movw	r24, r16
    1bf6:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    1bfa:	f7 cf       	rjmp	.-18     	; 0x1bea <_ZN9Bluetooth9ATcommandEPKcihz+0x1c8>
}
    1bfc:	8f 2d       	mov	r24, r15
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	3e be       	out	0x3e, r3	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	2d be       	out	0x3d, r2	; 61
    1c08:	2c 96       	adiw	r28, 0x0c	; 12
    1c0a:	0f b6       	in	r0, 0x3f	; 63
    1c0c:	f8 94       	cli
    1c0e:	de bf       	out	0x3e, r29	; 62
    1c10:	0f be       	out	0x3f, r0	; 63
    1c12:	cd bf       	out	0x3d, r28	; 61
    1c14:	cf 91       	pop	r28
    1c16:	df 91       	pop	r29
    1c18:	1f 91       	pop	r17
    1c1a:	0f 91       	pop	r16
    1c1c:	ff 90       	pop	r15
    1c1e:	ef 90       	pop	r14
    1c20:	df 90       	pop	r13
    1c22:	cf 90       	pop	r12
    1c24:	bf 90       	pop	r11
    1c26:	af 90       	pop	r10
    1c28:	9f 90       	pop	r9
    1c2a:	8f 90       	pop	r8
    1c2c:	7f 90       	pop	r7
    1c2e:	6f 90       	pop	r6
    1c30:	5f 90       	pop	r5
    1c32:	4f 90       	pop	r4
    1c34:	3f 90       	pop	r3
    1c36:	2f 90       	pop	r2
    1c38:	08 95       	ret

00001c3a <_ZN9Bluetooth7connectEv>:
	if (status == MODE_FAST) {blue_serial.send_msg (instruccion, largo, data);}
}

// maquinita de estados que gestiona la conexión al otro módulo bluetooth
// puede ser invocada en cualquier momento, por ejemplo si la conexión fue establecida desde afuera
bool Bluetooth::connect () {
    1c3a:	2f 92       	push	r2
    1c3c:	3f 92       	push	r3
    1c3e:	4f 92       	push	r4
    1c40:	5f 92       	push	r5
    1c42:	6f 92       	push	r6
    1c44:	7f 92       	push	r7
    1c46:	8f 92       	push	r8
    1c48:	9f 92       	push	r9
    1c4a:	af 92       	push	r10
    1c4c:	bf 92       	push	r11
    1c4e:	cf 92       	push	r12
    1c50:	df 92       	push	r13
    1c52:	ef 92       	push	r14
    1c54:	ff 92       	push	r15
    1c56:	0f 93       	push	r16
    1c58:	1f 93       	push	r17
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	ec 01       	movw	r28, r24
    1c60:	04 e0       	ldi	r16, 0x04	; 4
	byte retries = 4;                                 // poner un #define
	while (retries > 0) {
		switch (status) {
			case NOT_PRESENT:
				if (ATcommand("+++\r", 300, 1, "OK")) {status = CONNECTED;}       // esto contempla la posibilidad de que ya esté conectado, 
    1c62:	b2 e0       	ldi	r27, 0x02	; 2
    1c64:	8b 2e       	mov	r8, r27
    1c66:	b2 e0       	ldi	r27, 0x02	; 2
    1c68:	9b 2e       	mov	r9, r27
    1c6a:	ac e2       	ldi	r26, 0x2C	; 44
    1c6c:	ea 2e       	mov	r14, r26
    1c6e:	a1 e0       	ldi	r26, 0x01	; 1
    1c70:	fa 2e       	mov	r15, r26
    1c72:	bb 24       	eor	r11, r11
    1c74:	b3 94       	inc	r11
    1c76:	f7 e0       	ldi	r31, 0x07	; 7
    1c78:	cf 2e       	mov	r12, r31
    1c7a:	f2 e0       	ldi	r31, 0x02	; 2
    1c7c:	df 2e       	mov	r13, r31
																																						 // pero nunca en modo "fast" 
				else if (ATcommand("AT\r", 300, 1, "OK")) {                    // está vivo
					if (ATcommand("ATSI,3\r", 500, 1, ",1")) {status = CONNECTED;}
    1c7e:	e2 e0       	ldi	r30, 0x02	; 2
    1c80:	ae 2e       	mov	r10, r30
				}
				else {retries --;}
				break;
			case UNCONNECTED: {
				retries --;
				byte conn = ATcommand("ATDM,00066601574D,1101\r", 3800, 2, "CONNECT", "NO ANSWER");    // bien hardcodeado el mac address, otro #define
    1c82:	78 ed       	ldi	r23, 0xD8	; 216
    1c84:	27 2e       	mov	r2, r23
    1c86:	7e e0       	ldi	r23, 0x0E	; 14
    1c88:	37 2e       	mov	r3, r23
    1c8a:	61 e3       	ldi	r22, 0x31	; 49
    1c8c:	46 2e       	mov	r4, r22
    1c8e:	62 e0       	ldi	r22, 0x02	; 2
    1c90:	56 2e       	mov	r5, r22
    1c92:	59 e3       	ldi	r21, 0x39	; 57
    1c94:	65 2e       	mov	r6, r21
    1c96:	52 e0       	ldi	r21, 0x02	; 2
    1c98:	75 2e       	mov	r7, r21
// maquinita de estados que gestiona la conexión al otro módulo bluetooth
// puede ser invocada en cualquier momento, por ejemplo si la conexión fue establecida desde afuera
bool Bluetooth::connect () {
	byte retries = 4;                                 // poner un #define
	while (retries > 0) {
		switch (status) {
    1c9a:	1d 85       	ldd	r17, Y+13	; 0x0d
    1c9c:	11 30       	cpi	r17, 0x01	; 1
    1c9e:	09 f4       	brne	.+2      	; 0x1ca2 <_ZN9Bluetooth7connectEv+0x68>
    1ca0:	87 c0       	rjmp	.+270    	; 0x1db0 <_ZN9Bluetooth7connectEv+0x176>
    1ca2:	11 30       	cpi	r17, 0x01	; 1
    1ca4:	38 f0       	brcs	.+14     	; 0x1cb4 <_ZN9Bluetooth7connectEv+0x7a>
    1ca6:	12 30       	cpi	r17, 0x02	; 2
    1ca8:	09 f4       	brne	.+2      	; 0x1cac <_ZN9Bluetooth7connectEv+0x72>
    1caa:	b8 c0       	rjmp	.+368    	; 0x1e1c <_ZN9Bluetooth7connectEv+0x1e2>
    1cac:	13 30       	cpi	r17, 0x03	; 3
    1cae:	a9 f7       	brne	.-22     	; 0x1c9a <_ZN9Bluetooth7connectEv+0x60>
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	fe c0       	rjmp	.+508    	; 0x1eb0 <_ZN9Bluetooth7connectEv+0x276>
			case NOT_PRESENT:
				if (ATcommand("+++\r", 300, 1, "OK")) {status = CONNECTED;}       // esto contempla la posibilidad de que ya esté conectado, 
    1cb4:	2d b7       	in	r18, 0x3d	; 61
    1cb6:	3e b7       	in	r19, 0x3e	; 62
    1cb8:	29 50       	subi	r18, 0x09	; 9
    1cba:	30 40       	sbci	r19, 0x00	; 0
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	f8 94       	cli
    1cc0:	3e bf       	out	0x3e, r19	; 62
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	2d bf       	out	0x3d, r18	; 61
    1cc6:	ed b7       	in	r30, 0x3d	; 61
    1cc8:	fe b7       	in	r31, 0x3e	; 62
    1cca:	31 96       	adiw	r30, 0x01	; 1
    1ccc:	ad b7       	in	r26, 0x3d	; 61
    1cce:	be b7       	in	r27, 0x3e	; 62
    1cd0:	12 96       	adiw	r26, 0x02	; 2
    1cd2:	dc 93       	st	X, r29
    1cd4:	ce 93       	st	-X, r28
    1cd6:	11 97       	sbiw	r26, 0x01	; 1
    1cd8:	93 82       	std	Z+3, r9	; 0x03
    1cda:	82 82       	std	Z+2, r8	; 0x02
    1cdc:	f5 82       	std	Z+5, r15	; 0x05
    1cde:	e4 82       	std	Z+4, r14	; 0x04
    1ce0:	b6 82       	std	Z+6, r11	; 0x06
    1ce2:	d0 86       	std	Z+8, r13	; 0x08
    1ce4:	c7 82       	std	Z+7, r12	; 0x07
    1ce6:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <_ZN9Bluetooth9ATcommandEPKcihz>
    1cea:	2d b7       	in	r18, 0x3d	; 61
    1cec:	3e b7       	in	r19, 0x3e	; 62
    1cee:	27 5f       	subi	r18, 0xF7	; 247
    1cf0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	f8 94       	cli
    1cf6:	3e bf       	out	0x3e, r19	; 62
    1cf8:	0f be       	out	0x3f, r0	; 63
    1cfa:	2d bf       	out	0x3d, r18	; 61
    1cfc:	88 23       	and	r24, r24
    1cfe:	09 f0       	breq	.+2      	; 0x1d02 <_ZN9Bluetooth7connectEv+0xc8>
    1d00:	53 c0       	rjmp	.+166    	; 0x1da8 <_ZN9Bluetooth7connectEv+0x16e>
																																						 // pero nunca en modo "fast" 
				else if (ATcommand("AT\r", 300, 1, "OK")) {                    // está vivo
    1d02:	8d b7       	in	r24, 0x3d	; 61
    1d04:	9e b7       	in	r25, 0x3e	; 62
    1d06:	09 97       	sbiw	r24, 0x09	; 9
    1d08:	0f b6       	in	r0, 0x3f	; 63
    1d0a:	f8 94       	cli
    1d0c:	9e bf       	out	0x3e, r25	; 62
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	8d bf       	out	0x3d, r24	; 61
    1d12:	ed b7       	in	r30, 0x3d	; 61
    1d14:	fe b7       	in	r31, 0x3e	; 62
    1d16:	31 96       	adiw	r30, 0x01	; 1
    1d18:	ad b7       	in	r26, 0x3d	; 61
    1d1a:	be b7       	in	r27, 0x3e	; 62
    1d1c:	12 96       	adiw	r26, 0x02	; 2
    1d1e:	dc 93       	st	X, r29
    1d20:	ce 93       	st	-X, r28
    1d22:	11 97       	sbiw	r26, 0x01	; 1
    1d24:	2a e0       	ldi	r18, 0x0A	; 10
    1d26:	32 e0       	ldi	r19, 0x02	; 2
    1d28:	33 83       	std	Z+3, r19	; 0x03
    1d2a:	22 83       	std	Z+2, r18	; 0x02
    1d2c:	f5 82       	std	Z+5, r15	; 0x05
    1d2e:	e4 82       	std	Z+4, r14	; 0x04
    1d30:	b6 82       	std	Z+6, r11	; 0x06
    1d32:	d0 86       	std	Z+8, r13	; 0x08
    1d34:	c7 82       	std	Z+7, r12	; 0x07
    1d36:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <_ZN9Bluetooth9ATcommandEPKcihz>
    1d3a:	ad b7       	in	r26, 0x3d	; 61
    1d3c:	be b7       	in	r27, 0x3e	; 62
    1d3e:	19 96       	adiw	r26, 0x09	; 9
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	f8 94       	cli
    1d44:	be bf       	out	0x3e, r27	; 62
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	ad bf       	out	0x3d, r26	; 61
    1d4a:	88 23       	and	r24, r24
    1d4c:	79 f1       	breq	.+94     	; 0x1dac <_ZN9Bluetooth7connectEv+0x172>
					if (ATcommand("ATSI,3\r", 500, 1, ",1")) {status = CONNECTED;}
    1d4e:	2d b7       	in	r18, 0x3d	; 61
    1d50:	3e b7       	in	r19, 0x3e	; 62
    1d52:	29 50       	subi	r18, 0x09	; 9
    1d54:	30 40       	sbci	r19, 0x00	; 0
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	f8 94       	cli
    1d5a:	3e bf       	out	0x3e, r19	; 62
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	2d bf       	out	0x3d, r18	; 61
    1d60:	ed b7       	in	r30, 0x3d	; 61
    1d62:	fe b7       	in	r31, 0x3e	; 62
    1d64:	31 96       	adiw	r30, 0x01	; 1
    1d66:	ad b7       	in	r26, 0x3d	; 61
    1d68:	be b7       	in	r27, 0x3e	; 62
    1d6a:	12 96       	adiw	r26, 0x02	; 2
    1d6c:	dc 93       	st	X, r29
    1d6e:	ce 93       	st	-X, r28
    1d70:	11 97       	sbiw	r26, 0x01	; 1
    1d72:	2e e0       	ldi	r18, 0x0E	; 14
    1d74:	32 e0       	ldi	r19, 0x02	; 2
    1d76:	33 83       	std	Z+3, r19	; 0x03
    1d78:	22 83       	std	Z+2, r18	; 0x02
    1d7a:	84 ef       	ldi	r24, 0xF4	; 244
    1d7c:	91 e0       	ldi	r25, 0x01	; 1
    1d7e:	95 83       	std	Z+5, r25	; 0x05
    1d80:	84 83       	std	Z+4, r24	; 0x04
    1d82:	b6 82       	std	Z+6, r11	; 0x06
    1d84:	a6 e1       	ldi	r26, 0x16	; 22
    1d86:	b2 e0       	ldi	r27, 0x02	; 2
    1d88:	b0 87       	std	Z+8, r27	; 0x08
    1d8a:	a7 83       	std	Z+7, r26	; 0x07
    1d8c:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <_ZN9Bluetooth9ATcommandEPKcihz>
    1d90:	2d b7       	in	r18, 0x3d	; 61
    1d92:	3e b7       	in	r19, 0x3e	; 62
    1d94:	27 5f       	subi	r18, 0xF7	; 247
    1d96:	3f 4f       	sbci	r19, 0xFF	; 255
    1d98:	0f b6       	in	r0, 0x3f	; 63
    1d9a:	f8 94       	cli
    1d9c:	3e bf       	out	0x3e, r19	; 62
    1d9e:	0f be       	out	0x3f, r0	; 63
    1da0:	2d bf       	out	0x3d, r18	; 61
    1da2:	88 23       	and	r24, r24
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <_ZN9Bluetooth7connectEv+0x16e>
    1da6:	7c c0       	rjmp	.+248    	; 0x1ea0 <_ZN9Bluetooth7connectEv+0x266>
    1da8:	ad 86       	std	Y+13, r10	; 0x0d
    1daa:	77 cf       	rjmp	.-274    	; 0x1c9a <_ZN9Bluetooth7connectEv+0x60>
					else {status = UNCONNECTED;}
				}
				else {retries --;}
    1dac:	01 50       	subi	r16, 0x01	; 1
    1dae:	7c c0       	rjmp	.+248    	; 0x1ea8 <_ZN9Bluetooth7connectEv+0x26e>
				break;
			case UNCONNECTED: {
				retries --;
    1db0:	01 50       	subi	r16, 0x01	; 1
				byte conn = ATcommand("ATDM,00066601574D,1101\r", 3800, 2, "CONNECT", "NO ANSWER");    // bien hardcodeado el mac address, otro #define
    1db2:	8d b7       	in	r24, 0x3d	; 61
    1db4:	9e b7       	in	r25, 0x3e	; 62
    1db6:	0b 97       	sbiw	r24, 0x0b	; 11
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	9e bf       	out	0x3e, r25	; 62
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	8d bf       	out	0x3d, r24	; 61
    1dc2:	ed b7       	in	r30, 0x3d	; 61
    1dc4:	fe b7       	in	r31, 0x3e	; 62
    1dc6:	31 96       	adiw	r30, 0x01	; 1
    1dc8:	ad b7       	in	r26, 0x3d	; 61
    1dca:	be b7       	in	r27, 0x3e	; 62
    1dcc:	12 96       	adiw	r26, 0x02	; 2
    1dce:	dc 93       	st	X, r29
    1dd0:	ce 93       	st	-X, r28
    1dd2:	11 97       	sbiw	r26, 0x01	; 1
    1dd4:	29 e1       	ldi	r18, 0x19	; 25
    1dd6:	32 e0       	ldi	r19, 0x02	; 2
    1dd8:	33 83       	std	Z+3, r19	; 0x03
    1dda:	22 83       	std	Z+2, r18	; 0x02
    1ddc:	35 82       	std	Z+5, r3	; 0x05
    1dde:	24 82       	std	Z+4, r2	; 0x04
    1de0:	a6 82       	std	Z+6, r10	; 0x06
    1de2:	50 86       	std	Z+8, r5	; 0x08
    1de4:	47 82       	std	Z+7, r4	; 0x07
    1de6:	72 86       	std	Z+10, r7	; 0x0a
    1de8:	61 86       	std	Z+9, r6	; 0x09
    1dea:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <_ZN9Bluetooth9ATcommandEPKcihz>
				if (conn == 1) {status = CONNECTED;}
    1dee:	ad b7       	in	r26, 0x3d	; 61
    1df0:	be b7       	in	r27, 0x3e	; 62
    1df2:	1b 96       	adiw	r26, 0x0b	; 11
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	f8 94       	cli
    1df8:	be bf       	out	0x3e, r27	; 62
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	ad bf       	out	0x3d, r26	; 61
    1dfe:	81 30       	cpi	r24, 0x01	; 1
    1e00:	11 f4       	brne	.+4      	; 0x1e06 <_ZN9Bluetooth7connectEv+0x1cc>
    1e02:	ad 86       	std	Y+13, r10	; 0x0d
    1e04:	51 c0       	rjmp	.+162    	; 0x1ea8 <_ZN9Bluetooth7connectEv+0x26e>
				else if (conn == 0) {
    1e06:	88 23       	and	r24, r24
    1e08:	09 f0       	breq	.+2      	; 0x1e0c <_ZN9Bluetooth7connectEv+0x1d2>
    1e0a:	4e c0       	rjmp	.+156    	; 0x1ea8 <_ZN9Bluetooth7connectEv+0x26e>
					delay (300);
    1e0c:	6c e2       	ldi	r22, 0x2C	; 44
    1e0e:	71 e0       	ldi	r23, 0x01	; 1
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	0e 94 67 1b 	call	0x36ce	; 0x36ce <_Z5delaym>
					status = NOT_PRESENT;
    1e18:	1d 86       	std	Y+13, r1	; 0x0d
    1e1a:	46 c0       	rjmp	.+140    	; 0x1ea8 <_ZN9Bluetooth7connectEv+0x26e>
				}
				break;
			}
			case CONNECTED: {
				ATcommand("+++\r", 300, 0);
    1e1c:	2d b7       	in	r18, 0x3d	; 61
    1e1e:	3e b7       	in	r19, 0x3e	; 62
    1e20:	27 50       	subi	r18, 0x07	; 7
    1e22:	30 40       	sbci	r19, 0x00	; 0
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	f8 94       	cli
    1e28:	3e bf       	out	0x3e, r19	; 62
    1e2a:	0f be       	out	0x3f, r0	; 63
    1e2c:	2d bf       	out	0x3d, r18	; 61
    1e2e:	ed b7       	in	r30, 0x3d	; 61
    1e30:	fe b7       	in	r31, 0x3e	; 62
    1e32:	31 96       	adiw	r30, 0x01	; 1
    1e34:	ad b7       	in	r26, 0x3d	; 61
    1e36:	be b7       	in	r27, 0x3e	; 62
    1e38:	12 96       	adiw	r26, 0x02	; 2
    1e3a:	dc 93       	st	X, r29
    1e3c:	ce 93       	st	-X, r28
    1e3e:	11 97       	sbiw	r26, 0x01	; 1
    1e40:	93 82       	std	Z+3, r9	; 0x03
    1e42:	82 82       	std	Z+2, r8	; 0x02
    1e44:	f5 82       	std	Z+5, r15	; 0x05
    1e46:	e4 82       	std	Z+4, r14	; 0x04
    1e48:	16 82       	std	Z+6, r1	; 0x06
    1e4a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <_ZN9Bluetooth9ATcommandEPKcihz>
				byte mf = ATcommand("ATMF\r", 300, 2, "OK", "NO CARRIER");
    1e4e:	00 d0       	rcall	.+0      	; 0x1e50 <_ZN9Bluetooth7connectEv+0x216>
    1e50:	00 d0       	rcall	.+0      	; 0x1e52 <_ZN9Bluetooth7connectEv+0x218>
    1e52:	ed b7       	in	r30, 0x3d	; 61
    1e54:	fe b7       	in	r31, 0x3e	; 62
    1e56:	31 96       	adiw	r30, 0x01	; 1
    1e58:	ad b7       	in	r26, 0x3d	; 61
    1e5a:	be b7       	in	r27, 0x3e	; 62
    1e5c:	12 96       	adiw	r26, 0x02	; 2
    1e5e:	dc 93       	st	X, r29
    1e60:	ce 93       	st	-X, r28
    1e62:	11 97       	sbiw	r26, 0x01	; 1
    1e64:	23 e4       	ldi	r18, 0x43	; 67
    1e66:	32 e0       	ldi	r19, 0x02	; 2
    1e68:	33 83       	std	Z+3, r19	; 0x03
    1e6a:	22 83       	std	Z+2, r18	; 0x02
    1e6c:	f5 82       	std	Z+5, r15	; 0x05
    1e6e:	e4 82       	std	Z+4, r14	; 0x04
    1e70:	16 83       	std	Z+6, r17	; 0x06
    1e72:	d0 86       	std	Z+8, r13	; 0x08
    1e74:	c7 82       	std	Z+7, r12	; 0x07
    1e76:	89 e4       	ldi	r24, 0x49	; 73
    1e78:	92 e0       	ldi	r25, 0x02	; 2
    1e7a:	92 87       	std	Z+10, r25	; 0x0a
    1e7c:	81 87       	std	Z+9, r24	; 0x09
    1e7e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <_ZN9Bluetooth9ATcommandEPKcihz>
				if (mf == 1) {status = MODE_FAST;}
    1e82:	ad b7       	in	r26, 0x3d	; 61
    1e84:	be b7       	in	r27, 0x3e	; 62
    1e86:	1b 96       	adiw	r26, 0x0b	; 11
    1e88:	0f b6       	in	r0, 0x3f	; 63
    1e8a:	f8 94       	cli
    1e8c:	be bf       	out	0x3e, r27	; 62
    1e8e:	0f be       	out	0x3f, r0	; 63
    1e90:	ad bf       	out	0x3d, r26	; 61
    1e92:	81 30       	cpi	r24, 0x01	; 1
    1e94:	19 f4       	brne	.+6      	; 0x1e9c <_ZN9Bluetooth7connectEv+0x262>
    1e96:	b3 e0       	ldi	r27, 0x03	; 3
    1e98:	bd 87       	std	Y+13, r27	; 0x0d
    1e9a:	ff ce       	rjmp	.-514    	; 0x1c9a <_ZN9Bluetooth7connectEv+0x60>
				else if (mf == 2) {status = UNCONNECTED;}
    1e9c:	82 30       	cpi	r24, 0x02	; 2
    1e9e:	11 f4       	brne	.+4      	; 0x1ea4 <_ZN9Bluetooth7connectEv+0x26a>
    1ea0:	bd 86       	std	Y+13, r11	; 0x0d
    1ea2:	fb ce       	rjmp	.-522    	; 0x1c9a <_ZN9Bluetooth7connectEv+0x60>
				else {status = NOT_PRESENT;}
    1ea4:	1d 86       	std	Y+13, r1	; 0x0d
    1ea6:	f9 ce       	rjmp	.-526    	; 0x1c9a <_ZN9Bluetooth7connectEv+0x60>

// maquinita de estados que gestiona la conexión al otro módulo bluetooth
// puede ser invocada en cualquier momento, por ejemplo si la conexión fue establecida desde afuera
bool Bluetooth::connect () {
	byte retries = 4;                                 // poner un #define
	while (retries > 0) {
    1ea8:	00 23       	and	r16, r16
    1eaa:	09 f0       	breq	.+2      	; 0x1eae <_ZN9Bluetooth7connectEv+0x274>
    1eac:	f6 ce       	rjmp	.-532    	; 0x1c9a <_ZN9Bluetooth7connectEv+0x60>
    1eae:	80 e0       	ldi	r24, 0x00	; 0
			case MODE_FAST:
				return true;
		}
	}
	return false;
}
    1eb0:	df 91       	pop	r29
    1eb2:	cf 91       	pop	r28
    1eb4:	1f 91       	pop	r17
    1eb6:	0f 91       	pop	r16
    1eb8:	ff 90       	pop	r15
    1eba:	ef 90       	pop	r14
    1ebc:	df 90       	pop	r13
    1ebe:	cf 90       	pop	r12
    1ec0:	bf 90       	pop	r11
    1ec2:	af 90       	pop	r10
    1ec4:	9f 90       	pop	r9
    1ec6:	8f 90       	pop	r8
    1ec8:	7f 90       	pop	r7
    1eca:	6f 90       	pop	r6
    1ecc:	5f 90       	pop	r5
    1ece:	4f 90       	pop	r4
    1ed0:	3f 90       	pop	r3
    1ed2:	2f 90       	pop	r2
    1ed4:	08 95       	ret

00001ed6 <_ZN9BluetoothC1Ev>:
#include "util.h"
#include "display.h"

Bluetooth blue;              // objeto bluetooth

Bluetooth::Bluetooth () {
    1ed6:	8f 92       	push	r8
    1ed8:	9f 92       	push	r9
    1eda:	af 92       	push	r10
    1edc:	bf 92       	push	r11
    1ede:	cf 92       	push	r12
    1ee0:	df 92       	push	r13
    1ee2:	ef 92       	push	r14
    1ee4:	0f 93       	push	r16
    1ee6:	df 93       	push	r29
    1ee8:	cf 93       	push	r28
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	2d 97       	sbiw	r28, 0x0d	; 13
    1ef0:	0f b6       	in	r0, 0x3f	; 63
    1ef2:	f8 94       	cli
    1ef4:	de bf       	out	0x3e, r29	; 62
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	cd bf       	out	0x3d, r28	; 61
    1efa:	4c 01       	movw	r8, r24
    1efc:	0e 94 5e 65 	call	0xcabc	; 0xcabc <_ZN10SerialcommC1Ev>
	blue_serial = Serialcomm (&Serial, 115200, 3, 2, &blue_process);									// 3 bit instrucción, 2 bits largo
    1f00:	5e 01       	movw	r10, r28
    1f02:	08 94       	sec
    1f04:	a1 1c       	adc	r10, r1
    1f06:	b1 1c       	adc	r11, r1
    1f08:	c5 01       	movw	r24, r10
    1f0a:	60 e3       	ldi	r22, 0x30	; 48
    1f0c:	76 e0       	ldi	r23, 0x06	; 6
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	32 ec       	ldi	r19, 0xC2	; 194
    1f12:	41 e0       	ldi	r20, 0x01	; 1
    1f14:	50 e0       	ldi	r21, 0x00	; 0
    1f16:	03 e0       	ldi	r16, 0x03	; 3
    1f18:	f2 e0       	ldi	r31, 0x02	; 2
    1f1a:	ef 2e       	mov	r14, r31
    1f1c:	e0 e1       	ldi	r30, 0x10	; 16
    1f1e:	ce 2e       	mov	r12, r30
    1f20:	ed e0       	ldi	r30, 0x0D	; 13
    1f22:	de 2e       	mov	r13, r30
    1f24:	0e 94 0b 66 	call	0xcc16	; 0xcc16 <_ZN10SerialcommC1EP14HardwareSeriallhhPFvhhPhE>
    1f28:	d4 01       	movw	r26, r8
    1f2a:	f5 01       	movw	r30, r10
    1f2c:	8d e0       	ldi	r24, 0x0D	; 13
    1f2e:	01 90       	ld	r0, Z+
    1f30:	0d 92       	st	X+, r0
    1f32:	81 50       	subi	r24, 0x01	; 1
    1f34:	e1 f7       	brne	.-8      	; 0x1f2e <_ZN9BluetoothC1Ev+0x58>
	status = NOT_PRESENT;
    1f36:	f4 01       	movw	r30, r8
    1f38:	15 86       	std	Z+13, r1	; 0x0d
}
    1f3a:	2d 96       	adiw	r28, 0x0d	; 13
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	de bf       	out	0x3e, r29	; 62
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	cd bf       	out	0x3d, r28	; 61
    1f46:	cf 91       	pop	r28
    1f48:	df 91       	pop	r29
    1f4a:	0f 91       	pop	r16
    1f4c:	ef 90       	pop	r14
    1f4e:	df 90       	pop	r13
    1f50:	cf 90       	pop	r12
    1f52:	bf 90       	pop	r11
    1f54:	af 90       	pop	r10
    1f56:	9f 90       	pop	r9
    1f58:	8f 90       	pop	r8
    1f5a:	08 95       	ret

00001f5c <_GLOBAL__I_blue>:
#include <stdarg.h>
#include "mov_bajo_nivel.h"
#include "util.h"
#include "display.h"

Bluetooth blue;              // objeto bluetooth
    1f5c:	87 e8       	ldi	r24, 0x87	; 135
    1f5e:	96 e0       	ldi	r25, 0x06	; 6
    1f60:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <_ZN9BluetoothC1Ev>
	return 0;
}
		
void Bluetooth::blue_process (byte instruccion, byte largo, byte* data) {
	
    1f64:	08 95       	ret

00001f66 <_ZN6Cabeza8callbackEhhPh>:
	otro nivel de polling sobre las variables para ver si ocurrió algun evento o no. */
	
/* IMPLEMENTAR: que haya "modos" de respuesta al llamado, 
  por ejemplo, mientras el robot está andando, todos los llamados provocarían un stop() */
	
void Cabeza::callback (byte instruccion, byte largo, byte* data) {
    1f66:	da 01       	movw	r26, r20
	
	// combina instrucción y largo, dando una combinación única
	instruccion += 8*largo;                        
    1f68:	66 0f       	add	r22, r22
    1f6a:	66 0f       	add	r22, r22
    1f6c:	66 0f       	add	r22, r22
    1f6e:	68 0f       	add	r22, r24
	
	switch (instruccion) {
    1f70:	6d 30       	cpi	r22, 0x0D	; 13
    1f72:	30 f4       	brcc	.+12     	; 0x1f80 <_ZN6Cabeza8callbackEhhPh+0x1a>
    1f74:	69 30       	cpi	r22, 0x09	; 9
    1f76:	a0 f4       	brcc	.+40     	; 0x1fa0 <_ZN6Cabeza8callbackEhhPh+0x3a>
    1f78:	68 30       	cpi	r22, 0x08	; 8
    1f7a:	09 f0       	breq	.+2      	; 0x1f7e <_ZN6Cabeza8callbackEhhPh+0x18>
    1f7c:	5b c0       	rjmp	.+182    	; 0x2034 <_ZN6Cabeza8callbackEhhPh+0xce>
    1f7e:	09 c0       	rjmp	.+18     	; 0x1f92 <_ZN6Cabeza8callbackEhhPh+0x2c>
    1f80:	60 31       	cpi	r22, 0x10	; 16
    1f82:	a1 f1       	breq	.+104    	; 0x1fec <_ZN6Cabeza8callbackEhhPh+0x86>
    1f84:	6f 31       	cpi	r22, 0x1F	; 31
    1f86:	09 f4       	brne	.+2      	; 0x1f8a <_ZN6Cabeza8callbackEhhPh+0x24>
    1f88:	47 c0       	rjmp	.+142    	; 0x2018 <_ZN6Cabeza8callbackEhhPh+0xb2>
    1f8a:	6f 30       	cpi	r22, 0x0F	; 15
    1f8c:	09 f0       	breq	.+2      	; 0x1f90 <_ZN6Cabeza8callbackEhhPh+0x2a>
    1f8e:	52 c0       	rjmp	.+164    	; 0x2034 <_ZN6Cabeza8callbackEhhPh+0xce>
    1f90:	27 c0       	rjmp	.+78     	; 0x1fe0 <_ZN6Cabeza8callbackEhhPh+0x7a>
		case 8:                                          // distancia cm (1 byte)
			cm_dist = data[0];
    1f92:	8c 91       	ld	r24, X
    1f94:	80 93 a2 06 	sts	0x06A2, r24
			flag |= 1;                                     // bit 0 de flag
    1f98:	80 91 a9 06 	lds	r24, 0x06A9
    1f9c:	81 60       	ori	r24, 0x01	; 1
    1f9e:	39 c0       	rjmp	.+114    	; 0x2012 <_ZN6Cabeza8callbackEhhPh+0xac>
			break;
		case 9: case 10: case 11: case 12:                    // vel, lat, evnt_vel y evnt_lat (1 byte con signo)
			*values[instruccion-9] = data[0] - 100;
    1fa0:	26 2f       	mov	r18, r22
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	f9 01       	movw	r30, r18
    1fa6:	ee 0f       	add	r30, r30
    1fa8:	ff 1f       	adc	r31, r31
    1faa:	ed 52       	subi	r30, 0x2D	; 45
    1fac:	fc 4f       	sbci	r31, 0xFC	; 252
    1fae:	01 90       	ld	r0, Z+
    1fb0:	f0 81       	ld	r31, Z
    1fb2:	e0 2d       	mov	r30, r0
    1fb4:	8c 91       	ld	r24, X
    1fb6:	84 56       	subi	r24, 0x64	; 100
    1fb8:	80 83       	st	Z, r24
			bitSet (flag, instruccion-8);                      // bits 1, 2, 3 y 4 de flag
    1fba:	40 91 a9 06 	lds	r20, 0x06A9
    1fbe:	28 50       	subi	r18, 0x08	; 8
    1fc0:	30 40       	sbci	r19, 0x00	; 0
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	a0 e0       	ldi	r26, 0x00	; 0
    1fc8:	b0 e0       	ldi	r27, 0x00	; 0
    1fca:	04 c0       	rjmp	.+8      	; 0x1fd4 <_ZN6Cabeza8callbackEhhPh+0x6e>
    1fcc:	88 0f       	add	r24, r24
    1fce:	99 1f       	adc	r25, r25
    1fd0:	aa 1f       	adc	r26, r26
    1fd2:	bb 1f       	adc	r27, r27
    1fd4:	2a 95       	dec	r18
    1fd6:	d2 f7       	brpl	.-12     	; 0x1fcc <_ZN6Cabeza8callbackEhhPh+0x66>
    1fd8:	48 2b       	or	r20, r24
    1fda:	40 93 a9 06 	sts	0x06A9, r20
    1fde:	08 95       	ret
			
			break;
		case 15:                                          // comando IR
			/* El comando IR llama directamente a la acción. Los otros 
			eventos, en cambio, se limitan a setear variables  */
			rc.procesar_comando (data[0]);
    1fe0:	8c e7       	ldi	r24, 0x7C	; 124
    1fe2:	94 e1       	ldi	r25, 0x14	; 20
    1fe4:	6c 91       	ld	r22, X
    1fe6:	0e 94 c0 61 	call	0xc380	; 0xc380 <_ZN13RemoteControl16procesar_comandoEh>
    1fea:	08 95       	ret
	return angulo_act [servo];
}
*/

int Cabeza::twobyte2int (byte* data) {          // transforma 2 bytes de 7 bits en un int
  return 128*data[0] + data[1];
    1fec:	11 96       	adiw	r26, 0x01	; 1
    1fee:	8c 91       	ld	r24, X
    1ff0:	11 97       	sbiw	r26, 0x01	; 1
    1ff2:	2c 91       	ld	r18, X
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	36 95       	lsr	r19
    1ff8:	32 2f       	mov	r19, r18
    1ffa:	22 27       	eor	r18, r18
    1ffc:	37 95       	ror	r19
    1ffe:	27 95       	ror	r18
    2000:	28 0f       	add	r18, r24
    2002:	31 1d       	adc	r19, r1
			/* El comando IR llama directamente a la acción. Los otros 
			eventos, en cambio, se limitan a setear variables  */
			rc.procesar_comando (data[0]);
			break;
		case 16:                                          // distancia en mm (2 bytes)
			mm_dist = twobyte2int (data);
    2004:	30 93 a8 06 	sts	0x06A8, r19
    2008:	20 93 a7 06 	sts	0x06A7, r18
			bitSet (flag, 5);                                // bit 5 de flag
    200c:	80 91 a9 06 	lds	r24, 0x06A9
    2010:	80 62       	ori	r24, 0x20	; 32
    2012:	80 93 a9 06 	sts	0x06A9, r24
    2016:	08 95       	ret
			break; 
		case 31:                                         // send all (distancia cm + vel + lat)
			cm_dist = data[0];
    2018:	8c 91       	ld	r24, X
    201a:	80 93 a2 06 	sts	0x06A2, r24
			vel = data[1] - 100;                             // nota: el send_all no modifica flag
    201e:	11 96       	adiw	r26, 0x01	; 1
    2020:	8c 91       	ld	r24, X
    2022:	11 97       	sbiw	r26, 0x01	; 1
    2024:	84 56       	subi	r24, 0x64	; 100
    2026:	80 93 a3 06 	sts	0x06A3, r24
			lat = data[2] - 100;
    202a:	12 96       	adiw	r26, 0x02	; 2
    202c:	8c 91       	ld	r24, X
    202e:	84 56       	subi	r24, 0x64	; 100
    2030:	80 93 a4 06 	sts	0x06A4, r24
    2034:	08 95       	ret

00002036 <_ZN6Cabeza16disable_send_allEv>:
void Cabeza::enable_send_all () {    // nota: esto cambió en la v4 del firmware cabeza
	byte value = true;
	comm.send_msg (7, 1, &value);
}               

void Cabeza::disable_send_all () {    // nota: esto cambió en la v4 del firmware cabeza
    2036:	df 93       	push	r29
    2038:	cf 93       	push	r28
    203a:	0f 92       	push	r0
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
	byte value = false;
    2040:	19 82       	std	Y+1, r1	; 0x01
	comm.send_msg (7, 1, &value);
    2042:	67 e0       	ldi	r22, 0x07	; 7
    2044:	41 e0       	ldi	r20, 0x01	; 1
    2046:	9e 01       	movw	r18, r28
    2048:	2f 5f       	subi	r18, 0xFF	; 255
    204a:	3f 4f       	sbci	r19, 0xFF	; 255
    204c:	0e 94 5f 65 	call	0xcabe	; 0xcabe <_ZN10Serialcomm8send_msgEhhPh>
}               
    2050:	0f 90       	pop	r0
    2052:	cf 91       	pop	r28
    2054:	df 91       	pop	r29
    2056:	08 95       	ret

00002058 <_ZN6Cabeza8set_timeEh>:
	} else if (parametro == MM_DIST) {
		comm.send_2byte_msg (0, valor);
	}     
} 

void Cabeza::set_time (byte ms) {    // período de muestreo. Valor por defecto 10ms
    2058:	df 93       	push	r29
    205a:	cf 93       	push	r28
    205c:	0f 92       	push	r0
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
    2062:	69 83       	std	Y+1, r22	; 0x01
  comm.send_msg (5, 1, &ms);
    2064:	65 e0       	ldi	r22, 0x05	; 5
    2066:	41 e0       	ldi	r20, 0x01	; 1
    2068:	9e 01       	movw	r18, r28
    206a:	2f 5f       	subi	r18, 0xFF	; 255
    206c:	3f 4f       	sbci	r19, 0xFF	; 255
    206e:	0e 94 5f 65 	call	0xcabe	; 0xcabe <_ZN10Serialcomm8send_msgEhhPh>
}
    2072:	0f 90       	pop	r0
    2074:	cf 91       	pop	r28
    2076:	df 91       	pop	r29
    2078:	08 95       	ret

0000207a <_ZN6Cabeza7requestEh>:
  return 128*data[0] + data[1];
} 

// usar esta rutina cuando está habilitado el polling (por defecto)
void Cabeza::request (byte parametro) {
	comm.send_msg (parametro, 0, NULL);      // los requests son todos de 0 byte
    207a:	40 e0       	ldi	r20, 0x00	; 0
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	0e 94 5f 65 	call	0xcabe	; 0xcabe <_ZN10Serialcomm8send_msgEhhPh>
}
    2084:	08 95       	ret

00002086 <_ZN6Cabeza13set_thresholdEhj>:

/* setear los umbrales:
CM_DIST y MM_DIST el umbral por defecto es 0, y se activan cuando la distancia es MENOR que el umbral
El resto de los parámetros, el umbral por defecto es 127, y se activan cuando |valor| > umbral      */

void Cabeza::set_threshold (byte parametro, unsigned int valor) {
    2086:	df 93       	push	r29
    2088:	cf 93       	push	r28
    208a:	0f 92       	push	r0
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
	if (parametro < MM_DIST) {
    2090:	65 30       	cpi	r22, 0x05	; 5
    2092:	40 f4       	brcc	.+16     	; 0x20a4 <_ZN6Cabeza13set_thresholdEhj+0x1e>
		byte value = valor;
    2094:	49 83       	std	Y+1, r20	; 0x01
		comm.send_msg (parametro, 1, &value);
    2096:	41 e0       	ldi	r20, 0x01	; 1
    2098:	9e 01       	movw	r18, r28
    209a:	2f 5f       	subi	r18, 0xFF	; 255
    209c:	3f 4f       	sbci	r19, 0xFF	; 255
    209e:	0e 94 5f 65 	call	0xcabe	; 0xcabe <_ZN10Serialcomm8send_msgEhhPh>
    20a2:	05 c0       	rjmp	.+10     	; 0x20ae <_ZN6Cabeza13set_thresholdEhj+0x28>
	} else if (parametro == MM_DIST) {
    20a4:	65 30       	cpi	r22, 0x05	; 5
    20a6:	19 f4       	brne	.+6      	; 0x20ae <_ZN6Cabeza13set_thresholdEhj+0x28>
		comm.send_2byte_msg (0, valor);
    20a8:	60 e0       	ldi	r22, 0x00	; 0
    20aa:	0e 94 dc 65 	call	0xcbb8	; 0xcbb8 <_ZN10Serialcomm14send_2byte_msgEhj>
	}     
} 
    20ae:	0f 90       	pop	r0
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	08 95       	ret

000020b6 <_ZN6Cabeza8umbralesEv>:
	enable_send_all ();             // habilita la lectura automática de sensores (aka "muestreo")
	// ATENCION: si se usa el send all, hay una probabilidad de falla debida al running_status
	// para reducirla, hay que requestar de vez en cuando otra cosa
}

void Cabeza::umbrales () {
    20b6:	0f 93       	push	r16
    20b8:	1f 93       	push	r17
    20ba:	8c 01       	movw	r16, r24
	set_threshold (VEL, 2);        // habilita el umbral de velocidad, lo que equivale a notificar cada vez que hay un cambio de distancia
    20bc:	61 e0       	ldi	r22, 0x01	; 1
    20be:	42 e0       	ldi	r20, 0x02	; 2
    20c0:	50 e0       	ldi	r21, 0x00	; 0
    20c2:	0e 94 43 10 	call	0x2086	; 0x2086 <_ZN6Cabeza13set_thresholdEhj>
	set_threshold (MM_DIST, 280);   // umbral de distancias en mm cuando es menor a 28cm
    20c6:	c8 01       	movw	r24, r16
    20c8:	65 e0       	ldi	r22, 0x05	; 5
    20ca:	48 e1       	ldi	r20, 0x18	; 24
    20cc:	51 e0       	ldi	r21, 0x01	; 1
    20ce:	0e 94 43 10 	call	0x2086	; 0x2086 <_ZN6Cabeza13set_thresholdEhj>
	set_threshold (EVNT_VEL, 3);    // evento de velocidad
    20d2:	c8 01       	movw	r24, r16
    20d4:	63 e0       	ldi	r22, 0x03	; 3
    20d6:	43 e0       	ldi	r20, 0x03	; 3
    20d8:	50 e0       	ldi	r21, 0x00	; 0
    20da:	0e 94 43 10 	call	0x2086	; 0x2086 <_ZN6Cabeza13set_thresholdEhj>
	set_threshold (EVNT_LAT, 3);    // evento lateral
    20de:	c8 01       	movw	r24, r16
    20e0:	64 e0       	ldi	r22, 0x04	; 4
    20e2:	43 e0       	ldi	r20, 0x03	; 3
    20e4:	50 e0       	ldi	r21, 0x00	; 0
    20e6:	0e 94 43 10 	call	0x2086	; 0x2086 <_ZN6Cabeza13set_thresholdEhj>
	set_threshold (LAT, 1);        // umbral lateral
    20ea:	c8 01       	movw	r24, r16
    20ec:	62 e0       	ldi	r22, 0x02	; 2
    20ee:	41 e0       	ldi	r20, 0x01	; 1
    20f0:	50 e0       	ldi	r21, 0x00	; 0
    20f2:	0e 94 43 10 	call	0x2086	; 0x2086 <_ZN6Cabeza13set_thresholdEhj>
	// el único umbral que no se define es el de CM_DIST, que se opta por leerlo manualmente
	set_time (1);                // período de 1 milisegundo; máxima respuesta para el modo umbrales	
    20f6:	c8 01       	movw	r24, r16
    20f8:	61 e0       	ldi	r22, 0x01	; 1
    20fa:	0e 94 2c 10 	call	0x2058	; 0x2058 <_ZN6Cabeza8set_timeEh>
}
    20fe:	1f 91       	pop	r17
    2100:	0f 91       	pop	r16
    2102:	08 95       	ret

00002104 <_ZN6Cabeza10threshModeEv>:
	comm.send_msg (7, 1, &value);
}               

// los siguientes son presets de umbrales y modos de operación asociados a ellos

void Cabeza::threshMode () {
    2104:	0f 93       	push	r16
    2106:	1f 93       	push	r17
    2108:	8c 01       	movw	r16, r24
	disable_send_all ();          // deshabilita la lectura automática de sensores
    210a:	0e 94 1b 10 	call	0x2036	; 0x2036 <_ZN6Cabeza16disable_send_allEv>
	umbrales ();                // habilita los umbrales 
    210e:	c8 01       	movw	r24, r16
    2110:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <_ZN6Cabeza8umbralesEv>
	// flag = 0;
}
    2114:	1f 91       	pop	r17
    2116:	0f 91       	pop	r16
    2118:	08 95       	ret

0000211a <_ZN6CabezaC1Ev>:
volatile char* Cabeza::values[4] = {&vel, &lat, &evnt_vel, &evnt_lat};    // array de punteros a las variables, para indexarlas
volatile byte Cabeza::flag;
//volatile byte Cabeza::fastDistanceBuffer [100];
//RingBuffer <volatile byte> Cabeza::fastDistance = RingBuffer <volatile byte> (fastDistanceBuffer, 100);      // esto no sé si se va a usar...

Cabeza::Cabeza () {
    211a:	af 92       	push	r10
    211c:	bf 92       	push	r11
    211e:	cf 92       	push	r12
    2120:	df 92       	push	r13
    2122:	ef 92       	push	r14
    2124:	ff 92       	push	r15
    2126:	0f 93       	push	r16
    2128:	1f 93       	push	r17
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	2d 97       	sbiw	r28, 0x0d	; 13
    2134:	0f b6       	in	r0, 0x3f	; 63
    2136:	f8 94       	cli
    2138:	de bf       	out	0x3e, r29	; 62
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	cd bf       	out	0x3d, r28	; 61
    213e:	18 2f       	mov	r17, r24
    2140:	f9 2e       	mov	r15, r25
    2142:	0e 94 5e 65 	call	0xcabc	; 0xcabc <_ZN10SerialcommC1Ev>
	comm = Serialcomm (&Serial2, 115200, 3, 2, &callback);    // objeto Serialcomm
    2146:	5e 01       	movw	r10, r28
    2148:	08 94       	sec
    214a:	a1 1c       	adc	r10, r1
    214c:	b1 1c       	adc	r11, r1
    214e:	c5 01       	movw	r24, r10
    2150:	63 e4       	ldi	r22, 0x43	; 67
    2152:	76 e0       	ldi	r23, 0x06	; 6
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	32 ec       	ldi	r19, 0xC2	; 194
    2158:	41 e0       	ldi	r20, 0x01	; 1
    215a:	50 e0       	ldi	r21, 0x00	; 0
    215c:	03 e0       	ldi	r16, 0x03	; 3
    215e:	f2 e0       	ldi	r31, 0x02	; 2
    2160:	ef 2e       	mov	r14, r31
    2162:	e3 eb       	ldi	r30, 0xB3	; 179
    2164:	ce 2e       	mov	r12, r30
    2166:	ef e0       	ldi	r30, 0x0F	; 15
    2168:	de 2e       	mov	r13, r30
    216a:	0e 94 0b 66 	call	0xcc16	; 0xcc16 <_ZN10SerialcommC1EP14HardwareSeriallhhPFvhhPhE>
    216e:	21 2f       	mov	r18, r17
    2170:	3f 2d       	mov	r19, r15
    2172:	c9 01       	movw	r24, r18
    2174:	dc 01       	movw	r26, r24
    2176:	f5 01       	movw	r30, r10
    2178:	8d e0       	ldi	r24, 0x0D	; 13
    217a:	01 90       	ld	r0, Z+
    217c:	0d 92       	st	X+, r0
    217e:	81 50       	subi	r24, 0x01	; 1
    2180:	e1 f7       	brne	.-8      	; 0x217a <_ZN6CabezaC1Ev+0x60>
	flag = 0;
    2182:	10 92 a9 06 	sts	0x06A9, r1
}
    2186:	2d 96       	adiw	r28, 0x0d	; 13
    2188:	0f b6       	in	r0, 0x3f	; 63
    218a:	f8 94       	cli
    218c:	de bf       	out	0x3e, r29	; 62
    218e:	0f be       	out	0x3f, r0	; 63
    2190:	cd bf       	out	0x3d, r28	; 61
    2192:	cf 91       	pop	r28
    2194:	df 91       	pop	r29
    2196:	1f 91       	pop	r17
    2198:	0f 91       	pop	r16
    219a:	ff 90       	pop	r15
    219c:	ef 90       	pop	r14
    219e:	df 90       	pop	r13
    21a0:	cf 90       	pop	r12
    21a2:	bf 90       	pop	r11
    21a4:	af 90       	pop	r10
    21a6:	08 95       	ret

000021a8 <_GLOBAL__I_kbza>:
#include "remote_control.h"
#include "bluetooth.h"
#include "display.h"
#include "settings.h"

Cabeza kbza;                                                      // objeto Cabeza
    21a8:	85 e9       	ldi	r24, 0x95	; 149
    21aa:	96 e0       	ldi	r25, 0x06	; 6
    21ac:	0e 94 8d 10 	call	0x211a	; 0x211a <_ZN6CabezaC1Ev>
			if (TEST_SENSOR) {blue.send_msg (instruccion, largo, data);}       // para testear con el osciloscopio
			// termina provisorio   
			break;
	} 

}
    21b0:	08 95       	ret

000021b2 <_ZN8Conducta6enableEv>:

void Conducta::enable () {
	enabled = true;
    21b2:	21 e0       	ldi	r18, 0x01	; 1
    21b4:	fc 01       	movw	r30, r24
    21b6:	23 83       	std	Z+3, r18	; 0x03
}
    21b8:	08 95       	ret

000021ba <_ZN8Conducta7disableEv>:

void Conducta::disable () {
	enabled = false;
    21ba:	fc 01       	movw	r30, r24
    21bc:	13 82       	std	Z+3, r1	; 0x03
}
    21be:	08 95       	ret

000021c0 <_ZN8Conducta5salirEv>:

void Conducta::salir () {
	// por defecto no hace nada al salir
}
    21c0:	08 95       	ret

000021c2 <_Z13conducta_mainv>:
}

// actual = "modo" o "conducta a la que se le está dando bola"
// este modo determinaría lo que se muestra en el display, por ejemplo

void conducta_main () {           
    21c2:	0f 93       	push	r16
    21c4:	1f 93       	push	r17
    21c6:	cf 93       	push	r28
    21c8:	df 93       	push	r29
	static byte actual = 0;         // conducta actual; la primera vez no coincide
	
	// cosas generales
	
	// requesta la distancia en cm, todo lo otro se activa por umbrales (en principio)
	kbza.request (CM_DIST);       // esto es para las conductas que usan el sensor inteligente de distacia
    21ca:	85 e9       	ldi	r24, 0x95	; 149
    21cc:	96 e0       	ldi	r25, 0x06	; 6
    21ce:	60 e0       	ldi	r22, 0x00	; 0
    21d0:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN6Cabeza7requestEh>
	
	if (idle >= IDLE_THRESH) {
    21d4:	80 91 ae 13 	lds	r24, 0x13AE
    21d8:	90 91 af 13 	lds	r25, 0x13AF
    21dc:	8d 3e       	cpi	r24, 0xED	; 237
    21de:	91 05       	cpc	r25, r1
    21e0:	10 f0       	brcs	.+4      	; 0x21e6 <_Z13conducta_mainv+0x24>
		Conducta::estado = IDLE;    // esto es muy importante porque es un dato que viene del propio robot
    21e2:	10 92 aa 06 	sts	0x06AA, r1
	   - tareas simultáneas? porque ocupan distintos "recursos"?
	   - prioridades relativas a cada conducta                                                               */
	
	char selected = -1, max_prioridad = 0;
	for (byte f=0; f<NUM_CONDUCTAS; f++) {
		if (conducta[f]->enabled) {												                         // principio de habilitación de conductas
    21e6:	a0 91 ed 03 	lds	r26, 0x03ED
    21ea:	b0 91 ee 03 	lds	r27, 0x03EE
    21ee:	13 96       	adiw	r26, 0x03	; 3
    21f0:	8c 91       	ld	r24, X
    21f2:	13 97       	sbiw	r26, 0x03	; 3
    21f4:	88 23       	and	r24, r24
    21f6:	a1 f0       	breq	.+40     	; 0x2220 <__stack+0x21>
			if (conducta[f]->evaluar() && (conducta[f]->prioridad > max_prioridad)) {    // evalua y compara prioridad
    21f8:	ed 91       	ld	r30, X+
    21fa:	fc 91       	ld	r31, X
    21fc:	11 97       	sbiw	r26, 0x01	; 1
    21fe:	01 90       	ld	r0, Z+
    2200:	f0 81       	ld	r31, Z
    2202:	e0 2d       	mov	r30, r0
    2204:	cd 01       	movw	r24, r26
    2206:	09 95       	icall
    2208:	88 23       	and	r24, r24
    220a:	51 f0       	breq	.+20     	; 0x2220 <__stack+0x21>
    220c:	e0 91 ed 03 	lds	r30, 0x03ED
    2210:	f0 91 ee 03 	lds	r31, 0x03EE
    2214:	22 81       	ldd	r18, Z+2	; 0x02
    2216:	22 23       	and	r18, r18
    2218:	19 f0       	breq	.+6      	; 0x2220 <__stack+0x21>
				selected = f;
				max_prioridad = conducta[f]->prioridad;
    221a:	02 2f       	mov	r16, r18
    221c:	10 e0       	ldi	r17, 0x00	; 0
    221e:	02 c0       	rjmp	.+4      	; 0x2224 <__stack+0x25>
    2220:	1f ef       	ldi	r17, 0xFF	; 255
    2222:	00 e0       	ldi	r16, 0x00	; 0
	   - tareas simultáneas? porque ocupan distintos "recursos"?
	   - prioridades relativas a cada conducta                                                               */
	
	char selected = -1, max_prioridad = 0;
	for (byte f=0; f<NUM_CONDUCTAS; f++) {
		if (conducta[f]->enabled) {												                         // principio de habilitación de conductas
    2224:	a0 91 ef 03 	lds	r26, 0x03EF
    2228:	b0 91 f0 03 	lds	r27, 0x03F0
    222c:	13 96       	adiw	r26, 0x03	; 3
    222e:	8c 91       	ld	r24, X
    2230:	13 97       	sbiw	r26, 0x03	; 3
    2232:	88 23       	and	r24, r24
    2234:	c9 f0       	breq	.+50     	; 0x2268 <__stack+0x69>
			if (conducta[f]->evaluar() && (conducta[f]->prioridad > max_prioridad)) {    // evalua y compara prioridad
    2236:	ed 91       	ld	r30, X+
    2238:	fc 91       	ld	r31, X
    223a:	11 97       	sbiw	r26, 0x01	; 1
    223c:	01 90       	ld	r0, Z+
    223e:	f0 81       	ld	r31, Z
    2240:	e0 2d       	mov	r30, r0
    2242:	cd 01       	movw	r24, r26
    2244:	09 95       	icall
    2246:	88 23       	and	r24, r24
    2248:	79 f0       	breq	.+30     	; 0x2268 <__stack+0x69>
    224a:	e0 91 ef 03 	lds	r30, 0x03EF
    224e:	f0 91 f0 03 	lds	r31, 0x03F0
    2252:	82 81       	ldd	r24, Z+2	; 0x02
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	20 2f       	mov	r18, r16
    2258:	33 27       	eor	r19, r19
    225a:	27 fd       	sbrc	r18, 7
    225c:	30 95       	com	r19
    225e:	28 17       	cp	r18, r24
    2260:	39 07       	cpc	r19, r25
    2262:	14 f4       	brge	.+4      	; 0x2268 <__stack+0x69>
    2264:	11 e0       	ldi	r17, 0x01	; 1
    2266:	02 c0       	rjmp	.+4      	; 0x226c <__stack+0x6d>
				max_prioridad = conducta[f]->prioridad;
			}
		}
	}
	
	if (selected == -1) {return;}          // evita que se ejecute nada si todas las conductas retornaron false
    2268:	1f 3f       	cpi	r17, 0xFF	; 255
    226a:	71 f1       	breq	.+92     	; 0x22c8 <__stack+0xc9>
																		       // también se puede definir una conducta "Idle" con prioridad 0 que retorne siempre true
		
	if (selected != actual) {conducta[actual]->salir();}        // si cambia la conducta, ejecuta salir() en la conducta saliente
    226c:	c1 2f       	mov	r28, r17
    226e:	dd 27       	eor	r29, r29
    2270:	c7 fd       	sbrc	r28, 7
    2272:	d0 95       	com	r29
    2274:	80 91 be 06 	lds	r24, 0x06BE
    2278:	e8 2f       	mov	r30, r24
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	ce 17       	cp	r28, r30
    227e:	df 07       	cpc	r29, r31
    2280:	81 f0       	breq	.+32     	; 0x22a2 <__stack+0xa3>
    2282:	ee 0f       	add	r30, r30
    2284:	ff 1f       	adc	r31, r31
    2286:	e3 51       	subi	r30, 0x13	; 19
    2288:	fc 4f       	sbci	r31, 0xFC	; 252
    228a:	01 90       	ld	r0, Z+
    228c:	f0 81       	ld	r31, Z
    228e:	e0 2d       	mov	r30, r0
    2290:	a0 81       	ld	r26, Z
    2292:	b1 81       	ldd	r27, Z+1	; 0x01
    2294:	14 96       	adiw	r26, 0x04	; 4
    2296:	2d 91       	ld	r18, X+
    2298:	3c 91       	ld	r19, X
    229a:	15 97       	sbiw	r26, 0x05	; 5
    229c:	cf 01       	movw	r24, r30
    229e:	f9 01       	movw	r30, r18
    22a0:	09 95       	icall
	actual = selected;                                   // actualiza
    22a2:	10 93 be 06 	sts	0x06BE, r17
	Conducta::estado = conducta[selected]->ejecutar();          // ejecuta la conducta nueva y actualiza el estado del robot
    22a6:	cc 0f       	add	r28, r28
    22a8:	dd 1f       	adc	r29, r29
    22aa:	c3 51       	subi	r28, 0x13	; 19
    22ac:	dc 4f       	sbci	r29, 0xFC	; 252
    22ae:	e8 81       	ld	r30, Y
    22b0:	f9 81       	ldd	r31, Y+1	; 0x01
    22b2:	a0 81       	ld	r26, Z
    22b4:	b1 81       	ldd	r27, Z+1	; 0x01
    22b6:	12 96       	adiw	r26, 0x02	; 2
    22b8:	2d 91       	ld	r18, X+
    22ba:	3c 91       	ld	r19, X
    22bc:	13 97       	sbiw	r26, 0x03	; 3
    22be:	cf 01       	movw	r24, r30
    22c0:	f9 01       	movw	r30, r18
    22c2:	09 95       	icall
    22c4:	80 93 aa 06 	sts	0x06AA, r24
		
    22c8:	df 91       	pop	r29
    22ca:	cf 91       	pop	r28
    22cc:	1f 91       	pop	r17
    22ce:	0f 91       	pop	r16
    22d0:	08 95       	ret

000022d2 <_Z13conducta_initv>:
Conducta *conducta [NUM_CONDUCTAS] = {&empujones, &reactLoad, /*&correa, &follow*/};  

void conducta_init () {     
	
	// todos los enables y disables iniciales van acá
	conducta [0]->enable ();
    22d2:	a0 91 ed 03 	lds	r26, 0x03ED
    22d6:	b0 91 ee 03 	lds	r27, 0x03EE
    22da:	ed 91       	ld	r30, X+
    22dc:	fc 91       	ld	r31, X
    22de:	11 97       	sbiw	r26, 0x01	; 1
    22e0:	06 80       	ldd	r0, Z+6	; 0x06
    22e2:	f7 81       	ldd	r31, Z+7	; 0x07
    22e4:	e0 2d       	mov	r30, r0
    22e6:	cd 01       	movw	r24, r26
    22e8:	09 95       	icall
	conducta [1]->enable ();
    22ea:	a0 91 ef 03 	lds	r26, 0x03EF
    22ee:	b0 91 f0 03 	lds	r27, 0x03F0
    22f2:	ed 91       	ld	r30, X+
    22f4:	fc 91       	ld	r31, X
    22f6:	11 97       	sbiw	r26, 0x01	; 1
    22f8:	06 80       	ldd	r0, Z+6	; 0x06
    22fa:	f7 81       	ldd	r31, Z+7	; 0x07
    22fc:	e0 2d       	mov	r30, r0
    22fe:	cd 01       	movw	r24, r26
    2300:	09 95       	icall
	//conducta [2]->disable ();
	//conducta [3]->disable ();
	
	// inicialiceta del sensor inteligente de distancia, es común a varias conductas
	kbza.threshMode ();        // activa los umbrales de auto-envío
    2302:	85 e9       	ldi	r24, 0x95	; 149
    2304:	96 e0       	ldi	r25, 0x06	; 6
    2306:	0e 94 82 10 	call	0x2104	; 0x2104 <_ZN6Cabeza10threshModeEv>
	// bitClear (timer0_int_flag, 2);    // Atención: el polling serial de la kbza no se puede apagar porque de él depende el control remoto
	                                     // de todas maneras esto equivaldría a desregistrarlo del timer0, y ya no tendría efecto porque 
																			 // ahora está harcodeado directo a la interrupción serial
	kbza.disable_send_all ();            // deshabilita la lectura automática de sensores
	kbza.noumbrales ();                  // resetea los umbrales                                     */
}
    230a:	08 95       	ret

0000230c <_ZN9EmpujonesC1Eh>:
//////////////////////////////////////////////////////////////////////////////////////////////////
//          constructores de las clases derivadas de Conducta (o sea de las conductas)          //
//     por alguna misteriosa razón, estos constructores tienen que ir acá y no en otro lado     //
//////////////////////////////////////////////////////////////////////////////////////////////////

Empujones::Empujones (byte in_prioridad) : Conducta (in_prioridad) {
    230c:	cf 92       	push	r12
    230e:	df 92       	push	r13
    2310:	ef 92       	push	r14
    2312:	ff 92       	push	r15
    2314:	0f 93       	push	r16
    2316:	1f 93       	push	r17
    2318:	df 93       	push	r29
    231a:	cf 93       	push	r28
    231c:	cd b7       	in	r28, 0x3d	; 61
    231e:	de b7       	in	r29, 0x3e	; 62
    2320:	c7 5e       	subi	r28, 0xE7	; 231
    2322:	d0 40       	sbci	r29, 0x00	; 0
    2324:	0f b6       	in	r0, 0x3f	; 63
    2326:	f8 94       	cli
    2328:	de bf       	out	0x3e, r29	; 62
    232a:	0f be       	out	0x3f, r0	; 63
    232c:	cd bf       	out	0x3d, r28	; 61
    232e:	6c 01       	movw	r12, r24
/////////////////////////////////////////////////////////////////////////////////

byte Conducta::estado;

Conducta::Conducta (byte in_prioridad) {
	prioridad = in_prioridad;
    2330:	dc 01       	movw	r26, r24
    2332:	12 96       	adiw	r26, 0x02	; 2
    2334:	6c 93       	st	X, r22
    2336:	12 97       	sbiw	r26, 0x02	; 2
	enabled = false;                      // todas las conductas arrancan apagadas, y sus respectivos recursos también
    2338:	13 96       	adiw	r26, 0x03	; 3
    233a:	1c 92       	st	X, r1
    233c:	13 97       	sbiw	r26, 0x03	; 3
//////////////////////////////////////////////////////////////////////////////////////////////////
//          constructores de las clases derivadas de Conducta (o sea de las conductas)          //
//     por alguna misteriosa razón, estos constructores tienen que ir acá y no en otro lado     //
//////////////////////////////////////////////////////////////////////////////////////////////////

Empujones::Empujones (byte in_prioridad) : Conducta (in_prioridad) {
    233e:	84 ef       	ldi	r24, 0xF4	; 244
    2340:	94 e0       	ldi	r25, 0x04	; 4
    2342:	8d 93       	st	X+, r24
    2344:	9c 93       	st	X, r25
	// setea la red neuronal de 1 capa que procesa el load
	process = (Nlayer*) malloc (sizeof(Nlayer));
    2346:	83 e0       	ldi	r24, 0x03	; 3
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	0e 94 20 79 	call	0xf240	; 0xf240 <malloc>
    234e:	f8 2e       	mov	r15, r24
    2350:	e9 2e       	mov	r14, r25
    2352:	f6 01       	movw	r30, r12
    2354:	84 83       	std	Z+4, r24	; 0x04
    2356:	95 83       	std	Z+5, r25	; 0x05
	*process = Nlayer (3, 18);
    2358:	8e 01       	movw	r16, r28
    235a:	0f 5f       	subi	r16, 0xFF	; 255
    235c:	1f 4f       	sbci	r17, 0xFF	; 255
    235e:	c8 01       	movw	r24, r16
    2360:	63 e0       	ldi	r22, 0x03	; 3
    2362:	42 e1       	ldi	r20, 0x12	; 18
    2364:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN6NlayerC1Ehh>
    2368:	2f 2d       	mov	r18, r15
    236a:	3e 2d       	mov	r19, r14
    236c:	c9 01       	movw	r24, r18
    236e:	dc 01       	movw	r26, r24
    2370:	f8 01       	movw	r30, r16
    2372:	83 e0       	ldi	r24, 0x03	; 3
    2374:	01 90       	ld	r0, Z+
    2376:	0d 92       	st	X+, r0
    2378:	81 50       	subi	r24, 0x01	; 1
    237a:	e1 f7       	brne	.-8      	; 0x2374 <_ZN9EmpujonesC1Eh+0x68>
	process->node[0].set_weights((float[]){0, -.5, -.25, 0, -.5, -.25, 0, -.5, -.25, 0, -.5, -.25, 0, -.5, -.25, 0, -.5, -.25, 0});             // abajo
    237c:	d6 01       	movw	r26, r12
    237e:	14 96       	adiw	r26, 0x04	; 4
    2380:	ed 91       	ld	r30, X+
    2382:	fc 91       	ld	r31, X
    2384:	15 97       	sbiw	r26, 0x05	; 5
    2386:	80 81       	ld	r24, Z
    2388:	91 81       	ldd	r25, Z+1	; 0x01
    238a:	fe 01       	movw	r30, r28
    238c:	34 96       	adiw	r30, 0x04	; 4
    238e:	a6 e9       	ldi	r26, 0x96	; 150
    2390:	b4 e0       	ldi	r27, 0x04	; 4
    2392:	2c e4       	ldi	r18, 0x4C	; 76
    2394:	0d 90       	ld	r0, X+
    2396:	01 92       	st	Z+, r0
    2398:	21 50       	subi	r18, 0x01	; 1
    239a:	e1 f7       	brne	.-8      	; 0x2394 <_ZN9EmpujonesC1Eh+0x88>
    239c:	be 01       	movw	r22, r28
    239e:	6c 5f       	subi	r22, 0xFC	; 252
    23a0:	7f 4f       	sbci	r23, 0xFF	; 255
    23a2:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN5Nnode11set_weightsEPf>
	process->node[1].set_weights((float[]){-.25, .005, .01, -.5, 0, 0, -.35, -.005, -.01, -.25, .005, .01, -.5, 0, 0, -.35, -.005, -.01, 0});     // atrás
    23a6:	d6 01       	movw	r26, r12
    23a8:	14 96       	adiw	r26, 0x04	; 4
    23aa:	ed 91       	ld	r30, X+
    23ac:	fc 91       	ld	r31, X
    23ae:	15 97       	sbiw	r26, 0x05	; 5
    23b0:	80 81       	ld	r24, Z
    23b2:	91 81       	ldd	r25, Z+1	; 0x01
    23b4:	03 96       	adiw	r24, 0x03	; 3
    23b6:	de 01       	movw	r26, r28
    23b8:	a0 5b       	subi	r26, 0xB0	; 176
    23ba:	bf 4f       	sbci	r27, 0xFF	; 255
    23bc:	ea e4       	ldi	r30, 0x4A	; 74
    23be:	f4 e0       	ldi	r31, 0x04	; 4
    23c0:	2c e4       	ldi	r18, 0x4C	; 76
    23c2:	01 90       	ld	r0, Z+
    23c4:	0d 92       	st	X+, r0
    23c6:	21 50       	subi	r18, 0x01	; 1
    23c8:	e1 f7       	brne	.-8      	; 0x23c2 <_ZN9EmpujonesC1Eh+0xb6>
    23ca:	be 01       	movw	r22, r28
    23cc:	60 5b       	subi	r22, 0xB0	; 176
    23ce:	7f 4f       	sbci	r23, 0xFF	; 255
    23d0:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN5Nnode11set_weightsEPf>
	process->node[2].set_weights((float[]){.25, .005, .25, 0, .005, .5, -.25, .005, .25, -.25, -.005, -.25, 0, -.005, -.5, .25, -.005, -.25, 0});  // izquierda
    23d4:	d6 01       	movw	r26, r12
    23d6:	14 96       	adiw	r26, 0x04	; 4
    23d8:	ed 91       	ld	r30, X+
    23da:	fc 91       	ld	r31, X
    23dc:	15 97       	sbiw	r26, 0x05	; 5
    23de:	80 81       	ld	r24, Z
    23e0:	91 81       	ldd	r25, Z+1	; 0x01
    23e2:	06 96       	adiw	r24, 0x06	; 6
    23e4:	de 01       	movw	r26, r28
    23e6:	a4 56       	subi	r26, 0x64	; 100
    23e8:	bf 4f       	sbci	r27, 0xFF	; 255
    23ea:	ee ef       	ldi	r30, 0xFE	; 254
    23ec:	f3 e0       	ldi	r31, 0x03	; 3
    23ee:	2c e4       	ldi	r18, 0x4C	; 76
    23f0:	01 90       	ld	r0, Z+
    23f2:	0d 92       	st	X+, r0
    23f4:	21 50       	subi	r18, 0x01	; 1
    23f6:	e1 f7       	brne	.-8      	; 0x23f0 <_ZN9EmpujonesC1Eh+0xe4>
    23f8:	be 01       	movw	r22, r28
    23fa:	64 56       	subi	r22, 0x64	; 100
    23fc:	7f 4f       	sbci	r23, 0xFF	; 255
    23fe:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN5Nnode11set_weightsEPf>
} 
    2402:	c9 51       	subi	r28, 0x19	; 25
    2404:	df 4f       	sbci	r29, 0xFF	; 255
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	f8 94       	cli
    240a:	de bf       	out	0x3e, r29	; 62
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	cd bf       	out	0x3d, r28	; 61
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	1f 91       	pop	r17
    2416:	0f 91       	pop	r16
    2418:	ff 90       	pop	r15
    241a:	ef 90       	pop	r14
    241c:	df 90       	pop	r13
    241e:	cf 90       	pop	r12
    2420:	08 95       	ret

00002422 <_GLOBAL__I__ZN8Conducta6estadoE>:
/////////////////////////////////////////////////////////////////////////////////////////////
//                                       "main"                                            //
/////////////////////////////////////////////////////////////////////////////////////////////

// declara y define conductas, con sus respectivas prioridades
Empujones empujones (50);    
    2422:	8b ea       	ldi	r24, 0xAB	; 171
    2424:	96 e0       	ldi	r25, 0x06	; 6
    2426:	62 e3       	ldi	r22, 0x32	; 50
    2428:	0e 94 86 11 	call	0x230c	; 0x230c <_ZN9EmpujonesC1Eh>
/////////////////////////////////////////////////////////////////////////////////

byte Conducta::estado;

Conducta::Conducta (byte in_prioridad) {
	prioridad = in_prioridad;
    242c:	8c e3       	ldi	r24, 0x3C	; 60
    242e:	80 93 bb 06 	sts	0x06BB, r24
	enabled = false;                      // todas las conductas arrancan apagadas, y sus respectivos recursos también
    2432:	10 92 bc 06 	sts	0x06BC, r1
	process->node[0].set_weights((float[]){0, -.5, -.25, 0, -.5, -.25, 0, -.5, -.25, 0, -.5, -.25, 0, -.5, -.25, 0, -.5, -.25, 0});             // abajo
	process->node[1].set_weights((float[]){-.25, .005, .01, -.5, 0, 0, -.35, -.005, -.01, -.25, .005, .01, -.5, 0, 0, -.35, -.005, -.01, 0});     // atrás
	process->node[2].set_weights((float[]){.25, .005, .25, 0, .005, .5, -.25, .005, .25, -.25, -.005, -.25, 0, -.005, -.5, .25, -.005, -.25, 0});  // izquierda
} 

ReactLoad::ReactLoad (byte in_prioridad) : Conducta (in_prioridad) {
    2436:	86 ee       	ldi	r24, 0xE6	; 230
    2438:	94 e0       	ldi	r25, 0x04	; 4
    243a:	90 93 ba 06 	sts	0x06BA, r25
    243e:	80 93 b9 06 	sts	0x06B9, r24
	current_pata = -1;
    2442:	8f ef       	ldi	r24, 0xFF	; 255
    2444:	80 93 bd 06 	sts	0x06BD, r24
		
	if (selected != actual) {conducta[actual]->salir();}        // si cambia la conducta, ejecuta salir() en la conducta saliente
	actual = selected;                                   // actualiza
	Conducta::estado = conducta[selected]->ejecutar();          // ejecuta la conducta nueva y actualiza el estado del robot
		
    2448:	08 95       	ret

0000244a <_ZN9ReactLoad7evaluarEv>:
	float velocidad = 1.2*(modulo-71);	
	mov.recta (velocidad, 2*velocidad, angulo);  
	return WALK;
}

bool ReactLoad::evaluar () {  // también tiene que evaluar si una pata tiene poco load
    244a:	cf 92       	push	r12
    244c:	df 92       	push	r13
    244e:	ff 92       	push	r15
    2450:	0f 93       	push	r16
    2452:	1f 93       	push	r17
    2454:	df 93       	push	r29
    2456:	cf 93       	push	r28
    2458:	cd b7       	in	r28, 0x3d	; 61
    245a:	de b7       	in	r29, 0x3e	; 62
    245c:	2c 97       	sbiw	r28, 0x0c	; 12
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	f8 94       	cli
    2462:	de bf       	out	0x3e, r29	; 62
    2464:	0f be       	out	0x3f, r0	; 63
    2466:	cd bf       	out	0x3d, r28	; 61
    2468:	8c 01       	movw	r16, r24
	
	static byte count = 0;
	
	if (estado != IDLE) {return false;}       // primer filtro
    246a:	80 91 aa 06 	lds	r24, 0x06AA
    246e:	88 23       	and	r24, r24
    2470:	09 f0       	breq	.+2      	; 0x2474 <_ZN9ReactLoad7evaluarEv+0x2a>
    2472:	8e c0       	rjmp	.+284    	; 0x2590 <_ZN9ReactLoad7evaluarEv+0x146>
  
	int load_pata [6] = {0, 0, 0, 0, 0, 0};
    2474:	fe 01       	movw	r30, r28
    2476:	31 96       	adiw	r30, 0x01	; 1
    2478:	8c e0       	ldi	r24, 0x0C	; 12
    247a:	df 01       	movw	r26, r30
    247c:	1d 92       	st	X+, r1
    247e:	8a 95       	dec	r24
    2480:	e9 f7       	brne	.-6      	; 0x247c <_ZN9ReactLoad7evaluarEv+0x32>
    2482:	af 01       	movw	r20, r30
    2484:	a8 e9       	ldi	r26, 0x98	; 152
    2486:	b3 e1       	ldi	r27, 0x13	; 19
    2488:	70 e0       	ldi	r23, 0x00	; 0
    248a:	ff 24       	eor	r15, r15
    248c:	60 e0       	ldi	r22, 0x00	; 0
	
	for (byte pata=0; pata<6; pata++) {
		for (byte anillo=0; anillo<3; anillo++) {
			load_pata[pata] += sq(load[pata][anillo]);
		}
 		if (load_pata[pata] > load_pata[max]) {max = pata;}
    248e:	6f 01       	movw	r12, r30
    2490:	14 c0       	rjmp	.+40     	; 0x24ba <_ZN9ReactLoad7evaluarEv+0x70>
	
	static byte count = 0;
	
	if (estado != IDLE) {return false;}       // primer filtro
  
	int load_pata [6] = {0, 0, 0, 0, 0, 0};
    2492:	76 2f       	mov	r23, r22
	for (byte pata=0; pata<6; pata++) {
		for (byte anillo=0; anillo<3; anillo++) {
			load_pata[pata] += sq(load[pata][anillo]);
		}
 		if (load_pata[pata] > load_pata[max]) {max = pata;}
		if (load_pata[pata] < load_pata[min]) {min = pata;}
    2494:	ef 2d       	mov	r30, r15
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	ee 0f       	add	r30, r30
    249a:	ff 1f       	adc	r31, r31
    249c:	ec 0d       	add	r30, r12
    249e:	fd 1d       	adc	r31, r13
    24a0:	80 81       	ld	r24, Z
    24a2:	91 81       	ldd	r25, Z+1	; 0x01
    24a4:	28 17       	cp	r18, r24
    24a6:	39 07       	cpc	r19, r25
    24a8:	0c f4       	brge	.+2      	; 0x24ac <_ZN9ReactLoad7evaluarEv+0x62>
    24aa:	f6 2e       	mov	r15, r22
  
	int load_pata [6] = {0, 0, 0, 0, 0, 0};
	byte max = 0;
	byte min = 0;
	
	for (byte pata=0; pata<6; pata++) {
    24ac:	6f 5f       	subi	r22, 0xFF	; 255
    24ae:	4e 5f       	subi	r20, 0xFE	; 254
    24b0:	5f 4f       	sbci	r21, 0xFF	; 255
    24b2:	13 96       	adiw	r26, 0x03	; 3
    24b4:	66 30       	cpi	r22, 0x06	; 6
    24b6:	09 f4       	brne	.+2      	; 0x24ba <_ZN9ReactLoad7evaluarEv+0x70>
    24b8:	40 c0       	rjmp	.+128    	; 0x253a <_ZN9ReactLoad7evaluarEv+0xf0>
		for (byte anillo=0; anillo<3; anillo++) {
			load_pata[pata] += sq(load[pata][anillo]);
    24ba:	8c 91       	ld	r24, X
    24bc:	99 27       	eor	r25, r25
    24be:	87 fd       	sbrc	r24, 7
    24c0:	90 95       	com	r25
    24c2:	88 9f       	mul	r24, r24
    24c4:	90 01       	movw	r18, r0
    24c6:	89 9f       	mul	r24, r25
    24c8:	30 0d       	add	r19, r0
    24ca:	98 9f       	mul	r25, r24
    24cc:	30 0d       	add	r19, r0
    24ce:	11 24       	eor	r1, r1
    24d0:	fa 01       	movw	r30, r20
    24d2:	80 81       	ld	r24, Z
    24d4:	91 81       	ldd	r25, Z+1	; 0x01
    24d6:	28 0f       	add	r18, r24
    24d8:	39 1f       	adc	r19, r25
    24da:	11 96       	adiw	r26, 0x01	; 1
    24dc:	8c 91       	ld	r24, X
    24de:	11 97       	sbiw	r26, 0x01	; 1
    24e0:	99 27       	eor	r25, r25
    24e2:	87 fd       	sbrc	r24, 7
    24e4:	90 95       	com	r25
    24e6:	fc 01       	movw	r30, r24
    24e8:	ee 9f       	mul	r30, r30
    24ea:	c0 01       	movw	r24, r0
    24ec:	ef 9f       	mul	r30, r31
    24ee:	90 0d       	add	r25, r0
    24f0:	fe 9f       	mul	r31, r30
    24f2:	90 0d       	add	r25, r0
    24f4:	11 24       	eor	r1, r1
    24f6:	28 0f       	add	r18, r24
    24f8:	39 1f       	adc	r19, r25
    24fa:	12 96       	adiw	r26, 0x02	; 2
    24fc:	8c 91       	ld	r24, X
    24fe:	12 97       	sbiw	r26, 0x02	; 2
    2500:	99 27       	eor	r25, r25
    2502:	87 fd       	sbrc	r24, 7
    2504:	90 95       	com	r25
    2506:	fc 01       	movw	r30, r24
    2508:	ee 9f       	mul	r30, r30
    250a:	c0 01       	movw	r24, r0
    250c:	ef 9f       	mul	r30, r31
    250e:	90 0d       	add	r25, r0
    2510:	fe 9f       	mul	r31, r30
    2512:	90 0d       	add	r25, r0
    2514:	11 24       	eor	r1, r1
    2516:	28 0f       	add	r18, r24
    2518:	39 1f       	adc	r19, r25
    251a:	fa 01       	movw	r30, r20
    251c:	31 83       	std	Z+1, r19	; 0x01
    251e:	20 83       	st	Z, r18
		}
 		if (load_pata[pata] > load_pata[max]) {max = pata;}
    2520:	e7 2f       	mov	r30, r23
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	ee 0f       	add	r30, r30
    2526:	ff 1f       	adc	r31, r31
    2528:	ec 0d       	add	r30, r12
    252a:	fd 1d       	adc	r31, r13
    252c:	80 81       	ld	r24, Z
    252e:	91 81       	ldd	r25, Z+1	; 0x01
    2530:	82 17       	cp	r24, r18
    2532:	93 07       	cpc	r25, r19
    2534:	0c f4       	brge	.+2      	; 0x2538 <_ZN9ReactLoad7evaluarEv+0xee>
    2536:	ad cf       	rjmp	.-166    	; 0x2492 <_ZN9ReactLoad7evaluarEv+0x48>
    2538:	ad cf       	rjmp	.-166    	; 0x2494 <_ZN9ReactLoad7evaluarEv+0x4a>
		if (load_pata[pata] < load_pata[min]) {min = pata;}
	}
		
	bool entrar;
	
	if (load_pata[max] > 3950) {         // corregir: número mágico
    253a:	27 2f       	mov	r18, r23
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	f9 01       	movw	r30, r18
    2540:	ee 0f       	add	r30, r30
    2542:	ff 1f       	adc	r31, r31
    2544:	ec 0f       	add	r30, r28
    2546:	fd 1f       	adc	r31, r29
    2548:	81 81       	ldd	r24, Z+1	; 0x01
    254a:	92 81       	ldd	r25, Z+2	; 0x02
    254c:	8f 56       	subi	r24, 0x6F	; 111
    254e:	9f 40       	sbci	r25, 0x0F	; 15
    2550:	e4 f0       	brlt	.+56     	; 0x258a <_ZN9ReactLoad7evaluarEv+0x140>
		entrar = true;
		if (current_pata == max) {count ++;} else {count = 1;}
    2552:	d8 01       	movw	r26, r16
    2554:	14 96       	adiw	r26, 0x04	; 4
    2556:	8c 91       	ld	r24, X
    2558:	99 27       	eor	r25, r25
    255a:	87 fd       	sbrc	r24, 7
    255c:	90 95       	com	r25
    255e:	82 17       	cp	r24, r18
    2560:	93 07       	cpc	r25, r19
    2562:	21 f4       	brne	.+8      	; 0x256c <_ZN9ReactLoad7evaluarEv+0x122>
    2564:	80 91 bf 06 	lds	r24, 0x06BF
    2568:	8f 5f       	subi	r24, 0xFF	; 255
    256a:	01 c0       	rjmp	.+2      	; 0x256e <_ZN9ReactLoad7evaluarEv+0x124>
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	80 93 bf 06 	sts	0x06BF, r24
		if (count < 3) {current_pata = max;} else {current_pata = min;}
    2572:	80 91 bf 06 	lds	r24, 0x06BF
    2576:	83 30       	cpi	r24, 0x03	; 3
    2578:	18 f4       	brcc	.+6      	; 0x2580 <_ZN9ReactLoad7evaluarEv+0x136>
    257a:	f8 01       	movw	r30, r16
    257c:	74 83       	std	Z+4, r23	; 0x04
    257e:	03 c0       	rjmp	.+6      	; 0x2586 <_ZN9ReactLoad7evaluarEv+0x13c>
    2580:	d8 01       	movw	r26, r16
    2582:	14 96       	adiw	r26, 0x04	; 4
    2584:	fc 92       	st	X, r15
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	04 c0       	rjmp	.+8      	; 0x2592 <_ZN9ReactLoad7evaluarEv+0x148>
	} else {
		entrar = false;
		current_pata = -1;        // significa: ninguna
    258a:	8f ef       	ldi	r24, 0xFF	; 255
    258c:	f8 01       	movw	r30, r16
    258e:	84 83       	std	Z+4, r24	; 0x04
    2590:	80 e0       	ldi	r24, 0x00	; 0
	} 
	
	return entrar;
}
    2592:	2c 96       	adiw	r28, 0x0c	; 12
    2594:	0f b6       	in	r0, 0x3f	; 63
    2596:	f8 94       	cli
    2598:	de bf       	out	0x3e, r29	; 62
    259a:	0f be       	out	0x3f, r0	; 63
    259c:	cd bf       	out	0x3d, r28	; 61
    259e:	cf 91       	pop	r28
    25a0:	df 91       	pop	r29
    25a2:	1f 91       	pop	r17
    25a4:	0f 91       	pop	r16
    25a6:	ff 90       	pop	r15
    25a8:	df 90       	pop	r13
    25aa:	cf 90       	pop	r12
    25ac:	08 95       	ret

000025ae <_ZN9Empujones8ejecutarEv>:
	
	return (modulo > 76);

}

byte Empujones::ejecutar () {
    25ae:	6f 92       	push	r6
    25b0:	7f 92       	push	r7
    25b2:	8f 92       	push	r8
    25b4:	9f 92       	push	r9
    25b6:	af 92       	push	r10
    25b8:	bf 92       	push	r11
    25ba:	cf 92       	push	r12
    25bc:	df 92       	push	r13
    25be:	ef 92       	push	r14
    25c0:	ff 92       	push	r15
    25c2:	0f 93       	push	r16
    25c4:	1f 93       	push	r17
    25c6:	7c 01       	movw	r14, r24
	float velocidad = 1.2*(modulo-71);	
    25c8:	fc 01       	movw	r30, r24
    25ca:	66 81       	ldd	r22, Z+6	; 0x06
    25cc:	77 81       	ldd	r23, Z+7	; 0x07
    25ce:	80 85       	ldd	r24, Z+8	; 0x08
    25d0:	91 85       	ldd	r25, Z+9	; 0x09
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	4e e8       	ldi	r20, 0x8E	; 142
    25d8:	52 e4       	ldi	r21, 0x42	; 66
    25da:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    25de:	2a e9       	ldi	r18, 0x9A	; 154
    25e0:	39 e9       	ldi	r19, 0x99	; 153
    25e2:	49 e9       	ldi	r20, 0x99	; 153
    25e4:	5f e3       	ldi	r21, 0x3F	; 63
    25e6:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    25ea:	4b 01       	movw	r8, r22
    25ec:	5c 01       	movw	r10, r24
	mov.recta (velocidad, 2*velocidad, angulo);  
    25ee:	00 d0       	rcall	.+0      	; 0x25f0 <_ZN9Empujones8ejecutarEv+0x42>
    25f0:	00 d0       	rcall	.+0      	; 0x25f2 <_ZN9Empujones8ejecutarEv+0x44>
    25f2:	6d b6       	in	r6, 0x3d	; 61
    25f4:	7e b6       	in	r7, 0x3e	; 62
    25f6:	08 94       	sec
    25f8:	61 1c       	adc	r6, r1
    25fa:	71 1c       	adc	r7, r1
    25fc:	a5 01       	movw	r20, r10
    25fe:	94 01       	movw	r18, r8
    2600:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    2604:	8b 01       	movw	r16, r22
    2606:	9c 01       	movw	r18, r24
    2608:	f7 01       	movw	r30, r14
    260a:	c2 84       	ldd	r12, Z+10	; 0x0a
    260c:	d3 84       	ldd	r13, Z+11	; 0x0b
    260e:	e4 84       	ldd	r14, Z+12	; 0x0c
    2610:	f5 84       	ldd	r15, Z+13	; 0x0d
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	a0 e0       	ldi	r26, 0x00	; 0
    2618:	b0 e0       	ldi	r27, 0x00	; 0
    261a:	f3 01       	movw	r30, r6
    261c:	80 83       	st	Z, r24
    261e:	91 83       	std	Z+1, r25	; 0x01
    2620:	a2 83       	std	Z+2, r26	; 0x02
    2622:	b3 83       	std	Z+3, r27	; 0x03
    2624:	81 ee       	ldi	r24, 0xE1	; 225
    2626:	90 e1       	ldi	r25, 0x10	; 16
    2628:	b5 01       	movw	r22, r10
    262a:	a4 01       	movw	r20, r8
    262c:	aa 24       	eor	r10, r10
    262e:	a3 94       	inc	r10
    2630:	0e 94 b2 44 	call	0x8964	; 0x8964 <_ZN10Movimiento5rectaEfffhf>
    2634:	0f 90       	pop	r0
    2636:	0f 90       	pop	r0
    2638:	0f 90       	pop	r0
    263a:	0f 90       	pop	r0
	return WALK;
}
    263c:	82 e0       	ldi	r24, 0x02	; 2
    263e:	1f 91       	pop	r17
    2640:	0f 91       	pop	r16
    2642:	ff 90       	pop	r15
    2644:	ef 90       	pop	r14
    2646:	df 90       	pop	r13
    2648:	cf 90       	pop	r12
    264a:	bf 90       	pop	r11
    264c:	af 90       	pop	r10
    264e:	9f 90       	pop	r9
    2650:	8f 90       	pop	r8
    2652:	7f 90       	pop	r7
    2654:	6f 90       	pop	r6
    2656:	08 95       	ret

00002658 <_ZN9ReactLoad8ejecutarEv>:
	} 
	
	return entrar;
}

byte ReactLoad::ejecutar () {
    2658:	4f 92       	push	r4
    265a:	5f 92       	push	r5
    265c:	6f 92       	push	r6
    265e:	7f 92       	push	r7
    2660:	8f 92       	push	r8
    2662:	9f 92       	push	r9
    2664:	af 92       	push	r10
    2666:	bf 92       	push	r11
    2668:	cf 92       	push	r12
    266a:	df 92       	push	r13
    266c:	ef 92       	push	r14
    266e:	ff 92       	push	r15
    2670:	0f 93       	push	r16
    2672:	1f 93       	push	r17
    2674:	df 93       	push	r29
    2676:	cf 93       	push	r28
    2678:	cd b7       	in	r28, 0x3d	; 61
    267a:	de b7       	in	r29, 0x3e	; 62
    267c:	cc 54       	subi	r28, 0x4C	; 76
    267e:	d0 40       	sbci	r29, 0x00	; 0
    2680:	0f b6       	in	r0, 0x3f	; 63
    2682:	f8 94       	cli
    2684:	de bf       	out	0x3e, r29	; 62
    2686:	0f be       	out	0x3f, r0	; 63
    2688:	cd bf       	out	0x3d, r28	; 61
    268a:	2c 01       	movw	r4, r24
	// obtengo la ecuación del plano actual del robot:
	COORD3D normal; 
	float d;
	ec_plano (pos_des, &normal, &d);    
    268c:	80 e5       	ldi	r24, 0x50	; 80
    268e:	93 e1       	ldi	r25, 0x13	; 19
    2690:	be 01       	movw	r22, r28
    2692:	6b 5f       	subi	r22, 0xFB	; 251
    2694:	7f 4f       	sbci	r23, 0xFF	; 255
    2696:	ae 01       	movw	r20, r28
    2698:	4f 5f       	subi	r20, 0xFF	; 255
    269a:	5f 4f       	sbci	r21, 0xFF	; 255
    269c:	0e 94 eb 72 	call	0xe5d6	; 0xe5d6 <_Z8ec_planoP7COORD3DS0_Pf>
	// obtengo un punto en 2D cercano a pos_ref_ (en realidad es un vector para sumarle a la posición actual de la pata)
	COORD3D P = suma ((COORD3D){random(-2.5,2.5),0,random(-2.6,2.6)}, producto(resta(mov.get_pos_ref()[current_pata],pos_des[current_pata]), .38)); // magik numbers 
    26a0:	60 e0       	ldi	r22, 0x00	; 0
    26a2:	70 e0       	ldi	r23, 0x00	; 0
    26a4:	80 e2       	ldi	r24, 0x20	; 32
    26a6:	90 ec       	ldi	r25, 0xC0	; 192
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	40 e2       	ldi	r20, 0x20	; 32
    26ae:	50 e4       	ldi	r21, 0x40	; 64
    26b0:	0e 94 8d 66 	call	0xcd1a	; 0xcd1a <_Z6randomff>
    26b4:	7b 01       	movw	r14, r22
    26b6:	8c 01       	movw	r16, r24
    26b8:	66 e6       	ldi	r22, 0x66	; 102
    26ba:	76 e6       	ldi	r23, 0x66	; 102
    26bc:	86 e2       	ldi	r24, 0x26	; 38
    26be:	90 ec       	ldi	r25, 0xC0	; 192
    26c0:	26 e6       	ldi	r18, 0x66	; 102
    26c2:	36 e6       	ldi	r19, 0x66	; 102
    26c4:	46 e2       	ldi	r20, 0x26	; 38
    26c6:	50 e4       	ldi	r21, 0x40	; 64
    26c8:	0e 94 8d 66 	call	0xcd1a	; 0xcd1a <_Z6randomff>
    26cc:	ed 8e       	std	Y+29, r14	; 0x1d
    26ce:	fe 8e       	std	Y+30, r15	; 0x1e
    26d0:	0f 8f       	std	Y+31, r16	; 0x1f
    26d2:	18 a3       	std	Y+32, r17	; 0x20
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	40 e0       	ldi	r20, 0x00	; 0
    26da:	50 e0       	ldi	r21, 0x00	; 0
    26dc:	29 a3       	std	Y+33, r18	; 0x21
    26de:	3a a3       	std	Y+34, r19	; 0x22
    26e0:	4b a3       	std	Y+35, r20	; 0x23
    26e2:	5c a3       	std	Y+36, r21	; 0x24
    26e4:	6d a3       	std	Y+37, r22	; 0x25
    26e6:	7e a3       	std	Y+38, r23	; 0x26
    26e8:	8f a3       	std	Y+39, r24	; 0x27
    26ea:	98 a7       	std	Y+40, r25	; 0x28
    26ec:	81 ee       	ldi	r24, 0xE1	; 225
    26ee:	90 e1       	ldi	r25, 0x10	; 16
    26f0:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN10Movimiento11get_pos_refEv>
    26f4:	d2 01       	movw	r26, r4
    26f6:	14 96       	adiw	r26, 0x04	; 4
    26f8:	4c 91       	ld	r20, X
    26fa:	ed b7       	in	r30, 0x3d	; 61
    26fc:	fe b7       	in	r31, 0x3e	; 62
    26fe:	3c 97       	sbiw	r30, 0x0c	; 12
    2700:	0f b6       	in	r0, 0x3f	; 63
    2702:	f8 94       	cli
    2704:	fe bf       	out	0x3e, r31	; 62
    2706:	0f be       	out	0x3f, r0	; 63
    2708:	ed bf       	out	0x3d, r30	; 61
    270a:	55 27       	eor	r21, r21
    270c:	47 fd       	sbrc	r20, 7
    270e:	50 95       	com	r21
    2710:	9a 01       	movw	r18, r20
    2712:	22 0f       	add	r18, r18
    2714:	33 1f       	adc	r19, r19
    2716:	24 0f       	add	r18, r20
    2718:	35 1f       	adc	r19, r21
    271a:	22 0f       	add	r18, r18
    271c:	33 1f       	adc	r19, r19
    271e:	22 0f       	add	r18, r18
    2720:	33 1f       	adc	r19, r19
    2722:	fc 01       	movw	r30, r24
    2724:	e2 0f       	add	r30, r18
    2726:	f3 1f       	adc	r31, r19
    2728:	4d b7       	in	r20, 0x3d	; 61
    272a:	5e b7       	in	r21, 0x3e	; 62
    272c:	4f 5f       	subi	r20, 0xFF	; 255
    272e:	5f 4f       	sbci	r21, 0xFF	; 255
    2730:	20 5b       	subi	r18, 0xB0	; 176
    2732:	3c 4e       	sbci	r19, 0xEC	; 236
    2734:	8c e0       	ldi	r24, 0x0C	; 12
    2736:	d9 01       	movw	r26, r18
    2738:	0d 90       	ld	r0, X+
    273a:	9d 01       	movw	r18, r26
    273c:	da 01       	movw	r26, r20
    273e:	0d 92       	st	X+, r0
    2740:	ad 01       	movw	r20, r26
    2742:	81 50       	subi	r24, 0x01	; 1
    2744:	c1 f7       	brne	.-16     	; 0x2736 <_ZN9ReactLoad8ejecutarEv+0xde>
    2746:	ce 01       	movw	r24, r28
    2748:	89 96       	adiw	r24, 0x29	; 41
    274a:	c0 80       	ld	r12, Z
    274c:	d1 80       	ldd	r13, Z+1	; 0x01
    274e:	e2 80       	ldd	r14, Z+2	; 0x02
    2750:	f3 80       	ldd	r15, Z+3	; 0x03
    2752:	04 81       	ldd	r16, Z+4	; 0x04
    2754:	15 81       	ldd	r17, Z+5	; 0x05
    2756:	26 81       	ldd	r18, Z+6	; 0x06
    2758:	37 81       	ldd	r19, Z+7	; 0x07
    275a:	40 85       	ldd	r20, Z+8	; 0x08
    275c:	51 85       	ldd	r21, Z+9	; 0x09
    275e:	62 85       	ldd	r22, Z+10	; 0x0a
    2760:	73 85       	ldd	r23, Z+11	; 0x0b
    2762:	0e 94 df 69 	call	0xd3be	; 0xd3be <_Z5resta7COORD3DS_>
    2766:	95 e3       	ldi	r25, 0x35	; 53
    2768:	69 2e       	mov	r6, r25
    276a:	71 2c       	mov	r7, r1
    276c:	6c 0e       	add	r6, r28
    276e:	7d 1e       	adc	r7, r29
    2770:	ed b7       	in	r30, 0x3d	; 61
    2772:	fe b7       	in	r31, 0x3e	; 62
    2774:	3c 96       	adiw	r30, 0x0c	; 12
    2776:	0f b6       	in	r0, 0x3f	; 63
    2778:	f8 94       	cli
    277a:	fe bf       	out	0x3e, r31	; 62
    277c:	0f be       	out	0x3f, r0	; 63
    277e:	ed bf       	out	0x3d, r30	; 61
    2780:	c3 01       	movw	r24, r6
    2782:	c9 a4       	ldd	r12, Y+41	; 0x29
    2784:	da a4       	ldd	r13, Y+42	; 0x2a
    2786:	eb a4       	ldd	r14, Y+43	; 0x2b
    2788:	fc a4       	ldd	r15, Y+44	; 0x2c
    278a:	0d a5       	ldd	r16, Y+45	; 0x2d
    278c:	1e a5       	ldd	r17, Y+46	; 0x2e
    278e:	2f a5       	ldd	r18, Y+47	; 0x2f
    2790:	38 a9       	ldd	r19, Y+48	; 0x30
    2792:	49 a9       	ldd	r20, Y+49	; 0x31
    2794:	5a a9       	ldd	r21, Y+50	; 0x32
    2796:	6b a9       	ldd	r22, Y+51	; 0x33
    2798:	7c a9       	ldd	r23, Y+52	; 0x34
    279a:	0f 2e       	mov	r0, r31
    279c:	fc e5       	ldi	r31, 0x5C	; 92
    279e:	8f 2e       	mov	r8, r31
    27a0:	ff e8       	ldi	r31, 0x8F	; 143
    27a2:	9f 2e       	mov	r9, r31
    27a4:	f2 ec       	ldi	r31, 0xC2	; 194
    27a6:	af 2e       	mov	r10, r31
    27a8:	fe e3       	ldi	r31, 0x3E	; 62
    27aa:	bf 2e       	mov	r11, r31
    27ac:	f0 2d       	mov	r31, r0
    27ae:	0e 94 a2 6a 	call	0xd544	; 0xd544 <_Z8producto7COORD3Df>
    27b2:	2d b7       	in	r18, 0x3d	; 61
    27b4:	3e b7       	in	r19, 0x3e	; 62
    27b6:	2c 50       	subi	r18, 0x0C	; 12
    27b8:	30 40       	sbci	r19, 0x00	; 0
    27ba:	0f b6       	in	r0, 0x3f	; 63
    27bc:	f8 94       	cli
    27be:	3e bf       	out	0x3e, r19	; 62
    27c0:	0f be       	out	0x3f, r0	; 63
    27c2:	2d bf       	out	0x3d, r18	; 61
    27c4:	ad b7       	in	r26, 0x3d	; 61
    27c6:	be b7       	in	r27, 0x3e	; 62
    27c8:	11 96       	adiw	r26, 0x01	; 1
    27ca:	f3 01       	movw	r30, r6
    27cc:	8c e0       	ldi	r24, 0x0C	; 12
    27ce:	01 90       	ld	r0, Z+
    27d0:	0d 92       	st	X+, r0
    27d2:	81 50       	subi	r24, 0x01	; 1
    27d4:	e1 f7       	brne	.-8      	; 0x27ce <_ZN9ReactLoad8ejecutarEv+0x176>
    27d6:	ce 01       	movw	r24, r28
    27d8:	41 96       	adiw	r24, 0x11	; 17
    27da:	cd 8c       	ldd	r12, Y+29	; 0x1d
    27dc:	de 8c       	ldd	r13, Y+30	; 0x1e
    27de:	ef 8c       	ldd	r14, Y+31	; 0x1f
    27e0:	f8 a0       	ldd	r15, Y+32	; 0x20
    27e2:	09 a1       	ldd	r16, Y+33	; 0x21
    27e4:	1a a1       	ldd	r17, Y+34	; 0x22
    27e6:	2b a1       	ldd	r18, Y+35	; 0x23
    27e8:	3c a1       	ldd	r19, Y+36	; 0x24
    27ea:	4d a1       	ldd	r20, Y+37	; 0x25
    27ec:	5e a1       	ldd	r21, Y+38	; 0x26
    27ee:	6f a1       	ldd	r22, Y+39	; 0x27
    27f0:	78 a5       	ldd	r23, Y+40	; 0x28
    27f2:	0e 94 1c 69 	call	0xd238	; 0xd238 <_Z4suma7COORD3DS_>
	// calculo la coordenada 'y' del vector en cuestión, utilizando la ecuación del plano actual
	P.y = -(P.x*normal.x + P.z*normal.z) / normal.y;    // nótese que 'd' no se usa para nada
    27f6:	69 89       	ldd	r22, Y+17	; 0x11
    27f8:	7a 89       	ldd	r23, Y+18	; 0x12
    27fa:	8b 89       	ldd	r24, Y+19	; 0x13
    27fc:	9c 89       	ldd	r25, Y+20	; 0x14
    27fe:	2d 81       	ldd	r18, Y+5	; 0x05
    2800:	3e 81       	ldd	r19, Y+6	; 0x06
    2802:	4f 81       	ldd	r20, Y+7	; 0x07
    2804:	58 85       	ldd	r21, Y+8	; 0x08
    2806:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    280a:	7b 01       	movw	r14, r22
    280c:	8c 01       	movw	r16, r24
    280e:	69 8d       	ldd	r22, Y+25	; 0x19
    2810:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2812:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2814:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2816:	2d 85       	ldd	r18, Y+13	; 0x0d
    2818:	3e 85       	ldd	r19, Y+14	; 0x0e
    281a:	4f 85       	ldd	r20, Y+15	; 0x0f
    281c:	58 89       	ldd	r21, Y+16	; 0x10
    281e:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    2822:	9b 01       	movw	r18, r22
    2824:	ac 01       	movw	r20, r24
    2826:	c8 01       	movw	r24, r16
    2828:	b7 01       	movw	r22, r14
    282a:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    282e:	90 58       	subi	r25, 0x80	; 128
    2830:	29 85       	ldd	r18, Y+9	; 0x09
    2832:	3a 85       	ldd	r19, Y+10	; 0x0a
    2834:	4b 85       	ldd	r20, Y+11	; 0x0b
    2836:	5c 85       	ldd	r21, Y+12	; 0x0c
    2838:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    283c:	6d 8b       	std	Y+21, r22	; 0x15
    283e:	7e 8b       	std	Y+22, r23	; 0x16
    2840:	8f 8b       	std	Y+23, r24	; 0x17
    2842:	98 8f       	std	Y+24, r25	; 0x18
	// aplico el movimiento
	mov.pasito (1<<current_pata, P, false, 0, 85, 5, (COORD3D){0,10,0}); 
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	d2 01       	movw	r26, r4
    284a:	14 96       	adiw	r26, 0x04	; 4
    284c:	0c 90       	ld	r0, X
    284e:	02 c0       	rjmp	.+4      	; 0x2854 <_ZN9ReactLoad8ejecutarEv+0x1fc>
    2850:	88 0f       	add	r24, r24
    2852:	99 1f       	adc	r25, r25
    2854:	0a 94       	dec	r0
    2856:	e2 f7       	brpl	.-8      	; 0x2850 <_ZN9ReactLoad8ejecutarEv+0x1f8>
    2858:	68 2f       	mov	r22, r24
    285a:	de 01       	movw	r26, r28
    285c:	af 5b       	subi	r26, 0xBF	; 191
    285e:	bf 4f       	sbci	r27, 0xFF	; 255
    2860:	ee ef       	ldi	r30, 0xFE	; 254
    2862:	f4 e0       	ldi	r31, 0x04	; 4
    2864:	8c e0       	ldi	r24, 0x0C	; 12
    2866:	01 90       	ld	r0, Z+
    2868:	0d 92       	st	X+, r0
    286a:	81 50       	subi	r24, 0x01	; 1
    286c:	e1 f7       	brne	.-8      	; 0x2866 <_ZN9ReactLoad8ejecutarEv+0x20e>
    286e:	ed b7       	in	r30, 0x3d	; 61
    2870:	fe b7       	in	r31, 0x3e	; 62
    2872:	37 97       	sbiw	r30, 0x07	; 7
    2874:	0f b6       	in	r0, 0x3f	; 63
    2876:	f8 94       	cli
    2878:	fe bf       	out	0x3e, r31	; 62
    287a:	0f be       	out	0x3f, r0	; 63
    287c:	ed bf       	out	0x3d, r30	; 61
    287e:	31 96       	adiw	r30, 0x01	; 1
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	40 e0       	ldi	r20, 0x00	; 0
    2886:	50 e0       	ldi	r21, 0x00	; 0
    2888:	ad b7       	in	r26, 0x3d	; 61
    288a:	be b7       	in	r27, 0x3e	; 62
    288c:	11 96       	adiw	r26, 0x01	; 1
    288e:	2d 93       	st	X+, r18
    2890:	3d 93       	st	X+, r19
    2892:	4d 93       	st	X+, r20
    2894:	5c 93       	st	X, r21
    2896:	14 97       	sbiw	r26, 0x04	; 4
    2898:	85 e5       	ldi	r24, 0x55	; 85
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	95 83       	std	Z+5, r25	; 0x05
    289e:	84 83       	std	Z+4, r24	; 0x04
    28a0:	85 e0       	ldi	r24, 0x05	; 5
    28a2:	86 83       	std	Z+6, r24	; 0x06
    28a4:	18 96       	adiw	r26, 0x08	; 8
    28a6:	fe 01       	movw	r30, r28
    28a8:	ef 5b       	subi	r30, 0xBF	; 191
    28aa:	ff 4f       	sbci	r31, 0xFF	; 255
    28ac:	8c e0       	ldi	r24, 0x0C	; 12
    28ae:	01 90       	ld	r0, Z+
    28b0:	0d 92       	st	X+, r0
    28b2:	81 50       	subi	r24, 0x01	; 1
    28b4:	e1 f7       	brne	.-8      	; 0x28ae <_ZN9ReactLoad8ejecutarEv+0x256>
    28b6:	81 ee       	ldi	r24, 0xE1	; 225
    28b8:	90 e1       	ldi	r25, 0x10	; 16
    28ba:	a9 88       	ldd	r10, Y+17	; 0x11
    28bc:	ba 88       	ldd	r11, Y+18	; 0x12
    28be:	cb 88       	ldd	r12, Y+19	; 0x13
    28c0:	dc 88       	ldd	r13, Y+20	; 0x14
    28c2:	ed 88       	ldd	r14, Y+21	; 0x15
    28c4:	fe 88       	ldd	r15, Y+22	; 0x16
    28c6:	0f 89       	ldd	r16, Y+23	; 0x17
    28c8:	18 8d       	ldd	r17, Y+24	; 0x18
    28ca:	29 8d       	ldd	r18, Y+25	; 0x19
    28cc:	3a 8d       	ldd	r19, Y+26	; 0x1a
    28ce:	4b 8d       	ldd	r20, Y+27	; 0x1b
    28d0:	5c 8d       	ldd	r21, Y+28	; 0x1c
    28d2:	88 24       	eor	r8, r8
    28d4:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <_ZN10Movimiento6pasitoEh7COORD3DbfihS0_>
    28d8:	ed b7       	in	r30, 0x3d	; 61
    28da:	fe b7       	in	r31, 0x3e	; 62
    28dc:	73 96       	adiw	r30, 0x13	; 19
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	f8 94       	cli
    28e2:	fe bf       	out	0x3e, r31	; 62
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	ed bf       	out	0x3d, r30	; 61
	return LEG;
}
    28e8:	87 e0       	ldi	r24, 0x07	; 7
    28ea:	c4 5b       	subi	r28, 0xB4	; 180
    28ec:	df 4f       	sbci	r29, 0xFF	; 255
    28ee:	0f b6       	in	r0, 0x3f	; 63
    28f0:	f8 94       	cli
    28f2:	de bf       	out	0x3e, r29	; 62
    28f4:	0f be       	out	0x3f, r0	; 63
    28f6:	cd bf       	out	0x3d, r28	; 61
    28f8:	cf 91       	pop	r28
    28fa:	df 91       	pop	r29
    28fc:	1f 91       	pop	r17
    28fe:	0f 91       	pop	r16
    2900:	ff 90       	pop	r15
    2902:	ef 90       	pop	r14
    2904:	df 90       	pop	r13
    2906:	cf 90       	pop	r12
    2908:	bf 90       	pop	r11
    290a:	af 90       	pop	r10
    290c:	9f 90       	pop	r9
    290e:	8f 90       	pop	r8
    2910:	7f 90       	pop	r7
    2912:	6f 90       	pop	r6
    2914:	5f 90       	pop	r5
    2916:	4f 90       	pop	r4
    2918:	08 95       	ret

0000291a <_ZN9Empujones7evaluarEv>:
#include "hardware.h"
#include "movimiento.h"
#include "display.h"
#include "events.h"

bool Empujones::evaluar () {  
    291a:	4f 92       	push	r4
    291c:	5f 92       	push	r5
    291e:	6f 92       	push	r6
    2920:	7f 92       	push	r7
    2922:	8f 92       	push	r8
    2924:	9f 92       	push	r9
    2926:	af 92       	push	r10
    2928:	bf 92       	push	r11
    292a:	cf 92       	push	r12
    292c:	df 92       	push	r13
    292e:	ef 92       	push	r14
    2930:	ff 92       	push	r15
    2932:	0f 93       	push	r16
    2934:	1f 93       	push	r17
    2936:	df 93       	push	r29
    2938:	cf 93       	push	r28
    293a:	cd b7       	in	r28, 0x3d	; 61
    293c:	de b7       	in	r29, 0x3e	; 62
    293e:	c4 55       	subi	r28, 0x54	; 84
    2940:	d0 40       	sbci	r29, 0x00	; 0
    2942:	0f b6       	in	r0, 0x3f	; 63
    2944:	f8 94       	cli
    2946:	de bf       	out	0x3e, r29	; 62
    2948:	0f be       	out	0x3f, r0	; 63
    294a:	cd bf       	out	0x3d, r28	; 61
    294c:	2c 01       	movw	r4, r24
	
	// reducir falsos positivos
	// corregir asimetría
	// habilitar balance del cuerpo
	
	if (estado != IDLE) {return false;}       // si no está en idle, ya retorna
    294e:	80 91 aa 06 	lds	r24, 0x06AA
    2952:	88 23       	and	r24, r24
    2954:	11 f0       	breq	.+4      	; 0x295a <_ZN9Empujones7evaluarEv+0x40>
    2956:	10 e0       	ldi	r17, 0x00	; 0
    2958:	a5 c0       	rjmp	.+330    	; 0x2aa4 <_ZN9Empujones7evaluarEv+0x18a>
    295a:	08 e9       	ldi	r16, 0x98	; 152
    295c:	13 e1       	ldi	r17, 0x13	; 19
    295e:	7d e0       	ldi	r23, 0x0D	; 13
    2960:	e7 2e       	mov	r14, r23
    2962:	f1 2c       	mov	r15, r1
    2964:	ec 0e       	add	r14, r28
    2966:	fd 1e       	adc	r15, r29
		
	// comprobar empuje
	float salida [3], entrada [18];
	for (byte pata=0; pata<6; pata++) {
		for (byte anillo=0; anillo<3; anillo++) {
			entrada[pata*3+anillo] = 0.05 * load[pata][anillo];    // esto está raro
    2968:	f8 01       	movw	r30, r16
    296a:	60 81       	ld	r22, Z
    296c:	77 27       	eor	r23, r23
    296e:	67 fd       	sbrc	r22, 7
    2970:	70 95       	com	r23
    2972:	87 2f       	mov	r24, r23
    2974:	97 2f       	mov	r25, r23
    2976:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    297a:	2d ec       	ldi	r18, 0xCD	; 205
    297c:	3c ec       	ldi	r19, 0xCC	; 204
    297e:	4c e4       	ldi	r20, 0x4C	; 76
    2980:	5d e3       	ldi	r21, 0x3D	; 61
    2982:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    2986:	f7 01       	movw	r30, r14
    2988:	60 83       	st	Z, r22
    298a:	71 83       	std	Z+1, r23	; 0x01
    298c:	82 83       	std	Z+2, r24	; 0x02
    298e:	93 83       	std	Z+3, r25	; 0x03
    2990:	f8 01       	movw	r30, r16
    2992:	61 81       	ldd	r22, Z+1	; 0x01
    2994:	77 27       	eor	r23, r23
    2996:	67 fd       	sbrc	r22, 7
    2998:	70 95       	com	r23
    299a:	87 2f       	mov	r24, r23
    299c:	97 2f       	mov	r25, r23
    299e:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    29a2:	2d ec       	ldi	r18, 0xCD	; 205
    29a4:	3c ec       	ldi	r19, 0xCC	; 204
    29a6:	4c e4       	ldi	r20, 0x4C	; 76
    29a8:	5d e3       	ldi	r21, 0x3D	; 61
    29aa:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    29ae:	f7 01       	movw	r30, r14
    29b0:	64 83       	std	Z+4, r22	; 0x04
    29b2:	75 83       	std	Z+5, r23	; 0x05
    29b4:	86 83       	std	Z+6, r24	; 0x06
    29b6:	97 83       	std	Z+7, r25	; 0x07
    29b8:	f8 01       	movw	r30, r16
    29ba:	62 81       	ldd	r22, Z+2	; 0x02
    29bc:	77 27       	eor	r23, r23
    29be:	67 fd       	sbrc	r22, 7
    29c0:	70 95       	com	r23
    29c2:	87 2f       	mov	r24, r23
    29c4:	97 2f       	mov	r25, r23
    29c6:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    29ca:	2d ec       	ldi	r18, 0xCD	; 205
    29cc:	3c ec       	ldi	r19, 0xCC	; 204
    29ce:	4c e4       	ldi	r20, 0x4C	; 76
    29d0:	5d e3       	ldi	r21, 0x3D	; 61
    29d2:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    29d6:	f7 01       	movw	r30, r14
    29d8:	60 87       	std	Z+8, r22	; 0x08
    29da:	71 87       	std	Z+9, r23	; 0x09
    29dc:	82 87       	std	Z+10, r24	; 0x0a
    29de:	93 87       	std	Z+11, r25	; 0x0b
    29e0:	0d 5f       	subi	r16, 0xFD	; 253
    29e2:	1f 4f       	sbci	r17, 0xFF	; 255
    29e4:	8c e0       	ldi	r24, 0x0C	; 12
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	e8 0e       	add	r14, r24
    29ea:	f9 1e       	adc	r15, r25
	
	if (estado != IDLE) {return false;}       // si no está en idle, ya retorna
		
	// comprobar empuje
	float salida [3], entrada [18];
	for (byte pata=0; pata<6; pata++) {
    29ec:	93 e1       	ldi	r25, 0x13	; 19
    29ee:	0a 3a       	cpi	r16, 0xAA	; 170
    29f0:	19 07       	cpc	r17, r25
    29f2:	09 f0       	breq	.+2      	; 0x29f6 <_ZN9Empujones7evaluarEv+0xdc>
    29f4:	b9 cf       	rjmp	.-142    	; 0x2968 <_ZN9Empujones7evaluarEv+0x4e>
		for (byte anillo=0; anillo<3; anillo++) {
			entrada[pata*3+anillo] = 0.05 * load[pata][anillo];    // esto está raro
		}                                             // el load cambia según el seteo del motor
	}
	process->compute (entrada, salida);  // invoca a la red neuronal
    29f6:	f2 01       	movw	r30, r4
    29f8:	84 81       	ldd	r24, Z+4	; 0x04
    29fa:	95 81       	ldd	r25, Z+5	; 0x05
    29fc:	be 01       	movw	r22, r28
    29fe:	63 5f       	subi	r22, 0xF3	; 243
    2a00:	7f 4f       	sbci	r23, 0xFF	; 255
    2a02:	ae 01       	movw	r20, r28
    2a04:	4f 5f       	subi	r20, 0xFF	; 255
    2a06:	5f 4f       	sbci	r21, 0xFF	; 255
    2a08:	0e 94 8d 03 	call	0x71a	; 0x71a <_ZN6Nlayer7computeEPfS0_>
	float x = 200*(salida[2]-.5);
    2a0c:	69 85       	ldd	r22, Y+9	; 0x09
    2a0e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2a10:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a12:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	40 e0       	ldi	r20, 0x00	; 0
    2a1a:	5f e3       	ldi	r21, 0x3F	; 63
    2a1c:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	48 e4       	ldi	r20, 0x48	; 72
    2a26:	53 e4       	ldi	r21, 0x43	; 67
    2a28:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    2a2c:	7b 01       	movw	r14, r22
    2a2e:	8c 01       	movw	r16, r24
	float z = 200*(salida[1]-.5);
    2a30:	6d 81       	ldd	r22, Y+5	; 0x05
    2a32:	7e 81       	ldd	r23, Y+6	; 0x06
    2a34:	8f 81       	ldd	r24, Y+7	; 0x07
    2a36:	98 85       	ldd	r25, Y+8	; 0x08
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	40 e0       	ldi	r20, 0x00	; 0
    2a3e:	5f e3       	ldi	r21, 0x3F	; 63
    2a40:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	48 e4       	ldi	r20, 0x48	; 72
    2a4a:	53 e4       	ldi	r21, 0x43	; 67
    2a4c:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    2a50:	5b 01       	movw	r10, r22
    2a52:	6c 01       	movw	r12, r24
	modulo = hypot (x, z);
    2a54:	b7 01       	movw	r22, r14
    2a56:	c8 01       	movw	r24, r16
    2a58:	a6 01       	movw	r20, r12
    2a5a:	95 01       	movw	r18, r10
    2a5c:	0e 94 a3 7e 	call	0xfd46	; 0xfd46 <hypot>
    2a60:	3b 01       	movw	r6, r22
    2a62:	4c 01       	movw	r8, r24
    2a64:	f2 01       	movw	r30, r4
    2a66:	66 83       	std	Z+6, r22	; 0x06
    2a68:	77 83       	std	Z+7, r23	; 0x07
    2a6a:	80 87       	std	Z+8, r24	; 0x08
    2a6c:	91 87       	std	Z+9, r25	; 0x09
	angulo = atan2 (-z, x);
    2a6e:	d7 fa       	bst	r13, 7
    2a70:	d0 94       	com	r13
    2a72:	d7 f8       	bld	r13, 7
    2a74:	d0 94       	com	r13
    2a76:	c6 01       	movw	r24, r12
    2a78:	b5 01       	movw	r22, r10
    2a7a:	97 01       	movw	r18, r14
    2a7c:	a8 01       	movw	r20, r16
    2a7e:	0e 94 47 7c 	call	0xf88e	; 0xf88e <atan2>
    2a82:	f2 01       	movw	r30, r4
    2a84:	62 87       	std	Z+10, r22	; 0x0a
    2a86:	73 87       	std	Z+11, r23	; 0x0b
    2a88:	84 87       	std	Z+12, r24	; 0x0c
    2a8a:	95 87       	std	Z+13, r25	; 0x0d
	
	return (modulo > 76);
    2a8c:	10 e0       	ldi	r17, 0x00	; 0
    2a8e:	c4 01       	movw	r24, r8
    2a90:	b3 01       	movw	r22, r6
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	48 e9       	ldi	r20, 0x98	; 152
    2a98:	52 e4       	ldi	r21, 0x42	; 66
    2a9a:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <__gesf2>
    2a9e:	18 16       	cp	r1, r24
    2aa0:	0c f4       	brge	.+2      	; 0x2aa4 <_ZN9Empujones7evaluarEv+0x18a>
    2aa2:	11 e0       	ldi	r17, 0x01	; 1

}
    2aa4:	81 2f       	mov	r24, r17
    2aa6:	cc 5a       	subi	r28, 0xAC	; 172
    2aa8:	df 4f       	sbci	r29, 0xFF	; 255
    2aaa:	0f b6       	in	r0, 0x3f	; 63
    2aac:	f8 94       	cli
    2aae:	de bf       	out	0x3e, r29	; 62
    2ab0:	0f be       	out	0x3f, r0	; 63
    2ab2:	cd bf       	out	0x3d, r28	; 61
    2ab4:	cf 91       	pop	r28
    2ab6:	df 91       	pop	r29
    2ab8:	1f 91       	pop	r17
    2aba:	0f 91       	pop	r16
    2abc:	ff 90       	pop	r15
    2abe:	ef 90       	pop	r14
    2ac0:	df 90       	pop	r13
    2ac2:	cf 90       	pop	r12
    2ac4:	bf 90       	pop	r11
    2ac6:	af 90       	pop	r10
    2ac8:	9f 90       	pop	r9
    2aca:	8f 90       	pop	r8
    2acc:	7f 90       	pop	r7
    2ace:	6f 90       	pop	r6
    2ad0:	5f 90       	pop	r5
    2ad2:	4f 90       	pop	r4
    2ad4:	08 95       	ret

00002ad6 <_ZN7Display6conwayEii>:

void Display::conway () {
  SPIsendMsg (16, 0, NULL);
}

void Display::conway (int pausa_, int ciclos) {
    2ad6:	fc 01       	movw	r30, r24
  pausa = pausa_;
    2ad8:	73 83       	std	Z+3, r23	; 0x03
    2ada:	62 83       	std	Z+2, r22	; 0x02
  index = ciclos;
    2adc:	56 83       	std	Z+6, r21	; 0x06
    2ade:	45 83       	std	Z+5, r20	; 0x05
  retardo = 0;
    2ae0:	12 86       	std	Z+10, r1	; 0x0a
    2ae2:	11 86       	std	Z+9, r1	; 0x09
  mode = CONWAY;
    2ae4:	89 e0       	ldi	r24, 0x09	; 9
    2ae6:	80 87       	std	Z+8, r24	; 0x08
}
    2ae8:	08 95       	ret

00002aea <_ZN7Display5anchoEc>:
}

// rutinas auxiliares
byte Display::ancho (char chr) {                                     // tabla de anchos de los caracteres
  byte anch;
  switch (chr) {
    2aea:	77 27       	eor	r23, r23
    2aec:	67 fd       	sbrc	r22, 7
    2aee:	70 95       	com	r23
    2af0:	87 2f       	mov	r24, r23
    2af2:	97 2f       	mov	r25, r23
    2af4:	fb 01       	movw	r30, r22
    2af6:	b0 97       	sbiw	r30, 0x20	; 32
    2af8:	ef 35       	cpi	r30, 0x5F	; 95
    2afa:	f1 05       	cpc	r31, r1
    2afc:	a0 f4       	brcc	.+40     	; 0x2b26 <_ZN7Display5anchoEc+0x3c>
    2afe:	ef 52       	subi	r30, 0x2F	; 47
    2b00:	ff 4f       	sbci	r31, 0xFF	; 255
    2b02:	ee 0f       	add	r30, r30
    2b04:	ff 1f       	adc	r31, r31
    2b06:	05 90       	lpm	r0, Z+
    2b08:	f4 91       	lpm	r31, Z+
    2b0a:	e0 2d       	mov	r30, r0
    2b0c:	09 94       	ijmp
    2b0e:	84 e0       	ldi	r24, 0x04	; 4
    2b10:	08 95       	ret
    2b12:	85 e0       	ldi	r24, 0x05	; 5
    2b14:	08 95       	ret
    2b16:	82 e0       	ldi	r24, 0x02	; 2
    2b18:	08 95       	ret
    case 'a': case 'b': case 'c': case 'd': case 'e': case 'g': case 'h': case 'k': 
    case 'n': case 'o': case 'p': case 'q': case 's': case 'u': case 'y': case 'z': 
    case '!': case '&': case '-': case '0': case '2': case '3': case '4': case '5': 
    case '6': case '7': case '8': case '9': case '=': case '?': case '{': case '}': anch=5; break;
    case 'f': case 'r': case 't': case '/': anch=4; break;
    case 'I': case 'i': case 'l': case ' ': anch=2; break;
    2b1a:	83 e0       	ldi	r24, 0x03	; 3
    2b1c:	08 95       	ret
    case 'j': case '(': case ')': case ',': case '.': case '1': case ':': case ';': anch=3; break;
    2b1e:	87 e0       	ldi	r24, 0x07	; 7
    2b20:	08 95       	ret
    case '%': anch=7; break;       
    2b22:	88 e0       	ldi	r24, 0x08	; 8
    2b24:	08 95       	ret
    case '@': case '*': case 'W': case '~': case '<': case '>': case '[': case ']': case '^': case '_': case '|': anch=8; break;
    2b26:	86 e0       	ldi	r24, 0x06	; 6
    default: anch=6; break;
  }
  return anch;
}
    2b28:	08 95       	ret

00002b2a <_ZN7Display6offsetEc>:

byte Display::offset (char chr) {                                          // tabla de "offsets" de los caracteres
  byte offs;
  switch (chr) {
    2b2a:	77 27       	eor	r23, r23
    2b2c:	67 fd       	sbrc	r22, 7
    2b2e:	70 95       	com	r23
    2b30:	87 2f       	mov	r24, r23
    2b32:	97 2f       	mov	r25, r23
    2b34:	fb 01       	movw	r30, r22
    2b36:	b0 97       	sbiw	r30, 0x20	; 32
    2b38:	ee 35       	cpi	r30, 0x5E	; 94
    2b3a:	f1 05       	cpc	r31, r1
    2b3c:	60 f4       	brcc	.+24     	; 0x2b56 <_ZN7Display6offsetEc+0x2c>
    2b3e:	e0 5d       	subi	r30, 0xD0	; 208
    2b40:	fe 4f       	sbci	r31, 0xFE	; 254
    2b42:	ee 0f       	add	r30, r30
    2b44:	ff 1f       	adc	r31, r31
    2b46:	05 90       	lpm	r0, Z+
    2b48:	f4 91       	lpm	r31, Z+
    2b4a:	e0 2d       	mov	r30, r0
    2b4c:	09 94       	ijmp
    2b4e:	82 e0       	ldi	r24, 0x02	; 2
    2b50:	08 95       	ret
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	08 95       	ret
    2b56:	80 e0       	ldi	r24, 0x00	; 0
    case 'j': case '(': case ')': case ',': case '.': case '1': case ':': case ';': 
    case 'I': case 'i': case 'l': case ' ': offs=2; break;
    default: offs=0; break;
  }
  return offs;
}
    2b58:	08 95       	ret

00002b5a <_ZN7Display6isBusyEv>:
			break;
		}
	}
}

bool Display::isBusy () {
    2b5a:	fc 01       	movw	r30, r24
	return (mode == SCROLL_TEXT && retardo == 0);
    2b5c:	80 85       	ldd	r24, Z+8	; 0x08
    2b5e:	88 30       	cpi	r24, 0x08	; 8
    2b60:	11 f0       	breq	.+4      	; 0x2b66 <_ZN7Display6isBusyEv+0xc>
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	06 c0       	rjmp	.+12     	; 0x2b72 <_ZN7Display6isBusyEv+0x18>
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	81 85       	ldd	r24, Z+9	; 0x09
    2b6a:	92 85       	ldd	r25, Z+10	; 0x0a
    2b6c:	89 2b       	or	r24, r25
    2b6e:	09 f4       	brne	.+2      	; 0x2b72 <_ZN7Display6isBusyEv+0x18>
    2b70:	21 e0       	ldi	r18, 0x01	; 1
    2b72:	82 2f       	mov	r24, r18
    2b74:	08 95       	ret

00002b76 <_GLOBAL__I_pantalla>:
#include <string.h>

Display pantalla;                  // preinstanciado

Display::Display () {               // constructor
  text = NULL;
    2b76:	10 92 c1 06 	sts	0x06C1, r1
    2b7a:	10 92 c0 06 	sts	0x06C0, r1
  mode = DISPLAY_OFF;
    2b7e:	8a e0       	ldi	r24, 0x0A	; 10
    2b80:	80 93 c8 06 	sts	0x06C8, r24
	}
}

bool Display::isBusy () {
	return (mode == SCROLL_TEXT && retardo == 0);
    2b84:	08 95       	ret

00002b86 <_ZN7Display10SPIsendMsgEhhPh>:
    default: offs=0; break;
  }
  return offs;
}

byte Display::SPIsendMsg (byte instruccion, byte largo, byte* data) {        // manda los mensajes via SPI al display
    2b86:	ef 92       	push	r14
    2b88:	ff 92       	push	r15
    2b8a:	0f 93       	push	r16
    2b8c:	1f 93       	push	r17
    2b8e:	cf 93       	push	r28
    2b90:	df 93       	push	r29
    2b92:	16 2f       	mov	r17, r22
    2b94:	e4 2e       	mov	r14, r20
    2b96:	02 2f       	mov	r16, r18
    2b98:	f3 2e       	mov	r15, r19
  digitalWrite(SS, LOW);
    2b9a:	85 e3       	ldi	r24, 0x35	; 53
    2b9c:	60 e0       	ldi	r22, 0x00	; 0
    2b9e:	0e 94 b8 07 	call	0xf70	; 0xf70 <digitalWrite>
  SPItransfer (128+(instruccion<<2)+largo);             // byte de cabecera, con 5 bits de instrucción y 2 bits de largo (no tiene "running status")
    2ba2:	11 0f       	add	r17, r17
    2ba4:	11 0f       	add	r17, r17
    2ba6:	1e 0d       	add	r17, r14
    2ba8:	81 2f       	mov	r24, r17
    2baa:	80 58       	subi	r24, 0x80	; 128
    2bac:	0e 94 33 1b 	call	0x3666	; 0x3666 <_Z11SPItransferh>
    2bb0:	20 2f       	mov	r18, r16
    2bb2:	3f 2d       	mov	r19, r15
    2bb4:	c9 01       	movw	r24, r18
    2bb6:	ec 01       	movw	r28, r24
    2bb8:	10 e0       	ldi	r17, 0x00	; 0
    2bba:	04 c0       	rjmp	.+8      	; 0x2bc4 <_ZN7Display10SPIsendMsgEhhPh+0x3e>
  for (byte i=0; i<largo; i++) {
    SPItransfer (data[i]);
    2bbc:	89 91       	ld	r24, Y+
    2bbe:	0e 94 33 1b 	call	0x3666	; 0x3666 <_Z11SPItransferh>
}

byte Display::SPIsendMsg (byte instruccion, byte largo, byte* data) {        // manda los mensajes via SPI al display
  digitalWrite(SS, LOW);
  SPItransfer (128+(instruccion<<2)+largo);             // byte de cabecera, con 5 bits de instrucción y 2 bits de largo (no tiene "running status")
  for (byte i=0; i<largo; i++) {
    2bc2:	1f 5f       	subi	r17, 0xFF	; 255
    2bc4:	1e 15       	cp	r17, r14
    2bc6:	d0 f3       	brcs	.-12     	; 0x2bbc <_ZN7Display10SPIsendMsgEhhPh+0x36>
    SPItransfer (data[i]);
  }  
  digitalWrite(SS, HIGH);
    2bc8:	85 e3       	ldi	r24, 0x35	; 53
    2bca:	61 e0       	ldi	r22, 0x01	; 1
    2bcc:	0e 94 b8 07 	call	0xf70	; 0xf70 <digitalWrite>
  return 0;                                       // falta implementar la recepción
}
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	df 91       	pop	r29
    2bd4:	cf 91       	pop	r28
    2bd6:	1f 91       	pop	r17
    2bd8:	0f 91       	pop	r16
    2bda:	ff 90       	pop	r15
    2bdc:	ef 90       	pop	r14
    2bde:	08 95       	ret

00002be0 <_ZN7Display3lsmEcc>:

void Display::rotaciones (byte modo) {
  SPIsendMsg (23, 1, (byte[]) {modo});
}

void Display::lsm (char chr, char sc) {                                       // "load - scroll - merge"
    2be0:	df 93       	push	r29
    2be2:	cf 93       	push	r28
    2be4:	00 d0       	rcall	.+0      	; 0x2be6 <_ZN7Display3lsmEcc+0x6>
    2be6:	cd b7       	in	r28, 0x3d	; 61
    2be8:	de b7       	in	r29, 0x3e	; 62
  SPIsendMsg (24, 2, (byte[]) {chr, sc+10});
    2bea:	69 83       	std	Y+1, r22	; 0x01
    2bec:	46 5f       	subi	r20, 0xF6	; 246
    2bee:	4a 83       	std	Y+2, r20	; 0x02
    2bf0:	68 e1       	ldi	r22, 0x18	; 24
    2bf2:	42 e0       	ldi	r20, 0x02	; 2
    2bf4:	9e 01       	movw	r18, r28
    2bf6:	2f 5f       	subi	r18, 0xFF	; 255
    2bf8:	3f 4f       	sbci	r19, 0xFF	; 255
    2bfa:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <_ZN7Display10SPIsendMsgEhhPh>
}
    2bfe:	0f 90       	pop	r0
    2c00:	0f 90       	pop	r0
    2c02:	cf 91       	pop	r28
    2c04:	df 91       	pop	r29
    2c06:	08 95       	ret

00002c08 <_ZN7Display7lsm_intEcc>:
  index = index_;
  mode = SCROLL_TEXT;
  init = true;
}

void Display::lsm_int (char index_, char sc_) {                  // "load - scroll - merge" (interna)
    2c08:	cf 93       	push	r28
    2c0a:	df 93       	push	r29
  if (index_ < strlen(text) && index_ >= 0) {
    2c0c:	26 2f       	mov	r18, r22
    2c0e:	33 27       	eor	r19, r19
    2c10:	27 fd       	sbrc	r18, 7
    2c12:	30 95       	com	r19
    2c14:	fc 01       	movw	r30, r24
    2c16:	c0 81       	ld	r28, Z
    2c18:	d1 81       	ldd	r29, Z+1	; 0x01
    2c1a:	fe 01       	movw	r30, r28
    2c1c:	01 90       	ld	r0, Z+
    2c1e:	00 20       	and	r0, r0
    2c20:	e9 f7       	brne	.-6      	; 0x2c1c <_ZN7Display7lsm_intEcc+0x14>
    2c22:	31 97       	sbiw	r30, 0x01	; 1
    2c24:	ec 1b       	sub	r30, r28
    2c26:	fd 0b       	sbc	r31, r29
    2c28:	2e 17       	cp	r18, r30
    2c2a:	3f 07       	cpc	r19, r31
    2c2c:	30 f4       	brcc	.+12     	; 0x2c3a <_ZN7Display7lsm_intEcc+0x32>
    2c2e:	67 fd       	sbrc	r22, 7
    2c30:	04 c0       	rjmp	.+8      	; 0x2c3a <_ZN7Display7lsm_intEcc+0x32>
    lsm (text[index_], sc_);
    2c32:	c2 0f       	add	r28, r18
    2c34:	d3 1f       	adc	r29, r19
    2c36:	68 81       	ld	r22, Y
    2c38:	01 c0       	rjmp	.+2      	; 0x2c3c <_ZN7Display7lsm_intEcc+0x34>
  } else {lsm (' ', sc_);} 
    2c3a:	60 e2       	ldi	r22, 0x20	; 32
    2c3c:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <_ZN7Display3lsmEcc>
}
    2c40:	df 91       	pop	r29
    2c42:	cf 91       	pop	r28
    2c44:	08 95       	ret

00002c46 <_ZN7Display6scrollEccbb>:
// buffer advanced (fx, text, etc) 
void Display::loadChr (byte chr) {                                                          
  SPIsendMsg (21, 1, (byte[]) {chr});
}

void Display::scroll (char desplazamientoH, char desplazamientoV, bool circular, bool isRW) {
    2c46:	0f 93       	push	r16
    2c48:	df 93       	push	r29
    2c4a:	cf 93       	push	r28
    2c4c:	00 d0       	rcall	.+0      	; 0x2c4e <_ZN7Display6scrollEccbb+0x8>
    2c4e:	0f 92       	push	r0
    2c50:	cd b7       	in	r28, 0x3d	; 61
    2c52:	de b7       	in	r29, 0x3e	; 62
  SPIsendMsg (22, 3, (byte[]) {10+desplazamientoH, 10+desplazamientoV, circular + 2*isRW});
    2c54:	66 5f       	subi	r22, 0xF6	; 246
    2c56:	69 83       	std	Y+1, r22	; 0x01
    2c58:	46 5f       	subi	r20, 0xF6	; 246
    2c5a:	4a 83       	std	Y+2, r20	; 0x02
    2c5c:	00 0f       	add	r16, r16
    2c5e:	02 0f       	add	r16, r18
    2c60:	0b 83       	std	Y+3, r16	; 0x03
    2c62:	66 e1       	ldi	r22, 0x16	; 22
    2c64:	43 e0       	ldi	r20, 0x03	; 3
    2c66:	9e 01       	movw	r18, r28
    2c68:	2f 5f       	subi	r18, 0xFF	; 255
    2c6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c6c:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <_ZN7Display10SPIsendMsgEhhPh>
}
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	0f 90       	pop	r0
    2c76:	cf 91       	pop	r28
    2c78:	df 91       	pop	r29
    2c7a:	0f 91       	pop	r16
    2c7c:	08 95       	ret

00002c7e <_ZN7Display6conwayEv>:
void Display::circulo (byte x, byte y, byte diametro) {
  SPIsendMsg (15, 2, (byte[]) {xy2byte(x, y), diametro});
}

void Display::conway () {
  SPIsendMsg (16, 0, NULL);
    2c7e:	60 e1       	ldi	r22, 0x10	; 16
    2c80:	40 e0       	ldi	r20, 0x00	; 0
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <_ZN7Display10SPIsendMsgEhhPh>
}
    2c8a:	08 95       	ret

00002c8c <_ZN7Display6updateEm>:
byte Display::xy2byte (byte x, byte y) {        // codifica las coordenadas como 1 solo byte
  return y + 8*x;
}

// runtime
void Display::update (unsigned long milis) {
    2c8c:	df 92       	push	r13
    2c8e:	ef 92       	push	r14
    2c90:	ff 92       	push	r15
    2c92:	0f 93       	push	r16
    2c94:	1f 93       	push	r17
    2c96:	cf 93       	push	r28
    2c98:	df 93       	push	r29
    2c9a:	ec 01       	movw	r28, r24
    2c9c:	7a 01       	movw	r14, r20
    2c9e:	8b 01       	movw	r16, r22
	
	// variables de control
	static char sc;                    // sc es la posición actual de la letra
	static unsigned long timer = 0;
	
	if (milis-timer < pausa) {return;}    // verifica si pasó x tiempo desde la última vez, y si no, retorna sin hacer nada
    2ca0:	80 91 cb 06 	lds	r24, 0x06CB
    2ca4:	90 91 cc 06 	lds	r25, 0x06CC
    2ca8:	a0 91 cd 06 	lds	r26, 0x06CD
    2cac:	b0 91 ce 06 	lds	r27, 0x06CE
    2cb0:	9a 01       	movw	r18, r20
    2cb2:	ab 01       	movw	r20, r22
    2cb4:	28 1b       	sub	r18, r24
    2cb6:	39 0b       	sbc	r19, r25
    2cb8:	4a 0b       	sbc	r20, r26
    2cba:	5b 0b       	sbc	r21, r27
    2cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cbe:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc0:	aa 27       	eor	r26, r26
    2cc2:	97 fd       	sbrc	r25, 7
    2cc4:	a0 95       	com	r26
    2cc6:	ba 2f       	mov	r27, r26
    2cc8:	28 17       	cp	r18, r24
    2cca:	39 07       	cpc	r19, r25
    2ccc:	4a 07       	cpc	r20, r26
    2cce:	5b 07       	cpc	r21, r27
    2cd0:	08 f4       	brcc	.+2      	; 0x2cd4 <_ZN7Display6updateEm+0x48>
    2cd2:	cc c0       	rjmp	.+408    	; 0x2e6c <_ZN7Display6updateEm+0x1e0>
			
	timer = milis;
    2cd4:	e0 92 cb 06 	sts	0x06CB, r14
    2cd8:	f0 92 cc 06 	sts	0x06CC, r15
    2cdc:	00 93 cd 06 	sts	0x06CD, r16
    2ce0:	10 93 ce 06 	sts	0x06CE, r17
	
	if (retardo > 0) {retardo--; return;}   // retardo
    2ce4:	89 85       	ldd	r24, Y+9	; 0x09
    2ce6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce8:	18 16       	cp	r1, r24
    2cea:	19 06       	cpc	r1, r25
    2cec:	24 f4       	brge	.+8      	; 0x2cf6 <_ZN7Display6updateEm+0x6a>
    2cee:	01 97       	sbiw	r24, 0x01	; 1
    2cf0:	9a 87       	std	Y+10, r25	; 0x0a
    2cf2:	89 87       	std	Y+9, r24	; 0x09
    2cf4:	bb c0       	rjmp	.+374    	; 0x2e6c <_ZN7Display6updateEm+0x1e0>
	
	if (init) {            // init es el flag que indica que se deben actualizar las variables de control 
    2cf6:	8f 81       	ldd	r24, Y+7	; 0x07
    2cf8:	88 23       	and	r24, r24
    2cfa:	19 f0       	breq	.+6      	; 0x2d02 <_ZN7Display6updateEm+0x76>
		sc = 0; 
    2cfc:	10 92 cf 06 	sts	0x06CF, r1
		init = false;
    2d00:	1f 82       	std	Y+7, r1	; 0x07
	}
	
	// empieza el loop
	switch (mode) {
    2d02:	88 85       	ldd	r24, Y+8	; 0x08
    2d04:	88 30       	cpi	r24, 0x08	; 8
    2d06:	21 f0       	breq	.+8      	; 0x2d10 <_ZN7Display6updateEm+0x84>
    2d08:	89 30       	cpi	r24, 0x09	; 9
    2d0a:	09 f0       	breq	.+2      	; 0x2d0e <_ZN7Display6updateEm+0x82>
    2d0c:	af c0       	rjmp	.+350    	; 0x2e6c <_ZN7Display6updateEm+0x1e0>
    2d0e:	a2 c0       	rjmp	.+324    	; 0x2e54 <_ZN7Display6updateEm+0x1c8>
		case DISPLAY_OFF: return;
		case SCROLL_TEXT: {
			sc -= sentido;                                           
    2d10:	d0 90 cf 06 	lds	r13, 0x06CF
    2d14:	8c 81       	ldd	r24, Y+4	; 0x04
    2d16:	d8 1a       	sub	r13, r24
    2d18:	d0 92 cf 06 	sts	0x06CF, r13
			if (sc == ancho(text[index-1])) {index--; sc=0;} 
    2d1c:	0d 81       	ldd	r16, Y+5	; 0x05
    2d1e:	1e 81       	ldd	r17, Y+6	; 0x06
    2d20:	e8 80       	ld	r14, Y
    2d22:	f9 80       	ldd	r15, Y+1	; 0x01
    2d24:	f7 01       	movw	r30, r14
    2d26:	e0 0f       	add	r30, r16
    2d28:	f1 1f       	adc	r31, r17
    2d2a:	31 97       	sbiw	r30, 0x01	; 1
    2d2c:	ce 01       	movw	r24, r28
    2d2e:	60 81       	ld	r22, Z
    2d30:	0e 94 75 15 	call	0x2aea	; 0x2aea <_ZN7Display5anchoEc>
    2d34:	2d 2d       	mov	r18, r13
    2d36:	33 27       	eor	r19, r19
    2d38:	27 fd       	sbrc	r18, 7
    2d3a:	30 95       	com	r19
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	28 17       	cp	r18, r24
    2d40:	39 07       	cpc	r19, r25
    2d42:	39 f4       	brne	.+14     	; 0x2d52 <_ZN7Display6updateEm+0xc6>
    2d44:	01 50       	subi	r16, 0x01	; 1
    2d46:	10 40       	sbci	r17, 0x00	; 0
    2d48:	1e 83       	std	Y+6, r17	; 0x06
    2d4a:	0d 83       	std	Y+5, r16	; 0x05
    2d4c:	10 92 cf 06 	sts	0x06CF, r1
    2d50:	13 c0       	rjmp	.+38     	; 0x2d78 <_ZN7Display6updateEm+0xec>
			else if (sc < 0) {index++; sc=ancho(text[index-1])-1;}              
    2d52:	d7 fe       	sbrs	r13, 7
    2d54:	11 c0       	rjmp	.+34     	; 0x2d78 <_ZN7Display6updateEm+0xec>
    2d56:	c8 01       	movw	r24, r16
    2d58:	01 96       	adiw	r24, 0x01	; 1
    2d5a:	9e 83       	std	Y+6, r25	; 0x06
    2d5c:	8d 83       	std	Y+5, r24	; 0x05
    2d5e:	e8 0e       	add	r14, r24
    2d60:	f9 1e       	adc	r15, r25
    2d62:	08 94       	sec
    2d64:	e1 08       	sbc	r14, r1
    2d66:	f1 08       	sbc	r15, r1
    2d68:	ce 01       	movw	r24, r28
    2d6a:	f7 01       	movw	r30, r14
    2d6c:	60 81       	ld	r22, Z
    2d6e:	0e 94 75 15 	call	0x2aea	; 0x2aea <_ZN7Display5anchoEc>
    2d72:	81 50       	subi	r24, 0x01	; 1
    2d74:	80 93 cf 06 	sts	0x06CF, r24
			scroll (sentido, 0, 0, true);                               
    2d78:	ce 01       	movw	r24, r28
    2d7a:	6c 81       	ldd	r22, Y+4	; 0x04
    2d7c:	40 e0       	ldi	r20, 0x00	; 0
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	01 e0       	ldi	r16, 0x01	; 1
    2d82:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_ZN7Display6scrollEccbb>
			switch (sentido) {
    2d86:	8c 81       	ldd	r24, Y+4	; 0x04
    2d88:	8f 3f       	cpi	r24, 0xFF	; 255
    2d8a:	c1 f1       	breq	.+112    	; 0x2dfc <_ZN7Display6updateEm+0x170>
    2d8c:	81 30       	cpi	r24, 0x01	; 1
    2d8e:	09 f0       	breq	.+2      	; 0x2d92 <_ZN7Display6updateEm+0x106>
    2d90:	50 c0       	rjmp	.+160    	; 0x2e32 <_ZN7Display6updateEm+0x1a6>
				case 1:  
					lsm_int (index, offset(text[index])-sc);
    2d92:	0d 81       	ldd	r16, Y+5	; 0x05
    2d94:	1e 81       	ldd	r17, Y+6	; 0x06
    2d96:	e8 81       	ld	r30, Y
    2d98:	f9 81       	ldd	r31, Y+1	; 0x01
    2d9a:	e0 0f       	add	r30, r16
    2d9c:	f1 1f       	adc	r31, r17
    2d9e:	ce 01       	movw	r24, r28
    2da0:	60 81       	ld	r22, Z
    2da2:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN7Display6offsetEc>
    2da6:	90 91 cf 06 	lds	r25, 0x06CF
    2daa:	48 2f       	mov	r20, r24
    2dac:	49 1b       	sub	r20, r25
    2dae:	ce 01       	movw	r24, r28
    2db0:	60 2f       	mov	r22, r16
    2db2:	0e 94 04 16 	call	0x2c08	; 0x2c08 <_ZN7Display7lsm_intEcc>
					if (sc + ancho(text[index]) < 7) {lsm_int (index+1, offset(text[index+1])-ancho(text[index])-sc);}
    2db6:	d0 90 cf 06 	lds	r13, 0x06CF
    2dba:	08 81       	ld	r16, Y
    2dbc:	19 81       	ldd	r17, Y+1	; 0x01
    2dbe:	fd 80       	ldd	r15, Y+5	; 0x05
    2dc0:	8f 2d       	mov	r24, r15
    2dc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc4:	08 0f       	add	r16, r24
    2dc6:	19 1f       	adc	r17, r25
    2dc8:	ce 01       	movw	r24, r28
    2dca:	f8 01       	movw	r30, r16
    2dcc:	60 81       	ld	r22, Z
    2dce:	0e 94 75 15 	call	0x2aea	; 0x2aea <_ZN7Display5anchoEc>
    2dd2:	e8 2e       	mov	r14, r24
    2dd4:	8d 2d       	mov	r24, r13
    2dd6:	99 27       	eor	r25, r25
    2dd8:	87 fd       	sbrc	r24, 7
    2dda:	90 95       	com	r25
    2ddc:	8e 0d       	add	r24, r14
    2dde:	91 1d       	adc	r25, r1
    2de0:	07 97       	sbiw	r24, 0x07	; 7
    2de2:	3c f5       	brge	.+78     	; 0x2e32 <_ZN7Display6updateEm+0x1a6>
    2de4:	ce 01       	movw	r24, r28
    2de6:	f8 01       	movw	r30, r16
    2de8:	61 81       	ldd	r22, Z+1	; 0x01
    2dea:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN7Display6offsetEc>
    2dee:	f3 94       	inc	r15
    2df0:	48 2f       	mov	r20, r24
    2df2:	4e 19       	sub	r20, r14
    2df4:	4d 19       	sub	r20, r13
    2df6:	ce 01       	movw	r24, r28
    2df8:	6f 2d       	mov	r22, r15
    2dfa:	19 c0       	rjmp	.+50     	; 0x2e2e <_ZN7Display6updateEm+0x1a2>
					break;      
				case -1:
					lsm_int (index-1, offset(text[index-1])+ancho(text[index-1])-sc);
    2dfc:	ed 80       	ldd	r14, Y+5	; 0x05
    2dfe:	fe 80       	ldd	r15, Y+6	; 0x06
    2e00:	e8 81       	ld	r30, Y
    2e02:	f9 81       	ldd	r31, Y+1	; 0x01
    2e04:	ee 0d       	add	r30, r14
    2e06:	ff 1d       	adc	r31, r15
    2e08:	31 97       	sbiw	r30, 0x01	; 1
    2e0a:	00 81       	ld	r16, Z
    2e0c:	ce 01       	movw	r24, r28
    2e0e:	60 2f       	mov	r22, r16
    2e10:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN7Display6offsetEc>
    2e14:	18 2f       	mov	r17, r24
    2e16:	ce 01       	movw	r24, r28
    2e18:	60 2f       	mov	r22, r16
    2e1a:	0e 94 75 15 	call	0x2aea	; 0x2aea <_ZN7Display5anchoEc>
    2e1e:	ea 94       	dec	r14
    2e20:	18 0f       	add	r17, r24
    2e22:	80 91 cf 06 	lds	r24, 0x06CF
    2e26:	18 1b       	sub	r17, r24
    2e28:	ce 01       	movw	r24, r28
    2e2a:	6e 2d       	mov	r22, r14
    2e2c:	41 2f       	mov	r20, r17
    2e2e:	0e 94 04 16 	call	0x2c08	; 0x2c08 <_ZN7Display7lsm_intEcc>
					break;      
			}
			if (index >= strlen(text) || index < 0) {mode = DISPLAY_OFF;}
    2e32:	8d 81       	ldd	r24, Y+5	; 0x05
    2e34:	9e 81       	ldd	r25, Y+6	; 0x06
    2e36:	a8 81       	ld	r26, Y
    2e38:	b9 81       	ldd	r27, Y+1	; 0x01
    2e3a:	fd 01       	movw	r30, r26
    2e3c:	01 90       	ld	r0, Z+
    2e3e:	00 20       	and	r0, r0
    2e40:	e9 f7       	brne	.-6      	; 0x2e3c <_ZN7Display6updateEm+0x1b0>
    2e42:	31 97       	sbiw	r30, 0x01	; 1
    2e44:	ea 1b       	sub	r30, r26
    2e46:	fb 0b       	sbc	r31, r27
    2e48:	8e 17       	cp	r24, r30
    2e4a:	9f 07       	cpc	r25, r31
    2e4c:	68 f4       	brcc	.+26     	; 0x2e68 <_ZN7Display6updateEm+0x1dc>
    2e4e:	97 ff       	sbrs	r25, 7
    2e50:	0d c0       	rjmp	.+26     	; 0x2e6c <_ZN7Display6updateEm+0x1e0>
    2e52:	0a c0       	rjmp	.+20     	; 0x2e68 <_ZN7Display6updateEm+0x1dc>
			break;
		}
		case CONWAY: {
			conway ();
    2e54:	ce 01       	movw	r24, r28
    2e56:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <_ZN7Display6conwayEv>
			index --;
    2e5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e5e:	01 97       	sbiw	r24, 0x01	; 1
    2e60:	9e 83       	std	Y+6, r25	; 0x06
    2e62:	8d 83       	std	Y+5, r24	; 0x05
			if (index == 0) {mode = DISPLAY_OFF;}
    2e64:	89 2b       	or	r24, r25
    2e66:	11 f4       	brne	.+4      	; 0x2e6c <_ZN7Display6updateEm+0x1e0>
    2e68:	8a e0       	ldi	r24, 0x0A	; 10
    2e6a:	88 87       	std	Y+8, r24	; 0x08
			break;
		}
	}
}
    2e6c:	df 91       	pop	r29
    2e6e:	cf 91       	pop	r28
    2e70:	1f 91       	pop	r17
    2e72:	0f 91       	pop	r16
    2e74:	ff 90       	pop	r15
    2e76:	ef 90       	pop	r14
    2e78:	df 90       	pop	r13
    2e7a:	08 95       	ret

00002e7c <_ZN7Display8setColorEhhh>:

void Display::borraCuadrante (byte cuadrante) {
  SPIsendMsg (2, 1, (byte[]) {cuadrante});
}

void Display::setColor (byte colorMode, byte colorMin, byte colorMax) {
    2e7c:	df 93       	push	r29
    2e7e:	cf 93       	push	r28
    2e80:	00 d0       	rcall	.+0      	; 0x2e82 <_ZN7Display8setColorEhhh+0x6>
    2e82:	0f 92       	push	r0
    2e84:	cd b7       	in	r28, 0x3d	; 61
    2e86:	de b7       	in	r29, 0x3e	; 62
  SPIsendMsg (3, 3, (byte[]) {colorMode, colorMin, colorMax});
    2e88:	69 83       	std	Y+1, r22	; 0x01
    2e8a:	4a 83       	std	Y+2, r20	; 0x02
    2e8c:	2b 83       	std	Y+3, r18	; 0x03
    2e8e:	63 e0       	ldi	r22, 0x03	; 3
    2e90:	43 e0       	ldi	r20, 0x03	; 3
    2e92:	9e 01       	movw	r18, r28
    2e94:	2f 5f       	subi	r18, 0xFF	; 255
    2e96:	3f 4f       	sbci	r19, 0xFF	; 255
    2e98:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <_ZN7Display10SPIsendMsgEhhPh>
}
    2e9c:	0f 90       	pop	r0
    2e9e:	0f 90       	pop	r0
    2ea0:	0f 90       	pop	r0
    2ea2:	cf 91       	pop	r28
    2ea4:	df 91       	pop	r29
    2ea6:	08 95       	ret

00002ea8 <_ZN7Display10scrollTextEPKciici>:
void Display::lsm (char chr, char sc) {                                       // "load - scroll - merge"
  SPIsendMsg (24, 2, (byte[]) {chr, sc+10});
}

// rutinas de alto nivel (locales)
void Display::scrollText (const char *text_, int pausa_, int retardo_, char sentido_, int index_) {  // presenta un texto en movimiento (al estilo cutcsa) 
    2ea8:	9f 92       	push	r9
    2eaa:	af 92       	push	r10
    2eac:	bf 92       	push	r11
    2eae:	cf 92       	push	r12
    2eb0:	df 92       	push	r13
    2eb2:	ef 92       	push	r14
    2eb4:	ff 92       	push	r15
    2eb6:	0f 93       	push	r16
    2eb8:	1f 93       	push	r17
    2eba:	cf 93       	push	r28
    2ebc:	df 93       	push	r29
    2ebe:	ec 01       	movw	r28, r24
    2ec0:	16 2f       	mov	r17, r22
    2ec2:	97 2e       	mov	r9, r23
    2ec4:	6a 01       	movw	r12, r20
    2ec6:	59 01       	movw	r10, r18
																																													            // sentido: 0 manual; 1 izquierda; -1 derecha
                                                                                    // index es la letra actual. Al comienzo debe ser -1. 
																																					                         // pausa en milisegundos | reatardo en 'pausas'
  if (text != NULL) {
    2ec8:	88 81       	ld	r24, Y
    2eca:	99 81       	ldd	r25, Y+1	; 0x01
    2ecc:	00 97       	sbiw	r24, 0x00	; 0
    2ece:	11 f0       	breq	.+4      	; 0x2ed4 <_ZN7Display10scrollTextEPKciici+0x2c>
    free (text);
    2ed0:	0e 94 cd 79 	call	0xf39a	; 0xf39a <free>
  }
  text = (char*) malloc (strlen(text_)+1);
    2ed4:	e1 2f       	mov	r30, r17
    2ed6:	f9 2d       	mov	r31, r9
    2ed8:	df 01       	movw	r26, r30
    2eda:	0d 90       	ld	r0, X+
    2edc:	00 20       	and	r0, r0
    2ede:	e9 f7       	brne	.-6      	; 0x2eda <_ZN7Display10scrollTextEPKciici+0x32>
    2ee0:	cd 01       	movw	r24, r26
    2ee2:	8e 1b       	sub	r24, r30
    2ee4:	9f 0b       	sbc	r25, r31
    2ee6:	0e 94 20 79 	call	0xf240	; 0xf240 <malloc>
    2eea:	88 83       	st	Y, r24
    2eec:	99 83       	std	Y+1, r25	; 0x01
  strcpy (text, text_);
    2eee:	61 2f       	mov	r22, r17
    2ef0:	79 2d       	mov	r23, r9
    2ef2:	0e 94 83 7b 	call	0xf706	; 0xf706 <strcpy>
  pausa = pausa_;
    2ef6:	db 82       	std	Y+3, r13	; 0x03
    2ef8:	ca 82       	std	Y+2, r12	; 0x02
  retardo = retardo_;
    2efa:	ba 86       	std	Y+10, r11	; 0x0a
    2efc:	a9 86       	std	Y+9, r10	; 0x09
  sentido = sentido_;
    2efe:	0c 83       	std	Y+4, r16	; 0x04
  index = index_;
    2f00:	fe 82       	std	Y+6, r15	; 0x06
    2f02:	ed 82       	std	Y+5, r14	; 0x05
  mode = SCROLL_TEXT;
    2f04:	88 e0       	ldi	r24, 0x08	; 8
    2f06:	88 87       	std	Y+8, r24	; 0x08
  init = true;
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	8f 83       	std	Y+7, r24	; 0x07
}
    2f0c:	df 91       	pop	r29
    2f0e:	cf 91       	pop	r28
    2f10:	1f 91       	pop	r17
    2f12:	0f 91       	pop	r16
    2f14:	ff 90       	pop	r15
    2f16:	ef 90       	pop	r14
    2f18:	df 90       	pop	r13
    2f1a:	cf 90       	pop	r12
    2f1c:	bf 90       	pop	r11
    2f1e:	af 90       	pop	r10
    2f20:	9f 90       	pop	r9
    2f22:	08 95       	ret

00002f24 <_ZN6Events8get_dataEv>:

MOVDATA Events::get_data () {                                // get data & remove entry (atención: es responsabilidad de la isr no llamar esto cuando size==0)
    2f24:	ac 01       	movw	r20, r24
  byte index = head;
    2f26:	fb 01       	movw	r30, r22
    2f28:	ec 5f       	subi	r30, 0xFC	; 252
    2f2a:	f5 4f       	sbci	r31, 0xF5	; 245
    2f2c:	20 81       	ld	r18, Z
  head = get_index (1);
    2f2e:	82 2f       	mov	r24, r18
    2f30:	8f 5f       	subi	r24, 0xFF	; 255
    2f32:	8f 77       	andi	r24, 0x7F	; 127
    2f34:	80 83       	st	Z, r24
  size --; 
    2f36:	fb 01       	movw	r30, r22
    2f38:	eb 5f       	subi	r30, 0xFB	; 251
    2f3a:	f5 4f       	sbci	r31, 0xF5	; 245
    2f3c:	80 81       	ld	r24, Z
    2f3e:	81 50       	subi	r24, 0x01	; 1
    2f40:	80 83       	st	Z, r24
  return buffer [index].movdata;
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	84 e1       	ldi	r24, 0x14	; 20
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	28 9f       	mul	r18, r24
    2f4a:	f0 01       	movw	r30, r0
    2f4c:	29 9f       	mul	r18, r25
    2f4e:	f0 0d       	add	r31, r0
    2f50:	38 9f       	mul	r19, r24
    2f52:	f0 0d       	add	r31, r0
    2f54:	11 24       	eor	r1, r1
    2f56:	e6 0f       	add	r30, r22
    2f58:	f7 1f       	adc	r31, r23
    2f5a:	da 01       	movw	r26, r20
    2f5c:	38 96       	adiw	r30, 0x08	; 8
    2f5e:	80 e1       	ldi	r24, 0x10	; 16
    2f60:	01 90       	ld	r0, Z+
    2f62:	0d 92       	st	X+, r0
    2f64:	81 50       	subi	r24, 0x01	; 1
    2f66:	e1 f7       	brne	.-8      	; 0x2f60 <_ZN6Events8get_dataEv+0x3c>
}
    2f68:	ca 01       	movw	r24, r20
    2f6a:	08 95       	ret

00002f6c <_ZN6Events4swapEhh>:
  enable_ovf2();
  return result; 
}


void Events::swap (byte index1, byte index2) {          // forma parte del algoritmo de ordenación, intercambia de lugar 2 eventos
    2f6c:	df 93       	push	r29
    2f6e:	cf 93       	push	r28
    2f70:	cd b7       	in	r28, 0x3d	; 61
    2f72:	de b7       	in	r29, 0x3e	; 62
    2f74:	64 97       	sbiw	r28, 0x14	; 20
    2f76:	0f b6       	in	r0, 0x3f	; 63
    2f78:	f8 94       	cli
    2f7a:	de bf       	out	0x3e, r29	; 62
    2f7c:	0f be       	out	0x3f, r0	; 63
    2f7e:	cd bf       	out	0x3d, r28	; 61
  EVENT temp =  buffer [index2];
    2f80:	50 e0       	ldi	r21, 0x00	; 0
    2f82:	fa 01       	movw	r30, r20
    2f84:	ee 0f       	add	r30, r30
    2f86:	ff 1f       	adc	r31, r31
    2f88:	ee 0f       	add	r30, r30
    2f8a:	ff 1f       	adc	r31, r31
    2f8c:	e4 0f       	add	r30, r20
    2f8e:	f5 1f       	adc	r31, r21
    2f90:	31 96       	adiw	r30, 0x01	; 1
    2f92:	ee 0f       	add	r30, r30
    2f94:	ff 1f       	adc	r31, r31
    2f96:	ee 0f       	add	r30, r30
    2f98:	ff 1f       	adc	r31, r31
    2f9a:	de 01       	movw	r26, r28
    2f9c:	11 96       	adiw	r26, 0x01	; 1
    2f9e:	e8 0f       	add	r30, r24
    2fa0:	f9 1f       	adc	r31, r25
    2fa2:	24 e1       	ldi	r18, 0x14	; 20
    2fa4:	01 90       	ld	r0, Z+
    2fa6:	0d 92       	st	X+, r0
    2fa8:	21 50       	subi	r18, 0x01	; 1
    2faa:	e1 f7       	brne	.-8      	; 0x2fa4 <_ZN6Events4swapEhh+0x38>
  buffer [index2] = buffer [index1];
    2fac:	70 e0       	ldi	r23, 0x00	; 0
    2fae:	da 01       	movw	r26, r20
    2fb0:	aa 0f       	add	r26, r26
    2fb2:	bb 1f       	adc	r27, r27
    2fb4:	aa 0f       	add	r26, r26
    2fb6:	bb 1f       	adc	r27, r27
    2fb8:	a4 0f       	add	r26, r20
    2fba:	b5 1f       	adc	r27, r21
    2fbc:	11 96       	adiw	r26, 0x01	; 1
    2fbe:	aa 0f       	add	r26, r26
    2fc0:	bb 1f       	adc	r27, r27
    2fc2:	aa 0f       	add	r26, r26
    2fc4:	bb 1f       	adc	r27, r27
    2fc6:	fb 01       	movw	r30, r22
    2fc8:	ee 0f       	add	r30, r30
    2fca:	ff 1f       	adc	r31, r31
    2fcc:	ee 0f       	add	r30, r30
    2fce:	ff 1f       	adc	r31, r31
    2fd0:	e6 0f       	add	r30, r22
    2fd2:	f7 1f       	adc	r31, r23
    2fd4:	31 96       	adiw	r30, 0x01	; 1
    2fd6:	ee 0f       	add	r30, r30
    2fd8:	ff 1f       	adc	r31, r31
    2fda:	ee 0f       	add	r30, r30
    2fdc:	ff 1f       	adc	r31, r31
    2fde:	a8 0f       	add	r26, r24
    2fe0:	b9 1f       	adc	r27, r25
    2fe2:	e8 0f       	add	r30, r24
    2fe4:	f9 1f       	adc	r31, r25
    2fe6:	24 e1       	ldi	r18, 0x14	; 20
    2fe8:	01 90       	ld	r0, Z+
    2fea:	0d 92       	st	X+, r0
    2fec:	21 50       	subi	r18, 0x01	; 1
    2fee:	e1 f7       	brne	.-8      	; 0x2fe8 <_ZN6Events4swapEhh+0x7c>
  buffer [index1] = temp;
    2ff0:	fb 01       	movw	r30, r22
    2ff2:	ee 0f       	add	r30, r30
    2ff4:	ff 1f       	adc	r31, r31
    2ff6:	ee 0f       	add	r30, r30
    2ff8:	ff 1f       	adc	r31, r31
    2ffa:	e6 0f       	add	r30, r22
    2ffc:	f7 1f       	adc	r31, r23
    2ffe:	31 96       	adiw	r30, 0x01	; 1
    3000:	ee 0f       	add	r30, r30
    3002:	ff 1f       	adc	r31, r31
    3004:	ee 0f       	add	r30, r30
    3006:	ff 1f       	adc	r31, r31
    3008:	e8 0f       	add	r30, r24
    300a:	f9 1f       	adc	r31, r25
    300c:	de 01       	movw	r26, r28
    300e:	11 96       	adiw	r26, 0x01	; 1
    3010:	84 e1       	ldi	r24, 0x14	; 20
    3012:	0d 90       	ld	r0, X+
    3014:	01 92       	st	Z+, r0
    3016:	81 50       	subi	r24, 0x01	; 1
    3018:	e1 f7       	brne	.-8      	; 0x3012 <_ZN6Events4swapEhh+0xa6>
}
    301a:	64 96       	adiw	r28, 0x14	; 20
    301c:	0f b6       	in	r0, 0x3f	; 63
    301e:	f8 94       	cli
    3020:	de bf       	out	0x3e, r29	; 62
    3022:	0f be       	out	0x3f, r0	; 63
    3024:	cd bf       	out	0x3d, r28	; 61
    3026:	cf 91       	pop	r28
    3028:	df 91       	pop	r29
    302a:	08 95       	ret

0000302c <_ZN6Events3addE7MOVDATAi>:
  if (count > 0) {count = motor_update();}
  timer ++;  
  return count;                        // retorna la cantidad de motores updateados
}

bool Events::add (MOVDATA movdata, int rel_time) {     // add entry & sort deque
    302c:	6f 92       	push	r6
    302e:	7f 92       	push	r7
    3030:	8f 92       	push	r8
    3032:	9f 92       	push	r9
    3034:	af 92       	push	r10
    3036:	bf 92       	push	r11
    3038:	cf 92       	push	r12
    303a:	df 92       	push	r13
    303c:	ef 92       	push	r14
    303e:	ff 92       	push	r15
    3040:	0f 93       	push	r16
    3042:	1f 93       	push	r17
    3044:	df 93       	push	r29
    3046:	cf 93       	push	r28
    3048:	cd b7       	in	r28, 0x3d	; 61
    304a:	de b7       	in	r29, 0x3e	; 62
    304c:	60 97       	sbiw	r28, 0x10	; 16
    304e:	0f b6       	in	r0, 0x3f	; 63
    3050:	f8 94       	cli
    3052:	de bf       	out	0x3e, r29	; 62
    3054:	0f be       	out	0x3f, r0	; 63
    3056:	cd bf       	out	0x3d, r28	; 61
    3058:	3c 01       	movw	r6, r24
    305a:	89 82       	std	Y+1, r8	; 0x01
    305c:	9a 82       	std	Y+2, r9	; 0x02
    305e:	ab 82       	std	Y+3, r10	; 0x03
    3060:	bc 82       	std	Y+4, r11	; 0x04
    3062:	cd 82       	std	Y+5, r12	; 0x05
    3064:	de 82       	std	Y+6, r13	; 0x06
    3066:	ef 82       	std	Y+7, r14	; 0x07
    3068:	f8 86       	std	Y+8, r15	; 0x08
    306a:	09 87       	std	Y+9, r16	; 0x09
    306c:	1a 87       	std	Y+10, r17	; 0x0a
    306e:	2b 87       	std	Y+11, r18	; 0x0b
    3070:	3c 87       	std	Y+12, r19	; 0x0c
    3072:	4d 87       	std	Y+13, r20	; 0x0d
    3074:	5e 87       	std	Y+14, r21	; 0x0e
    3076:	6f 87       	std	Y+15, r22	; 0x0f
    3078:	78 8b       	std	Y+16, r23	; 0x10
  if (size < MAX_SIZE) {
    307a:	25 e0       	ldi	r18, 0x05	; 5
    307c:	3a e0       	ldi	r19, 0x0A	; 10
    307e:	62 0e       	add	r6, r18
    3080:	73 1e       	adc	r7, r19
    3082:	f3 01       	movw	r30, r6
    3084:	90 81       	ld	r25, Z
    3086:	2b ef       	ldi	r18, 0xFB	; 251
    3088:	35 ef       	ldi	r19, 0xF5	; 245
    308a:	62 0e       	add	r6, r18
    308c:	73 1e       	adc	r7, r19
    308e:	97 ff       	sbrs	r25, 7
    3090:	02 c0       	rjmp	.+4      	; 0x3096 <_ZN6Events3addE7MOVDATAi+0x6a>
    3092:	80 e0       	ldi	r24, 0x00	; 0
    3094:	a0 c0       	rjmp	.+320    	; 0x31d6 <_ZN6Events3addE7MOVDATAi+0x1aa>
void delayMicroseconds (unsigned int us);

extern volatile byte timer0_int_flag;                // permite registrar y desregistrar tareas en la interrupción del timer0

void inline enable_ovf2() {TIMSK2 |= _BV(TOIE2);}                 // habilita el Overflow Interrupt (timer2)
void inline disable_ovf2() {TIMSK2 &= ~_BV(TOIE2);}               // deshabilita el Overflow Interrupt (timer2)
    3096:	80 91 70 00 	lds	r24, 0x0070
    309a:	8e 7f       	andi	r24, 0xFE	; 254
    309c:	80 93 70 00 	sts	0x0070, r24
  buffer [index2] = buffer [index1];
  buffer [index1] = temp;
}

byte Events::get_index (byte position) {               // devuelve el índice absoluto en el deque
  return (head + position) % MAX_SIZE;
    30a0:	e4 e0       	ldi	r30, 0x04	; 4
    30a2:	fa e0       	ldi	r31, 0x0A	; 10
    30a4:	6e 0e       	add	r6, r30
    30a6:	7f 1e       	adc	r7, r31
    30a8:	f3 01       	movw	r30, r6
    30aa:	00 81       	ld	r16, Z
    30ac:	2c ef       	ldi	r18, 0xFC	; 252
    30ae:	35 ef       	ldi	r19, 0xF5	; 245
    30b0:	62 0e       	add	r6, r18
    30b2:	73 1e       	adc	r7, r19
    30b4:	09 0f       	add	r16, r25
    30b6:	0f 77       	andi	r16, 0x7F	; 127

bool Events::add (MOVDATA movdata, int rel_time) {     // add entry & sort deque
  if (size < MAX_SIZE) {
    disable_ovf2();
    byte index = get_index (size);
    buffer [index].timestamp = timer + rel_time;
    30b8:	20 2f       	mov	r18, r16
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	f3 01       	movw	r30, r6
    30be:	40 81       	ld	r20, Z
    30c0:	51 81       	ldd	r21, Z+1	; 0x01
    30c2:	62 81       	ldd	r22, Z+2	; 0x02
    30c4:	73 81       	ldd	r23, Z+3	; 0x03
    30c6:	f9 01       	movw	r30, r18
    30c8:	ee 0f       	add	r30, r30
    30ca:	ff 1f       	adc	r31, r31
    30cc:	ee 0f       	add	r30, r30
    30ce:	ff 1f       	adc	r31, r31
    30d0:	e2 0f       	add	r30, r18
    30d2:	f3 1f       	adc	r31, r19
    30d4:	31 96       	adiw	r30, 0x01	; 1
    30d6:	ee 0f       	add	r30, r30
    30d8:	ff 1f       	adc	r31, r31
    30da:	ee 0f       	add	r30, r30
    30dc:	ff 1f       	adc	r31, r31
    30de:	e6 0d       	add	r30, r6
    30e0:	f7 1d       	adc	r31, r7
    30e2:	89 a1       	ldd	r24, Y+33	; 0x21
    30e4:	9a a1       	ldd	r25, Y+34	; 0x22
    30e6:	aa 27       	eor	r26, r26
    30e8:	97 fd       	sbrc	r25, 7
    30ea:	a0 95       	com	r26
    30ec:	ba 2f       	mov	r27, r26
    30ee:	84 0f       	add	r24, r20
    30f0:	95 1f       	adc	r25, r21
    30f2:	a6 1f       	adc	r26, r22
    30f4:	b7 1f       	adc	r27, r23
    30f6:	80 83       	st	Z, r24
    30f8:	91 83       	std	Z+1, r25	; 0x01
    30fa:	a2 83       	std	Z+2, r26	; 0x02
    30fc:	b3 83       	std	Z+3, r27	; 0x03
    buffer [index].movdata = movdata;
    30fe:	84 e1       	ldi	r24, 0x14	; 20
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	28 9f       	mul	r18, r24
    3104:	f0 01       	movw	r30, r0
    3106:	29 9f       	mul	r18, r25
    3108:	f0 0d       	add	r31, r0
    310a:	38 9f       	mul	r19, r24
    310c:	f0 0d       	add	r31, r0
    310e:	11 24       	eor	r1, r1
    3110:	e6 0d       	add	r30, r6
    3112:	f7 1d       	adc	r31, r7
    3114:	38 96       	adiw	r30, 0x08	; 8
    3116:	de 01       	movw	r26, r28
    3118:	11 96       	adiw	r26, 0x01	; 1
    311a:	80 e1       	ldi	r24, 0x10	; 16
    311c:	0d 90       	ld	r0, X+
    311e:	01 92       	st	Z+, r0
    3120:	81 50       	subi	r24, 0x01	; 1
    3122:	e1 f7       	brne	.-8      	; 0x311c <_ZN6Events3addE7MOVDATAi+0xf0>
    // sort
    if (size > 0) {
    3124:	25 e0       	ldi	r18, 0x05	; 5
    3126:	3a e0       	ldi	r19, 0x0A	; 10
    3128:	62 0e       	add	r6, r18
    312a:	73 1e       	adc	r7, r19
    312c:	f3 01       	movw	r30, r6
    312e:	f0 80       	ld	r15, Z
    3130:	2b ef       	ldi	r18, 0xFB	; 251
    3132:	35 ef       	ldi	r19, 0xF5	; 245
    3134:	62 0e       	add	r6, r18
    3136:	73 1e       	adc	r7, r19
    3138:	ff 20       	and	r15, r15
    313a:	09 f4       	brne	.+2      	; 0x313e <_ZN6Events3addE7MOVDATAi+0x112>
    313c:	40 c0       	rjmp	.+128    	; 0x31be <_ZN6Events3addE7MOVDATAi+0x192>
  buffer [index2] = buffer [index1];
  buffer [index1] = temp;
}

byte Events::get_index (byte position) {               // devuelve el índice absoluto en el deque
  return (head + position) % MAX_SIZE;
    313e:	54 e0       	ldi	r21, 0x04	; 4
    3140:	c5 2e       	mov	r12, r21
    3142:	5a e0       	ldi	r21, 0x0A	; 10
    3144:	d5 2e       	mov	r13, r21
    3146:	c6 0c       	add	r12, r6
    3148:	d7 1c       	adc	r13, r7
    buffer [index].timestamp = timer + rel_time;
    buffer [index].movdata = movdata;
    // sort
    if (size > 0) {
      for (byte i=size; i>0; i--) {
        byte index1 = get_index (i-1);
    314a:	fa 94       	dec	r15
  buffer [index2] = buffer [index1];
  buffer [index1] = temp;
}

byte Events::get_index (byte position) {               // devuelve el índice absoluto en el deque
  return (head + position) % MAX_SIZE;
    314c:	f6 01       	movw	r30, r12
    314e:	10 81       	ld	r17, Z
    3150:	1f 0d       	add	r17, r15
    3152:	1f 77       	andi	r17, 0x7F	; 127
    buffer [index].movdata = movdata;
    // sort
    if (size > 0) {
      for (byte i=size; i>0; i--) {
        byte index1 = get_index (i-1);
        if (buffer[index].timestamp < buffer[index1].timestamp) {
    3154:	80 2f       	mov	r24, r16
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	dc 01       	movw	r26, r24
    315a:	aa 0f       	add	r26, r26
    315c:	bb 1f       	adc	r27, r27
    315e:	aa 0f       	add	r26, r26
    3160:	bb 1f       	adc	r27, r27
    3162:	a8 0f       	add	r26, r24
    3164:	b9 1f       	adc	r27, r25
    3166:	11 96       	adiw	r26, 0x01	; 1
    3168:	aa 0f       	add	r26, r26
    316a:	bb 1f       	adc	r27, r27
    316c:	aa 0f       	add	r26, r26
    316e:	bb 1f       	adc	r27, r27
    3170:	a6 0d       	add	r26, r6
    3172:	b7 1d       	adc	r27, r7
    3174:	81 2f       	mov	r24, r17
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	fc 01       	movw	r30, r24
    317a:	ee 0f       	add	r30, r30
    317c:	ff 1f       	adc	r31, r31
    317e:	ee 0f       	add	r30, r30
    3180:	ff 1f       	adc	r31, r31
    3182:	e8 0f       	add	r30, r24
    3184:	f9 1f       	adc	r31, r25
    3186:	31 96       	adiw	r30, 0x01	; 1
    3188:	ee 0f       	add	r30, r30
    318a:	ff 1f       	adc	r31, r31
    318c:	ee 0f       	add	r30, r30
    318e:	ff 1f       	adc	r31, r31
    3190:	e6 0d       	add	r30, r6
    3192:	f7 1d       	adc	r31, r7
    3194:	2d 91       	ld	r18, X+
    3196:	3d 91       	ld	r19, X+
    3198:	4d 91       	ld	r20, X+
    319a:	5c 91       	ld	r21, X
    319c:	80 81       	ld	r24, Z
    319e:	91 81       	ldd	r25, Z+1	; 0x01
    31a0:	a2 81       	ldd	r26, Z+2	; 0x02
    31a2:	b3 81       	ldd	r27, Z+3	; 0x03
    31a4:	28 17       	cp	r18, r24
    31a6:	39 07       	cpc	r19, r25
    31a8:	4a 07       	cpc	r20, r26
    31aa:	5b 07       	cpc	r21, r27
    31ac:	40 f4       	brcc	.+16     	; 0x31be <_ZN6Events3addE7MOVDATAi+0x192>
          swap (index, index1);
    31ae:	c3 01       	movw	r24, r6
    31b0:	60 2f       	mov	r22, r16
    31b2:	41 2f       	mov	r20, r17
    31b4:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <_ZN6Events4swapEhh>
    31b8:	01 2f       	mov	r16, r17
    byte index = get_index (size);
    buffer [index].timestamp = timer + rel_time;
    buffer [index].movdata = movdata;
    // sort
    if (size > 0) {
      for (byte i=size; i>0; i--) {
    31ba:	ff 20       	and	r15, r15
    31bc:	31 f6       	brne	.-116    	; 0x314a <_ZN6Events3addE7MOVDATAi+0x11e>
          swap (index, index1);
          index = index1;
        } else {break;}    
      } 
    }   
    size ++;
    31be:	f3 01       	movw	r30, r6
    31c0:	eb 5f       	subi	r30, 0xFB	; 251
    31c2:	f5 4f       	sbci	r31, 0xF5	; 245
    31c4:	80 81       	ld	r24, Z
    31c6:	8f 5f       	subi	r24, 0xFF	; 255
    31c8:	80 83       	st	Z, r24
void delay (unsigned long);
void delayMicroseconds (unsigned int us);

extern volatile byte timer0_int_flag;                // permite registrar y desregistrar tareas en la interrupción del timer0

void inline enable_ovf2() {TIMSK2 |= _BV(TOIE2);}                 // habilita el Overflow Interrupt (timer2)
    31ca:	80 91 70 00 	lds	r24, 0x0070
    31ce:	81 60       	ori	r24, 0x01	; 1
    31d0:	80 93 70 00 	sts	0x0070, r24
    31d4:	81 e0       	ldi	r24, 0x01	; 1
    enable_ovf2();
    return true;  
  } else {
    return false;
  }
}  
    31d6:	60 96       	adiw	r28, 0x10	; 16
    31d8:	0f b6       	in	r0, 0x3f	; 63
    31da:	f8 94       	cli
    31dc:	de bf       	out	0x3e, r29	; 62
    31de:	0f be       	out	0x3f, r0	; 63
    31e0:	cd bf       	out	0x3d, r28	; 61
    31e2:	cf 91       	pop	r28
    31e4:	df 91       	pop	r29
    31e6:	1f 91       	pop	r17
    31e8:	0f 91       	pop	r16
    31ea:	ff 90       	pop	r15
    31ec:	ef 90       	pop	r14
    31ee:	df 90       	pop	r13
    31f0:	cf 90       	pop	r12
    31f2:	bf 90       	pop	r11
    31f4:	af 90       	pop	r10
    31f6:	9f 90       	pop	r9
    31f8:	8f 90       	pop	r8
    31fa:	7f 90       	pop	r7
    31fc:	6f 90       	pop	r6
    31fe:	08 95       	ret

00003200 <_ZN6Events12search_indexEmh>:

byte Events::get_index (byte position) {               // devuelve el índice absoluto en el deque
  return (head + position) % MAX_SIZE;
}
 
int Events::search_index (unsigned long timestamp, byte pata) {      // usada por search 
    3200:	8f 92       	push	r8
    3202:	9f 92       	push	r9
    3204:	af 92       	push	r10
    3206:	bf 92       	push	r11
    3208:	cf 92       	push	r12
    320a:	df 92       	push	r13
    320c:	ef 92       	push	r14
    320e:	ff 92       	push	r15
    3210:	0f 93       	push	r16
    3212:	1f 93       	push	r17
    3214:	cf 93       	push	r28
    3216:	df 93       	push	r29
    3218:	ec 01       	movw	r28, r24
    321a:	6a 01       	movw	r12, r20
    321c:	7b 01       	movw	r14, r22
  int match = -1; 
  for (byte i=0; i<size; i++) {
    321e:	cb 5f       	subi	r28, 0xFB	; 251
    3220:	d5 4f       	sbci	r29, 0xF5	; 245
    3222:	08 81       	ld	r16, Y
    3224:	c5 50       	subi	r28, 0x05	; 5
    3226:	da 40       	sbci	r29, 0x0A	; 10
    3228:	61 e0       	ldi	r22, 0x01	; 1
    322a:	70 e0       	ldi	r23, 0x00	; 0
    322c:	02 c0       	rjmp	.+4      	; 0x3232 <_ZN6Events12search_indexEmh+0x32>
    322e:	66 0f       	add	r22, r22
    3230:	77 1f       	adc	r23, r23
    3232:	2a 95       	dec	r18
    3234:	e2 f7       	brpl	.-8      	; 0x322e <_ZN6Events12search_indexEmh+0x2e>
    3236:	4f ef       	ldi	r20, 0xFF	; 255
    3238:	5f ef       	ldi	r21, 0xFF	; 255
    323a:	10 e0       	ldi	r17, 0x00	; 0
    byte index = get_index (i);
    if (buffer[index].timestamp > timestamp) {break;}
    323c:	34 e0       	ldi	r19, 0x04	; 4
    323e:	a3 2e       	mov	r10, r19
    3240:	3a e0       	ldi	r19, 0x0A	; 10
    3242:	b3 2e       	mov	r11, r19
    3244:	ac 0e       	add	r10, r28
    3246:	bd 1e       	adc	r11, r29
    if ((buffer[index].movdata.patas>>pata)&1) {match = index;}
    3248:	24 e1       	ldi	r18, 0x14	; 20
    324a:	82 2e       	mov	r8, r18
    324c:	91 2c       	mov	r9, r1
    324e:	2f c0       	rjmp	.+94     	; 0x32ae <_ZN6Events12search_indexEmh+0xae>
 
int Events::search_index (unsigned long timestamp, byte pata) {      // usada por search 
  int match = -1; 
  for (byte i=0; i<size; i++) {
    byte index = get_index (i);
    if (buffer[index].timestamp > timestamp) {break;}
    3250:	f5 01       	movw	r30, r10
    3252:	80 81       	ld	r24, Z
    3254:	81 0f       	add	r24, r17
    3256:	8f 77       	andi	r24, 0x7F	; 127
    3258:	28 2f       	mov	r18, r24
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	f9 01       	movw	r30, r18
    325e:	ee 0f       	add	r30, r30
    3260:	ff 1f       	adc	r31, r31
    3262:	ee 0f       	add	r30, r30
    3264:	ff 1f       	adc	r31, r31
    3266:	e2 0f       	add	r30, r18
    3268:	f3 1f       	adc	r31, r19
    326a:	31 96       	adiw	r30, 0x01	; 1
    326c:	ee 0f       	add	r30, r30
    326e:	ff 1f       	adc	r31, r31
    3270:	ee 0f       	add	r30, r30
    3272:	ff 1f       	adc	r31, r31
    3274:	ec 0f       	add	r30, r28
    3276:	fd 1f       	adc	r31, r29
    3278:	80 81       	ld	r24, Z
    327a:	91 81       	ldd	r25, Z+1	; 0x01
    327c:	a2 81       	ldd	r26, Z+2	; 0x02
    327e:	b3 81       	ldd	r27, Z+3	; 0x03
    3280:	c8 16       	cp	r12, r24
    3282:	d9 06       	cpc	r13, r25
    3284:	ea 06       	cpc	r14, r26
    3286:	fb 06       	cpc	r15, r27
    3288:	a0 f0       	brcs	.+40     	; 0x32b2 <_ZN6Events12search_indexEmh+0xb2>
    if ((buffer[index].movdata.patas>>pata)&1) {match = index;}
    328a:	28 9d       	mul	r18, r8
    328c:	f0 01       	movw	r30, r0
    328e:	29 9d       	mul	r18, r9
    3290:	f0 0d       	add	r31, r0
    3292:	38 9d       	mul	r19, r8
    3294:	f0 0d       	add	r31, r0
    3296:	11 24       	eor	r1, r1
    3298:	ec 0f       	add	r30, r28
    329a:	fd 1f       	adc	r31, r29
    329c:	80 85       	ldd	r24, Z+8	; 0x08
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	86 23       	and	r24, r22
    32a2:	97 23       	and	r25, r23
    32a4:	89 2b       	or	r24, r25
    32a6:	09 f4       	brne	.+2      	; 0x32aa <_ZN6Events12search_indexEmh+0xaa>
    32a8:	9a 01       	movw	r18, r20
  return (head + position) % MAX_SIZE;
}
 
int Events::search_index (unsigned long timestamp, byte pata) {      // usada por search 
  int match = -1; 
  for (byte i=0; i<size; i++) {
    32aa:	1f 5f       	subi	r17, 0xFF	; 255
    32ac:	a9 01       	movw	r20, r18
    32ae:	10 17       	cp	r17, r16
    32b0:	78 f2       	brcs	.-98     	; 0x3250 <_ZN6Events12search_indexEmh+0x50>
    byte index = get_index (i);
    if (buffer[index].timestamp > timestamp) {break;}
    if ((buffer[index].movdata.patas>>pata)&1) {match = index;}
  }
  return match;
    32b2:	ca 01       	movw	r24, r20
    32b4:	df 91       	pop	r29
    32b6:	cf 91       	pop	r28
    32b8:	1f 91       	pop	r17
    32ba:	0f 91       	pop	r16
    32bc:	ff 90       	pop	r15
    32be:	ef 90       	pop	r14
    32c0:	df 90       	pop	r13
    32c2:	cf 90       	pop	r12
    32c4:	bf 90       	pop	r11
    32c6:	af 90       	pop	r10
    32c8:	9f 90       	pop	r9
    32ca:	8f 90       	pop	r8
    32cc:	08 95       	ret

000032ce <_GLOBAL__I_eventos>:
#include "wiring.h"

Events eventos;          // preinstanciado

Events::Events () {
	head = 0;
    32ce:	10 92 d4 10 	sts	0x10D4, r1
	size = 0;
    32d2:	10 92 d5 10 	sts	0x10D5, r1
	timer = 0;
    32d6:	10 92 d0 06 	sts	0x06D0, r1
    32da:	10 92 d1 06 	sts	0x06D1, r1
    32de:	10 92 d2 06 	sts	0x06D2, r1
    32e2:	10 92 d3 06 	sts	0x06D3, r1
    byte index = get_index (i);
    if (buffer[index].timestamp > timestamp) {break;}
    if ((buffer[index].movdata.patas>>pata)&1) {match = index;}
  }
  return match;
    32e6:	08 95       	ret

000032e8 <_ZN6Events6searchEhi>:
  head = get_index (1);
  size --; 
  return buffer [index].movdata;
}

COORD3D Events::search (byte pata, int rel_time) {       // estima la posición futura una pata, en base a los eventos agendados
    32e8:	3f 92       	push	r3
    32ea:	4f 92       	push	r4
    32ec:	5f 92       	push	r5
    32ee:	6f 92       	push	r6
    32f0:	7f 92       	push	r7
    32f2:	8f 92       	push	r8
    32f4:	9f 92       	push	r9
    32f6:	af 92       	push	r10
    32f8:	bf 92       	push	r11
    32fa:	cf 92       	push	r12
    32fc:	df 92       	push	r13
    32fe:	ef 92       	push	r14
    3300:	ff 92       	push	r15
    3302:	0f 93       	push	r16
    3304:	1f 93       	push	r17
    3306:	cf 93       	push	r28
    3308:	df 93       	push	r29
    330a:	78 2e       	mov	r7, r24
    330c:	69 2e       	mov	r6, r25
    330e:	4b 01       	movw	r8, r22
    3310:	34 2e       	mov	r3, r20
    3312:	e9 01       	movw	r28, r18
void inline disable_ovf2() {TIMSK2 &= ~_BV(TOIE2);}               // deshabilita el Overflow Interrupt (timer2)
    3314:	80 91 70 00 	lds	r24, 0x0070
    3318:	8e 7f       	andi	r24, 0xFE	; 254
    331a:	80 93 70 00 	sts	0x0070, r24
  disable_ovf2();
  COORD3D result = {0, 0, 0};
    331e:	27 2d       	mov	r18, r7
    3320:	39 2f       	mov	r19, r25
    3322:	c9 01       	movw	r24, r18
    3324:	dc 01       	movw	r26, r24
    3326:	ea e0       	ldi	r30, 0x0A	; 10
    3328:	f5 e0       	ldi	r31, 0x05	; 5
    332a:	8c e0       	ldi	r24, 0x0C	; 12
    332c:	01 90       	ld	r0, Z+
    332e:	0d 92       	st	X+, r0
    3330:	81 50       	subi	r24, 0x01	; 1
    3332:	e1 f7       	brne	.-8      	; 0x332c <_ZN6Events6searchEhi+0x44>
  unsigned long timestamp = timer + rel_time; 
    3334:	f4 01       	movw	r30, r8
    3336:	80 81       	ld	r24, Z
    3338:	91 81       	ldd	r25, Z+1	; 0x01
    333a:	a2 81       	ldd	r26, Z+2	; 0x02
    333c:	b3 81       	ldd	r27, Z+3	; 0x03
    333e:	ae 01       	movw	r20, r28
    3340:	66 27       	eor	r22, r22
    3342:	57 fd       	sbrc	r21, 7
    3344:	60 95       	com	r22
    3346:	76 2f       	mov	r23, r22
    3348:	48 0f       	add	r20, r24
    334a:	59 1f       	adc	r21, r25
    334c:	6a 1f       	adc	r22, r26
    334e:	7b 1f       	adc	r23, r27
  int match;
  do {
    match = search_index (timestamp, pata);
    if (match != -1) {
      sumasigna (&result, buffer[match].movdata.coord);
    3350:	e4 e1       	ldi	r30, 0x14	; 20
    3352:	4e 2e       	mov	r4, r30
    3354:	51 2c       	mov	r5, r1
  disable_ovf2();
  COORD3D result = {0, 0, 0};
  unsigned long timestamp = timer + rel_time; 
  int match;
  do {
    match = search_index (timestamp, pata);
    3356:	c4 01       	movw	r24, r8
    3358:	23 2d       	mov	r18, r3
    335a:	0e 94 00 19 	call	0x3200	; 0x3200 <_ZN6Events12search_indexEmh>
    335e:	ec 01       	movw	r28, r24
    if (match != -1) {
    3360:	ff ef       	ldi	r31, 0xFF	; 255
    3362:	8f 3f       	cpi	r24, 0xFF	; 255
    3364:	9f 07       	cpc	r25, r31
    3366:	c1 f1       	breq	.+112    	; 0x33d8 <_ZN6Events6searchEhi+0xf0>
      sumasigna (&result, buffer[match].movdata.coord);
    3368:	84 9d       	mul	r24, r4
    336a:	50 01       	movw	r10, r0
    336c:	85 9d       	mul	r24, r5
    336e:	b0 0c       	add	r11, r0
    3370:	94 9d       	mul	r25, r4
    3372:	b0 0c       	add	r11, r0
    3374:	11 24       	eor	r1, r1
    3376:	a8 0c       	add	r10, r8
    3378:	b9 1c       	adc	r11, r9
    337a:	f5 01       	movw	r30, r10
    337c:	39 96       	adiw	r30, 0x09	; 9
    337e:	87 2d       	mov	r24, r7
    3380:	96 2d       	mov	r25, r6
    3382:	d5 01       	movw	r26, r10
    3384:	19 96       	adiw	r26, 0x09	; 9
    3386:	cc 90       	ld	r12, X
    3388:	d1 80       	ldd	r13, Z+1	; 0x01
    338a:	e2 80       	ldd	r14, Z+2	; 0x02
    338c:	f3 80       	ldd	r15, Z+3	; 0x03
    338e:	04 81       	ldd	r16, Z+4	; 0x04
    3390:	15 81       	ldd	r17, Z+5	; 0x05
    3392:	26 81       	ldd	r18, Z+6	; 0x06
    3394:	37 81       	ldd	r19, Z+7	; 0x07
    3396:	40 85       	ldd	r20, Z+8	; 0x08
    3398:	51 85       	ldd	r21, Z+9	; 0x09
    339a:	62 85       	ldd	r22, Z+10	; 0x0a
    339c:	73 85       	ldd	r23, Z+11	; 0x0b
    339e:	0e 94 72 6d 	call	0xdae4	; 0xdae4 <_Z9sumasignaP7COORD3DS_>
      timestamp = buffer[match].timestamp-1;
    33a2:	fe 01       	movw	r30, r28
    33a4:	ee 0f       	add	r30, r30
    33a6:	ff 1f       	adc	r31, r31
    33a8:	ee 0f       	add	r30, r30
    33aa:	ff 1f       	adc	r31, r31
    33ac:	ec 0f       	add	r30, r28
    33ae:	fd 1f       	adc	r31, r29
    33b0:	31 96       	adiw	r30, 0x01	; 1
    33b2:	ee 0f       	add	r30, r30
    33b4:	ff 1f       	adc	r31, r31
    33b6:	ee 0f       	add	r30, r30
    33b8:	ff 1f       	adc	r31, r31
    33ba:	e8 0d       	add	r30, r8
    33bc:	f9 1d       	adc	r31, r9
    33be:	40 81       	ld	r20, Z
    33c0:	51 81       	ldd	r21, Z+1	; 0x01
    33c2:	62 81       	ldd	r22, Z+2	; 0x02
    33c4:	73 81       	ldd	r23, Z+3	; 0x03
COORD3D Events::search (byte pata, int rel_time) {       // estima la posición futura una pata, en base a los eventos agendados
  disable_ovf2();
  COORD3D result = {0, 0, 0};
  unsigned long timestamp = timer + rel_time; 
  int match;
  do {
    33c6:	f5 01       	movw	r30, r10
    33c8:	87 89       	ldd	r24, Z+23	; 0x17
    33ca:	88 23       	and	r24, r24
    33cc:	11 f5       	brne	.+68     	; 0x3412 <_ZN6Events6searchEhi+0x12a>
    match = search_index (timestamp, pata);
    if (match != -1) {
      sumasigna (&result, buffer[match].movdata.coord);
      timestamp = buffer[match].timestamp-1;
    33ce:	41 50       	subi	r20, 0x01	; 1
    33d0:	50 40       	sbci	r21, 0x00	; 0
    33d2:	60 40       	sbci	r22, 0x00	; 0
    33d4:	70 40       	sbci	r23, 0x00	; 0
    33d6:	bf cf       	rjmp	.-130    	; 0x3356 <_ZN6Events6searchEhi+0x6e>
    } else {break;}
  } while (!buffer[match].movdata.absolute);
  if (match == -1) {
    sumasigna (&result, pos_des[pata]);
    33d8:	83 2d       	mov	r24, r3
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	fc 01       	movw	r30, r24
    33de:	ee 0f       	add	r30, r30
    33e0:	ff 1f       	adc	r31, r31
    33e2:	e8 0f       	add	r30, r24
    33e4:	f9 1f       	adc	r31, r25
    33e6:	ee 0f       	add	r30, r30
    33e8:	ff 1f       	adc	r31, r31
    33ea:	ee 0f       	add	r30, r30
    33ec:	ff 1f       	adc	r31, r31
    33ee:	e0 5b       	subi	r30, 0xB0	; 176
    33f0:	fc 4e       	sbci	r31, 0xEC	; 236
    33f2:	87 2d       	mov	r24, r7
    33f4:	96 2d       	mov	r25, r6
    33f6:	c0 80       	ld	r12, Z
    33f8:	d1 80       	ldd	r13, Z+1	; 0x01
    33fa:	e2 80       	ldd	r14, Z+2	; 0x02
    33fc:	f3 80       	ldd	r15, Z+3	; 0x03
    33fe:	04 81       	ldd	r16, Z+4	; 0x04
    3400:	15 81       	ldd	r17, Z+5	; 0x05
    3402:	26 81       	ldd	r18, Z+6	; 0x06
    3404:	37 81       	ldd	r19, Z+7	; 0x07
    3406:	40 85       	ldd	r20, Z+8	; 0x08
    3408:	51 85       	ldd	r21, Z+9	; 0x09
    340a:	62 85       	ldd	r22, Z+10	; 0x0a
    340c:	73 85       	ldd	r23, Z+11	; 0x0b
    340e:	0e 94 72 6d 	call	0xdae4	; 0xdae4 <_Z9sumasignaP7COORD3DS_>
void delay (unsigned long);
void delayMicroseconds (unsigned int us);

extern volatile byte timer0_int_flag;                // permite registrar y desregistrar tareas en la interrupción del timer0

void inline enable_ovf2() {TIMSK2 |= _BV(TOIE2);}                 // habilita el Overflow Interrupt (timer2)
    3412:	80 91 70 00 	lds	r24, 0x0070
    3416:	81 60       	ori	r24, 0x01	; 1
    3418:	80 93 70 00 	sts	0x0070, r24
  }
  enable_ovf2();
  return result; 
}
    341c:	87 2d       	mov	r24, r7
    341e:	96 2d       	mov	r25, r6
    3420:	df 91       	pop	r29
    3422:	cf 91       	pop	r28
    3424:	1f 91       	pop	r17
    3426:	0f 91       	pop	r16
    3428:	ff 90       	pop	r15
    342a:	ef 90       	pop	r14
    342c:	df 90       	pop	r13
    342e:	cf 90       	pop	r12
    3430:	bf 90       	pop	r11
    3432:	af 90       	pop	r10
    3434:	9f 90       	pop	r9
    3436:	8f 90       	pop	r8
    3438:	7f 90       	pop	r7
    343a:	6f 90       	pop	r6
    343c:	5f 90       	pop	r5
    343e:	4f 90       	pop	r4
    3440:	3f 90       	pop	r3
    3442:	08 95       	ret

00003444 <_ZN6Events7processEv>:
	head = 0;
	size = 0;
	timer = 0;
}

byte Events::process () {                               // esta rutina es llamada desde la ISR
    3444:	8f 92       	push	r8
    3446:	9f 92       	push	r9
    3448:	af 92       	push	r10
    344a:	bf 92       	push	r11
    344c:	cf 92       	push	r12
    344e:	df 92       	push	r13
    3450:	ff 92       	push	r15
    3452:	0f 93       	push	r16
    3454:	1f 93       	push	r17
    3456:	df 93       	push	r29
    3458:	cf 93       	push	r28
    345a:	cd b7       	in	r28, 0x3d	; 61
    345c:	de b7       	in	r29, 0x3e	; 62
    345e:	60 97       	sbiw	r28, 0x10	; 16
    3460:	0f b6       	in	r0, 0x3f	; 63
    3462:	f8 94       	cli
    3464:	de bf       	out	0x3e, r29	; 62
    3466:	0f be       	out	0x3f, r0	; 63
    3468:	cd bf       	out	0x3d, r28	; 61
    346a:	8c 01       	movw	r16, r24
    346c:	ff 24       	eor	r15, r15
    return false;
  }
}  

unsigned long Events::get_time () {                           // get current timestamp 
  if (size > 0) {
    346e:	95 e0       	ldi	r25, 0x05	; 5
    3470:	a9 2e       	mov	r10, r25
    3472:	9a e0       	ldi	r25, 0x0A	; 10
    3474:	b9 2e       	mov	r11, r25
    3476:	a0 0e       	add	r10, r16
    3478:	b1 1e       	adc	r11, r17
    return buffer [head].timestamp;
    347a:	84 e0       	ldi	r24, 0x04	; 4
    347c:	c8 2e       	mov	r12, r24
    347e:	8a e0       	ldi	r24, 0x0A	; 10
    3480:	d8 2e       	mov	r13, r24
    3482:	c0 0e       	add	r12, r16
    3484:	d1 1e       	adc	r13, r17
}

byte Events::process () {                               // esta rutina es llamada desde la ISR
  byte count = 0;
  while (get_time() <= timer) {
    MOVDATA m = get_data ();                           // cuando hace el get_data(), automáticamente se borra el evento
    3486:	4e 01       	movw	r8, r28
    3488:	08 94       	sec
    348a:	81 1c       	adc	r8, r1
    348c:	91 1c       	adc	r9, r1
    348e:	08 c0       	rjmp	.+16     	; 0x34a0 <_ZN6Events7processEv+0x5c>
    3490:	c4 01       	movw	r24, r8
    3492:	b8 01       	movw	r22, r16
    3494:	0e 94 92 17 	call	0x2f24	; 0x2f24 <_ZN6Events8get_dataEv>
    set_coord (m);                                    // se podría meter el get_data adentro de la propia llamada a set_coord           
    3498:	c4 01       	movw	r24, r8
    349a:	0e 94 c1 4b 	call	0x9782	; 0x9782 <_Z9set_coordR7MOVDATA>
    count ++;
    349e:	f3 94       	inc	r15
    return false;
  }
}  

unsigned long Events::get_time () {                           // get current timestamp 
  if (size > 0) {
    34a0:	f5 01       	movw	r30, r10
    34a2:	80 81       	ld	r24, Z
    34a4:	88 23       	and	r24, r24
    34a6:	29 f4       	brne	.+10     	; 0x34b2 <_ZN6Events7processEv+0x6e>
    34a8:	2f ef       	ldi	r18, 0xFF	; 255
    34aa:	3f ef       	ldi	r19, 0xFF	; 255
    34ac:	4f ef       	ldi	r20, 0xFF	; 255
    34ae:	5f ef       	ldi	r21, 0xFF	; 255
    34b0:	15 c0       	rjmp	.+42     	; 0x34dc <_ZN6Events7processEv+0x98>
    return buffer [head].timestamp;
    34b2:	f6 01       	movw	r30, r12
    34b4:	80 81       	ld	r24, Z
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	fc 01       	movw	r30, r24
    34ba:	ee 0f       	add	r30, r30
    34bc:	ff 1f       	adc	r31, r31
    34be:	ee 0f       	add	r30, r30
    34c0:	ff 1f       	adc	r31, r31
    34c2:	e8 0f       	add	r30, r24
    34c4:	f9 1f       	adc	r31, r25
    34c6:	31 96       	adiw	r30, 0x01	; 1
    34c8:	ee 0f       	add	r30, r30
    34ca:	ff 1f       	adc	r31, r31
    34cc:	ee 0f       	add	r30, r30
    34ce:	ff 1f       	adc	r31, r31
    34d0:	e0 0f       	add	r30, r16
    34d2:	f1 1f       	adc	r31, r17
    34d4:	20 81       	ld	r18, Z
    34d6:	31 81       	ldd	r19, Z+1	; 0x01
    34d8:	42 81       	ldd	r20, Z+2	; 0x02
    34da:	53 81       	ldd	r21, Z+3	; 0x03
	timer = 0;
}

byte Events::process () {                               // esta rutina es llamada desde la ISR
  byte count = 0;
  while (get_time() <= timer) {
    34dc:	f8 01       	movw	r30, r16
    34de:	80 81       	ld	r24, Z
    34e0:	91 81       	ldd	r25, Z+1	; 0x01
    34e2:	a2 81       	ldd	r26, Z+2	; 0x02
    34e4:	b3 81       	ldd	r27, Z+3	; 0x03
    34e6:	82 17       	cp	r24, r18
    34e8:	93 07       	cpc	r25, r19
    34ea:	a4 07       	cpc	r26, r20
    34ec:	b5 07       	cpc	r27, r21
    34ee:	80 f6       	brcc	.-96     	; 0x3490 <_ZN6Events7processEv+0x4c>
    MOVDATA m = get_data ();                           // cuando hace el get_data(), automáticamente se borra el evento
    set_coord (m);                                    // se podría meter el get_data adentro de la propia llamada a set_coord           
    count ++;
  }
  if (count > 0) {count = motor_update();}
    34f0:	ff 20       	and	r15, r15
    34f2:	19 f0       	breq	.+6      	; 0x34fa <_ZN6Events7processEv+0xb6>
    34f4:	0e 94 42 47 	call	0x8e84	; 0x8e84 <_Z12motor_updatev>
    34f8:	f8 2e       	mov	r15, r24
  timer ++;  
    34fa:	f8 01       	movw	r30, r16
    34fc:	80 81       	ld	r24, Z
    34fe:	91 81       	ldd	r25, Z+1	; 0x01
    3500:	a2 81       	ldd	r26, Z+2	; 0x02
    3502:	b3 81       	ldd	r27, Z+3	; 0x03
    3504:	01 96       	adiw	r24, 0x01	; 1
    3506:	a1 1d       	adc	r26, r1
    3508:	b1 1d       	adc	r27, r1
    350a:	80 83       	st	Z, r24
    350c:	91 83       	std	Z+1, r25	; 0x01
    350e:	a2 83       	std	Z+2, r26	; 0x02
    3510:	b3 83       	std	Z+3, r27	; 0x03
  return count;                        // retorna la cantidad de motores updateados
}
    3512:	8f 2d       	mov	r24, r15
    3514:	60 96       	adiw	r28, 0x10	; 16
    3516:	0f b6       	in	r0, 0x3f	; 63
    3518:	f8 94       	cli
    351a:	de bf       	out	0x3e, r29	; 62
    351c:	0f be       	out	0x3f, r0	; 63
    351e:	cd bf       	out	0x3d, r28	; 61
    3520:	cf 91       	pop	r28
    3522:	df 91       	pop	r29
    3524:	1f 91       	pop	r17
    3526:	0f 91       	pop	r16
    3528:	ff 90       	pop	r15
    352a:	df 90       	pop	r13
    352c:	cf 90       	pop	r12
    352e:	bf 90       	pop	r11
    3530:	af 90       	pop	r10
    3532:	9f 90       	pop	r9
    3534:	8f 90       	pop	r8
    3536:	08 95       	ret

00003538 <_Z9setTimersv>:
void setTimers () {               // setea el timer2 del Atmega1280 para generar una interrupción periódica
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
	sbi(TCCR0A, WGM01);
    3538:	84 b5       	in	r24, 0x24	; 36
    353a:	82 60       	ori	r24, 0x02	; 2
    353c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    353e:	84 b5       	in	r24, 0x24	; 36
    3540:	81 60       	ori	r24, 0x01	; 1
    3542:	84 bd       	out	0x24, r24	; 36
 
	// set timer 0 prescale factor to 64
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3544:	85 b5       	in	r24, 0x25	; 37
    3546:	82 60       	ori	r24, 0x02	; 2
    3548:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    354a:	85 b5       	in	r24, 0x25	; 37
    354c:	81 60       	ori	r24, 0x01	; 1
    354e:	85 bd       	out	0x25, r24	; 37

	// timers 1 and 2 are used for phase-correct hardware pwm
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle
	TCCR1B = 0;
    3550:	e1 e8       	ldi	r30, 0x81	; 129
    3552:	f0 e0       	ldi	r31, 0x00	; 0
    3554:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3556:	80 81       	ld	r24, Z
    3558:	82 60       	ori	r24, 0x02	; 2
    355a:	80 83       	st	Z, r24
	sbi(TCCR1B, CS10);
    355c:	80 81       	ld	r24, Z
    355e:	81 60       	ori	r24, 0x01	; 1
    3560:	80 83       	st	Z, r24
	
	// put timer 1 in 8-bit phase correct pwm mode
	sbi(TCCR1A, WGM10);
    3562:	e0 e8       	ldi	r30, 0x80	; 128
    3564:	f0 e0       	ldi	r31, 0x00	; 0
    3566:	80 81       	ld	r24, Z
    3568:	81 60       	ori	r24, 0x01	; 1
    356a:	80 83       	st	Z, r24

	// timer 2
	/* Configure timer2 in normal mode (pure counting, no PWM etc.) */  
  TCCR2A &= ~((1<<WGM21) | (1<<WGM20));   
    356c:	e0 eb       	ldi	r30, 0xB0	; 176
    356e:	f0 e0       	ldi	r31, 0x00	; 0
    3570:	80 81       	ld	r24, Z
    3572:	8c 7f       	andi	r24, 0xFC	; 252
    3574:	80 83       	st	Z, r24
  TCCR2B &= ~(1<<WGM22);   
    3576:	a1 eb       	ldi	r26, 0xB1	; 177
    3578:	b0 e0       	ldi	r27, 0x00	; 0
    357a:	8c 91       	ld	r24, X
    357c:	87 7f       	andi	r24, 0xF7	; 247
    357e:	8c 93       	st	X, r24
  
  /* Select clock source: internal I/O clock */  
  ASSR &= ~(1<<AS2);   
    3580:	e6 eb       	ldi	r30, 0xB6	; 182
    3582:	f0 e0       	ldi	r31, 0x00	; 0
    3584:	80 81       	ld	r24, Z
    3586:	8f 7d       	andi	r24, 0xDF	; 223
    3588:	80 83       	st	Z, r24
  
  /* Disable Compare Match A interrupt enable (only want overflow) */  
  TIMSK2 &= ~(1<<OCIE2A);   
    358a:	20 e7       	ldi	r18, 0x70	; 112
    358c:	30 e0       	ldi	r19, 0x00	; 0
    358e:	f9 01       	movw	r30, r18
    3590:	80 81       	ld	r24, Z
    3592:	8d 7f       	andi	r24, 0xFD	; 253
    3594:	80 83       	st	Z, r24
  
  /* Now configure the prescaler to CPU clock divided by 1024, lo cual nos da un ciclo de 16ms */  
  TCCR2B |= _BV(CS22) | _BV(CS21) | _BV(CS20);      
    3596:	8c 91       	ld	r24, X
    3598:	87 60       	ori	r24, 0x07	; 7
    359a:	8c 93       	st	X, r24
  
	// timer 3
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    359c:	e1 e9       	ldi	r30, 0x91	; 145
    359e:	f0 e0       	ldi	r31, 0x00	; 0
    35a0:	80 81       	ld	r24, Z
    35a2:	82 60       	ori	r24, 0x02	; 2
    35a4:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    35a6:	80 81       	ld	r24, Z
    35a8:	81 60       	ori	r24, 0x01	; 1
    35aa:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    35ac:	e0 e9       	ldi	r30, 0x90	; 144
    35ae:	f0 e0       	ldi	r31, 0x00	; 0
    35b0:	80 81       	ld	r24, Z
    35b2:	81 60       	ori	r24, 0x01	; 1
    35b4:	80 83       	st	Z, r24

	// timer 4
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    35b6:	e1 ea       	ldi	r30, 0xA1	; 161
    35b8:	f0 e0       	ldi	r31, 0x00	; 0
    35ba:	80 81       	ld	r24, Z
    35bc:	82 60       	ori	r24, 0x02	; 2
    35be:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    35c0:	80 81       	ld	r24, Z
    35c2:	81 60       	ori	r24, 0x01	; 1
    35c4:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    35c6:	e0 ea       	ldi	r30, 0xA0	; 160
    35c8:	f0 e0       	ldi	r31, 0x00	; 0
    35ca:	80 81       	ld	r24, Z
    35cc:	81 60       	ori	r24, 0x01	; 1
    35ce:	80 83       	st	Z, r24

  // timer 5
  // lo que sigue es para setear el timer5 para generar PWM para los 2 servos de la cabeza
  // fast PWM, 16 bits, prescaler CPU/8, TOP = 40000 
  TCCR5A |= _BV(WGM51); TCCR5A &= ~_BV(WGM50);
    35d0:	e0 e2       	ldi	r30, 0x20	; 32
    35d2:	f1 e0       	ldi	r31, 0x01	; 1
    35d4:	80 81       	ld	r24, Z
    35d6:	82 60       	ori	r24, 0x02	; 2
    35d8:	80 83       	st	Z, r24
    35da:	80 81       	ld	r24, Z
    35dc:	8e 7f       	andi	r24, 0xFE	; 254
    35de:	80 83       	st	Z, r24
  TCCR5B |= _BV(WGM52) | _BV(WGM53) | _BV(CS51);
    35e0:	e1 e2       	ldi	r30, 0x21	; 33
    35e2:	f1 e0       	ldi	r31, 0x01	; 1
    35e4:	80 81       	ld	r24, Z
    35e6:	8a 61       	ori	r24, 0x1A	; 26
    35e8:	80 83       	st	Z, r24
  TCCR5B &= ~(_BV(CS50) | _BV(CS52));	
    35ea:	80 81       	ld	r24, Z
    35ec:	8a 7f       	andi	r24, 0xFA	; 250
    35ee:	80 83       	st	Z, r24
  ICR5 = 40000;
    35f0:	80 e4       	ldi	r24, 0x40	; 64
    35f2:	9c e9       	ldi	r25, 0x9C	; 156
    35f4:	90 93 27 01 	sts	0x0127, r25
    35f8:	80 93 26 01 	sts	0x0126, r24
void inline disable_ovf2() {TIMSK2 &= ~_BV(TOIE2);}               // deshabilita el Overflow Interrupt (timer2)
void inline enable_ovf0() {TIMSK0 |= _BV(TOIE0);}                 // habilita el Overflow Interrupt (timer0)
    35fc:	ee e6       	ldi	r30, 0x6E	; 110
    35fe:	f0 e0       	ldi	r31, 0x00	; 0
    3600:	80 81       	ld	r24, Z
    3602:	81 60       	ori	r24, 0x01	; 1
    3604:	80 83       	st	Z, r24
void delay (unsigned long);
void delayMicroseconds (unsigned int us);

extern volatile byte timer0_int_flag;                // permite registrar y desregistrar tareas en la interrupción del timer0

void inline enable_ovf2() {TIMSK2 |= _BV(TOIE2);}                 // habilita el Overflow Interrupt (timer2)
    3606:	f9 01       	movw	r30, r18
    3608:	80 81       	ld	r24, Z
    360a:	81 60       	ori	r24, 0x01	; 1
    360c:	80 83       	st	Z, r24
	// reconnected in Serial.begin()
	// UCSR0B = 0;                     // otra potencial fuente de problemas, cuando la inicialización de los seriales se hace antes que esto
	
	enable_ovf0();     // enable timer0 overflow interrupt (habilita el delay(), etc.)
	enable_ovf2();     // enable timer2 overflow interrupt (habilita el movimiento)
	sei();           // habilita las interrupciones globales
    360e:	78 94       	sei
	
}  
    3610:	08 95       	ret

00003612 <_Z9ADCconfigv>:
void ADCconfig () {
  
	/* prende el ADC, modo manual, no int, no inicia nada, 
	   prescaler a 1/128 (125KHz, 104us cada conversión [@16MHz])  */
  
	ADCSRA = _BV(ADEN)|_BV(ADPS2)|_BV(ADPS1)|_BV(ADPS0);    
    3612:	87 e8       	ldi	r24, 0x87	; 135
    3614:	80 93 7a 00 	sts	0x007A, r24
	ADMUX = _BV(REFS0);                              // setea el Vref
    3618:	80 e4       	ldi	r24, 0x40	; 64
    361a:	80 93 7c 00 	sts	0x007C, r24

}
    361e:	08 95       	ret

00003620 <_Z11ADCInitConvh>:
  
	// esto es para abarajar los 16 canales de ADC del ATmega1280
	#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    3620:	eb e7       	ldi	r30, 0x7B	; 123
    3622:	f0 e0       	ldi	r31, 0x00	; 0
    3624:	90 81       	ld	r25, Z
    3626:	28 2f       	mov	r18, r24
    3628:	28 70       	andi	r18, 0x08	; 8
    362a:	97 7f       	andi	r25, 0xF7	; 247
    362c:	29 2b       	or	r18, r25
    362e:	20 83       	st	Z, r18
  
	// analog reference is in the high two bits of ADMUX
	// channel is in the low 4 bits of ADMUX  
	// also, ADLAR (left-adjust result) must be setted to 0 (the default).
	
	ADMUX = (ADMUX & 0xe0) | (pin & 0x07);             // setea el canal ADC, sin alterar el Vref que se seteó antes
    3630:	ec e7       	ldi	r30, 0x7C	; 124
    3632:	f0 e0       	ldi	r31, 0x00	; 0
    3634:	90 81       	ld	r25, Z
    3636:	87 70       	andi	r24, 0x07	; 7
    3638:	90 7e       	andi	r25, 0xE0	; 224
    363a:	98 2b       	or	r25, r24
    363c:	90 83       	st	Z, r25

	// busy wait
	__asm__ __volatile__ (
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
    363e:	82 e0       	ldi	r24, 0x02	; 2
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	01 97       	sbiw	r24, 0x01	; 1
    3644:	f1 f7       	brne	.-4      	; 0x3642 <_Z11ADCInitConvh+0x22>
	// also, ADLAR (left-adjust result) must be setted to 0 (the default).
	
	ADMUX = (ADMUX & 0xe0) | (pin & 0x07);             // setea el canal ADC, sin alterar el Vref que se seteó antes
	// ADMUX = (analog_reference << 6) | (pin & 0x07);      // versión "Arduino" de la misma línea (analog_reference=1)
	delayMicroseconds(2);
	ADCSRA |= _BV(ADSC);                     // inicia una nueva conversión manual (versión Arduino: sbi(ADCSRA, ADSC);)
    3646:	ea e7       	ldi	r30, 0x7A	; 122
    3648:	f0 e0       	ldi	r31, 0x00	; 0
    364a:	80 81       	ld	r24, Z
    364c:	80 64       	ori	r24, 0x40	; 64
    364e:	80 83       	st	Z, r24
	
}
    3650:	08 95       	ret

00003652 <_Z11ADCReadConvv>:

int ADCReadConv () {
  while (ADCSRA & _BV(ADSC)) ;                   // espera hasta que se apague ADSC (está pronta la conversión)  
    3652:	80 91 7a 00 	lds	r24, 0x007A
    3656:	86 fd       	sbrc	r24, 6
    3658:	fc cf       	rjmp	.-8      	; 0x3652 <_Z11ADCReadConvv>
  // while (bit_is_set(ADCSRA, ADSC));                 // versión "Arduino" de la misma línea
	return ADC;                                 // equivale al analogRead
    365a:	20 91 78 00 	lds	r18, 0x0078
    365e:	30 91 79 00 	lds	r19, 0x0079
		low  = ADCL;
		high = ADCH;        
		return (high << 8) | low;
	*/
	
}
    3662:	c9 01       	movw	r24, r18
    3664:	08 95       	ret

00003666 <_Z11SPItransferh>:
	SPSR |= _BV (SPI2X);  // double speed
	SPCR |= _BV (SPR0);   // clock / 8
}

byte SPItransfer (byte _data) {
  SPDR = _data;
    3666:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF))) ;     // por alguna razón esto no anda cuando está adentro de una ISR
    3668:	0d b4       	in	r0, 0x2d	; 45
    366a:	07 fe       	sbrs	r0, 7
    366c:	fd cf       	rjmp	.-6      	; 0x3668 <_Z11SPItransferh+0x2>

	// busy wait
	__asm__ __volatile__ (
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
    366e:	8e e0       	ldi	r24, 0x0E	; 14
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	01 97       	sbiw	r24, 0x01	; 1
    3674:	f1 f7       	brne	.-4      	; 0x3672 <_Z11SPItransferh+0xc>

byte SPItransfer (byte _data) {
  SPDR = _data;
  while (!(SPSR & _BV(SPIF))) ;     // por alguna razón esto no anda cuando está adentro de una ISR
  delayMicroseconds (5);           // por otra misteriosa razón hay que poner este molesto delay acá
  return SPDR;
    3676:	8e b5       	in	r24, 0x2e	; 46
}
    3678:	08 95       	ret

0000367a <_Z14all_timers_offb>:

// esto apaga los 2 overflows, y luego los vuelve a su estado anterior
// tanto al escribir como al leer en los AX12, conviene que los timers estén apagados
void all_timers_off (bool restore) {
	static byte timsk0, timsk2;
	if (restore) {
    367a:	88 23       	and	r24, r24
    367c:	39 f0       	breq	.+14     	; 0x368c <_Z14all_timers_offb+0x12>
		TIMSK0 = timsk0;
    367e:	80 91 e0 10 	lds	r24, 0x10E0
    3682:	80 93 6e 00 	sts	0x006E, r24
		TIMSK2 = timsk2;
    3686:	80 91 df 10 	lds	r24, 0x10DF
    368a:	10 c0       	rjmp	.+32     	; 0x36ac <_Z14all_timers_offb+0x32>
	} else {
		timsk0 = TIMSK0;
    368c:	80 91 6e 00 	lds	r24, 0x006E
    3690:	80 93 e0 10 	sts	0x10E0, r24
		timsk2 = TIMSK2;
    3694:	80 91 70 00 	lds	r24, 0x0070
    3698:	80 93 df 10 	sts	0x10DF, r24
void inline disable_ovf2() {TIMSK2 &= ~_BV(TOIE2);}               // deshabilita el Overflow Interrupt (timer2)
void inline enable_ovf0() {TIMSK0 |= _BV(TOIE0);}                 // habilita el Overflow Interrupt (timer0)
void inline disable_ovf0() {TIMSK0 &= ~_BV(TOIE0);}               // deshabilita el Overflow Interrupt (timer0)
    369c:	80 91 6e 00 	lds	r24, 0x006E
    36a0:	8e 7f       	andi	r24, 0xFE	; 254
    36a2:	80 93 6e 00 	sts	0x006E, r24
void delayMicroseconds (unsigned int us);

extern volatile byte timer0_int_flag;                // permite registrar y desregistrar tareas en la interrupción del timer0

void inline enable_ovf2() {TIMSK2 |= _BV(TOIE2);}                 // habilita el Overflow Interrupt (timer2)
void inline disable_ovf2() {TIMSK2 &= ~_BV(TOIE2);}               // deshabilita el Overflow Interrupt (timer2)
    36a6:	80 91 70 00 	lds	r24, 0x0070
    36aa:	8e 7f       	andi	r24, 0xFE	; 254
    36ac:	80 93 70 00 	sts	0x0070, r24
    36b0:	08 95       	ret

000036b2 <_Z6millisv>:
//=============================================================================================================================//

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    36b2:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    36b4:	f8 94       	cli
	m = timer0_millis;
    36b6:	20 91 da 10 	lds	r18, 0x10DA
    36ba:	30 91 db 10 	lds	r19, 0x10DB
    36be:	40 91 dc 10 	lds	r20, 0x10DC
    36c2:	50 91 dd 10 	lds	r21, 0x10DD
	SREG = oldSREG;
    36c6:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    36c8:	b9 01       	movw	r22, r18
    36ca:	ca 01       	movw	r24, r20
    36cc:	08 95       	ret

000036ce <_Z5delaym>:
	SREG = oldSREG;
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay (unsigned long ms)    /* volvemos a la delay() de la 0018, 
    36ce:	ef 92       	push	r14
    36d0:	ff 92       	push	r15
    36d2:	0f 93       	push	r16
    36d4:	1f 93       	push	r17
    36d6:	7b 01       	movw	r14, r22
    36d8:	8c 01       	movw	r16, r24
//=============================================================================================================================//

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    36da:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    36dc:	f8 94       	cli
	m = timer0_millis;
    36de:	40 91 da 10 	lds	r20, 0x10DA
    36e2:	50 91 db 10 	lds	r21, 0x10DB
    36e6:	60 91 dc 10 	lds	r22, 0x10DC
    36ea:	70 91 dd 10 	lds	r23, 0x10DD
	SREG = oldSREG;
    36ee:	8f bf       	out	0x3f, r24	; 63
//=============================================================================================================================//

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    36f0:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    36f2:	f8 94       	cli
	m = timer0_millis;
    36f4:	80 91 da 10 	lds	r24, 0x10DA
    36f8:	90 91 db 10 	lds	r25, 0x10DB
    36fc:	a0 91 dc 10 	lds	r26, 0x10DC
    3700:	b0 91 dd 10 	lds	r27, 0x10DD
	SREG = oldSREG;
    3704:	2f bf       	out	0x3f, r18	; 63
void delay (unsigned long ms)    /* volvemos a la delay() de la 0018, 
																		  porque la de la 0022 no es recomendable en un entorno con interrupciones */ 
{
	unsigned long start = millis();
	
	while (millis() - start < ms)   // antes era <=
    3706:	84 1b       	sub	r24, r20
    3708:	95 0b       	sbc	r25, r21
    370a:	a6 0b       	sbc	r26, r22
    370c:	b7 0b       	sbc	r27, r23
    370e:	8e 15       	cp	r24, r14
    3710:	9f 05       	cpc	r25, r15
    3712:	a0 07       	cpc	r26, r16
    3714:	b1 07       	cpc	r27, r17
    3716:	60 f3       	brcs	.-40     	; 0x36f0 <_Z5delaym+0x22>
	      ;
}
    3718:	1f 91       	pop	r17
    371a:	0f 91       	pop	r16
    371c:	ff 90       	pop	r15
    371e:	ef 90       	pop	r14
    3720:	08 95       	ret

00003722 <_Z17delayMicrosecondsj>:
#if F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    3722:	01 97       	sbiw	r24, 0x01	; 1
    3724:	39 f0       	breq	.+14     	; 0x3734 <_Z17delayMicrosecondsj+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    3726:	88 0f       	add	r24, r24
    3728:	99 1f       	adc	r25, r25
    372a:	88 0f       	add	r24, r24
    372c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    372e:	02 97       	sbiw	r24, 0x02	; 2

	// busy wait
	__asm__ __volatile__ (
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
    3730:	01 97       	sbiw	r24, 0x01	; 1
    3732:	f1 f7       	brne	.-4      	; 0x3730 <_Z17delayMicrosecondsj+0xe>
    3734:	08 95       	ret

00003736 <__vector_15>:
	timer0_fract = f;
	timer0_millis = m;
	timer0_overflow_count++;
}

ISR (TIMER2_OVF_vect, ISR_BLOCK) {         
    3736:	1f 92       	push	r1
    3738:	0f 92       	push	r0
    373a:	0f b6       	in	r0, 0x3f	; 63
    373c:	0f 92       	push	r0
    373e:	0b b6       	in	r0, 0x3b	; 59
    3740:	0f 92       	push	r0
    3742:	11 24       	eor	r1, r1
    3744:	2f 93       	push	r18
    3746:	3f 93       	push	r19
    3748:	4f 93       	push	r20
    374a:	5f 93       	push	r21
    374c:	6f 93       	push	r22
    374e:	7f 93       	push	r23
    3750:	8f 93       	push	r24
    3752:	9f 93       	push	r25
    3754:	af 93       	push	r26
    3756:	bf 93       	push	r27
    3758:	ef 93       	push	r30
    375a:	ff 93       	push	r31
	// corregir: poner el timer en modo CTC para evitar esto
	TCNT2 = overflow;                  // cada vez que se produce un overflow, el timer arranca en este valor y cuenta hasta 255.
    375c:	88 ec       	ldi	r24, 0xC8	; 200
    375e:	80 93 b2 00 	sts	0x00B2, r24
	byte act = eventos.process ();       /* se ejecuta cada TICK. Devuelve la cantidad de motores actualizados, 
    3762:	80 ed       	ldi	r24, 0xD0	; 208
    3764:	96 e0       	ldi	r25, 0x06	; 6
    3766:	0e 94 22 1a 	call	0x3444	; 0x3444 <_ZN6Events7processEv>
	                                           dato que se puede usar para muchas cosas... */
	if (act==0) {poll_load();}          // si los motores no están trabajando, aprovecha para medir la fuerza (polling de sensores #2)
    376a:	88 23       	and	r24, r24
    376c:	19 f4       	brne	.+6      	; 0x3774 <__vector_15+0x3e>
    376e:	0e 94 1b 46 	call	0x8c36	; 0x8c36 <_Z9poll_loadv>
    3772:	04 c0       	rjmp	.+8      	; 0x377c <__vector_15+0x46>
	else {idle = 0;}                  // de lo contrario resetea el contador idle (tiempo de inactividad)
    3774:	10 92 af 13 	sts	0x13AF, r1
    3778:	10 92 ae 13 	sts	0x13AE, r1
}
    377c:	ff 91       	pop	r31
    377e:	ef 91       	pop	r30
    3780:	bf 91       	pop	r27
    3782:	af 91       	pop	r26
    3784:	9f 91       	pop	r25
    3786:	8f 91       	pop	r24
    3788:	7f 91       	pop	r23
    378a:	6f 91       	pop	r22
    378c:	5f 91       	pop	r21
    378e:	4f 91       	pop	r20
    3790:	3f 91       	pop	r19
    3792:	2f 91       	pop	r18
    3794:	0f 90       	pop	r0
    3796:	0b be       	out	0x3b, r0	; 59
    3798:	0f 90       	pop	r0
    379a:	0f be       	out	0x3f, r0	; 63
    379c:	0f 90       	pop	r0
    379e:	1f 90       	pop	r1
    37a0:	18 95       	reti

000037a2 <__vector_23>:

// este 7 tendría que se un or entre varios defines
volatile byte timer0_int_flag = 7;          // permite registrar y desregistrar tareas en la interrupción del timer0
											// por ahora no se está usando, pero pronto hay que empezar a administrar el tiempo

ISR (TIMER0_OVF_vect, ISR_BLOCK)   
    37a2:	1f 92       	push	r1
    37a4:	0f 92       	push	r0
    37a6:	0f b6       	in	r0, 0x3f	; 63
    37a8:	0f 92       	push	r0
    37aa:	0b b6       	in	r0, 0x3b	; 59
    37ac:	0f 92       	push	r0
    37ae:	11 24       	eor	r1, r1
    37b0:	df 92       	push	r13
    37b2:	ef 92       	push	r14
    37b4:	ff 92       	push	r15
    37b6:	0f 93       	push	r16
    37b8:	1f 93       	push	r17
    37ba:	2f 93       	push	r18
    37bc:	3f 93       	push	r19
    37be:	4f 93       	push	r20
    37c0:	5f 93       	push	r21
    37c2:	6f 93       	push	r22
    37c4:	7f 93       	push	r23
    37c6:	8f 93       	push	r24
    37c8:	9f 93       	push	r25
    37ca:	af 93       	push	r26
    37cc:	bf 93       	push	r27
    37ce:	ef 93       	push	r30
    37d0:	ff 93       	push	r31
{
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    37d2:	e0 90 da 10 	lds	r14, 0x10DA
    37d6:	f0 90 db 10 	lds	r15, 0x10DB
    37da:	00 91 dc 10 	lds	r16, 0x10DC
    37de:	10 91 dd 10 	lds	r17, 0x10DD
	unsigned char f = timer0_fract;
    37e2:	80 91 de 10 	lds	r24, 0x10DE

	m += MILLIS_INC;
    37e6:	08 94       	sec
    37e8:	e1 1c       	adc	r14, r1
    37ea:	f1 1c       	adc	r15, r1
    37ec:	01 1d       	adc	r16, r1
    37ee:	11 1d       	adc	r17, r1
	f += FRACT_INC;
    37f0:	43 e0       	ldi	r20, 0x03	; 3
    37f2:	d4 2e       	mov	r13, r20
    37f4:	d8 0e       	add	r13, r24
	if (f >= FRACT_MAX) {
    37f6:	9c e7       	ldi	r25, 0x7C	; 124
    37f8:	9d 15       	cp	r25, r13
    37fa:	40 f4       	brcc	.+16     	; 0x380c <__vector_23+0x6a>
		f -= FRACT_MAX;
    37fc:	36 e8       	ldi	r19, 0x86	; 134
    37fe:	d3 2e       	mov	r13, r19
    3800:	d8 0e       	add	r13, r24
		m += 1;
    3802:	08 94       	sec
    3804:	e1 1c       	adc	r14, r1
    3806:	f1 1c       	adc	r15, r1
    3808:	01 1d       	adc	r16, r1
    380a:	11 1d       	adc	r17, r1
	}
  
	// comienza zona de tareas automáticas
	// estos 1,2,etc deberían tener #defines
	if (timer0_int_flag & 1) {mov.update (m);}                    // caminata; esto puede durar 4,5 ms
    380c:	80 91 f1 03 	lds	r24, 0x03F1
    3810:	80 ff       	sbrs	r24, 0
    3812:	06 c0       	rjmp	.+12     	; 0x3820 <__vector_23+0x7e>
    3814:	81 ee       	ldi	r24, 0xE1	; 225
    3816:	90 e1       	ldi	r25, 0x10	; 16
    3818:	b8 01       	movw	r22, r16
    381a:	a7 01       	movw	r20, r14
    381c:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <_ZN10Movimiento6updateEm>
	if (timer0_int_flag & 2) {pantalla.update (m);}                // display
    3820:	80 91 f1 03 	lds	r24, 0x03F1
    3824:	81 ff       	sbrs	r24, 1
    3826:	06 c0       	rjmp	.+12     	; 0x3834 <__vector_23+0x92>
    3828:	80 ec       	ldi	r24, 0xC0	; 192
    382a:	96 e0       	ldi	r25, 0x06	; 6
    382c:	b8 01       	movw	r22, r16
    382e:	a7 01       	movw	r20, r14
    3830:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <_ZN7Display6updateEm>
	if (timer0_int_flag & 4) {kbza.comm.leer_serial();}               // polling del sensor inteligente de distancia (bypasseado en la ISR)
    3834:	80 91 f1 03 	lds	r24, 0x03F1
    3838:	82 ff       	sbrs	r24, 2
    383a:	04 c0       	rjmp	.+8      	; 0x3844 <__vector_23+0xa2>
    383c:	85 e9       	ldi	r24, 0x95	; 149
    383e:	96 e0       	ldi	r25, 0x06	; 6
    3840:	0e 94 f5 65 	call	0xcbea	; 0xcbea <_ZN10Serialcomm11leer_serialEv>
	if (timer0_int_flag & 8) {poll_analog_sensor (m);}            	 // polling de sensores analógicos (por defecto desactivado)
    3844:	80 91 f1 03 	lds	r24, 0x03F1
    3848:	83 ff       	sbrs	r24, 3
    384a:	04 c0       	rjmp	.+8      	; 0x3854 <__vector_23+0xb2>
    384c:	c8 01       	movw	r24, r16
    384e:	b7 01       	movw	r22, r14
    3850:	0e 94 d8 45 	call	0x8bb0	; 0x8bb0 <_Z18poll_analog_sensorm>
	// termina zona de tareas automáticas
	
	timer0_fract = f;
    3854:	d0 92 de 10 	sts	0x10DE, r13
	timer0_millis = m;
    3858:	e0 92 da 10 	sts	0x10DA, r14
    385c:	f0 92 db 10 	sts	0x10DB, r15
    3860:	00 93 dc 10 	sts	0x10DC, r16
    3864:	10 93 dd 10 	sts	0x10DD, r17
	timer0_overflow_count++;
    3868:	80 91 d6 10 	lds	r24, 0x10D6
    386c:	90 91 d7 10 	lds	r25, 0x10D7
    3870:	a0 91 d8 10 	lds	r26, 0x10D8
    3874:	b0 91 d9 10 	lds	r27, 0x10D9
    3878:	01 96       	adiw	r24, 0x01	; 1
    387a:	a1 1d       	adc	r26, r1
    387c:	b1 1d       	adc	r27, r1
    387e:	80 93 d6 10 	sts	0x10D6, r24
    3882:	90 93 d7 10 	sts	0x10D7, r25
    3886:	a0 93 d8 10 	sts	0x10D8, r26
    388a:	b0 93 d9 10 	sts	0x10D9, r27
}
    388e:	ff 91       	pop	r31
    3890:	ef 91       	pop	r30
    3892:	bf 91       	pop	r27
    3894:	af 91       	pop	r26
    3896:	9f 91       	pop	r25
    3898:	8f 91       	pop	r24
    389a:	7f 91       	pop	r23
    389c:	6f 91       	pop	r22
    389e:	5f 91       	pop	r21
    38a0:	4f 91       	pop	r20
    38a2:	3f 91       	pop	r19
    38a4:	2f 91       	pop	r18
    38a6:	1f 91       	pop	r17
    38a8:	0f 91       	pop	r16
    38aa:	ff 90       	pop	r15
    38ac:	ef 90       	pop	r14
    38ae:	df 90       	pop	r13
    38b0:	0f 90       	pop	r0
    38b2:	0b be       	out	0x3b, r0	; 59
    38b4:	0f 90       	pop	r0
    38b6:	0f be       	out	0x3f, r0	; 63
    38b8:	0f 90       	pop	r0
    38ba:	1f 90       	pop	r1
    38bc:	18 95       	reti

000038be <_Z9SPIconfigv>:
}

// rutinas del SPI

void SPIconfig () {
  pinMode (SCK, OUTPUT);
    38be:	84 e3       	ldi	r24, 0x34	; 52
    38c0:	61 e0       	ldi	r22, 0x01	; 1
    38c2:	0e 94 1f 07 	call	0xe3e	; 0xe3e <pinMode>
  pinMode (MOSI, OUTPUT);
    38c6:	83 e3       	ldi	r24, 0x33	; 51
    38c8:	61 e0       	ldi	r22, 0x01	; 1
    38ca:	0e 94 1f 07 	call	0xe3e	; 0xe3e <pinMode>
  pinMode (SS, OUTPUT);
    38ce:	85 e3       	ldi	r24, 0x35	; 53
    38d0:	61 e0       	ldi	r22, 0x01	; 1
    38d2:	0e 94 1f 07 	call	0xe3e	; 0xe3e <pinMode>
  digitalWrite (SCK, LOW);
    38d6:	84 e3       	ldi	r24, 0x34	; 52
    38d8:	60 e0       	ldi	r22, 0x00	; 0
    38da:	0e 94 b8 07 	call	0xf70	; 0xf70 <digitalWrite>
  digitalWrite (MOSI, LOW);
    38de:	83 e3       	ldi	r24, 0x33	; 51
    38e0:	60 e0       	ldi	r22, 0x00	; 0
    38e2:	0e 94 b8 07 	call	0xf70	; 0xf70 <digitalWrite>
  digitalWrite (SS, HIGH);
    38e6:	85 e3       	ldi	r24, 0x35	; 53
    38e8:	61 e0       	ldi	r22, 0x01	; 1
    38ea:	0e 94 b8 07 	call	0xf70	; 0xf70 <digitalWrite>
		
	/* Warning: if the SS pin ever becomes a LOW INPUT then SPI automatically switches to Slave,  
     so the data direction of the SS pin MUST be kept as OUTPUT.  */
	
	SPCR |= _BV (MSTR);   // master mode
    38ee:	8c b5       	in	r24, 0x2c	; 44
    38f0:	80 61       	ori	r24, 0x10	; 16
    38f2:	8c bd       	out	0x2c, r24	; 44
	SPCR |= _BV (SPE);    // enable SPI
    38f4:	8c b5       	in	r24, 0x2c	; 44
    38f6:	80 64       	ori	r24, 0x40	; 64
    38f8:	8c bd       	out	0x2c, r24	; 44
	SPSR |= _BV (SPI2X);  // double speed
    38fa:	8d b5       	in	r24, 0x2d	; 45
    38fc:	81 60       	ori	r24, 0x01	; 1
    38fe:	8d bd       	out	0x2d, r24	; 45
	SPCR |= _BV (SPR0);   // clock / 8
    3900:	8c b5       	in	r24, 0x2c	; 44
    3902:	81 60       	ori	r24, 0x01	; 1
    3904:	8c bd       	out	0x2c, r24	; 44
}
    3906:	08 95       	ret

00003908 <main>:
#include "HardwareSerial.h"
#include "bluetooth.h"
#include "conducta.h"
#include "settings.h"

int main (void)
    3908:	ef 92       	push	r14
    390a:	ff 92       	push	r15
    390c:	0f 93       	push	r16
    390e:	1f 93       	push	r17
    3910:	df 93       	push	r29
    3912:	cf 93       	push	r28
    3914:	cd b7       	in	r28, 0x3d	; 61
    3916:	de b7       	in	r29, 0x3e	; 62
    3918:	6b 97       	sbiw	r28, 0x1b	; 27
    391a:	0f b6       	in	r0, 0x3f	; 63
    391c:	f8 94       	cli
    391e:	de bf       	out	0x3e, r29	; 62
    3920:	0f be       	out	0x3f, r0	; 63
    3922:	cd bf       	out	0x3d, r28	; 61
{
	// los objetos que usan Serial, hay que inicializarlos acá (en tiempo de ejecución)
	kbza = Cabeza();
    3924:	8e 01       	movw	r16, r28
    3926:	0f 5f       	subi	r16, 0xFF	; 255
    3928:	1f 4f       	sbci	r17, 0xFF	; 255
    392a:	c8 01       	movw	r24, r16
    392c:	0e 94 8d 10 	call	0x211a	; 0x211a <_ZN6CabezaC1Ev>
    3930:	a5 e9       	ldi	r26, 0x95	; 149
    3932:	b6 e0       	ldi	r27, 0x06	; 6
    3934:	f8 01       	movw	r30, r16
    3936:	8d e0       	ldi	r24, 0x0D	; 13
    3938:	01 90       	ld	r0, Z+
    393a:	0d 92       	st	X+, r0
    393c:	81 50       	subi	r24, 0x01	; 1
    393e:	e1 f7       	brne	.-8      	; 0x3938 <main+0x30>
	blue = Bluetooth();
    3940:	8e 01       	movw	r16, r28
    3942:	02 5f       	subi	r16, 0xF2	; 242
    3944:	1f 4f       	sbci	r17, 0xFF	; 255
    3946:	c8 01       	movw	r24, r16
    3948:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <_ZN9BluetoothC1Ev>
    394c:	a7 e8       	ldi	r26, 0x87	; 135
    394e:	b6 e0       	ldi	r27, 0x06	; 6
    3950:	f8 01       	movw	r30, r16
    3952:	8e e0       	ldi	r24, 0x0E	; 14
    3954:	01 90       	ld	r0, Z+
    3956:	0d 92       	st	X+, r0
    3958:	81 50       	subi	r24, 0x01	; 1
    395a:	e1 f7       	brne	.-8      	; 0x3954 <main+0x4c>
	// termina inicialización de objetos que usan Serial. 
	
	init_filters ();             // necesario para el poll_load
    395c:	0e 94 a4 45 	call	0x8b48	; 0x8b48 <_Z12init_filtersv>
	
	setTimers();                /* configura los timers y arranca las interrupciones
    3960:	0e 94 9c 1a 	call	0x3538	; 0x3538 <_Z9setTimersv>
	                                   sustituye a la antigua init() de Arduino */
	SPIconfig ();                                          			  // inicializa el SPI para el display
    3964:	0e 94 5f 1c 	call	0x38be	; 0x38be <_Z9SPIconfigv>
	pantalla.setColor (DEGRADE_H, RGB(1, 3, 0), RGB(1, 3, 3));     			  // setea el color para el display
    3968:	80 ec       	ldi	r24, 0xC0	; 192
    396a:	96 e0       	ldi	r25, 0x06	; 6
    396c:	62 e0       	ldi	r22, 0x02	; 2
    396e:	4c e1       	ldi	r20, 0x1C	; 28
    3970:	2f e1       	ldi	r18, 0x1F	; 31
    3972:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <_ZN7Display8setColorEhhh>
	motor_setup ();                 								             			// inicializa y testea los 18 motores AX12
    3976:	0e 94 f7 49 	call	0x93ee	; 0x93ee <_Z11motor_setupv>
	ADCconfig ();                                          			  // configura el ADC     
    397a:	0e 94 09 1b 	call	0x3612	; 0x3612 <_Z9ADCconfigv>
	ADCInitConv (0);																              				// esto equivale a un analogRead(0)...
    397e:	80 e0       	ldi	r24, 0x00	; 0
    3980:	0e 94 10 1b 	call	0x3620	; 0x3620 <_Z11ADCInitConvh>
	randomSeed (ADCReadConv());                               			  // ...que se usa para inicializar el Random
    3984:	0e 94 29 1b 	call	0x3652	; 0x3652 <_Z11ADCReadConvv>
    3988:	0e 94 37 67 	call	0xce6e	; 0xce6e <_Z10randomSeedj>
 //	kbza.set_pos (PAN, 0); 
 //	kbza.set_pos (TILT, 400);               	                              // posiciona la cabeza
	pantalla.conway (60, 10); delay (700);                        		// genera un efecto visual
    398c:	80 ec       	ldi	r24, 0xC0	; 192
    398e:	96 e0       	ldi	r25, 0x06	; 6
    3990:	6c e3       	ldi	r22, 0x3C	; 60
    3992:	70 e0       	ldi	r23, 0x00	; 0
    3994:	4a e0       	ldi	r20, 0x0A	; 10
    3996:	50 e0       	ldi	r21, 0x00	; 0
    3998:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <_ZN7Display6conwayEii>
    399c:	6c eb       	ldi	r22, 0xBC	; 188
    399e:	72 e0       	ldi	r23, 0x02	; 2
    39a0:	80 e0       	ldi	r24, 0x00	; 0
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	0e 94 67 1b 	call	0x36ce	; 0x36ce <_Z5delaym>
	}
	
	// obtengo una posición inicial con hexagono()
	// nota: en 'vectores' está toda la aritmética que permite operar con estas posiciones antes de pasárselas a ningún movimiento
	// mov.goto_pos_ref (hexagono (7, 30, 35, 35).patas);
	mov.goto_pos_ref ();  // la posición por defecto ya está definida en la clase
    39a8:	81 ee       	ldi	r24, 0xE1	; 225
    39aa:	90 e1       	ldi	r25, 0x10	; 16
    39ac:	0e 94 13 22 	call	0x4426	; 0x4426 <_ZN10Movimiento12goto_pos_refEv>
	
	// inicialización del módulo bluetooth
	while (millis() < 1800) ;       // garantiza que pasaron 1,8 segundos para que inicie el hardware
    39b0:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <_Z6millisv>
    39b4:	68 50       	subi	r22, 0x08	; 8
    39b6:	77 40       	sbci	r23, 0x07	; 7
    39b8:	80 40       	sbci	r24, 0x00	; 0
    39ba:	90 40       	sbci	r25, 0x00	; 0
    39bc:	c8 f3       	brcs	.-14     	; 0x39b0 <main+0xa8>
	bool bt = blue.connect();       // inicializa e intenta conectar el bluetooth
    39be:	87 e8       	ldi	r24, 0x87	; 135
    39c0:	96 e0       	ldi	r25, 0x06	; 6
    39c2:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_ZN9Bluetooth7connectEv>
    39c6:	08 2f       	mov	r16, r24
	
	while (pantalla.isBusy()) ;    // espera que termine el mensaje de bienvenida
    39c8:	80 ec       	ldi	r24, 0xC0	; 192
    39ca:	96 e0       	ldi	r25, 0x06	; 6
    39cc:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    39d0:	88 23       	and	r24, r24
    39d2:	d1 f7       	brne	.-12     	; 0x39c8 <main+0xc0>
	
	if (bt) {
    39d4:	00 23       	and	r16, r16
    39d6:	29 f0       	breq	.+10     	; 0x39e2 <main+0xda>
		pantalla.scrollText (" BT conect. ", 65);
    39d8:	80 ec       	ldi	r24, 0xC0	; 192
    39da:	96 e0       	ldi	r25, 0x06	; 6
    39dc:	64 e5       	ldi	r22, 0x54	; 84
    39de:	72 e0       	ldi	r23, 0x02	; 2
    39e0:	04 c0       	rjmp	.+8      	; 0x39ea <main+0xe2>
	} else {
		pantalla.scrollText (" BT desconect. ", 65);
    39e2:	80 ec       	ldi	r24, 0xC0	; 192
    39e4:	96 e0       	ldi	r25, 0x06	; 6
    39e6:	61 e6       	ldi	r22, 0x61	; 97
    39e8:	72 e0       	ldi	r23, 0x02	; 2
    39ea:	41 e4       	ldi	r20, 0x41	; 65
    39ec:	50 e0       	ldi	r21, 0x00	; 0
    39ee:	20 e0       	ldi	r18, 0x00	; 0
    39f0:	30 e0       	ldi	r19, 0x00	; 0
    39f2:	01 e0       	ldi	r16, 0x01	; 1
    39f4:	ee 24       	eor	r14, r14
    39f6:	ea 94       	dec	r14
    39f8:	fe 2c       	mov	r15, r14
    39fa:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <_ZN7Display10scrollTextEPKciici>
		}
	}
	// fin firmwares alternativos
	// prosigue firmware normal con conductas	
	
	conducta_init ();                          // inicializa las conductas (alto nivel)
    39fe:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_Z13conducta_initv>
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//                                                  main loop                                                        //
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
	while (1) {
		delay (10);          // !!
    3a02:	6a e0       	ldi	r22, 0x0A	; 10
    3a04:	70 e0       	ldi	r23, 0x00	; 0
    3a06:	80 e0       	ldi	r24, 0x00	; 0
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	0e 94 67 1b 	call	0x36ce	; 0x36ce <_Z5delaym>
		conducta_main ();
    3a0e:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <_Z13conducta_mainv>
    3a12:	f7 cf       	rjmp	.-18     	; 0x3a02 <main+0xfa>

00003a14 <_ZN10Movimiento13get_osciladorEh>:

OSCILATOR Movimiento::get_oscilador (byte parametro) {
    3a14:	0f 93       	push	r16
    3a16:	1f 93       	push	r17
    3a18:	18 2f       	mov	r17, r24
    3a1a:	09 2f       	mov	r16, r25
    3a1c:	fb 01       	movw	r30, r22
	return bd.oscilator [parametro];
    3a1e:	50 e0       	ldi	r21, 0x00	; 0
    3a20:	8d e0       	ldi	r24, 0x0D	; 13
    3a22:	90 e0       	ldi	r25, 0x00	; 0
    3a24:	9c 01       	movw	r18, r24
    3a26:	42 9f       	mul	r20, r18
    3a28:	c0 01       	movw	r24, r0
    3a2a:	43 9f       	mul	r20, r19
    3a2c:	90 0d       	add	r25, r0
    3a2e:	52 9f       	mul	r21, r18
    3a30:	90 0d       	add	r25, r0
    3a32:	11 24       	eor	r1, r1
    3a34:	e8 0f       	add	r30, r24
    3a36:	f9 1f       	adc	r31, r25
    3a38:	21 2f       	mov	r18, r17
    3a3a:	30 2f       	mov	r19, r16
    3a3c:	c9 01       	movw	r24, r18
    3a3e:	dc 01       	movw	r26, r24
    3a40:	34 96       	adiw	r30, 0x04	; 4
    3a42:	8d e0       	ldi	r24, 0x0D	; 13
    3a44:	01 90       	ld	r0, Z+
    3a46:	0d 92       	st	X+, r0
    3a48:	81 50       	subi	r24, 0x01	; 1
    3a4a:	e1 f7       	brne	.-8      	; 0x3a44 <_ZN10Movimiento13get_osciladorEh+0x30>
}
    3a4c:	81 2f       	mov	r24, r17
    3a4e:	90 2f       	mov	r25, r16
    3a50:	1f 91       	pop	r17
    3a52:	0f 91       	pop	r16
    3a54:	08 95       	ret

00003a56 <_ZN10Movimiento7set_ampEhf>:

void Movimiento::set_amp (byte parametro, float value) {
	bd.oscilator [parametro].amp = value;
    3a56:	70 e0       	ldi	r23, 0x00	; 0
    3a58:	ed e0       	ldi	r30, 0x0D	; 13
    3a5a:	f0 e0       	ldi	r31, 0x00	; 0
    3a5c:	df 01       	movw	r26, r30
    3a5e:	6a 9f       	mul	r22, r26
    3a60:	f0 01       	movw	r30, r0
    3a62:	6b 9f       	mul	r22, r27
    3a64:	f0 0d       	add	r31, r0
    3a66:	7a 9f       	mul	r23, r26
    3a68:	f0 0d       	add	r31, r0
    3a6a:	11 24       	eor	r1, r1
    3a6c:	e8 0f       	add	r30, r24
    3a6e:	f9 1f       	adc	r31, r25
    3a70:	24 83       	std	Z+4, r18	; 0x04
    3a72:	35 83       	std	Z+5, r19	; 0x05
    3a74:	46 83       	std	Z+6, r20	; 0x06
    3a76:	57 83       	std	Z+7, r21	; 0x07
}
    3a78:	08 95       	ret

00003a7a <_ZN10Movimiento8set_freqEhf>:

void Movimiento::set_freq (byte parametro, float value) {
	bd.oscilator [parametro].freq = value;
    3a7a:	70 e0       	ldi	r23, 0x00	; 0
    3a7c:	ed e0       	ldi	r30, 0x0D	; 13
    3a7e:	f0 e0       	ldi	r31, 0x00	; 0
    3a80:	df 01       	movw	r26, r30
    3a82:	6a 9f       	mul	r22, r26
    3a84:	f0 01       	movw	r30, r0
    3a86:	6b 9f       	mul	r22, r27
    3a88:	f0 0d       	add	r31, r0
    3a8a:	7a 9f       	mul	r23, r26
    3a8c:	f0 0d       	add	r31, r0
    3a8e:	11 24       	eor	r1, r1
    3a90:	e8 0f       	add	r30, r24
    3a92:	f9 1f       	adc	r31, r25
    3a94:	20 87       	std	Z+8, r18	; 0x08
    3a96:	31 87       	std	Z+9, r19	; 0x09
    3a98:	42 87       	std	Z+10, r20	; 0x0a
    3a9a:	53 87       	std	Z+11, r21	; 0x0b
}
    3a9c:	08 95       	ret

00003a9e <_ZN10Movimiento9set_phaseEhf>:

void Movimiento::set_phase (byte parametro, float value) {
	bd.oscilator [parametro].phase = value;
    3a9e:	70 e0       	ldi	r23, 0x00	; 0
    3aa0:	ed e0       	ldi	r30, 0x0D	; 13
    3aa2:	f0 e0       	ldi	r31, 0x00	; 0
    3aa4:	df 01       	movw	r26, r30
    3aa6:	6a 9f       	mul	r22, r26
    3aa8:	f0 01       	movw	r30, r0
    3aaa:	6b 9f       	mul	r22, r27
    3aac:	f0 0d       	add	r31, r0
    3aae:	7a 9f       	mul	r23, r26
    3ab0:	f0 0d       	add	r31, r0
    3ab2:	11 24       	eor	r1, r1
    3ab4:	e8 0f       	add	r30, r24
    3ab6:	f9 1f       	adc	r31, r25
    3ab8:	24 87       	std	Z+12, r18	; 0x0c
    3aba:	35 87       	std	Z+13, r19	; 0x0d
    3abc:	46 87       	std	Z+14, r20	; 0x0e
    3abe:	57 87       	std	Z+15, r21	; 0x0f
}
    3ac0:	08 95       	ret

00003ac2 <_ZN10Movimiento9set_brownEhb>:

void Movimiento::set_brown (byte parametro, bool value) {
	bd.oscilator [parametro].brown = value;
    3ac2:	70 e0       	ldi	r23, 0x00	; 0
    3ac4:	2d e0       	ldi	r18, 0x0D	; 13
    3ac6:	30 e0       	ldi	r19, 0x00	; 0
    3ac8:	62 9f       	mul	r22, r18
    3aca:	f0 01       	movw	r30, r0
    3acc:	63 9f       	mul	r22, r19
    3ace:	f0 0d       	add	r31, r0
    3ad0:	72 9f       	mul	r23, r18
    3ad2:	f0 0d       	add	r31, r0
    3ad4:	11 24       	eor	r1, r1
    3ad6:	e8 0f       	add	r30, r24
    3ad8:	f9 1f       	adc	r31, r25
    3ada:	40 8b       	std	Z+16, r20	; 0x10
}
    3adc:	08 95       	ret

00003ade <_ZN10Movimiento9osc_resetEv>:
	start ();
	
}

// restea los osciladores
void Movimiento::osc_reset () {
    3ade:	ef 92       	push	r14
    3ae0:	ff 92       	push	r15
    3ae2:	0f 93       	push	r16
    3ae4:	1f 93       	push	r17
    3ae6:	cf 93       	push	r28
    3ae8:	df 93       	push	r29
    3aea:	dc 01       	movw	r26, r24
    3aec:	a7 58       	subi	r26, 0x87	; 135
    3aee:	bf 4f       	sbci	r27, 0xFF	; 255
    3af0:	20 e0       	ldi	r18, 0x00	; 0
    3af2:	30 e0       	ldi	r19, 0x00	; 0
	for (byte i=0; i<9; i++) {
	  bd.oscilator[i] = (OSCILATOR) {0, 0, 0, false};             // inicializa los osciladores
    3af4:	4d e0       	ldi	r20, 0x0D	; 13
    3af6:	e4 2e       	mov	r14, r20
    3af8:	f1 2c       	mov	r15, r1
    3afa:	1d e0       	ldi	r17, 0x0D	; 13
	  bd.param_tronco[i] = 0;
    3afc:	40 e0       	ldi	r20, 0x00	; 0
    3afe:	50 e0       	ldi	r21, 0x00	; 0
    3b00:	60 e0       	ldi	r22, 0x00	; 0
    3b02:	70 e0       	ldi	r23, 0x00	; 0
}

// restea los osciladores
void Movimiento::osc_reset () {
	for (byte i=0; i<9; i++) {
	  bd.oscilator[i] = (OSCILATOR) {0, 0, 0, false};             // inicializa los osciladores
    3b04:	2e 9d       	mul	r18, r14
    3b06:	f0 01       	movw	r30, r0
    3b08:	2f 9d       	mul	r18, r15
    3b0a:	f0 0d       	add	r31, r0
    3b0c:	3e 9d       	mul	r19, r14
    3b0e:	f0 0d       	add	r31, r0
    3b10:	11 24       	eor	r1, r1
    3b12:	e8 0f       	add	r30, r24
    3b14:	f9 1f       	adc	r31, r25
    3b16:	34 96       	adiw	r30, 0x04	; 4
    3b18:	ef 01       	movw	r28, r30
    3b1a:	01 2f       	mov	r16, r17
    3b1c:	19 92       	st	Y+, r1
    3b1e:	0a 95       	dec	r16
    3b20:	e9 f7       	brne	.-6      	; 0x3b1c <_ZN10Movimiento9osc_resetEv+0x3e>
	  bd.param_tronco[i] = 0;
    3b22:	4d 93       	st	X+, r20
    3b24:	5d 93       	st	X+, r21
    3b26:	6d 93       	st	X+, r22
    3b28:	7d 93       	st	X+, r23
    3b2a:	2f 5f       	subi	r18, 0xFF	; 255
    3b2c:	3f 4f       	sbci	r19, 0xFF	; 255
	
}

// restea los osciladores
void Movimiento::osc_reset () {
	for (byte i=0; i<9; i++) {
    3b2e:	29 30       	cpi	r18, 0x09	; 9
    3b30:	31 05       	cpc	r19, r1
    3b32:	41 f7       	brne	.-48     	; 0x3b04 <_ZN10Movimiento9osc_resetEv+0x26>
	  bd.oscilator[i] = (OSCILATOR) {0, 0, 0, false};             // inicializa los osciladores
	  bd.param_tronco[i] = 0;
	}
}
    3b34:	df 91       	pop	r29
    3b36:	cf 91       	pop	r28
    3b38:	1f 91       	pop	r17
    3b3a:	0f 91       	pop	r16
    3b3c:	ff 90       	pop	r15
    3b3e:	ef 90       	pop	r14
    3b40:	08 95       	ret

00003b42 <_ZN10Movimiento11get_pos_refEv>:
	wk.mv.altura_pasito = 10;
	sh.mv.nsegmentos = 7;
	caminata (false);
}

COORD3D* Movimiento::get_pos_ref () {
    3b42:	9c 01       	movw	r18, r24
    3b44:	28 56       	subi	r18, 0x68	; 104
    3b46:	3e 4f       	sbci	r19, 0xFE	; 254
	return sh.mv.pos_ref;
}
    3b48:	c9 01       	movw	r24, r18
    3b4a:	08 95       	ret

00003b4c <_ZN10Movimiento6pasitoEh7COORD3DbfihS0_>:

// curvas bezier (usada para dar "pasitos" en la caminata, pero se puede usar para muchas más cosas)
void Movimiento::pasito (byte patas, COORD3D destino, bool absolute, float comienzo, int duracion, byte nsegmentos, COORD3D manejador) { 
    3b4c:	2f 92       	push	r2
    3b4e:	3f 92       	push	r3
    3b50:	4f 92       	push	r4
    3b52:	5f 92       	push	r5
    3b54:	6f 92       	push	r6
    3b56:	7f 92       	push	r7
    3b58:	8f 92       	push	r8
    3b5a:	9f 92       	push	r9
    3b5c:	af 92       	push	r10
    3b5e:	bf 92       	push	r11
    3b60:	cf 92       	push	r12
    3b62:	df 92       	push	r13
    3b64:	ef 92       	push	r14
    3b66:	ff 92       	push	r15
    3b68:	0f 93       	push	r16
    3b6a:	1f 93       	push	r17
    3b6c:	df 93       	push	r29
    3b6e:	cf 93       	push	r28
    3b70:	cd b7       	in	r28, 0x3d	; 61
    3b72:	de b7       	in	r29, 0x3e	; 62
    3b74:	c3 59       	subi	r28, 0x93	; 147
    3b76:	d0 40       	sbci	r29, 0x00	; 0
    3b78:	0f b6       	in	r0, 0x3f	; 63
    3b7a:	f8 94       	cli
    3b7c:	de bf       	out	0x3e, r29	; 62
    3b7e:	0f be       	out	0x3f, r0	; 63
    3b80:	cd bf       	out	0x3d, r28	; 61
    3b82:	eb 96       	adiw	r28, 0x3b	; 59
    3b84:	6f af       	std	Y+63, r22	; 0x3f
    3b86:	eb 97       	sbiw	r28, 0x3b	; 59
    3b88:	be 01       	movw	r22, r28
    3b8a:	6f 5b       	subi	r22, 0xBF	; 191
    3b8c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b8e:	db 01       	movw	r26, r22
    3b90:	ac 92       	st	X, r10
    3b92:	fe 01       	movw	r30, r28
    3b94:	ee 5b       	subi	r30, 0xBE	; 190
    3b96:	ff 4f       	sbci	r31, 0xFF	; 255
    3b98:	b0 82       	st	Z, r11
    3b9a:	fe 01       	movw	r30, r28
    3b9c:	ed 5b       	subi	r30, 0xBD	; 189
    3b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba0:	c0 82       	st	Z, r12
    3ba2:	fe 01       	movw	r30, r28
    3ba4:	ec 5b       	subi	r30, 0xBC	; 188
    3ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba8:	d0 82       	st	Z, r13
    3baa:	ce 01       	movw	r24, r28
    3bac:	8b 5b       	subi	r24, 0xBB	; 187
    3bae:	9f 4f       	sbci	r25, 0xFF	; 255
    3bb0:	fc 01       	movw	r30, r24
    3bb2:	e0 82       	st	Z, r14
    3bb4:	fe 01       	movw	r30, r28
    3bb6:	ea 5b       	subi	r30, 0xBA	; 186
    3bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bba:	f0 82       	st	Z, r15
    3bbc:	fe 01       	movw	r30, r28
    3bbe:	e9 5b       	subi	r30, 0xB9	; 185
    3bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc2:	00 83       	st	Z, r16
    3bc4:	fe 01       	movw	r30, r28
    3bc6:	e8 5b       	subi	r30, 0xB8	; 184
    3bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bca:	10 83       	st	Z, r17
    3bcc:	de 01       	movw	r26, r28
    3bce:	a7 5b       	subi	r26, 0xB7	; 183
    3bd0:	bf 4f       	sbci	r27, 0xFF	; 255
    3bd2:	2c 93       	st	X, r18
    3bd4:	fe 01       	movw	r30, r28
    3bd6:	e6 5b       	subi	r30, 0xB6	; 182
    3bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bda:	30 83       	st	Z, r19
    3bdc:	fe 01       	movw	r30, r28
    3bde:	e5 5b       	subi	r30, 0xB5	; 181
    3be0:	ff 4f       	sbci	r31, 0xFF	; 255
    3be2:	40 83       	st	Z, r20
    3be4:	fe 01       	movw	r30, r28
    3be6:	e4 5b       	subi	r30, 0xB4	; 180
    3be8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bea:	50 83       	st	Z, r21
    3bec:	ec 96       	adiw	r28, 0x3c	; 60
    3bee:	8f ae       	std	Y+63, r8	; 0x3f
    3bf0:	ec 97       	sbiw	r28, 0x3c	; 60
    3bf2:	fb 01       	movw	r30, r22
    3bf4:	20 81       	ld	r18, Z
    3bf6:	31 81       	ldd	r19, Z+1	; 0x01
    3bf8:	42 81       	ldd	r20, Z+2	; 0x02
    3bfa:	53 81       	ldd	r21, Z+3	; 0x03
    3bfc:	a5 96       	adiw	r28, 0x25	; 37
    3bfe:	2c af       	std	Y+60, r18	; 0x3c
    3c00:	3d af       	std	Y+61, r19	; 0x3d
    3c02:	4e af       	std	Y+62, r20	; 0x3e
    3c04:	5f af       	std	Y+63, r21	; 0x3f
    3c06:	a5 97       	sbiw	r28, 0x25	; 37
    3c08:	fc 01       	movw	r30, r24
    3c0a:	20 81       	ld	r18, Z
    3c0c:	31 81       	ldd	r19, Z+1	; 0x01
    3c0e:	42 81       	ldd	r20, Z+2	; 0x02
    3c10:	53 81       	ldd	r21, Z+3	; 0x03
    3c12:	a1 96       	adiw	r28, 0x21	; 33
    3c14:	2c af       	std	Y+60, r18	; 0x3c
    3c16:	3d af       	std	Y+61, r19	; 0x3d
    3c18:	4e af       	std	Y+62, r20	; 0x3e
    3c1a:	5f af       	std	Y+63, r21	; 0x3f
    3c1c:	a1 97       	sbiw	r28, 0x21	; 33
    3c1e:	2d 91       	ld	r18, X+
    3c20:	3d 91       	ld	r19, X+
    3c22:	4d 91       	ld	r20, X+
    3c24:	5c 91       	ld	r21, X
    3c26:	6d 96       	adiw	r28, 0x1d	; 29
    3c28:	2c af       	std	Y+60, r18	; 0x3c
    3c2a:	3d af       	std	Y+61, r19	; 0x3d
    3c2c:	4e af       	std	Y+62, r20	; 0x3e
    3c2e:	5f af       	std	Y+63, r21	; 0x3f
    3c30:	6d 97       	sbiw	r28, 0x1d	; 29
    3c32:	c1 55       	subi	r28, 0x51	; 81
    3c34:	df 4f       	sbci	r29, 0xFF	; 255
    3c36:	88 81       	ld	r24, Y
    3c38:	99 81       	ldd	r25, Y+1	; 0x01
    3c3a:	aa 81       	ldd	r26, Y+2	; 0x02
    3c3c:	bb 81       	ldd	r27, Y+3	; 0x03
    3c3e:	cf 5a       	subi	r28, 0xAF	; 175
    3c40:	d0 40       	sbci	r29, 0x00	; 0
    3c42:	69 96       	adiw	r28, 0x19	; 25
    3c44:	8c af       	std	Y+60, r24	; 0x3c
    3c46:	9d af       	std	Y+61, r25	; 0x3d
    3c48:	ae af       	std	Y+62, r26	; 0x3e
    3c4a:	bf af       	std	Y+63, r27	; 0x3f
    3c4c:	69 97       	sbiw	r28, 0x19	; 25
    3c4e:	cd 54       	subi	r28, 0x4D	; 77
    3c50:	df 4f       	sbci	r29, 0xFF	; 255
    3c52:	28 81       	ld	r18, Y
    3c54:	39 81       	ldd	r19, Y+1	; 0x01
    3c56:	4a 81       	ldd	r20, Y+2	; 0x02
    3c58:	5b 81       	ldd	r21, Y+3	; 0x03
    3c5a:	c3 5b       	subi	r28, 0xB3	; 179
    3c5c:	d0 40       	sbci	r29, 0x00	; 0
    3c5e:	65 96       	adiw	r28, 0x15	; 21
    3c60:	2c af       	std	Y+60, r18	; 0x3c
    3c62:	3d af       	std	Y+61, r19	; 0x3d
    3c64:	4e af       	std	Y+62, r20	; 0x3e
    3c66:	5f af       	std	Y+63, r21	; 0x3f
    3c68:	65 97       	sbiw	r28, 0x15	; 21
    3c6a:	c9 54       	subi	r28, 0x49	; 73
    3c6c:	df 4f       	sbci	r29, 0xFF	; 255
    3c6e:	88 81       	ld	r24, Y
    3c70:	99 81       	ldd	r25, Y+1	; 0x01
    3c72:	aa 81       	ldd	r26, Y+2	; 0x02
    3c74:	bb 81       	ldd	r27, Y+3	; 0x03
    3c76:	c7 5b       	subi	r28, 0xB7	; 183
    3c78:	d0 40       	sbci	r29, 0x00	; 0
    3c7a:	61 96       	adiw	r28, 0x11	; 17
    3c7c:	8c af       	std	Y+60, r24	; 0x3c
    3c7e:	9d af       	std	Y+61, r25	; 0x3d
    3c80:	ae af       	std	Y+62, r26	; 0x3e
    3c82:	bf af       	std	Y+63, r27	; 0x3f
    3c84:	61 97       	sbiw	r28, 0x11	; 17
  
  float t = 0;
  float t_inc = 1.0 / nsegmentos;
    3c86:	c2 55       	subi	r28, 0x52	; 82
    3c88:	df 4f       	sbci	r29, 0xFF	; 255
    3c8a:	98 81       	ld	r25, Y
    3c8c:	ce 5a       	subi	r28, 0xAE	; 174
    3c8e:	d0 40       	sbci	r29, 0x00	; 0
    3c90:	69 2f       	mov	r22, r25
    3c92:	70 e0       	ldi	r23, 0x00	; 0
    3c94:	88 27       	eor	r24, r24
    3c96:	77 fd       	sbrc	r23, 7
    3c98:	80 95       	com	r24
    3c9a:	98 2f       	mov	r25, r24
    3c9c:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    3ca0:	9b 01       	movw	r18, r22
    3ca2:	ac 01       	movw	r20, r24
    3ca4:	60 e0       	ldi	r22, 0x00	; 0
    3ca6:	70 e0       	ldi	r23, 0x00	; 0
    3ca8:	80 e8       	ldi	r24, 0x80	; 128
    3caa:	9f e3       	ldi	r25, 0x3F	; 63
    3cac:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    3cb0:	ea 96       	adiw	r28, 0x3a	; 58
    3cb2:	6c af       	std	Y+60, r22	; 0x3c
    3cb4:	7d af       	std	Y+61, r23	; 0x3d
    3cb6:	8e af       	std	Y+62, r24	; 0x3e
    3cb8:	9f af       	std	Y+63, r25	; 0x3f
    3cba:	ea 97       	sbiw	r28, 0x3a	; 58
  float tps = duracion * t_inc;         // ticks-per-segment
    3cbc:	c4 55       	subi	r28, 0x54	; 84
    3cbe:	df 4f       	sbci	r29, 0xFF	; 255
    3cc0:	68 81       	ld	r22, Y
    3cc2:	79 81       	ldd	r23, Y+1	; 0x01
    3cc4:	cc 5a       	subi	r28, 0xAC	; 172
    3cc6:	d0 40       	sbci	r29, 0x00	; 0
    3cc8:	88 27       	eor	r24, r24
    3cca:	77 fd       	sbrc	r23, 7
    3ccc:	80 95       	com	r24
    3cce:	98 2f       	mov	r25, r24
    3cd0:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    3cd4:	ea 96       	adiw	r28, 0x3a	; 58
    3cd6:	2c ad       	ldd	r18, Y+60	; 0x3c
    3cd8:	3d ad       	ldd	r19, Y+61	; 0x3d
    3cda:	4e ad       	ldd	r20, Y+62	; 0x3e
    3cdc:	5f ad       	ldd	r21, Y+63	; 0x3f
    3cde:	ea 97       	sbiw	r28, 0x3a	; 58
    3ce0:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    3ce4:	e6 96       	adiw	r28, 0x36	; 54
    3ce6:	6c af       	std	Y+60, r22	; 0x3c
    3ce8:	7d af       	std	Y+61, r23	; 0x3d
    3cea:	8e af       	std	Y+62, r24	; 0x3e
    3cec:	9f af       	std	Y+63, r25	; 0x3f
    3cee:	e6 97       	sbiw	r28, 0x36	; 54
  COORD3D punto, last, origen;
  if (absolute) {
    3cf0:	88 20       	and	r8, r8
    3cf2:	b9 f4       	brne	.+46     	; 0x3d22 <_ZN10Movimiento6pasitoEh7COORD3DbfihS0_+0x1d6>
    3cf4:	20 e0       	ldi	r18, 0x00	; 0
    3cf6:	30 e0       	ldi	r19, 0x00	; 0
    3cf8:	40 e0       	ldi	r20, 0x00	; 0
    3cfa:	50 e0       	ldi	r21, 0x00	; 0
    3cfc:	e1 96       	adiw	r28, 0x31	; 49
    3cfe:	2c af       	std	Y+60, r18	; 0x3c
    3d00:	3d af       	std	Y+61, r19	; 0x3d
    3d02:	4e af       	std	Y+62, r20	; 0x3e
    3d04:	5f af       	std	Y+63, r21	; 0x3f
    3d06:	e1 97       	sbiw	r28, 0x31	; 49
    3d08:	ad 96       	adiw	r28, 0x2d	; 45
    3d0a:	2c af       	std	Y+60, r18	; 0x3c
    3d0c:	3d af       	std	Y+61, r19	; 0x3d
    3d0e:	4e af       	std	Y+62, r20	; 0x3e
    3d10:	5f af       	std	Y+63, r21	; 0x3f
    3d12:	ad 97       	sbiw	r28, 0x2d	; 45
    3d14:	a9 96       	adiw	r28, 0x29	; 41
    3d16:	2c af       	std	Y+60, r18	; 0x3c
    3d18:	3d af       	std	Y+61, r19	; 0x3d
    3d1a:	4e af       	std	Y+62, r20	; 0x3e
    3d1c:	5f af       	std	Y+63, r21	; 0x3f
    3d1e:	a9 97       	sbiw	r28, 0x29	; 41
    3d20:	38 c0       	rjmp	.+112    	; 0x3d92 <_ZN10Movimiento6pasitoEh7COORD3DbfihS0_+0x246>
    origen = eventos.search (patas2pata(patas), comienzo);   // calcula la posición futura de una pata, en base a los eventos agendados
    3d22:	eb 96       	adiw	r28, 0x3b	; 59
    3d24:	8f ad       	ldd	r24, Y+63	; 0x3f
    3d26:	eb 97       	sbiw	r28, 0x3b	; 59
    3d28:	0e 94 25 6e 	call	0xdc4a	; 0xdc4a <_Z10patas2patah>
    3d2c:	f8 2e       	mov	r15, r24
    3d2e:	c8 55       	subi	r28, 0x58	; 88
    3d30:	df 4f       	sbci	r29, 0xFF	; 255
    3d32:	68 81       	ld	r22, Y
    3d34:	79 81       	ldd	r23, Y+1	; 0x01
    3d36:	8a 81       	ldd	r24, Y+2	; 0x02
    3d38:	9b 81       	ldd	r25, Y+3	; 0x03
    3d3a:	c8 5a       	subi	r28, 0xA8	; 168
    3d3c:	d0 40       	sbci	r29, 0x00	; 0
    3d3e:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <__fixsfsi>
    3d42:	8b 01       	movw	r16, r22
    3d44:	9c 01       	movw	r18, r24
    3d46:	ce 01       	movw	r24, r28
    3d48:	49 96       	adiw	r24, 0x19	; 25
    3d4a:	60 ed       	ldi	r22, 0xD0	; 208
    3d4c:	76 e0       	ldi	r23, 0x06	; 6
    3d4e:	4f 2d       	mov	r20, r15
    3d50:	98 01       	movw	r18, r16
    3d52:	0e 94 74 19 	call	0x32e8	; 0x32e8 <_ZN6Events6searchEhi>
    3d56:	89 a1       	ldd	r24, Y+33	; 0x21
    3d58:	9a a1       	ldd	r25, Y+34	; 0x22
    3d5a:	ab a1       	ldd	r26, Y+35	; 0x23
    3d5c:	bc a1       	ldd	r27, Y+36	; 0x24
    3d5e:	e1 96       	adiw	r28, 0x31	; 49
    3d60:	8c af       	std	Y+60, r24	; 0x3c
    3d62:	9d af       	std	Y+61, r25	; 0x3d
    3d64:	ae af       	std	Y+62, r26	; 0x3e
    3d66:	bf af       	std	Y+63, r27	; 0x3f
    3d68:	e1 97       	sbiw	r28, 0x31	; 49
    3d6a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3d6c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3d6e:	4f 8d       	ldd	r20, Y+31	; 0x1f
    3d70:	58 a1       	ldd	r21, Y+32	; 0x20
    3d72:	ad 96       	adiw	r28, 0x2d	; 45
    3d74:	2c af       	std	Y+60, r18	; 0x3c
    3d76:	3d af       	std	Y+61, r19	; 0x3d
    3d78:	4e af       	std	Y+62, r20	; 0x3e
    3d7a:	5f af       	std	Y+63, r21	; 0x3f
    3d7c:	ad 97       	sbiw	r28, 0x2d	; 45
    3d7e:	89 8d       	ldd	r24, Y+25	; 0x19
    3d80:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3d82:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3d84:	bc 8d       	ldd	r27, Y+28	; 0x1c
    3d86:	a9 96       	adiw	r28, 0x29	; 41
    3d88:	8c af       	std	Y+60, r24	; 0x3c
    3d8a:	9d af       	std	Y+61, r25	; 0x3d
    3d8c:	ae af       	std	Y+62, r26	; 0x3e
    3d8e:	bf af       	std	Y+63, r27	; 0x3f
    3d90:	a9 97       	sbiw	r28, 0x29	; 41
    3d92:	e2 96       	adiw	r28, 0x32	; 50
    3d94:	1f ae       	std	Y+63, r1	; 0x3f
    3d96:	e2 97       	sbiw	r28, 0x32	; 50
    3d98:	0f 2e       	mov	r0, r31
    3d9a:	f0 e0       	ldi	r31, 0x00	; 0
    3d9c:	4f 2e       	mov	r4, r31
    3d9e:	f0 e0       	ldi	r31, 0x00	; 0
    3da0:	5f 2e       	mov	r5, r31
    3da2:	f0 e0       	ldi	r31, 0x00	; 0
    3da4:	6f 2e       	mov	r6, r31
    3da6:	f0 e0       	ldi	r31, 0x00	; 0
    3da8:	7f 2e       	mov	r7, r31
    3daa:	f0 2d       	mov	r31, r0
    3dac:	c1 57       	subi	r28, 0x71	; 113
    3dae:	df 4f       	sbci	r29, 0xFF	; 255
    3db0:	18 82       	st	Y, r1
    3db2:	cf 58       	subi	r28, 0x8F	; 143
    3db4:	d0 40       	sbci	r29, 0x00	; 0
    3db6:	c0 57       	subi	r28, 0x70	; 112
    3db8:	df 4f       	sbci	r29, 0xFF	; 255
    3dba:	18 82       	st	Y, r1
    3dbc:	c0 59       	subi	r28, 0x90	; 144
    3dbe:	d0 40       	sbci	r29, 0x00	; 0
    3dc0:	cf 56       	subi	r28, 0x6F	; 111
    3dc2:	df 4f       	sbci	r29, 0xFF	; 255
    3dc4:	18 82       	st	Y, r1
    3dc6:	c1 59       	subi	r28, 0x91	; 145
    3dc8:	d0 40       	sbci	r29, 0x00	; 0
    3dca:	33 24       	eor	r3, r3
    3dcc:	c4 57       	subi	r28, 0x74	; 116
    3dce:	df 4f       	sbci	r29, 0xFF	; 255
    3dd0:	18 82       	st	Y, r1
    3dd2:	cc 58       	subi	r28, 0x8C	; 140
    3dd4:	d0 40       	sbci	r29, 0x00	; 0
    3dd6:	c3 57       	subi	r28, 0x73	; 115
    3dd8:	df 4f       	sbci	r29, 0xFF	; 255
    3dda:	18 82       	st	Y, r1
    3ddc:	cd 58       	subi	r28, 0x8D	; 141
    3dde:	d0 40       	sbci	r29, 0x00	; 0
    3de0:	c2 57       	subi	r28, 0x72	; 114
    3de2:	df 4f       	sbci	r29, 0xFF	; 255
    3de4:	18 82       	st	Y, r1
    3de6:	ce 58       	subi	r28, 0x8E	; 142
    3de8:	d0 40       	sbci	r29, 0x00	; 0
    3dea:	22 24       	eor	r2, r2
    3dec:	c8 57       	subi	r28, 0x78	; 120
    3dee:	df 4f       	sbci	r29, 0xFF	; 255
    3df0:	18 82       	st	Y, r1
    3df2:	c8 58       	subi	r28, 0x88	; 136
    3df4:	d0 40       	sbci	r29, 0x00	; 0
    3df6:	c7 57       	subi	r28, 0x77	; 119
    3df8:	df 4f       	sbci	r29, 0xFF	; 255
    3dfa:	18 82       	st	Y, r1
    3dfc:	c9 58       	subi	r28, 0x89	; 137
    3dfe:	d0 40       	sbci	r29, 0x00	; 0
    3e00:	c6 57       	subi	r28, 0x76	; 118
    3e02:	df 4f       	sbci	r29, 0xFF	; 255
    3e04:	18 82       	st	Y, r1
    3e06:	ca 58       	subi	r28, 0x8A	; 138
    3e08:	d0 40       	sbci	r29, 0x00	; 0
    3e0a:	c5 57       	subi	r28, 0x75	; 117
    3e0c:	df 4f       	sbci	r29, 0xFF	; 255
    3e0e:	18 82       	st	Y, r1
    3e10:	cb 58       	subi	r28, 0x8B	; 139
    3e12:	d0 40       	sbci	r29, 0x00	; 0
    3e14:	cc 57       	subi	r28, 0x7C	; 124
    3e16:	df 4f       	sbci	r29, 0xFF	; 255
    3e18:	18 82       	st	Y, r1
    3e1a:	c4 58       	subi	r28, 0x84	; 132
    3e1c:	d0 40       	sbci	r29, 0x00	; 0
    3e1e:	cb 57       	subi	r28, 0x7B	; 123
    3e20:	df 4f       	sbci	r29, 0xFF	; 255
    3e22:	18 82       	st	Y, r1
    3e24:	c5 58       	subi	r28, 0x85	; 133
    3e26:	d0 40       	sbci	r29, 0x00	; 0
    3e28:	ca 57       	subi	r28, 0x7A	; 122
    3e2a:	df 4f       	sbci	r29, 0xFF	; 255
    3e2c:	18 82       	st	Y, r1
    3e2e:	c6 58       	subi	r28, 0x86	; 134
    3e30:	d0 40       	sbci	r29, 0x00	; 0
    3e32:	c9 57       	subi	r28, 0x79	; 121
    3e34:	df 4f       	sbci	r29, 0xFF	; 255
    3e36:	18 82       	st	Y, r1
    3e38:	c7 58       	subi	r28, 0x87	; 135
    3e3a:	d0 40       	sbci	r29, 0x00	; 0
    3e3c:	c0 58       	subi	r28, 0x80	; 128
    3e3e:	df 4f       	sbci	r29, 0xFF	; 255
    3e40:	18 82       	st	Y, r1
    3e42:	c0 58       	subi	r28, 0x80	; 128
    3e44:	d0 40       	sbci	r29, 0x00	; 0
    3e46:	cf 57       	subi	r28, 0x7F	; 127
    3e48:	df 4f       	sbci	r29, 0xFF	; 255
    3e4a:	18 82       	st	Y, r1
    3e4c:	c1 58       	subi	r28, 0x81	; 129
    3e4e:	d0 40       	sbci	r29, 0x00	; 0
    3e50:	ce 57       	subi	r28, 0x7E	; 126
    3e52:	df 4f       	sbci	r29, 0xFF	; 255
    3e54:	18 82       	st	Y, r1
    3e56:	c2 58       	subi	r28, 0x82	; 130
    3e58:	d0 40       	sbci	r29, 0x00	; 0
    3e5a:	cd 57       	subi	r28, 0x7D	; 125
    3e5c:	df 4f       	sbci	r29, 0xFF	; 255
    3e5e:	18 82       	st	Y, r1
    3e60:	c3 58       	subi	r28, 0x83	; 131
    3e62:	d0 40       	sbci	r29, 0x00	; 0
    3e64:	ed 96       	adiw	r28, 0x3d	; 61
    3e66:	1f ae       	std	Y+63, r1	; 0x3f
    3e68:	ed 97       	sbiw	r28, 0x3d	; 61
    3e6a:	ee 96       	adiw	r28, 0x3e	; 62
    3e6c:	1f ae       	std	Y+63, r1	; 0x3f
    3e6e:	ee 97       	sbiw	r28, 0x3e	; 62
    3e70:	ef 96       	adiw	r28, 0x3f	; 63
    3e72:	1f ae       	std	Y+63, r1	; 0x3f
    3e74:	ef 97       	sbiw	r28, 0x3f	; 63
    3e76:	c1 58       	subi	r28, 0x81	; 129
    3e78:	df 4f       	sbci	r29, 0xFF	; 255
    3e7a:	18 82       	st	Y, r1
    3e7c:	cf 57       	subi	r28, 0x7F	; 127
    3e7e:	d0 40       	sbci	r29, 0x00	; 0
    t += t_inc;
    if (!absolute) {last = punto;}
    punto.x = bezier (origen.x, manejador.x, destino.x, t);
    punto.y = bezier (origen.y, manejador.y, destino.y, t);
    punto.z = bezier (origen.z, manejador.z, destino.z, t);
    eventos.add ((MOVDATA) {patas, resta (punto, last), tps, absolute}, comienzo);  
    3e80:	de 01       	movw	r26, r28
    3e82:	d1 96       	adiw	r26, 0x31	; 49
    3e84:	ce 56       	subi	r28, 0x6E	; 110
    3e86:	df 4f       	sbci	r29, 0xFF	; 255
    3e88:	b9 83       	std	Y+1, r27	; 0x01
    3e8a:	a8 83       	st	Y, r26
    3e8c:	c2 59       	subi	r28, 0x92	; 146
    3e8e:	d0 40       	sbci	r29, 0x00	; 0
    3e90:	06 c2       	rjmp	.+1036   	; 0x429e <_ZN10Movimiento6pasitoEh7COORD3DbfihS0_+0x752>
    origen = (COORD3D) {0, 0, 0};
    punto = origen;
    last = punto;
  }
  for (byte i=0; i<nsegmentos; i++) {
    t += t_inc;
    3e92:	c3 01       	movw	r24, r6
    3e94:	b2 01       	movw	r22, r4
    3e96:	ea 96       	adiw	r28, 0x3a	; 58
    3e98:	2c ad       	ldd	r18, Y+60	; 0x3c
    3e9a:	3d ad       	ldd	r19, Y+61	; 0x3d
    3e9c:	4e ad       	ldd	r20, Y+62	; 0x3e
    3e9e:	5f ad       	ldd	r21, Y+63	; 0x3f
    3ea0:	ea 97       	sbiw	r28, 0x3a	; 58
    3ea2:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    3ea6:	2b 01       	movw	r4, r22
    3ea8:	3c 01       	movw	r6, r24
    if (!absolute) {last = punto;}
    3eaa:	ec 96       	adiw	r28, 0x3c	; 60
    3eac:	bf ad       	ldd	r27, Y+63	; 0x3f
    3eae:	ec 97       	sbiw	r28, 0x3c	; 60
    3eb0:	bb 23       	and	r27, r27
    3eb2:	09 f0       	breq	.+2      	; 0x3eb6 <_ZN10Movimiento6pasitoEh7COORD3DbfihS0_+0x36a>
    3eb4:	68 c0       	rjmp	.+208    	; 0x3f86 <_ZN10Movimiento6pasitoEh7COORD3DbfihS0_+0x43a>
    3eb6:	c8 57       	subi	r28, 0x78	; 120
    3eb8:	df 4f       	sbci	r29, 0xFF	; 255
    3eba:	e8 81       	ld	r30, Y
    3ebc:	c8 58       	subi	r28, 0x88	; 136
    3ebe:	d0 40       	sbci	r29, 0x00	; 0
    3ec0:	cc 57       	subi	r28, 0x7C	; 124
    3ec2:	df 4f       	sbci	r29, 0xFF	; 255
    3ec4:	e8 83       	st	Y, r30
    3ec6:	c4 58       	subi	r28, 0x84	; 132
    3ec8:	d0 40       	sbci	r29, 0x00	; 0
    3eca:	c7 57       	subi	r28, 0x77	; 119
    3ecc:	df 4f       	sbci	r29, 0xFF	; 255
    3ece:	f8 81       	ld	r31, Y
    3ed0:	c9 58       	subi	r28, 0x89	; 137
    3ed2:	d0 40       	sbci	r29, 0x00	; 0
    3ed4:	cb 57       	subi	r28, 0x7B	; 123
    3ed6:	df 4f       	sbci	r29, 0xFF	; 255
    3ed8:	f8 83       	st	Y, r31
    3eda:	c5 58       	subi	r28, 0x85	; 133
    3edc:	d0 40       	sbci	r29, 0x00	; 0
    3ede:	c6 57       	subi	r28, 0x76	; 118
    3ee0:	df 4f       	sbci	r29, 0xFF	; 255
    3ee2:	28 81       	ld	r18, Y
    3ee4:	ca 58       	subi	r28, 0x8A	; 138
    3ee6:	d0 40       	sbci	r29, 0x00	; 0
    3ee8:	ca 57       	subi	r28, 0x7A	; 122
    3eea:	df 4f       	sbci	r29, 0xFF	; 255
    3eec:	28 83       	st	Y, r18
    3eee:	c6 58       	subi	r28, 0x86	; 134
    3ef0:	d0 40       	sbci	r29, 0x00	; 0
    3ef2:	c5 57       	subi	r28, 0x75	; 117
    3ef4:	df 4f       	sbci	r29, 0xFF	; 255
    3ef6:	38 81       	ld	r19, Y
    3ef8:	cb 58       	subi	r28, 0x8B	; 139
    3efa:	d0 40       	sbci	r29, 0x00	; 0
    3efc:	c9 57       	subi	r28, 0x79	; 121
    3efe:	df 4f       	sbci	r29, 0xFF	; 255
    3f00:	38 83       	st	Y, r19
    3f02:	c7 58       	subi	r28, 0x87	; 135
    3f04:	d0 40       	sbci	r29, 0x00	; 0
    3f06:	c4 57       	subi	r28, 0x74	; 116
    3f08:	df 4f       	sbci	r29, 0xFF	; 255
    3f0a:	48 81       	ld	r20, Y
    3f0c:	cc 58       	subi	r28, 0x8C	; 140
    3f0e:	d0 40       	sbci	r29, 0x00	; 0
    3f10:	c0 58       	subi	r28, 0x80	; 128
    3f12:	df 4f       	sbci	r29, 0xFF	; 255
    3f14:	48 83       	st	Y, r20
    3f16:	c0 58       	subi	r28, 0x80	; 128
    3f18:	d0 40       	sbci	r29, 0x00	; 0
    3f1a:	c3 57       	subi	r28, 0x73	; 115
    3f1c:	df 4f       	sbci	r29, 0xFF	; 255
    3f1e:	58 81       	ld	r21, Y
    3f20:	cd 58       	subi	r28, 0x8D	; 141
    3f22:	d0 40       	sbci	r29, 0x00	; 0
    3f24:	cf 57       	subi	r28, 0x7F	; 127
    3f26:	df 4f       	sbci	r29, 0xFF	; 255
    3f28:	58 83       	st	Y, r21
    3f2a:	c1 58       	subi	r28, 0x81	; 129
    3f2c:	d0 40       	sbci	r29, 0x00	; 0
    3f2e:	c2 57       	subi	r28, 0x72	; 114
    3f30:	df 4f       	sbci	r29, 0xFF	; 255
    3f32:	88 81       	ld	r24, Y
    3f34:	ce 58       	subi	r28, 0x8E	; 142
    3f36:	d0 40       	sbci	r29, 0x00	; 0
    3f38:	ce 57       	subi	r28, 0x7E	; 126
    3f3a:	df 4f       	sbci	r29, 0xFF	; 255
    3f3c:	88 83       	st	Y, r24
    3f3e:	c2 58       	subi	r28, 0x82	; 130
    3f40:	d0 40       	sbci	r29, 0x00	; 0
    3f42:	cd 57       	subi	r28, 0x7D	; 125
    3f44:	df 4f       	sbci	r29, 0xFF	; 255
    3f46:	28 82       	st	Y, r2
    3f48:	c3 58       	subi	r28, 0x83	; 131
    3f4a:	d0 40       	sbci	r29, 0x00	; 0
    3f4c:	c1 57       	subi	r28, 0x71	; 113
    3f4e:	df 4f       	sbci	r29, 0xFF	; 255
    3f50:	98 81       	ld	r25, Y
    3f52:	cf 58       	subi	r28, 0x8F	; 143
    3f54:	d0 40       	sbci	r29, 0x00	; 0
    3f56:	ed 96       	adiw	r28, 0x3d	; 61
    3f58:	9f af       	std	Y+63, r25	; 0x3f
    3f5a:	ed 97       	sbiw	r28, 0x3d	; 61
    3f5c:	c0 57       	subi	r28, 0x70	; 112
    3f5e:	df 4f       	sbci	r29, 0xFF	; 255
    3f60:	a8 81       	ld	r26, Y
    3f62:	c0 59       	subi	r28, 0x90	; 144
    3f64:	d0 40       	sbci	r29, 0x00	; 0
    3f66:	ee 96       	adiw	r28, 0x3e	; 62
    3f68:	af af       	std	Y+63, r26	; 0x3f
    3f6a:	ee 97       	sbiw	r28, 0x3e	; 62
    3f6c:	cf 56       	subi	r28, 0x6F	; 111
    3f6e:	df 4f       	sbci	r29, 0xFF	; 255
    3f70:	b8 81       	ld	r27, Y
    3f72:	c1 59       	subi	r28, 0x91	; 145
    3f74:	d0 40       	sbci	r29, 0x00	; 0
    3f76:	ef 96       	adiw	r28, 0x3f	; 63
    3f78:	bf af       	std	Y+63, r27	; 0x3f
    3f7a:	ef 97       	sbiw	r28, 0x3f	; 63
    3f7c:	c1 58       	subi	r28, 0x81	; 129
    3f7e:	df 4f       	sbci	r29, 0xFF	; 255
    3f80:	38 82       	st	Y, r3
    3f82:	cf 57       	subi	r28, 0x7F	; 127
    3f84:	d0 40       	sbci	r29, 0x00	; 0
    punto.x = bezier (origen.x, manejador.x, destino.x, t);
    3f86:	a9 96       	adiw	r28, 0x29	; 41
    3f88:	6c ad       	ldd	r22, Y+60	; 0x3c
    3f8a:	7d ad       	ldd	r23, Y+61	; 0x3d
    3f8c:	8e ad       	ldd	r24, Y+62	; 0x3e
    3f8e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f90:	a9 97       	sbiw	r28, 0x29	; 41
    3f92:	69 96       	adiw	r28, 0x19	; 25
    3f94:	2c ad       	ldd	r18, Y+60	; 0x3c
    3f96:	3d ad       	ldd	r19, Y+61	; 0x3d
    3f98:	4e ad       	ldd	r20, Y+62	; 0x3e
    3f9a:	5f ad       	ldd	r21, Y+63	; 0x3f
    3f9c:	69 97       	sbiw	r28, 0x19	; 25
    3f9e:	a5 96       	adiw	r28, 0x25	; 37
    3fa0:	ec ac       	ldd	r14, Y+60	; 0x3c
    3fa2:	fd ac       	ldd	r15, Y+61	; 0x3d
    3fa4:	0e ad       	ldd	r16, Y+62	; 0x3e
    3fa6:	1f ad       	ldd	r17, Y+63	; 0x3f
    3fa8:	a5 97       	sbiw	r28, 0x25	; 37
    3faa:	63 01       	movw	r12, r6
    3fac:	52 01       	movw	r10, r4
    3fae:	0e 94 ad 68 	call	0xd15a	; 0xd15a <_Z6bezierffff>
    3fb2:	c8 57       	subi	r28, 0x78	; 120
    3fb4:	df 4f       	sbci	r29, 0xFF	; 255
    3fb6:	68 83       	st	Y, r22
    3fb8:	c8 58       	subi	r28, 0x88	; 136
    3fba:	d0 40       	sbci	r29, 0x00	; 0
    3fbc:	c7 57       	subi	r28, 0x77	; 119
    3fbe:	df 4f       	sbci	r29, 0xFF	; 255
    3fc0:	78 83       	st	Y, r23
    3fc2:	c9 58       	subi	r28, 0x89	; 137
    3fc4:	d0 40       	sbci	r29, 0x00	; 0
    3fc6:	c6 57       	subi	r28, 0x76	; 118
    3fc8:	df 4f       	sbci	r29, 0xFF	; 255
    3fca:	88 83       	st	Y, r24
    3fcc:	ca 58       	subi	r28, 0x8A	; 138
    3fce:	d0 40       	sbci	r29, 0x00	; 0
    3fd0:	c5 57       	subi	r28, 0x75	; 117
    3fd2:	df 4f       	sbci	r29, 0xFF	; 255
    3fd4:	98 83       	st	Y, r25
    3fd6:	cb 58       	subi	r28, 0x8B	; 139
    3fd8:	d0 40       	sbci	r29, 0x00	; 0
    punto.y = bezier (origen.y, manejador.y, destino.y, t);
    3fda:	ad 96       	adiw	r28, 0x2d	; 45
    3fdc:	6c ad       	ldd	r22, Y+60	; 0x3c
    3fde:	7d ad       	ldd	r23, Y+61	; 0x3d
    3fe0:	8e ad       	ldd	r24, Y+62	; 0x3e
    3fe2:	9f ad       	ldd	r25, Y+63	; 0x3f
    3fe4:	ad 97       	sbiw	r28, 0x2d	; 45
    3fe6:	65 96       	adiw	r28, 0x15	; 21
    3fe8:	2c ad       	ldd	r18, Y+60	; 0x3c
    3fea:	3d ad       	ldd	r19, Y+61	; 0x3d
    3fec:	4e ad       	ldd	r20, Y+62	; 0x3e
    3fee:	5f ad       	ldd	r21, Y+63	; 0x3f
    3ff0:	65 97       	sbiw	r28, 0x15	; 21
    3ff2:	a1 96       	adiw	r28, 0x21	; 33
    3ff4:	ec ac       	ldd	r14, Y+60	; 0x3c
    3ff6:	fd ac       	ldd	r15, Y+61	; 0x3d
    3ff8:	0e ad       	ldd	r16, Y+62	; 0x3e
    3ffa:	1f ad       	ldd	r17, Y+63	; 0x3f
    3ffc:	a1 97       	sbiw	r28, 0x21	; 33
    3ffe:	0e 94 ad 68 	call	0xd15a	; 0xd15a <_Z6bezierffff>
    4002:	c4 57       	subi	r28, 0x74	; 116
    4004:	df 4f       	sbci	r29, 0xFF	; 255
    4006:	68 83       	st	Y, r22
    4008:	cc 58       	subi	r28, 0x8C	; 140
    400a:	d0 40       	sbci	r29, 0x00	; 0
    400c:	c3 57       	subi	r28, 0x73	; 115
    400e:	df 4f       	sbci	r29, 0xFF	; 255
    4010:	78 83       	st	Y, r23
    4012:	cd 58       	subi	r28, 0x8D	; 141
    4014:	d0 40       	sbci	r29, 0x00	; 0
    4016:	c2 57       	subi	r28, 0x72	; 114
    4018:	df 4f       	sbci	r29, 0xFF	; 255
    401a:	88 83       	st	Y, r24
    401c:	ce 58       	subi	r28, 0x8E	; 142
    401e:	d0 40       	sbci	r29, 0x00	; 0
    4020:	29 2e       	mov	r2, r25
    punto.z = bezier (origen.z, manejador.z, destino.z, t);
    4022:	e1 96       	adiw	r28, 0x31	; 49
    4024:	6c ad       	ldd	r22, Y+60	; 0x3c
    4026:	7d ad       	ldd	r23, Y+61	; 0x3d
    4028:	8e ad       	ldd	r24, Y+62	; 0x3e
    402a:	9f ad       	ldd	r25, Y+63	; 0x3f
    402c:	e1 97       	sbiw	r28, 0x31	; 49
    402e:	61 96       	adiw	r28, 0x11	; 17
    4030:	2c ad       	ldd	r18, Y+60	; 0x3c
    4032:	3d ad       	ldd	r19, Y+61	; 0x3d
    4034:	4e ad       	ldd	r20, Y+62	; 0x3e
    4036:	5f ad       	ldd	r21, Y+63	; 0x3f
    4038:	61 97       	sbiw	r28, 0x11	; 17
    403a:	6d 96       	adiw	r28, 0x1d	; 29
    403c:	ec ac       	ldd	r14, Y+60	; 0x3c
    403e:	fd ac       	ldd	r15, Y+61	; 0x3d
    4040:	0e ad       	ldd	r16, Y+62	; 0x3e
    4042:	1f ad       	ldd	r17, Y+63	; 0x3f
    4044:	6d 97       	sbiw	r28, 0x1d	; 29
    4046:	0e 94 ad 68 	call	0xd15a	; 0xd15a <_Z6bezierffff>
    404a:	c1 57       	subi	r28, 0x71	; 113
    404c:	df 4f       	sbci	r29, 0xFF	; 255
    404e:	68 83       	st	Y, r22
    4050:	cf 58       	subi	r28, 0x8F	; 143
    4052:	d0 40       	sbci	r29, 0x00	; 0
    4054:	c0 57       	subi	r28, 0x70	; 112
    4056:	df 4f       	sbci	r29, 0xFF	; 255
    4058:	78 83       	st	Y, r23
    405a:	c0 59       	subi	r28, 0x90	; 144
    405c:	d0 40       	sbci	r29, 0x00	; 0
    405e:	cf 56       	subi	r28, 0x6F	; 111
    4060:	df 4f       	sbci	r29, 0xFF	; 255
    4062:	88 83       	st	Y, r24
    4064:	c1 59       	subi	r28, 0x91	; 145
    4066:	d0 40       	sbci	r29, 0x00	; 0
    4068:	39 2e       	mov	r3, r25
    eventos.add ((MOVDATA) {patas, resta (punto, last), tps, absolute}, comienzo);  
    406a:	48 2f       	mov	r20, r24
    406c:	59 2f       	mov	r21, r25
    406e:	cb 01       	movw	r24, r22
    4070:	da 01       	movw	r26, r20
    4072:	89 87       	std	Y+9, r24	; 0x09
    4074:	9a 87       	std	Y+10, r25	; 0x0a
    4076:	ab 87       	std	Y+11, r26	; 0x0b
    4078:	bc 87       	std	Y+12, r27	; 0x0c
    407a:	c4 57       	subi	r28, 0x74	; 116
    407c:	df 4f       	sbci	r29, 0xFF	; 255
    407e:	28 81       	ld	r18, Y
    4080:	cc 58       	subi	r28, 0x8C	; 140
    4082:	d0 40       	sbci	r29, 0x00	; 0
    4084:	c3 57       	subi	r28, 0x73	; 115
    4086:	df 4f       	sbci	r29, 0xFF	; 255
    4088:	38 81       	ld	r19, Y
    408a:	cd 58       	subi	r28, 0x8D	; 141
    408c:	d0 40       	sbci	r29, 0x00	; 0
    408e:	c2 57       	subi	r28, 0x72	; 114
    4090:	df 4f       	sbci	r29, 0xFF	; 255
    4092:	48 81       	ld	r20, Y
    4094:	ce 58       	subi	r28, 0x8E	; 142
    4096:	d0 40       	sbci	r29, 0x00	; 0
    4098:	52 2d       	mov	r21, r2
    409a:	c9 01       	movw	r24, r18
    409c:	da 01       	movw	r26, r20
    409e:	8d 83       	std	Y+5, r24	; 0x05
    40a0:	9e 83       	std	Y+6, r25	; 0x06
    40a2:	af 83       	std	Y+7, r26	; 0x07
    40a4:	b8 87       	std	Y+8, r27	; 0x08
    40a6:	c8 57       	subi	r28, 0x78	; 120
    40a8:	df 4f       	sbci	r29, 0xFF	; 255
    40aa:	28 81       	ld	r18, Y
    40ac:	c8 58       	subi	r28, 0x88	; 136
    40ae:	d0 40       	sbci	r29, 0x00	; 0
    40b0:	c7 57       	subi	r28, 0x77	; 119
    40b2:	df 4f       	sbci	r29, 0xFF	; 255
    40b4:	38 81       	ld	r19, Y
    40b6:	c9 58       	subi	r28, 0x89	; 137
    40b8:	d0 40       	sbci	r29, 0x00	; 0
    40ba:	c6 57       	subi	r28, 0x76	; 118
    40bc:	df 4f       	sbci	r29, 0xFF	; 255
    40be:	48 81       	ld	r20, Y
    40c0:	ca 58       	subi	r28, 0x8A	; 138
    40c2:	d0 40       	sbci	r29, 0x00	; 0
    40c4:	c5 57       	subi	r28, 0x75	; 117
    40c6:	df 4f       	sbci	r29, 0xFF	; 255
    40c8:	58 81       	ld	r21, Y
    40ca:	cb 58       	subi	r28, 0x8B	; 139
    40cc:	d0 40       	sbci	r29, 0x00	; 0
    40ce:	c9 01       	movw	r24, r18
    40d0:	da 01       	movw	r26, r20
    40d2:	89 83       	std	Y+1, r24	; 0x01
    40d4:	9a 83       	std	Y+2, r25	; 0x02
    40d6:	ab 83       	std	Y+3, r26	; 0x03
    40d8:	bc 83       	std	Y+4, r27	; 0x04
    40da:	cc 57       	subi	r28, 0x7C	; 124
    40dc:	df 4f       	sbci	r29, 0xFF	; 255
    40de:	28 81       	ld	r18, Y
    40e0:	c4 58       	subi	r28, 0x84	; 132
    40e2:	d0 40       	sbci	r29, 0x00	; 0
    40e4:	cb 57       	subi	r28, 0x7B	; 123
    40e6:	df 4f       	sbci	r29, 0xFF	; 255
    40e8:	38 81       	ld	r19, Y
    40ea:	c5 58       	subi	r28, 0x85	; 133
    40ec:	d0 40       	sbci	r29, 0x00	; 0
    40ee:	ca 57       	subi	r28, 0x7A	; 122
    40f0:	df 4f       	sbci	r29, 0xFF	; 255
    40f2:	48 81       	ld	r20, Y
    40f4:	c6 58       	subi	r28, 0x86	; 134
    40f6:	d0 40       	sbci	r29, 0x00	; 0
    40f8:	c9 57       	subi	r28, 0x79	; 121
    40fa:	df 4f       	sbci	r29, 0xFF	; 255
    40fc:	58 81       	ld	r21, Y
    40fe:	c7 58       	subi	r28, 0x87	; 135
    4100:	d0 40       	sbci	r29, 0x00	; 0
    4102:	c9 01       	movw	r24, r18
    4104:	da 01       	movw	r26, r20
    4106:	8d 87       	std	Y+13, r24	; 0x0d
    4108:	9e 87       	std	Y+14, r25	; 0x0e
    410a:	af 87       	std	Y+15, r26	; 0x0f
    410c:	b8 8b       	std	Y+16, r27	; 0x10
    410e:	c0 58       	subi	r28, 0x80	; 128
    4110:	df 4f       	sbci	r29, 0xFF	; 255
    4112:	28 81       	ld	r18, Y
    4114:	c0 58       	subi	r28, 0x80	; 128
    4116:	d0 40       	sbci	r29, 0x00	; 0
    4118:	cf 57       	subi	r28, 0x7F	; 127
    411a:	df 4f       	sbci	r29, 0xFF	; 255
    411c:	38 81       	ld	r19, Y
    411e:	c1 58       	subi	r28, 0x81	; 129
    4120:	d0 40       	sbci	r29, 0x00	; 0
    4122:	ce 57       	subi	r28, 0x7E	; 126
    4124:	df 4f       	sbci	r29, 0xFF	; 255
    4126:	48 81       	ld	r20, Y
    4128:	c2 58       	subi	r28, 0x82	; 130
    412a:	d0 40       	sbci	r29, 0x00	; 0
    412c:	cd 57       	subi	r28, 0x7D	; 125
    412e:	df 4f       	sbci	r29, 0xFF	; 255
    4130:	58 81       	ld	r21, Y
    4132:	c3 58       	subi	r28, 0x83	; 131
    4134:	d0 40       	sbci	r29, 0x00	; 0
    4136:	c9 01       	movw	r24, r18
    4138:	da 01       	movw	r26, r20
    413a:	89 8b       	std	Y+17, r24	; 0x11
    413c:	9a 8b       	std	Y+18, r25	; 0x12
    413e:	ab 8b       	std	Y+19, r26	; 0x13
    4140:	bc 8b       	std	Y+20, r27	; 0x14
    4142:	ed 96       	adiw	r28, 0x3d	; 61
    4144:	2f ad       	ldd	r18, Y+63	; 0x3f
    4146:	ed 97       	sbiw	r28, 0x3d	; 61
    4148:	ee 96       	adiw	r28, 0x3e	; 62
    414a:	3f ad       	ldd	r19, Y+63	; 0x3f
    414c:	ee 97       	sbiw	r28, 0x3e	; 62
    414e:	ef 96       	adiw	r28, 0x3f	; 63
    4150:	4f ad       	ldd	r20, Y+63	; 0x3f
    4152:	ef 97       	sbiw	r28, 0x3f	; 63
    4154:	c1 58       	subi	r28, 0x81	; 129
    4156:	df 4f       	sbci	r29, 0xFF	; 255
    4158:	58 81       	ld	r21, Y
    415a:	cf 57       	subi	r28, 0x7F	; 127
    415c:	d0 40       	sbci	r29, 0x00	; 0
    415e:	c9 01       	movw	r24, r18
    4160:	da 01       	movw	r26, r20
    4162:	8d 8b       	std	Y+21, r24	; 0x15
    4164:	9e 8b       	std	Y+22, r25	; 0x16
    4166:	af 8b       	std	Y+23, r26	; 0x17
    4168:	b8 8f       	std	Y+24, r27	; 0x18
    416a:	ed b7       	in	r30, 0x3d	; 61
    416c:	fe b7       	in	r31, 0x3e	; 62
    416e:	3c 97       	sbiw	r30, 0x0c	; 12
    4170:	0f b6       	in	r0, 0x3f	; 63
    4172:	f8 94       	cli
    4174:	fe bf       	out	0x3e, r31	; 62
    4176:	0f be       	out	0x3f, r0	; 63
    4178:	ed bf       	out	0x3d, r30	; 61
    417a:	ad b7       	in	r26, 0x3d	; 61
    417c:	be b7       	in	r27, 0x3e	; 62
    417e:	11 96       	adiw	r26, 0x01	; 1
    4180:	fe 01       	movw	r30, r28
    4182:	3d 96       	adiw	r30, 0x0d	; 13
    4184:	8c e0       	ldi	r24, 0x0C	; 12
    4186:	01 90       	ld	r0, Z+
    4188:	0d 92       	st	X+, r0
    418a:	81 50       	subi	r24, 0x01	; 1
    418c:	e1 f7       	brne	.-8      	; 0x4186 <_ZN10Movimiento6pasitoEh7COORD3DbfihS0_+0x63a>
    418e:	ce 01       	movw	r24, r28
    4190:	85 96       	adiw	r24, 0x25	; 37
    4192:	c9 80       	ldd	r12, Y+1	; 0x01
    4194:	da 80       	ldd	r13, Y+2	; 0x02
    4196:	eb 80       	ldd	r14, Y+3	; 0x03
    4198:	fc 80       	ldd	r15, Y+4	; 0x04
    419a:	0d 81       	ldd	r16, Y+5	; 0x05
    419c:	1e 81       	ldd	r17, Y+6	; 0x06
    419e:	2f 81       	ldd	r18, Y+7	; 0x07
    41a0:	38 85       	ldd	r19, Y+8	; 0x08
    41a2:	49 85       	ldd	r20, Y+9	; 0x09
    41a4:	5a 85       	ldd	r21, Y+10	; 0x0a
    41a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    41a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    41aa:	0e 94 df 69 	call	0xd3be	; 0xd3be <_Z5resta7COORD3DS_>
    41ae:	ce 56       	subi	r28, 0x6E	; 110
    41b0:	df 4f       	sbci	r29, 0xFF	; 255
    41b2:	a8 81       	ld	r26, Y
    41b4:	b9 81       	ldd	r27, Y+1	; 0x01
    41b6:	c2 59       	subi	r28, 0x92	; 146
    41b8:	d0 40       	sbci	r29, 0x00	; 0
    41ba:	e0 e1       	ldi	r30, 0x10	; 16
    41bc:	1d 92       	st	X+, r1
    41be:	ea 95       	dec	r30
    41c0:	e9 f7       	brne	.-6      	; 0x41bc <_ZN10Movimiento6pasitoEh7COORD3DbfihS0_+0x670>
    41c2:	de 01       	movw	r26, r28
    41c4:	d2 96       	adiw	r26, 0x32	; 50
    41c6:	fe 01       	movw	r30, r28
    41c8:	b5 96       	adiw	r30, 0x25	; 37
    41ca:	8c e0       	ldi	r24, 0x0C	; 12
    41cc:	01 90       	ld	r0, Z+
    41ce:	0d 92       	st	X+, r0
    41d0:	81 50       	subi	r24, 0x01	; 1
    41d2:	e1 f7       	brne	.-8      	; 0x41cc <_ZN10Movimiento6pasitoEh7COORD3DbfihS0_+0x680>
    41d4:	eb 96       	adiw	r28, 0x3b	; 59
    41d6:	ff ad       	ldd	r31, Y+63	; 0x3f
    41d8:	eb 97       	sbiw	r28, 0x3b	; 59
    41da:	f9 ab       	std	Y+49, r31	; 0x31
    41dc:	e6 96       	adiw	r28, 0x36	; 54
    41de:	6c ad       	ldd	r22, Y+60	; 0x3c
    41e0:	7d ad       	ldd	r23, Y+61	; 0x3d
    41e2:	8e ad       	ldd	r24, Y+62	; 0x3e
    41e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    41e6:	e6 97       	sbiw	r28, 0x36	; 54
    41e8:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <__fixsfsi>
    41ec:	7f af       	std	Y+63, r23	; 0x3f
    41ee:	6e af       	std	Y+62, r22	; 0x3e
    41f0:	ec 96       	adiw	r28, 0x3c	; 60
    41f2:	2f ad       	ldd	r18, Y+63	; 0x3f
    41f4:	ec 97       	sbiw	r28, 0x3c	; 60
    41f6:	21 96       	adiw	r28, 0x01	; 1
    41f8:	2f af       	std	Y+63, r18	; 0x3f
    41fa:	21 97       	sbiw	r28, 0x01	; 1
    41fc:	4d b7       	in	r20, 0x3d	; 61
    41fe:	5e b7       	in	r21, 0x3e	; 62
    4200:	46 5f       	subi	r20, 0xF6	; 246
    4202:	5f 4f       	sbci	r21, 0xFF	; 255
    4204:	0f b6       	in	r0, 0x3f	; 63
    4206:	f8 94       	cli
    4208:	5e bf       	out	0x3e, r21	; 62
    420a:	0f be       	out	0x3f, r0	; 63
    420c:	4d bf       	out	0x3d, r20	; 61
    420e:	0d b7       	in	r16, 0x3d	; 61
    4210:	1e b7       	in	r17, 0x3e	; 62
    4212:	0f 5f       	subi	r16, 0xFF	; 255
    4214:	1f 4f       	sbci	r17, 0xFF	; 255
    4216:	c8 55       	subi	r28, 0x58	; 88
    4218:	df 4f       	sbci	r29, 0xFF	; 255
    421a:	68 81       	ld	r22, Y
    421c:	79 81       	ldd	r23, Y+1	; 0x01
    421e:	8a 81       	ldd	r24, Y+2	; 0x02
    4220:	9b 81       	ldd	r25, Y+3	; 0x03
    4222:	c8 5a       	subi	r28, 0xA8	; 168
    4224:	d0 40       	sbci	r29, 0x00	; 0
    4226:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <__fixsfsi>
    422a:	d8 01       	movw	r26, r16
    422c:	6d 93       	st	X+, r22
    422e:	7c 93       	st	X, r23
    4230:	80 ed       	ldi	r24, 0xD0	; 208
    4232:	96 e0       	ldi	r25, 0x06	; 6
    4234:	89 a8       	ldd	r8, Y+49	; 0x31
    4236:	9a a8       	ldd	r9, Y+50	; 0x32
    4238:	ab a8       	ldd	r10, Y+51	; 0x33
    423a:	bc a8       	ldd	r11, Y+52	; 0x34
    423c:	cd a8       	ldd	r12, Y+53	; 0x35
    423e:	de a8       	ldd	r13, Y+54	; 0x36
    4240:	ef a8       	ldd	r14, Y+55	; 0x37
    4242:	f8 ac       	ldd	r15, Y+56	; 0x38
    4244:	09 ad       	ldd	r16, Y+57	; 0x39
    4246:	1a ad       	ldd	r17, Y+58	; 0x3a
    4248:	2b ad       	ldd	r18, Y+59	; 0x3b
    424a:	3c ad       	ldd	r19, Y+60	; 0x3c
    424c:	4d ad       	ldd	r20, Y+61	; 0x3d
    424e:	5e ad       	ldd	r21, Y+62	; 0x3e
    4250:	6f ad       	ldd	r22, Y+63	; 0x3f
    4252:	21 96       	adiw	r28, 0x01	; 1
    4254:	7f ad       	ldd	r23, Y+63	; 0x3f
    4256:	21 97       	sbiw	r28, 0x01	; 1
    4258:	0e 94 16 18 	call	0x302c	; 0x302c <_ZN6Events3addE7MOVDATAi>
    comienzo += tps; 
    425c:	c8 55       	subi	r28, 0x58	; 88
    425e:	df 4f       	sbci	r29, 0xFF	; 255
    4260:	68 81       	ld	r22, Y
    4262:	79 81       	ldd	r23, Y+1	; 0x01
    4264:	8a 81       	ldd	r24, Y+2	; 0x02
    4266:	9b 81       	ldd	r25, Y+3	; 0x03
    4268:	c8 5a       	subi	r28, 0xA8	; 168
    426a:	d0 40       	sbci	r29, 0x00	; 0
    426c:	e6 96       	adiw	r28, 0x36	; 54
    426e:	2c ad       	ldd	r18, Y+60	; 0x3c
    4270:	3d ad       	ldd	r19, Y+61	; 0x3d
    4272:	4e ad       	ldd	r20, Y+62	; 0x3e
    4274:	5f ad       	ldd	r21, Y+63	; 0x3f
    4276:	e6 97       	sbiw	r28, 0x36	; 54
    4278:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    427c:	c8 55       	subi	r28, 0x58	; 88
    427e:	df 4f       	sbci	r29, 0xFF	; 255
    4280:	68 83       	st	Y, r22
    4282:	79 83       	std	Y+1, r23	; 0x01
    4284:	8a 83       	std	Y+2, r24	; 0x02
    4286:	9b 83       	std	Y+3, r25	; 0x03
    4288:	c8 5a       	subi	r28, 0xA8	; 168
    428a:	d0 40       	sbci	r29, 0x00	; 0
  } else { 
    origen = (COORD3D) {0, 0, 0};
    punto = origen;
    last = punto;
  }
  for (byte i=0; i<nsegmentos; i++) {
    428c:	e2 96       	adiw	r28, 0x32	; 50
    428e:	bf ad       	ldd	r27, Y+63	; 0x3f
    4290:	e2 97       	sbiw	r28, 0x32	; 50
    4292:	bf 5f       	subi	r27, 0xFF	; 255
    4294:	e2 96       	adiw	r28, 0x32	; 50
    4296:	bf af       	std	Y+63, r27	; 0x3f
    4298:	e2 97       	sbiw	r28, 0x32	; 50
    429a:	0f 90       	pop	r0
    429c:	0f 90       	pop	r0
    429e:	e2 96       	adiw	r28, 0x32	; 50
    42a0:	ef ad       	ldd	r30, Y+63	; 0x3f
    42a2:	e2 97       	sbiw	r28, 0x32	; 50
    42a4:	c2 55       	subi	r28, 0x52	; 82
    42a6:	df 4f       	sbci	r29, 0xFF	; 255
    42a8:	f8 81       	ld	r31, Y
    42aa:	ce 5a       	subi	r28, 0xAE	; 174
    42ac:	d0 40       	sbci	r29, 0x00	; 0
    42ae:	ef 17       	cp	r30, r31
    42b0:	08 f4       	brcc	.+2      	; 0x42b4 <_ZN10Movimiento6pasitoEh7COORD3DbfihS0_+0x768>
    42b2:	ef cd       	rjmp	.-1058   	; 0x3e92 <_ZN10Movimiento6pasitoEh7COORD3DbfihS0_+0x346>
    punto.y = bezier (origen.y, manejador.y, destino.y, t);
    punto.z = bezier (origen.z, manejador.z, destino.z, t);
    eventos.add ((MOVDATA) {patas, resta (punto, last), tps, absolute}, comienzo);  
    comienzo += tps; 
  } 
    42b4:	cd 56       	subi	r28, 0x6D	; 109
    42b6:	df 4f       	sbci	r29, 0xFF	; 255
    42b8:	0f b6       	in	r0, 0x3f	; 63
    42ba:	f8 94       	cli
    42bc:	de bf       	out	0x3e, r29	; 62
    42be:	0f be       	out	0x3f, r0	; 63
    42c0:	cd bf       	out	0x3d, r28	; 61
    42c2:	cf 91       	pop	r28
    42c4:	df 91       	pop	r29
    42c6:	1f 91       	pop	r17
    42c8:	0f 91       	pop	r16
    42ca:	ff 90       	pop	r15
    42cc:	ef 90       	pop	r14
    42ce:	df 90       	pop	r13
    42d0:	cf 90       	pop	r12
    42d2:	bf 90       	pop	r11
    42d4:	af 90       	pop	r10
    42d6:	9f 90       	pop	r9
    42d8:	8f 90       	pop	r8
    42da:	7f 90       	pop	r7
    42dc:	6f 90       	pop	r6
    42de:	5f 90       	pop	r5
    42e0:	4f 90       	pop	r4
    42e2:	3f 90       	pop	r3
    42e4:	2f 90       	pop	r2
    42e6:	08 95       	ret

000042e8 <_ZN10Movimiento8posicionEP7COORD3Dii>:
void Movimiento::actual_pos_ref () { 
  memcpy (sh.mv.pos_ref, pos_des, 6*sizeof(COORD3D));
}

// adopta una posición directamente
void Movimiento::posicion (COORD3D posicion[], int comienzo, int duracion) {
    42e8:	2f 92       	push	r2
    42ea:	3f 92       	push	r3
    42ec:	4f 92       	push	r4
    42ee:	5f 92       	push	r5
    42f0:	6f 92       	push	r6
    42f2:	7f 92       	push	r7
    42f4:	8f 92       	push	r8
    42f6:	9f 92       	push	r9
    42f8:	af 92       	push	r10
    42fa:	bf 92       	push	r11
    42fc:	cf 92       	push	r12
    42fe:	df 92       	push	r13
    4300:	ef 92       	push	r14
    4302:	ff 92       	push	r15
    4304:	0f 93       	push	r16
    4306:	1f 93       	push	r17
    4308:	df 93       	push	r29
    430a:	cf 93       	push	r28
    430c:	cd b7       	in	r28, 0x3d	; 61
    430e:	de b7       	in	r29, 0x3e	; 62
    4310:	a0 97       	sbiw	r28, 0x20	; 32
    4312:	0f b6       	in	r0, 0x3f	; 63
    4314:	f8 94       	cli
    4316:	de bf       	out	0x3e, r29	; 62
    4318:	0f be       	out	0x3f, r0	; 63
    431a:	cd bf       	out	0x3d, r28	; 61
    431c:	5e 8f       	std	Y+30, r21	; 0x1e
    431e:	4d 8f       	std	Y+29, r20	; 0x1d
    4320:	19 01       	movw	r2, r18
    4322:	2b 01       	movw	r4, r22
    4324:	66 24       	eor	r6, r6
    4326:	77 24       	eor	r7, r7
  for (byte pata=0; pata<6; pata++) {
    eventos.add ((MOVDATA) {1<<pata, posicion[pata], duracion, true}, comienzo); 
    4328:	ce 01       	movw	r24, r28
    432a:	0d 96       	adiw	r24, 0x0d	; 13
    432c:	98 a3       	std	Y+32, r25	; 0x20
    432e:	8f 8f       	std	Y+31, r24	; 0x1f
    4330:	de 01       	movw	r26, r28
    4332:	11 96       	adiw	r26, 0x01	; 1
    4334:	f2 01       	movw	r30, r4
    4336:	8c e0       	ldi	r24, 0x0C	; 12
    4338:	01 90       	ld	r0, Z+
    433a:	0d 92       	st	X+, r0
    433c:	81 50       	subi	r24, 0x01	; 1
    433e:	e1 f7       	brne	.-8      	; 0x4338 <_ZN10Movimiento8posicionEP7COORD3Dii+0x50>
    4340:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4342:	f8 a1       	ldd	r31, Y+32	; 0x20
    4344:	80 e1       	ldi	r24, 0x10	; 16
    4346:	11 92       	st	Z+, r1
    4348:	8a 95       	dec	r24
    434a:	e9 f7       	brne	.-6      	; 0x4346 <_ZN10Movimiento8posicionEP7COORD3Dii+0x5e>
    434c:	de 01       	movw	r26, r28
    434e:	1e 96       	adiw	r26, 0x0e	; 14
    4350:	fe 01       	movw	r30, r28
    4352:	31 96       	adiw	r30, 0x01	; 1
    4354:	8c e0       	ldi	r24, 0x0C	; 12
    4356:	01 90       	ld	r0, Z+
    4358:	0d 92       	st	X+, r0
    435a:	81 50       	subi	r24, 0x01	; 1
    435c:	e1 f7       	brne	.-8      	; 0x4356 <_ZN10Movimiento8posicionEP7COORD3Dii+0x6e>
    435e:	81 e0       	ldi	r24, 0x01	; 1
    4360:	90 e0       	ldi	r25, 0x00	; 0
    4362:	06 2c       	mov	r0, r6
    4364:	02 c0       	rjmp	.+4      	; 0x436a <_ZN10Movimiento8posicionEP7COORD3Dii+0x82>
    4366:	88 0f       	add	r24, r24
    4368:	99 1f       	adc	r25, r25
    436a:	0a 94       	dec	r0
    436c:	e2 f7       	brpl	.-8      	; 0x4366 <_ZN10Movimiento8posicionEP7COORD3Dii+0x7e>
    436e:	8d 87       	std	Y+13, r24	; 0x0d
    4370:	3b 8e       	std	Y+27, r3	; 0x1b
    4372:	2a 8e       	std	Y+26, r2	; 0x1a
    4374:	91 e0       	ldi	r25, 0x01	; 1
    4376:	9c 8f       	std	Y+28, r25	; 0x1c
    4378:	00 d0       	rcall	.+0      	; 0x437a <_ZN10Movimiento8posicionEP7COORD3Dii+0x92>
    437a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    437c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    437e:	ed b7       	in	r30, 0x3d	; 61
    4380:	fe b7       	in	r31, 0x3e	; 62
    4382:	92 83       	std	Z+2, r25	; 0x02
    4384:	81 83       	std	Z+1, r24	; 0x01
    4386:	80 ed       	ldi	r24, 0xD0	; 208
    4388:	96 e0       	ldi	r25, 0x06	; 6
    438a:	8d 84       	ldd	r8, Y+13	; 0x0d
    438c:	9e 84       	ldd	r9, Y+14	; 0x0e
    438e:	af 84       	ldd	r10, Y+15	; 0x0f
    4390:	b8 88       	ldd	r11, Y+16	; 0x10
    4392:	c9 88       	ldd	r12, Y+17	; 0x11
    4394:	da 88       	ldd	r13, Y+18	; 0x12
    4396:	eb 88       	ldd	r14, Y+19	; 0x13
    4398:	fc 88       	ldd	r15, Y+20	; 0x14
    439a:	0d 89       	ldd	r16, Y+21	; 0x15
    439c:	1e 89       	ldd	r17, Y+22	; 0x16
    439e:	2f 89       	ldd	r18, Y+23	; 0x17
    43a0:	38 8d       	ldd	r19, Y+24	; 0x18
    43a2:	49 8d       	ldd	r20, Y+25	; 0x19
    43a4:	5a 8d       	ldd	r21, Y+26	; 0x1a
    43a6:	6b 8d       	ldd	r22, Y+27	; 0x1b
    43a8:	7c 8d       	ldd	r23, Y+28	; 0x1c
    43aa:	0e 94 16 18 	call	0x302c	; 0x302c <_ZN6Events3addE7MOVDATAi>
    43ae:	08 94       	sec
    43b0:	61 1c       	adc	r6, r1
    43b2:	71 1c       	adc	r7, r1
    43b4:	ec e0       	ldi	r30, 0x0C	; 12
    43b6:	f0 e0       	ldi	r31, 0x00	; 0
    43b8:	4e 0e       	add	r4, r30
    43ba:	5f 1e       	adc	r5, r31
  memcpy (sh.mv.pos_ref, pos_des, 6*sizeof(COORD3D));
}

// adopta una posición directamente
void Movimiento::posicion (COORD3D posicion[], int comienzo, int duracion) {
  for (byte pata=0; pata<6; pata++) {
    43bc:	0f 90       	pop	r0
    43be:	0f 90       	pop	r0
    43c0:	f6 e0       	ldi	r31, 0x06	; 6
    43c2:	6f 16       	cp	r6, r31
    43c4:	71 04       	cpc	r7, r1
    43c6:	09 f0       	breq	.+2      	; 0x43ca <_ZN10Movimiento8posicionEP7COORD3Dii+0xe2>
    43c8:	b3 cf       	rjmp	.-154    	; 0x4330 <_ZN10Movimiento8posicionEP7COORD3Dii+0x48>
    eventos.add ((MOVDATA) {1<<pata, posicion[pata], duracion, true}, comienzo); 
  }
}
    43ca:	a0 96       	adiw	r28, 0x20	; 32
    43cc:	0f b6       	in	r0, 0x3f	; 63
    43ce:	f8 94       	cli
    43d0:	de bf       	out	0x3e, r29	; 62
    43d2:	0f be       	out	0x3f, r0	; 63
    43d4:	cd bf       	out	0x3d, r28	; 61
    43d6:	cf 91       	pop	r28
    43d8:	df 91       	pop	r29
    43da:	1f 91       	pop	r17
    43dc:	0f 91       	pop	r16
    43de:	ff 90       	pop	r15
    43e0:	ef 90       	pop	r14
    43e2:	df 90       	pop	r13
    43e4:	cf 90       	pop	r12
    43e6:	bf 90       	pop	r11
    43e8:	af 90       	pop	r10
    43ea:	9f 90       	pop	r9
    43ec:	8f 90       	pop	r8
    43ee:	7f 90       	pop	r7
    43f0:	6f 90       	pop	r6
    43f2:	5f 90       	pop	r5
    43f4:	4f 90       	pop	r4
    43f6:	3f 90       	pop	r3
    43f8:	2f 90       	pop	r2
    43fa:	08 95       	ret

000043fc <_ZN10Movimiento14actual_pos_refEv>:
void Movimiento::set_pos_ref (COORD3D *pos_ref) {
  memcpy (sh.mv.pos_ref, pos_ref, 6*sizeof(COORD3D));
}

void Movimiento::actual_pos_ref () { 
  memcpy (sh.mv.pos_ref, pos_des, 6*sizeof(COORD3D));
    43fc:	dc 01       	movw	r26, r24
    43fe:	a8 56       	subi	r26, 0x68	; 104
    4400:	be 4f       	sbci	r27, 0xFE	; 254
    4402:	e0 e5       	ldi	r30, 0x50	; 80
    4404:	f3 e1       	ldi	r31, 0x13	; 19
    4406:	88 e4       	ldi	r24, 0x48	; 72
    4408:	01 90       	ld	r0, Z+
    440a:	0d 92       	st	X+, r0
    440c:	81 50       	subi	r24, 0x01	; 1
    440e:	e1 f7       	brne	.-8      	; 0x4408 <_ZN10Movimiento14actual_pos_refEv+0xc>
}
    4410:	08 95       	ret

00004412 <_ZN10Movimiento11set_pos_refEP7COORD3D>:


///////////////////////////////////////// MISC. & PRIVATE /////////////////////////////////////////

void Movimiento::set_pos_ref (COORD3D *pos_ref) {
  memcpy (sh.mv.pos_ref, pos_ref, 6*sizeof(COORD3D));
    4412:	dc 01       	movw	r26, r24
    4414:	a8 56       	subi	r26, 0x68	; 104
    4416:	be 4f       	sbci	r27, 0xFE	; 254
    4418:	fb 01       	movw	r30, r22
    441a:	88 e4       	ldi	r24, 0x48	; 72
    441c:	01 90       	ld	r0, Z+
    441e:	0d 92       	st	X+, r0
    4420:	81 50       	subi	r24, 0x01	; 1
    4422:	e1 f7       	brne	.-8      	; 0x441c <_ZN10Movimiento11set_pos_refEP7COORD3D+0xa>
}
    4424:	08 95       	ret

00004426 <_ZN10Movimiento12goto_pos_refEv>:
void Movimiento::goto_pos_ref (COORD3D posicion[]) {
	set_pos_ref (posicion);
	goto_pos_ref ();
}
	
void Movimiento::goto_pos_ref () {
    4426:	df 93       	push	r29
    4428:	cf 93       	push	r28
    442a:	00 d0       	rcall	.+0      	; 0x442c <_ZN10Movimiento12goto_pos_refEv+0x6>
    442c:	00 d0       	rcall	.+0      	; 0x442e <_ZN10Movimiento12goto_pos_refEv+0x8>
    442e:	00 d0       	rcall	.+0      	; 0x4430 <_ZN10Movimiento12goto_pos_refEv+0xa>
    4430:	cd b7       	in	r28, 0x3d	; 61
    4432:	de b7       	in	r29, 0x3e	; 62
    4434:	fc 01       	movw	r30, r24
  // esto por ahora está harcodeado, y muy probablemente se mantenga asi
	wk.mv.vector = (COORD2D) {0, 0};
    4436:	9c 01       	movw	r18, r24
    4438:	27 55       	subi	r18, 0x57	; 87
    443a:	3f 4f       	sbci	r19, 0xFF	; 255
    443c:	4c e1       	ldi	r20, 0x1C	; 28
    443e:	55 e0       	ldi	r21, 0x05	; 5
    4440:	88 e0       	ldi	r24, 0x08	; 8
    4442:	da 01       	movw	r26, r20
    4444:	0d 90       	ld	r0, X+
    4446:	ad 01       	movw	r20, r26
    4448:	d9 01       	movw	r26, r18
    444a:	0d 92       	st	X+, r0
    444c:	9d 01       	movw	r18, r26
    444e:	81 50       	subi	r24, 0x01	; 1
    4450:	c1 f7       	brne	.-16     	; 0x4442 <_ZN10Movimiento12goto_pos_refEv+0x1c>
	wk.mv.rotacion = 0;
    4452:	ef 54       	subi	r30, 0x4F	; 79
    4454:	ff 4f       	sbci	r31, 0xFF	; 255
    4456:	80 e0       	ldi	r24, 0x00	; 0
    4458:	90 e0       	ldi	r25, 0x00	; 0
    445a:	a0 e0       	ldi	r26, 0x00	; 0
    445c:	b0 e0       	ldi	r27, 0x00	; 0
    445e:	80 83       	st	Z, r24
    4460:	91 83       	std	Z+1, r25	; 0x01
    4462:	a2 83       	std	Z+2, r26	; 0x02
    4464:	b3 83       	std	Z+3, r27	; 0x03
	sh.mv.ticks = 90;
    4466:	ef 5c       	subi	r30, 0xCF	; 207
    4468:	fe 4f       	sbci	r31, 0xFE	; 254
    446a:	8a e5       	ldi	r24, 0x5A	; 90
    446c:	90 e0       	ldi	r25, 0x00	; 0
    446e:	91 83       	std	Z+1, r25	; 0x01
    4470:	80 83       	st	Z, r24
    4472:	e2 5e       	subi	r30, 0xE2	; 226
    4474:	f1 40       	sbci	r31, 0x01	; 1
	memcpy (wk.mv.secuencia, (byte[]) {8, 2, 32, 1, 16, 4}, 6);
    4476:	9e 01       	movw	r18, r28
    4478:	2f 5f       	subi	r18, 0xFF	; 255
    447a:	3f 4f       	sbci	r19, 0xFF	; 255
    447c:	46 e1       	ldi	r20, 0x16	; 22
    447e:	55 e0       	ldi	r21, 0x05	; 5
    4480:	86 e0       	ldi	r24, 0x06	; 6
    4482:	da 01       	movw	r26, r20
    4484:	0d 90       	ld	r0, X+
    4486:	ad 01       	movw	r20, r26
    4488:	d9 01       	movw	r26, r18
    448a:	0d 92       	st	X+, r0
    448c:	9d 01       	movw	r18, r26
    448e:	81 50       	subi	r24, 0x01	; 1
    4490:	c1 f7       	brne	.-16     	; 0x4482 <_ZN10Movimiento12goto_pos_refEv+0x5c>
    4492:	9f 01       	movw	r18, r30
    4494:	2b 54       	subi	r18, 0x4B	; 75
    4496:	3f 4f       	sbci	r19, 0xFF	; 255
    4498:	ae 01       	movw	r20, r28
    449a:	4f 5f       	subi	r20, 0xFF	; 255
    449c:	5f 4f       	sbci	r21, 0xFF	; 255
    449e:	86 e0       	ldi	r24, 0x06	; 6
    44a0:	da 01       	movw	r26, r20
    44a2:	0d 90       	ld	r0, X+
    44a4:	ad 01       	movw	r20, r26
    44a6:	d9 01       	movw	r26, r18
    44a8:	0d 92       	st	X+, r0
    44aa:	9d 01       	movw	r18, r26
    44ac:	81 50       	subi	r24, 0x01	; 1
    44ae:	c1 f7       	brne	.-16     	; 0x44a0 <_ZN10Movimiento12goto_pos_refEv+0x7a>
	wk.mv.fases = 6;
    44b0:	e5 54       	subi	r30, 0x45	; 69
    44b2:	ff 4f       	sbci	r31, 0xFF	; 255
    44b4:	86 e0       	ldi	r24, 0x06	; 6
    44b6:	81 93       	st	Z+, r24
	wk.mv.agrupamiento = 1;
    44b8:	81 e0       	ldi	r24, 0x01	; 1
    44ba:	80 83       	st	Z, r24
	sh.mv.escala = 1;
    44bc:	ec 5d       	subi	r30, 0xDC	; 220
    44be:	fe 4f       	sbci	r31, 0xFE	; 254
    44c0:	80 83       	st	Z, r24
	wk.mv.periodo_sub_ciclo = 15;
    44c2:	e3 52       	subi	r30, 0x23	; 35
    44c4:	f1 40       	sbci	r31, 0x01	; 1
    44c6:	8f e0       	ldi	r24, 0x0F	; 15
    44c8:	90 e0       	ldi	r25, 0x00	; 0
    44ca:	81 93       	st	Z+, r24
    44cc:	91 93       	st	Z+, r25
	wk.mv.periodo_pasos = 15;
    44ce:	81 93       	st	Z+, r24
    44d0:	91 93       	st	Z+, r25
	wk.mv.duracion_pasos = 60;
    44d2:	8c e3       	ldi	r24, 0x3C	; 60
    44d4:	90 e0       	ldi	r25, 0x00	; 0
    44d6:	91 83       	std	Z+1, r25	; 0x01
    44d8:	80 83       	st	Z, r24
	wk.mv.altura_pasito = 10;
    44da:	33 96       	adiw	r30, 0x03	; 3
    44dc:	80 e0       	ldi	r24, 0x00	; 0
    44de:	90 e0       	ldi	r25, 0x00	; 0
    44e0:	a0 e2       	ldi	r26, 0x20	; 32
    44e2:	b1 e4       	ldi	r27, 0x41	; 65
    44e4:	80 83       	st	Z, r24
    44e6:	91 83       	std	Z+1, r25	; 0x01
    44e8:	a2 83       	std	Z+2, r26	; 0x02
    44ea:	b3 83       	std	Z+3, r27	; 0x03
	sh.mv.nsegmentos = 7;
    44ec:	e3 5e       	subi	r30, 0xE3	; 227
    44ee:	fe 4f       	sbci	r31, 0xFE	; 254
    44f0:	87 e0       	ldi	r24, 0x07	; 7
    44f2:	80 83       	st	Z, r24
    44f4:	e1 5e       	subi	r30, 0xE1	; 225
    44f6:	f1 40       	sbci	r31, 0x01	; 1
	caminata (false);
    44f8:	cf 01       	movw	r24, r30
    44fa:	60 e0       	ldi	r22, 0x00	; 0
    44fc:	0e 94 04 3d 	call	0x7a08	; 0x7a08 <_ZN10Movimiento8caminataEb>
}
    4500:	26 96       	adiw	r28, 0x06	; 6
    4502:	0f b6       	in	r0, 0x3f	; 63
    4504:	f8 94       	cli
    4506:	de bf       	out	0x3e, r29	; 62
    4508:	0f be       	out	0x3f, r0	; 63
    450a:	cd bf       	out	0x3d, r28	; 61
    450c:	cf 91       	pop	r28
    450e:	df 91       	pop	r29
    4510:	08 95       	ret

00004512 <_ZN10Movimiento12goto_pos_refEP7COORD3D>:
    eventos.add ((MOVDATA) {1<<pata, posicion[pata], duracion, true}, comienzo); 
  }
}

// adopta una posición indirectamente, dando "pasitos"
void Movimiento::goto_pos_ref (COORD3D posicion[]) {
    4512:	0f 93       	push	r16
    4514:	1f 93       	push	r17
    4516:	8c 01       	movw	r16, r24
	set_pos_ref (posicion);
    4518:	0e 94 09 22 	call	0x4412	; 0x4412 <_ZN10Movimiento11set_pos_refEP7COORD3D>
	goto_pos_ref ();
    451c:	c8 01       	movw	r24, r16
    451e:	0e 94 13 22 	call	0x4426	; 0x4426 <_ZN10Movimiento12goto_pos_refEv>
}
    4522:	1f 91       	pop	r17
    4524:	0f 91       	pop	r16
    4526:	08 95       	ret

00004528 <_ZN10Movimiento13osc_randomizeEffhf>:
	}
}

// prueba de randomizador
// nota: el centro de rotación tendría que ser una referencia seteable en la clase "movimiento", y su oscilación en torno a ella --> hecho
void Movimiento::osc_randomize (float amplitud, float frecuencia, byte parameters_flag, float curvature) { 
    4528:	2f 92       	push	r2
    452a:	3f 92       	push	r3
    452c:	4f 92       	push	r4
    452e:	5f 92       	push	r5
    4530:	6f 92       	push	r6
    4532:	7f 92       	push	r7
    4534:	8f 92       	push	r8
    4536:	9f 92       	push	r9
    4538:	af 92       	push	r10
    453a:	bf 92       	push	r11
    453c:	cf 92       	push	r12
    453e:	df 92       	push	r13
    4540:	ef 92       	push	r14
    4542:	ff 92       	push	r15
    4544:	0f 93       	push	r16
    4546:	1f 93       	push	r17
    4548:	df 93       	push	r29
    454a:	cf 93       	push	r28
    454c:	cd b7       	in	r28, 0x3d	; 61
    454e:	de b7       	in	r29, 0x3e	; 62
    4550:	2e 97       	sbiw	r28, 0x0e	; 14
    4552:	0f b6       	in	r0, 0x3f	; 63
    4554:	f8 94       	cli
    4556:	de bf       	out	0x3e, r29	; 62
    4558:	0f be       	out	0x3f, r0	; 63
    455a:	cd bf       	out	0x3d, r28	; 61
    455c:	4a 83       	std	Y+2, r20	; 0x02
    455e:	5b 83       	std	Y+3, r21	; 0x03
    4560:	6c 83       	std	Y+4, r22	; 0x04
    4562:	7d 83       	std	Y+5, r23	; 0x05
    4564:	18 01       	movw	r2, r16
    4566:	29 01       	movw	r4, r18
    4568:	ae 82       	std	Y+6, r10	; 0x06
    456a:	bf 82       	std	Y+7, r11	; 0x07
    456c:	c8 86       	std	Y+8, r12	; 0x08
    456e:	d9 86       	std	Y+9, r13	; 0x09
    4570:	88 24       	eor	r8, r8
    4572:	99 24       	eor	r9, r9
    4574:	19 82       	std	Y+1, r1	; 0x01
	/* parameters_flag = bit0 traslaciones, bit1 centro, bit2 rotaciones; default 7 o sea todo.
	   curvature afecta a las amplitudes, default = 3 o sea, tienden a 0   */
	for (byte index=0; index<3; index++) {
		bool active = parameters_flag & (1<<index);
    4576:	6e 2d       	mov	r22, r14
    4578:	70 e0       	ldi	r23, 0x00	; 0
    457a:	7c 87       	std	Y+12, r23	; 0x0c
    457c:	6b 87       	std	Y+11, r22	; 0x0b
    457e:	6b 84       	ldd	r6, Y+11	; 0x0b
    4580:	7c 84       	ldd	r7, Y+12	; 0x0c
    4582:	08 2c       	mov	r0, r8
    4584:	02 c0       	rjmp	.+4      	; 0x458a <_ZN10Movimiento13osc_randomizeEffhf+0x62>
    4586:	75 94       	asr	r7
    4588:	67 94       	ror	r6
    458a:	0a 94       	dec	r0
    458c:	e2 f7       	brpl	.-8      	; 0x4586 <_ZN10Movimiento13osc_randomizeEffhf+0x5e>
    458e:	71 e0       	ldi	r23, 0x01	; 1
    4590:	67 22       	and	r6, r23
    4592:	77 24       	eor	r7, r7
    4594:	1e 86       	std	Y+14, r1	; 0x0e
    4596:	1d 86       	std	Y+13, r1	; 0x0d
		for (byte subindex=0; subindex<3; subindex++) {
			float amp=0, freq=0, fase=0;
			if (active) {
				amp	= amplitud * log_random (curvature);
    4598:	8a 86       	std	Y+10, r8	; 0x0a
	   curvature afecta a las amplitudes, default = 3 o sea, tienden a 0   */
	for (byte index=0; index<3; index++) {
		bool active = parameters_flag & (1<<index);
		for (byte subindex=0; subindex<3; subindex++) {
			float amp=0, freq=0, fase=0;
			if (active) {
    459a:	61 14       	cp	r6, r1
    459c:	71 04       	cpc	r7, r1
    459e:	79 f4       	brne	.+30     	; 0x45be <_ZN10Movimiento13osc_randomizeEffhf+0x96>
    45a0:	0f 2e       	mov	r0, r31
    45a2:	f0 e0       	ldi	r31, 0x00	; 0
    45a4:	af 2e       	mov	r10, r31
    45a6:	f0 e0       	ldi	r31, 0x00	; 0
    45a8:	bf 2e       	mov	r11, r31
    45aa:	f0 e0       	ldi	r31, 0x00	; 0
    45ac:	cf 2e       	mov	r12, r31
    45ae:	f0 e0       	ldi	r31, 0x00	; 0
    45b0:	df 2e       	mov	r13, r31
    45b2:	f0 2d       	mov	r31, r0
    45b4:	86 01       	movw	r16, r12
    45b6:	75 01       	movw	r14, r10
    45b8:	a6 01       	movw	r20, r12
    45ba:	95 01       	movw	r18, r10
    45bc:	4d c0       	rjmp	.+154    	; 0x4658 <_ZN10Movimiento13osc_randomizeEffhf+0x130>
				amp	= amplitud * log_random (curvature);
    45be:	6e 81       	ldd	r22, Y+6	; 0x06
    45c0:	7f 81       	ldd	r23, Y+7	; 0x07
    45c2:	88 85       	ldd	r24, Y+8	; 0x08
    45c4:	99 85       	ldd	r25, Y+9	; 0x09
    45c6:	0e 94 3c 67 	call	0xce78	; 0xce78 <_Z10log_randomf>
    45ca:	9b 01       	movw	r18, r22
    45cc:	ac 01       	movw	r20, r24
    45ce:	6a 81       	ldd	r22, Y+2	; 0x02
    45d0:	7b 81       	ldd	r23, Y+3	; 0x03
    45d2:	8c 81       	ldd	r24, Y+4	; 0x04
    45d4:	9d 81       	ldd	r25, Y+5	; 0x05
    45d6:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    45da:	5b 01       	movw	r10, r22
    45dc:	6c 01       	movw	r12, r24
				if (index==1) {amp *= 2;}                           // para el centro, más efecto       
    45de:	8a 85       	ldd	r24, Y+10	; 0x0a
    45e0:	81 30       	cpi	r24, 0x01	; 1
    45e2:	39 f4       	brne	.+14     	; 0x45f2 <_ZN10Movimiento13osc_randomizeEffhf+0xca>
    45e4:	c6 01       	movw	r24, r12
    45e6:	b5 01       	movw	r22, r10
    45e8:	a6 01       	movw	r20, r12
    45ea:	95 01       	movw	r18, r10
    45ec:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    45f0:	0b c0       	rjmp	.+22     	; 0x4608 <_ZN10Movimiento13osc_randomizeEffhf+0xe0>
				else if (index == 2) {amp /= 15;}                    // para los ángulos, radio=15
    45f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    45f4:	92 30       	cpi	r25, 0x02	; 2
    45f6:	51 f4       	brne	.+20     	; 0x460c <_ZN10Movimiento13osc_randomizeEffhf+0xe4>
    45f8:	c6 01       	movw	r24, r12
    45fa:	b5 01       	movw	r22, r10
    45fc:	20 e0       	ldi	r18, 0x00	; 0
    45fe:	30 e0       	ldi	r19, 0x00	; 0
    4600:	40 e7       	ldi	r20, 0x70	; 112
    4602:	51 e4       	ldi	r21, 0x41	; 65
    4604:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    4608:	5b 01       	movw	r10, r22
    460a:	6c 01       	movw	r12, r24
				freq = random (frecuencia/3, frecuencia*3);
    460c:	c2 01       	movw	r24, r4
    460e:	b1 01       	movw	r22, r2
    4610:	20 e0       	ldi	r18, 0x00	; 0
    4612:	30 e0       	ldi	r19, 0x00	; 0
    4614:	40 e4       	ldi	r20, 0x40	; 64
    4616:	50 e4       	ldi	r21, 0x40	; 64
    4618:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    461c:	7b 01       	movw	r14, r22
    461e:	8c 01       	movw	r16, r24
    4620:	c2 01       	movw	r24, r4
    4622:	b1 01       	movw	r22, r2
    4624:	20 e0       	ldi	r18, 0x00	; 0
    4626:	30 e0       	ldi	r19, 0x00	; 0
    4628:	40 e4       	ldi	r20, 0x40	; 64
    462a:	50 e4       	ldi	r21, 0x40	; 64
    462c:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    4630:	9b 01       	movw	r18, r22
    4632:	ac 01       	movw	r20, r24
    4634:	c8 01       	movw	r24, r16
    4636:	b7 01       	movw	r22, r14
    4638:	0e 94 8d 66 	call	0xcd1a	; 0xcd1a <_Z6randomff>
    463c:	7b 01       	movw	r14, r22
    463e:	8c 01       	movw	r16, r24
				fase = random (-PI, PI);
    4640:	6b ed       	ldi	r22, 0xDB	; 219
    4642:	7f e0       	ldi	r23, 0x0F	; 15
    4644:	89 e4       	ldi	r24, 0x49	; 73
    4646:	90 ec       	ldi	r25, 0xC0	; 192
    4648:	2b ed       	ldi	r18, 0xDB	; 219
    464a:	3f e0       	ldi	r19, 0x0F	; 15
    464c:	49 e4       	ldi	r20, 0x49	; 73
    464e:	50 e4       	ldi	r21, 0x40	; 64
    4650:	0e 94 8d 66 	call	0xcd1a	; 0xcd1a <_Z6randomff>
    4654:	9b 01       	movw	r18, r22
    4656:	ac 01       	movw	r20, r24
}

///////////////////////////////////////// OSCILADORES /////////////////////////////////////////

void Movimiento::set_oscilador (byte parametro, float amplitud, float frecuencia, float fase, bool brown) {
	bd.oscilator [parametro] = (OSCILATOR) {amplitud, frecuencia, fase, brown};
    4658:	89 81       	ldd	r24, Y+1	; 0x01
    465a:	ed 85       	ldd	r30, Y+13	; 0x0d
    465c:	8e 0f       	add	r24, r30
    465e:	90 e0       	ldi	r25, 0x00	; 0
    4660:	6d e0       	ldi	r22, 0x0D	; 13
    4662:	70 e0       	ldi	r23, 0x00	; 0
    4664:	86 9f       	mul	r24, r22
    4666:	f0 01       	movw	r30, r0
    4668:	87 9f       	mul	r24, r23
    466a:	f0 0d       	add	r31, r0
    466c:	96 9f       	mul	r25, r22
    466e:	f0 0d       	add	r31, r0
    4670:	11 24       	eor	r1, r1
    4672:	ef 51       	subi	r30, 0x1F	; 31
    4674:	ff 4e       	sbci	r31, 0xEF	; 239
    4676:	a4 82       	std	Z+4, r10	; 0x04
    4678:	b5 82       	std	Z+5, r11	; 0x05
    467a:	c6 82       	std	Z+6, r12	; 0x06
    467c:	d7 82       	std	Z+7, r13	; 0x07
    467e:	e0 86       	std	Z+8, r14	; 0x08
    4680:	f1 86       	std	Z+9, r15	; 0x09
    4682:	02 87       	std	Z+10, r16	; 0x0a
    4684:	13 87       	std	Z+11, r17	; 0x0b
    4686:	24 87       	std	Z+12, r18	; 0x0c
    4688:	35 87       	std	Z+13, r19	; 0x0d
    468a:	46 87       	std	Z+14, r20	; 0x0e
    468c:	57 87       	std	Z+15, r21	; 0x0f
    468e:	10 8a       	std	Z+16, r1	; 0x10
    4690:	8d 85       	ldd	r24, Y+13	; 0x0d
    4692:	9e 85       	ldd	r25, Y+14	; 0x0e
    4694:	01 96       	adiw	r24, 0x01	; 1
    4696:	9e 87       	std	Y+14, r25	; 0x0e
    4698:	8d 87       	std	Y+13, r24	; 0x0d
void Movimiento::osc_randomize (float amplitud, float frecuencia, byte parameters_flag, float curvature) { 
	/* parameters_flag = bit0 traslaciones, bit1 centro, bit2 rotaciones; default 7 o sea todo.
	   curvature afecta a las amplitudes, default = 3 o sea, tienden a 0   */
	for (byte index=0; index<3; index++) {
		bool active = parameters_flag & (1<<index);
		for (byte subindex=0; subindex<3; subindex++) {
    469a:	03 97       	sbiw	r24, 0x03	; 3
    469c:	09 f0       	breq	.+2      	; 0x46a0 <_ZN10Movimiento13osc_randomizeEffhf+0x178>
    469e:	7d cf       	rjmp	.-262    	; 0x459a <_ZN10Movimiento13osc_randomizeEffhf+0x72>
    46a0:	08 94       	sec
    46a2:	81 1c       	adc	r8, r1
    46a4:	91 1c       	adc	r9, r1
    46a6:	99 81       	ldd	r25, Y+1	; 0x01
    46a8:	9d 5f       	subi	r25, 0xFD	; 253
    46aa:	99 83       	std	Y+1, r25	; 0x01
// prueba de randomizador
// nota: el centro de rotación tendría que ser una referencia seteable en la clase "movimiento", y su oscilación en torno a ella --> hecho
void Movimiento::osc_randomize (float amplitud, float frecuencia, byte parameters_flag, float curvature) { 
	/* parameters_flag = bit0 traslaciones, bit1 centro, bit2 rotaciones; default 7 o sea todo.
	   curvature afecta a las amplitudes, default = 3 o sea, tienden a 0   */
	for (byte index=0; index<3; index++) {
    46ac:	99 30       	cpi	r25, 0x09	; 9
    46ae:	09 f0       	breq	.+2      	; 0x46b2 <_ZN10Movimiento13osc_randomizeEffhf+0x18a>
    46b0:	66 cf       	rjmp	.-308    	; 0x457e <_ZN10Movimiento13osc_randomizeEffhf+0x56>
				fase = random (-PI, PI);
			}
			mov.set_oscilador (3*index+subindex, amp, freq, fase, false);
		}
	}
}
    46b2:	2e 96       	adiw	r28, 0x0e	; 14
    46b4:	0f b6       	in	r0, 0x3f	; 63
    46b6:	f8 94       	cli
    46b8:	de bf       	out	0x3e, r29	; 62
    46ba:	0f be       	out	0x3f, r0	; 63
    46bc:	cd bf       	out	0x3d, r28	; 61
    46be:	cf 91       	pop	r28
    46c0:	df 91       	pop	r29
    46c2:	1f 91       	pop	r17
    46c4:	0f 91       	pop	r16
    46c6:	ff 90       	pop	r15
    46c8:	ef 90       	pop	r14
    46ca:	df 90       	pop	r13
    46cc:	cf 90       	pop	r12
    46ce:	bf 90       	pop	r11
    46d0:	af 90       	pop	r10
    46d2:	9f 90       	pop	r9
    46d4:	8f 90       	pop	r8
    46d6:	7f 90       	pop	r7
    46d8:	6f 90       	pop	r6
    46da:	5f 90       	pop	r5
    46dc:	4f 90       	pop	r4
    46de:	3f 90       	pop	r3
    46e0:	2f 90       	pop	r2
    46e2:	08 95       	ret

000046e4 <_ZN10Movimiento9osciladorEfi>:

void Movimiento::set_brown (byte parametro, bool value) {
	bd.oscilator [parametro].brown = value;
}

void Movimiento::oscilador (float frecuencia_fund, int duracion) {
    46e4:	cf 92       	push	r12
    46e6:	df 92       	push	r13
    46e8:	ef 92       	push	r14
    46ea:	ff 92       	push	r15
    46ec:	0f 93       	push	r16
    46ee:	1f 93       	push	r17
    46f0:	8c 01       	movw	r16, r24
    46f2:	69 01       	movw	r12, r18
  // duración en TICKS (4ms), igual que en las rutinas del tronco, en la 'event', en la 'pasito'
	
	sh.mv.escala = 1.0/(CIRCLE_RES*TICK*frecuencia_fund);                   // período en TICKS para una subdivisión del círculo
    46f4:	cb 01       	movw	r24, r22
    46f6:	ba 01       	movw	r22, r20
    46f8:	26 ea       	ldi	r18, 0xA6	; 166
    46fa:	3b e9       	ldi	r19, 0x9B	; 155
    46fc:	44 ec       	ldi	r20, 0xC4	; 196
    46fe:	5d e3       	ldi	r21, 0x3D	; 61
    4700:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    4704:	9b 01       	movw	r18, r22
    4706:	ac 01       	movw	r20, r24
    4708:	60 e0       	ldi	r22, 0x00	; 0
    470a:	70 e0       	ldi	r23, 0x00	; 0
    470c:	80 e8       	ldi	r24, 0x80	; 128
    470e:	9f e3       	ldi	r25, 0x3F	; 63
    4710:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    4714:	0e 94 3f 7d 	call	0xfa7e	; 0xfa7e <__fixunssfsi>
    4718:	9b 01       	movw	r18, r22
    471a:	ac 01       	movw	r20, r24
    471c:	50 ee       	ldi	r21, 0xE0	; 224
    471e:	e5 2e       	mov	r14, r21
    4720:	51 e0       	ldi	r21, 0x01	; 1
    4722:	f5 2e       	mov	r15, r21
    4724:	e0 0e       	add	r14, r16
    4726:	f1 1e       	adc	r15, r17
    4728:	f7 01       	movw	r30, r14
    472a:	20 83       	st	Z, r18
	sh.mv.nsegmentos = nseg (sh.mv.escala);                     
    472c:	c8 01       	movw	r24, r16
    472e:	62 2f       	mov	r22, r18
    4730:	70 e0       	ldi	r23, 0x00	; 0
    4732:	0e 94 6d 28 	call	0x50da	; 0x50da <_ZN10Movimiento4nsegEi>
    4736:	0f 51       	subi	r16, 0x1F	; 31
    4738:	1e 4f       	sbci	r17, 0xFE	; 254
    473a:	f8 01       	movw	r30, r16
    473c:	81 93       	st	Z+, r24
    473e:	8f 01       	movw	r16, r30
	sh.mv.ticks = duracion/sh.mv.escala;
    4740:	f7 01       	movw	r30, r14
    4742:	60 81       	ld	r22, Z
    4744:	c6 01       	movw	r24, r12
    4746:	70 e0       	ldi	r23, 0x00	; 0
    4748:	0e 94 1f 81 	call	0x1023e	; 0x1023e <__divmodhi4>
    474c:	f8 01       	movw	r30, r16
    474e:	71 83       	std	Z+1, r23	; 0x01
    4750:	60 83       	st	Z, r22
	sh.cn.mode = TRONCO;
    4752:	0d 5f       	subi	r16, 0xFD	; 253
    4754:	1f 4f       	sbci	r17, 0xFF	; 255
    4756:	81 e0       	ldi	r24, 0x01	; 1
    4758:	f8 01       	movw	r30, r16
    475a:	80 83       	st	Z, r24
    475c:	05 5e       	subi	r16, 0xE5	; 229
    475e:	11 40       	sbci	r17, 0x01	; 1
	start ();
    4760:	c8 01       	movw	r24, r16
    4762:	0e 94 d2 3c 	call	0x79a4	; 0x79a4 <_ZN10Movimiento5startEv>
	
}
    4766:	1f 91       	pop	r17
    4768:	0f 91       	pop	r16
    476a:	ff 90       	pop	r15
    476c:	ef 90       	pop	r14
    476e:	df 90       	pop	r13
    4770:	cf 90       	pop	r12
    4772:	08 95       	ret

00004774 <_ZN10Movimiento5saltoEff>:
  if (do_rotate) {
    free (matrix);
  }
}

void Movimiento::salto (float modulo, float angulo) {
    4774:	4f 92       	push	r4
    4776:	5f 92       	push	r5
    4778:	6f 92       	push	r6
    477a:	7f 92       	push	r7
    477c:	8f 92       	push	r8
    477e:	9f 92       	push	r9
    4780:	af 92       	push	r10
    4782:	bf 92       	push	r11
    4784:	cf 92       	push	r12
    4786:	df 92       	push	r13
    4788:	ef 92       	push	r14
    478a:	ff 92       	push	r15
    478c:	0f 93       	push	r16
    478e:	1f 93       	push	r17
    4790:	df 93       	push	r29
    4792:	cf 93       	push	r28
    4794:	cd b7       	in	r28, 0x3d	; 61
    4796:	de b7       	in	r29, 0x3e	; 62
    4798:	68 97       	sbiw	r28, 0x18	; 24
    479a:	0f b6       	in	r0, 0x3f	; 63
    479c:	f8 94       	cli
    479e:	de bf       	out	0x3e, r29	; 62
    47a0:	0f be       	out	0x3f, r0	; 63
    47a2:	cd bf       	out	0x3d, r28	; 61
    47a4:	6a 01       	movw	r12, r20
    47a6:	7b 01       	movw	r14, r22
    47a8:	48 01       	movw	r8, r16
    47aa:	59 01       	movw	r10, r18
	COORD3D vector = (COORD3D) {-modulo*cos(angulo), -modulo, -modulo*sin(angulo)};  
    47ac:	f7 fa       	bst	r15, 7
    47ae:	f0 94       	com	r15
    47b0:	f7 f8       	bld	r15, 7
    47b2:	f0 94       	com	r15
    47b4:	c9 01       	movw	r24, r18
    47b6:	b8 01       	movw	r22, r16
    47b8:	0e 94 9e 7c 	call	0xf93c	; 0xf93c <cos>
    47bc:	2b 01       	movw	r4, r22
    47be:	3c 01       	movw	r6, r24
    47c0:	c5 01       	movw	r24, r10
    47c2:	b4 01       	movw	r22, r8
    47c4:	0e 94 5f 80 	call	0x100be	; 0x100be <sin>
    47c8:	4b 01       	movw	r8, r22
    47ca:	5c 01       	movw	r10, r24
    47cc:	c7 01       	movw	r24, r14
    47ce:	b6 01       	movw	r22, r12
    47d0:	a3 01       	movw	r20, r6
    47d2:	92 01       	movw	r18, r4
    47d4:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    47d8:	69 83       	std	Y+1, r22	; 0x01
    47da:	7a 83       	std	Y+2, r23	; 0x02
    47dc:	8b 83       	std	Y+3, r24	; 0x03
    47de:	9c 83       	std	Y+4, r25	; 0x04
    47e0:	cd 82       	std	Y+5, r12	; 0x05
    47e2:	de 82       	std	Y+6, r13	; 0x06
    47e4:	ef 82       	std	Y+7, r14	; 0x07
    47e6:	f8 86       	std	Y+8, r15	; 0x08
    47e8:	c7 01       	movw	r24, r14
    47ea:	b6 01       	movw	r22, r12
    47ec:	a5 01       	movw	r20, r10
    47ee:	94 01       	movw	r18, r8
    47f0:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    47f4:	69 87       	std	Y+9, r22	; 0x09
    47f6:	7a 87       	std	Y+10, r23	; 0x0a
    47f8:	8b 87       	std	Y+11, r24	; 0x0b
    47fa:	9c 87       	std	Y+12, r25	; 0x0c
	mov.pasito (63, (COORD3D){0,0,0}, false, 0, 15, 5, vector);
    47fc:	de 01       	movw	r26, r28
    47fe:	1d 96       	adiw	r26, 0x0d	; 13
    4800:	e4 e2       	ldi	r30, 0x24	; 36
    4802:	f5 e0       	ldi	r31, 0x05	; 5
    4804:	8c e0       	ldi	r24, 0x0C	; 12
    4806:	01 90       	ld	r0, Z+
    4808:	0d 92       	st	X+, r0
    480a:	81 50       	subi	r24, 0x01	; 1
    480c:	e1 f7       	brne	.-8      	; 0x4806 <_ZN10Movimiento5saltoEff+0x92>
    480e:	8d b7       	in	r24, 0x3d	; 61
    4810:	9e b7       	in	r25, 0x3e	; 62
    4812:	43 97       	sbiw	r24, 0x13	; 19
    4814:	0f b6       	in	r0, 0x3f	; 63
    4816:	f8 94       	cli
    4818:	9e bf       	out	0x3e, r25	; 62
    481a:	0f be       	out	0x3f, r0	; 63
    481c:	8d bf       	out	0x3d, r24	; 61
    481e:	ed b7       	in	r30, 0x3d	; 61
    4820:	fe b7       	in	r31, 0x3e	; 62
    4822:	31 96       	adiw	r30, 0x01	; 1
    4824:	20 e0       	ldi	r18, 0x00	; 0
    4826:	30 e0       	ldi	r19, 0x00	; 0
    4828:	40 e0       	ldi	r20, 0x00	; 0
    482a:	50 e0       	ldi	r21, 0x00	; 0
    482c:	ad b7       	in	r26, 0x3d	; 61
    482e:	be b7       	in	r27, 0x3e	; 62
    4830:	11 96       	adiw	r26, 0x01	; 1
    4832:	2d 93       	st	X+, r18
    4834:	3d 93       	st	X+, r19
    4836:	4d 93       	st	X+, r20
    4838:	5c 93       	st	X, r21
    483a:	14 97       	sbiw	r26, 0x04	; 4
    483c:	8f e0       	ldi	r24, 0x0F	; 15
    483e:	90 e0       	ldi	r25, 0x00	; 0
    4840:	95 83       	std	Z+5, r25	; 0x05
    4842:	84 83       	std	Z+4, r24	; 0x04
    4844:	85 e0       	ldi	r24, 0x05	; 5
    4846:	86 83       	std	Z+6, r24	; 0x06
    4848:	18 96       	adiw	r26, 0x08	; 8
    484a:	fe 01       	movw	r30, r28
    484c:	31 96       	adiw	r30, 0x01	; 1
    484e:	8c e0       	ldi	r24, 0x0C	; 12
    4850:	01 90       	ld	r0, Z+
    4852:	0d 92       	st	X+, r0
    4854:	81 50       	subi	r24, 0x01	; 1
    4856:	e1 f7       	brne	.-8      	; 0x4850 <_ZN10Movimiento5saltoEff+0xdc>
    4858:	81 ee       	ldi	r24, 0xE1	; 225
    485a:	90 e1       	ldi	r25, 0x10	; 16
    485c:	6f e3       	ldi	r22, 0x3F	; 63
    485e:	ad 84       	ldd	r10, Y+13	; 0x0d
    4860:	be 84       	ldd	r11, Y+14	; 0x0e
    4862:	cf 84       	ldd	r12, Y+15	; 0x0f
    4864:	d8 88       	ldd	r13, Y+16	; 0x10
    4866:	e9 88       	ldd	r14, Y+17	; 0x11
    4868:	fa 88       	ldd	r15, Y+18	; 0x12
    486a:	0b 89       	ldd	r16, Y+19	; 0x13
    486c:	1c 89       	ldd	r17, Y+20	; 0x14
    486e:	2d 89       	ldd	r18, Y+21	; 0x15
    4870:	3e 89       	ldd	r19, Y+22	; 0x16
    4872:	4f 89       	ldd	r20, Y+23	; 0x17
    4874:	58 8d       	ldd	r21, Y+24	; 0x18
    4876:	88 24       	eor	r8, r8
    4878:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <_ZN10Movimiento6pasitoEh7COORD3DbfihS0_>
    487c:	8d b7       	in	r24, 0x3d	; 61
    487e:	9e b7       	in	r25, 0x3e	; 62
    4880:	43 96       	adiw	r24, 0x13	; 19
    4882:	0f b6       	in	r0, 0x3f	; 63
    4884:	f8 94       	cli
    4886:	9e bf       	out	0x3e, r25	; 62
    4888:	0f be       	out	0x3f, r0	; 63
    488a:	8d bf       	out	0x3d, r24	; 61
}
    488c:	68 96       	adiw	r28, 0x18	; 24
    488e:	0f b6       	in	r0, 0x3f	; 63
    4890:	f8 94       	cli
    4892:	de bf       	out	0x3e, r29	; 62
    4894:	0f be       	out	0x3f, r0	; 63
    4896:	cd bf       	out	0x3d, r28	; 61
    4898:	cf 91       	pop	r28
    489a:	df 91       	pop	r29
    489c:	1f 91       	pop	r17
    489e:	0f 91       	pop	r16
    48a0:	ff 90       	pop	r15
    48a2:	ef 90       	pop	r14
    48a4:	df 90       	pop	r13
    48a6:	cf 90       	pop	r12
    48a8:	bf 90       	pop	r11
    48aa:	af 90       	pop	r10
    48ac:	9f 90       	pop	r9
    48ae:	8f 90       	pop	r8
    48b0:	7f 90       	pop	r7
    48b2:	6f 90       	pop	r6
    48b4:	5f 90       	pop	r5
    48b6:	4f 90       	pop	r4
    48b8:	08 95       	ret

000048ba <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih>:
}

// rotaciones y traslaciones del tronco 
// las dos rutinas anteriores mueven desde la posición actual, 
// en cambio esta mueve desde la posición de referencia que le pasen
void Movimiento::tronco (COORD3D *pos_ref, COORD3D traslacion, COORD3D centro, float angulox, float anguloy, float anguloz, int duracion, byte nsegmentos) {
    48ba:	2f 92       	push	r2
    48bc:	3f 92       	push	r3
    48be:	4f 92       	push	r4
    48c0:	5f 92       	push	r5
    48c2:	6f 92       	push	r6
    48c4:	7f 92       	push	r7
    48c6:	8f 92       	push	r8
    48c8:	9f 92       	push	r9
    48ca:	af 92       	push	r10
    48cc:	bf 92       	push	r11
    48ce:	cf 92       	push	r12
    48d0:	df 92       	push	r13
    48d2:	ef 92       	push	r14
    48d4:	ff 92       	push	r15
    48d6:	0f 93       	push	r16
    48d8:	1f 93       	push	r17
    48da:	df 93       	push	r29
    48dc:	cf 93       	push	r28
    48de:	cd b7       	in	r28, 0x3d	; 61
    48e0:	de b7       	in	r29, 0x3e	; 62
    48e2:	c9 5a       	subi	r28, 0xA9	; 169
    48e4:	d0 40       	sbci	r29, 0x00	; 0
    48e6:	0f b6       	in	r0, 0x3f	; 63
    48e8:	f8 94       	cli
    48ea:	de bf       	out	0x3e, r29	; 62
    48ec:	0f be       	out	0x3f, r0	; 63
    48ee:	cd bf       	out	0x3d, r28	; 61
    48f0:	ca 55       	subi	r28, 0x5A	; 90
    48f2:	df 4f       	sbci	r29, 0xFF	; 255
    48f4:	99 83       	std	Y+1, r25	; 0x01
    48f6:	88 83       	st	Y, r24
    48f8:	c6 5a       	subi	r28, 0xA6	; 166
    48fa:	d0 40       	sbci	r29, 0x00	; 0
    48fc:	96 2e       	mov	r9, r22
    48fe:	87 2e       	mov	r8, r23
    4900:	fe 01       	movw	r30, r28
    4902:	e7 5b       	subi	r30, 0xB7	; 183
    4904:	ff 4f       	sbci	r31, 0xFF	; 255
    4906:	a0 82       	st	Z, r10
    4908:	b1 82       	std	Z+1, r11	; 0x01
    490a:	c2 82       	std	Z+2, r12	; 0x02
    490c:	d3 82       	std	Z+3, r13	; 0x03
    490e:	e4 82       	std	Z+4, r14	; 0x04
    4910:	f5 82       	std	Z+5, r15	; 0x05
    4912:	06 83       	std	Z+6, r16	; 0x06
    4914:	17 83       	std	Z+7, r17	; 0x07
    4916:	20 87       	std	Z+8, r18	; 0x08
    4918:	31 87       	std	Z+9, r19	; 0x09
    491a:	42 87       	std	Z+10, r20	; 0x0a
    491c:	53 87       	std	Z+11, r21	; 0x0b
    491e:	c6 53       	subi	r28, 0x36	; 54
    4920:	df 4f       	sbci	r29, 0xFF	; 255
    4922:	48 80       	ld	r4, Y
    4924:	59 80       	ldd	r5, Y+1	; 0x01
    4926:	6a 80       	ldd	r6, Y+2	; 0x02
    4928:	7b 80       	ldd	r7, Y+3	; 0x03
    492a:	ca 5c       	subi	r28, 0xCA	; 202
    492c:	d0 40       	sbci	r29, 0x00	; 0
    492e:	ca 52       	subi	r28, 0x2A	; 42
    4930:	df 4f       	sbci	r29, 0xFF	; 255
    4932:	08 81       	ld	r16, Y
    4934:	19 81       	ldd	r17, Y+1	; 0x01
    4936:	c6 5d       	subi	r28, 0xD6	; 214
    4938:	d0 40       	sbci	r29, 0x00	; 0
  
  if (nsegmentos == 0) {nsegmentos = nseg (duracion);}
    493a:	c8 52       	subi	r28, 0x28	; 40
    493c:	df 4f       	sbci	r29, 0xFF	; 255
    493e:	88 81       	ld	r24, Y
    4940:	c8 5d       	subi	r28, 0xD8	; 216
    4942:	d0 40       	sbci	r29, 0x00	; 0
    4944:	88 23       	and	r24, r24
    4946:	71 f4       	brne	.+28     	; 0x4964 <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0xaa>
    4948:	ca 55       	subi	r28, 0x5A	; 90
    494a:	df 4f       	sbci	r29, 0xFF	; 255
    494c:	88 81       	ld	r24, Y
    494e:	99 81       	ldd	r25, Y+1	; 0x01
    4950:	c6 5a       	subi	r28, 0xA6	; 166
    4952:	d0 40       	sbci	r29, 0x00	; 0
    4954:	b8 01       	movw	r22, r16
    4956:	0e 94 6d 28 	call	0x50da	; 0x50da <_ZN10Movimiento4nsegEi>
    495a:	c8 52       	subi	r28, 0x28	; 40
    495c:	df 4f       	sbci	r29, 0xFF	; 255
    495e:	88 83       	st	Y, r24
    4960:	c8 5d       	subi	r28, 0xD8	; 216
    4962:	d0 40       	sbci	r29, 0x00	; 0
	
  POSICION pos;
  memcpy (pos.patas, pos_ref, 6*sizeof(COORD3D));
    4964:	de 01       	movw	r26, r28
    4966:	11 96       	adiw	r26, 0x01	; 1
    4968:	89 2d       	mov	r24, r9
    496a:	98 2d       	mov	r25, r8
    496c:	9c 01       	movw	r18, r24
    496e:	f9 01       	movw	r30, r18
    4970:	88 e4       	ldi	r24, 0x48	; 72
    4972:	01 90       	ld	r0, Z+
    4974:	0d 92       	st	X+, r0
    4976:	81 50       	subi	r24, 0x01	; 1
    4978:	e1 f7       	brne	.-8      	; 0x4972 <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0xb8>
  COORD3D *matrix;
  float coeficiente = 1.0 / nsegmentos;  // modulo vector
    497a:	c8 52       	subi	r28, 0x28	; 40
    497c:	df 4f       	sbci	r29, 0xFF	; 255
    497e:	98 81       	ld	r25, Y
    4980:	c8 5d       	subi	r28, 0xD8	; 216
    4982:	d0 40       	sbci	r29, 0x00	; 0
    4984:	69 2f       	mov	r22, r25
    4986:	70 e0       	ldi	r23, 0x00	; 0
    4988:	88 27       	eor	r24, r24
    498a:	77 fd       	sbrc	r23, 7
    498c:	80 95       	com	r24
    498e:	98 2f       	mov	r25, r24
    4990:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    4994:	9b 01       	movw	r18, r22
    4996:	ac 01       	movw	r20, r24
    4998:	60 e0       	ldi	r22, 0x00	; 0
    499a:	70 e0       	ldi	r23, 0x00	; 0
    499c:	80 e8       	ldi	r24, 0x80	; 128
    499e:	9f e3       	ldi	r25, 0x3F	; 63
    49a0:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    49a4:	ce 55       	subi	r28, 0x5E	; 94
    49a6:	df 4f       	sbci	r29, 0xFF	; 255
    49a8:	68 83       	st	Y, r22
    49aa:	79 83       	std	Y+1, r23	; 0x01
    49ac:	8a 83       	std	Y+2, r24	; 0x02
    49ae:	9b 83       	std	Y+3, r25	; 0x03
    49b0:	c2 5a       	subi	r28, 0xA2	; 162
    49b2:	d0 40       	sbci	r29, 0x00	; 0
  float t = 0;
  int tps = duracion * coeficiente;    // ticks-per-segment
    49b4:	b8 01       	movw	r22, r16
    49b6:	88 27       	eor	r24, r24
    49b8:	77 fd       	sbrc	r23, 7
    49ba:	80 95       	com	r24
    49bc:	98 2f       	mov	r25, r24
    49be:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    49c2:	ce 55       	subi	r28, 0x5E	; 94
    49c4:	df 4f       	sbci	r29, 0xFF	; 255
    49c6:	28 81       	ld	r18, Y
    49c8:	39 81       	ldd	r19, Y+1	; 0x01
    49ca:	4a 81       	ldd	r20, Y+2	; 0x02
    49cc:	5b 81       	ldd	r21, Y+3	; 0x03
    49ce:	c2 5a       	subi	r28, 0xA2	; 162
    49d0:	d0 40       	sbci	r29, 0x00	; 0
    49d2:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    49d6:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <__fixsfsi>
    49da:	c0 56       	subi	r28, 0x60	; 96
    49dc:	df 4f       	sbci	r29, 0xFF	; 255
    49de:	79 83       	std	Y+1, r23	; 0x01
    49e0:	68 83       	st	Y, r22
    49e2:	c0 5a       	subi	r28, 0xA0	; 160
    49e4:	d0 40       	sbci	r29, 0x00	; 0
  
  bool do_traslate = (traslacion.x!=0 || traslacion.y!=0 || traslacion.z!=0);
    49e6:	8e 01       	movw	r16, r28
    49e8:	07 5b       	subi	r16, 0xB7	; 183
    49ea:	1f 4f       	sbci	r17, 0xFF	; 255
    49ec:	d8 01       	movw	r26, r16
    49ee:	6d 91       	ld	r22, X+
    49f0:	7d 91       	ld	r23, X+
    49f2:	8d 91       	ld	r24, X+
    49f4:	9c 91       	ld	r25, X
    49f6:	20 e0       	ldi	r18, 0x00	; 0
    49f8:	30 e0       	ldi	r19, 0x00	; 0
    49fa:	40 e0       	ldi	r20, 0x00	; 0
    49fc:	50 e0       	ldi	r21, 0x00	; 0
    49fe:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    4a02:	88 23       	and	r24, r24
    4a04:	11 f5       	brne	.+68     	; 0x4a4a <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x190>
    4a06:	f8 01       	movw	r30, r16
    4a08:	64 81       	ldd	r22, Z+4	; 0x04
    4a0a:	75 81       	ldd	r23, Z+5	; 0x05
    4a0c:	86 81       	ldd	r24, Z+6	; 0x06
    4a0e:	97 81       	ldd	r25, Z+7	; 0x07
    4a10:	20 e0       	ldi	r18, 0x00	; 0
    4a12:	30 e0       	ldi	r19, 0x00	; 0
    4a14:	40 e0       	ldi	r20, 0x00	; 0
    4a16:	50 e0       	ldi	r21, 0x00	; 0
    4a18:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    4a1c:	88 23       	and	r24, r24
    4a1e:	a9 f4       	brne	.+42     	; 0x4a4a <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x190>
    4a20:	d8 01       	movw	r26, r16
    4a22:	18 96       	adiw	r26, 0x08	; 8
    4a24:	6d 91       	ld	r22, X+
    4a26:	7d 91       	ld	r23, X+
    4a28:	8d 91       	ld	r24, X+
    4a2a:	9c 91       	ld	r25, X
    4a2c:	1b 97       	sbiw	r26, 0x0b	; 11
    4a2e:	20 e0       	ldi	r18, 0x00	; 0
    4a30:	30 e0       	ldi	r19, 0x00	; 0
    4a32:	40 e0       	ldi	r20, 0x00	; 0
    4a34:	50 e0       	ldi	r21, 0x00	; 0
    4a36:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    4a3a:	88 23       	and	r24, r24
    4a3c:	31 f4       	brne	.+12     	; 0x4a4a <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x190>
    4a3e:	c1 56       	subi	r28, 0x61	; 97
    4a40:	df 4f       	sbci	r29, 0xFF	; 255
    4a42:	18 82       	st	Y, r1
    4a44:	cf 59       	subi	r28, 0x9F	; 159
    4a46:	d0 40       	sbci	r29, 0x00	; 0
    4a48:	24 c0       	rjmp	.+72     	; 0x4a92 <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x1d8>
  if (do_traslate) {traslacion = producto (traslacion, -coeficiente);}
    4a4a:	fe 01       	movw	r30, r28
    4a4c:	e7 5b       	subi	r30, 0xB7	; 183
    4a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a50:	ce 55       	subi	r28, 0x5E	; 94
    4a52:	df 4f       	sbci	r29, 0xFF	; 255
    4a54:	88 80       	ld	r8, Y
    4a56:	99 80       	ldd	r9, Y+1	; 0x01
    4a58:	aa 80       	ldd	r10, Y+2	; 0x02
    4a5a:	bb 80       	ldd	r11, Y+3	; 0x03
    4a5c:	c2 5a       	subi	r28, 0xA2	; 162
    4a5e:	d0 40       	sbci	r29, 0x00	; 0
    4a60:	b7 fa       	bst	r11, 7
    4a62:	b0 94       	com	r11
    4a64:	b7 f8       	bld	r11, 7
    4a66:	b0 94       	com	r11
    4a68:	cf 01       	movw	r24, r30
    4a6a:	c0 80       	ld	r12, Z
    4a6c:	d1 80       	ldd	r13, Z+1	; 0x01
    4a6e:	e2 80       	ldd	r14, Z+2	; 0x02
    4a70:	f3 80       	ldd	r15, Z+3	; 0x03
    4a72:	04 81       	ldd	r16, Z+4	; 0x04
    4a74:	15 81       	ldd	r17, Z+5	; 0x05
    4a76:	26 81       	ldd	r18, Z+6	; 0x06
    4a78:	37 81       	ldd	r19, Z+7	; 0x07
    4a7a:	40 85       	ldd	r20, Z+8	; 0x08
    4a7c:	51 85       	ldd	r21, Z+9	; 0x09
    4a7e:	62 85       	ldd	r22, Z+10	; 0x0a
    4a80:	73 85       	ldd	r23, Z+11	; 0x0b
    4a82:	0e 94 a2 6a 	call	0xd544	; 0xd544 <_Z8producto7COORD3Df>
    4a86:	b1 e0       	ldi	r27, 0x01	; 1
    4a88:	c1 56       	subi	r28, 0x61	; 97
    4a8a:	df 4f       	sbci	r29, 0xFF	; 255
    4a8c:	b8 83       	st	Y, r27
    4a8e:	cf 59       	subi	r28, 0x9F	; 159
    4a90:	d0 40       	sbci	r29, 0x00	; 0
  bool do_rotate = (angulox!=0 || anguloy!=0 || anguloz!=0);
    4a92:	c3 01       	movw	r24, r6
    4a94:	b2 01       	movw	r22, r4
    4a96:	20 e0       	ldi	r18, 0x00	; 0
    4a98:	30 e0       	ldi	r19, 0x00	; 0
    4a9a:	40 e0       	ldi	r20, 0x00	; 0
    4a9c:	50 e0       	ldi	r21, 0x00	; 0
    4a9e:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    4aa2:	88 23       	and	r24, r24
    4aa4:	31 f5       	brne	.+76     	; 0x4af2 <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x238>
    4aa6:	c2 53       	subi	r28, 0x32	; 50
    4aa8:	df 4f       	sbci	r29, 0xFF	; 255
    4aaa:	68 81       	ld	r22, Y
    4aac:	79 81       	ldd	r23, Y+1	; 0x01
    4aae:	8a 81       	ldd	r24, Y+2	; 0x02
    4ab0:	9b 81       	ldd	r25, Y+3	; 0x03
    4ab2:	ce 5c       	subi	r28, 0xCE	; 206
    4ab4:	d0 40       	sbci	r29, 0x00	; 0
    4ab6:	20 e0       	ldi	r18, 0x00	; 0
    4ab8:	30 e0       	ldi	r19, 0x00	; 0
    4aba:	40 e0       	ldi	r20, 0x00	; 0
    4abc:	50 e0       	ldi	r21, 0x00	; 0
    4abe:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    4ac2:	88 23       	and	r24, r24
    4ac4:	b1 f4       	brne	.+44     	; 0x4af2 <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x238>
    4ac6:	ce 52       	subi	r28, 0x2E	; 46
    4ac8:	df 4f       	sbci	r29, 0xFF	; 255
    4aca:	68 81       	ld	r22, Y
    4acc:	79 81       	ldd	r23, Y+1	; 0x01
    4ace:	8a 81       	ldd	r24, Y+2	; 0x02
    4ad0:	9b 81       	ldd	r25, Y+3	; 0x03
    4ad2:	c2 5d       	subi	r28, 0xD2	; 210
    4ad4:	d0 40       	sbci	r29, 0x00	; 0
    4ad6:	20 e0       	ldi	r18, 0x00	; 0
    4ad8:	30 e0       	ldi	r19, 0x00	; 0
    4ada:	40 e0       	ldi	r20, 0x00	; 0
    4adc:	50 e0       	ldi	r21, 0x00	; 0
    4ade:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    4ae2:	88 23       	and	r24, r24
    4ae4:	31 f4       	brne	.+12     	; 0x4af2 <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x238>
    4ae6:	c2 56       	subi	r28, 0x62	; 98
    4ae8:	df 4f       	sbci	r29, 0xFF	; 255
    4aea:	18 82       	st	Y, r1
    4aec:	ce 59       	subi	r28, 0x9E	; 158
    4aee:	d0 40       	sbci	r29, 0x00	; 0
    4af0:	54 c0       	rjmp	.+168    	; 0x4b9a <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x2e0>
  if (do_rotate) {
    matrix = (COORD3D*) malloc (3*sizeof(COORD3D));
    4af2:	84 e2       	ldi	r24, 0x24	; 36
    4af4:	90 e0       	ldi	r25, 0x00	; 0
    4af6:	0e 94 20 79 	call	0xf240	; 0xf240 <malloc>
    4afa:	c8 55       	subi	r28, 0x58	; 88
    4afc:	df 4f       	sbci	r29, 0xFF	; 255
    4afe:	88 83       	st	Y, r24
    4b00:	c8 5a       	subi	r28, 0xA8	; 168
    4b02:	d0 40       	sbci	r29, 0x00	; 0
    4b04:	c7 55       	subi	r28, 0x57	; 87
    4b06:	df 4f       	sbci	r29, 0xFF	; 255
    4b08:	98 83       	st	Y, r25
    4b0a:	c9 5a       	subi	r28, 0xA9	; 169
    4b0c:	d0 40       	sbci	r29, 0x00	; 0
    getRotationMatrix (matrix, angulox*-coeficiente, anguloy*-coeficiente, anguloz*-coeficiente);
    4b0e:	ce 55       	subi	r28, 0x5E	; 94
    4b10:	df 4f       	sbci	r29, 0xFF	; 255
    4b12:	e8 80       	ld	r14, Y
    4b14:	f9 80       	ldd	r15, Y+1	; 0x01
    4b16:	0a 81       	ldd	r16, Y+2	; 0x02
    4b18:	1b 81       	ldd	r17, Y+3	; 0x03
    4b1a:	c2 5a       	subi	r28, 0xA2	; 162
    4b1c:	d0 40       	sbci	r29, 0x00	; 0
    4b1e:	17 fb       	bst	r17, 7
    4b20:	10 95       	com	r17
    4b22:	17 f9       	bld	r17, 7
    4b24:	10 95       	com	r17
    4b26:	c3 01       	movw	r24, r6
    4b28:	b2 01       	movw	r22, r4
    4b2a:	a8 01       	movw	r20, r16
    4b2c:	97 01       	movw	r18, r14
    4b2e:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    4b32:	2b 01       	movw	r4, r22
    4b34:	3c 01       	movw	r6, r24
    4b36:	c2 53       	subi	r28, 0x32	; 50
    4b38:	df 4f       	sbci	r29, 0xFF	; 255
    4b3a:	68 81       	ld	r22, Y
    4b3c:	79 81       	ldd	r23, Y+1	; 0x01
    4b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b40:	9b 81       	ldd	r25, Y+3	; 0x03
    4b42:	ce 5c       	subi	r28, 0xCE	; 206
    4b44:	d0 40       	sbci	r29, 0x00	; 0
    4b46:	a8 01       	movw	r20, r16
    4b48:	97 01       	movw	r18, r14
    4b4a:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    4b4e:	4b 01       	movw	r8, r22
    4b50:	5c 01       	movw	r10, r24
    4b52:	ce 52       	subi	r28, 0x2E	; 46
    4b54:	df 4f       	sbci	r29, 0xFF	; 255
    4b56:	68 81       	ld	r22, Y
    4b58:	79 81       	ldd	r23, Y+1	; 0x01
    4b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b5c:	9b 81       	ldd	r25, Y+3	; 0x03
    4b5e:	c2 5d       	subi	r28, 0xD2	; 210
    4b60:	d0 40       	sbci	r29, 0x00	; 0
    4b62:	a8 01       	movw	r20, r16
    4b64:	97 01       	movw	r18, r14
    4b66:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    4b6a:	6b 01       	movw	r12, r22
    4b6c:	7c 01       	movw	r14, r24
    4b6e:	c8 55       	subi	r28, 0x58	; 88
    4b70:	df 4f       	sbci	r29, 0xFF	; 255
    4b72:	88 81       	ld	r24, Y
    4b74:	c8 5a       	subi	r28, 0xA8	; 168
    4b76:	d0 40       	sbci	r29, 0x00	; 0
    4b78:	c7 55       	subi	r28, 0x57	; 87
    4b7a:	df 4f       	sbci	r29, 0xFF	; 255
    4b7c:	98 81       	ld	r25, Y
    4b7e:	c9 5a       	subi	r28, 0xA9	; 169
    4b80:	d0 40       	sbci	r29, 0x00	; 0
    4b82:	b3 01       	movw	r22, r6
    4b84:	a2 01       	movw	r20, r4
    4b86:	95 01       	movw	r18, r10
    4b88:	84 01       	movw	r16, r8
    4b8a:	0e 94 e4 77 	call	0xefc8	; 0xefc8 <_Z17getRotationMatrixP7COORD3Dfff>
    4b8e:	e1 e0       	ldi	r30, 0x01	; 1
    4b90:	c2 56       	subi	r28, 0x62	; 98
    4b92:	df 4f       	sbci	r29, 0xFF	; 255
    4b94:	e8 83       	st	Y, r30
    4b96:	ce 59       	subi	r28, 0x9E	; 158
    4b98:	d0 40       	sbci	r29, 0x00	; 0
    4b9a:	0f 2e       	mov	r0, r31
    4b9c:	f0 e0       	ldi	r31, 0x00	; 0
    4b9e:	2f 2e       	mov	r2, r31
    4ba0:	f0 e0       	ldi	r31, 0x00	; 0
    4ba2:	3f 2e       	mov	r3, r31
    4ba4:	f0 e0       	ldi	r31, 0x00	; 0
    4ba6:	4f 2e       	mov	r4, r31
    4ba8:	f0 e0       	ldi	r31, 0x00	; 0
    4baa:	5f 2e       	mov	r5, r31
    4bac:	f0 2d       	mov	r31, r0
    4bae:	c3 56       	subi	r28, 0x63	; 99
    4bb0:	df 4f       	sbci	r29, 0xFF	; 255
    4bb2:	18 82       	st	Y, r1
    4bb4:	cd 59       	subi	r28, 0x9D	; 157
    4bb6:	d0 40       	sbci	r29, 0x00	; 0
  }
  
  for (byte i=0; i<nsegmentos; i++) {
    if (do_traslate) {pos = traslate (pos.patas, traslacion);}
    4bb8:	69 e4       	ldi	r22, 0x49	; 73
    4bba:	66 2e       	mov	r6, r22
    4bbc:	71 2c       	mov	r7, r1
    4bbe:	6c 0e       	add	r6, r28
    4bc0:	7d 1e       	adc	r7, r29
    4bc2:	d2 c0       	rjmp	.+420    	; 0x4d68 <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x4ae>
    4bc4:	c1 56       	subi	r28, 0x61	; 97
    4bc6:	df 4f       	sbci	r29, 0xFF	; 255
    4bc8:	f8 81       	ld	r31, Y
    4bca:	cf 59       	subi	r28, 0x9F	; 159
    4bcc:	d0 40       	sbci	r29, 0x00	; 0
    4bce:	ff 23       	and	r31, r31
    4bd0:	a1 f1       	breq	.+104    	; 0x4c3a <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x380>
    4bd2:	ce 01       	movw	r24, r28
    4bd4:	8b 5a       	subi	r24, 0xAB	; 171
    4bd6:	9f 4f       	sbci	r25, 0xFF	; 255
    4bd8:	be 01       	movw	r22, r28
    4bda:	6f 5f       	subi	r22, 0xFF	; 255
    4bdc:	7f 4f       	sbci	r23, 0xFF	; 255
    4bde:	d3 01       	movw	r26, r6
    4be0:	ac 90       	ld	r10, X
    4be2:	11 96       	adiw	r26, 0x01	; 1
    4be4:	bc 90       	ld	r11, X
    4be6:	11 97       	sbiw	r26, 0x01	; 1
    4be8:	12 96       	adiw	r26, 0x02	; 2
    4bea:	cc 90       	ld	r12, X
    4bec:	12 97       	sbiw	r26, 0x02	; 2
    4bee:	13 96       	adiw	r26, 0x03	; 3
    4bf0:	dc 90       	ld	r13, X
    4bf2:	13 97       	sbiw	r26, 0x03	; 3
    4bf4:	14 96       	adiw	r26, 0x04	; 4
    4bf6:	ec 90       	ld	r14, X
    4bf8:	14 97       	sbiw	r26, 0x04	; 4
    4bfa:	15 96       	adiw	r26, 0x05	; 5
    4bfc:	fc 90       	ld	r15, X
    4bfe:	15 97       	sbiw	r26, 0x05	; 5
    4c00:	16 96       	adiw	r26, 0x06	; 6
    4c02:	0c 91       	ld	r16, X
    4c04:	16 97       	sbiw	r26, 0x06	; 6
    4c06:	17 96       	adiw	r26, 0x07	; 7
    4c08:	1c 91       	ld	r17, X
    4c0a:	17 97       	sbiw	r26, 0x07	; 7
    4c0c:	18 96       	adiw	r26, 0x08	; 8
    4c0e:	2c 91       	ld	r18, X
    4c10:	18 97       	sbiw	r26, 0x08	; 8
    4c12:	19 96       	adiw	r26, 0x09	; 9
    4c14:	3c 91       	ld	r19, X
    4c16:	19 97       	sbiw	r26, 0x09	; 9
    4c18:	1a 96       	adiw	r26, 0x0a	; 10
    4c1a:	4c 91       	ld	r20, X
    4c1c:	1a 97       	sbiw	r26, 0x0a	; 10
    4c1e:	1b 96       	adiw	r26, 0x0b	; 11
    4c20:	5c 91       	ld	r21, X
    4c22:	0e 94 3b 6e 	call	0xdc76	; 0xdc76 <_Z8traslateP7COORD3DS_>
    4c26:	de 01       	movw	r26, r28
    4c28:	11 96       	adiw	r26, 0x01	; 1
    4c2a:	fe 01       	movw	r30, r28
    4c2c:	eb 5a       	subi	r30, 0xAB	; 171
    4c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c30:	88 e4       	ldi	r24, 0x48	; 72
    4c32:	01 90       	ld	r0, Z+
    4c34:	0d 92       	st	X+, r0
    4c36:	81 50       	subi	r24, 0x01	; 1
    4c38:	e1 f7       	brne	.-8      	; 0x4c32 <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x378>
    if (do_rotate) {pos = rotate (pos.patas, centro, matrix);} 
    4c3a:	c2 56       	subi	r28, 0x62	; 98
    4c3c:	df 4f       	sbci	r29, 0xFF	; 255
    4c3e:	b8 81       	ld	r27, Y
    4c40:	ce 59       	subi	r28, 0x9E	; 158
    4c42:	d0 40       	sbci	r29, 0x00	; 0
    4c44:	bb 23       	and	r27, r27
    4c46:	09 f4       	brne	.+2      	; 0x4c4a <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x390>
    4c48:	58 c0       	rjmp	.+176    	; 0x4cfa <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x440>
    4c4a:	ce 01       	movw	r24, r28
    4c4c:	8b 5a       	subi	r24, 0xAB	; 171
    4c4e:	9f 4f       	sbci	r25, 0xFF	; 255
    4c50:	be 01       	movw	r22, r28
    4c52:	6f 5f       	subi	r22, 0xFF	; 255
    4c54:	7f 4f       	sbci	r23, 0xFF	; 255
    4c56:	c2 54       	subi	r28, 0x42	; 66
    4c58:	df 4f       	sbci	r29, 0xFF	; 255
    4c5a:	a8 80       	ld	r10, Y
    4c5c:	ce 5b       	subi	r28, 0xBE	; 190
    4c5e:	d0 40       	sbci	r29, 0x00	; 0
    4c60:	c1 54       	subi	r28, 0x41	; 65
    4c62:	df 4f       	sbci	r29, 0xFF	; 255
    4c64:	b8 80       	ld	r11, Y
    4c66:	cf 5b       	subi	r28, 0xBF	; 191
    4c68:	d0 40       	sbci	r29, 0x00	; 0
    4c6a:	c0 54       	subi	r28, 0x40	; 64
    4c6c:	df 4f       	sbci	r29, 0xFF	; 255
    4c6e:	c8 80       	ld	r12, Y
    4c70:	c0 5c       	subi	r28, 0xC0	; 192
    4c72:	d0 40       	sbci	r29, 0x00	; 0
    4c74:	cf 53       	subi	r28, 0x3F	; 63
    4c76:	df 4f       	sbci	r29, 0xFF	; 255
    4c78:	d8 80       	ld	r13, Y
    4c7a:	c1 5c       	subi	r28, 0xC1	; 193
    4c7c:	d0 40       	sbci	r29, 0x00	; 0
    4c7e:	ce 53       	subi	r28, 0x3E	; 62
    4c80:	df 4f       	sbci	r29, 0xFF	; 255
    4c82:	e8 80       	ld	r14, Y
    4c84:	c2 5c       	subi	r28, 0xC2	; 194
    4c86:	d0 40       	sbci	r29, 0x00	; 0
    4c88:	cd 53       	subi	r28, 0x3D	; 61
    4c8a:	df 4f       	sbci	r29, 0xFF	; 255
    4c8c:	f8 80       	ld	r15, Y
    4c8e:	c3 5c       	subi	r28, 0xC3	; 195
    4c90:	d0 40       	sbci	r29, 0x00	; 0
    4c92:	cc 53       	subi	r28, 0x3C	; 60
    4c94:	df 4f       	sbci	r29, 0xFF	; 255
    4c96:	08 81       	ld	r16, Y
    4c98:	c4 5c       	subi	r28, 0xC4	; 196
    4c9a:	d0 40       	sbci	r29, 0x00	; 0
    4c9c:	cb 53       	subi	r28, 0x3B	; 59
    4c9e:	df 4f       	sbci	r29, 0xFF	; 255
    4ca0:	18 81       	ld	r17, Y
    4ca2:	c5 5c       	subi	r28, 0xC5	; 197
    4ca4:	d0 40       	sbci	r29, 0x00	; 0
    4ca6:	ca 53       	subi	r28, 0x3A	; 58
    4ca8:	df 4f       	sbci	r29, 0xFF	; 255
    4caa:	28 81       	ld	r18, Y
    4cac:	c6 5c       	subi	r28, 0xC6	; 198
    4cae:	d0 40       	sbci	r29, 0x00	; 0
    4cb0:	c9 53       	subi	r28, 0x39	; 57
    4cb2:	df 4f       	sbci	r29, 0xFF	; 255
    4cb4:	38 81       	ld	r19, Y
    4cb6:	c7 5c       	subi	r28, 0xC7	; 199
    4cb8:	d0 40       	sbci	r29, 0x00	; 0
    4cba:	c8 53       	subi	r28, 0x38	; 56
    4cbc:	df 4f       	sbci	r29, 0xFF	; 255
    4cbe:	48 81       	ld	r20, Y
    4cc0:	c8 5c       	subi	r28, 0xC8	; 200
    4cc2:	d0 40       	sbci	r29, 0x00	; 0
    4cc4:	c7 53       	subi	r28, 0x37	; 55
    4cc6:	df 4f       	sbci	r29, 0xFF	; 255
    4cc8:	58 81       	ld	r21, Y
    4cca:	c9 5c       	subi	r28, 0xC9	; 201
    4ccc:	d0 40       	sbci	r29, 0x00	; 0
    4cce:	c8 55       	subi	r28, 0x58	; 88
    4cd0:	df 4f       	sbci	r29, 0xFF	; 255
    4cd2:	88 80       	ld	r8, Y
    4cd4:	c8 5a       	subi	r28, 0xA8	; 168
    4cd6:	d0 40       	sbci	r29, 0x00	; 0
    4cd8:	c7 55       	subi	r28, 0x57	; 87
    4cda:	df 4f       	sbci	r29, 0xFF	; 255
    4cdc:	98 80       	ld	r9, Y
    4cde:	c9 5a       	subi	r28, 0xA9	; 169
    4ce0:	d0 40       	sbci	r29, 0x00	; 0
    4ce2:	0e 94 e0 6f 	call	0xdfc0	; 0xdfc0 <_Z6rotateP7COORD3DS_S0_>
    4ce6:	de 01       	movw	r26, r28
    4ce8:	11 96       	adiw	r26, 0x01	; 1
    4cea:	fe 01       	movw	r30, r28
    4cec:	eb 5a       	subi	r30, 0xAB	; 171
    4cee:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf0:	88 e4       	ldi	r24, 0x48	; 72
    4cf2:	01 90       	ld	r0, Z+
    4cf4:	0d 92       	st	X+, r0
    4cf6:	81 50       	subi	r24, 0x01	; 1
    4cf8:	e1 f7       	brne	.-8      	; 0x4cf2 <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x438>
    posicion (pos.patas, t+.5, tps);
    4cfa:	c2 01       	movw	r24, r4
    4cfc:	b1 01       	movw	r22, r2
    4cfe:	20 e0       	ldi	r18, 0x00	; 0
    4d00:	30 e0       	ldi	r19, 0x00	; 0
    4d02:	40 e0       	ldi	r20, 0x00	; 0
    4d04:	5f e3       	ldi	r21, 0x3F	; 63
    4d06:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    4d0a:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <__fixsfsi>
    4d0e:	9b 01       	movw	r18, r22
    4d10:	ac 01       	movw	r20, r24
    4d12:	ca 55       	subi	r28, 0x5A	; 90
    4d14:	df 4f       	sbci	r29, 0xFF	; 255
    4d16:	88 81       	ld	r24, Y
    4d18:	99 81       	ldd	r25, Y+1	; 0x01
    4d1a:	c6 5a       	subi	r28, 0xA6	; 166
    4d1c:	d0 40       	sbci	r29, 0x00	; 0
    4d1e:	be 01       	movw	r22, r28
    4d20:	6f 5f       	subi	r22, 0xFF	; 255
    4d22:	7f 4f       	sbci	r23, 0xFF	; 255
    4d24:	a9 01       	movw	r20, r18
    4d26:	c0 56       	subi	r28, 0x60	; 96
    4d28:	df 4f       	sbci	r29, 0xFF	; 255
    4d2a:	28 81       	ld	r18, Y
    4d2c:	39 81       	ldd	r19, Y+1	; 0x01
    4d2e:	c0 5a       	subi	r28, 0xA0	; 160
    4d30:	d0 40       	sbci	r29, 0x00	; 0
    4d32:	0e 94 74 21 	call	0x42e8	; 0x42e8 <_ZN10Movimiento8posicionEP7COORD3Dii>
    t += coeficiente;
    4d36:	c2 01       	movw	r24, r4
    4d38:	b1 01       	movw	r22, r2
    4d3a:	ce 55       	subi	r28, 0x5E	; 94
    4d3c:	df 4f       	sbci	r29, 0xFF	; 255
    4d3e:	28 81       	ld	r18, Y
    4d40:	39 81       	ldd	r19, Y+1	; 0x01
    4d42:	4a 81       	ldd	r20, Y+2	; 0x02
    4d44:	5b 81       	ldd	r21, Y+3	; 0x03
    4d46:	c2 5a       	subi	r28, 0xA2	; 162
    4d48:	d0 40       	sbci	r29, 0x00	; 0
    4d4a:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    4d4e:	1b 01       	movw	r2, r22
    4d50:	2c 01       	movw	r4, r24
  if (do_rotate) {
    matrix = (COORD3D*) malloc (3*sizeof(COORD3D));
    getRotationMatrix (matrix, angulox*-coeficiente, anguloy*-coeficiente, anguloz*-coeficiente);
  }
  
  for (byte i=0; i<nsegmentos; i++) {
    4d52:	c3 56       	subi	r28, 0x63	; 99
    4d54:	df 4f       	sbci	r29, 0xFF	; 255
    4d56:	e8 81       	ld	r30, Y
    4d58:	cd 59       	subi	r28, 0x9D	; 157
    4d5a:	d0 40       	sbci	r29, 0x00	; 0
    4d5c:	ef 5f       	subi	r30, 0xFF	; 255
    4d5e:	c3 56       	subi	r28, 0x63	; 99
    4d60:	df 4f       	sbci	r29, 0xFF	; 255
    4d62:	e8 83       	st	Y, r30
    4d64:	cd 59       	subi	r28, 0x9D	; 157
    4d66:	d0 40       	sbci	r29, 0x00	; 0
    4d68:	c3 56       	subi	r28, 0x63	; 99
    4d6a:	df 4f       	sbci	r29, 0xFF	; 255
    4d6c:	f8 81       	ld	r31, Y
    4d6e:	cd 59       	subi	r28, 0x9D	; 157
    4d70:	d0 40       	sbci	r29, 0x00	; 0
    4d72:	c8 52       	subi	r28, 0x28	; 40
    4d74:	df 4f       	sbci	r29, 0xFF	; 255
    4d76:	88 81       	ld	r24, Y
    4d78:	c8 5d       	subi	r28, 0xD8	; 216
    4d7a:	d0 40       	sbci	r29, 0x00	; 0
    4d7c:	f8 17       	cp	r31, r24
    4d7e:	08 f4       	brcc	.+2      	; 0x4d82 <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x4c8>
    4d80:	21 cf       	rjmp	.-446    	; 0x4bc4 <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x30a>
    if (do_rotate) {pos = rotate (pos.patas, centro, matrix);} 
    posicion (pos.patas, t+.5, tps);
    t += coeficiente;
  }
    
  if (do_rotate) {
    4d82:	c2 56       	subi	r28, 0x62	; 98
    4d84:	df 4f       	sbci	r29, 0xFF	; 255
    4d86:	98 81       	ld	r25, Y
    4d88:	ce 59       	subi	r28, 0x9E	; 158
    4d8a:	d0 40       	sbci	r29, 0x00	; 0
    4d8c:	99 23       	and	r25, r25
    4d8e:	61 f0       	breq	.+24     	; 0x4da8 <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x4ee>
    free (matrix);
    4d90:	c8 55       	subi	r28, 0x58	; 88
    4d92:	df 4f       	sbci	r29, 0xFF	; 255
    4d94:	88 81       	ld	r24, Y
    4d96:	c8 5a       	subi	r28, 0xA8	; 168
    4d98:	d0 40       	sbci	r29, 0x00	; 0
    4d9a:	c7 55       	subi	r28, 0x57	; 87
    4d9c:	df 4f       	sbci	r29, 0xFF	; 255
    4d9e:	98 81       	ld	r25, Y
    4da0:	c9 5a       	subi	r28, 0xA9	; 169
    4da2:	d0 40       	sbci	r29, 0x00	; 0
    4da4:	0e 94 cd 79 	call	0xf39a	; 0xf39a <free>
  }
}
    4da8:	c7 55       	subi	r28, 0x57	; 87
    4daa:	df 4f       	sbci	r29, 0xFF	; 255
    4dac:	0f b6       	in	r0, 0x3f	; 63
    4dae:	f8 94       	cli
    4db0:	de bf       	out	0x3e, r29	; 62
    4db2:	0f be       	out	0x3f, r0	; 63
    4db4:	cd bf       	out	0x3d, r28	; 61
    4db6:	cf 91       	pop	r28
    4db8:	df 91       	pop	r29
    4dba:	1f 91       	pop	r17
    4dbc:	0f 91       	pop	r16
    4dbe:	ff 90       	pop	r15
    4dc0:	ef 90       	pop	r14
    4dc2:	df 90       	pop	r13
    4dc4:	cf 90       	pop	r12
    4dc6:	bf 90       	pop	r11
    4dc8:	af 90       	pop	r10
    4dca:	9f 90       	pop	r9
    4dcc:	8f 90       	pop	r8
    4dce:	7f 90       	pop	r7
    4dd0:	6f 90       	pop	r6
    4dd2:	5f 90       	pop	r5
    4dd4:	4f 90       	pop	r4
    4dd6:	3f 90       	pop	r3
    4dd8:	2f 90       	pop	r2
    4dda:	08 95       	ret

00004ddc <_ZN10Movimiento8rotationEfffih>:
void Movimiento::rotation (COORD3D centro, float angulox, float anguloy, float anguloz, int duracion, byte nsegmentos) {
	tronco (pos_des, (COORD3D){0,0,0}, centro, angulox, anguloy, anguloz, duracion, nsegmentos);
}

// rotación usando el centro de referencia
void Movimiento::rotation (float angulox, float anguloy, float anguloz, int duracion, byte nsegmentos) {
    4ddc:	2f 92       	push	r2
    4dde:	3f 92       	push	r3
    4de0:	4f 92       	push	r4
    4de2:	5f 92       	push	r5
    4de4:	6f 92       	push	r6
    4de6:	7f 92       	push	r7
    4de8:	8f 92       	push	r8
    4dea:	af 92       	push	r10
    4dec:	bf 92       	push	r11
    4dee:	cf 92       	push	r12
    4df0:	df 92       	push	r13
    4df2:	ef 92       	push	r14
    4df4:	ff 92       	push	r15
    4df6:	0f 93       	push	r16
    4df8:	1f 93       	push	r17
    4dfa:	df 93       	push	r29
    4dfc:	cf 93       	push	r28
    4dfe:	cd b7       	in	r28, 0x3d	; 61
    4e00:	de b7       	in	r29, 0x3e	; 62
    4e02:	2c 97       	sbiw	r28, 0x0c	; 12
    4e04:	0f b6       	in	r0, 0x3f	; 63
    4e06:	f8 94       	cli
    4e08:	de bf       	out	0x3e, r29	; 62
    4e0a:	0f be       	out	0x3f, r0	; 63
    4e0c:	cd bf       	out	0x3d, r28	; 61
    4e0e:	1c 01       	movw	r2, r24
    4e10:	28 01       	movw	r4, r16
    4e12:	39 01       	movw	r6, r18
	tronco (pos_des, (COORD3D){0,0,0}, bd.centro_ref, angulox, anguloy, anguloz, duracion, nsegmentos);
    4e14:	ce 01       	movw	r24, r28
    4e16:	01 96       	adiw	r24, 0x01	; 1
    4e18:	20 e3       	ldi	r18, 0x30	; 48
    4e1a:	35 e0       	ldi	r19, 0x05	; 5
    4e1c:	ec e0       	ldi	r30, 0x0C	; 12
    4e1e:	d9 01       	movw	r26, r18
    4e20:	0d 90       	ld	r0, X+
    4e22:	9d 01       	movw	r18, r26
    4e24:	dc 01       	movw	r26, r24
    4e26:	0d 92       	st	X+, r0
    4e28:	cd 01       	movw	r24, r26
    4e2a:	e1 50       	subi	r30, 0x01	; 1
    4e2c:	c1 f7       	brne	.-16     	; 0x4e1e <_ZN10Movimiento8rotationEfffih+0x42>
    4e2e:	8d b7       	in	r24, 0x3d	; 61
    4e30:	9e b7       	in	r25, 0x3e	; 62
    4e32:	4b 97       	sbiw	r24, 0x1b	; 27
    4e34:	0f b6       	in	r0, 0x3f	; 63
    4e36:	f8 94       	cli
    4e38:	9e bf       	out	0x3e, r25	; 62
    4e3a:	0f be       	out	0x3f, r0	; 63
    4e3c:	8d bf       	out	0x3d, r24	; 61
    4e3e:	ed b7       	in	r30, 0x3d	; 61
    4e40:	fe b7       	in	r31, 0x3e	; 62
    4e42:	31 96       	adiw	r30, 0x01	; 1
    4e44:	9f 01       	movw	r18, r30
    4e46:	c1 01       	movw	r24, r2
    4e48:	83 56       	subi	r24, 0x63	; 99
    4e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    4e4c:	1c e0       	ldi	r17, 0x0C	; 12
    4e4e:	dc 01       	movw	r26, r24
    4e50:	0d 90       	ld	r0, X+
    4e52:	cd 01       	movw	r24, r26
    4e54:	d9 01       	movw	r26, r18
    4e56:	0d 92       	st	X+, r0
    4e58:	9d 01       	movw	r18, r26
    4e5a:	11 50       	subi	r17, 0x01	; 1
    4e5c:	c1 f7       	brne	.-16     	; 0x4e4e <_ZN10Movimiento8rotationEfffih+0x72>
    4e5e:	44 87       	std	Z+12, r20	; 0x0c
    4e60:	55 87       	std	Z+13, r21	; 0x0d
    4e62:	66 87       	std	Z+14, r22	; 0x0e
    4e64:	77 87       	std	Z+15, r23	; 0x0f
    4e66:	40 8a       	std	Z+16, r4	; 0x10
    4e68:	51 8a       	std	Z+17, r5	; 0x11
    4e6a:	62 8a       	std	Z+18, r6	; 0x12
    4e6c:	73 8a       	std	Z+19, r7	; 0x13
    4e6e:	c4 8a       	std	Z+20, r12	; 0x14
    4e70:	d5 8a       	std	Z+21, r13	; 0x15
    4e72:	e6 8a       	std	Z+22, r14	; 0x16
    4e74:	f7 8a       	std	Z+23, r15	; 0x17
    4e76:	b1 8e       	std	Z+25, r11	; 0x19
    4e78:	a0 8e       	std	Z+24, r10	; 0x18
    4e7a:	82 8e       	std	Z+26, r8	; 0x1a
    4e7c:	c1 01       	movw	r24, r2
    4e7e:	60 e5       	ldi	r22, 0x50	; 80
    4e80:	73 e1       	ldi	r23, 0x13	; 19
    4e82:	a9 80       	ldd	r10, Y+1	; 0x01
    4e84:	ba 80       	ldd	r11, Y+2	; 0x02
    4e86:	cb 80       	ldd	r12, Y+3	; 0x03
    4e88:	dc 80       	ldd	r13, Y+4	; 0x04
    4e8a:	ed 80       	ldd	r14, Y+5	; 0x05
    4e8c:	fe 80       	ldd	r15, Y+6	; 0x06
    4e8e:	0f 81       	ldd	r16, Y+7	; 0x07
    4e90:	18 85       	ldd	r17, Y+8	; 0x08
    4e92:	29 85       	ldd	r18, Y+9	; 0x09
    4e94:	3a 85       	ldd	r19, Y+10	; 0x0a
    4e96:	4b 85       	ldd	r20, Y+11	; 0x0b
    4e98:	5c 85       	ldd	r21, Y+12	; 0x0c
    4e9a:	0e 94 5d 24 	call	0x48ba	; 0x48ba <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih>
    4e9e:	8d b7       	in	r24, 0x3d	; 61
    4ea0:	9e b7       	in	r25, 0x3e	; 62
    4ea2:	4b 96       	adiw	r24, 0x1b	; 27
    4ea4:	0f b6       	in	r0, 0x3f	; 63
    4ea6:	f8 94       	cli
    4ea8:	9e bf       	out	0x3e, r25	; 62
    4eaa:	0f be       	out	0x3f, r0	; 63
    4eac:	8d bf       	out	0x3d, r24	; 61
}
    4eae:	2c 96       	adiw	r28, 0x0c	; 12
    4eb0:	0f b6       	in	r0, 0x3f	; 63
    4eb2:	f8 94       	cli
    4eb4:	de bf       	out	0x3e, r29	; 62
    4eb6:	0f be       	out	0x3f, r0	; 63
    4eb8:	cd bf       	out	0x3d, r28	; 61
    4eba:	cf 91       	pop	r28
    4ebc:	df 91       	pop	r29
    4ebe:	1f 91       	pop	r17
    4ec0:	0f 91       	pop	r16
    4ec2:	ff 90       	pop	r15
    4ec4:	ef 90       	pop	r14
    4ec6:	df 90       	pop	r13
    4ec8:	cf 90       	pop	r12
    4eca:	bf 90       	pop	r11
    4ecc:	af 90       	pop	r10
    4ece:	8f 90       	pop	r8
    4ed0:	7f 90       	pop	r7
    4ed2:	6f 90       	pop	r6
    4ed4:	5f 90       	pop	r5
    4ed6:	4f 90       	pop	r4
    4ed8:	3f 90       	pop	r3
    4eda:	2f 90       	pop	r2
    4edc:	08 95       	ret

00004ede <_ZN10Movimiento11translationE7COORD3Dih>:
}

///////////////////////////////////////// ROTACIONES Y TRASLACIONES /////////////////////////////////////////

// traslación del tronco
void Movimiento::translation (COORD3D vector, int duracion, byte nsegmentos) {
    4ede:	6f 92       	push	r6
    4ee0:	7f 92       	push	r7
    4ee2:	8f 92       	push	r8
    4ee4:	af 92       	push	r10
    4ee6:	bf 92       	push	r11
    4ee8:	cf 92       	push	r12
    4eea:	df 92       	push	r13
    4eec:	ef 92       	push	r14
    4eee:	ff 92       	push	r15
    4ef0:	0f 93       	push	r16
    4ef2:	1f 93       	push	r17
    4ef4:	df 93       	push	r29
    4ef6:	cf 93       	push	r28
    4ef8:	cd b7       	in	r28, 0x3d	; 61
    4efa:	de b7       	in	r29, 0x3e	; 62
    4efc:	68 97       	sbiw	r28, 0x18	; 24
    4efe:	0f b6       	in	r0, 0x3f	; 63
    4f00:	f8 94       	cli
    4f02:	de bf       	out	0x3e, r29	; 62
    4f04:	0f be       	out	0x3f, r0	; 63
    4f06:	cd bf       	out	0x3d, r28	; 61
    4f08:	3c 01       	movw	r6, r24
    4f0a:	cd 86       	std	Y+13, r12	; 0x0d
    4f0c:	de 86       	std	Y+14, r13	; 0x0e
    4f0e:	ef 86       	std	Y+15, r14	; 0x0f
    4f10:	f8 8a       	std	Y+16, r15	; 0x10
    4f12:	09 8b       	std	Y+17, r16	; 0x11
    4f14:	1a 8b       	std	Y+18, r17	; 0x12
    4f16:	2b 8b       	std	Y+19, r18	; 0x13
    4f18:	3c 8b       	std	Y+20, r19	; 0x14
    4f1a:	4d 8b       	std	Y+21, r20	; 0x15
    4f1c:	5e 8b       	std	Y+22, r21	; 0x16
    4f1e:	6f 8b       	std	Y+23, r22	; 0x17
    4f20:	78 8f       	std	Y+24, r23	; 0x18
  tronco (pos_des, vector, (COORD3D){0,0,0}, 0, 0, 0, duracion, nsegmentos);
    4f22:	de 01       	movw	r26, r28
    4f24:	11 96       	adiw	r26, 0x01	; 1
    4f26:	ec e3       	ldi	r30, 0x3C	; 60
    4f28:	f5 e0       	ldi	r31, 0x05	; 5
    4f2a:	8c e0       	ldi	r24, 0x0C	; 12
    4f2c:	01 90       	ld	r0, Z+
    4f2e:	0d 92       	st	X+, r0
    4f30:	81 50       	subi	r24, 0x01	; 1
    4f32:	e1 f7       	brne	.-8      	; 0x4f2c <_ZN10Movimiento11translationE7COORD3Dih+0x4e>
    4f34:	8d b7       	in	r24, 0x3d	; 61
    4f36:	9e b7       	in	r25, 0x3e	; 62
    4f38:	4b 97       	sbiw	r24, 0x1b	; 27
    4f3a:	0f b6       	in	r0, 0x3f	; 63
    4f3c:	f8 94       	cli
    4f3e:	9e bf       	out	0x3e, r25	; 62
    4f40:	0f be       	out	0x3f, r0	; 63
    4f42:	8d bf       	out	0x3d, r24	; 61
    4f44:	ed b7       	in	r30, 0x3d	; 61
    4f46:	fe b7       	in	r31, 0x3e	; 62
    4f48:	31 96       	adiw	r30, 0x01	; 1
    4f4a:	9f 01       	movw	r18, r30
    4f4c:	ae 01       	movw	r20, r28
    4f4e:	4f 5f       	subi	r20, 0xFF	; 255
    4f50:	5f 4f       	sbci	r21, 0xFF	; 255
    4f52:	8c e0       	ldi	r24, 0x0C	; 12
    4f54:	da 01       	movw	r26, r20
    4f56:	0d 90       	ld	r0, X+
    4f58:	ad 01       	movw	r20, r26
    4f5a:	d9 01       	movw	r26, r18
    4f5c:	0d 92       	st	X+, r0
    4f5e:	9d 01       	movw	r18, r26
    4f60:	81 50       	subi	r24, 0x01	; 1
    4f62:	c1 f7       	brne	.-16     	; 0x4f54 <_ZN10Movimiento11translationE7COORD3Dih+0x76>
    4f64:	80 e0       	ldi	r24, 0x00	; 0
    4f66:	90 e0       	ldi	r25, 0x00	; 0
    4f68:	a0 e0       	ldi	r26, 0x00	; 0
    4f6a:	b0 e0       	ldi	r27, 0x00	; 0
    4f6c:	84 87       	std	Z+12, r24	; 0x0c
    4f6e:	95 87       	std	Z+13, r25	; 0x0d
    4f70:	a6 87       	std	Z+14, r26	; 0x0e
    4f72:	b7 87       	std	Z+15, r27	; 0x0f
    4f74:	80 8b       	std	Z+16, r24	; 0x10
    4f76:	91 8b       	std	Z+17, r25	; 0x11
    4f78:	a2 8b       	std	Z+18, r26	; 0x12
    4f7a:	b3 8b       	std	Z+19, r27	; 0x13
    4f7c:	84 8b       	std	Z+20, r24	; 0x14
    4f7e:	95 8b       	std	Z+21, r25	; 0x15
    4f80:	a6 8b       	std	Z+22, r26	; 0x16
    4f82:	b7 8b       	std	Z+23, r27	; 0x17
    4f84:	b1 8e       	std	Z+25, r11	; 0x19
    4f86:	a0 8e       	std	Z+24, r10	; 0x18
    4f88:	82 8e       	std	Z+26, r8	; 0x1a
    4f8a:	c3 01       	movw	r24, r6
    4f8c:	60 e5       	ldi	r22, 0x50	; 80
    4f8e:	73 e1       	ldi	r23, 0x13	; 19
    4f90:	ad 84       	ldd	r10, Y+13	; 0x0d
    4f92:	be 84       	ldd	r11, Y+14	; 0x0e
    4f94:	cf 84       	ldd	r12, Y+15	; 0x0f
    4f96:	d8 88       	ldd	r13, Y+16	; 0x10
    4f98:	e9 88       	ldd	r14, Y+17	; 0x11
    4f9a:	fa 88       	ldd	r15, Y+18	; 0x12
    4f9c:	0b 89       	ldd	r16, Y+19	; 0x13
    4f9e:	1c 89       	ldd	r17, Y+20	; 0x14
    4fa0:	2d 89       	ldd	r18, Y+21	; 0x15
    4fa2:	3e 89       	ldd	r19, Y+22	; 0x16
    4fa4:	4f 89       	ldd	r20, Y+23	; 0x17
    4fa6:	58 8d       	ldd	r21, Y+24	; 0x18
    4fa8:	0e 94 5d 24 	call	0x48ba	; 0x48ba <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih>
    4fac:	8d b7       	in	r24, 0x3d	; 61
    4fae:	9e b7       	in	r25, 0x3e	; 62
    4fb0:	4b 96       	adiw	r24, 0x1b	; 27
    4fb2:	0f b6       	in	r0, 0x3f	; 63
    4fb4:	f8 94       	cli
    4fb6:	9e bf       	out	0x3e, r25	; 62
    4fb8:	0f be       	out	0x3f, r0	; 63
    4fba:	8d bf       	out	0x3d, r24	; 61
}
    4fbc:	68 96       	adiw	r28, 0x18	; 24
    4fbe:	0f b6       	in	r0, 0x3f	; 63
    4fc0:	f8 94       	cli
    4fc2:	de bf       	out	0x3e, r29	; 62
    4fc4:	0f be       	out	0x3f, r0	; 63
    4fc6:	cd bf       	out	0x3d, r28	; 61
    4fc8:	cf 91       	pop	r28
    4fca:	df 91       	pop	r29
    4fcc:	1f 91       	pop	r17
    4fce:	0f 91       	pop	r16
    4fd0:	ff 90       	pop	r15
    4fd2:	ef 90       	pop	r14
    4fd4:	df 90       	pop	r13
    4fd6:	cf 90       	pop	r12
    4fd8:	bf 90       	pop	r11
    4fda:	af 90       	pop	r10
    4fdc:	8f 90       	pop	r8
    4fde:	7f 90       	pop	r7
    4fe0:	6f 90       	pop	r6
    4fe2:	08 95       	ret

00004fe4 <_ZN10MovimientoC1Ev>:

Movimiento mov;        // preinstanciado

///////////////////////////////////////// CONSTRUCTOR /////////////////////////////////////////

Movimiento::Movimiento () {           
    4fe4:	4f 92       	push	r4
    4fe6:	5f 92       	push	r5
    4fe8:	6f 92       	push	r6
    4fea:	7f 92       	push	r7
    4fec:	8f 92       	push	r8
    4fee:	9f 92       	push	r9
    4ff0:	af 92       	push	r10
    4ff2:	bf 92       	push	r11
    4ff4:	cf 92       	push	r12
    4ff6:	df 92       	push	r13
    4ff8:	ef 92       	push	r14
    4ffa:	ff 92       	push	r15
    4ffc:	0f 93       	push	r16
    4ffe:	1f 93       	push	r17
    5000:	df 93       	push	r29
    5002:	cf 93       	push	r28
    5004:	cd b7       	in	r28, 0x3d	; 61
    5006:	de b7       	in	r29, 0x3e	; 62
    5008:	c8 54       	subi	r28, 0x48	; 72
    500a:	d0 40       	sbci	r29, 0x00	; 0
    500c:	0f b6       	in	r0, 0x3f	; 63
    500e:	f8 94       	cli
    5010:	de bf       	out	0x3e, r29	; 62
    5012:	0f be       	out	0x3f, r0	; 63
    5014:	cd bf       	out	0x3d, r28	; 61
    5016:	2c 01       	movw	r4, r24
	set_pos_ref (DEFAULT_POSITION);                      // posición de referencia (por las dudas que se olviden de setear)
    5018:	3e 01       	movw	r6, r28
    501a:	08 94       	sec
    501c:	61 1c       	adc	r6, r1
    501e:	71 1c       	adc	r7, r1
    5020:	c3 01       	movw	r24, r6
    5022:	43 e3       	ldi	r20, 0x33	; 51
    5024:	53 e3       	ldi	r21, 0x33	; 51
    5026:	6b ef       	ldi	r22, 0xFB	; 251
    5028:	70 e4       	ldi	r23, 0x40	; 64
    502a:	03 e3       	ldi	r16, 0x33	; 51
    502c:	13 e3       	ldi	r17, 0x33	; 51
    502e:	23 ef       	ldi	r18, 0xF3	; 243
    5030:	31 e4       	ldi	r19, 0x41	; 65
    5032:	0f 2e       	mov	r0, r31
    5034:	f0 e0       	ldi	r31, 0x00	; 0
    5036:	cf 2e       	mov	r12, r31
    5038:	f0 e0       	ldi	r31, 0x00	; 0
    503a:	df 2e       	mov	r13, r31
    503c:	f0 e1       	ldi	r31, 0x10	; 16
    503e:	ef 2e       	mov	r14, r31
    5040:	f2 e4       	ldi	r31, 0x42	; 66
    5042:	ff 2e       	mov	r15, r31
    5044:	f0 2d       	mov	r31, r0
    5046:	0f 2e       	mov	r0, r31
    5048:	fd ec       	ldi	r31, 0xCD	; 205
    504a:	8f 2e       	mov	r8, r31
    504c:	fc ec       	ldi	r31, 0xCC	; 204
    504e:	9f 2e       	mov	r9, r31
    5050:	fe e0       	ldi	r31, 0x0E	; 14
    5052:	af 2e       	mov	r10, r31
    5054:	f2 e4       	ldi	r31, 0x42	; 66
    5056:	bf 2e       	mov	r11, r31
    5058:	f0 2d       	mov	r31, r0
    505a:	0e 94 4d 76 	call	0xec9a	; 0xec9a <_Z8hexagonoffff>
    505e:	c2 01       	movw	r24, r4
    5060:	b3 01       	movw	r22, r6
    5062:	0e 94 09 22 	call	0x4412	; 0x4412 <_ZN10Movimiento11set_pos_refEP7COORD3D>
	osc_reset ();                                    // inicializa los osciladores 
    5066:	c2 01       	movw	r24, r4
    5068:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <_ZN10Movimiento9osc_resetEv>
	bd.centro_ref = (COORD3D) {0, 0, 0};                 // centro de referencia de las rotaciones
    506c:	d2 01       	movw	r26, r4
    506e:	a3 56       	subi	r26, 0x63	; 99
    5070:	bf 4f       	sbci	r27, 0xFF	; 255
    5072:	e8 e4       	ldi	r30, 0x48	; 72
    5074:	f5 e0       	ldi	r31, 0x05	; 5
    5076:	8c e0       	ldi	r24, 0x0C	; 12
    5078:	01 90       	ld	r0, Z+
    507a:	0d 92       	st	X+, r0
    507c:	81 50       	subi	r24, 0x01	; 1
    507e:	e1 f7       	brne	.-8      	; 0x5078 <_ZN10MovimientoC1Ev+0x94>
	// inicializa los monitores a NULL
	mon_angulo = NULL;
    5080:	f2 01       	movw	r30, r4
    5082:	11 82       	std	Z+1, r1	; 0x01
    5084:	10 82       	st	Z, r1
	mon_desplazamiento = NULL;
    5086:	13 82       	std	Z+3, r1	; 0x03
    5088:	12 82       	std	Z+2, r1	; 0x02
	// inicia el estado de movimiento
	sh.cn.enable = false;
    508a:	84 ee       	ldi	r24, 0xE4	; 228
    508c:	91 e0       	ldi	r25, 0x01	; 1
    508e:	48 0e       	add	r4, r24
    5090:	59 1e       	adc	r5, r25
    5092:	f2 01       	movw	r30, r4
    5094:	10 82       	st	Z, r1
}
    5096:	c8 5b       	subi	r28, 0xB8	; 184
    5098:	df 4f       	sbci	r29, 0xFF	; 255
    509a:	0f b6       	in	r0, 0x3f	; 63
    509c:	f8 94       	cli
    509e:	de bf       	out	0x3e, r29	; 62
    50a0:	0f be       	out	0x3f, r0	; 63
    50a2:	cd bf       	out	0x3d, r28	; 61
    50a4:	cf 91       	pop	r28
    50a6:	df 91       	pop	r29
    50a8:	1f 91       	pop	r17
    50aa:	0f 91       	pop	r16
    50ac:	ff 90       	pop	r15
    50ae:	ef 90       	pop	r14
    50b0:	df 90       	pop	r13
    50b2:	cf 90       	pop	r12
    50b4:	bf 90       	pop	r11
    50b6:	af 90       	pop	r10
    50b8:	9f 90       	pop	r9
    50ba:	8f 90       	pop	r8
    50bc:	7f 90       	pop	r7
    50be:	6f 90       	pop	r6
    50c0:	5f 90       	pop	r5
    50c2:	4f 90       	pop	r4
    50c4:	08 95       	ret

000050c6 <_GLOBAL__I_mov>:
#include "movimiento.h"
#include "events.h"
#include <string.h>
#include "mov_bajo_nivel.h"      // para acceder a 'pos_des[]'

Movimiento mov;        // preinstanciado
    50c6:	81 ee       	ldi	r24, 0xE1	; 225
    50c8:	90 e1       	ldi	r25, 0x10	; 16
    50ca:	0e 94 f2 27 	call	0x4fe4	; 0x4fe4 <_ZN10MovimientoC1Ev>
    punto.y = bezier (origen.y, manejador.y, destino.y, t);
    punto.z = bezier (origen.z, manejador.z, destino.z, t);
    eventos.add ((MOVDATA) {patas, resta (punto, last), tps, absolute}, comienzo);  
    comienzo += tps; 
  } 
    50ce:	08 95       	ret

000050d0 <_ZN10Movimiento4stopEv>:
	sh.cn.enable = true;
}

// detiene cualquier movimiento
void Movimiento::stop () {
	sh.cn.enable = false;
    50d0:	fc 01       	movw	r30, r24
    50d2:	ec 51       	subi	r30, 0x1C	; 28
    50d4:	fe 4f       	sbci	r31, 0xFE	; 254
    50d6:	10 82       	st	Z, r1
}
    50d8:	08 95       	ret

000050da <_ZN10Movimiento4nsegEi>:

// devuelve el número de segmentos a aplicar en la curva bezier 1
byte Movimiento::nseg (int duracion) {
	// duracion en TICKS
	// esta fórmula no tiene en cuenta la distancia
	return constrain (duracion/TPS, 2, 5);           // limitado a 5 porque son movimientos cortos
    50da:	6c 31       	cpi	r22, 0x1C	; 28
    50dc:	71 05       	cpc	r23, r1
    50de:	14 f4       	brge	.+4      	; 0x50e4 <_ZN10Movimiento4nsegEi+0xa>
    50e0:	62 e0       	ldi	r22, 0x02	; 2
    50e2:	0a c0       	rjmp	.+20     	; 0x50f8 <_ZN10Movimiento4nsegEi+0x1e>
    50e4:	64 35       	cpi	r22, 0x54	; 84
    50e6:	71 05       	cpc	r23, r1
    50e8:	14 f0       	brlt	.+4      	; 0x50ee <_ZN10Movimiento4nsegEi+0x14>
    50ea:	65 e0       	ldi	r22, 0x05	; 5
    50ec:	05 c0       	rjmp	.+10     	; 0x50f8 <_ZN10Movimiento4nsegEi+0x1e>
    50ee:	cb 01       	movw	r24, r22
    50f0:	6e e0       	ldi	r22, 0x0E	; 14
    50f2:	70 e0       	ldi	r23, 0x00	; 0
    50f4:	0e 94 1f 81 	call	0x1023e	; 0x1023e <__divmodhi4>
}
    50f8:	86 2f       	mov	r24, r22
    50fa:	08 95       	ret

000050fc <_ZN10Movimiento4nsegEihf>:

// devuelve el número de segmentos a aplicar en la curva bezier 2
byte Movimiento::nseg (int duracion_pasos, byte escala, float largo_pasos) {
    50fc:	af 92       	push	r10
    50fe:	bf 92       	push	r11
    5100:	cf 92       	push	r12
    5102:	df 92       	push	r13
    5104:	ef 92       	push	r14
    5106:	ff 92       	push	r15
    5108:	0f 93       	push	r16
    510a:	1f 93       	push	r17
    510c:	58 01       	movw	r10, r16
    510e:	69 01       	movw	r12, r18
	return constrain (duracion_pasos*escala*(largo_pasos/10)/TPS, 2, 10);       // esta fórmula sí tiene en cuenta la distancia
    5110:	50 e0       	ldi	r21, 0x00	; 0
    5112:	cb 01       	movw	r24, r22
    5114:	48 9f       	mul	r20, r24
    5116:	b0 01       	movw	r22, r0
    5118:	49 9f       	mul	r20, r25
    511a:	70 0d       	add	r23, r0
    511c:	58 9f       	mul	r21, r24
    511e:	70 0d       	add	r23, r0
    5120:	11 24       	eor	r1, r1
    5122:	88 27       	eor	r24, r24
    5124:	77 fd       	sbrc	r23, 7
    5126:	80 95       	com	r24
    5128:	98 2f       	mov	r25, r24
    512a:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    512e:	7b 01       	movw	r14, r22
    5130:	8c 01       	movw	r16, r24
    5132:	c6 01       	movw	r24, r12
    5134:	b5 01       	movw	r22, r10
    5136:	20 e0       	ldi	r18, 0x00	; 0
    5138:	30 e0       	ldi	r19, 0x00	; 0
    513a:	40 e2       	ldi	r20, 0x20	; 32
    513c:	51 e4       	ldi	r21, 0x41	; 65
    513e:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    5142:	9b 01       	movw	r18, r22
    5144:	ac 01       	movw	r20, r24
    5146:	c8 01       	movw	r24, r16
    5148:	b7 01       	movw	r22, r14
    514a:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    514e:	20 e0       	ldi	r18, 0x00	; 0
    5150:	30 e0       	ldi	r19, 0x00	; 0
    5152:	40 e6       	ldi	r20, 0x60	; 96
    5154:	51 e4       	ldi	r21, 0x41	; 65
    5156:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    515a:	7b 01       	movw	r14, r22
    515c:	8c 01       	movw	r16, r24
    515e:	20 e0       	ldi	r18, 0x00	; 0
    5160:	30 e0       	ldi	r19, 0x00	; 0
    5162:	40 e0       	ldi	r20, 0x00	; 0
    5164:	50 e4       	ldi	r21, 0x40	; 64
    5166:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    516a:	88 23       	and	r24, r24
    516c:	14 f4       	brge	.+4      	; 0x5172 <_ZN10Movimiento4nsegEihf+0x76>
    516e:	82 e0       	ldi	r24, 0x02	; 2
    5170:	11 c0       	rjmp	.+34     	; 0x5194 <_ZN10Movimiento4nsegEihf+0x98>
    5172:	c8 01       	movw	r24, r16
    5174:	b7 01       	movw	r22, r14
    5176:	20 e0       	ldi	r18, 0x00	; 0
    5178:	30 e0       	ldi	r19, 0x00	; 0
    517a:	40 e2       	ldi	r20, 0x20	; 32
    517c:	51 e4       	ldi	r21, 0x41	; 65
    517e:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <__gesf2>
    5182:	18 16       	cp	r1, r24
    5184:	14 f4       	brge	.+4      	; 0x518a <_ZN10Movimiento4nsegEihf+0x8e>
    5186:	8a e0       	ldi	r24, 0x0A	; 10
    5188:	05 c0       	rjmp	.+10     	; 0x5194 <_ZN10Movimiento4nsegEihf+0x98>
    518a:	c8 01       	movw	r24, r16
    518c:	b7 01       	movw	r22, r14
    518e:	0e 94 3f 7d 	call	0xfa7e	; 0xfa7e <__fixunssfsi>
    5192:	86 2f       	mov	r24, r22
}
    5194:	1f 91       	pop	r17
    5196:	0f 91       	pop	r16
    5198:	ff 90       	pop	r15
    519a:	ef 90       	pop	r14
    519c:	df 90       	pop	r13
    519e:	cf 90       	pop	r12
    51a0:	bf 90       	pop	r11
    51a2:	af 90       	pop	r10
    51a4:	08 95       	ret

000051a6 <_ZN10Movimiento10inc_escalaEv>:
	}
	return sh.mv.escala;
}

// reduce la velocidad en movimiento
byte Movimiento::inc_escala () {
    51a6:	0f 93       	push	r16
    51a8:	1f 93       	push	r17
    51aa:	cf 93       	push	r28
    51ac:	df 93       	push	r29
    51ae:	ec 01       	movw	r28, r24
	if (sh.mv.escala < 255) {
    51b0:	fc 01       	movw	r30, r24
    51b2:	e0 52       	subi	r30, 0x20	; 32
    51b4:	fe 4f       	sbci	r31, 0xFE	; 254
    51b6:	10 81       	ld	r17, Z
    51b8:	1f 3f       	cpi	r17, 0xFF	; 255
    51ba:	49 f1       	breq	.+82     	; 0x520e <_ZN10Movimiento10inc_escalaEv+0x68>
		sh.mv.escala ++;
    51bc:	1f 5f       	subi	r17, 0xFF	; 255
    51be:	10 83       	st	Z, r17
		sh.cn.pausa = 1000*TICK*sh.mv.escala;
    51c0:	c8 51       	subi	r28, 0x18	; 24
    51c2:	de 4f       	sbci	r29, 0xFE	; 254
    51c4:	61 2f       	mov	r22, r17
    51c6:	70 e0       	ldi	r23, 0x00	; 0
    51c8:	88 27       	eor	r24, r24
    51ca:	77 fd       	sbrc	r23, 7
    51cc:	80 95       	com	r24
    51ce:	98 2f       	mov	r25, r24
    51d0:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    51d4:	20 e0       	ldi	r18, 0x00	; 0
    51d6:	30 e0       	ldi	r19, 0x00	; 0
    51d8:	40 e8       	ldi	r20, 0x80	; 128
    51da:	50 e4       	ldi	r21, 0x40	; 64
    51dc:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    51e0:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <__fixsfsi>
    51e4:	79 83       	std	Y+1, r23	; 0x01
    51e6:	68 83       	st	Y, r22
		sh.mv.nsegmentos = nseg (wk.mv.duracion_pasos, sh.mv.escala, 10);  // largo_pasos no se conoce, así que se estima en 10
    51e8:	c7 52       	subi	r28, 0x27	; 39
    51ea:	d1 40       	sbci	r29, 0x01	; 1
    51ec:	68 81       	ld	r22, Y
    51ee:	79 81       	ldd	r23, Y+1	; 0x01
    51f0:	c1 5c       	subi	r28, 0xC1	; 193
    51f2:	d0 40       	sbci	r29, 0x00	; 0
    51f4:	ce 01       	movw	r24, r28
    51f6:	41 2f       	mov	r20, r17
    51f8:	00 e0       	ldi	r16, 0x00	; 0
    51fa:	10 e0       	ldi	r17, 0x00	; 0
    51fc:	20 e2       	ldi	r18, 0x20	; 32
    51fe:	31 e4       	ldi	r19, 0x41	; 65
    5200:	0e 94 7e 28 	call	0x50fc	; 0x50fc <_ZN10Movimiento4nsegEihf>
    5204:	cf 51       	subi	r28, 0x1F	; 31
    5206:	de 4f       	sbci	r29, 0xFE	; 254
    5208:	88 83       	st	Y, r24
    520a:	c1 5e       	subi	r28, 0xE1	; 225
    520c:	d1 40       	sbci	r29, 0x01	; 1
    520e:	c0 52       	subi	r28, 0x20	; 32
    5210:	de 4f       	sbci	r29, 0xFE	; 254
	}
	return sh.mv.escala;
}
    5212:	88 81       	ld	r24, Y
    5214:	df 91       	pop	r29
    5216:	cf 91       	pop	r28
    5218:	1f 91       	pop	r17
    521a:	0f 91       	pop	r16
    521c:	08 95       	ret

0000521e <_ZN10Movimiento10dec_escalaEv>:
void Movimiento::cont () {
	sh.cn.enable = true;
}

// aumenta la velocidad en movimiento
byte Movimiento::dec_escala () {
    521e:	0f 93       	push	r16
    5220:	1f 93       	push	r17
    5222:	cf 93       	push	r28
    5224:	df 93       	push	r29
    5226:	ec 01       	movw	r28, r24
	if (sh.mv.escala > 1) {
    5228:	fc 01       	movw	r30, r24
    522a:	e0 52       	subi	r30, 0x20	; 32
    522c:	fe 4f       	sbci	r31, 0xFE	; 254
    522e:	10 81       	ld	r17, Z
    5230:	12 30       	cpi	r17, 0x02	; 2
    5232:	48 f1       	brcs	.+82     	; 0x5286 <_ZN10Movimiento10dec_escalaEv+0x68>
		sh.mv.escala --;
    5234:	11 50       	subi	r17, 0x01	; 1
    5236:	10 83       	st	Z, r17
		sh.cn.pausa = 1000*TICK*sh.mv.escala;
    5238:	c8 51       	subi	r28, 0x18	; 24
    523a:	de 4f       	sbci	r29, 0xFE	; 254
    523c:	61 2f       	mov	r22, r17
    523e:	70 e0       	ldi	r23, 0x00	; 0
    5240:	88 27       	eor	r24, r24
    5242:	77 fd       	sbrc	r23, 7
    5244:	80 95       	com	r24
    5246:	98 2f       	mov	r25, r24
    5248:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    524c:	20 e0       	ldi	r18, 0x00	; 0
    524e:	30 e0       	ldi	r19, 0x00	; 0
    5250:	40 e8       	ldi	r20, 0x80	; 128
    5252:	50 e4       	ldi	r21, 0x40	; 64
    5254:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    5258:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <__fixsfsi>
    525c:	79 83       	std	Y+1, r23	; 0x01
    525e:	68 83       	st	Y, r22
		sh.mv.nsegmentos = nseg (wk.mv.duracion_pasos, sh.mv.escala, 10);  // largo_pasos no se conoce, así que se estima en 10
    5260:	c7 52       	subi	r28, 0x27	; 39
    5262:	d1 40       	sbci	r29, 0x01	; 1
    5264:	68 81       	ld	r22, Y
    5266:	79 81       	ldd	r23, Y+1	; 0x01
    5268:	c1 5c       	subi	r28, 0xC1	; 193
    526a:	d0 40       	sbci	r29, 0x00	; 0
    526c:	ce 01       	movw	r24, r28
    526e:	41 2f       	mov	r20, r17
    5270:	00 e0       	ldi	r16, 0x00	; 0
    5272:	10 e0       	ldi	r17, 0x00	; 0
    5274:	20 e2       	ldi	r18, 0x20	; 32
    5276:	31 e4       	ldi	r19, 0x41	; 65
    5278:	0e 94 7e 28 	call	0x50fc	; 0x50fc <_ZN10Movimiento4nsegEihf>
    527c:	cf 51       	subi	r28, 0x1F	; 31
    527e:	de 4f       	sbci	r29, 0xFE	; 254
    5280:	88 83       	st	Y, r24
    5282:	c1 5e       	subi	r28, 0xE1	; 225
    5284:	d1 40       	sbci	r29, 0x01	; 1
    5286:	c0 52       	subi	r28, 0x20	; 32
    5288:	de 4f       	sbci	r29, 0xFE	; 254
	}
	return sh.mv.escala;
}
    528a:	88 81       	ld	r24, Y
    528c:	df 91       	pop	r29
    528e:	cf 91       	pop	r28
    5290:	1f 91       	pop	r17
    5292:	0f 91       	pop	r16
    5294:	08 95       	ret

00005296 <_ZN10Movimiento9h_correctE7COORD2D>:
byte Movimiento::nseg (int duracion_pasos, byte escala, float largo_pasos) {
	return constrain (duracion_pasos*escala*(largo_pasos/10)/TPS, 2, 10);       // esta fórmula sí tiene en cuenta la distancia
}

// devuelve la coordenada 'y' a partir de (x, z) usando la ecuación del plano (relativo)
COORD3D Movimiento::h_correct (COORD2D C) {
    5296:	9f 92       	push	r9
    5298:	af 92       	push	r10
    529a:	bf 92       	push	r11
    529c:	cf 92       	push	r12
    529e:	df 92       	push	r13
    52a0:	ef 92       	push	r14
    52a2:	ff 92       	push	r15
    52a4:	0f 93       	push	r16
    52a6:	1f 93       	push	r17
    52a8:	df 93       	push	r29
    52aa:	cf 93       	push	r28
    52ac:	cd b7       	in	r28, 0x3d	; 61
    52ae:	de b7       	in	r29, 0x3e	; 62
    52b0:	28 97       	sbiw	r28, 0x08	; 8
    52b2:	0f b6       	in	r0, 0x3f	; 63
    52b4:	f8 94       	cli
    52b6:	de bf       	out	0x3e, r29	; 62
    52b8:	0f be       	out	0x3f, r0	; 63
    52ba:	cd bf       	out	0x3d, r28	; 61
    52bc:	5c 01       	movw	r10, r24
    52be:	6b 01       	movw	r12, r22
    52c0:	9e 2c       	mov	r9, r14
    52c2:	e9 82       	std	Y+1, r14	; 0x01
    52c4:	fa 82       	std	Y+2, r15	; 0x02
    52c6:	b0 2f       	mov	r27, r16
    52c8:	0b 83       	std	Y+3, r16	; 0x03
    52ca:	a1 2f       	mov	r26, r17
    52cc:	1c 83       	std	Y+4, r17	; 0x04
    52ce:	f2 2f       	mov	r31, r18
    52d0:	2d 83       	std	Y+5, r18	; 0x05
    52d2:	e3 2f       	mov	r30, r19
    52d4:	3e 83       	std	Y+6, r19	; 0x06
    52d6:	64 2f       	mov	r22, r20
    52d8:	4f 83       	std	Y+7, r20	; 0x07
    52da:	75 2f       	mov	r23, r21
    52dc:	58 87       	std	Y+8, r21	; 0x08
	COORD3D P = xz2xyz (C);
    52de:	09 2d       	mov	r16, r9
    52e0:	1f 2d       	mov	r17, r15
    52e2:	2b 2f       	mov	r18, r27
    52e4:	3a 2f       	mov	r19, r26
    52e6:	4f 2f       	mov	r20, r31
    52e8:	5e 2f       	mov	r21, r30
    52ea:	0e 94 5f 6b 	call	0xd6be	; 0xd6be <_Z6xz2xyz7COORD2D>
	P.y = -(P.x*wk.rt.normal.x + P.z*wk.rt.normal.z) / wk.rt.normal.y; 
    52ee:	88 e8       	ldi	r24, 0x88	; 136
    52f0:	91 e0       	ldi	r25, 0x01	; 1
    52f2:	c8 0e       	add	r12, r24
    52f4:	d9 1e       	adc	r13, r25
    52f6:	f5 01       	movw	r30, r10
    52f8:	60 81       	ld	r22, Z
    52fa:	71 81       	ldd	r23, Z+1	; 0x01
    52fc:	82 81       	ldd	r24, Z+2	; 0x02
    52fe:	93 81       	ldd	r25, Z+3	; 0x03
    5300:	f6 01       	movw	r30, r12
    5302:	20 81       	ld	r18, Z
    5304:	31 81       	ldd	r19, Z+1	; 0x01
    5306:	42 81       	ldd	r20, Z+2	; 0x02
    5308:	53 81       	ldd	r21, Z+3	; 0x03
    530a:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    530e:	7b 01       	movw	r14, r22
    5310:	8c 01       	movw	r16, r24
    5312:	88 e0       	ldi	r24, 0x08	; 8
    5314:	90 e0       	ldi	r25, 0x00	; 0
    5316:	c8 0e       	add	r12, r24
    5318:	d9 1e       	adc	r13, r25
    531a:	f5 01       	movw	r30, r10
    531c:	60 85       	ldd	r22, Z+8	; 0x08
    531e:	71 85       	ldd	r23, Z+9	; 0x09
    5320:	82 85       	ldd	r24, Z+10	; 0x0a
    5322:	93 85       	ldd	r25, Z+11	; 0x0b
    5324:	f6 01       	movw	r30, r12
    5326:	20 81       	ld	r18, Z
    5328:	31 81       	ldd	r19, Z+1	; 0x01
    532a:	42 81       	ldd	r20, Z+2	; 0x02
    532c:	53 81       	ldd	r21, Z+3	; 0x03
    532e:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    5332:	9b 01       	movw	r18, r22
    5334:	ac 01       	movw	r20, r24
    5336:	c8 01       	movw	r24, r16
    5338:	b7 01       	movw	r22, r14
    533a:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    533e:	90 58       	subi	r25, 0x80	; 128
    5340:	f6 01       	movw	r30, r12
    5342:	52 91       	ld	r21, -Z
    5344:	42 91       	ld	r20, -Z
    5346:	32 91       	ld	r19, -Z
    5348:	22 91       	ld	r18, -Z
    534a:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    534e:	f5 01       	movw	r30, r10
    5350:	64 83       	std	Z+4, r22	; 0x04
    5352:	75 83       	std	Z+5, r23	; 0x05
    5354:	86 83       	std	Z+6, r24	; 0x06
    5356:	97 83       	std	Z+7, r25	; 0x07
	return P;
}
    5358:	c5 01       	movw	r24, r10
    535a:	28 96       	adiw	r28, 0x08	; 8
    535c:	0f b6       	in	r0, 0x3f	; 63
    535e:	f8 94       	cli
    5360:	de bf       	out	0x3e, r29	; 62
    5362:	0f be       	out	0x3f, r0	; 63
    5364:	cd bf       	out	0x3d, r28	; 61
    5366:	cf 91       	pop	r28
    5368:	df 91       	pop	r29
    536a:	1f 91       	pop	r17
    536c:	0f 91       	pop	r16
    536e:	ff 90       	pop	r15
    5370:	ef 90       	pop	r14
    5372:	df 90       	pop	r13
    5374:	cf 90       	pop	r12
    5376:	bf 90       	pop	r11
    5378:	af 90       	pop	r10
    537a:	9f 90       	pop	r9
    537c:	08 95       	ret

0000537e <_ZN10Movimiento9h_correctE7COORD2Dh>:

// devuelve la coordenada 'y' a partir de (x, z) usando la ecuación del plano (absoluto)
COORD3D Movimiento::h_correct (COORD2D C, byte pata) {
    537e:	7f 92       	push	r7
    5380:	8f 92       	push	r8
    5382:	9f 92       	push	r9
    5384:	af 92       	push	r10
    5386:	bf 92       	push	r11
    5388:	cf 92       	push	r12
    538a:	df 92       	push	r13
    538c:	ef 92       	push	r14
    538e:	ff 92       	push	r15
    5390:	0f 93       	push	r16
    5392:	1f 93       	push	r17
    5394:	df 93       	push	r29
    5396:	cf 93       	push	r28
    5398:	cd b7       	in	r28, 0x3d	; 61
    539a:	de b7       	in	r29, 0x3e	; 62
    539c:	a4 97       	sbiw	r28, 0x24	; 36
    539e:	0f b6       	in	r0, 0x3f	; 63
    53a0:	f8 94       	cli
    53a2:	de bf       	out	0x3e, r29	; 62
    53a4:	0f be       	out	0x3f, r0	; 63
    53a6:	cd bf       	out	0x3d, r28	; 61
    53a8:	4c 01       	movw	r8, r24
    53aa:	5b 01       	movw	r10, r22
    53ac:	ed 8a       	std	Y+21, r14	; 0x15
    53ae:	fe 8a       	std	Y+22, r15	; 0x16
    53b0:	0f 8b       	std	Y+23, r16	; 0x17
    53b2:	18 8f       	std	Y+24, r17	; 0x18
    53b4:	62 2f       	mov	r22, r18
    53b6:	29 8f       	std	Y+25, r18	; 0x19
    53b8:	73 2f       	mov	r23, r19
    53ba:	3a 8f       	std	Y+26, r19	; 0x1a
    53bc:	84 2f       	mov	r24, r20
    53be:	4b 8f       	std	Y+27, r20	; 0x1b
    53c0:	95 2f       	mov	r25, r21
    53c2:	5c 8f       	std	Y+28, r21	; 0x1c
    53c4:	7c 2c       	mov	r7, r12
	COORD3D P = xz2xyz (rel2abs(C, pata));
    53c6:	2e 2d       	mov	r18, r14
    53c8:	3f 2d       	mov	r19, r15
    53ca:	40 2f       	mov	r20, r16
    53cc:	51 2f       	mov	r21, r17
    53ce:	0c 2d       	mov	r16, r12
    53d0:	0e 94 f9 71 	call	0xe3f2	; 0xe3f2 <_Z7rel2abs7COORD2Dh>
    53d4:	2d 8f       	std	Y+29, r18	; 0x1d
    53d6:	3e 8f       	std	Y+30, r19	; 0x1e
    53d8:	4f 8f       	std	Y+31, r20	; 0x1f
    53da:	58 a3       	std	Y+32, r21	; 0x20
    53dc:	69 a3       	std	Y+33, r22	; 0x21
    53de:	7a a3       	std	Y+34, r23	; 0x22
    53e0:	8b a3       	std	Y+35, r24	; 0x23
    53e2:	9c a3       	std	Y+36, r25	; 0x24
    53e4:	de 01       	movw	r26, r28
    53e6:	11 96       	adiw	r26, 0x01	; 1
    53e8:	fe 01       	movw	r30, r28
    53ea:	7d 96       	adiw	r30, 0x1d	; 29
    53ec:	88 e0       	ldi	r24, 0x08	; 8
    53ee:	01 90       	ld	r0, Z+
    53f0:	0d 92       	st	X+, r0
    53f2:	81 50       	subi	r24, 0x01	; 1
    53f4:	e1 f7       	brne	.-8      	; 0x53ee <_ZN10Movimiento9h_correctE7COORD2Dh+0x70>
    53f6:	ce 01       	movw	r24, r28
    53f8:	09 96       	adiw	r24, 0x09	; 9
    53fa:	09 81       	ldd	r16, Y+1	; 0x01
    53fc:	1a 81       	ldd	r17, Y+2	; 0x02
    53fe:	2b 81       	ldd	r18, Y+3	; 0x03
    5400:	3c 81       	ldd	r19, Y+4	; 0x04
    5402:	4d 81       	ldd	r20, Y+5	; 0x05
    5404:	5e 81       	ldd	r21, Y+6	; 0x06
    5406:	6f 81       	ldd	r22, Y+7	; 0x07
    5408:	78 85       	ldd	r23, Y+8	; 0x08
    540a:	0e 94 5f 6b 	call	0xd6be	; 0xd6be <_Z6xz2xyz7COORD2D>
	P.y = -(P.x*wk.rt.normal.x + P.z*wk.rt.normal.z + wk.rt.d) / wk.rt.normal.y;
    540e:	28 e8       	ldi	r18, 0x88	; 136
    5410:	31 e0       	ldi	r19, 0x01	; 1
    5412:	a2 0e       	add	r10, r18
    5414:	b3 1e       	adc	r11, r19
    5416:	69 85       	ldd	r22, Y+9	; 0x09
    5418:	7a 85       	ldd	r23, Y+10	; 0x0a
    541a:	8b 85       	ldd	r24, Y+11	; 0x0b
    541c:	9c 85       	ldd	r25, Y+12	; 0x0c
    541e:	f5 01       	movw	r30, r10
    5420:	20 81       	ld	r18, Z
    5422:	31 81       	ldd	r19, Z+1	; 0x01
    5424:	42 81       	ldd	r20, Z+2	; 0x02
    5426:	53 81       	ldd	r21, Z+3	; 0x03
    5428:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    542c:	7b 01       	movw	r14, r22
    542e:	8c 01       	movw	r16, r24
    5430:	28 e0       	ldi	r18, 0x08	; 8
    5432:	30 e0       	ldi	r19, 0x00	; 0
    5434:	a2 0e       	add	r10, r18
    5436:	b3 1e       	adc	r11, r19
    5438:	69 89       	ldd	r22, Y+17	; 0x11
    543a:	7a 89       	ldd	r23, Y+18	; 0x12
    543c:	8b 89       	ldd	r24, Y+19	; 0x13
    543e:	9c 89       	ldd	r25, Y+20	; 0x14
    5440:	f5 01       	movw	r30, r10
    5442:	21 91       	ld	r18, Z+
    5444:	31 91       	ld	r19, Z+
    5446:	41 91       	ld	r20, Z+
    5448:	51 91       	ld	r21, Z+
    544a:	5f 01       	movw	r10, r30
    544c:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    5450:	9b 01       	movw	r18, r22
    5452:	ac 01       	movw	r20, r24
    5454:	c8 01       	movw	r24, r16
    5456:	b7 01       	movw	r22, r14
    5458:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    545c:	f5 01       	movw	r30, r10
    545e:	20 81       	ld	r18, Z
    5460:	31 81       	ldd	r19, Z+1	; 0x01
    5462:	42 81       	ldd	r20, Z+2	; 0x02
    5464:	53 81       	ldd	r21, Z+3	; 0x03
    5466:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    546a:	90 58       	subi	r25, 0x80	; 128
    546c:	28 ef       	ldi	r18, 0xF8	; 248
    546e:	3f ef       	ldi	r19, 0xFF	; 255
    5470:	a2 0e       	add	r10, r18
    5472:	b3 1e       	adc	r11, r19
    5474:	f5 01       	movw	r30, r10
    5476:	20 81       	ld	r18, Z
    5478:	31 81       	ldd	r19, Z+1	; 0x01
    547a:	42 81       	ldd	r20, Z+2	; 0x02
    547c:	53 81       	ldd	r21, Z+3	; 0x03
    547e:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    5482:	6d 87       	std	Y+13, r22	; 0x0d
    5484:	7e 87       	std	Y+14, r23	; 0x0e
    5486:	8f 87       	std	Y+15, r24	; 0x0f
    5488:	98 8b       	std	Y+16, r25	; 0x10
	return abs2rel (P, pata);
    548a:	c4 01       	movw	r24, r8
    548c:	c9 84       	ldd	r12, Y+9	; 0x09
    548e:	da 84       	ldd	r13, Y+10	; 0x0a
    5490:	eb 84       	ldd	r14, Y+11	; 0x0b
    5492:	fc 84       	ldd	r15, Y+12	; 0x0c
    5494:	0d 85       	ldd	r16, Y+13	; 0x0d
    5496:	1e 85       	ldd	r17, Y+14	; 0x0e
    5498:	2f 85       	ldd	r18, Y+15	; 0x0f
    549a:	38 89       	ldd	r19, Y+16	; 0x10
    549c:	49 89       	ldd	r20, Y+17	; 0x11
    549e:	5a 89       	ldd	r21, Y+18	; 0x12
    54a0:	6b 89       	ldd	r22, Y+19	; 0x13
    54a2:	7c 89       	ldd	r23, Y+20	; 0x14
    54a4:	a7 2c       	mov	r10, r7
    54a6:	0e 94 2a 71 	call	0xe254	; 0xe254 <_Z7abs2rel7COORD3Dh>
}
    54aa:	c4 01       	movw	r24, r8
    54ac:	a4 96       	adiw	r28, 0x24	; 36
    54ae:	0f b6       	in	r0, 0x3f	; 63
    54b0:	f8 94       	cli
    54b2:	de bf       	out	0x3e, r29	; 62
    54b4:	0f be       	out	0x3f, r0	; 63
    54b6:	cd bf       	out	0x3d, r28	; 61
    54b8:	cf 91       	pop	r28
    54ba:	df 91       	pop	r29
    54bc:	1f 91       	pop	r17
    54be:	0f 91       	pop	r16
    54c0:	ff 90       	pop	r15
    54c2:	ef 90       	pop	r14
    54c4:	df 90       	pop	r13
    54c6:	cf 90       	pop	r12
    54c8:	bf 90       	pop	r11
    54ca:	af 90       	pop	r10
    54cc:	9f 90       	pop	r9
    54ce:	8f 90       	pop	r8
    54d0:	7f 90       	pop	r7
    54d2:	08 95       	ret

000054d4 <_ZN10Movimiento6updateEm>:
// posición y que lentamente se vaya acomodando, la clave es: transformar sh.mv.pos_ref
// nueva corrección de planos inclinados - hay que testear performance
// se podría optimizar la caminata recta haciendo un vector 3D que ya tenga la 'y' corregida...
// ... pero en cambio, esto no es posible en la curva, donde hay que hacer montones de cálculos por cada pata.

void Movimiento::update (unsigned long milis) {          // esto es un kilombo. Solución: la "update" pasaría a ser una clase nueva
    54d4:	2f 92       	push	r2
    54d6:	3f 92       	push	r3
    54d8:	4f 92       	push	r4
    54da:	5f 92       	push	r5
    54dc:	6f 92       	push	r6
    54de:	7f 92       	push	r7
    54e0:	8f 92       	push	r8
    54e2:	9f 92       	push	r9
    54e4:	af 92       	push	r10
    54e6:	bf 92       	push	r11
    54e8:	cf 92       	push	r12
    54ea:	df 92       	push	r13
    54ec:	ef 92       	push	r14
    54ee:	ff 92       	push	r15
    54f0:	0f 93       	push	r16
    54f2:	1f 93       	push	r17
    54f4:	df 93       	push	r29
    54f6:	cf 93       	push	r28
    54f8:	cd b7       	in	r28, 0x3d	; 61
    54fa:	de b7       	in	r29, 0x3e	; 62
    54fc:	cc 57       	subi	r28, 0x7C	; 124
    54fe:	d1 40       	sbci	r29, 0x01	; 1
    5500:	0f b6       	in	r0, 0x3f	; 63
    5502:	f8 94       	cli
    5504:	de bf       	out	0x3e, r29	; 62
    5506:	0f be       	out	0x3f, r0	; 63
    5508:	cd bf       	out	0x3d, r28	; 61
    550a:	3c 01       	movw	r6, r24
    550c:	7a 01       	movw	r14, r20
    550e:	8b 01       	movw	r16, r22
  
  // única variable de control exclusiva de la "update"
  static unsigned long timer = 0;                         // timer
  
  // verifica si pasó x tiempo desde la última vez que se ejecutó el micropaso, y si no, retorna sin hacer nada 
  if (milis-timer < sh.cn.pausa) {return;} 
    5510:	80 91 cb 12 	lds	r24, 0x12CB
    5514:	90 91 cc 12 	lds	r25, 0x12CC
    5518:	a0 91 cd 12 	lds	r26, 0x12CD
    551c:	b0 91 ce 12 	lds	r27, 0x12CE
    5520:	9a 01       	movw	r18, r20
    5522:	ab 01       	movw	r20, r22
    5524:	28 1b       	sub	r18, r24
    5526:	39 0b       	sbc	r19, r25
    5528:	4a 0b       	sbc	r20, r26
    552a:	5b 0b       	sbc	r21, r27
    552c:	68 ee       	ldi	r22, 0xE8	; 232
    552e:	71 e0       	ldi	r23, 0x01	; 1
    5530:	66 0e       	add	r6, r22
    5532:	77 1e       	adc	r7, r23
    5534:	d3 01       	movw	r26, r6
    5536:	8d 91       	ld	r24, X+
    5538:	9c 91       	ld	r25, X
    553a:	e8 e1       	ldi	r30, 0x18	; 24
    553c:	fe ef       	ldi	r31, 0xFE	; 254
    553e:	6e 0e       	add	r6, r30
    5540:	7f 1e       	adc	r7, r31
    5542:	aa 27       	eor	r26, r26
    5544:	97 fd       	sbrc	r25, 7
    5546:	a0 95       	com	r26
    5548:	ba 2f       	mov	r27, r26
    554a:	28 17       	cp	r18, r24
    554c:	39 07       	cpc	r19, r25
    554e:	4a 07       	cpc	r20, r26
    5550:	5b 07       	cpc	r21, r27
    5552:	10 f4       	brcc	.+4      	; 0x5558 <_ZN10Movimiento6updateEm+0x84>
    5554:	0c 94 37 3a 	jmp	0x746e	; 0x746e <_ZN10Movimiento6updateEm+0x1f9a>
  timer = milis;
    5558:	e0 92 cb 12 	sts	0x12CB, r14
    555c:	f0 92 cc 12 	sts	0x12CC, r15
    5560:	00 93 cd 12 	sts	0x12CD, r16
    5564:	10 93 ce 12 	sts	0x12CE, r17
  
	// empieza el loop (bloque activo)
	if (sh.cn.enable) {
    5568:	a3 01       	movw	r20, r6
    556a:	4c 51       	subi	r20, 0x1C	; 28
    556c:	5e 4f       	sbci	r21, 0xFE	; 254
    556e:	da 01       	movw	r26, r20
    5570:	8c 91       	ld	r24, X
    5572:	88 23       	and	r24, r24
    5574:	11 f4       	brne	.+4      	; 0x557a <_ZN10Movimiento6updateEm+0xa6>
    5576:	0c 94 37 3a 	jmp	0x746e	; 0x746e <_ZN10Movimiento6updateEm+0x1f9a>
		if (sh.cn.tick < sh.mv.ticks) {
    557a:	d3 01       	movw	r26, r6
    557c:	aa 51       	subi	r26, 0x1A	; 26
    557e:	be 4f       	sbci	r27, 0xFE	; 254
    5580:	6d 91       	ld	r22, X+
    5582:	7c 91       	ld	r23, X
    5584:	11 97       	sbiw	r26, 0x01	; 1
    5586:	e2 ee       	ldi	r30, 0xE2	; 226
    5588:	f1 e0       	ldi	r31, 0x01	; 1
    558a:	6e 0e       	add	r6, r30
    558c:	7f 1e       	adc	r7, r31
    558e:	f3 01       	movw	r30, r6
    5590:	80 81       	ld	r24, Z
    5592:	91 81       	ldd	r25, Z+1	; 0x01
    5594:	2e e1       	ldi	r18, 0x1E	; 30
    5596:	3e ef       	ldi	r19, 0xFE	; 254
    5598:	62 0e       	add	r6, r18
    559a:	73 1e       	adc	r7, r19
    559c:	68 17       	cp	r22, r24
    559e:	79 07       	cpc	r23, r25
    55a0:	10 f0       	brcs	.+4      	; 0x55a6 <_ZN10Movimiento6updateEm+0xd2>
    55a2:	0c 94 35 3a 	jmp	0x746a	; 0x746a <_ZN10Movimiento6updateEm+0x1f96>
			switch (sh.cn.mode) {
    55a6:	45 ee       	ldi	r20, 0xE5	; 229
    55a8:	51 e0       	ldi	r21, 0x01	; 1
    55aa:	64 0e       	add	r6, r20
    55ac:	75 1e       	adc	r7, r21
    55ae:	f3 01       	movw	r30, r6
    55b0:	80 81       	ld	r24, Z
    55b2:	2b e1       	ldi	r18, 0x1B	; 27
    55b4:	3e ef       	ldi	r19, 0xFE	; 254
    55b6:	62 0e       	add	r6, r18
    55b8:	73 1e       	adc	r7, r19
    55ba:	88 23       	and	r24, r24
    55bc:	31 f0       	breq	.+12     	; 0x55ca <_ZN10Movimiento6updateEm+0xf6>
    55be:	81 30       	cpi	r24, 0x01	; 1
    55c0:	11 f0       	breq	.+4      	; 0x55c6 <_ZN10Movimiento6updateEm+0xf2>
    55c2:	0c 94 2c 3a 	jmp	0x7458	; 0x7458 <_ZN10Movimiento6updateEm+0x1f84>
    55c6:	0c 94 ad 38 	jmp	0x715a	; 0x715a <_ZN10Movimiento6updateEm+0x1c86>
				case CAMINATA: {
					
					// compensación de posición de referencia
					if (wk.mv.compensate && sh.cn.tick < 2*wk.rt.ciclo) {
    55ca:	43 ec       	ldi	r20, 0xC3	; 195
    55cc:	50 e0       	ldi	r21, 0x00	; 0
    55ce:	64 0e       	add	r6, r20
    55d0:	75 1e       	adc	r7, r21
    55d2:	d3 01       	movw	r26, r6
    55d4:	8c 91       	ld	r24, X
    55d6:	ed e3       	ldi	r30, 0x3D	; 61
    55d8:	ff ef       	ldi	r31, 0xFF	; 255
    55da:	6e 0e       	add	r6, r30
    55dc:	7f 1e       	adc	r7, r31
    55de:	88 23       	and	r24, r24
    55e0:	09 f4       	brne	.+2      	; 0x55e4 <_ZN10Movimiento6updateEm+0x110>
    55e2:	53 c0       	rjmp	.+166    	; 0x568a <_ZN10Movimiento6updateEm+0x1b6>
    55e4:	80 e0       	ldi	r24, 0x00	; 0
    55e6:	90 e0       	ldi	r25, 0x00	; 0
    55e8:	0e 94 6b 7d 	call	0xfad6	; 0xfad6 <__floatunsisf>
    55ec:	7b 01       	movw	r14, r22
    55ee:	8c 01       	movw	r16, r24
    55f0:	28 ec       	ldi	r18, 0xC8	; 200
    55f2:	30 e0       	ldi	r19, 0x00	; 0
    55f4:	62 0e       	add	r6, r18
    55f6:	73 1e       	adc	r7, r19
    55f8:	d3 01       	movw	r26, r6
    55fa:	2d 91       	ld	r18, X+
    55fc:	3d 91       	ld	r19, X+
    55fe:	4d 91       	ld	r20, X+
    5600:	5c 91       	ld	r21, X
    5602:	e8 e3       	ldi	r30, 0x38	; 56
    5604:	ff ef       	ldi	r31, 0xFF	; 255
    5606:	6e 0e       	add	r6, r30
    5608:	7f 1e       	adc	r7, r31
    560a:	ca 01       	movw	r24, r20
    560c:	b9 01       	movw	r22, r18
    560e:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    5612:	9b 01       	movw	r18, r22
    5614:	ac 01       	movw	r20, r24
    5616:	c8 01       	movw	r24, r16
    5618:	b7 01       	movw	r22, r14
    561a:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    561e:	88 23       	and	r24, r24
    5620:	a4 f5       	brge	.+104    	; 0x568a <_ZN10Movimiento6updateEm+0x1b6>
    5622:	aa 24       	eor	r10, r10
    5624:	bb 24       	eor	r11, r11
						for (byte pata=0; pata<6; pata++) {
							sumasigna (&wk.rt.pos_ref[pata], wk.rt.comp[pata]);  
    5626:	c5 01       	movw	r24, r10
    5628:	88 0f       	add	r24, r24
    562a:	99 1f       	adc	r25, r25
    562c:	8a 0d       	add	r24, r10
    562e:	9b 1d       	adc	r25, r11
    5630:	88 0f       	add	r24, r24
    5632:	99 1f       	adc	r25, r25
    5634:	88 0f       	add	r24, r24
    5636:	99 1f       	adc	r25, r25
    5638:	f3 01       	movw	r30, r6
    563a:	e8 0f       	add	r30, r24
    563c:	f9 1f       	adc	r31, r25
    563e:	e0 51       	subi	r30, 0x10	; 16
    5640:	ff 4f       	sbci	r31, 0xFF	; 255
    5642:	88 5c       	subi	r24, 0xC8	; 200
    5644:	9e 4f       	sbci	r25, 0xFE	; 254
    5646:	86 0d       	add	r24, r6
    5648:	97 1d       	adc	r25, r7
    564a:	c0 80       	ld	r12, Z
    564c:	d1 80       	ldd	r13, Z+1	; 0x01
    564e:	e2 80       	ldd	r14, Z+2	; 0x02
    5650:	f3 80       	ldd	r15, Z+3	; 0x03
    5652:	04 81       	ldd	r16, Z+4	; 0x04
    5654:	15 81       	ldd	r17, Z+5	; 0x05
    5656:	26 81       	ldd	r18, Z+6	; 0x06
    5658:	37 81       	ldd	r19, Z+7	; 0x07
    565a:	40 85       	ldd	r20, Z+8	; 0x08
    565c:	51 85       	ldd	r21, Z+9	; 0x09
    565e:	62 85       	ldd	r22, Z+10	; 0x0a
    5660:	73 85       	ldd	r23, Z+11	; 0x0b
    5662:	0e 94 72 6d 	call	0xdae4	; 0xdae4 <_Z9sumasignaP7COORD3DS_>
    5666:	08 94       	sec
    5668:	a1 1c       	adc	r10, r1
    566a:	b1 1c       	adc	r11, r1
			switch (sh.cn.mode) {
				case CAMINATA: {
					
					// compensación de posición de referencia
					if (wk.mv.compensate && sh.cn.tick < 2*wk.rt.ciclo) {
						for (byte pata=0; pata<6; pata++) {
    566c:	f6 e0       	ldi	r31, 0x06	; 6
    566e:	af 16       	cp	r10, r31
    5670:	b1 04       	cpc	r11, r1
    5672:	c9 f6       	brne	.-78     	; 0x5626 <_ZN10Movimiento6updateEm+0x152>
							sumasigna (&wk.rt.pos_ref[pata], wk.rt.comp[pata]);  
						}
						ec_plano (wk.rt.pos_ref, &wk.rt.normal, &wk.rt.d);   // calcula nuevamente la ecuación del plano
    5674:	b3 01       	movw	r22, r6
    5676:	68 57       	subi	r22, 0x78	; 120
    5678:	7e 4f       	sbci	r23, 0xFE	; 254
    567a:	a3 01       	movw	r20, r6
    567c:	4c 56       	subi	r20, 0x6C	; 108
    567e:	5e 4f       	sbci	r21, 0xFE	; 254
    5680:	c3 01       	movw	r24, r6
    5682:	88 5c       	subi	r24, 0xC8	; 200
    5684:	9e 4f       	sbci	r25, 0xFE	; 254
    5686:	0e 94 eb 72 	call	0xe5d6	; 0xe5d6 <_Z8ec_planoP7COORD3DS0_Pf>
					}
					
					// tratamiento de los "pasitos"
					if ((sh.cn.tick%wk.mv.periodo_sub_ciclo)-wk.mv.periodo_pasos*(wk.rt.index%wk.mv.agrupamiento) == 0) {
    568a:	96 ee       	ldi	r25, 0xE6	; 230
    568c:	e9 2e       	mov	r14, r25
    568e:	91 e0       	ldi	r25, 0x01	; 1
    5690:	f9 2e       	mov	r15, r25
    5692:	e6 0c       	add	r14, r6
    5694:	f7 1c       	adc	r15, r7
    5696:	2d eb       	ldi	r18, 0xBD	; 189
    5698:	30 e0       	ldi	r19, 0x00	; 0
    569a:	62 0e       	add	r6, r18
    569c:	73 1e       	adc	r7, r19
    569e:	d3 01       	movw	r26, r6
    56a0:	6d 91       	ld	r22, X+
    56a2:	7c 91       	ld	r23, X
    56a4:	e3 e4       	ldi	r30, 0x43	; 67
    56a6:	ff ef       	ldi	r31, 0xFF	; 255
    56a8:	6e 0e       	add	r6, r30
    56aa:	7f 1e       	adc	r7, r31
    56ac:	d7 01       	movw	r26, r14
    56ae:	8d 91       	ld	r24, X+
    56b0:	9c 91       	ld	r25, X
    56b2:	0e 94 0b 81 	call	0x10216	; 0x10216 <__udivmodhi4>
    56b6:	fc 01       	movw	r30, r24
    56b8:	83 01       	movw	r16, r6
    56ba:	00 58       	subi	r16, 0x80	; 128
    56bc:	1e 4f       	sbci	r17, 0xFE	; 254
    56be:	2c eb       	ldi	r18, 0xBC	; 188
    56c0:	30 e0       	ldi	r19, 0x00	; 0
    56c2:	62 0e       	add	r6, r18
    56c4:	73 1e       	adc	r7, r19
    56c6:	d3 01       	movw	r26, r6
    56c8:	6c 91       	ld	r22, X
    56ca:	d8 01       	movw	r26, r16
    56cc:	8c 91       	ld	r24, X
    56ce:	90 e0       	ldi	r25, 0x00	; 0
    56d0:	70 e0       	ldi	r23, 0x00	; 0
    56d2:	0e 94 0b 81 	call	0x10216	; 0x10216 <__udivmodhi4>
    56d6:	23 e0       	ldi	r18, 0x03	; 3
    56d8:	30 e0       	ldi	r19, 0x00	; 0
    56da:	62 0e       	add	r6, r18
    56dc:	73 1e       	adc	r7, r19
    56de:	d3 01       	movw	r26, r6
    56e0:	2d 91       	ld	r18, X+
    56e2:	3c 91       	ld	r19, X
    56e4:	41 e4       	ldi	r20, 0x41	; 65
    56e6:	5f ef       	ldi	r21, 0xFF	; 255
    56e8:	64 0e       	add	r6, r20
    56ea:	75 1e       	adc	r7, r21
    56ec:	bc 01       	movw	r22, r24
    56ee:	62 9f       	mul	r22, r18
    56f0:	c0 01       	movw	r24, r0
    56f2:	63 9f       	mul	r22, r19
    56f4:	90 0d       	add	r25, r0
    56f6:	72 9f       	mul	r23, r18
    56f8:	90 0d       	add	r25, r0
    56fa:	11 24       	eor	r1, r1
    56fc:	e8 17       	cp	r30, r24
    56fe:	f9 07       	cpc	r31, r25
    5700:	11 f0       	breq	.+4      	; 0x5706 <_ZN10Movimiento6updateEm+0x232>
    5702:	0c 94 4b 34 	jmp	0x6896	; 0x6896 <_ZN10Movimiento6updateEm+0x13c2>
										break;
									}
								} else {
									// rotación
									COORD2D O = getOffset (pata); // no usamos rel2abs/abs2rel por razones de eficiencia
									C = resta (suma (applyMatrix (resta (suma (xyz2xz(wk.rt.pos_ref[pata]), O), wk.mv.vector), wk.rt.rotor2), wk.mv.vector), O);   
    5706:	c3 01       	movw	r24, r6
    5708:	80 52       	subi	r24, 0x20	; 32
    570a:	9f 4f       	sbci	r25, 0xFF	; 255
    570c:	cd 59       	subi	r28, 0x9D	; 157
    570e:	de 4f       	sbci	r29, 0xFE	; 254
    5710:	99 83       	std	Y+1, r25	; 0x01
    5712:	88 83       	st	Y, r24
    5714:	c3 56       	subi	r28, 0x63	; 99
    5716:	d1 40       	sbci	r29, 0x01	; 1
    5718:	22 24       	eor	r2, r2
    571a:	33 24       	eor	r3, r3
					
					// tratamiento de los "pasitos"
					if ((sh.cn.tick%wk.mv.periodo_sub_ciclo)-wk.mv.periodo_pasos*(wk.rt.index%wk.mv.agrupamiento) == 0) {
									
						for (byte pata=0; pata<6; pata++) {
							if ((wk.mv.secuencia[wk.rt.index]>>pata)&1) {
    571c:	c5 59       	subi	r28, 0x95	; 149
    571e:	de 4f       	sbci	r29, 0xFE	; 254
    5720:	19 83       	std	Y+1, r17	; 0x01
    5722:	08 83       	st	Y, r16
    5724:	cb 56       	subi	r28, 0x6B	; 107
    5726:	d1 40       	sbci	r29, 0x01	; 1
								COORD2D C;
								float atenuador; 
								
								// "zancada progresiva"
								if (sh.cn.tick <= 2*wk.rt.ciclo) {atenuador = 1.6 * sigmoide(.5*sh.cn.tick/wk.rt.ciclo) - .6;} else {atenuador = 1;}
    5728:	c3 59       	subi	r28, 0x93	; 147
    572a:	de 4f       	sbci	r29, 0xFE	; 254
    572c:	f9 82       	std	Y+1, r15	; 0x01
    572e:	e8 82       	st	Y, r14
    5730:	cd 56       	subi	r28, 0x6D	; 109
    5732:	d1 40       	sbci	r29, 0x01	; 1
    5734:	d3 01       	movw	r26, r6
    5736:	a8 53       	subi	r26, 0x38	; 56
    5738:	bf 4f       	sbci	r27, 0xFF	; 255
    573a:	c1 59       	subi	r28, 0x91	; 145
    573c:	de 4f       	sbci	r29, 0xFE	; 254
    573e:	b9 83       	std	Y+1, r27	; 0x01
    5740:	a8 83       	st	Y, r26
    5742:	cf 56       	subi	r28, 0x6F	; 111
    5744:	d1 40       	sbci	r29, 0x01	; 1
								
								if (wk.mv.rotacion == 0) {
    5746:	f3 01       	movw	r30, r6
    5748:	ef 54       	subi	r30, 0x4F	; 79
    574a:	ff 4f       	sbci	r31, 0xFF	; 255
    574c:	cf 58       	subi	r28, 0x8F	; 143
    574e:	de 4f       	sbci	r29, 0xFE	; 254
    5750:	f9 83       	std	Y+1, r31	; 0x01
    5752:	e8 83       	st	Y, r30
    5754:	c1 57       	subi	r28, 0x71	; 113
    5756:	d1 40       	sbci	r29, 0x01	; 1
									}
								} 
								
								// pasito
			//				pasito (1<<pata, (COORD3D) {C.x, wk.rt.pos_ref[pata].y, C.z}, true, 0, sh.mv.escala*wk.mv.duracion_pasos, sh.mv.nsegmentos, suma(wk.rt.pos_ref[pata], (COORD3D){0,wk.mv.altura_pasito,0}));
								pasito (1<<pata, h_correct(C, pata), true, 0, sh.mv.escala*wk.mv.duracion_pasos, sh.mv.nsegmentos, suma(wk.rt.pos_ref[pata], (COORD3D){0,wk.mv.altura_pasito,0}));
    5758:	93 01       	movw	r18, r6
    575a:	20 52       	subi	r18, 0x20	; 32
    575c:	3e 4f       	sbci	r19, 0xFE	; 254
    575e:	cd 58       	subi	r28, 0x8D	; 141
    5760:	de 4f       	sbci	r29, 0xFE	; 254
    5762:	39 83       	std	Y+1, r19	; 0x01
    5764:	28 83       	st	Y, r18
    5766:	c3 57       	subi	r28, 0x73	; 115
    5768:	d1 40       	sbci	r29, 0x01	; 1
    576a:	a3 01       	movw	r20, r6
    576c:	4f 53       	subi	r20, 0x3F	; 63
    576e:	5f 4f       	sbci	r21, 0xFF	; 255
    5770:	cb 58       	subi	r28, 0x8B	; 139
    5772:	de 4f       	sbci	r29, 0xFE	; 254
    5774:	59 83       	std	Y+1, r21	; 0x01
    5776:	48 83       	st	Y, r20
    5778:	c5 57       	subi	r28, 0x75	; 117
    577a:	d1 40       	sbci	r29, 0x01	; 1
    577c:	b3 01       	movw	r22, r6
    577e:	6f 51       	subi	r22, 0x1F	; 31
    5780:	7e 4f       	sbci	r23, 0xFE	; 254
    5782:	c9 58       	subi	r28, 0x89	; 137
    5784:	de 4f       	sbci	r29, 0xFE	; 254
    5786:	79 83       	std	Y+1, r23	; 0x01
    5788:	68 83       	st	Y, r22
    578a:	c7 57       	subi	r28, 0x77	; 119
    578c:	d1 40       	sbci	r29, 0x01	; 1
    578e:	c3 01       	movw	r24, r6
    5790:	8c 53       	subi	r24, 0x3C	; 60
    5792:	9f 4f       	sbci	r25, 0xFF	; 255
    5794:	c7 58       	subi	r28, 0x87	; 135
    5796:	de 4f       	sbci	r29, 0xFE	; 254
    5798:	99 83       	std	Y+1, r25	; 0x01
    579a:	88 83       	st	Y, r24
    579c:	c9 57       	subi	r28, 0x79	; 121
    579e:	d1 40       	sbci	r29, 0x01	; 1
										break;
									}
								} else {
									// rotación
									COORD2D O = getOffset (pata); // no usamos rel2abs/abs2rel por razones de eficiencia
									C = resta (suma (applyMatrix (resta (suma (xyz2xz(wk.rt.pos_ref[pata]), O), wk.mv.vector), wk.rt.rotor2), wk.mv.vector), O);   
    57a0:	89 ea       	ldi	r24, 0xA9	; 169
    57a2:	48 2e       	mov	r4, r24
    57a4:	51 2c       	mov	r5, r1
    57a6:	46 0c       	add	r4, r6
    57a8:	57 1c       	adc	r5, r7
    57aa:	92 2c       	mov	r9, r2
					
					// tratamiento de los "pasitos"
					if ((sh.cn.tick%wk.mv.periodo_sub_ciclo)-wk.mv.periodo_pasos*(wk.rt.index%wk.mv.agrupamiento) == 0) {
									
						for (byte pata=0; pata<6; pata++) {
							if ((wk.mv.secuencia[wk.rt.index]>>pata)&1) {
    57ac:	c5 59       	subi	r28, 0x95	; 149
    57ae:	de 4f       	sbci	r29, 0xFE	; 254
    57b0:	a8 81       	ld	r26, Y
    57b2:	b9 81       	ldd	r27, Y+1	; 0x01
    57b4:	cb 56       	subi	r28, 0x6B	; 107
    57b6:	d1 40       	sbci	r29, 0x01	; 1
    57b8:	8c 91       	ld	r24, X
    57ba:	f3 01       	movw	r30, r6
    57bc:	e8 0f       	add	r30, r24
    57be:	f1 1d       	adc	r31, r1
    57c0:	eb 54       	subi	r30, 0x4B	; 75
    57c2:	ff 4f       	sbci	r31, 0xFF	; 255
    57c4:	80 81       	ld	r24, Z
    57c6:	90 e0       	ldi	r25, 0x00	; 0
    57c8:	02 2c       	mov	r0, r2
    57ca:	02 c0       	rjmp	.+4      	; 0x57d0 <_ZN10Movimiento6updateEm+0x2fc>
    57cc:	95 95       	asr	r25
    57ce:	87 95       	ror	r24
    57d0:	0a 94       	dec	r0
    57d2:	e2 f7       	brpl	.-8      	; 0x57cc <_ZN10Movimiento6updateEm+0x2f8>
    57d4:	80 fd       	sbrc	r24, 0
    57d6:	02 c0       	rjmp	.+4      	; 0x57dc <_ZN10Movimiento6updateEm+0x308>
    57d8:	0c 94 20 34 	jmp	0x6840	; 0x6840 <_ZN10Movimiento6updateEm+0x136c>
								COORD2D C;
								float atenuador; 
								
								// "zancada progresiva"
								if (sh.cn.tick <= 2*wk.rt.ciclo) {atenuador = 1.6 * sigmoide(.5*sh.cn.tick/wk.rt.ciclo) - .6;} else {atenuador = 1;}
    57dc:	c3 59       	subi	r28, 0x93	; 147
    57de:	de 4f       	sbci	r29, 0xFE	; 254
    57e0:	e8 81       	ld	r30, Y
    57e2:	f9 81       	ldd	r31, Y+1	; 0x01
    57e4:	cd 56       	subi	r28, 0x6D	; 109
    57e6:	d1 40       	sbci	r29, 0x01	; 1
    57e8:	60 81       	ld	r22, Z
    57ea:	71 81       	ldd	r23, Z+1	; 0x01
    57ec:	80 e0       	ldi	r24, 0x00	; 0
    57ee:	90 e0       	ldi	r25, 0x00	; 0
    57f0:	0e 94 6b 7d 	call	0xfad6	; 0xfad6 <__floatunsisf>
    57f4:	5b 01       	movw	r10, r22
    57f6:	6c 01       	movw	r12, r24
    57f8:	c1 59       	subi	r28, 0x91	; 145
    57fa:	de 4f       	sbci	r29, 0xFE	; 254
    57fc:	a8 81       	ld	r26, Y
    57fe:	b9 81       	ldd	r27, Y+1	; 0x01
    5800:	cf 56       	subi	r28, 0x6F	; 111
    5802:	d1 40       	sbci	r29, 0x01	; 1
    5804:	ed 90       	ld	r14, X+
    5806:	fd 90       	ld	r15, X+
    5808:	0d 91       	ld	r16, X+
    580a:	1c 91       	ld	r17, X
    580c:	c8 01       	movw	r24, r16
    580e:	b7 01       	movw	r22, r14
    5810:	a8 01       	movw	r20, r16
    5812:	97 01       	movw	r18, r14
    5814:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    5818:	9b 01       	movw	r18, r22
    581a:	ac 01       	movw	r20, r24
    581c:	c6 01       	movw	r24, r12
    581e:	b5 01       	movw	r22, r10
    5820:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    5824:	18 16       	cp	r1, r24
    5826:	6c f4       	brge	.+26     	; 0x5842 <_ZN10Movimiento6updateEm+0x36e>
    5828:	20 e0       	ldi	r18, 0x00	; 0
    582a:	30 e0       	ldi	r19, 0x00	; 0
    582c:	40 e8       	ldi	r20, 0x80	; 128
    582e:	5f e3       	ldi	r21, 0x3F	; 63
    5830:	c3 5a       	subi	r28, 0xA3	; 163
    5832:	de 4f       	sbci	r29, 0xFE	; 254
    5834:	28 83       	st	Y, r18
    5836:	39 83       	std	Y+1, r19	; 0x01
    5838:	4a 83       	std	Y+2, r20	; 0x02
    583a:	5b 83       	std	Y+3, r21	; 0x03
    583c:	cd 55       	subi	r28, 0x5D	; 93
    583e:	d1 40       	sbci	r29, 0x01	; 1
    5840:	22 c0       	rjmp	.+68     	; 0x5886 <_ZN10Movimiento6updateEm+0x3b2>
    5842:	c6 01       	movw	r24, r12
    5844:	b5 01       	movw	r22, r10
    5846:	20 e0       	ldi	r18, 0x00	; 0
    5848:	30 e0       	ldi	r19, 0x00	; 0
    584a:	40 e0       	ldi	r20, 0x00	; 0
    584c:	5f e3       	ldi	r21, 0x3F	; 63
    584e:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    5852:	a8 01       	movw	r20, r16
    5854:	97 01       	movw	r18, r14
    5856:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    585a:	0e 94 9b 68 	call	0xd136	; 0xd136 <_Z8sigmoided>
    585e:	2d ec       	ldi	r18, 0xCD	; 205
    5860:	3c ec       	ldi	r19, 0xCC	; 204
    5862:	4c ec       	ldi	r20, 0xCC	; 204
    5864:	5f e3       	ldi	r21, 0x3F	; 63
    5866:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    586a:	2a e9       	ldi	r18, 0x9A	; 154
    586c:	39 e9       	ldi	r19, 0x99	; 153
    586e:	49 e1       	ldi	r20, 0x19	; 25
    5870:	5f e3       	ldi	r21, 0x3F	; 63
    5872:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    5876:	c3 5a       	subi	r28, 0xA3	; 163
    5878:	de 4f       	sbci	r29, 0xFE	; 254
    587a:	68 83       	st	Y, r22
    587c:	79 83       	std	Y+1, r23	; 0x01
    587e:	8a 83       	std	Y+2, r24	; 0x02
    5880:	9b 83       	std	Y+3, r25	; 0x03
    5882:	cd 55       	subi	r28, 0x5D	; 93
    5884:	d1 40       	sbci	r29, 0x01	; 1
								
								if (wk.mv.rotacion == 0) {
    5886:	cf 58       	subi	r28, 0x8F	; 143
    5888:	de 4f       	sbci	r29, 0xFE	; 254
    588a:	a8 81       	ld	r26, Y
    588c:	b9 81       	ldd	r27, Y+1	; 0x01
    588e:	c1 57       	subi	r28, 0x71	; 113
    5890:	d1 40       	sbci	r29, 0x01	; 1
    5892:	6d 91       	ld	r22, X+
    5894:	7d 91       	ld	r23, X+
    5896:	8d 91       	ld	r24, X+
    5898:	9c 91       	ld	r25, X
    589a:	20 e0       	ldi	r18, 0x00	; 0
    589c:	30 e0       	ldi	r19, 0x00	; 0
    589e:	40 e0       	ldi	r20, 0x00	; 0
    58a0:	50 e0       	ldi	r21, 0x00	; 0
    58a2:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    58a6:	88 23       	and	r24, r24
    58a8:	09 f0       	breq	.+2      	; 0x58ac <_ZN10Movimiento6updateEm+0x3d8>
    58aa:	e7 c2       	rjmp	.+1486   	; 0x5e7a <_ZN10Movimiento6updateEm+0x9a6>
									// traslación
									C = suma(xyz2xz (wk.rt.pos_ref[pata]), producto(wk.mv.vector, -wk.rt.coeficiente*atenuador)); 
    58ac:	f1 01       	movw	r30, r2
    58ae:	ee 0f       	add	r30, r30
    58b0:	ff 1f       	adc	r31, r31
    58b2:	e2 0d       	add	r30, r2
    58b4:	f3 1d       	adc	r31, r3
    58b6:	ee 0f       	add	r30, r30
    58b8:	ff 1f       	adc	r31, r31
    58ba:	ee 0f       	add	r30, r30
    58bc:	ff 1f       	adc	r31, r31
    58be:	e6 0d       	add	r30, r6
    58c0:	f7 1d       	adc	r31, r7
    58c2:	e8 5c       	subi	r30, 0xC8	; 200
    58c4:	fe 4f       	sbci	r31, 0xFE	; 254
    58c6:	e0 80       	ld	r14, Z
    58c8:	f1 80       	ldd	r15, Z+1	; 0x01
    58ca:	02 81       	ldd	r16, Z+2	; 0x02
    58cc:	13 81       	ldd	r17, Z+3	; 0x03
    58ce:	24 81       	ldd	r18, Z+4	; 0x04
    58d0:	35 81       	ldd	r19, Z+5	; 0x05
    58d2:	46 81       	ldd	r20, Z+6	; 0x06
    58d4:	57 81       	ldd	r21, Z+7	; 0x07
    58d6:	60 85       	ldd	r22, Z+8	; 0x08
    58d8:	71 85       	ldd	r23, Z+9	; 0x09
    58da:	82 85       	ldd	r24, Z+10	; 0x0a
    58dc:	93 85       	ldd	r25, Z+11	; 0x0b
    58de:	0e 94 98 6b 	call	0xd730	; 0xd730 <_Z6xyz2xz7COORD3D>
    58e2:	cf 5a       	subi	r28, 0xAF	; 175
    58e4:	de 4f       	sbci	r29, 0xFE	; 254
    58e6:	28 83       	st	Y, r18
    58e8:	c1 55       	subi	r28, 0x51	; 81
    58ea:	d1 40       	sbci	r29, 0x01	; 1
    58ec:	ce 5a       	subi	r28, 0xAE	; 174
    58ee:	de 4f       	sbci	r29, 0xFE	; 254
    58f0:	38 83       	st	Y, r19
    58f2:	c2 55       	subi	r28, 0x52	; 82
    58f4:	d1 40       	sbci	r29, 0x01	; 1
    58f6:	cd 5a       	subi	r28, 0xAD	; 173
    58f8:	de 4f       	sbci	r29, 0xFE	; 254
    58fa:	48 83       	st	Y, r20
    58fc:	c3 55       	subi	r28, 0x53	; 83
    58fe:	d1 40       	sbci	r29, 0x01	; 1
    5900:	cc 5a       	subi	r28, 0xAC	; 172
    5902:	de 4f       	sbci	r29, 0xFE	; 254
    5904:	58 83       	st	Y, r21
    5906:	c4 55       	subi	r28, 0x54	; 84
    5908:	d1 40       	sbci	r29, 0x01	; 1
    590a:	cb 5a       	subi	r28, 0xAB	; 171
    590c:	de 4f       	sbci	r29, 0xFE	; 254
    590e:	68 83       	st	Y, r22
    5910:	c5 55       	subi	r28, 0x55	; 85
    5912:	d1 40       	sbci	r29, 0x01	; 1
    5914:	ca 5a       	subi	r28, 0xAA	; 170
    5916:	de 4f       	sbci	r29, 0xFE	; 254
    5918:	78 83       	st	Y, r23
    591a:	c6 55       	subi	r28, 0x56	; 86
    591c:	d1 40       	sbci	r29, 0x01	; 1
    591e:	c9 5a       	subi	r28, 0xA9	; 169
    5920:	de 4f       	sbci	r29, 0xFE	; 254
    5922:	88 83       	st	Y, r24
    5924:	c7 55       	subi	r28, 0x57	; 87
    5926:	d1 40       	sbci	r29, 0x01	; 1
    5928:	c8 5a       	subi	r28, 0xA8	; 168
    592a:	de 4f       	sbci	r29, 0xFE	; 254
    592c:	98 83       	st	Y, r25
    592e:	c8 55       	subi	r28, 0x58	; 88
    5930:	d1 40       	sbci	r29, 0x01	; 1
    5932:	de 01       	movw	r26, r28
    5934:	11 96       	adiw	r26, 0x01	; 1
    5936:	fe 01       	movw	r30, r28
    5938:	ef 5a       	subi	r30, 0xAF	; 175
    593a:	fe 4f       	sbci	r31, 0xFE	; 254
    593c:	88 e0       	ldi	r24, 0x08	; 8
    593e:	01 90       	ld	r0, Z+
    5940:	0d 92       	st	X+, r0
    5942:	81 50       	subi	r24, 0x01	; 1
    5944:	e1 f7       	brne	.-8      	; 0x593e <_ZN10Movimiento6updateEm+0x46a>
    5946:	ec ec       	ldi	r30, 0xCC	; 204
    5948:	f0 e0       	ldi	r31, 0x00	; 0
    594a:	6e 0e       	add	r6, r30
    594c:	7f 1e       	adc	r7, r31
    594e:	d3 01       	movw	r26, r6
    5950:	6d 91       	ld	r22, X+
    5952:	7d 91       	ld	r23, X+
    5954:	8d 91       	ld	r24, X+
    5956:	9c 91       	ld	r25, X
    5958:	e4 e3       	ldi	r30, 0x34	; 52
    595a:	ff ef       	ldi	r31, 0xFF	; 255
    595c:	6e 0e       	add	r6, r30
    595e:	7f 1e       	adc	r7, r31
    5960:	90 58       	subi	r25, 0x80	; 128
    5962:	c3 5a       	subi	r28, 0xA3	; 163
    5964:	de 4f       	sbci	r29, 0xFE	; 254
    5966:	28 81       	ld	r18, Y
    5968:	39 81       	ldd	r19, Y+1	; 0x01
    596a:	4a 81       	ldd	r20, Y+2	; 0x02
    596c:	5b 81       	ldd	r21, Y+3	; 0x03
    596e:	cd 55       	subi	r28, 0x5D	; 93
    5970:	d1 40       	sbci	r29, 0x01	; 1
    5972:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    5976:	7b 01       	movw	r14, r22
    5978:	8c 01       	movw	r16, r24
    597a:	d2 01       	movw	r26, r4
    597c:	2c 91       	ld	r18, X
    597e:	11 96       	adiw	r26, 0x01	; 1
    5980:	3c 91       	ld	r19, X
    5982:	11 97       	sbiw	r26, 0x01	; 1
    5984:	12 96       	adiw	r26, 0x02	; 2
    5986:	4c 91       	ld	r20, X
    5988:	12 97       	sbiw	r26, 0x02	; 2
    598a:	13 96       	adiw	r26, 0x03	; 3
    598c:	5c 91       	ld	r21, X
    598e:	13 97       	sbiw	r26, 0x03	; 3
    5990:	14 96       	adiw	r26, 0x04	; 4
    5992:	6c 91       	ld	r22, X
    5994:	14 97       	sbiw	r26, 0x04	; 4
    5996:	15 96       	adiw	r26, 0x05	; 5
    5998:	7c 91       	ld	r23, X
    599a:	15 97       	sbiw	r26, 0x05	; 5
    599c:	16 96       	adiw	r26, 0x06	; 6
    599e:	8c 91       	ld	r24, X
    59a0:	16 97       	sbiw	r26, 0x06	; 6
    59a2:	17 96       	adiw	r26, 0x07	; 7
    59a4:	9c 91       	ld	r25, X
    59a6:	0e 94 10 6b 	call	0xd620	; 0xd620 <_Z8producto7COORD2Df>
    59aa:	cf 5a       	subi	r28, 0xAF	; 175
    59ac:	de 4f       	sbci	r29, 0xFE	; 254
    59ae:	28 83       	st	Y, r18
    59b0:	c1 55       	subi	r28, 0x51	; 81
    59b2:	d1 40       	sbci	r29, 0x01	; 1
    59b4:	ce 5a       	subi	r28, 0xAE	; 174
    59b6:	de 4f       	sbci	r29, 0xFE	; 254
    59b8:	38 83       	st	Y, r19
    59ba:	c2 55       	subi	r28, 0x52	; 82
    59bc:	d1 40       	sbci	r29, 0x01	; 1
    59be:	cd 5a       	subi	r28, 0xAD	; 173
    59c0:	de 4f       	sbci	r29, 0xFE	; 254
    59c2:	48 83       	st	Y, r20
    59c4:	c3 55       	subi	r28, 0x53	; 83
    59c6:	d1 40       	sbci	r29, 0x01	; 1
    59c8:	cc 5a       	subi	r28, 0xAC	; 172
    59ca:	de 4f       	sbci	r29, 0xFE	; 254
    59cc:	58 83       	st	Y, r21
    59ce:	c4 55       	subi	r28, 0x54	; 84
    59d0:	d1 40       	sbci	r29, 0x01	; 1
    59d2:	cb 5a       	subi	r28, 0xAB	; 171
    59d4:	de 4f       	sbci	r29, 0xFE	; 254
    59d6:	68 83       	st	Y, r22
    59d8:	c5 55       	subi	r28, 0x55	; 85
    59da:	d1 40       	sbci	r29, 0x01	; 1
    59dc:	ca 5a       	subi	r28, 0xAA	; 170
    59de:	de 4f       	sbci	r29, 0xFE	; 254
    59e0:	78 83       	st	Y, r23
    59e2:	c6 55       	subi	r28, 0x56	; 86
    59e4:	d1 40       	sbci	r29, 0x01	; 1
    59e6:	c9 5a       	subi	r28, 0xA9	; 169
    59e8:	de 4f       	sbci	r29, 0xFE	; 254
    59ea:	88 83       	st	Y, r24
    59ec:	c7 55       	subi	r28, 0x57	; 87
    59ee:	d1 40       	sbci	r29, 0x01	; 1
    59f0:	c8 5a       	subi	r28, 0xA8	; 168
    59f2:	de 4f       	sbci	r29, 0xFE	; 254
    59f4:	98 83       	st	Y, r25
    59f6:	c8 55       	subi	r28, 0x58	; 88
    59f8:	d1 40       	sbci	r29, 0x01	; 1
    59fa:	de 01       	movw	r26, r28
    59fc:	19 96       	adiw	r26, 0x09	; 9
    59fe:	fe 01       	movw	r30, r28
    5a00:	ef 5a       	subi	r30, 0xAF	; 175
    5a02:	fe 4f       	sbci	r31, 0xFE	; 254
    5a04:	88 e0       	ldi	r24, 0x08	; 8
    5a06:	01 90       	ld	r0, Z+
    5a08:	0d 92       	st	X+, r0
    5a0a:	81 50       	subi	r24, 0x01	; 1
    5a0c:	e1 f7       	brne	.-8      	; 0x5a06 <_ZN10Movimiento6updateEm+0x532>
    5a0e:	29 81       	ldd	r18, Y+1	; 0x01
    5a10:	3a 81       	ldd	r19, Y+2	; 0x02
    5a12:	4b 81       	ldd	r20, Y+3	; 0x03
    5a14:	5c 81       	ldd	r21, Y+4	; 0x04
    5a16:	6d 81       	ldd	r22, Y+5	; 0x05
    5a18:	7e 81       	ldd	r23, Y+6	; 0x06
    5a1a:	8f 81       	ldd	r24, Y+7	; 0x07
    5a1c:	98 85       	ldd	r25, Y+8	; 0x08
    5a1e:	a9 84       	ldd	r10, Y+9	; 0x09
    5a20:	ba 84       	ldd	r11, Y+10	; 0x0a
    5a22:	cb 84       	ldd	r12, Y+11	; 0x0b
    5a24:	dc 84       	ldd	r13, Y+12	; 0x0c
    5a26:	ed 84       	ldd	r14, Y+13	; 0x0d
    5a28:	fe 84       	ldd	r15, Y+14	; 0x0e
    5a2a:	0f 85       	ldd	r16, Y+15	; 0x0f
    5a2c:	18 89       	ldd	r17, Y+16	; 0x10
    5a2e:	0e 94 84 69 	call	0xd308	; 0xd308 <_Z4suma7COORD2DS_>
    5a32:	cf 5a       	subi	r28, 0xAF	; 175
    5a34:	de 4f       	sbci	r29, 0xFE	; 254
    5a36:	28 83       	st	Y, r18
    5a38:	c1 55       	subi	r28, 0x51	; 81
    5a3a:	d1 40       	sbci	r29, 0x01	; 1
    5a3c:	ce 5a       	subi	r28, 0xAE	; 174
    5a3e:	de 4f       	sbci	r29, 0xFE	; 254
    5a40:	38 83       	st	Y, r19
    5a42:	c2 55       	subi	r28, 0x52	; 82
    5a44:	d1 40       	sbci	r29, 0x01	; 1
    5a46:	cd 5a       	subi	r28, 0xAD	; 173
    5a48:	de 4f       	sbci	r29, 0xFE	; 254
    5a4a:	48 83       	st	Y, r20
    5a4c:	c3 55       	subi	r28, 0x53	; 83
    5a4e:	d1 40       	sbci	r29, 0x01	; 1
    5a50:	cc 5a       	subi	r28, 0xAC	; 172
    5a52:	de 4f       	sbci	r29, 0xFE	; 254
    5a54:	58 83       	st	Y, r21
    5a56:	c4 55       	subi	r28, 0x54	; 84
    5a58:	d1 40       	sbci	r29, 0x01	; 1
    5a5a:	cb 5a       	subi	r28, 0xAB	; 171
    5a5c:	de 4f       	sbci	r29, 0xFE	; 254
    5a5e:	68 83       	st	Y, r22
    5a60:	c5 55       	subi	r28, 0x55	; 85
    5a62:	d1 40       	sbci	r29, 0x01	; 1
    5a64:	ca 5a       	subi	r28, 0xAA	; 170
    5a66:	de 4f       	sbci	r29, 0xFE	; 254
    5a68:	78 83       	st	Y, r23
    5a6a:	c6 55       	subi	r28, 0x56	; 86
    5a6c:	d1 40       	sbci	r29, 0x01	; 1
    5a6e:	c9 5a       	subi	r28, 0xA9	; 169
    5a70:	de 4f       	sbci	r29, 0xFE	; 254
    5a72:	88 83       	st	Y, r24
    5a74:	c7 55       	subi	r28, 0x57	; 87
    5a76:	d1 40       	sbci	r29, 0x01	; 1
    5a78:	c8 5a       	subi	r28, 0xA8	; 168
    5a7a:	de 4f       	sbci	r29, 0xFE	; 254
    5a7c:	98 83       	st	Y, r25
    5a7e:	c8 55       	subi	r28, 0x58	; 88
    5a80:	d1 40       	sbci	r29, 0x01	; 1
    5a82:	de 01       	movw	r26, r28
    5a84:	af 58       	subi	r26, 0x8F	; 143
    5a86:	bf 4f       	sbci	r27, 0xFF	; 255
    5a88:	fe 01       	movw	r30, r28
    5a8a:	ef 5a       	subi	r30, 0xAF	; 175
    5a8c:	fe 4f       	sbci	r31, 0xFE	; 254
    5a8e:	88 e0       	ldi	r24, 0x08	; 8
    5a90:	01 90       	ld	r0, Z+
    5a92:	0d 92       	st	X+, r0
    5a94:	81 50       	subi	r24, 0x01	; 1
    5a96:	e1 f7       	brne	.-8      	; 0x5a90 <_ZN10Movimiento6updateEm+0x5bc>
									if (sh.cn.tick > 2*wk.rt.ciclo) {
    5a98:	c3 59       	subi	r28, 0x93	; 147
    5a9a:	de 4f       	sbci	r29, 0xFE	; 254
    5a9c:	e8 81       	ld	r30, Y
    5a9e:	f9 81       	ldd	r31, Y+1	; 0x01
    5aa0:	cd 56       	subi	r28, 0x6D	; 109
    5aa2:	d1 40       	sbci	r29, 0x01	; 1
    5aa4:	60 81       	ld	r22, Z
    5aa6:	71 81       	ldd	r23, Z+1	; 0x01
    5aa8:	80 e0       	ldi	r24, 0x00	; 0
    5aaa:	90 e0       	ldi	r25, 0x00	; 0
    5aac:	0e 94 6b 7d 	call	0xfad6	; 0xfad6 <__floatunsisf>
    5ab0:	7b 01       	movw	r14, r22
    5ab2:	8c 01       	movw	r16, r24
    5ab4:	c1 59       	subi	r28, 0x91	; 145
    5ab6:	de 4f       	sbci	r29, 0xFE	; 254
    5ab8:	a8 81       	ld	r26, Y
    5aba:	b9 81       	ldd	r27, Y+1	; 0x01
    5abc:	cf 56       	subi	r28, 0x6F	; 111
    5abe:	d1 40       	sbci	r29, 0x01	; 1
    5ac0:	2d 91       	ld	r18, X+
    5ac2:	3d 91       	ld	r19, X+
    5ac4:	4d 91       	ld	r20, X+
    5ac6:	5c 91       	ld	r21, X
    5ac8:	ca 01       	movw	r24, r20
    5aca:	b9 01       	movw	r22, r18
    5acc:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    5ad0:	9b 01       	movw	r18, r22
    5ad2:	ac 01       	movw	r20, r24
    5ad4:	c8 01       	movw	r24, r16
    5ad6:	b7 01       	movw	r22, r14
    5ad8:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <__gesf2>
    5adc:	18 16       	cp	r1, r24
    5ade:	0c f0       	brlt	.+2      	; 0x5ae2 <_ZN10Movimiento6updateEm+0x60e>
    5ae0:	a5 c5       	rjmp	.+2890   	; 0x662c <_ZN10Movimiento6updateEm+0x1158>
										C = resta (C, xyz2xz(pos_des[pata]));
    5ae2:	f1 01       	movw	r30, r2
    5ae4:	ee 0f       	add	r30, r30
    5ae6:	ff 1f       	adc	r31, r31
    5ae8:	e2 0d       	add	r30, r2
    5aea:	f3 1d       	adc	r31, r3
    5aec:	ee 0f       	add	r30, r30
    5aee:	ff 1f       	adc	r31, r31
    5af0:	ee 0f       	add	r30, r30
    5af2:	ff 1f       	adc	r31, r31
    5af4:	e0 5b       	subi	r30, 0xB0	; 176
    5af6:	fc 4e       	sbci	r31, 0xEC	; 236
    5af8:	e0 80       	ld	r14, Z
    5afa:	f1 80       	ldd	r15, Z+1	; 0x01
    5afc:	02 81       	ldd	r16, Z+2	; 0x02
    5afe:	13 81       	ldd	r17, Z+3	; 0x03
    5b00:	24 81       	ldd	r18, Z+4	; 0x04
    5b02:	35 81       	ldd	r19, Z+5	; 0x05
    5b04:	46 81       	ldd	r20, Z+6	; 0x06
    5b06:	57 81       	ldd	r21, Z+7	; 0x07
    5b08:	60 85       	ldd	r22, Z+8	; 0x08
    5b0a:	71 85       	ldd	r23, Z+9	; 0x09
    5b0c:	82 85       	ldd	r24, Z+10	; 0x0a
    5b0e:	93 85       	ldd	r25, Z+11	; 0x0b
    5b10:	0e 94 98 6b 	call	0xd730	; 0xd730 <_Z6xyz2xz7COORD3D>
    5b14:	de 01       	movw	r26, r28
    5b16:	af 5a       	subi	r26, 0xAF	; 175
    5b18:	be 4f       	sbci	r27, 0xFE	; 254
    5b1a:	2c 93       	st	X, r18
    5b1c:	fe 01       	movw	r30, r28
    5b1e:	ee 5a       	subi	r30, 0xAE	; 174
    5b20:	fe 4f       	sbci	r31, 0xFE	; 254
    5b22:	30 83       	st	Z, r19
    5b24:	fe 01       	movw	r30, r28
    5b26:	ed 5a       	subi	r30, 0xAD	; 173
    5b28:	fe 4f       	sbci	r31, 0xFE	; 254
    5b2a:	40 83       	st	Z, r20
    5b2c:	fe 01       	movw	r30, r28
    5b2e:	ec 5a       	subi	r30, 0xAC	; 172
    5b30:	fe 4f       	sbci	r31, 0xFE	; 254
    5b32:	50 83       	st	Z, r21
    5b34:	fe 01       	movw	r30, r28
    5b36:	eb 5a       	subi	r30, 0xAB	; 171
    5b38:	fe 4f       	sbci	r31, 0xFE	; 254
    5b3a:	60 83       	st	Z, r22
    5b3c:	fe 01       	movw	r30, r28
    5b3e:	ea 5a       	subi	r30, 0xAA	; 170
    5b40:	fe 4f       	sbci	r31, 0xFE	; 254
    5b42:	70 83       	st	Z, r23
    5b44:	fe 01       	movw	r30, r28
    5b46:	e9 5a       	subi	r30, 0xA9	; 169
    5b48:	fe 4f       	sbci	r31, 0xFE	; 254
    5b4a:	80 83       	st	Z, r24
    5b4c:	fe 01       	movw	r30, r28
    5b4e:	e8 5a       	subi	r30, 0xA8	; 168
    5b50:	fe 4f       	sbci	r31, 0xFE	; 254
    5b52:	90 83       	st	Z, r25
    5b54:	9e 01       	movw	r18, r28
    5b56:	2f 5e       	subi	r18, 0xEF	; 239
    5b58:	3f 4f       	sbci	r19, 0xFF	; 255
    5b5a:	fd 01       	movw	r30, r26
    5b5c:	88 e0       	ldi	r24, 0x08	; 8
    5b5e:	01 90       	ld	r0, Z+
    5b60:	d9 01       	movw	r26, r18
    5b62:	0d 92       	st	X+, r0
    5b64:	9d 01       	movw	r18, r26
    5b66:	81 50       	subi	r24, 0x01	; 1
    5b68:	d1 f7       	brne	.-12     	; 0x5b5e <_ZN10Movimiento6updateEm+0x68a>
    5b6a:	71 e7       	ldi	r23, 0x71	; 113
    5b6c:	87 2e       	mov	r8, r23
    5b6e:	91 2c       	mov	r9, r1
    5b70:	8c 0e       	add	r8, r28
    5b72:	9d 1e       	adc	r9, r29
    5b74:	f4 01       	movw	r30, r8
    5b76:	20 81       	ld	r18, Z
    5b78:	31 81       	ldd	r19, Z+1	; 0x01
    5b7a:	42 81       	ldd	r20, Z+2	; 0x02
    5b7c:	53 81       	ldd	r21, Z+3	; 0x03
    5b7e:	64 81       	ldd	r22, Z+4	; 0x04
    5b80:	75 81       	ldd	r23, Z+5	; 0x05
    5b82:	86 81       	ldd	r24, Z+6	; 0x06
    5b84:	97 81       	ldd	r25, Z+7	; 0x07
    5b86:	a9 88       	ldd	r10, Y+17	; 0x11
    5b88:	ba 88       	ldd	r11, Y+18	; 0x12
    5b8a:	cb 88       	ldd	r12, Y+19	; 0x13
    5b8c:	dc 88       	ldd	r13, Y+20	; 0x14
    5b8e:	ed 88       	ldd	r14, Y+21	; 0x15
    5b90:	fe 88       	ldd	r15, Y+22	; 0x16
    5b92:	0f 89       	ldd	r16, Y+23	; 0x17
    5b94:	18 8d       	ldd	r17, Y+24	; 0x18
    5b96:	0e 94 47 6a 	call	0xd48e	; 0xd48e <_Z5resta7COORD2DS_>
    5b9a:	de 01       	movw	r26, r28
    5b9c:	af 5a       	subi	r26, 0xAF	; 175
    5b9e:	be 4f       	sbci	r27, 0xFE	; 254
    5ba0:	2c 93       	st	X, r18
    5ba2:	fe 01       	movw	r30, r28
    5ba4:	ee 5a       	subi	r30, 0xAE	; 174
    5ba6:	fe 4f       	sbci	r31, 0xFE	; 254
    5ba8:	30 83       	st	Z, r19
    5baa:	fe 01       	movw	r30, r28
    5bac:	ed 5a       	subi	r30, 0xAD	; 173
    5bae:	fe 4f       	sbci	r31, 0xFE	; 254
    5bb0:	40 83       	st	Z, r20
    5bb2:	fe 01       	movw	r30, r28
    5bb4:	ec 5a       	subi	r30, 0xAC	; 172
    5bb6:	fe 4f       	sbci	r31, 0xFE	; 254
    5bb8:	50 83       	st	Z, r21
    5bba:	fe 01       	movw	r30, r28
    5bbc:	eb 5a       	subi	r30, 0xAB	; 171
    5bbe:	fe 4f       	sbci	r31, 0xFE	; 254
    5bc0:	60 83       	st	Z, r22
    5bc2:	fe 01       	movw	r30, r28
    5bc4:	ea 5a       	subi	r30, 0xAA	; 170
    5bc6:	fe 4f       	sbci	r31, 0xFE	; 254
    5bc8:	70 83       	st	Z, r23
    5bca:	fe 01       	movw	r30, r28
    5bcc:	e9 5a       	subi	r30, 0xA9	; 169
    5bce:	fe 4f       	sbci	r31, 0xFE	; 254
    5bd0:	80 83       	st	Z, r24
    5bd2:	fe 01       	movw	r30, r28
    5bd4:	e8 5a       	subi	r30, 0xA8	; 168
    5bd6:	fe 4f       	sbci	r31, 0xFE	; 254
    5bd8:	90 83       	st	Z, r25
    5bda:	94 01       	movw	r18, r8
    5bdc:	fd 01       	movw	r30, r26
    5bde:	88 e0       	ldi	r24, 0x08	; 8
    5be0:	01 90       	ld	r0, Z+
    5be2:	d9 01       	movw	r26, r18
    5be4:	0d 92       	st	X+, r0
    5be6:	9d 01       	movw	r18, r26
    5be8:	81 50       	subi	r24, 0x01	; 1
    5bea:	d1 f7       	brne	.-12     	; 0x5be0 <_ZN10Movimiento6updateEm+0x70c>
										// si las condiciones están dadas, agenda un solo pasito relativo para todas las patas y sale
					//				pasito (wk.mv.secuencia[wk.rt.index], xz2xyz(C), false, 0, sh.mv.escala*wk.mv.duracion_pasos, sh.mv.nsegmentos, suma(xz2xyz(producto(C, .5)), (COORD3D){0,wk.mv.altura_pasito,0}));
										pasito (wk.mv.secuencia[wk.rt.index], h_correct(C), false, 0, sh.mv.escala*wk.mv.duracion_pasos, sh.mv.nsegmentos, suma(xz2xyz(producto(C, .5)), (COORD3D){0,wk.mv.altura_pasito,0}));
    5bec:	e0 e8       	ldi	r30, 0x80	; 128
    5bee:	f1 e0       	ldi	r31, 0x01	; 1
    5bf0:	6e 0e       	add	r6, r30
    5bf2:	7f 1e       	adc	r7, r31
    5bf4:	d3 01       	movw	r26, r6
    5bf6:	8c 91       	ld	r24, X
    5bf8:	e0 e8       	ldi	r30, 0x80	; 128
    5bfa:	fe ef       	ldi	r31, 0xFE	; 254
    5bfc:	6e 0e       	add	r6, r30
    5bfe:	7f 1e       	adc	r7, r31
    5c00:	f3 01       	movw	r30, r6
    5c02:	e8 0f       	add	r30, r24
    5c04:	f1 1d       	adc	r31, r1
    5c06:	eb 54       	subi	r30, 0x4B	; 75
    5c08:	ff 4f       	sbci	r31, 0xFF	; 255
    5c0a:	20 80       	ld	r2, Z
    5c0c:	61 e7       	ldi	r22, 0x71	; 113
    5c0e:	c6 2e       	mov	r12, r22
    5c10:	d1 2c       	mov	r13, r1
    5c12:	cc 0e       	add	r12, r28
    5c14:	dd 1e       	adc	r13, r29
    5c16:	ce 01       	movw	r24, r28
    5c18:	8f 55       	subi	r24, 0x5F	; 95
    5c1a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c1c:	b3 01       	movw	r22, r6
    5c1e:	d6 01       	movw	r26, r12
    5c20:	ec 90       	ld	r14, X
    5c22:	11 96       	adiw	r26, 0x01	; 1
    5c24:	fc 90       	ld	r15, X
    5c26:	11 97       	sbiw	r26, 0x01	; 1
    5c28:	12 96       	adiw	r26, 0x02	; 2
    5c2a:	0c 91       	ld	r16, X
    5c2c:	12 97       	sbiw	r26, 0x02	; 2
    5c2e:	13 96       	adiw	r26, 0x03	; 3
    5c30:	1c 91       	ld	r17, X
    5c32:	13 97       	sbiw	r26, 0x03	; 3
    5c34:	14 96       	adiw	r26, 0x04	; 4
    5c36:	2c 91       	ld	r18, X
    5c38:	14 97       	sbiw	r26, 0x04	; 4
    5c3a:	15 96       	adiw	r26, 0x05	; 5
    5c3c:	3c 91       	ld	r19, X
    5c3e:	15 97       	sbiw	r26, 0x05	; 5
    5c40:	16 96       	adiw	r26, 0x06	; 6
    5c42:	4c 91       	ld	r20, X
    5c44:	16 97       	sbiw	r26, 0x06	; 6
    5c46:	17 96       	adiw	r26, 0x07	; 7
    5c48:	5c 91       	ld	r21, X
    5c4a:	0e 94 4b 29 	call	0x5296	; 0x5296 <_ZN10Movimiento9h_correctE7COORD2D>
    5c4e:	e0 ee       	ldi	r30, 0xE0	; 224
    5c50:	f1 e0       	ldi	r31, 0x01	; 1
    5c52:	6e 0e       	add	r6, r30
    5c54:	7f 1e       	adc	r7, r31
    5c56:	d3 01       	movw	r26, r6
    5c58:	8c 91       	ld	r24, X
    5c5a:	90 e0       	ldi	r25, 0x00	; 0
    5c5c:	e1 ee       	ldi	r30, 0xE1	; 225
    5c5e:	fe ef       	ldi	r31, 0xFE	; 254
    5c60:	6e 0e       	add	r6, r30
    5c62:	7f 1e       	adc	r7, r31
    5c64:	d3 01       	movw	r26, r6
    5c66:	2d 91       	ld	r18, X+
    5c68:	3c 91       	ld	r19, X
    5c6a:	82 9f       	mul	r24, r18
    5c6c:	20 01       	movw	r4, r0
    5c6e:	83 9f       	mul	r24, r19
    5c70:	50 0c       	add	r5, r0
    5c72:	92 9f       	mul	r25, r18
    5c74:	50 0c       	add	r5, r0
    5c76:	11 24       	eor	r1, r1
    5c78:	e0 e2       	ldi	r30, 0x20	; 32
    5c7a:	f1 e0       	ldi	r31, 0x01	; 1
    5c7c:	6e 0e       	add	r6, r30
    5c7e:	7f 1e       	adc	r7, r31
    5c80:	d3 01       	movw	r26, r6
    5c82:	3c 90       	ld	r3, X
    5c84:	ef e1       	ldi	r30, 0x1F	; 31
    5c86:	fe ef       	ldi	r31, 0xFE	; 254
    5c88:	6e 0e       	add	r6, r30
    5c8a:	7f 1e       	adc	r7, r31
    5c8c:	d6 01       	movw	r26, r12
    5c8e:	2c 91       	ld	r18, X
    5c90:	11 96       	adiw	r26, 0x01	; 1
    5c92:	3c 91       	ld	r19, X
    5c94:	11 97       	sbiw	r26, 0x01	; 1
    5c96:	12 96       	adiw	r26, 0x02	; 2
    5c98:	4c 91       	ld	r20, X
    5c9a:	12 97       	sbiw	r26, 0x02	; 2
    5c9c:	13 96       	adiw	r26, 0x03	; 3
    5c9e:	5c 91       	ld	r21, X
    5ca0:	13 97       	sbiw	r26, 0x03	; 3
    5ca2:	14 96       	adiw	r26, 0x04	; 4
    5ca4:	6c 91       	ld	r22, X
    5ca6:	14 97       	sbiw	r26, 0x04	; 4
    5ca8:	15 96       	adiw	r26, 0x05	; 5
    5caa:	7c 91       	ld	r23, X
    5cac:	15 97       	sbiw	r26, 0x05	; 5
    5cae:	16 96       	adiw	r26, 0x06	; 6
    5cb0:	8c 91       	ld	r24, X
    5cb2:	16 97       	sbiw	r26, 0x06	; 6
    5cb4:	17 96       	adiw	r26, 0x07	; 7
    5cb6:	9c 91       	ld	r25, X
    5cb8:	0f 2e       	mov	r0, r31
    5cba:	f0 e0       	ldi	r31, 0x00	; 0
    5cbc:	ef 2e       	mov	r14, r31
    5cbe:	f0 e0       	ldi	r31, 0x00	; 0
    5cc0:	ff 2e       	mov	r15, r31
    5cc2:	f0 e0       	ldi	r31, 0x00	; 0
    5cc4:	0f 2f       	mov	r16, r31
    5cc6:	ff e3       	ldi	r31, 0x3F	; 63
    5cc8:	1f 2f       	mov	r17, r31
    5cca:	f0 2d       	mov	r31, r0
    5ccc:	0e 94 10 6b 	call	0xd620	; 0xd620 <_Z8producto7COORD2Df>
    5cd0:	de 01       	movw	r26, r28
    5cd2:	af 5a       	subi	r26, 0xAF	; 175
    5cd4:	be 4f       	sbci	r27, 0xFE	; 254
    5cd6:	2c 93       	st	X, r18
    5cd8:	fe 01       	movw	r30, r28
    5cda:	ee 5a       	subi	r30, 0xAE	; 174
    5cdc:	fe 4f       	sbci	r31, 0xFE	; 254
    5cde:	30 83       	st	Z, r19
    5ce0:	fe 01       	movw	r30, r28
    5ce2:	ed 5a       	subi	r30, 0xAD	; 173
    5ce4:	fe 4f       	sbci	r31, 0xFE	; 254
    5ce6:	40 83       	st	Z, r20
    5ce8:	fe 01       	movw	r30, r28
    5cea:	ec 5a       	subi	r30, 0xAC	; 172
    5cec:	fe 4f       	sbci	r31, 0xFE	; 254
    5cee:	50 83       	st	Z, r21
    5cf0:	fe 01       	movw	r30, r28
    5cf2:	eb 5a       	subi	r30, 0xAB	; 171
    5cf4:	fe 4f       	sbci	r31, 0xFE	; 254
    5cf6:	60 83       	st	Z, r22
    5cf8:	fe 01       	movw	r30, r28
    5cfa:	ea 5a       	subi	r30, 0xAA	; 170
    5cfc:	fe 4f       	sbci	r31, 0xFE	; 254
    5cfe:	70 83       	st	Z, r23
    5d00:	fe 01       	movw	r30, r28
    5d02:	e9 5a       	subi	r30, 0xA9	; 169
    5d04:	fe 4f       	sbci	r31, 0xFE	; 254
    5d06:	80 83       	st	Z, r24
    5d08:	fe 01       	movw	r30, r28
    5d0a:	e8 5a       	subi	r30, 0xA8	; 168
    5d0c:	fe 4f       	sbci	r31, 0xFE	; 254
    5d0e:	90 83       	st	Z, r25
    5d10:	9e 01       	movw	r18, r28
    5d12:	27 5e       	subi	r18, 0xE7	; 231
    5d14:	3f 4f       	sbci	r19, 0xFF	; 255
    5d16:	fd 01       	movw	r30, r26
    5d18:	88 e0       	ldi	r24, 0x08	; 8
    5d1a:	01 90       	ld	r0, Z+
    5d1c:	d9 01       	movw	r26, r18
    5d1e:	0d 92       	st	X+, r0
    5d20:	9d 01       	movw	r18, r26
    5d22:	81 50       	subi	r24, 0x01	; 1
    5d24:	d1 f7       	brne	.-12     	; 0x5d1a <_ZN10Movimiento6updateEm+0x846>
    5d26:	5d ea       	ldi	r21, 0xAD	; 173
    5d28:	a5 2e       	mov	r10, r21
    5d2a:	b1 2c       	mov	r11, r1
    5d2c:	ac 0e       	add	r10, r28
    5d2e:	bd 1e       	adc	r11, r29
    5d30:	c5 01       	movw	r24, r10
    5d32:	09 8d       	ldd	r16, Y+25	; 0x19
    5d34:	1a 8d       	ldd	r17, Y+26	; 0x1a
    5d36:	2b 8d       	ldd	r18, Y+27	; 0x1b
    5d38:	3c 8d       	ldd	r19, Y+28	; 0x1c
    5d3a:	4d 8d       	ldd	r20, Y+29	; 0x1d
    5d3c:	5e 8d       	ldd	r21, Y+30	; 0x1e
    5d3e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5d40:	78 a1       	ldd	r23, Y+32	; 0x20
    5d42:	0e 94 5f 6b 	call	0xd6be	; 0xd6be <_Z6xz2xyz7COORD2D>
    5d46:	e4 ec       	ldi	r30, 0xC4	; 196
    5d48:	f0 e0       	ldi	r31, 0x00	; 0
    5d4a:	6e 0e       	add	r6, r30
    5d4c:	7f 1e       	adc	r7, r31
    5d4e:	d3 01       	movw	r26, r6
    5d50:	2d 91       	ld	r18, X+
    5d52:	3d 91       	ld	r19, X+
    5d54:	4d 91       	ld	r20, X+
    5d56:	5c 91       	ld	r21, X
    5d58:	ec e3       	ldi	r30, 0x3C	; 60
    5d5a:	ff ef       	ldi	r31, 0xFF	; 255
    5d5c:	6e 0e       	add	r6, r30
    5d5e:	7f 1e       	adc	r7, r31
    5d60:	fe 01       	movw	r30, r28
    5d62:	e7 54       	subi	r30, 0x47	; 71
    5d64:	ff 4f       	sbci	r31, 0xFF	; 255
    5d66:	80 e0       	ldi	r24, 0x00	; 0
    5d68:	90 e0       	ldi	r25, 0x00	; 0
    5d6a:	a0 e0       	ldi	r26, 0x00	; 0
    5d6c:	b0 e0       	ldi	r27, 0x00	; 0
    5d6e:	80 83       	st	Z, r24
    5d70:	91 83       	std	Z+1, r25	; 0x01
    5d72:	a2 83       	std	Z+2, r26	; 0x02
    5d74:	b3 83       	std	Z+3, r27	; 0x03
    5d76:	24 83       	std	Z+4, r18	; 0x04
    5d78:	35 83       	std	Z+5, r19	; 0x05
    5d7a:	46 83       	std	Z+6, r20	; 0x06
    5d7c:	57 83       	std	Z+7, r21	; 0x07
    5d7e:	80 87       	std	Z+8, r24	; 0x08
    5d80:	91 87       	std	Z+9, r25	; 0x09
    5d82:	a2 87       	std	Z+10, r26	; 0x0a
    5d84:	b3 87       	std	Z+11, r27	; 0x0b
    5d86:	2d b7       	in	r18, 0x3d	; 61
    5d88:	3e b7       	in	r19, 0x3e	; 62
    5d8a:	2c 50       	subi	r18, 0x0C	; 12
    5d8c:	30 40       	sbci	r19, 0x00	; 0
    5d8e:	0f b6       	in	r0, 0x3f	; 63
    5d90:	f8 94       	cli
    5d92:	3e bf       	out	0x3e, r19	; 62
    5d94:	0f be       	out	0x3f, r0	; 63
    5d96:	2d bf       	out	0x3d, r18	; 61
    5d98:	ad b7       	in	r26, 0x3d	; 61
    5d9a:	be b7       	in	r27, 0x3e	; 62
    5d9c:	11 96       	adiw	r26, 0x01	; 1
    5d9e:	8c e0       	ldi	r24, 0x0C	; 12
    5da0:	01 90       	ld	r0, Z+
    5da2:	0d 92       	st	X+, r0
    5da4:	81 50       	subi	r24, 0x01	; 1
    5da6:	e1 f7       	brne	.-8      	; 0x5da0 <_ZN10Movimiento6updateEm+0x8cc>
    5da8:	ce 01       	movw	r24, r28
    5daa:	8b 53       	subi	r24, 0x3B	; 59
    5dac:	9f 4f       	sbci	r25, 0xFF	; 255
    5dae:	d5 01       	movw	r26, r10
    5db0:	cc 90       	ld	r12, X
    5db2:	11 96       	adiw	r26, 0x01	; 1
    5db4:	dc 90       	ld	r13, X
    5db6:	11 97       	sbiw	r26, 0x01	; 1
    5db8:	12 96       	adiw	r26, 0x02	; 2
    5dba:	ec 90       	ld	r14, X
    5dbc:	12 97       	sbiw	r26, 0x02	; 2
    5dbe:	13 96       	adiw	r26, 0x03	; 3
    5dc0:	fc 90       	ld	r15, X
    5dc2:	13 97       	sbiw	r26, 0x03	; 3
    5dc4:	14 96       	adiw	r26, 0x04	; 4
    5dc6:	0c 91       	ld	r16, X
    5dc8:	14 97       	sbiw	r26, 0x04	; 4
    5dca:	15 96       	adiw	r26, 0x05	; 5
    5dcc:	1c 91       	ld	r17, X
    5dce:	15 97       	sbiw	r26, 0x05	; 5
    5dd0:	16 96       	adiw	r26, 0x06	; 6
    5dd2:	2c 91       	ld	r18, X
    5dd4:	16 97       	sbiw	r26, 0x06	; 6
    5dd6:	17 96       	adiw	r26, 0x07	; 7
    5dd8:	3c 91       	ld	r19, X
    5dda:	17 97       	sbiw	r26, 0x07	; 7
    5ddc:	18 96       	adiw	r26, 0x08	; 8
    5dde:	4c 91       	ld	r20, X
    5de0:	18 97       	sbiw	r26, 0x08	; 8
    5de2:	19 96       	adiw	r26, 0x09	; 9
    5de4:	5c 91       	ld	r21, X
    5de6:	19 97       	sbiw	r26, 0x09	; 9
    5de8:	1a 96       	adiw	r26, 0x0a	; 10
    5dea:	6c 91       	ld	r22, X
    5dec:	1a 97       	sbiw	r26, 0x0a	; 10
    5dee:	1b 96       	adiw	r26, 0x0b	; 11
    5df0:	7c 91       	ld	r23, X
    5df2:	0e 94 1c 69 	call	0xd238	; 0xd238 <_Z4suma7COORD3DS_>
    5df6:	ed b7       	in	r30, 0x3d	; 61
    5df8:	fe b7       	in	r31, 0x3e	; 62
    5dfa:	37 97       	sbiw	r30, 0x07	; 7
    5dfc:	0f b6       	in	r0, 0x3f	; 63
    5dfe:	f8 94       	cli
    5e00:	fe bf       	out	0x3e, r31	; 62
    5e02:	0f be       	out	0x3f, r0	; 63
    5e04:	ed bf       	out	0x3d, r30	; 61
    5e06:	31 96       	adiw	r30, 0x01	; 1
    5e08:	41 ea       	ldi	r20, 0xA1	; 161
    5e0a:	84 2e       	mov	r8, r20
    5e0c:	91 2c       	mov	r9, r1
    5e0e:	8c 0e       	add	r8, r28
    5e10:	9d 1e       	adc	r9, r29
    5e12:	20 e0       	ldi	r18, 0x00	; 0
    5e14:	30 e0       	ldi	r19, 0x00	; 0
    5e16:	40 e0       	ldi	r20, 0x00	; 0
    5e18:	50 e0       	ldi	r21, 0x00	; 0
    5e1a:	ad b7       	in	r26, 0x3d	; 61
    5e1c:	be b7       	in	r27, 0x3e	; 62
    5e1e:	11 96       	adiw	r26, 0x01	; 1
    5e20:	2d 93       	st	X+, r18
    5e22:	3d 93       	st	X+, r19
    5e24:	4d 93       	st	X+, r20
    5e26:	5c 93       	st	X, r21
    5e28:	14 97       	sbiw	r26, 0x04	; 4
    5e2a:	55 82       	std	Z+5, r5	; 0x05
    5e2c:	44 82       	std	Z+4, r4	; 0x04
    5e2e:	36 82       	std	Z+6, r3	; 0x06
    5e30:	18 96       	adiw	r26, 0x08	; 8
    5e32:	fe 01       	movw	r30, r28
    5e34:	eb 53       	subi	r30, 0x3B	; 59
    5e36:	ff 4f       	sbci	r31, 0xFF	; 255
    5e38:	8c e0       	ldi	r24, 0x0C	; 12
    5e3a:	01 90       	ld	r0, Z+
    5e3c:	0d 92       	st	X+, r0
    5e3e:	81 50       	subi	r24, 0x01	; 1
    5e40:	e1 f7       	brne	.-8      	; 0x5e3a <_ZN10Movimiento6updateEm+0x966>
    5e42:	c3 01       	movw	r24, r6
    5e44:	62 2d       	mov	r22, r2
    5e46:	f4 01       	movw	r30, r8
    5e48:	a0 80       	ld	r10, Z
    5e4a:	b1 80       	ldd	r11, Z+1	; 0x01
    5e4c:	c2 80       	ldd	r12, Z+2	; 0x02
    5e4e:	d3 80       	ldd	r13, Z+3	; 0x03
    5e50:	e4 80       	ldd	r14, Z+4	; 0x04
    5e52:	f5 80       	ldd	r15, Z+5	; 0x05
    5e54:	06 81       	ldd	r16, Z+6	; 0x06
    5e56:	17 81       	ldd	r17, Z+7	; 0x07
    5e58:	20 85       	ldd	r18, Z+8	; 0x08
    5e5a:	31 85       	ldd	r19, Z+9	; 0x09
    5e5c:	42 85       	ldd	r20, Z+10	; 0x0a
    5e5e:	53 85       	ldd	r21, Z+11	; 0x0b
    5e60:	88 24       	eor	r8, r8
    5e62:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <_ZN10Movimiento6pasitoEh7COORD3DbfihS0_>
    5e66:	2d b7       	in	r18, 0x3d	; 61
    5e68:	3e b7       	in	r19, 0x3e	; 62
    5e6a:	2d 5e       	subi	r18, 0xED	; 237
    5e6c:	3f 4f       	sbci	r19, 0xFF	; 255
    5e6e:	0f b6       	in	r0, 0x3f	; 63
    5e70:	f8 94       	cli
    5e72:	3e bf       	out	0x3e, r19	; 62
    5e74:	0f be       	out	0x3f, r0	; 63
    5e76:	2d bf       	out	0x3d, r18	; 61
    5e78:	ec c4       	rjmp	.+2520   	; 0x6852 <_ZN10Movimiento6updateEm+0x137e>
										break;
									}
								} else {
									// rotación
									COORD2D O = getOffset (pata); // no usamos rel2abs/abs2rel por razones de eficiencia
    5e7a:	89 2d       	mov	r24, r9
    5e7c:	0e 94 8f 6f 	call	0xdf1e	; 0xdf1e <_Z9getOffseth>
    5e80:	cf 5a       	subi	r28, 0xAF	; 175
    5e82:	de 4f       	sbci	r29, 0xFE	; 254
    5e84:	28 83       	st	Y, r18
    5e86:	c1 55       	subi	r28, 0x51	; 81
    5e88:	d1 40       	sbci	r29, 0x01	; 1
    5e8a:	ce 5a       	subi	r28, 0xAE	; 174
    5e8c:	de 4f       	sbci	r29, 0xFE	; 254
    5e8e:	38 83       	st	Y, r19
    5e90:	c2 55       	subi	r28, 0x52	; 82
    5e92:	d1 40       	sbci	r29, 0x01	; 1
    5e94:	cd 5a       	subi	r28, 0xAD	; 173
    5e96:	de 4f       	sbci	r29, 0xFE	; 254
    5e98:	48 83       	st	Y, r20
    5e9a:	c3 55       	subi	r28, 0x53	; 83
    5e9c:	d1 40       	sbci	r29, 0x01	; 1
    5e9e:	cc 5a       	subi	r28, 0xAC	; 172
    5ea0:	de 4f       	sbci	r29, 0xFE	; 254
    5ea2:	58 83       	st	Y, r21
    5ea4:	c4 55       	subi	r28, 0x54	; 84
    5ea6:	d1 40       	sbci	r29, 0x01	; 1
    5ea8:	cb 5a       	subi	r28, 0xAB	; 171
    5eaa:	de 4f       	sbci	r29, 0xFE	; 254
    5eac:	68 83       	st	Y, r22
    5eae:	c5 55       	subi	r28, 0x55	; 85
    5eb0:	d1 40       	sbci	r29, 0x01	; 1
    5eb2:	ca 5a       	subi	r28, 0xAA	; 170
    5eb4:	de 4f       	sbci	r29, 0xFE	; 254
    5eb6:	78 83       	st	Y, r23
    5eb8:	c6 55       	subi	r28, 0x56	; 86
    5eba:	d1 40       	sbci	r29, 0x01	; 1
    5ebc:	c9 5a       	subi	r28, 0xA9	; 169
    5ebe:	de 4f       	sbci	r29, 0xFE	; 254
    5ec0:	88 83       	st	Y, r24
    5ec2:	c7 55       	subi	r28, 0x57	; 87
    5ec4:	d1 40       	sbci	r29, 0x01	; 1
    5ec6:	c8 5a       	subi	r28, 0xA8	; 168
    5ec8:	de 4f       	sbci	r29, 0xFE	; 254
    5eca:	98 83       	st	Y, r25
    5ecc:	c8 55       	subi	r28, 0x58	; 88
    5ece:	d1 40       	sbci	r29, 0x01	; 1
    5ed0:	de 01       	movw	r26, r28
    5ed2:	a7 59       	subi	r26, 0x97	; 151
    5ed4:	bf 4f       	sbci	r27, 0xFF	; 255
    5ed6:	fe 01       	movw	r30, r28
    5ed8:	ef 5a       	subi	r30, 0xAF	; 175
    5eda:	fe 4f       	sbci	r31, 0xFE	; 254
    5edc:	88 e0       	ldi	r24, 0x08	; 8
    5ede:	01 90       	ld	r0, Z+
    5ee0:	0d 92       	st	X+, r0
    5ee2:	81 50       	subi	r24, 0x01	; 1
    5ee4:	e1 f7       	brne	.-8      	; 0x5ede <_ZN10Movimiento6updateEm+0xa0a>
									C = resta (suma (applyMatrix (resta (suma (xyz2xz(wk.rt.pos_ref[pata]), O), wk.mv.vector), wk.rt.rotor2), wk.mv.vector), O);   
    5ee6:	f1 01       	movw	r30, r2
    5ee8:	ee 0f       	add	r30, r30
    5eea:	ff 1f       	adc	r31, r31
    5eec:	e2 0d       	add	r30, r2
    5eee:	f3 1d       	adc	r31, r3
    5ef0:	ee 0f       	add	r30, r30
    5ef2:	ff 1f       	adc	r31, r31
    5ef4:	ee 0f       	add	r30, r30
    5ef6:	ff 1f       	adc	r31, r31
    5ef8:	e6 0d       	add	r30, r6
    5efa:	f7 1d       	adc	r31, r7
    5efc:	e8 5c       	subi	r30, 0xC8	; 200
    5efe:	fe 4f       	sbci	r31, 0xFE	; 254
    5f00:	e0 80       	ld	r14, Z
    5f02:	f1 80       	ldd	r15, Z+1	; 0x01
    5f04:	02 81       	ldd	r16, Z+2	; 0x02
    5f06:	13 81       	ldd	r17, Z+3	; 0x03
    5f08:	24 81       	ldd	r18, Z+4	; 0x04
    5f0a:	35 81       	ldd	r19, Z+5	; 0x05
    5f0c:	46 81       	ldd	r20, Z+6	; 0x06
    5f0e:	57 81       	ldd	r21, Z+7	; 0x07
    5f10:	60 85       	ldd	r22, Z+8	; 0x08
    5f12:	71 85       	ldd	r23, Z+9	; 0x09
    5f14:	82 85       	ldd	r24, Z+10	; 0x0a
    5f16:	93 85       	ldd	r25, Z+11	; 0x0b
    5f18:	0e 94 98 6b 	call	0xd730	; 0xd730 <_Z6xyz2xz7COORD3D>
    5f1c:	cf 5a       	subi	r28, 0xAF	; 175
    5f1e:	de 4f       	sbci	r29, 0xFE	; 254
    5f20:	28 83       	st	Y, r18
    5f22:	c1 55       	subi	r28, 0x51	; 81
    5f24:	d1 40       	sbci	r29, 0x01	; 1
    5f26:	ce 5a       	subi	r28, 0xAE	; 174
    5f28:	de 4f       	sbci	r29, 0xFE	; 254
    5f2a:	38 83       	st	Y, r19
    5f2c:	c2 55       	subi	r28, 0x52	; 82
    5f2e:	d1 40       	sbci	r29, 0x01	; 1
    5f30:	cd 5a       	subi	r28, 0xAD	; 173
    5f32:	de 4f       	sbci	r29, 0xFE	; 254
    5f34:	48 83       	st	Y, r20
    5f36:	c3 55       	subi	r28, 0x53	; 83
    5f38:	d1 40       	sbci	r29, 0x01	; 1
    5f3a:	cc 5a       	subi	r28, 0xAC	; 172
    5f3c:	de 4f       	sbci	r29, 0xFE	; 254
    5f3e:	58 83       	st	Y, r21
    5f40:	c4 55       	subi	r28, 0x54	; 84
    5f42:	d1 40       	sbci	r29, 0x01	; 1
    5f44:	cb 5a       	subi	r28, 0xAB	; 171
    5f46:	de 4f       	sbci	r29, 0xFE	; 254
    5f48:	68 83       	st	Y, r22
    5f4a:	c5 55       	subi	r28, 0x55	; 85
    5f4c:	d1 40       	sbci	r29, 0x01	; 1
    5f4e:	ca 5a       	subi	r28, 0xAA	; 170
    5f50:	de 4f       	sbci	r29, 0xFE	; 254
    5f52:	78 83       	st	Y, r23
    5f54:	c6 55       	subi	r28, 0x56	; 86
    5f56:	d1 40       	sbci	r29, 0x01	; 1
    5f58:	c9 5a       	subi	r28, 0xA9	; 169
    5f5a:	de 4f       	sbci	r29, 0xFE	; 254
    5f5c:	88 83       	st	Y, r24
    5f5e:	c7 55       	subi	r28, 0x57	; 87
    5f60:	d1 40       	sbci	r29, 0x01	; 1
    5f62:	c8 5a       	subi	r28, 0xA8	; 168
    5f64:	de 4f       	sbci	r29, 0xFE	; 254
    5f66:	98 83       	st	Y, r25
    5f68:	c8 55       	subi	r28, 0x58	; 88
    5f6a:	d1 40       	sbci	r29, 0x01	; 1
    5f6c:	de 01       	movw	r26, r28
    5f6e:	91 96       	adiw	r26, 0x21	; 33
    5f70:	fe 01       	movw	r30, r28
    5f72:	ef 5a       	subi	r30, 0xAF	; 175
    5f74:	fe 4f       	sbci	r31, 0xFE	; 254
    5f76:	88 e0       	ldi	r24, 0x08	; 8
    5f78:	01 90       	ld	r0, Z+
    5f7a:	0d 92       	st	X+, r0
    5f7c:	81 50       	subi	r24, 0x01	; 1
    5f7e:	e1 f7       	brne	.-8      	; 0x5f78 <_ZN10Movimiento6updateEm+0xaa4>
    5f80:	29 a1       	ldd	r18, Y+33	; 0x21
    5f82:	3a a1       	ldd	r19, Y+34	; 0x22
    5f84:	4b a1       	ldd	r20, Y+35	; 0x23
    5f86:	5c a1       	ldd	r21, Y+36	; 0x24
    5f88:	6d a1       	ldd	r22, Y+37	; 0x25
    5f8a:	7e a1       	ldd	r23, Y+38	; 0x26
    5f8c:	8f a1       	ldd	r24, Y+39	; 0x27
    5f8e:	98 a5       	ldd	r25, Y+40	; 0x28
    5f90:	aa 96       	adiw	r28, 0x2a	; 42
    5f92:	af ac       	ldd	r10, Y+63	; 0x3f
    5f94:	aa 97       	sbiw	r28, 0x2a	; 42
    5f96:	ab 96       	adiw	r28, 0x2b	; 43
    5f98:	bf ac       	ldd	r11, Y+63	; 0x3f
    5f9a:	ab 97       	sbiw	r28, 0x2b	; 43
    5f9c:	ac 96       	adiw	r28, 0x2c	; 44
    5f9e:	cf ac       	ldd	r12, Y+63	; 0x3f
    5fa0:	ac 97       	sbiw	r28, 0x2c	; 44
    5fa2:	ad 96       	adiw	r28, 0x2d	; 45
    5fa4:	df ac       	ldd	r13, Y+63	; 0x3f
    5fa6:	ad 97       	sbiw	r28, 0x2d	; 45
    5fa8:	ae 96       	adiw	r28, 0x2e	; 46
    5faa:	ef ac       	ldd	r14, Y+63	; 0x3f
    5fac:	ae 97       	sbiw	r28, 0x2e	; 46
    5fae:	af 96       	adiw	r28, 0x2f	; 47
    5fb0:	ff ac       	ldd	r15, Y+63	; 0x3f
    5fb2:	af 97       	sbiw	r28, 0x2f	; 47
    5fb4:	e0 96       	adiw	r28, 0x30	; 48
    5fb6:	0f ad       	ldd	r16, Y+63	; 0x3f
    5fb8:	e0 97       	sbiw	r28, 0x30	; 48
    5fba:	e1 96       	adiw	r28, 0x31	; 49
    5fbc:	1f ad       	ldd	r17, Y+63	; 0x3f
    5fbe:	e1 97       	sbiw	r28, 0x31	; 49
    5fc0:	0e 94 84 69 	call	0xd308	; 0xd308 <_Z4suma7COORD2DS_>
    5fc4:	cf 5a       	subi	r28, 0xAF	; 175
    5fc6:	de 4f       	sbci	r29, 0xFE	; 254
    5fc8:	28 83       	st	Y, r18
    5fca:	c1 55       	subi	r28, 0x51	; 81
    5fcc:	d1 40       	sbci	r29, 0x01	; 1
    5fce:	ce 5a       	subi	r28, 0xAE	; 174
    5fd0:	de 4f       	sbci	r29, 0xFE	; 254
    5fd2:	38 83       	st	Y, r19
    5fd4:	c2 55       	subi	r28, 0x52	; 82
    5fd6:	d1 40       	sbci	r29, 0x01	; 1
    5fd8:	cd 5a       	subi	r28, 0xAD	; 173
    5fda:	de 4f       	sbci	r29, 0xFE	; 254
    5fdc:	48 83       	st	Y, r20
    5fde:	c3 55       	subi	r28, 0x53	; 83
    5fe0:	d1 40       	sbci	r29, 0x01	; 1
    5fe2:	cc 5a       	subi	r28, 0xAC	; 172
    5fe4:	de 4f       	sbci	r29, 0xFE	; 254
    5fe6:	58 83       	st	Y, r21
    5fe8:	c4 55       	subi	r28, 0x54	; 84
    5fea:	d1 40       	sbci	r29, 0x01	; 1
    5fec:	cb 5a       	subi	r28, 0xAB	; 171
    5fee:	de 4f       	sbci	r29, 0xFE	; 254
    5ff0:	68 83       	st	Y, r22
    5ff2:	c5 55       	subi	r28, 0x55	; 85
    5ff4:	d1 40       	sbci	r29, 0x01	; 1
    5ff6:	ca 5a       	subi	r28, 0xAA	; 170
    5ff8:	de 4f       	sbci	r29, 0xFE	; 254
    5ffa:	78 83       	st	Y, r23
    5ffc:	c6 55       	subi	r28, 0x56	; 86
    5ffe:	d1 40       	sbci	r29, 0x01	; 1
    6000:	c9 5a       	subi	r28, 0xA9	; 169
    6002:	de 4f       	sbci	r29, 0xFE	; 254
    6004:	88 83       	st	Y, r24
    6006:	c7 55       	subi	r28, 0x57	; 87
    6008:	d1 40       	sbci	r29, 0x01	; 1
    600a:	c8 5a       	subi	r28, 0xA8	; 168
    600c:	de 4f       	sbci	r29, 0xFE	; 254
    600e:	98 83       	st	Y, r25
    6010:	c8 55       	subi	r28, 0x58	; 88
    6012:	d1 40       	sbci	r29, 0x01	; 1
    6014:	de 01       	movw	r26, r28
    6016:	99 96       	adiw	r26, 0x29	; 41
    6018:	fe 01       	movw	r30, r28
    601a:	ef 5a       	subi	r30, 0xAF	; 175
    601c:	fe 4f       	sbci	r31, 0xFE	; 254
    601e:	88 e0       	ldi	r24, 0x08	; 8
    6020:	01 90       	ld	r0, Z+
    6022:	0d 92       	st	X+, r0
    6024:	81 50       	subi	r24, 0x01	; 1
    6026:	e1 f7       	brne	.-8      	; 0x6020 <_ZN10Movimiento6updateEm+0xb4c>
    6028:	29 a5       	ldd	r18, Y+41	; 0x29
    602a:	3a a5       	ldd	r19, Y+42	; 0x2a
    602c:	4b a5       	ldd	r20, Y+43	; 0x2b
    602e:	5c a5       	ldd	r21, Y+44	; 0x2c
    6030:	6d a5       	ldd	r22, Y+45	; 0x2d
    6032:	7e a5       	ldd	r23, Y+46	; 0x2e
    6034:	8f a5       	ldd	r24, Y+47	; 0x2f
    6036:	98 a9       	ldd	r25, Y+48	; 0x30
    6038:	d2 01       	movw	r26, r4
    603a:	ac 90       	ld	r10, X
    603c:	11 96       	adiw	r26, 0x01	; 1
    603e:	bc 90       	ld	r11, X
    6040:	11 97       	sbiw	r26, 0x01	; 1
    6042:	12 96       	adiw	r26, 0x02	; 2
    6044:	cc 90       	ld	r12, X
    6046:	12 97       	sbiw	r26, 0x02	; 2
    6048:	13 96       	adiw	r26, 0x03	; 3
    604a:	dc 90       	ld	r13, X
    604c:	13 97       	sbiw	r26, 0x03	; 3
    604e:	14 96       	adiw	r26, 0x04	; 4
    6050:	ec 90       	ld	r14, X
    6052:	14 97       	sbiw	r26, 0x04	; 4
    6054:	15 96       	adiw	r26, 0x05	; 5
    6056:	fc 90       	ld	r15, X
    6058:	15 97       	sbiw	r26, 0x05	; 5
    605a:	16 96       	adiw	r26, 0x06	; 6
    605c:	0c 91       	ld	r16, X
    605e:	16 97       	sbiw	r26, 0x06	; 6
    6060:	17 96       	adiw	r26, 0x07	; 7
    6062:	1c 91       	ld	r17, X
    6064:	0e 94 47 6a 	call	0xd48e	; 0xd48e <_Z5resta7COORD2DS_>
    6068:	cf 5a       	subi	r28, 0xAF	; 175
    606a:	de 4f       	sbci	r29, 0xFE	; 254
    606c:	28 83       	st	Y, r18
    606e:	c1 55       	subi	r28, 0x51	; 81
    6070:	d1 40       	sbci	r29, 0x01	; 1
    6072:	ce 5a       	subi	r28, 0xAE	; 174
    6074:	de 4f       	sbci	r29, 0xFE	; 254
    6076:	38 83       	st	Y, r19
    6078:	c2 55       	subi	r28, 0x52	; 82
    607a:	d1 40       	sbci	r29, 0x01	; 1
    607c:	cd 5a       	subi	r28, 0xAD	; 173
    607e:	de 4f       	sbci	r29, 0xFE	; 254
    6080:	48 83       	st	Y, r20
    6082:	c3 55       	subi	r28, 0x53	; 83
    6084:	d1 40       	sbci	r29, 0x01	; 1
    6086:	cc 5a       	subi	r28, 0xAC	; 172
    6088:	de 4f       	sbci	r29, 0xFE	; 254
    608a:	58 83       	st	Y, r21
    608c:	c4 55       	subi	r28, 0x54	; 84
    608e:	d1 40       	sbci	r29, 0x01	; 1
    6090:	cb 5a       	subi	r28, 0xAB	; 171
    6092:	de 4f       	sbci	r29, 0xFE	; 254
    6094:	68 83       	st	Y, r22
    6096:	c5 55       	subi	r28, 0x55	; 85
    6098:	d1 40       	sbci	r29, 0x01	; 1
    609a:	ca 5a       	subi	r28, 0xAA	; 170
    609c:	de 4f       	sbci	r29, 0xFE	; 254
    609e:	78 83       	st	Y, r23
    60a0:	c6 55       	subi	r28, 0x56	; 86
    60a2:	d1 40       	sbci	r29, 0x01	; 1
    60a4:	c9 5a       	subi	r28, 0xA9	; 169
    60a6:	de 4f       	sbci	r29, 0xFE	; 254
    60a8:	88 83       	st	Y, r24
    60aa:	c7 55       	subi	r28, 0x57	; 87
    60ac:	d1 40       	sbci	r29, 0x01	; 1
    60ae:	c8 5a       	subi	r28, 0xA8	; 168
    60b0:	de 4f       	sbci	r29, 0xFE	; 254
    60b2:	98 83       	st	Y, r25
    60b4:	c8 55       	subi	r28, 0x58	; 88
    60b6:	d1 40       	sbci	r29, 0x01	; 1
    60b8:	de 01       	movw	r26, r28
    60ba:	d1 96       	adiw	r26, 0x31	; 49
    60bc:	fe 01       	movw	r30, r28
    60be:	ef 5a       	subi	r30, 0xAF	; 175
    60c0:	fe 4f       	sbci	r31, 0xFE	; 254
    60c2:	88 e0       	ldi	r24, 0x08	; 8
    60c4:	01 90       	ld	r0, Z+
    60c6:	0d 92       	st	X+, r0
    60c8:	81 50       	subi	r24, 0x01	; 1
    60ca:	e1 f7       	brne	.-8      	; 0x60c4 <_ZN10Movimiento6updateEm+0xbf0>
    60cc:	29 a9       	ldd	r18, Y+49	; 0x31
    60ce:	3a a9       	ldd	r19, Y+50	; 0x32
    60d0:	4b a9       	ldd	r20, Y+51	; 0x33
    60d2:	5c a9       	ldd	r21, Y+52	; 0x34
    60d4:	6d a9       	ldd	r22, Y+53	; 0x35
    60d6:	7e a9       	ldd	r23, Y+54	; 0x36
    60d8:	8f a9       	ldd	r24, Y+55	; 0x37
    60da:	98 ad       	ldd	r25, Y+56	; 0x38
    60dc:	cd 59       	subi	r28, 0x9D	; 157
    60de:	de 4f       	sbci	r29, 0xFE	; 254
    60e0:	08 81       	ld	r16, Y
    60e2:	19 81       	ldd	r17, Y+1	; 0x01
    60e4:	c3 56       	subi	r28, 0x63	; 99
    60e6:	d1 40       	sbci	r29, 0x01	; 1
    60e8:	0e 94 e7 6c 	call	0xd9ce	; 0xd9ce <_Z11applyMatrix7COORD2DPS_>
    60ec:	cf 5a       	subi	r28, 0xAF	; 175
    60ee:	de 4f       	sbci	r29, 0xFE	; 254
    60f0:	28 83       	st	Y, r18
    60f2:	c1 55       	subi	r28, 0x51	; 81
    60f4:	d1 40       	sbci	r29, 0x01	; 1
    60f6:	ce 5a       	subi	r28, 0xAE	; 174
    60f8:	de 4f       	sbci	r29, 0xFE	; 254
    60fa:	38 83       	st	Y, r19
    60fc:	c2 55       	subi	r28, 0x52	; 82
    60fe:	d1 40       	sbci	r29, 0x01	; 1
    6100:	cd 5a       	subi	r28, 0xAD	; 173
    6102:	de 4f       	sbci	r29, 0xFE	; 254
    6104:	48 83       	st	Y, r20
    6106:	c3 55       	subi	r28, 0x53	; 83
    6108:	d1 40       	sbci	r29, 0x01	; 1
    610a:	cc 5a       	subi	r28, 0xAC	; 172
    610c:	de 4f       	sbci	r29, 0xFE	; 254
    610e:	58 83       	st	Y, r21
    6110:	c4 55       	subi	r28, 0x54	; 84
    6112:	d1 40       	sbci	r29, 0x01	; 1
    6114:	cb 5a       	subi	r28, 0xAB	; 171
    6116:	de 4f       	sbci	r29, 0xFE	; 254
    6118:	68 83       	st	Y, r22
    611a:	c5 55       	subi	r28, 0x55	; 85
    611c:	d1 40       	sbci	r29, 0x01	; 1
    611e:	ca 5a       	subi	r28, 0xAA	; 170
    6120:	de 4f       	sbci	r29, 0xFE	; 254
    6122:	78 83       	st	Y, r23
    6124:	c6 55       	subi	r28, 0x56	; 86
    6126:	d1 40       	sbci	r29, 0x01	; 1
    6128:	c9 5a       	subi	r28, 0xA9	; 169
    612a:	de 4f       	sbci	r29, 0xFE	; 254
    612c:	88 83       	st	Y, r24
    612e:	c7 55       	subi	r28, 0x57	; 87
    6130:	d1 40       	sbci	r29, 0x01	; 1
    6132:	c8 5a       	subi	r28, 0xA8	; 168
    6134:	de 4f       	sbci	r29, 0xFE	; 254
    6136:	98 83       	st	Y, r25
    6138:	c8 55       	subi	r28, 0x58	; 88
    613a:	d1 40       	sbci	r29, 0x01	; 1
    613c:	de 01       	movw	r26, r28
    613e:	d9 96       	adiw	r26, 0x39	; 57
    6140:	fe 01       	movw	r30, r28
    6142:	ef 5a       	subi	r30, 0xAF	; 175
    6144:	fe 4f       	sbci	r31, 0xFE	; 254
    6146:	88 e0       	ldi	r24, 0x08	; 8
    6148:	01 90       	ld	r0, Z+
    614a:	0d 92       	st	X+, r0
    614c:	81 50       	subi	r24, 0x01	; 1
    614e:	e1 f7       	brne	.-8      	; 0x6148 <_ZN10Movimiento6updateEm+0xc74>
    6150:	29 ad       	ldd	r18, Y+57	; 0x39
    6152:	3a ad       	ldd	r19, Y+58	; 0x3a
    6154:	4b ad       	ldd	r20, Y+59	; 0x3b
    6156:	5c ad       	ldd	r21, Y+60	; 0x3c
    6158:	6d ad       	ldd	r22, Y+61	; 0x3d
    615a:	7e ad       	ldd	r23, Y+62	; 0x3e
    615c:	8f ad       	ldd	r24, Y+63	; 0x3f
    615e:	21 96       	adiw	r28, 0x01	; 1
    6160:	9f ad       	ldd	r25, Y+63	; 0x3f
    6162:	21 97       	sbiw	r28, 0x01	; 1
    6164:	f2 01       	movw	r30, r4
    6166:	a0 80       	ld	r10, Z
    6168:	b1 80       	ldd	r11, Z+1	; 0x01
    616a:	c2 80       	ldd	r12, Z+2	; 0x02
    616c:	d3 80       	ldd	r13, Z+3	; 0x03
    616e:	e4 80       	ldd	r14, Z+4	; 0x04
    6170:	f5 80       	ldd	r15, Z+5	; 0x05
    6172:	06 81       	ldd	r16, Z+6	; 0x06
    6174:	17 81       	ldd	r17, Z+7	; 0x07
    6176:	0e 94 84 69 	call	0xd308	; 0xd308 <_Z4suma7COORD2DS_>
    617a:	cf 5a       	subi	r28, 0xAF	; 175
    617c:	de 4f       	sbci	r29, 0xFE	; 254
    617e:	28 83       	st	Y, r18
    6180:	c1 55       	subi	r28, 0x51	; 81
    6182:	d1 40       	sbci	r29, 0x01	; 1
    6184:	ce 5a       	subi	r28, 0xAE	; 174
    6186:	de 4f       	sbci	r29, 0xFE	; 254
    6188:	38 83       	st	Y, r19
    618a:	c2 55       	subi	r28, 0x52	; 82
    618c:	d1 40       	sbci	r29, 0x01	; 1
    618e:	cd 5a       	subi	r28, 0xAD	; 173
    6190:	de 4f       	sbci	r29, 0xFE	; 254
    6192:	48 83       	st	Y, r20
    6194:	c3 55       	subi	r28, 0x53	; 83
    6196:	d1 40       	sbci	r29, 0x01	; 1
    6198:	cc 5a       	subi	r28, 0xAC	; 172
    619a:	de 4f       	sbci	r29, 0xFE	; 254
    619c:	58 83       	st	Y, r21
    619e:	c4 55       	subi	r28, 0x54	; 84
    61a0:	d1 40       	sbci	r29, 0x01	; 1
    61a2:	cb 5a       	subi	r28, 0xAB	; 171
    61a4:	de 4f       	sbci	r29, 0xFE	; 254
    61a6:	68 83       	st	Y, r22
    61a8:	c5 55       	subi	r28, 0x55	; 85
    61aa:	d1 40       	sbci	r29, 0x01	; 1
    61ac:	ca 5a       	subi	r28, 0xAA	; 170
    61ae:	de 4f       	sbci	r29, 0xFE	; 254
    61b0:	78 83       	st	Y, r23
    61b2:	c6 55       	subi	r28, 0x56	; 86
    61b4:	d1 40       	sbci	r29, 0x01	; 1
    61b6:	c9 5a       	subi	r28, 0xA9	; 169
    61b8:	de 4f       	sbci	r29, 0xFE	; 254
    61ba:	88 83       	st	Y, r24
    61bc:	c7 55       	subi	r28, 0x57	; 87
    61be:	d1 40       	sbci	r29, 0x01	; 1
    61c0:	c8 5a       	subi	r28, 0xA8	; 168
    61c2:	de 4f       	sbci	r29, 0xFE	; 254
    61c4:	98 83       	st	Y, r25
    61c6:	c8 55       	subi	r28, 0x58	; 88
    61c8:	d1 40       	sbci	r29, 0x01	; 1
    61ca:	de 01       	movw	r26, r28
    61cc:	af 5b       	subi	r26, 0xBF	; 191
    61ce:	bf 4f       	sbci	r27, 0xFF	; 255
    61d0:	fe 01       	movw	r30, r28
    61d2:	ef 5a       	subi	r30, 0xAF	; 175
    61d4:	fe 4f       	sbci	r31, 0xFE	; 254
    61d6:	88 e0       	ldi	r24, 0x08	; 8
    61d8:	01 90       	ld	r0, Z+
    61da:	0d 92       	st	X+, r0
    61dc:	81 50       	subi	r24, 0x01	; 1
    61de:	e1 f7       	brne	.-8      	; 0x61d8 <_ZN10Movimiento6updateEm+0xd04>
    61e0:	fe 01       	movw	r30, r28
    61e2:	ef 5b       	subi	r30, 0xBF	; 191
    61e4:	ff 4f       	sbci	r31, 0xFF	; 255
    61e6:	20 81       	ld	r18, Z
    61e8:	fe 01       	movw	r30, r28
    61ea:	ee 5b       	subi	r30, 0xBE	; 190
    61ec:	ff 4f       	sbci	r31, 0xFF	; 255
    61ee:	30 81       	ld	r19, Z
    61f0:	fe 01       	movw	r30, r28
    61f2:	ed 5b       	subi	r30, 0xBD	; 189
    61f4:	ff 4f       	sbci	r31, 0xFF	; 255
    61f6:	40 81       	ld	r20, Z
    61f8:	fe 01       	movw	r30, r28
    61fa:	ec 5b       	subi	r30, 0xBC	; 188
    61fc:	ff 4f       	sbci	r31, 0xFF	; 255
    61fe:	50 81       	ld	r21, Z
    6200:	fe 01       	movw	r30, r28
    6202:	eb 5b       	subi	r30, 0xBB	; 187
    6204:	ff 4f       	sbci	r31, 0xFF	; 255
    6206:	60 81       	ld	r22, Z
    6208:	fe 01       	movw	r30, r28
    620a:	ea 5b       	subi	r30, 0xBA	; 186
    620c:	ff 4f       	sbci	r31, 0xFF	; 255
    620e:	70 81       	ld	r23, Z
    6210:	fe 01       	movw	r30, r28
    6212:	e9 5b       	subi	r30, 0xB9	; 185
    6214:	ff 4f       	sbci	r31, 0xFF	; 255
    6216:	80 81       	ld	r24, Z
    6218:	fe 01       	movw	r30, r28
    621a:	e8 5b       	subi	r30, 0xB8	; 184
    621c:	ff 4f       	sbci	r31, 0xFF	; 255
    621e:	90 81       	ld	r25, Z
    6220:	aa 96       	adiw	r28, 0x2a	; 42
    6222:	af ac       	ldd	r10, Y+63	; 0x3f
    6224:	aa 97       	sbiw	r28, 0x2a	; 42
    6226:	ab 96       	adiw	r28, 0x2b	; 43
    6228:	bf ac       	ldd	r11, Y+63	; 0x3f
    622a:	ab 97       	sbiw	r28, 0x2b	; 43
    622c:	ac 96       	adiw	r28, 0x2c	; 44
    622e:	cf ac       	ldd	r12, Y+63	; 0x3f
    6230:	ac 97       	sbiw	r28, 0x2c	; 44
    6232:	ad 96       	adiw	r28, 0x2d	; 45
    6234:	df ac       	ldd	r13, Y+63	; 0x3f
    6236:	ad 97       	sbiw	r28, 0x2d	; 45
    6238:	ae 96       	adiw	r28, 0x2e	; 46
    623a:	ef ac       	ldd	r14, Y+63	; 0x3f
    623c:	ae 97       	sbiw	r28, 0x2e	; 46
    623e:	af 96       	adiw	r28, 0x2f	; 47
    6240:	ff ac       	ldd	r15, Y+63	; 0x3f
    6242:	af 97       	sbiw	r28, 0x2f	; 47
    6244:	e0 96       	adiw	r28, 0x30	; 48
    6246:	0f ad       	ldd	r16, Y+63	; 0x3f
    6248:	e0 97       	sbiw	r28, 0x30	; 48
    624a:	e1 96       	adiw	r28, 0x31	; 49
    624c:	1f ad       	ldd	r17, Y+63	; 0x3f
    624e:	e1 97       	sbiw	r28, 0x31	; 49
    6250:	0e 94 47 6a 	call	0xd48e	; 0xd48e <_Z5resta7COORD2DS_>
    6254:	cf 5a       	subi	r28, 0xAF	; 175
    6256:	de 4f       	sbci	r29, 0xFE	; 254
    6258:	28 83       	st	Y, r18
    625a:	c1 55       	subi	r28, 0x51	; 81
    625c:	d1 40       	sbci	r29, 0x01	; 1
    625e:	ce 5a       	subi	r28, 0xAE	; 174
    6260:	de 4f       	sbci	r29, 0xFE	; 254
    6262:	38 83       	st	Y, r19
    6264:	c2 55       	subi	r28, 0x52	; 82
    6266:	d1 40       	sbci	r29, 0x01	; 1
    6268:	cd 5a       	subi	r28, 0xAD	; 173
    626a:	de 4f       	sbci	r29, 0xFE	; 254
    626c:	48 83       	st	Y, r20
    626e:	c3 55       	subi	r28, 0x53	; 83
    6270:	d1 40       	sbci	r29, 0x01	; 1
    6272:	cc 5a       	subi	r28, 0xAC	; 172
    6274:	de 4f       	sbci	r29, 0xFE	; 254
    6276:	58 83       	st	Y, r21
    6278:	c4 55       	subi	r28, 0x54	; 84
    627a:	d1 40       	sbci	r29, 0x01	; 1
    627c:	cb 5a       	subi	r28, 0xAB	; 171
    627e:	de 4f       	sbci	r29, 0xFE	; 254
    6280:	68 83       	st	Y, r22
    6282:	c5 55       	subi	r28, 0x55	; 85
    6284:	d1 40       	sbci	r29, 0x01	; 1
    6286:	ca 5a       	subi	r28, 0xAA	; 170
    6288:	de 4f       	sbci	r29, 0xFE	; 254
    628a:	78 83       	st	Y, r23
    628c:	c6 55       	subi	r28, 0x56	; 86
    628e:	d1 40       	sbci	r29, 0x01	; 1
    6290:	c9 5a       	subi	r28, 0xA9	; 169
    6292:	de 4f       	sbci	r29, 0xFE	; 254
    6294:	88 83       	st	Y, r24
    6296:	c7 55       	subi	r28, 0x57	; 87
    6298:	d1 40       	sbci	r29, 0x01	; 1
    629a:	c8 5a       	subi	r28, 0xA8	; 168
    629c:	de 4f       	sbci	r29, 0xFE	; 254
    629e:	98 83       	st	Y, r25
    62a0:	c8 55       	subi	r28, 0x58	; 88
    62a2:	d1 40       	sbci	r29, 0x01	; 1
    62a4:	de 01       	movw	r26, r28
    62a6:	af 58       	subi	r26, 0x8F	; 143
    62a8:	bf 4f       	sbci	r27, 0xFF	; 255
    62aa:	fe 01       	movw	r30, r28
    62ac:	ef 5a       	subi	r30, 0xAF	; 175
    62ae:	fe 4f       	sbci	r31, 0xFE	; 254
    62b0:	88 e0       	ldi	r24, 0x08	; 8
    62b2:	01 90       	ld	r0, Z+
    62b4:	0d 92       	st	X+, r0
    62b6:	81 50       	subi	r24, 0x01	; 1
    62b8:	e1 f7       	brne	.-8      	; 0x62b2 <_ZN10Movimiento6updateEm+0xdde>
									// en la rotación, hacer la "zancada progresiva" es un poco más complicado..
									// como no podemos recalcular la matriz de rotación, hacemos interpolación lineal
									if (sh.cn.tick <= 2*wk.rt.ciclo) {
    62ba:	c3 59       	subi	r28, 0x93	; 147
    62bc:	de 4f       	sbci	r29, 0xFE	; 254
    62be:	a8 81       	ld	r26, Y
    62c0:	b9 81       	ldd	r27, Y+1	; 0x01
    62c2:	cd 56       	subi	r28, 0x6D	; 109
    62c4:	d1 40       	sbci	r29, 0x01	; 1
    62c6:	6d 91       	ld	r22, X+
    62c8:	7c 91       	ld	r23, X
    62ca:	80 e0       	ldi	r24, 0x00	; 0
    62cc:	90 e0       	ldi	r25, 0x00	; 0
    62ce:	0e 94 6b 7d 	call	0xfad6	; 0xfad6 <__floatunsisf>
    62d2:	7b 01       	movw	r14, r22
    62d4:	8c 01       	movw	r16, r24
    62d6:	c1 59       	subi	r28, 0x91	; 145
    62d8:	de 4f       	sbci	r29, 0xFE	; 254
    62da:	e8 81       	ld	r30, Y
    62dc:	f9 81       	ldd	r31, Y+1	; 0x01
    62de:	cf 56       	subi	r28, 0x6F	; 111
    62e0:	d1 40       	sbci	r29, 0x01	; 1
    62e2:	20 81       	ld	r18, Z
    62e4:	31 81       	ldd	r19, Z+1	; 0x01
    62e6:	42 81       	ldd	r20, Z+2	; 0x02
    62e8:	53 81       	ldd	r21, Z+3	; 0x03
    62ea:	ca 01       	movw	r24, r20
    62ec:	b9 01       	movw	r22, r18
    62ee:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    62f2:	9b 01       	movw	r18, r22
    62f4:	ac 01       	movw	r20, r24
    62f6:	c8 01       	movw	r24, r16
    62f8:	b7 01       	movw	r22, r14
    62fa:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    62fe:	18 16       	cp	r1, r24
    6300:	0c f4       	brge	.+2      	; 0x6304 <_ZN10Movimiento6updateEm+0xe30>
    6302:	94 c1       	rjmp	.+808    	; 0x662c <_ZN10Movimiento6updateEm+0x1158>
										C = suma (producto (resta (C, xyz2xz(wk.rt.pos_ref[pata])), atenuador), xyz2xz(wk.rt.pos_ref[pata]));
    6304:	f1 01       	movw	r30, r2
    6306:	ee 0f       	add	r30, r30
    6308:	ff 1f       	adc	r31, r31
    630a:	e2 0d       	add	r30, r2
    630c:	f3 1d       	adc	r31, r3
    630e:	ee 0f       	add	r30, r30
    6310:	ff 1f       	adc	r31, r31
    6312:	ee 0f       	add	r30, r30
    6314:	ff 1f       	adc	r31, r31
    6316:	e6 0d       	add	r30, r6
    6318:	f7 1d       	adc	r31, r7
    631a:	e8 5c       	subi	r30, 0xC8	; 200
    631c:	fe 4f       	sbci	r31, 0xFE	; 254
    631e:	e0 80       	ld	r14, Z
    6320:	f1 80       	ldd	r15, Z+1	; 0x01
    6322:	02 81       	ldd	r16, Z+2	; 0x02
    6324:	13 81       	ldd	r17, Z+3	; 0x03
    6326:	24 81       	ldd	r18, Z+4	; 0x04
    6328:	35 81       	ldd	r19, Z+5	; 0x05
    632a:	46 81       	ldd	r20, Z+6	; 0x06
    632c:	57 81       	ldd	r21, Z+7	; 0x07
    632e:	60 85       	ldd	r22, Z+8	; 0x08
    6330:	71 85       	ldd	r23, Z+9	; 0x09
    6332:	82 85       	ldd	r24, Z+10	; 0x0a
    6334:	93 85       	ldd	r25, Z+11	; 0x0b
    6336:	0e 94 98 6b 	call	0xd730	; 0xd730 <_Z6xyz2xz7COORD3D>
    633a:	cf 5a       	subi	r28, 0xAF	; 175
    633c:	de 4f       	sbci	r29, 0xFE	; 254
    633e:	28 83       	st	Y, r18
    6340:	c1 55       	subi	r28, 0x51	; 81
    6342:	d1 40       	sbci	r29, 0x01	; 1
    6344:	ce 5a       	subi	r28, 0xAE	; 174
    6346:	de 4f       	sbci	r29, 0xFE	; 254
    6348:	38 83       	st	Y, r19
    634a:	c2 55       	subi	r28, 0x52	; 82
    634c:	d1 40       	sbci	r29, 0x01	; 1
    634e:	cd 5a       	subi	r28, 0xAD	; 173
    6350:	de 4f       	sbci	r29, 0xFE	; 254
    6352:	48 83       	st	Y, r20
    6354:	c3 55       	subi	r28, 0x53	; 83
    6356:	d1 40       	sbci	r29, 0x01	; 1
    6358:	cc 5a       	subi	r28, 0xAC	; 172
    635a:	de 4f       	sbci	r29, 0xFE	; 254
    635c:	58 83       	st	Y, r21
    635e:	c4 55       	subi	r28, 0x54	; 84
    6360:	d1 40       	sbci	r29, 0x01	; 1
    6362:	cb 5a       	subi	r28, 0xAB	; 171
    6364:	de 4f       	sbci	r29, 0xFE	; 254
    6366:	68 83       	st	Y, r22
    6368:	c5 55       	subi	r28, 0x55	; 85
    636a:	d1 40       	sbci	r29, 0x01	; 1
    636c:	ca 5a       	subi	r28, 0xAA	; 170
    636e:	de 4f       	sbci	r29, 0xFE	; 254
    6370:	78 83       	st	Y, r23
    6372:	c6 55       	subi	r28, 0x56	; 86
    6374:	d1 40       	sbci	r29, 0x01	; 1
    6376:	c9 5a       	subi	r28, 0xA9	; 169
    6378:	de 4f       	sbci	r29, 0xFE	; 254
    637a:	88 83       	st	Y, r24
    637c:	c7 55       	subi	r28, 0x57	; 87
    637e:	d1 40       	sbci	r29, 0x01	; 1
    6380:	c8 5a       	subi	r28, 0xA8	; 168
    6382:	de 4f       	sbci	r29, 0xFE	; 254
    6384:	98 83       	st	Y, r25
    6386:	c8 55       	subi	r28, 0x58	; 88
    6388:	d1 40       	sbci	r29, 0x01	; 1
    638a:	de 01       	movw	r26, r28
    638c:	a7 5b       	subi	r26, 0xB7	; 183
    638e:	bf 4f       	sbci	r27, 0xFF	; 255
    6390:	fe 01       	movw	r30, r28
    6392:	ef 5a       	subi	r30, 0xAF	; 175
    6394:	fe 4f       	sbci	r31, 0xFE	; 254
    6396:	88 e0       	ldi	r24, 0x08	; 8
    6398:	01 90       	ld	r0, Z+
    639a:	0d 92       	st	X+, r0
    639c:	81 50       	subi	r24, 0x01	; 1
    639e:	e1 f7       	brne	.-8      	; 0x6398 <_ZN10Movimiento6updateEm+0xec4>
    63a0:	fe 01       	movw	r30, r28
    63a2:	e7 5b       	subi	r30, 0xB7	; 183
    63a4:	ff 4f       	sbci	r31, 0xFF	; 255
    63a6:	e2 96       	adiw	r28, 0x32	; 50
    63a8:	2f ad       	ldd	r18, Y+63	; 0x3f
    63aa:	e2 97       	sbiw	r28, 0x32	; 50
    63ac:	e3 96       	adiw	r28, 0x33	; 51
    63ae:	3f ad       	ldd	r19, Y+63	; 0x3f
    63b0:	e3 97       	sbiw	r28, 0x33	; 51
    63b2:	e4 96       	adiw	r28, 0x34	; 52
    63b4:	4f ad       	ldd	r20, Y+63	; 0x3f
    63b6:	e4 97       	sbiw	r28, 0x34	; 52
    63b8:	e5 96       	adiw	r28, 0x35	; 53
    63ba:	5f ad       	ldd	r21, Y+63	; 0x3f
    63bc:	e5 97       	sbiw	r28, 0x35	; 53
    63be:	e6 96       	adiw	r28, 0x36	; 54
    63c0:	6f ad       	ldd	r22, Y+63	; 0x3f
    63c2:	e6 97       	sbiw	r28, 0x36	; 54
    63c4:	e7 96       	adiw	r28, 0x37	; 55
    63c6:	7f ad       	ldd	r23, Y+63	; 0x3f
    63c8:	e7 97       	sbiw	r28, 0x37	; 55
    63ca:	e8 96       	adiw	r28, 0x38	; 56
    63cc:	8f ad       	ldd	r24, Y+63	; 0x3f
    63ce:	e8 97       	sbiw	r28, 0x38	; 56
    63d0:	e9 96       	adiw	r28, 0x39	; 57
    63d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    63d4:	e9 97       	sbiw	r28, 0x39	; 57
    63d6:	a0 80       	ld	r10, Z
    63d8:	b1 80       	ldd	r11, Z+1	; 0x01
    63da:	c2 80       	ldd	r12, Z+2	; 0x02
    63dc:	d3 80       	ldd	r13, Z+3	; 0x03
    63de:	e4 80       	ldd	r14, Z+4	; 0x04
    63e0:	f5 80       	ldd	r15, Z+5	; 0x05
    63e2:	06 81       	ldd	r16, Z+6	; 0x06
    63e4:	17 81       	ldd	r17, Z+7	; 0x07
    63e6:	0e 94 47 6a 	call	0xd48e	; 0xd48e <_Z5resta7COORD2DS_>
    63ea:	cf 5a       	subi	r28, 0xAF	; 175
    63ec:	de 4f       	sbci	r29, 0xFE	; 254
    63ee:	28 83       	st	Y, r18
    63f0:	c1 55       	subi	r28, 0x51	; 81
    63f2:	d1 40       	sbci	r29, 0x01	; 1
    63f4:	ce 5a       	subi	r28, 0xAE	; 174
    63f6:	de 4f       	sbci	r29, 0xFE	; 254
    63f8:	38 83       	st	Y, r19
    63fa:	c2 55       	subi	r28, 0x52	; 82
    63fc:	d1 40       	sbci	r29, 0x01	; 1
    63fe:	cd 5a       	subi	r28, 0xAD	; 173
    6400:	de 4f       	sbci	r29, 0xFE	; 254
    6402:	48 83       	st	Y, r20
    6404:	c3 55       	subi	r28, 0x53	; 83
    6406:	d1 40       	sbci	r29, 0x01	; 1
    6408:	cc 5a       	subi	r28, 0xAC	; 172
    640a:	de 4f       	sbci	r29, 0xFE	; 254
    640c:	58 83       	st	Y, r21
    640e:	c4 55       	subi	r28, 0x54	; 84
    6410:	d1 40       	sbci	r29, 0x01	; 1
    6412:	cb 5a       	subi	r28, 0xAB	; 171
    6414:	de 4f       	sbci	r29, 0xFE	; 254
    6416:	68 83       	st	Y, r22
    6418:	c5 55       	subi	r28, 0x55	; 85
    641a:	d1 40       	sbci	r29, 0x01	; 1
    641c:	ca 5a       	subi	r28, 0xAA	; 170
    641e:	de 4f       	sbci	r29, 0xFE	; 254
    6420:	78 83       	st	Y, r23
    6422:	c6 55       	subi	r28, 0x56	; 86
    6424:	d1 40       	sbci	r29, 0x01	; 1
    6426:	c9 5a       	subi	r28, 0xA9	; 169
    6428:	de 4f       	sbci	r29, 0xFE	; 254
    642a:	88 83       	st	Y, r24
    642c:	c7 55       	subi	r28, 0x57	; 87
    642e:	d1 40       	sbci	r29, 0x01	; 1
    6430:	c8 5a       	subi	r28, 0xA8	; 168
    6432:	de 4f       	sbci	r29, 0xFE	; 254
    6434:	98 83       	st	Y, r25
    6436:	c8 55       	subi	r28, 0x58	; 88
    6438:	d1 40       	sbci	r29, 0x01	; 1
    643a:	de 01       	movw	r26, r28
    643c:	af 5a       	subi	r26, 0xAF	; 175
    643e:	bf 4f       	sbci	r27, 0xFF	; 255
    6440:	fe 01       	movw	r30, r28
    6442:	ef 5a       	subi	r30, 0xAF	; 175
    6444:	fe 4f       	sbci	r31, 0xFE	; 254
    6446:	88 e0       	ldi	r24, 0x08	; 8
    6448:	01 90       	ld	r0, Z+
    644a:	0d 92       	st	X+, r0
    644c:	81 50       	subi	r24, 0x01	; 1
    644e:	e1 f7       	brne	.-8      	; 0x6448 <_ZN10Movimiento6updateEm+0xf74>
    6450:	fe 01       	movw	r30, r28
    6452:	ef 5a       	subi	r30, 0xAF	; 175
    6454:	ff 4f       	sbci	r31, 0xFF	; 255
    6456:	20 81       	ld	r18, Z
    6458:	31 81       	ldd	r19, Z+1	; 0x01
    645a:	42 81       	ldd	r20, Z+2	; 0x02
    645c:	53 81       	ldd	r21, Z+3	; 0x03
    645e:	64 81       	ldd	r22, Z+4	; 0x04
    6460:	75 81       	ldd	r23, Z+5	; 0x05
    6462:	86 81       	ldd	r24, Z+6	; 0x06
    6464:	97 81       	ldd	r25, Z+7	; 0x07
    6466:	c3 5a       	subi	r28, 0xA3	; 163
    6468:	de 4f       	sbci	r29, 0xFE	; 254
    646a:	e8 80       	ld	r14, Y
    646c:	f9 80       	ldd	r15, Y+1	; 0x01
    646e:	0a 81       	ldd	r16, Y+2	; 0x02
    6470:	1b 81       	ldd	r17, Y+3	; 0x03
    6472:	cd 55       	subi	r28, 0x5D	; 93
    6474:	d1 40       	sbci	r29, 0x01	; 1
    6476:	0e 94 10 6b 	call	0xd620	; 0xd620 <_Z8producto7COORD2Df>
    647a:	cf 5a       	subi	r28, 0xAF	; 175
    647c:	de 4f       	sbci	r29, 0xFE	; 254
    647e:	28 83       	st	Y, r18
    6480:	c1 55       	subi	r28, 0x51	; 81
    6482:	d1 40       	sbci	r29, 0x01	; 1
    6484:	ce 5a       	subi	r28, 0xAE	; 174
    6486:	de 4f       	sbci	r29, 0xFE	; 254
    6488:	38 83       	st	Y, r19
    648a:	c2 55       	subi	r28, 0x52	; 82
    648c:	d1 40       	sbci	r29, 0x01	; 1
    648e:	cd 5a       	subi	r28, 0xAD	; 173
    6490:	de 4f       	sbci	r29, 0xFE	; 254
    6492:	48 83       	st	Y, r20
    6494:	c3 55       	subi	r28, 0x53	; 83
    6496:	d1 40       	sbci	r29, 0x01	; 1
    6498:	cc 5a       	subi	r28, 0xAC	; 172
    649a:	de 4f       	sbci	r29, 0xFE	; 254
    649c:	58 83       	st	Y, r21
    649e:	c4 55       	subi	r28, 0x54	; 84
    64a0:	d1 40       	sbci	r29, 0x01	; 1
    64a2:	cb 5a       	subi	r28, 0xAB	; 171
    64a4:	de 4f       	sbci	r29, 0xFE	; 254
    64a6:	68 83       	st	Y, r22
    64a8:	c5 55       	subi	r28, 0x55	; 85
    64aa:	d1 40       	sbci	r29, 0x01	; 1
    64ac:	ca 5a       	subi	r28, 0xAA	; 170
    64ae:	de 4f       	sbci	r29, 0xFE	; 254
    64b0:	78 83       	st	Y, r23
    64b2:	c6 55       	subi	r28, 0x56	; 86
    64b4:	d1 40       	sbci	r29, 0x01	; 1
    64b6:	c9 5a       	subi	r28, 0xA9	; 169
    64b8:	de 4f       	sbci	r29, 0xFE	; 254
    64ba:	88 83       	st	Y, r24
    64bc:	c7 55       	subi	r28, 0x57	; 87
    64be:	d1 40       	sbci	r29, 0x01	; 1
    64c0:	c8 5a       	subi	r28, 0xA8	; 168
    64c2:	de 4f       	sbci	r29, 0xFE	; 254
    64c4:	98 83       	st	Y, r25
    64c6:	c8 55       	subi	r28, 0x58	; 88
    64c8:	d1 40       	sbci	r29, 0x01	; 1
    64ca:	de 01       	movw	r26, r28
    64cc:	a7 5a       	subi	r26, 0xA7	; 167
    64ce:	bf 4f       	sbci	r27, 0xFF	; 255
    64d0:	fe 01       	movw	r30, r28
    64d2:	ef 5a       	subi	r30, 0xAF	; 175
    64d4:	fe 4f       	sbci	r31, 0xFE	; 254
    64d6:	88 e0       	ldi	r24, 0x08	; 8
    64d8:	01 90       	ld	r0, Z+
    64da:	0d 92       	st	X+, r0
    64dc:	81 50       	subi	r24, 0x01	; 1
    64de:	e1 f7       	brne	.-8      	; 0x64d8 <_ZN10Movimiento6updateEm+0x1004>
    64e0:	f1 01       	movw	r30, r2
    64e2:	ee 0f       	add	r30, r30
    64e4:	ff 1f       	adc	r31, r31
    64e6:	e2 0d       	add	r30, r2
    64e8:	f3 1d       	adc	r31, r3
    64ea:	ee 0f       	add	r30, r30
    64ec:	ff 1f       	adc	r31, r31
    64ee:	ee 0f       	add	r30, r30
    64f0:	ff 1f       	adc	r31, r31
    64f2:	e6 0d       	add	r30, r6
    64f4:	f7 1d       	adc	r31, r7
    64f6:	e8 5c       	subi	r30, 0xC8	; 200
    64f8:	fe 4f       	sbci	r31, 0xFE	; 254
    64fa:	e0 80       	ld	r14, Z
    64fc:	f1 80       	ldd	r15, Z+1	; 0x01
    64fe:	02 81       	ldd	r16, Z+2	; 0x02
    6500:	13 81       	ldd	r17, Z+3	; 0x03
    6502:	24 81       	ldd	r18, Z+4	; 0x04
    6504:	35 81       	ldd	r19, Z+5	; 0x05
    6506:	46 81       	ldd	r20, Z+6	; 0x06
    6508:	57 81       	ldd	r21, Z+7	; 0x07
    650a:	60 85       	ldd	r22, Z+8	; 0x08
    650c:	71 85       	ldd	r23, Z+9	; 0x09
    650e:	82 85       	ldd	r24, Z+10	; 0x0a
    6510:	93 85       	ldd	r25, Z+11	; 0x0b
    6512:	0e 94 98 6b 	call	0xd730	; 0xd730 <_Z6xyz2xz7COORD3D>
    6516:	cf 5a       	subi	r28, 0xAF	; 175
    6518:	de 4f       	sbci	r29, 0xFE	; 254
    651a:	28 83       	st	Y, r18
    651c:	c1 55       	subi	r28, 0x51	; 81
    651e:	d1 40       	sbci	r29, 0x01	; 1
    6520:	ce 5a       	subi	r28, 0xAE	; 174
    6522:	de 4f       	sbci	r29, 0xFE	; 254
    6524:	38 83       	st	Y, r19
    6526:	c2 55       	subi	r28, 0x52	; 82
    6528:	d1 40       	sbci	r29, 0x01	; 1
    652a:	cd 5a       	subi	r28, 0xAD	; 173
    652c:	de 4f       	sbci	r29, 0xFE	; 254
    652e:	48 83       	st	Y, r20
    6530:	c3 55       	subi	r28, 0x53	; 83
    6532:	d1 40       	sbci	r29, 0x01	; 1
    6534:	cc 5a       	subi	r28, 0xAC	; 172
    6536:	de 4f       	sbci	r29, 0xFE	; 254
    6538:	58 83       	st	Y, r21
    653a:	c4 55       	subi	r28, 0x54	; 84
    653c:	d1 40       	sbci	r29, 0x01	; 1
    653e:	cb 5a       	subi	r28, 0xAB	; 171
    6540:	de 4f       	sbci	r29, 0xFE	; 254
    6542:	68 83       	st	Y, r22
    6544:	c5 55       	subi	r28, 0x55	; 85
    6546:	d1 40       	sbci	r29, 0x01	; 1
    6548:	ca 5a       	subi	r28, 0xAA	; 170
    654a:	de 4f       	sbci	r29, 0xFE	; 254
    654c:	78 83       	st	Y, r23
    654e:	c6 55       	subi	r28, 0x56	; 86
    6550:	d1 40       	sbci	r29, 0x01	; 1
    6552:	c9 5a       	subi	r28, 0xA9	; 169
    6554:	de 4f       	sbci	r29, 0xFE	; 254
    6556:	88 83       	st	Y, r24
    6558:	c7 55       	subi	r28, 0x57	; 87
    655a:	d1 40       	sbci	r29, 0x01	; 1
    655c:	c8 5a       	subi	r28, 0xA8	; 168
    655e:	de 4f       	sbci	r29, 0xFE	; 254
    6560:	98 83       	st	Y, r25
    6562:	c8 55       	subi	r28, 0x58	; 88
    6564:	d1 40       	sbci	r29, 0x01	; 1
    6566:	de 01       	movw	r26, r28
    6568:	af 59       	subi	r26, 0x9F	; 159
    656a:	bf 4f       	sbci	r27, 0xFF	; 255
    656c:	fe 01       	movw	r30, r28
    656e:	ef 5a       	subi	r30, 0xAF	; 175
    6570:	fe 4f       	sbci	r31, 0xFE	; 254
    6572:	88 e0       	ldi	r24, 0x08	; 8
    6574:	01 90       	ld	r0, Z+
    6576:	0d 92       	st	X+, r0
    6578:	81 50       	subi	r24, 0x01	; 1
    657a:	e1 f7       	brne	.-8      	; 0x6574 <_ZN10Movimiento6updateEm+0x10a0>
    657c:	fe 01       	movw	r30, r28
    657e:	e7 5a       	subi	r30, 0xA7	; 167
    6580:	ff 4f       	sbci	r31, 0xFF	; 255
    6582:	de 01       	movw	r26, r28
    6584:	af 59       	subi	r26, 0x9F	; 159
    6586:	bf 4f       	sbci	r27, 0xFF	; 255
    6588:	20 81       	ld	r18, Z
    658a:	31 81       	ldd	r19, Z+1	; 0x01
    658c:	42 81       	ldd	r20, Z+2	; 0x02
    658e:	53 81       	ldd	r21, Z+3	; 0x03
    6590:	64 81       	ldd	r22, Z+4	; 0x04
    6592:	75 81       	ldd	r23, Z+5	; 0x05
    6594:	86 81       	ldd	r24, Z+6	; 0x06
    6596:	97 81       	ldd	r25, Z+7	; 0x07
    6598:	ac 90       	ld	r10, X
    659a:	11 96       	adiw	r26, 0x01	; 1
    659c:	bc 90       	ld	r11, X
    659e:	11 97       	sbiw	r26, 0x01	; 1
    65a0:	12 96       	adiw	r26, 0x02	; 2
    65a2:	cc 90       	ld	r12, X
    65a4:	12 97       	sbiw	r26, 0x02	; 2
    65a6:	13 96       	adiw	r26, 0x03	; 3
    65a8:	dc 90       	ld	r13, X
    65aa:	13 97       	sbiw	r26, 0x03	; 3
    65ac:	14 96       	adiw	r26, 0x04	; 4
    65ae:	ec 90       	ld	r14, X
    65b0:	14 97       	sbiw	r26, 0x04	; 4
    65b2:	15 96       	adiw	r26, 0x05	; 5
    65b4:	fc 90       	ld	r15, X
    65b6:	15 97       	sbiw	r26, 0x05	; 5
    65b8:	16 96       	adiw	r26, 0x06	; 6
    65ba:	0c 91       	ld	r16, X
    65bc:	16 97       	sbiw	r26, 0x06	; 6
    65be:	17 96       	adiw	r26, 0x07	; 7
    65c0:	1c 91       	ld	r17, X
    65c2:	0e 94 84 69 	call	0xd308	; 0xd308 <_Z4suma7COORD2DS_>
    65c6:	cf 5a       	subi	r28, 0xAF	; 175
    65c8:	de 4f       	sbci	r29, 0xFE	; 254
    65ca:	28 83       	st	Y, r18
    65cc:	c1 55       	subi	r28, 0x51	; 81
    65ce:	d1 40       	sbci	r29, 0x01	; 1
    65d0:	ce 5a       	subi	r28, 0xAE	; 174
    65d2:	de 4f       	sbci	r29, 0xFE	; 254
    65d4:	38 83       	st	Y, r19
    65d6:	c2 55       	subi	r28, 0x52	; 82
    65d8:	d1 40       	sbci	r29, 0x01	; 1
    65da:	cd 5a       	subi	r28, 0xAD	; 173
    65dc:	de 4f       	sbci	r29, 0xFE	; 254
    65de:	48 83       	st	Y, r20
    65e0:	c3 55       	subi	r28, 0x53	; 83
    65e2:	d1 40       	sbci	r29, 0x01	; 1
    65e4:	cc 5a       	subi	r28, 0xAC	; 172
    65e6:	de 4f       	sbci	r29, 0xFE	; 254
    65e8:	58 83       	st	Y, r21
    65ea:	c4 55       	subi	r28, 0x54	; 84
    65ec:	d1 40       	sbci	r29, 0x01	; 1
    65ee:	cb 5a       	subi	r28, 0xAB	; 171
    65f0:	de 4f       	sbci	r29, 0xFE	; 254
    65f2:	68 83       	st	Y, r22
    65f4:	c5 55       	subi	r28, 0x55	; 85
    65f6:	d1 40       	sbci	r29, 0x01	; 1
    65f8:	ca 5a       	subi	r28, 0xAA	; 170
    65fa:	de 4f       	sbci	r29, 0xFE	; 254
    65fc:	78 83       	st	Y, r23
    65fe:	c6 55       	subi	r28, 0x56	; 86
    6600:	d1 40       	sbci	r29, 0x01	; 1
    6602:	c9 5a       	subi	r28, 0xA9	; 169
    6604:	de 4f       	sbci	r29, 0xFE	; 254
    6606:	88 83       	st	Y, r24
    6608:	c7 55       	subi	r28, 0x57	; 87
    660a:	d1 40       	sbci	r29, 0x01	; 1
    660c:	c8 5a       	subi	r28, 0xA8	; 168
    660e:	de 4f       	sbci	r29, 0xFE	; 254
    6610:	98 83       	st	Y, r25
    6612:	c8 55       	subi	r28, 0x58	; 88
    6614:	d1 40       	sbci	r29, 0x01	; 1
    6616:	de 01       	movw	r26, r28
    6618:	af 58       	subi	r26, 0x8F	; 143
    661a:	bf 4f       	sbci	r27, 0xFF	; 255
    661c:	fe 01       	movw	r30, r28
    661e:	ef 5a       	subi	r30, 0xAF	; 175
    6620:	fe 4f       	sbci	r31, 0xFE	; 254
    6622:	88 e0       	ldi	r24, 0x08	; 8
    6624:	01 90       	ld	r0, Z+
    6626:	0d 92       	st	X+, r0
    6628:	81 50       	subi	r24, 0x01	; 1
    662a:	e1 f7       	brne	.-8      	; 0x6624 <_ZN10Movimiento6updateEm+0x1150>
									}
								} 
								
								// pasito
			//				pasito (1<<pata, (COORD3D) {C.x, wk.rt.pos_ref[pata].y, C.z}, true, 0, sh.mv.escala*wk.mv.duracion_pasos, sh.mv.nsegmentos, suma(wk.rt.pos_ref[pata], (COORD3D){0,wk.mv.altura_pasito,0}));
								pasito (1<<pata, h_correct(C, pata), true, 0, sh.mv.escala*wk.mv.duracion_pasos, sh.mv.nsegmentos, suma(wk.rt.pos_ref[pata], (COORD3D){0,wk.mv.altura_pasito,0}));
    662c:	ce 01       	movw	r24, r28
    662e:	8f 52       	subi	r24, 0x2F	; 47
    6630:	9f 4f       	sbci	r25, 0xFF	; 255
    6632:	b3 01       	movw	r22, r6
    6634:	e2 96       	adiw	r28, 0x32	; 50
    6636:	ef ac       	ldd	r14, Y+63	; 0x3f
    6638:	e2 97       	sbiw	r28, 0x32	; 50
    663a:	e3 96       	adiw	r28, 0x33	; 51
    663c:	ff ac       	ldd	r15, Y+63	; 0x3f
    663e:	e3 97       	sbiw	r28, 0x33	; 51
    6640:	e4 96       	adiw	r28, 0x34	; 52
    6642:	0f ad       	ldd	r16, Y+63	; 0x3f
    6644:	e4 97       	sbiw	r28, 0x34	; 52
    6646:	e5 96       	adiw	r28, 0x35	; 53
    6648:	1f ad       	ldd	r17, Y+63	; 0x3f
    664a:	e5 97       	sbiw	r28, 0x35	; 53
    664c:	e6 96       	adiw	r28, 0x36	; 54
    664e:	2f ad       	ldd	r18, Y+63	; 0x3f
    6650:	e6 97       	sbiw	r28, 0x36	; 54
    6652:	e7 96       	adiw	r28, 0x37	; 55
    6654:	3f ad       	ldd	r19, Y+63	; 0x3f
    6656:	e7 97       	sbiw	r28, 0x37	; 55
    6658:	e8 96       	adiw	r28, 0x38	; 56
    665a:	4f ad       	ldd	r20, Y+63	; 0x3f
    665c:	e8 97       	sbiw	r28, 0x38	; 56
    665e:	e9 96       	adiw	r28, 0x39	; 57
    6660:	5f ad       	ldd	r21, Y+63	; 0x3f
    6662:	e9 97       	sbiw	r28, 0x39	; 57
    6664:	c9 2c       	mov	r12, r9
    6666:	0e 94 bf 29 	call	0x537e	; 0x537e <_ZN10Movimiento9h_correctE7COORD2Dh>
    666a:	cd 58       	subi	r28, 0x8D	; 141
    666c:	de 4f       	sbci	r29, 0xFE	; 254
    666e:	a8 81       	ld	r26, Y
    6670:	b9 81       	ldd	r27, Y+1	; 0x01
    6672:	c3 57       	subi	r28, 0x73	; 115
    6674:	d1 40       	sbci	r29, 0x01	; 1
    6676:	8c 91       	ld	r24, X
    6678:	90 e0       	ldi	r25, 0x00	; 0
    667a:	cb 58       	subi	r28, 0x8B	; 139
    667c:	de 4f       	sbci	r29, 0xFE	; 254
    667e:	e8 81       	ld	r30, Y
    6680:	f9 81       	ldd	r31, Y+1	; 0x01
    6682:	c5 57       	subi	r28, 0x75	; 117
    6684:	d1 40       	sbci	r29, 0x01	; 1
    6686:	20 81       	ld	r18, Z
    6688:	31 81       	ldd	r19, Z+1	; 0x01
    668a:	82 9f       	mul	r24, r18
    668c:	50 01       	movw	r10, r0
    668e:	83 9f       	mul	r24, r19
    6690:	b0 0c       	add	r11, r0
    6692:	92 9f       	mul	r25, r18
    6694:	b0 0c       	add	r11, r0
    6696:	11 24       	eor	r1, r1
    6698:	c9 58       	subi	r28, 0x89	; 137
    669a:	de 4f       	sbci	r29, 0xFE	; 254
    669c:	a8 81       	ld	r26, Y
    669e:	b9 81       	ldd	r27, Y+1	; 0x01
    66a0:	c7 57       	subi	r28, 0x77	; 119
    66a2:	d1 40       	sbci	r29, 0x01	; 1
    66a4:	9c 90       	ld	r9, X
    66a6:	c7 58       	subi	r28, 0x87	; 135
    66a8:	de 4f       	sbci	r29, 0xFE	; 254
    66aa:	e8 81       	ld	r30, Y
    66ac:	f9 81       	ldd	r31, Y+1	; 0x01
    66ae:	c9 57       	subi	r28, 0x79	; 121
    66b0:	d1 40       	sbci	r29, 0x01	; 1
    66b2:	20 81       	ld	r18, Z
    66b4:	31 81       	ldd	r19, Z+1	; 0x01
    66b6:	42 81       	ldd	r20, Z+2	; 0x02
    66b8:	53 81       	ldd	r21, Z+3	; 0x03
    66ba:	80 e0       	ldi	r24, 0x00	; 0
    66bc:	90 e0       	ldi	r25, 0x00	; 0
    66be:	a0 e0       	ldi	r26, 0x00	; 0
    66c0:	b0 e0       	ldi	r27, 0x00	; 0
    66c2:	c3 52       	subi	r28, 0x23	; 35
    66c4:	df 4f       	sbci	r29, 0xFF	; 255
    66c6:	88 83       	st	Y, r24
    66c8:	99 83       	std	Y+1, r25	; 0x01
    66ca:	aa 83       	std	Y+2, r26	; 0x02
    66cc:	bb 83       	std	Y+3, r27	; 0x03
    66ce:	cd 5d       	subi	r28, 0xDD	; 221
    66d0:	d0 40       	sbci	r29, 0x00	; 0
    66d2:	cf 51       	subi	r28, 0x1F	; 31
    66d4:	df 4f       	sbci	r29, 0xFF	; 255
    66d6:	28 83       	st	Y, r18
    66d8:	39 83       	std	Y+1, r19	; 0x01
    66da:	4a 83       	std	Y+2, r20	; 0x02
    66dc:	5b 83       	std	Y+3, r21	; 0x03
    66de:	c1 5e       	subi	r28, 0xE1	; 225
    66e0:	d0 40       	sbci	r29, 0x00	; 0
    66e2:	cb 51       	subi	r28, 0x1B	; 27
    66e4:	df 4f       	sbci	r29, 0xFF	; 255
    66e6:	88 83       	st	Y, r24
    66e8:	99 83       	std	Y+1, r25	; 0x01
    66ea:	aa 83       	std	Y+2, r26	; 0x02
    66ec:	bb 83       	std	Y+3, r27	; 0x03
    66ee:	c5 5e       	subi	r28, 0xE5	; 229
    66f0:	d0 40       	sbci	r29, 0x00	; 0
    66f2:	2d b7       	in	r18, 0x3d	; 61
    66f4:	3e b7       	in	r19, 0x3e	; 62
    66f6:	2c 50       	subi	r18, 0x0C	; 12
    66f8:	30 40       	sbci	r19, 0x00	; 0
    66fa:	0f b6       	in	r0, 0x3f	; 63
    66fc:	f8 94       	cli
    66fe:	3e bf       	out	0x3e, r19	; 62
    6700:	0f be       	out	0x3f, r0	; 63
    6702:	2d bf       	out	0x3d, r18	; 61
    6704:	f1 01       	movw	r30, r2
    6706:	ee 0f       	add	r30, r30
    6708:	ff 1f       	adc	r31, r31
    670a:	e2 0d       	add	r30, r2
    670c:	f3 1d       	adc	r31, r3
    670e:	ee 0f       	add	r30, r30
    6710:	ff 1f       	adc	r31, r31
    6712:	ee 0f       	add	r30, r30
    6714:	ff 1f       	adc	r31, r31
    6716:	e6 0d       	add	r30, r6
    6718:	f7 1d       	adc	r31, r7
    671a:	e8 5c       	subi	r30, 0xC8	; 200
    671c:	fe 4f       	sbci	r31, 0xFE	; 254
    671e:	2f 5f       	subi	r18, 0xFF	; 255
    6720:	3f 4f       	sbci	r19, 0xFF	; 255
    6722:	ae 01       	movw	r20, r28
    6724:	43 52       	subi	r20, 0x23	; 35
    6726:	5f 4f       	sbci	r21, 0xFF	; 255
    6728:	8c e0       	ldi	r24, 0x0C	; 12
    672a:	da 01       	movw	r26, r20
    672c:	0d 90       	ld	r0, X+
    672e:	ad 01       	movw	r20, r26
    6730:	d9 01       	movw	r26, r18
    6732:	0d 92       	st	X+, r0
    6734:	9d 01       	movw	r18, r26
    6736:	81 50       	subi	r24, 0x01	; 1
    6738:	c1 f7       	brne	.-16     	; 0x672a <_ZN10Movimiento6updateEm+0x1256>
    673a:	ce 01       	movw	r24, r28
    673c:	87 51       	subi	r24, 0x17	; 23
    673e:	9f 4f       	sbci	r25, 0xFF	; 255
    6740:	c0 80       	ld	r12, Z
    6742:	d1 80       	ldd	r13, Z+1	; 0x01
    6744:	e2 80       	ldd	r14, Z+2	; 0x02
    6746:	f3 80       	ldd	r15, Z+3	; 0x03
    6748:	04 81       	ldd	r16, Z+4	; 0x04
    674a:	15 81       	ldd	r17, Z+5	; 0x05
    674c:	26 81       	ldd	r18, Z+6	; 0x06
    674e:	37 81       	ldd	r19, Z+7	; 0x07
    6750:	40 85       	ldd	r20, Z+8	; 0x08
    6752:	51 85       	ldd	r21, Z+9	; 0x09
    6754:	62 85       	ldd	r22, Z+10	; 0x0a
    6756:	73 85       	ldd	r23, Z+11	; 0x0b
    6758:	0e 94 1c 69 	call	0xd238	; 0xd238 <_Z4suma7COORD3DS_>
    675c:	ed b7       	in	r30, 0x3d	; 61
    675e:	fe b7       	in	r31, 0x3e	; 62
    6760:	37 97       	sbiw	r30, 0x07	; 7
    6762:	0f b6       	in	r0, 0x3f	; 63
    6764:	f8 94       	cli
    6766:	fe bf       	out	0x3e, r31	; 62
    6768:	0f be       	out	0x3f, r0	; 63
    676a:	ed bf       	out	0x3d, r30	; 61
    676c:	31 96       	adiw	r30, 0x01	; 1
    676e:	61 e0       	ldi	r22, 0x01	; 1
    6770:	70 e0       	ldi	r23, 0x00	; 0
    6772:	02 2c       	mov	r0, r2
    6774:	02 c0       	rjmp	.+4      	; 0x677a <_ZN10Movimiento6updateEm+0x12a6>
    6776:	66 0f       	add	r22, r22
    6778:	77 1f       	adc	r23, r23
    677a:	0a 94       	dec	r0
    677c:	e2 f7       	brpl	.-8      	; 0x6776 <_ZN10Movimiento6updateEm+0x12a2>
    677e:	20 e0       	ldi	r18, 0x00	; 0
    6780:	30 e0       	ldi	r19, 0x00	; 0
    6782:	40 e0       	ldi	r20, 0x00	; 0
    6784:	50 e0       	ldi	r21, 0x00	; 0
    6786:	ad b7       	in	r26, 0x3d	; 61
    6788:	be b7       	in	r27, 0x3e	; 62
    678a:	11 96       	adiw	r26, 0x01	; 1
    678c:	2d 93       	st	X+, r18
    678e:	3d 93       	st	X+, r19
    6790:	4d 93       	st	X+, r20
    6792:	5c 93       	st	X, r21
    6794:	14 97       	sbiw	r26, 0x04	; 4
    6796:	b5 82       	std	Z+5, r11	; 0x05
    6798:	a4 82       	std	Z+4, r10	; 0x04
    679a:	96 82       	std	Z+6, r9	; 0x06
    679c:	18 96       	adiw	r26, 0x08	; 8
    679e:	fe 01       	movw	r30, r28
    67a0:	e7 51       	subi	r30, 0x17	; 23
    67a2:	ff 4f       	sbci	r31, 0xFF	; 255
    67a4:	8c e0       	ldi	r24, 0x0C	; 12
    67a6:	01 90       	ld	r0, Z+
    67a8:	0d 92       	st	X+, r0
    67aa:	81 50       	subi	r24, 0x01	; 1
    67ac:	e1 f7       	brne	.-8      	; 0x67a6 <_ZN10Movimiento6updateEm+0x12d2>
    67ae:	c3 01       	movw	r24, r6
    67b0:	cf 52       	subi	r28, 0x2F	; 47
    67b2:	df 4f       	sbci	r29, 0xFF	; 255
    67b4:	a8 80       	ld	r10, Y
    67b6:	c1 5d       	subi	r28, 0xD1	; 209
    67b8:	d0 40       	sbci	r29, 0x00	; 0
    67ba:	ce 52       	subi	r28, 0x2E	; 46
    67bc:	df 4f       	sbci	r29, 0xFF	; 255
    67be:	b8 80       	ld	r11, Y
    67c0:	c2 5d       	subi	r28, 0xD2	; 210
    67c2:	d0 40       	sbci	r29, 0x00	; 0
    67c4:	cd 52       	subi	r28, 0x2D	; 45
    67c6:	df 4f       	sbci	r29, 0xFF	; 255
    67c8:	c8 80       	ld	r12, Y
    67ca:	c3 5d       	subi	r28, 0xD3	; 211
    67cc:	d0 40       	sbci	r29, 0x00	; 0
    67ce:	cc 52       	subi	r28, 0x2C	; 44
    67d0:	df 4f       	sbci	r29, 0xFF	; 255
    67d2:	d8 80       	ld	r13, Y
    67d4:	c4 5d       	subi	r28, 0xD4	; 212
    67d6:	d0 40       	sbci	r29, 0x00	; 0
    67d8:	cb 52       	subi	r28, 0x2B	; 43
    67da:	df 4f       	sbci	r29, 0xFF	; 255
    67dc:	e8 80       	ld	r14, Y
    67de:	c5 5d       	subi	r28, 0xD5	; 213
    67e0:	d0 40       	sbci	r29, 0x00	; 0
    67e2:	ca 52       	subi	r28, 0x2A	; 42
    67e4:	df 4f       	sbci	r29, 0xFF	; 255
    67e6:	f8 80       	ld	r15, Y
    67e8:	c6 5d       	subi	r28, 0xD6	; 214
    67ea:	d0 40       	sbci	r29, 0x00	; 0
    67ec:	c9 52       	subi	r28, 0x29	; 41
    67ee:	df 4f       	sbci	r29, 0xFF	; 255
    67f0:	08 81       	ld	r16, Y
    67f2:	c7 5d       	subi	r28, 0xD7	; 215
    67f4:	d0 40       	sbci	r29, 0x00	; 0
    67f6:	c8 52       	subi	r28, 0x28	; 40
    67f8:	df 4f       	sbci	r29, 0xFF	; 255
    67fa:	18 81       	ld	r17, Y
    67fc:	c8 5d       	subi	r28, 0xD8	; 216
    67fe:	d0 40       	sbci	r29, 0x00	; 0
    6800:	c7 52       	subi	r28, 0x27	; 39
    6802:	df 4f       	sbci	r29, 0xFF	; 255
    6804:	28 81       	ld	r18, Y
    6806:	c9 5d       	subi	r28, 0xD9	; 217
    6808:	d0 40       	sbci	r29, 0x00	; 0
    680a:	c6 52       	subi	r28, 0x26	; 38
    680c:	df 4f       	sbci	r29, 0xFF	; 255
    680e:	38 81       	ld	r19, Y
    6810:	ca 5d       	subi	r28, 0xDA	; 218
    6812:	d0 40       	sbci	r29, 0x00	; 0
    6814:	c5 52       	subi	r28, 0x25	; 37
    6816:	df 4f       	sbci	r29, 0xFF	; 255
    6818:	48 81       	ld	r20, Y
    681a:	cb 5d       	subi	r28, 0xDB	; 219
    681c:	d0 40       	sbci	r29, 0x00	; 0
    681e:	c4 52       	subi	r28, 0x24	; 36
    6820:	df 4f       	sbci	r29, 0xFF	; 255
    6822:	58 81       	ld	r21, Y
    6824:	cc 5d       	subi	r28, 0xDC	; 220
    6826:	d0 40       	sbci	r29, 0x00	; 0
    6828:	88 24       	eor	r8, r8
    682a:	83 94       	inc	r8
    682c:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <_ZN10Movimiento6pasitoEh7COORD3DbfihS0_>
    6830:	ed b7       	in	r30, 0x3d	; 61
    6832:	fe b7       	in	r31, 0x3e	; 62
    6834:	73 96       	adiw	r30, 0x13	; 19
    6836:	0f b6       	in	r0, 0x3f	; 63
    6838:	f8 94       	cli
    683a:	fe bf       	out	0x3e, r31	; 62
    683c:	0f be       	out	0x3f, r0	; 63
    683e:	ed bf       	out	0x3d, r30	; 61
    6840:	08 94       	sec
    6842:	21 1c       	adc	r2, r1
    6844:	31 1c       	adc	r3, r1
					}
					
					// tratamiento de los "pasitos"
					if ((sh.cn.tick%wk.mv.periodo_sub_ciclo)-wk.mv.periodo_pasos*(wk.rt.index%wk.mv.agrupamiento) == 0) {
									
						for (byte pata=0; pata<6; pata++) {
    6846:	f6 e0       	ldi	r31, 0x06	; 6
    6848:	2f 16       	cp	r2, r31
    684a:	31 04       	cpc	r3, r1
    684c:	11 f0       	breq	.+4      	; 0x6852 <_ZN10Movimiento6updateEm+0x137e>
    684e:	0c 94 d5 2b 	jmp	0x57aa	; 0x57aa <_ZN10Movimiento6updateEm+0x2d6>
			//				pasito (1<<pata, (COORD3D) {C.x, wk.rt.pos_ref[pata].y, C.z}, true, 0, sh.mv.escala*wk.mv.duracion_pasos, sh.mv.nsegmentos, suma(wk.rt.pos_ref[pata], (COORD3D){0,wk.mv.altura_pasito,0}));
								pasito (1<<pata, h_correct(C, pata), true, 0, sh.mv.escala*wk.mv.duracion_pasos, sh.mv.nsegmentos, suma(wk.rt.pos_ref[pata], (COORD3D){0,wk.mv.altura_pasito,0}));
							}
						}
				
						wk.rt.counter[wk.rt.index] = wk.mv.duracion_pasos;
    6852:	83 01       	movw	r16, r6
    6854:	00 58       	subi	r16, 0x80	; 128
    6856:	1e 4f       	sbci	r17, 0xFE	; 254
    6858:	d8 01       	movw	r26, r16
    685a:	8c 91       	ld	r24, X
    685c:	90 e0       	ldi	r25, 0x00	; 0
    685e:	f3 01       	movw	r30, r6
    6860:	e8 0f       	add	r30, r24
    6862:	f9 1f       	adc	r31, r25
    6864:	ee 57       	subi	r30, 0x7E	; 126
    6866:	fe 4f       	sbci	r31, 0xFE	; 254
    6868:	21 ec       	ldi	r18, 0xC1	; 193
    686a:	30 e0       	ldi	r19, 0x00	; 0
    686c:	62 0e       	add	r6, r18
    686e:	73 1e       	adc	r7, r19
    6870:	d3 01       	movw	r26, r6
    6872:	2c 91       	ld	r18, X
    6874:	20 83       	st	Z, r18
						wk.rt.index = (wk.rt.index+1)%wk.mv.fases;
    6876:	ea ef       	ldi	r30, 0xFA	; 250
    6878:	ff ef       	ldi	r31, 0xFF	; 255
    687a:	6e 0e       	add	r6, r30
    687c:	7f 1e       	adc	r7, r31
    687e:	d3 01       	movw	r26, r6
    6880:	6c 91       	ld	r22, X
    6882:	e5 e4       	ldi	r30, 0x45	; 69
    6884:	ff ef       	ldi	r31, 0xFF	; 255
    6886:	6e 0e       	add	r6, r30
    6888:	7f 1e       	adc	r7, r31
    688a:	01 96       	adiw	r24, 0x01	; 1
    688c:	70 e0       	ldi	r23, 0x00	; 0
    688e:	0e 94 1f 81 	call	0x1023e	; 0x1023e <__divmodhi4>
    6892:	d8 01       	movw	r26, r16
    6894:	8c 93       	st	X, r24
					}
					
					// determinación de las patas apoyadas
					wk.rt.apoyadas = 0;
    6896:	f3 01       	movw	r30, r6
    6898:	ef 57       	subi	r30, 0x7F	; 127
    689a:	fe 4f       	sbci	r31, 0xFE	; 254
    689c:	10 82       	st	Z, r1
    689e:	20 e0       	ldi	r18, 0x00	; 0
					for (byte i=0; i<wk.mv.fases; i++) {
    68a0:	b3 01       	movw	r22, r6
    68a2:	65 54       	subi	r22, 0x45	; 69
    68a4:	7f 4f       	sbci	r23, 0xFF	; 255
						if (wk.rt.counter[i] > 0) {wk.rt.counter[i]--;} else {wk.rt.apoyadas += wk.mv.secuencia[i];} // cuando counter[i]=0, el conjunto de patas correspondiente está apoyado
    68a6:	af 01       	movw	r20, r30
    68a8:	13 c0       	rjmp	.+38     	; 0x68d0 <_ZN10Movimiento6updateEm+0x13fc>
    68aa:	d3 01       	movw	r26, r6
    68ac:	a2 0f       	add	r26, r18
    68ae:	b1 1d       	adc	r27, r1
    68b0:	fd 01       	movw	r30, r26
    68b2:	ee 57       	subi	r30, 0x7E	; 126
    68b4:	fe 4f       	sbci	r31, 0xFE	; 254
    68b6:	80 81       	ld	r24, Z
    68b8:	88 23       	and	r24, r24
    68ba:	11 f0       	breq	.+4      	; 0x68c0 <_ZN10Movimiento6updateEm+0x13ec>
    68bc:	81 50       	subi	r24, 0x01	; 1
    68be:	06 c0       	rjmp	.+12     	; 0x68cc <_ZN10Movimiento6updateEm+0x13f8>
    68c0:	ab 54       	subi	r26, 0x4B	; 75
    68c2:	bf 4f       	sbci	r27, 0xFF	; 255
    68c4:	8c 91       	ld	r24, X
    68c6:	fa 01       	movw	r30, r20
    68c8:	90 81       	ld	r25, Z
    68ca:	89 0f       	add	r24, r25
    68cc:	80 83       	st	Z, r24
						wk.rt.index = (wk.rt.index+1)%wk.mv.fases;
					}
					
					// determinación de las patas apoyadas
					wk.rt.apoyadas = 0;
					for (byte i=0; i<wk.mv.fases; i++) {
    68ce:	2f 5f       	subi	r18, 0xFF	; 255
    68d0:	db 01       	movw	r26, r22
    68d2:	8c 91       	ld	r24, X
    68d4:	28 17       	cp	r18, r24
    68d6:	48 f3       	brcs	.-46     	; 0x68aa <_ZN10Movimiento6updateEm+0x13d6>
						if (wk.rt.counter[i] > 0) {wk.rt.counter[i]--;} else {wk.rt.apoyadas += wk.mv.secuencia[i];} // cuando counter[i]=0, el conjunto de patas correspondiente está apoyado
					}
					
					// aplicación del movimiento continuo del cuerpo (micropasos)
					if (wk.mv.rotacion == 0) {
    68d8:	f3 01       	movw	r30, r6
    68da:	ef 54       	subi	r30, 0x4F	; 79
    68dc:	ff 4f       	sbci	r31, 0xFF	; 255
    68de:	60 81       	ld	r22, Z
    68e0:	71 81       	ldd	r23, Z+1	; 0x01
    68e2:	82 81       	ldd	r24, Z+2	; 0x02
    68e4:	93 81       	ldd	r25, Z+3	; 0x03
    68e6:	20 e0       	ldi	r18, 0x00	; 0
    68e8:	30 e0       	ldi	r19, 0x00	; 0
    68ea:	40 e0       	ldi	r20, 0x00	; 0
    68ec:	50 e0       	ldi	r21, 0x00	; 0
    68ee:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    68f2:	88 23       	and	r24, r24
    68f4:	09 f0       	breq	.+2      	; 0x68f8 <_ZN10Movimiento6updateEm+0x1424>
    68f6:	7d c0       	rjmp	.+250    	; 0x69f2 <_ZN10Movimiento6updateEm+0x151e>
						// traslación
	//				eventos.add ((MOVDATA) {wk.rt.apoyadas, xz2xyz (wk.mv.vector), sh.mv.escala, false}, 0);
						eventos.add ((MOVDATA) {wk.rt.apoyadas, h_correct (wk.mv.vector), sh.mv.escala, false}, 0);
    68f8:	e1 e8       	ldi	r30, 0x81	; 129
    68fa:	f1 e0       	ldi	r31, 0x01	; 1
    68fc:	6e 0e       	add	r6, r30
    68fe:	7f 1e       	adc	r7, r31
    6900:	d3 01       	movw	r26, r6
    6902:	bc 90       	ld	r11, X
    6904:	ef e7       	ldi	r30, 0x7F	; 127
    6906:	fe ef       	ldi	r31, 0xFE	; 254
    6908:	6e 0e       	add	r6, r30
    690a:	7f 1e       	adc	r7, r31
    690c:	75 ef       	ldi	r23, 0xF5	; 245
    690e:	c7 2e       	mov	r12, r23
    6910:	d1 2c       	mov	r13, r1
    6912:	cc 0e       	add	r12, r28
    6914:	dd 1e       	adc	r13, r29
    6916:	f3 01       	movw	r30, r6
    6918:	e7 55       	subi	r30, 0x57	; 87
    691a:	ff 4f       	sbci	r31, 0xFF	; 255
    691c:	c6 01       	movw	r24, r12
    691e:	b3 01       	movw	r22, r6
    6920:	e0 80       	ld	r14, Z
    6922:	f1 80       	ldd	r15, Z+1	; 0x01
    6924:	02 81       	ldd	r16, Z+2	; 0x02
    6926:	13 81       	ldd	r17, Z+3	; 0x03
    6928:	24 81       	ldd	r18, Z+4	; 0x04
    692a:	35 81       	ldd	r19, Z+5	; 0x05
    692c:	46 81       	ldd	r20, Z+6	; 0x06
    692e:	57 81       	ldd	r21, Z+7	; 0x07
    6930:	0e 94 4b 29 	call	0x5296	; 0x5296 <_ZN10Movimiento9h_correctE7COORD2D>
    6934:	20 ee       	ldi	r18, 0xE0	; 224
    6936:	31 e0       	ldi	r19, 0x01	; 1
    6938:	62 0e       	add	r6, r18
    693a:	73 1e       	adc	r7, r19
    693c:	d3 01       	movw	r26, r6
    693e:	9c 91       	ld	r25, X
    6940:	e0 e2       	ldi	r30, 0x20	; 32
    6942:	fe ef       	ldi	r31, 0xFE	; 254
    6944:	6e 0e       	add	r6, r30
    6946:	7f 1e       	adc	r7, r31
    6948:	fe 01       	movw	r30, r28
    694a:	ef 5c       	subi	r30, 0xCF	; 207
    694c:	fe 4f       	sbci	r31, 0xFE	; 254
    694e:	80 e1       	ldi	r24, 0x10	; 16
    6950:	df 01       	movw	r26, r30
    6952:	1d 92       	st	X+, r1
    6954:	8a 95       	dec	r24
    6956:	e9 f7       	brne	.-6      	; 0x6952 <_ZN10Movimiento6updateEm+0x147e>
    6958:	31 96       	adiw	r30, 0x01	; 1
    695a:	d6 01       	movw	r26, r12
    695c:	8c e0       	ldi	r24, 0x0C	; 12
    695e:	0d 90       	ld	r0, X+
    6960:	01 92       	st	Z+, r0
    6962:	81 50       	subi	r24, 0x01	; 1
    6964:	e1 f7       	brne	.-8      	; 0x695e <_ZN10Movimiento6updateEm+0x148a>
    6966:	fe 01       	movw	r30, r28
    6968:	ef 5c       	subi	r30, 0xCF	; 207
    696a:	fe 4f       	sbci	r31, 0xFE	; 254
    696c:	b0 82       	st	Z, r11
    696e:	95 87       	std	Z+13, r25	; 0x0d
    6970:	16 86       	std	Z+14, r1	; 0x0e
    6972:	00 d0       	rcall	.+0      	; 0x6974 <_ZN10Movimiento6updateEm+0x14a0>
    6974:	ad b7       	in	r26, 0x3d	; 61
    6976:	be b7       	in	r27, 0x3e	; 62
    6978:	12 96       	adiw	r26, 0x02	; 2
    697a:	1c 92       	st	X, r1
    697c:	1e 92       	st	-X, r1
    697e:	11 97       	sbiw	r26, 0x01	; 1
    6980:	80 ed       	ldi	r24, 0xD0	; 208
    6982:	96 e0       	ldi	r25, 0x06	; 6
    6984:	80 80       	ld	r8, Z
    6986:	91 80       	ldd	r9, Z+1	; 0x01
    6988:	a2 80       	ldd	r10, Z+2	; 0x02
    698a:	b3 80       	ldd	r11, Z+3	; 0x03
    698c:	c4 80       	ldd	r12, Z+4	; 0x04
    698e:	d5 80       	ldd	r13, Z+5	; 0x05
    6990:	e6 80       	ldd	r14, Z+6	; 0x06
    6992:	f7 80       	ldd	r15, Z+7	; 0x07
    6994:	00 85       	ldd	r16, Z+8	; 0x08
    6996:	11 85       	ldd	r17, Z+9	; 0x09
    6998:	22 85       	ldd	r18, Z+10	; 0x0a
    699a:	33 85       	ldd	r19, Z+11	; 0x0b
    699c:	44 85       	ldd	r20, Z+12	; 0x0c
    699e:	55 85       	ldd	r21, Z+13	; 0x0d
    69a0:	66 85       	ldd	r22, Z+14	; 0x0e
    69a2:	77 85       	ldd	r23, Z+15	; 0x0f
    69a4:	0e 94 16 18 	call	0x302c	; 0x302c <_ZN6Events3addE7MOVDATAi>
						if (wk.rt.apoyadas) {
    69a8:	e1 e8       	ldi	r30, 0x81	; 129
    69aa:	f1 e0       	ldi	r31, 0x01	; 1
    69ac:	6e 0e       	add	r6, r30
    69ae:	7f 1e       	adc	r7, r31
    69b0:	0f 90       	pop	r0
    69b2:	0f 90       	pop	r0
    69b4:	d3 01       	movw	r26, r6
    69b6:	8c 91       	ld	r24, X
    69b8:	ef e7       	ldi	r30, 0x7F	; 127
    69ba:	fe ef       	ldi	r31, 0xFE	; 254
    69bc:	6e 0e       	add	r6, r30
    69be:	7f 1e       	adc	r7, r31
    69c0:	88 23       	and	r24, r24
    69c2:	09 f4       	brne	.+2      	; 0x69c6 <_ZN10Movimiento6updateEm+0x14f2>
    69c4:	49 c5       	rjmp	.+2706   	; 0x7458 <_ZN10Movimiento6updateEm+0x1f84>
							if (mon_desplazamiento != NULL) {sumasigna (mon_desplazamiento, wk.mv.vector);}   // monitor de desplazamiento
    69c6:	d3 01       	movw	r26, r6
    69c8:	12 96       	adiw	r26, 0x02	; 2
    69ca:	8d 91       	ld	r24, X+
    69cc:	9c 91       	ld	r25, X
    69ce:	13 97       	sbiw	r26, 0x03	; 3
    69d0:	00 97       	sbiw	r24, 0x00	; 0
    69d2:	09 f4       	brne	.+2      	; 0x69d6 <_ZN10Movimiento6updateEm+0x1502>
    69d4:	41 c5       	rjmp	.+2690   	; 0x7458 <_ZN10Movimiento6updateEm+0x1f84>
    69d6:	f3 01       	movw	r30, r6
    69d8:	e7 55       	subi	r30, 0x57	; 87
    69da:	ff 4f       	sbci	r31, 0xFF	; 255
    69dc:	00 81       	ld	r16, Z
    69de:	11 81       	ldd	r17, Z+1	; 0x01
    69e0:	22 81       	ldd	r18, Z+2	; 0x02
    69e2:	33 81       	ldd	r19, Z+3	; 0x03
    69e4:	44 81       	ldd	r20, Z+4	; 0x04
    69e6:	55 81       	ldd	r21, Z+5	; 0x05
    69e8:	66 81       	ldd	r22, Z+6	; 0x06
    69ea:	77 81       	ldd	r23, Z+7	; 0x07
    69ec:	0e 94 dc 6d 	call	0xdbb8	; 0xdbb8 <_Z9sumasignaP7COORD2DS_>
    69f0:	33 c5       	rjmp	.+2662   	; 0x7458 <_ZN10Movimiento6updateEm+0x1f84>
					} else {
						// rotación
						for (byte pata=0; pata<6; pata++) {
							if ((wk.rt.apoyadas>>pata)&1) {
								COORD2D O = getOffset (pata); // no usamos rel2abs/abs2rel por razones de eficiencia
								COORD2D C = resta (suma (applyMatrix (resta (suma (xyz2xz(pos_des[pata]), O), wk.mv.vector), wk.rt.rotor1), wk.mv.vector), O);
    69f2:	f3 01       	movw	r30, r6
    69f4:	e0 53       	subi	r30, 0x30	; 48
    69f6:	ff 4f       	sbci	r31, 0xFF	; 255
    69f8:	cf 59       	subi	r28, 0x9F	; 159
    69fa:	de 4f       	sbci	r29, 0xFE	; 254
    69fc:	f9 83       	std	Y+1, r31	; 0x01
    69fe:	e8 83       	st	Y, r30
    6a00:	c1 56       	subi	r28, 0x61	; 97
    6a02:	d1 40       	sbci	r29, 0x01	; 1
    6a04:	c5 5a       	subi	r28, 0xA5	; 165
    6a06:	de 4f       	sbci	r29, 0xFE	; 254
    6a08:	19 82       	std	Y+1, r1	; 0x01
    6a0a:	18 82       	st	Y, r1
    6a0c:	cb 55       	subi	r28, 0x5B	; 91
    6a0e:	d1 40       	sbci	r29, 0x01	; 1
							if (mon_desplazamiento != NULL) {sumasigna (mon_desplazamiento, wk.mv.vector);}   // monitor de desplazamiento
						}
					} else {
						// rotación
						for (byte pata=0; pata<6; pata++) {
							if ((wk.rt.apoyadas>>pata)&1) {
    6a10:	93 01       	movw	r18, r6
    6a12:	2f 57       	subi	r18, 0x7F	; 127
    6a14:	3e 4f       	sbci	r19, 0xFE	; 254
    6a16:	cb 59       	subi	r28, 0x9B	; 155
    6a18:	de 4f       	sbci	r29, 0xFE	; 254
    6a1a:	39 83       	std	Y+1, r19	; 0x01
    6a1c:	28 83       	st	Y, r18
    6a1e:	c5 56       	subi	r28, 0x65	; 101
    6a20:	d1 40       	sbci	r29, 0x01	; 1
								COORD2D O = getOffset (pata); // no usamos rel2abs/abs2rel por razones de eficiencia
								COORD2D C = resta (suma (applyMatrix (resta (suma (xyz2xz(pos_des[pata]), O), wk.mv.vector), wk.rt.rotor1), wk.mv.vector), O);
    6a22:	69 ea       	ldi	r22, 0xA9	; 169
    6a24:	46 2e       	mov	r4, r22
    6a26:	51 2c       	mov	r5, r1
    6a28:	46 0c       	add	r4, r6
    6a2a:	57 1c       	adc	r5, r7
		//					eventos.add ((MOVDATA) {1<<pata, (COORD3D) {C.x, pos_des[pata].y, C.z}, sh.mv.escala, true}, 0);
								eventos.add ((MOVDATA) {1<<pata, h_correct(C, pata), sh.mv.escala, true}, 0);
    6a2c:	a3 01       	movw	r20, r6
    6a2e:	40 52       	subi	r20, 0x20	; 32
    6a30:	5e 4f       	sbci	r21, 0xFE	; 254
    6a32:	c9 59       	subi	r28, 0x99	; 153
    6a34:	de 4f       	sbci	r29, 0xFE	; 254
    6a36:	59 83       	std	Y+1, r21	; 0x01
    6a38:	48 83       	st	Y, r20
    6a3a:	c7 56       	subi	r28, 0x67	; 103
    6a3c:	d1 40       	sbci	r29, 0x01	; 1
    6a3e:	51 e4       	ldi	r21, 0x41	; 65
    6a40:	25 2e       	mov	r2, r21
    6a42:	51 e0       	ldi	r21, 0x01	; 1
    6a44:	35 2e       	mov	r3, r21
    6a46:	2c 0e       	add	r2, r28
    6a48:	3d 1e       	adc	r3, r29
    6a4a:	b1 01       	movw	r22, r2
    6a4c:	6f 5f       	subi	r22, 0xFF	; 255
    6a4e:	7f 4f       	sbci	r23, 0xFF	; 255
    6a50:	c7 59       	subi	r28, 0x97	; 151
    6a52:	de 4f       	sbci	r29, 0xFE	; 254
    6a54:	79 83       	std	Y+1, r23	; 0x01
    6a56:	68 83       	st	Y, r22
    6a58:	c9 56       	subi	r28, 0x69	; 105
    6a5a:	d1 40       	sbci	r29, 0x01	; 1
					} else {
						// rotación
						for (byte pata=0; pata<6; pata++) {
							if ((wk.rt.apoyadas>>pata)&1) {
								COORD2D O = getOffset (pata); // no usamos rel2abs/abs2rel por razones de eficiencia
								COORD2D C = resta (suma (applyMatrix (resta (suma (xyz2xz(pos_des[pata]), O), wk.mv.vector), wk.rt.rotor1), wk.mv.vector), O);
    6a5c:	c5 5a       	subi	r28, 0xA5	; 165
    6a5e:	de 4f       	sbci	r29, 0xFE	; 254
    6a60:	98 80       	ld	r9, Y
    6a62:	cb 55       	subi	r28, 0x5B	; 91
    6a64:	d1 40       	sbci	r29, 0x01	; 1
							if (mon_desplazamiento != NULL) {sumasigna (mon_desplazamiento, wk.mv.vector);}   // monitor de desplazamiento
						}
					} else {
						// rotación
						for (byte pata=0; pata<6; pata++) {
							if ((wk.rt.apoyadas>>pata)&1) {
    6a66:	cb 59       	subi	r28, 0x9B	; 155
    6a68:	de 4f       	sbci	r29, 0xFE	; 254
    6a6a:	a8 81       	ld	r26, Y
    6a6c:	b9 81       	ldd	r27, Y+1	; 0x01
    6a6e:	c5 56       	subi	r28, 0x65	; 101
    6a70:	d1 40       	sbci	r29, 0x01	; 1
    6a72:	8c 91       	ld	r24, X
    6a74:	90 e0       	ldi	r25, 0x00	; 0
    6a76:	09 2c       	mov	r0, r9
    6a78:	02 c0       	rjmp	.+4      	; 0x6a7e <_ZN10Movimiento6updateEm+0x15aa>
    6a7a:	95 95       	asr	r25
    6a7c:	87 95       	ror	r24
    6a7e:	0a 94       	dec	r0
    6a80:	e2 f7       	brpl	.-8      	; 0x6a7a <_ZN10Movimiento6updateEm+0x15a6>
    6a82:	80 ff       	sbrs	r24, 0
    6a84:	30 c3       	rjmp	.+1632   	; 0x70e6 <_ZN10Movimiento6updateEm+0x1c12>
								COORD2D O = getOffset (pata); // no usamos rel2abs/abs2rel por razones de eficiencia
    6a86:	89 2d       	mov	r24, r9
    6a88:	0e 94 8f 6f 	call	0xdf1e	; 0xdf1e <_Z9getOffseth>
    6a8c:	cf 5a       	subi	r28, 0xAF	; 175
    6a8e:	de 4f       	sbci	r29, 0xFE	; 254
    6a90:	28 83       	st	Y, r18
    6a92:	c1 55       	subi	r28, 0x51	; 81
    6a94:	d1 40       	sbci	r29, 0x01	; 1
    6a96:	ce 5a       	subi	r28, 0xAE	; 174
    6a98:	de 4f       	sbci	r29, 0xFE	; 254
    6a9a:	38 83       	st	Y, r19
    6a9c:	c2 55       	subi	r28, 0x52	; 82
    6a9e:	d1 40       	sbci	r29, 0x01	; 1
    6aa0:	cd 5a       	subi	r28, 0xAD	; 173
    6aa2:	de 4f       	sbci	r29, 0xFE	; 254
    6aa4:	48 83       	st	Y, r20
    6aa6:	c3 55       	subi	r28, 0x53	; 83
    6aa8:	d1 40       	sbci	r29, 0x01	; 1
    6aaa:	cc 5a       	subi	r28, 0xAC	; 172
    6aac:	de 4f       	sbci	r29, 0xFE	; 254
    6aae:	58 83       	st	Y, r21
    6ab0:	c4 55       	subi	r28, 0x54	; 84
    6ab2:	d1 40       	sbci	r29, 0x01	; 1
    6ab4:	cb 5a       	subi	r28, 0xAB	; 171
    6ab6:	de 4f       	sbci	r29, 0xFE	; 254
    6ab8:	68 83       	st	Y, r22
    6aba:	c5 55       	subi	r28, 0x55	; 85
    6abc:	d1 40       	sbci	r29, 0x01	; 1
    6abe:	ca 5a       	subi	r28, 0xAA	; 170
    6ac0:	de 4f       	sbci	r29, 0xFE	; 254
    6ac2:	78 83       	st	Y, r23
    6ac4:	c6 55       	subi	r28, 0x56	; 86
    6ac6:	d1 40       	sbci	r29, 0x01	; 1
    6ac8:	c9 5a       	subi	r28, 0xA9	; 169
    6aca:	de 4f       	sbci	r29, 0xFE	; 254
    6acc:	88 83       	st	Y, r24
    6ace:	c7 55       	subi	r28, 0x57	; 87
    6ad0:	d1 40       	sbci	r29, 0x01	; 1
    6ad2:	c8 5a       	subi	r28, 0xA8	; 168
    6ad4:	de 4f       	sbci	r29, 0xFE	; 254
    6ad6:	98 83       	st	Y, r25
    6ad8:	c8 55       	subi	r28, 0x58	; 88
    6ada:	d1 40       	sbci	r29, 0x01	; 1
    6adc:	de 01       	movw	r26, r28
    6ade:	a7 59       	subi	r26, 0x97	; 151
    6ae0:	bf 4f       	sbci	r27, 0xFF	; 255
    6ae2:	fe 01       	movw	r30, r28
    6ae4:	ef 5a       	subi	r30, 0xAF	; 175
    6ae6:	fe 4f       	sbci	r31, 0xFE	; 254
    6ae8:	88 e0       	ldi	r24, 0x08	; 8
    6aea:	01 90       	ld	r0, Z+
    6aec:	0d 92       	st	X+, r0
    6aee:	81 50       	subi	r24, 0x01	; 1
    6af0:	e1 f7       	brne	.-8      	; 0x6aea <_ZN10Movimiento6updateEm+0x1616>
								COORD2D C = resta (suma (applyMatrix (resta (suma (xyz2xz(pos_des[pata]), O), wk.mv.vector), wk.rt.rotor1), wk.mv.vector), O);
    6af2:	c5 5a       	subi	r28, 0xA5	; 165
    6af4:	de 4f       	sbci	r29, 0xFE	; 254
    6af6:	e8 81       	ld	r30, Y
    6af8:	f9 81       	ldd	r31, Y+1	; 0x01
    6afa:	cb 55       	subi	r28, 0x5B	; 91
    6afc:	d1 40       	sbci	r29, 0x01	; 1
    6afe:	ee 0f       	add	r30, r30
    6b00:	ff 1f       	adc	r31, r31
    6b02:	c5 5a       	subi	r28, 0xA5	; 165
    6b04:	de 4f       	sbci	r29, 0xFE	; 254
    6b06:	28 81       	ld	r18, Y
    6b08:	39 81       	ldd	r19, Y+1	; 0x01
    6b0a:	cb 55       	subi	r28, 0x5B	; 91
    6b0c:	d1 40       	sbci	r29, 0x01	; 1
    6b0e:	e2 0f       	add	r30, r18
    6b10:	f3 1f       	adc	r31, r19
    6b12:	ee 0f       	add	r30, r30
    6b14:	ff 1f       	adc	r31, r31
    6b16:	ee 0f       	add	r30, r30
    6b18:	ff 1f       	adc	r31, r31
    6b1a:	e0 5b       	subi	r30, 0xB0	; 176
    6b1c:	fc 4e       	sbci	r31, 0xEC	; 236
    6b1e:	e0 80       	ld	r14, Z
    6b20:	f1 80       	ldd	r15, Z+1	; 0x01
    6b22:	02 81       	ldd	r16, Z+2	; 0x02
    6b24:	13 81       	ldd	r17, Z+3	; 0x03
    6b26:	24 81       	ldd	r18, Z+4	; 0x04
    6b28:	35 81       	ldd	r19, Z+5	; 0x05
    6b2a:	46 81       	ldd	r20, Z+6	; 0x06
    6b2c:	57 81       	ldd	r21, Z+7	; 0x07
    6b2e:	60 85       	ldd	r22, Z+8	; 0x08
    6b30:	71 85       	ldd	r23, Z+9	; 0x09
    6b32:	82 85       	ldd	r24, Z+10	; 0x0a
    6b34:	93 85       	ldd	r25, Z+11	; 0x0b
    6b36:	0e 94 98 6b 	call	0xd730	; 0xd730 <_Z6xyz2xz7COORD3D>
    6b3a:	cf 5a       	subi	r28, 0xAF	; 175
    6b3c:	de 4f       	sbci	r29, 0xFE	; 254
    6b3e:	28 83       	st	Y, r18
    6b40:	c1 55       	subi	r28, 0x51	; 81
    6b42:	d1 40       	sbci	r29, 0x01	; 1
    6b44:	ce 5a       	subi	r28, 0xAE	; 174
    6b46:	de 4f       	sbci	r29, 0xFE	; 254
    6b48:	38 83       	st	Y, r19
    6b4a:	c2 55       	subi	r28, 0x52	; 82
    6b4c:	d1 40       	sbci	r29, 0x01	; 1
    6b4e:	cd 5a       	subi	r28, 0xAD	; 173
    6b50:	de 4f       	sbci	r29, 0xFE	; 254
    6b52:	48 83       	st	Y, r20
    6b54:	c3 55       	subi	r28, 0x53	; 83
    6b56:	d1 40       	sbci	r29, 0x01	; 1
    6b58:	cc 5a       	subi	r28, 0xAC	; 172
    6b5a:	de 4f       	sbci	r29, 0xFE	; 254
    6b5c:	58 83       	st	Y, r21
    6b5e:	c4 55       	subi	r28, 0x54	; 84
    6b60:	d1 40       	sbci	r29, 0x01	; 1
    6b62:	cb 5a       	subi	r28, 0xAB	; 171
    6b64:	de 4f       	sbci	r29, 0xFE	; 254
    6b66:	68 83       	st	Y, r22
    6b68:	c5 55       	subi	r28, 0x55	; 85
    6b6a:	d1 40       	sbci	r29, 0x01	; 1
    6b6c:	ca 5a       	subi	r28, 0xAA	; 170
    6b6e:	de 4f       	sbci	r29, 0xFE	; 254
    6b70:	78 83       	st	Y, r23
    6b72:	c6 55       	subi	r28, 0x56	; 86
    6b74:	d1 40       	sbci	r29, 0x01	; 1
    6b76:	c9 5a       	subi	r28, 0xA9	; 169
    6b78:	de 4f       	sbci	r29, 0xFE	; 254
    6b7a:	88 83       	st	Y, r24
    6b7c:	c7 55       	subi	r28, 0x57	; 87
    6b7e:	d1 40       	sbci	r29, 0x01	; 1
    6b80:	c8 5a       	subi	r28, 0xA8	; 168
    6b82:	de 4f       	sbci	r29, 0xFE	; 254
    6b84:	98 83       	st	Y, r25
    6b86:	c8 55       	subi	r28, 0x58	; 88
    6b88:	d1 40       	sbci	r29, 0x01	; 1
    6b8a:	de 01       	movw	r26, r28
    6b8c:	a7 58       	subi	r26, 0x87	; 135
    6b8e:	bf 4f       	sbci	r27, 0xFF	; 255
    6b90:	fe 01       	movw	r30, r28
    6b92:	ef 5a       	subi	r30, 0xAF	; 175
    6b94:	fe 4f       	sbci	r31, 0xFE	; 254
    6b96:	88 e0       	ldi	r24, 0x08	; 8
    6b98:	01 90       	ld	r0, Z+
    6b9a:	0d 92       	st	X+, r0
    6b9c:	81 50       	subi	r24, 0x01	; 1
    6b9e:	e1 f7       	brne	.-8      	; 0x6b98 <_ZN10Movimiento6updateEm+0x16c4>
    6ba0:	ea 96       	adiw	r28, 0x3a	; 58
    6ba2:	2f ad       	ldd	r18, Y+63	; 0x3f
    6ba4:	ea 97       	sbiw	r28, 0x3a	; 58
    6ba6:	eb 96       	adiw	r28, 0x3b	; 59
    6ba8:	3f ad       	ldd	r19, Y+63	; 0x3f
    6baa:	eb 97       	sbiw	r28, 0x3b	; 59
    6bac:	ec 96       	adiw	r28, 0x3c	; 60
    6bae:	4f ad       	ldd	r20, Y+63	; 0x3f
    6bb0:	ec 97       	sbiw	r28, 0x3c	; 60
    6bb2:	ed 96       	adiw	r28, 0x3d	; 61
    6bb4:	5f ad       	ldd	r21, Y+63	; 0x3f
    6bb6:	ed 97       	sbiw	r28, 0x3d	; 61
    6bb8:	ee 96       	adiw	r28, 0x3e	; 62
    6bba:	6f ad       	ldd	r22, Y+63	; 0x3f
    6bbc:	ee 97       	sbiw	r28, 0x3e	; 62
    6bbe:	ef 96       	adiw	r28, 0x3f	; 63
    6bc0:	7f ad       	ldd	r23, Y+63	; 0x3f
    6bc2:	ef 97       	sbiw	r28, 0x3f	; 63
    6bc4:	c1 58       	subi	r28, 0x81	; 129
    6bc6:	df 4f       	sbci	r29, 0xFF	; 255
    6bc8:	88 81       	ld	r24, Y
    6bca:	cf 57       	subi	r28, 0x7F	; 127
    6bcc:	d0 40       	sbci	r29, 0x00	; 0
    6bce:	c0 58       	subi	r28, 0x80	; 128
    6bd0:	df 4f       	sbci	r29, 0xFF	; 255
    6bd2:	98 81       	ld	r25, Y
    6bd4:	c0 58       	subi	r28, 0x80	; 128
    6bd6:	d0 40       	sbci	r29, 0x00	; 0
    6bd8:	aa 96       	adiw	r28, 0x2a	; 42
    6bda:	af ac       	ldd	r10, Y+63	; 0x3f
    6bdc:	aa 97       	sbiw	r28, 0x2a	; 42
    6bde:	ab 96       	adiw	r28, 0x2b	; 43
    6be0:	bf ac       	ldd	r11, Y+63	; 0x3f
    6be2:	ab 97       	sbiw	r28, 0x2b	; 43
    6be4:	ac 96       	adiw	r28, 0x2c	; 44
    6be6:	cf ac       	ldd	r12, Y+63	; 0x3f
    6be8:	ac 97       	sbiw	r28, 0x2c	; 44
    6bea:	ad 96       	adiw	r28, 0x2d	; 45
    6bec:	df ac       	ldd	r13, Y+63	; 0x3f
    6bee:	ad 97       	sbiw	r28, 0x2d	; 45
    6bf0:	ae 96       	adiw	r28, 0x2e	; 46
    6bf2:	ef ac       	ldd	r14, Y+63	; 0x3f
    6bf4:	ae 97       	sbiw	r28, 0x2e	; 46
    6bf6:	af 96       	adiw	r28, 0x2f	; 47
    6bf8:	ff ac       	ldd	r15, Y+63	; 0x3f
    6bfa:	af 97       	sbiw	r28, 0x2f	; 47
    6bfc:	e0 96       	adiw	r28, 0x30	; 48
    6bfe:	0f ad       	ldd	r16, Y+63	; 0x3f
    6c00:	e0 97       	sbiw	r28, 0x30	; 48
    6c02:	e1 96       	adiw	r28, 0x31	; 49
    6c04:	1f ad       	ldd	r17, Y+63	; 0x3f
    6c06:	e1 97       	sbiw	r28, 0x31	; 49
    6c08:	0e 94 84 69 	call	0xd308	; 0xd308 <_Z4suma7COORD2DS_>
    6c0c:	cf 5a       	subi	r28, 0xAF	; 175
    6c0e:	de 4f       	sbci	r29, 0xFE	; 254
    6c10:	28 83       	st	Y, r18
    6c12:	c1 55       	subi	r28, 0x51	; 81
    6c14:	d1 40       	sbci	r29, 0x01	; 1
    6c16:	ce 5a       	subi	r28, 0xAE	; 174
    6c18:	de 4f       	sbci	r29, 0xFE	; 254
    6c1a:	38 83       	st	Y, r19
    6c1c:	c2 55       	subi	r28, 0x52	; 82
    6c1e:	d1 40       	sbci	r29, 0x01	; 1
    6c20:	cd 5a       	subi	r28, 0xAD	; 173
    6c22:	de 4f       	sbci	r29, 0xFE	; 254
    6c24:	48 83       	st	Y, r20
    6c26:	c3 55       	subi	r28, 0x53	; 83
    6c28:	d1 40       	sbci	r29, 0x01	; 1
    6c2a:	cc 5a       	subi	r28, 0xAC	; 172
    6c2c:	de 4f       	sbci	r29, 0xFE	; 254
    6c2e:	58 83       	st	Y, r21
    6c30:	c4 55       	subi	r28, 0x54	; 84
    6c32:	d1 40       	sbci	r29, 0x01	; 1
    6c34:	cb 5a       	subi	r28, 0xAB	; 171
    6c36:	de 4f       	sbci	r29, 0xFE	; 254
    6c38:	68 83       	st	Y, r22
    6c3a:	c5 55       	subi	r28, 0x55	; 85
    6c3c:	d1 40       	sbci	r29, 0x01	; 1
    6c3e:	ca 5a       	subi	r28, 0xAA	; 170
    6c40:	de 4f       	sbci	r29, 0xFE	; 254
    6c42:	78 83       	st	Y, r23
    6c44:	c6 55       	subi	r28, 0x56	; 86
    6c46:	d1 40       	sbci	r29, 0x01	; 1
    6c48:	c9 5a       	subi	r28, 0xA9	; 169
    6c4a:	de 4f       	sbci	r29, 0xFE	; 254
    6c4c:	88 83       	st	Y, r24
    6c4e:	c7 55       	subi	r28, 0x57	; 87
    6c50:	d1 40       	sbci	r29, 0x01	; 1
    6c52:	c8 5a       	subi	r28, 0xA8	; 168
    6c54:	de 4f       	sbci	r29, 0xFE	; 254
    6c56:	98 83       	st	Y, r25
    6c58:	c8 55       	subi	r28, 0x58	; 88
    6c5a:	d1 40       	sbci	r29, 0x01	; 1
    6c5c:	de 01       	movw	r26, r28
    6c5e:	af 57       	subi	r26, 0x7F	; 127
    6c60:	bf 4f       	sbci	r27, 0xFF	; 255
    6c62:	fe 01       	movw	r30, r28
    6c64:	ef 5a       	subi	r30, 0xAF	; 175
    6c66:	fe 4f       	sbci	r31, 0xFE	; 254
    6c68:	88 e0       	ldi	r24, 0x08	; 8
    6c6a:	01 90       	ld	r0, Z+
    6c6c:	0d 92       	st	X+, r0
    6c6e:	81 50       	subi	r24, 0x01	; 1
    6c70:	e1 f7       	brne	.-8      	; 0x6c6a <_ZN10Movimiento6updateEm+0x1796>
    6c72:	cf 57       	subi	r28, 0x7F	; 127
    6c74:	df 4f       	sbci	r29, 0xFF	; 255
    6c76:	28 81       	ld	r18, Y
    6c78:	c1 58       	subi	r28, 0x81	; 129
    6c7a:	d0 40       	sbci	r29, 0x00	; 0
    6c7c:	ce 57       	subi	r28, 0x7E	; 126
    6c7e:	df 4f       	sbci	r29, 0xFF	; 255
    6c80:	38 81       	ld	r19, Y
    6c82:	c2 58       	subi	r28, 0x82	; 130
    6c84:	d0 40       	sbci	r29, 0x00	; 0
    6c86:	cd 57       	subi	r28, 0x7D	; 125
    6c88:	df 4f       	sbci	r29, 0xFF	; 255
    6c8a:	48 81       	ld	r20, Y
    6c8c:	c3 58       	subi	r28, 0x83	; 131
    6c8e:	d0 40       	sbci	r29, 0x00	; 0
    6c90:	cc 57       	subi	r28, 0x7C	; 124
    6c92:	df 4f       	sbci	r29, 0xFF	; 255
    6c94:	58 81       	ld	r21, Y
    6c96:	c4 58       	subi	r28, 0x84	; 132
    6c98:	d0 40       	sbci	r29, 0x00	; 0
    6c9a:	cb 57       	subi	r28, 0x7B	; 123
    6c9c:	df 4f       	sbci	r29, 0xFF	; 255
    6c9e:	68 81       	ld	r22, Y
    6ca0:	c5 58       	subi	r28, 0x85	; 133
    6ca2:	d0 40       	sbci	r29, 0x00	; 0
    6ca4:	ca 57       	subi	r28, 0x7A	; 122
    6ca6:	df 4f       	sbci	r29, 0xFF	; 255
    6ca8:	78 81       	ld	r23, Y
    6caa:	c6 58       	subi	r28, 0x86	; 134
    6cac:	d0 40       	sbci	r29, 0x00	; 0
    6cae:	c9 57       	subi	r28, 0x79	; 121
    6cb0:	df 4f       	sbci	r29, 0xFF	; 255
    6cb2:	88 81       	ld	r24, Y
    6cb4:	c7 58       	subi	r28, 0x87	; 135
    6cb6:	d0 40       	sbci	r29, 0x00	; 0
    6cb8:	c8 57       	subi	r28, 0x78	; 120
    6cba:	df 4f       	sbci	r29, 0xFF	; 255
    6cbc:	98 81       	ld	r25, Y
    6cbe:	c8 58       	subi	r28, 0x88	; 136
    6cc0:	d0 40       	sbci	r29, 0x00	; 0
    6cc2:	d2 01       	movw	r26, r4
    6cc4:	ac 90       	ld	r10, X
    6cc6:	11 96       	adiw	r26, 0x01	; 1
    6cc8:	bc 90       	ld	r11, X
    6cca:	11 97       	sbiw	r26, 0x01	; 1
    6ccc:	12 96       	adiw	r26, 0x02	; 2
    6cce:	cc 90       	ld	r12, X
    6cd0:	12 97       	sbiw	r26, 0x02	; 2
    6cd2:	13 96       	adiw	r26, 0x03	; 3
    6cd4:	dc 90       	ld	r13, X
    6cd6:	13 97       	sbiw	r26, 0x03	; 3
    6cd8:	14 96       	adiw	r26, 0x04	; 4
    6cda:	ec 90       	ld	r14, X
    6cdc:	14 97       	sbiw	r26, 0x04	; 4
    6cde:	15 96       	adiw	r26, 0x05	; 5
    6ce0:	fc 90       	ld	r15, X
    6ce2:	15 97       	sbiw	r26, 0x05	; 5
    6ce4:	16 96       	adiw	r26, 0x06	; 6
    6ce6:	0c 91       	ld	r16, X
    6ce8:	16 97       	sbiw	r26, 0x06	; 6
    6cea:	17 96       	adiw	r26, 0x07	; 7
    6cec:	1c 91       	ld	r17, X
    6cee:	0e 94 47 6a 	call	0xd48e	; 0xd48e <_Z5resta7COORD2DS_>
    6cf2:	cf 5a       	subi	r28, 0xAF	; 175
    6cf4:	de 4f       	sbci	r29, 0xFE	; 254
    6cf6:	28 83       	st	Y, r18
    6cf8:	c1 55       	subi	r28, 0x51	; 81
    6cfa:	d1 40       	sbci	r29, 0x01	; 1
    6cfc:	ce 5a       	subi	r28, 0xAE	; 174
    6cfe:	de 4f       	sbci	r29, 0xFE	; 254
    6d00:	38 83       	st	Y, r19
    6d02:	c2 55       	subi	r28, 0x52	; 82
    6d04:	d1 40       	sbci	r29, 0x01	; 1
    6d06:	cd 5a       	subi	r28, 0xAD	; 173
    6d08:	de 4f       	sbci	r29, 0xFE	; 254
    6d0a:	48 83       	st	Y, r20
    6d0c:	c3 55       	subi	r28, 0x53	; 83
    6d0e:	d1 40       	sbci	r29, 0x01	; 1
    6d10:	cc 5a       	subi	r28, 0xAC	; 172
    6d12:	de 4f       	sbci	r29, 0xFE	; 254
    6d14:	58 83       	st	Y, r21
    6d16:	c4 55       	subi	r28, 0x54	; 84
    6d18:	d1 40       	sbci	r29, 0x01	; 1
    6d1a:	cb 5a       	subi	r28, 0xAB	; 171
    6d1c:	de 4f       	sbci	r29, 0xFE	; 254
    6d1e:	68 83       	st	Y, r22
    6d20:	c5 55       	subi	r28, 0x55	; 85
    6d22:	d1 40       	sbci	r29, 0x01	; 1
    6d24:	ca 5a       	subi	r28, 0xAA	; 170
    6d26:	de 4f       	sbci	r29, 0xFE	; 254
    6d28:	78 83       	st	Y, r23
    6d2a:	c6 55       	subi	r28, 0x56	; 86
    6d2c:	d1 40       	sbci	r29, 0x01	; 1
    6d2e:	c9 5a       	subi	r28, 0xA9	; 169
    6d30:	de 4f       	sbci	r29, 0xFE	; 254
    6d32:	88 83       	st	Y, r24
    6d34:	c7 55       	subi	r28, 0x57	; 87
    6d36:	d1 40       	sbci	r29, 0x01	; 1
    6d38:	c8 5a       	subi	r28, 0xA8	; 168
    6d3a:	de 4f       	sbci	r29, 0xFE	; 254
    6d3c:	98 83       	st	Y, r25
    6d3e:	c8 55       	subi	r28, 0x58	; 88
    6d40:	d1 40       	sbci	r29, 0x01	; 1
    6d42:	de 01       	movw	r26, r28
    6d44:	a7 57       	subi	r26, 0x77	; 119
    6d46:	bf 4f       	sbci	r27, 0xFF	; 255
    6d48:	fe 01       	movw	r30, r28
    6d4a:	ef 5a       	subi	r30, 0xAF	; 175
    6d4c:	fe 4f       	sbci	r31, 0xFE	; 254
    6d4e:	88 e0       	ldi	r24, 0x08	; 8
    6d50:	01 90       	ld	r0, Z+
    6d52:	0d 92       	st	X+, r0
    6d54:	81 50       	subi	r24, 0x01	; 1
    6d56:	e1 f7       	brne	.-8      	; 0x6d50 <_ZN10Movimiento6updateEm+0x187c>
    6d58:	c7 57       	subi	r28, 0x77	; 119
    6d5a:	df 4f       	sbci	r29, 0xFF	; 255
    6d5c:	28 81       	ld	r18, Y
    6d5e:	c9 58       	subi	r28, 0x89	; 137
    6d60:	d0 40       	sbci	r29, 0x00	; 0
    6d62:	c6 57       	subi	r28, 0x76	; 118
    6d64:	df 4f       	sbci	r29, 0xFF	; 255
    6d66:	38 81       	ld	r19, Y
    6d68:	ca 58       	subi	r28, 0x8A	; 138
    6d6a:	d0 40       	sbci	r29, 0x00	; 0
    6d6c:	c5 57       	subi	r28, 0x75	; 117
    6d6e:	df 4f       	sbci	r29, 0xFF	; 255
    6d70:	48 81       	ld	r20, Y
    6d72:	cb 58       	subi	r28, 0x8B	; 139
    6d74:	d0 40       	sbci	r29, 0x00	; 0
    6d76:	c4 57       	subi	r28, 0x74	; 116
    6d78:	df 4f       	sbci	r29, 0xFF	; 255
    6d7a:	58 81       	ld	r21, Y
    6d7c:	cc 58       	subi	r28, 0x8C	; 140
    6d7e:	d0 40       	sbci	r29, 0x00	; 0
    6d80:	c3 57       	subi	r28, 0x73	; 115
    6d82:	df 4f       	sbci	r29, 0xFF	; 255
    6d84:	68 81       	ld	r22, Y
    6d86:	cd 58       	subi	r28, 0x8D	; 141
    6d88:	d0 40       	sbci	r29, 0x00	; 0
    6d8a:	c2 57       	subi	r28, 0x72	; 114
    6d8c:	df 4f       	sbci	r29, 0xFF	; 255
    6d8e:	78 81       	ld	r23, Y
    6d90:	ce 58       	subi	r28, 0x8E	; 142
    6d92:	d0 40       	sbci	r29, 0x00	; 0
    6d94:	c1 57       	subi	r28, 0x71	; 113
    6d96:	df 4f       	sbci	r29, 0xFF	; 255
    6d98:	88 81       	ld	r24, Y
    6d9a:	cf 58       	subi	r28, 0x8F	; 143
    6d9c:	d0 40       	sbci	r29, 0x00	; 0
    6d9e:	c0 57       	subi	r28, 0x70	; 112
    6da0:	df 4f       	sbci	r29, 0xFF	; 255
    6da2:	98 81       	ld	r25, Y
    6da4:	c0 59       	subi	r28, 0x90	; 144
    6da6:	d0 40       	sbci	r29, 0x00	; 0
    6da8:	cf 59       	subi	r28, 0x9F	; 159
    6daa:	de 4f       	sbci	r29, 0xFE	; 254
    6dac:	08 81       	ld	r16, Y
    6dae:	19 81       	ldd	r17, Y+1	; 0x01
    6db0:	c1 56       	subi	r28, 0x61	; 97
    6db2:	d1 40       	sbci	r29, 0x01	; 1
    6db4:	0e 94 e7 6c 	call	0xd9ce	; 0xd9ce <_Z11applyMatrix7COORD2DPS_>
    6db8:	cf 5a       	subi	r28, 0xAF	; 175
    6dba:	de 4f       	sbci	r29, 0xFE	; 254
    6dbc:	28 83       	st	Y, r18
    6dbe:	c1 55       	subi	r28, 0x51	; 81
    6dc0:	d1 40       	sbci	r29, 0x01	; 1
    6dc2:	ce 5a       	subi	r28, 0xAE	; 174
    6dc4:	de 4f       	sbci	r29, 0xFE	; 254
    6dc6:	38 83       	st	Y, r19
    6dc8:	c2 55       	subi	r28, 0x52	; 82
    6dca:	d1 40       	sbci	r29, 0x01	; 1
    6dcc:	cd 5a       	subi	r28, 0xAD	; 173
    6dce:	de 4f       	sbci	r29, 0xFE	; 254
    6dd0:	48 83       	st	Y, r20
    6dd2:	c3 55       	subi	r28, 0x53	; 83
    6dd4:	d1 40       	sbci	r29, 0x01	; 1
    6dd6:	cc 5a       	subi	r28, 0xAC	; 172
    6dd8:	de 4f       	sbci	r29, 0xFE	; 254
    6dda:	58 83       	st	Y, r21
    6ddc:	c4 55       	subi	r28, 0x54	; 84
    6dde:	d1 40       	sbci	r29, 0x01	; 1
    6de0:	cb 5a       	subi	r28, 0xAB	; 171
    6de2:	de 4f       	sbci	r29, 0xFE	; 254
    6de4:	68 83       	st	Y, r22
    6de6:	c5 55       	subi	r28, 0x55	; 85
    6de8:	d1 40       	sbci	r29, 0x01	; 1
    6dea:	ca 5a       	subi	r28, 0xAA	; 170
    6dec:	de 4f       	sbci	r29, 0xFE	; 254
    6dee:	78 83       	st	Y, r23
    6df0:	c6 55       	subi	r28, 0x56	; 86
    6df2:	d1 40       	sbci	r29, 0x01	; 1
    6df4:	c9 5a       	subi	r28, 0xA9	; 169
    6df6:	de 4f       	sbci	r29, 0xFE	; 254
    6df8:	88 83       	st	Y, r24
    6dfa:	c7 55       	subi	r28, 0x57	; 87
    6dfc:	d1 40       	sbci	r29, 0x01	; 1
    6dfe:	c8 5a       	subi	r28, 0xA8	; 168
    6e00:	de 4f       	sbci	r29, 0xFE	; 254
    6e02:	98 83       	st	Y, r25
    6e04:	c8 55       	subi	r28, 0x58	; 88
    6e06:	d1 40       	sbci	r29, 0x01	; 1
    6e08:	de 01       	movw	r26, r28
    6e0a:	af 56       	subi	r26, 0x6F	; 111
    6e0c:	bf 4f       	sbci	r27, 0xFF	; 255
    6e0e:	fe 01       	movw	r30, r28
    6e10:	ef 5a       	subi	r30, 0xAF	; 175
    6e12:	fe 4f       	sbci	r31, 0xFE	; 254
    6e14:	88 e0       	ldi	r24, 0x08	; 8
    6e16:	01 90       	ld	r0, Z+
    6e18:	0d 92       	st	X+, r0
    6e1a:	81 50       	subi	r24, 0x01	; 1
    6e1c:	e1 f7       	brne	.-8      	; 0x6e16 <_ZN10Movimiento6updateEm+0x1942>
    6e1e:	cf 56       	subi	r28, 0x6F	; 111
    6e20:	df 4f       	sbci	r29, 0xFF	; 255
    6e22:	28 81       	ld	r18, Y
    6e24:	c1 59       	subi	r28, 0x91	; 145
    6e26:	d0 40       	sbci	r29, 0x00	; 0
    6e28:	ce 56       	subi	r28, 0x6E	; 110
    6e2a:	df 4f       	sbci	r29, 0xFF	; 255
    6e2c:	38 81       	ld	r19, Y
    6e2e:	c2 59       	subi	r28, 0x92	; 146
    6e30:	d0 40       	sbci	r29, 0x00	; 0
    6e32:	cd 56       	subi	r28, 0x6D	; 109
    6e34:	df 4f       	sbci	r29, 0xFF	; 255
    6e36:	48 81       	ld	r20, Y
    6e38:	c3 59       	subi	r28, 0x93	; 147
    6e3a:	d0 40       	sbci	r29, 0x00	; 0
    6e3c:	cc 56       	subi	r28, 0x6C	; 108
    6e3e:	df 4f       	sbci	r29, 0xFF	; 255
    6e40:	58 81       	ld	r21, Y
    6e42:	c4 59       	subi	r28, 0x94	; 148
    6e44:	d0 40       	sbci	r29, 0x00	; 0
    6e46:	cb 56       	subi	r28, 0x6B	; 107
    6e48:	df 4f       	sbci	r29, 0xFF	; 255
    6e4a:	68 81       	ld	r22, Y
    6e4c:	c5 59       	subi	r28, 0x95	; 149
    6e4e:	d0 40       	sbci	r29, 0x00	; 0
    6e50:	ca 56       	subi	r28, 0x6A	; 106
    6e52:	df 4f       	sbci	r29, 0xFF	; 255
    6e54:	78 81       	ld	r23, Y
    6e56:	c6 59       	subi	r28, 0x96	; 150
    6e58:	d0 40       	sbci	r29, 0x00	; 0
    6e5a:	c9 56       	subi	r28, 0x69	; 105
    6e5c:	df 4f       	sbci	r29, 0xFF	; 255
    6e5e:	88 81       	ld	r24, Y
    6e60:	c7 59       	subi	r28, 0x97	; 151
    6e62:	d0 40       	sbci	r29, 0x00	; 0
    6e64:	c8 56       	subi	r28, 0x68	; 104
    6e66:	df 4f       	sbci	r29, 0xFF	; 255
    6e68:	98 81       	ld	r25, Y
    6e6a:	c8 59       	subi	r28, 0x98	; 152
    6e6c:	d0 40       	sbci	r29, 0x00	; 0
    6e6e:	f2 01       	movw	r30, r4
    6e70:	a0 80       	ld	r10, Z
    6e72:	b1 80       	ldd	r11, Z+1	; 0x01
    6e74:	c2 80       	ldd	r12, Z+2	; 0x02
    6e76:	d3 80       	ldd	r13, Z+3	; 0x03
    6e78:	e4 80       	ldd	r14, Z+4	; 0x04
    6e7a:	f5 80       	ldd	r15, Z+5	; 0x05
    6e7c:	06 81       	ldd	r16, Z+6	; 0x06
    6e7e:	17 81       	ldd	r17, Z+7	; 0x07
    6e80:	0e 94 84 69 	call	0xd308	; 0xd308 <_Z4suma7COORD2DS_>
    6e84:	cf 5a       	subi	r28, 0xAF	; 175
    6e86:	de 4f       	sbci	r29, 0xFE	; 254
    6e88:	28 83       	st	Y, r18
    6e8a:	c1 55       	subi	r28, 0x51	; 81
    6e8c:	d1 40       	sbci	r29, 0x01	; 1
    6e8e:	ce 5a       	subi	r28, 0xAE	; 174
    6e90:	de 4f       	sbci	r29, 0xFE	; 254
    6e92:	38 83       	st	Y, r19
    6e94:	c2 55       	subi	r28, 0x52	; 82
    6e96:	d1 40       	sbci	r29, 0x01	; 1
    6e98:	cd 5a       	subi	r28, 0xAD	; 173
    6e9a:	de 4f       	sbci	r29, 0xFE	; 254
    6e9c:	48 83       	st	Y, r20
    6e9e:	c3 55       	subi	r28, 0x53	; 83
    6ea0:	d1 40       	sbci	r29, 0x01	; 1
    6ea2:	cc 5a       	subi	r28, 0xAC	; 172
    6ea4:	de 4f       	sbci	r29, 0xFE	; 254
    6ea6:	58 83       	st	Y, r21
    6ea8:	c4 55       	subi	r28, 0x54	; 84
    6eaa:	d1 40       	sbci	r29, 0x01	; 1
    6eac:	cb 5a       	subi	r28, 0xAB	; 171
    6eae:	de 4f       	sbci	r29, 0xFE	; 254
    6eb0:	68 83       	st	Y, r22
    6eb2:	c5 55       	subi	r28, 0x55	; 85
    6eb4:	d1 40       	sbci	r29, 0x01	; 1
    6eb6:	ca 5a       	subi	r28, 0xAA	; 170
    6eb8:	de 4f       	sbci	r29, 0xFE	; 254
    6eba:	78 83       	st	Y, r23
    6ebc:	c6 55       	subi	r28, 0x56	; 86
    6ebe:	d1 40       	sbci	r29, 0x01	; 1
    6ec0:	c9 5a       	subi	r28, 0xA9	; 169
    6ec2:	de 4f       	sbci	r29, 0xFE	; 254
    6ec4:	88 83       	st	Y, r24
    6ec6:	c7 55       	subi	r28, 0x57	; 87
    6ec8:	d1 40       	sbci	r29, 0x01	; 1
    6eca:	c8 5a       	subi	r28, 0xA8	; 168
    6ecc:	de 4f       	sbci	r29, 0xFE	; 254
    6ece:	98 83       	st	Y, r25
    6ed0:	c8 55       	subi	r28, 0x58	; 88
    6ed2:	d1 40       	sbci	r29, 0x01	; 1
    6ed4:	de 01       	movw	r26, r28
    6ed6:	a7 56       	subi	r26, 0x67	; 103
    6ed8:	bf 4f       	sbci	r27, 0xFF	; 255
    6eda:	fe 01       	movw	r30, r28
    6edc:	ef 5a       	subi	r30, 0xAF	; 175
    6ede:	fe 4f       	sbci	r31, 0xFE	; 254
    6ee0:	88 e0       	ldi	r24, 0x08	; 8
    6ee2:	01 90       	ld	r0, Z+
    6ee4:	0d 92       	st	X+, r0
    6ee6:	81 50       	subi	r24, 0x01	; 1
    6ee8:	e1 f7       	brne	.-8      	; 0x6ee2 <_ZN10Movimiento6updateEm+0x1a0e>
    6eea:	c7 56       	subi	r28, 0x67	; 103
    6eec:	df 4f       	sbci	r29, 0xFF	; 255
    6eee:	28 81       	ld	r18, Y
    6ef0:	c9 59       	subi	r28, 0x99	; 153
    6ef2:	d0 40       	sbci	r29, 0x00	; 0
    6ef4:	c6 56       	subi	r28, 0x66	; 102
    6ef6:	df 4f       	sbci	r29, 0xFF	; 255
    6ef8:	38 81       	ld	r19, Y
    6efa:	ca 59       	subi	r28, 0x9A	; 154
    6efc:	d0 40       	sbci	r29, 0x00	; 0
    6efe:	c5 56       	subi	r28, 0x65	; 101
    6f00:	df 4f       	sbci	r29, 0xFF	; 255
    6f02:	48 81       	ld	r20, Y
    6f04:	cb 59       	subi	r28, 0x9B	; 155
    6f06:	d0 40       	sbci	r29, 0x00	; 0
    6f08:	c4 56       	subi	r28, 0x64	; 100
    6f0a:	df 4f       	sbci	r29, 0xFF	; 255
    6f0c:	58 81       	ld	r21, Y
    6f0e:	cc 59       	subi	r28, 0x9C	; 156
    6f10:	d0 40       	sbci	r29, 0x00	; 0
    6f12:	c3 56       	subi	r28, 0x63	; 99
    6f14:	df 4f       	sbci	r29, 0xFF	; 255
    6f16:	68 81       	ld	r22, Y
    6f18:	cd 59       	subi	r28, 0x9D	; 157
    6f1a:	d0 40       	sbci	r29, 0x00	; 0
    6f1c:	c2 56       	subi	r28, 0x62	; 98
    6f1e:	df 4f       	sbci	r29, 0xFF	; 255
    6f20:	78 81       	ld	r23, Y
    6f22:	ce 59       	subi	r28, 0x9E	; 158
    6f24:	d0 40       	sbci	r29, 0x00	; 0
    6f26:	c1 56       	subi	r28, 0x61	; 97
    6f28:	df 4f       	sbci	r29, 0xFF	; 255
    6f2a:	88 81       	ld	r24, Y
    6f2c:	cf 59       	subi	r28, 0x9F	; 159
    6f2e:	d0 40       	sbci	r29, 0x00	; 0
    6f30:	c0 56       	subi	r28, 0x60	; 96
    6f32:	df 4f       	sbci	r29, 0xFF	; 255
    6f34:	98 81       	ld	r25, Y
    6f36:	c0 5a       	subi	r28, 0xA0	; 160
    6f38:	d0 40       	sbci	r29, 0x00	; 0
    6f3a:	aa 96       	adiw	r28, 0x2a	; 42
    6f3c:	af ac       	ldd	r10, Y+63	; 0x3f
    6f3e:	aa 97       	sbiw	r28, 0x2a	; 42
    6f40:	ab 96       	adiw	r28, 0x2b	; 43
    6f42:	bf ac       	ldd	r11, Y+63	; 0x3f
    6f44:	ab 97       	sbiw	r28, 0x2b	; 43
    6f46:	ac 96       	adiw	r28, 0x2c	; 44
    6f48:	cf ac       	ldd	r12, Y+63	; 0x3f
    6f4a:	ac 97       	sbiw	r28, 0x2c	; 44
    6f4c:	ad 96       	adiw	r28, 0x2d	; 45
    6f4e:	df ac       	ldd	r13, Y+63	; 0x3f
    6f50:	ad 97       	sbiw	r28, 0x2d	; 45
    6f52:	ae 96       	adiw	r28, 0x2e	; 46
    6f54:	ef ac       	ldd	r14, Y+63	; 0x3f
    6f56:	ae 97       	sbiw	r28, 0x2e	; 46
    6f58:	af 96       	adiw	r28, 0x2f	; 47
    6f5a:	ff ac       	ldd	r15, Y+63	; 0x3f
    6f5c:	af 97       	sbiw	r28, 0x2f	; 47
    6f5e:	e0 96       	adiw	r28, 0x30	; 48
    6f60:	0f ad       	ldd	r16, Y+63	; 0x3f
    6f62:	e0 97       	sbiw	r28, 0x30	; 48
    6f64:	e1 96       	adiw	r28, 0x31	; 49
    6f66:	1f ad       	ldd	r17, Y+63	; 0x3f
    6f68:	e1 97       	sbiw	r28, 0x31	; 49
    6f6a:	0e 94 47 6a 	call	0xd48e	; 0xd48e <_Z5resta7COORD2DS_>
    6f6e:	cf 5a       	subi	r28, 0xAF	; 175
    6f70:	de 4f       	sbci	r29, 0xFE	; 254
    6f72:	28 83       	st	Y, r18
    6f74:	c1 55       	subi	r28, 0x51	; 81
    6f76:	d1 40       	sbci	r29, 0x01	; 1
    6f78:	ce 5a       	subi	r28, 0xAE	; 174
    6f7a:	de 4f       	sbci	r29, 0xFE	; 254
    6f7c:	38 83       	st	Y, r19
    6f7e:	c2 55       	subi	r28, 0x52	; 82
    6f80:	d1 40       	sbci	r29, 0x01	; 1
    6f82:	cd 5a       	subi	r28, 0xAD	; 173
    6f84:	de 4f       	sbci	r29, 0xFE	; 254
    6f86:	48 83       	st	Y, r20
    6f88:	c3 55       	subi	r28, 0x53	; 83
    6f8a:	d1 40       	sbci	r29, 0x01	; 1
    6f8c:	cc 5a       	subi	r28, 0xAC	; 172
    6f8e:	de 4f       	sbci	r29, 0xFE	; 254
    6f90:	58 83       	st	Y, r21
    6f92:	c4 55       	subi	r28, 0x54	; 84
    6f94:	d1 40       	sbci	r29, 0x01	; 1
    6f96:	cb 5a       	subi	r28, 0xAB	; 171
    6f98:	de 4f       	sbci	r29, 0xFE	; 254
    6f9a:	68 83       	st	Y, r22
    6f9c:	c5 55       	subi	r28, 0x55	; 85
    6f9e:	d1 40       	sbci	r29, 0x01	; 1
    6fa0:	ca 5a       	subi	r28, 0xAA	; 170
    6fa2:	de 4f       	sbci	r29, 0xFE	; 254
    6fa4:	78 83       	st	Y, r23
    6fa6:	c6 55       	subi	r28, 0x56	; 86
    6fa8:	d1 40       	sbci	r29, 0x01	; 1
    6faa:	c9 5a       	subi	r28, 0xA9	; 169
    6fac:	de 4f       	sbci	r29, 0xFE	; 254
    6fae:	88 83       	st	Y, r24
    6fb0:	c7 55       	subi	r28, 0x57	; 87
    6fb2:	d1 40       	sbci	r29, 0x01	; 1
    6fb4:	c8 5a       	subi	r28, 0xA8	; 168
    6fb6:	de 4f       	sbci	r29, 0xFE	; 254
    6fb8:	98 83       	st	Y, r25
    6fba:	c8 55       	subi	r28, 0x58	; 88
    6fbc:	d1 40       	sbci	r29, 0x01	; 1
    6fbe:	de 01       	movw	r26, r28
    6fc0:	af 58       	subi	r26, 0x8F	; 143
    6fc2:	bf 4f       	sbci	r27, 0xFF	; 255
    6fc4:	fe 01       	movw	r30, r28
    6fc6:	ef 5a       	subi	r30, 0xAF	; 175
    6fc8:	fe 4f       	sbci	r31, 0xFE	; 254
    6fca:	88 e0       	ldi	r24, 0x08	; 8
    6fcc:	01 90       	ld	r0, Z+
    6fce:	0d 92       	st	X+, r0
    6fd0:	81 50       	subi	r24, 0x01	; 1
    6fd2:	e1 f7       	brne	.-8      	; 0x6fcc <_ZN10Movimiento6updateEm+0x1af8>
		//					eventos.add ((MOVDATA) {1<<pata, (COORD3D) {C.x, pos_des[pata].y, C.z}, sh.mv.escala, true}, 0);
								eventos.add ((MOVDATA) {1<<pata, h_correct(C, pata), sh.mv.escala, true}, 0);
    6fd4:	ce 01       	movw	r24, r28
    6fd6:	8f 5f       	subi	r24, 0xFF	; 255
    6fd8:	9e 4f       	sbci	r25, 0xFE	; 254
    6fda:	b3 01       	movw	r22, r6
    6fdc:	e2 96       	adiw	r28, 0x32	; 50
    6fde:	ef ac       	ldd	r14, Y+63	; 0x3f
    6fe0:	e2 97       	sbiw	r28, 0x32	; 50
    6fe2:	e3 96       	adiw	r28, 0x33	; 51
    6fe4:	ff ac       	ldd	r15, Y+63	; 0x3f
    6fe6:	e3 97       	sbiw	r28, 0x33	; 51
    6fe8:	e4 96       	adiw	r28, 0x34	; 52
    6fea:	0f ad       	ldd	r16, Y+63	; 0x3f
    6fec:	e4 97       	sbiw	r28, 0x34	; 52
    6fee:	e5 96       	adiw	r28, 0x35	; 53
    6ff0:	1f ad       	ldd	r17, Y+63	; 0x3f
    6ff2:	e5 97       	sbiw	r28, 0x35	; 53
    6ff4:	e6 96       	adiw	r28, 0x36	; 54
    6ff6:	2f ad       	ldd	r18, Y+63	; 0x3f
    6ff8:	e6 97       	sbiw	r28, 0x36	; 54
    6ffa:	e7 96       	adiw	r28, 0x37	; 55
    6ffc:	3f ad       	ldd	r19, Y+63	; 0x3f
    6ffe:	e7 97       	sbiw	r28, 0x37	; 55
    7000:	e8 96       	adiw	r28, 0x38	; 56
    7002:	4f ad       	ldd	r20, Y+63	; 0x3f
    7004:	e8 97       	sbiw	r28, 0x38	; 56
    7006:	e9 96       	adiw	r28, 0x39	; 57
    7008:	5f ad       	ldd	r21, Y+63	; 0x3f
    700a:	e9 97       	sbiw	r28, 0x39	; 57
    700c:	c9 2c       	mov	r12, r9
    700e:	0e 94 bf 29 	call	0x537e	; 0x537e <_ZN10Movimiento9h_correctE7COORD2Dh>
    7012:	c9 59       	subi	r28, 0x99	; 153
    7014:	de 4f       	sbci	r29, 0xFE	; 254
    7016:	a8 81       	ld	r26, Y
    7018:	b9 81       	ldd	r27, Y+1	; 0x01
    701a:	c7 56       	subi	r28, 0x67	; 103
    701c:	d1 40       	sbci	r29, 0x01	; 1
    701e:	2c 91       	ld	r18, X
    7020:	f1 01       	movw	r30, r2
    7022:	30 e1       	ldi	r19, 0x10	; 16
    7024:	11 92       	st	Z+, r1
    7026:	3a 95       	dec	r19
    7028:	e9 f7       	brne	.-6      	; 0x7024 <_ZN10Movimiento6updateEm+0x1b50>
    702a:	c7 59       	subi	r28, 0x97	; 151
    702c:	de 4f       	sbci	r29, 0xFE	; 254
    702e:	a8 81       	ld	r26, Y
    7030:	b9 81       	ldd	r27, Y+1	; 0x01
    7032:	c9 56       	subi	r28, 0x69	; 105
    7034:	d1 40       	sbci	r29, 0x01	; 1
    7036:	fe 01       	movw	r30, r28
    7038:	ef 5f       	subi	r30, 0xFF	; 255
    703a:	fe 4f       	sbci	r31, 0xFE	; 254
    703c:	8c e0       	ldi	r24, 0x0C	; 12
    703e:	01 90       	ld	r0, Z+
    7040:	0d 92       	st	X+, r0
    7042:	81 50       	subi	r24, 0x01	; 1
    7044:	e1 f7       	brne	.-8      	; 0x703e <_ZN10Movimiento6updateEm+0x1b6a>
    7046:	81 e0       	ldi	r24, 0x01	; 1
    7048:	90 e0       	ldi	r25, 0x00	; 0
    704a:	c5 5a       	subi	r28, 0xA5	; 165
    704c:	de 4f       	sbci	r29, 0xFE	; 254
    704e:	08 80       	ld	r0, Y
    7050:	cb 55       	subi	r28, 0x5B	; 91
    7052:	d1 40       	sbci	r29, 0x01	; 1
    7054:	02 c0       	rjmp	.+4      	; 0x705a <_ZN10Movimiento6updateEm+0x1b86>
    7056:	88 0f       	add	r24, r24
    7058:	99 1f       	adc	r25, r25
    705a:	0a 94       	dec	r0
    705c:	e2 f7       	brpl	.-8      	; 0x7056 <_ZN10Movimiento6updateEm+0x1b82>
    705e:	d1 01       	movw	r26, r2
    7060:	8c 93       	st	X, r24
    7062:	1d 96       	adiw	r26, 0x0d	; 13
    7064:	2c 93       	st	X, r18
    7066:	1d 97       	sbiw	r26, 0x0d	; 13
    7068:	1e 96       	adiw	r26, 0x0e	; 14
    706a:	1c 92       	st	X, r1
    706c:	1e 97       	sbiw	r26, 0x0e	; 14
    706e:	81 e0       	ldi	r24, 0x01	; 1
    7070:	1f 96       	adiw	r26, 0x0f	; 15
    7072:	8c 93       	st	X, r24
    7074:	1f 97       	sbiw	r26, 0x0f	; 15
    7076:	00 d0       	rcall	.+0      	; 0x7078 <_ZN10Movimiento6updateEm+0x1ba4>
    7078:	ed b7       	in	r30, 0x3d	; 61
    707a:	fe b7       	in	r31, 0x3e	; 62
    707c:	12 82       	std	Z+2, r1	; 0x02
    707e:	11 82       	std	Z+1, r1	; 0x01
    7080:	80 ed       	ldi	r24, 0xD0	; 208
    7082:	96 e0       	ldi	r25, 0x06	; 6
    7084:	8c 90       	ld	r8, X
    7086:	11 96       	adiw	r26, 0x01	; 1
    7088:	9c 90       	ld	r9, X
    708a:	11 97       	sbiw	r26, 0x01	; 1
    708c:	12 96       	adiw	r26, 0x02	; 2
    708e:	ac 90       	ld	r10, X
    7090:	12 97       	sbiw	r26, 0x02	; 2
    7092:	13 96       	adiw	r26, 0x03	; 3
    7094:	bc 90       	ld	r11, X
    7096:	13 97       	sbiw	r26, 0x03	; 3
    7098:	14 96       	adiw	r26, 0x04	; 4
    709a:	cc 90       	ld	r12, X
    709c:	14 97       	sbiw	r26, 0x04	; 4
    709e:	15 96       	adiw	r26, 0x05	; 5
    70a0:	dc 90       	ld	r13, X
    70a2:	15 97       	sbiw	r26, 0x05	; 5
    70a4:	16 96       	adiw	r26, 0x06	; 6
    70a6:	ec 90       	ld	r14, X
    70a8:	16 97       	sbiw	r26, 0x06	; 6
    70aa:	17 96       	adiw	r26, 0x07	; 7
    70ac:	fc 90       	ld	r15, X
    70ae:	17 97       	sbiw	r26, 0x07	; 7
    70b0:	18 96       	adiw	r26, 0x08	; 8
    70b2:	0c 91       	ld	r16, X
    70b4:	18 97       	sbiw	r26, 0x08	; 8
    70b6:	19 96       	adiw	r26, 0x09	; 9
    70b8:	1c 91       	ld	r17, X
    70ba:	19 97       	sbiw	r26, 0x09	; 9
    70bc:	1a 96       	adiw	r26, 0x0a	; 10
    70be:	2c 91       	ld	r18, X
    70c0:	1a 97       	sbiw	r26, 0x0a	; 10
    70c2:	1b 96       	adiw	r26, 0x0b	; 11
    70c4:	3c 91       	ld	r19, X
    70c6:	1b 97       	sbiw	r26, 0x0b	; 11
    70c8:	1c 96       	adiw	r26, 0x0c	; 12
    70ca:	4c 91       	ld	r20, X
    70cc:	1c 97       	sbiw	r26, 0x0c	; 12
    70ce:	1d 96       	adiw	r26, 0x0d	; 13
    70d0:	5c 91       	ld	r21, X
    70d2:	1d 97       	sbiw	r26, 0x0d	; 13
    70d4:	1e 96       	adiw	r26, 0x0e	; 14
    70d6:	6c 91       	ld	r22, X
    70d8:	1e 97       	sbiw	r26, 0x0e	; 14
    70da:	1f 96       	adiw	r26, 0x0f	; 15
    70dc:	7c 91       	ld	r23, X
    70de:	0e 94 16 18 	call	0x302c	; 0x302c <_ZN6Events3addE7MOVDATAi>
    70e2:	0f 90       	pop	r0
    70e4:	0f 90       	pop	r0
    70e6:	c5 5a       	subi	r28, 0xA5	; 165
    70e8:	de 4f       	sbci	r29, 0xFE	; 254
    70ea:	28 81       	ld	r18, Y
    70ec:	39 81       	ldd	r19, Y+1	; 0x01
    70ee:	cb 55       	subi	r28, 0x5B	; 91
    70f0:	d1 40       	sbci	r29, 0x01	; 1
    70f2:	2f 5f       	subi	r18, 0xFF	; 255
    70f4:	3f 4f       	sbci	r19, 0xFF	; 255
    70f6:	c5 5a       	subi	r28, 0xA5	; 165
    70f8:	de 4f       	sbci	r29, 0xFE	; 254
    70fa:	39 83       	std	Y+1, r19	; 0x01
    70fc:	28 83       	st	Y, r18
    70fe:	cb 55       	subi	r28, 0x5B	; 91
    7100:	d1 40       	sbci	r29, 0x01	; 1
						if (wk.rt.apoyadas) {
							if (mon_desplazamiento != NULL) {sumasigna (mon_desplazamiento, wk.mv.vector);}   // monitor de desplazamiento
						}
					} else {
						// rotación
						for (byte pata=0; pata<6; pata++) {
    7102:	26 30       	cpi	r18, 0x06	; 6
    7104:	31 05       	cpc	r19, r1
    7106:	09 f0       	breq	.+2      	; 0x710a <_ZN10Movimiento6updateEm+0x1c36>
    7108:	a9 cc       	rjmp	.-1710   	; 0x6a5c <_ZN10Movimiento6updateEm+0x1588>
								COORD2D C = resta (suma (applyMatrix (resta (suma (xyz2xz(pos_des[pata]), O), wk.mv.vector), wk.rt.rotor1), wk.mv.vector), O);
		//					eventos.add ((MOVDATA) {1<<pata, (COORD3D) {C.x, pos_des[pata].y, C.z}, sh.mv.escala, true}, 0);
								eventos.add ((MOVDATA) {1<<pata, h_correct(C, pata), sh.mv.escala, true}, 0);
							}
						}
						if (mon_angulo != NULL && wk.rt.apoyadas) {*mon_angulo -= wk.mv.rotacion;}  // monitor del ángulo de rotación
    710a:	d3 01       	movw	r26, r6
    710c:	0d 91       	ld	r16, X+
    710e:	1c 91       	ld	r17, X
    7110:	01 15       	cp	r16, r1
    7112:	11 05       	cpc	r17, r1
    7114:	09 f4       	brne	.+2      	; 0x7118 <_ZN10Movimiento6updateEm+0x1c44>
    7116:	a0 c1       	rjmp	.+832    	; 0x7458 <_ZN10Movimiento6updateEm+0x1f84>
    7118:	e1 e8       	ldi	r30, 0x81	; 129
    711a:	f1 e0       	ldi	r31, 0x01	; 1
    711c:	6e 0e       	add	r6, r30
    711e:	7f 1e       	adc	r7, r31
    7120:	d3 01       	movw	r26, r6
    7122:	8c 91       	ld	r24, X
    7124:	ef e7       	ldi	r30, 0x7F	; 127
    7126:	fe ef       	ldi	r31, 0xFE	; 254
    7128:	6e 0e       	add	r6, r30
    712a:	7f 1e       	adc	r7, r31
    712c:	88 23       	and	r24, r24
    712e:	09 f4       	brne	.+2      	; 0x7132 <_ZN10Movimiento6updateEm+0x1c5e>
    7130:	93 c1       	rjmp	.+806    	; 0x7458 <_ZN10Movimiento6updateEm+0x1f84>
    7132:	f3 01       	movw	r30, r6
    7134:	ef 54       	subi	r30, 0x4F	; 79
    7136:	ff 4f       	sbci	r31, 0xFF	; 255
    7138:	d8 01       	movw	r26, r16
    713a:	6d 91       	ld	r22, X+
    713c:	7d 91       	ld	r23, X+
    713e:	8d 91       	ld	r24, X+
    7140:	9c 91       	ld	r25, X
    7142:	20 81       	ld	r18, Z
    7144:	31 81       	ldd	r19, Z+1	; 0x01
    7146:	42 81       	ldd	r20, Z+2	; 0x02
    7148:	53 81       	ldd	r21, Z+3	; 0x03
    714a:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    714e:	f8 01       	movw	r30, r16
    7150:	60 83       	st	Z, r22
    7152:	71 83       	std	Z+1, r23	; 0x01
    7154:	82 83       	std	Z+2, r24	; 0x02
    7156:	93 83       	std	Z+3, r25	; 0x03
    7158:	7f c1       	rjmp	.+766    	; 0x7458 <_ZN10Movimiento6updateEm+0x1f84>
    715a:	53 01       	movw	r10, r6
    715c:	93 01       	movw	r18, r6
    715e:	27 58       	subi	r18, 0x87	; 135
    7160:	3f 4f       	sbci	r19, 0xFF	; 255
    7162:	c7 5a       	subi	r28, 0xA7	; 167
    7164:	de 4f       	sbci	r29, 0xFE	; 254
    7166:	39 83       	std	Y+1, r19	; 0x01
    7168:	28 83       	st	Y, r18
    716a:	c9 55       	subi	r28, 0x59	; 89
    716c:	d1 40       	sbci	r29, 0x01	; 1
    716e:	88 24       	eor	r8, r8
    7170:	99 24       	eor	r9, r9
				}
				case TRONCO: {
					for (byte index=0; index<9; index++) {
						if (bd.oscilator[index].amp != 0) {
							if (!bd.oscilator[index].brown) {
								bd.param_tronco[index] = bd.oscilator[index].amp*sin (sh.cn.tick*angle_step*bd.oscilator[index].freq + bd.oscilator[index].phase);
    7172:	c5 58       	subi	r28, 0x85	; 133
    7174:	de 4f       	sbci	r29, 0xFE	; 254
    7176:	b9 83       	std	Y+1, r27	; 0x01
    7178:	a8 83       	st	Y, r26
    717a:	cb 57       	subi	r28, 0x7B	; 123
    717c:	d1 40       	sbci	r29, 0x01	; 1
					
					break;
				}
				case TRONCO: {
					for (byte index=0; index<9; index++) {
						if (bd.oscilator[index].amp != 0) {
    717e:	d5 01       	movw	r26, r10
    7180:	14 96       	adiw	r26, 0x04	; 4
    7182:	2d 90       	ld	r2, X+
    7184:	3d 90       	ld	r3, X+
    7186:	4d 90       	ld	r4, X+
    7188:	5c 90       	ld	r5, X
    718a:	17 97       	sbiw	r26, 0x07	; 7
    718c:	c2 01       	movw	r24, r4
    718e:	b1 01       	movw	r22, r2
    7190:	20 e0       	ldi	r18, 0x00	; 0
    7192:	30 e0       	ldi	r19, 0x00	; 0
    7194:	40 e0       	ldi	r20, 0x00	; 0
    7196:	50 e0       	ldi	r21, 0x00	; 0
    7198:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    719c:	88 23       	and	r24, r24
    719e:	09 f4       	brne	.+2      	; 0x71a2 <_ZN10Movimiento6updateEm+0x1cce>
    71a0:	51 c0       	rjmp	.+162    	; 0x7244 <_ZN10Movimiento6updateEm+0x1d70>
							if (!bd.oscilator[index].brown) {
    71a2:	f5 01       	movw	r30, r10
    71a4:	80 89       	ldd	r24, Z+16	; 0x10
    71a6:	88 23       	and	r24, r24
    71a8:	a9 f5       	brne	.+106    	; 0x7214 <_ZN10Movimiento6updateEm+0x1d40>
								bd.param_tronco[index] = bd.oscilator[index].amp*sin (sh.cn.tick*angle_step*bd.oscilator[index].freq + bd.oscilator[index].phase);
    71aa:	c5 58       	subi	r28, 0x85	; 133
    71ac:	de 4f       	sbci	r29, 0xFE	; 254
    71ae:	a8 81       	ld	r26, Y
    71b0:	b9 81       	ldd	r27, Y+1	; 0x01
    71b2:	cb 57       	subi	r28, 0x7B	; 123
    71b4:	d1 40       	sbci	r29, 0x01	; 1
    71b6:	6d 91       	ld	r22, X+
    71b8:	7c 91       	ld	r23, X
    71ba:	80 e0       	ldi	r24, 0x00	; 0
    71bc:	90 e0       	ldi	r25, 0x00	; 0
    71be:	0e 94 6b 7d 	call	0xfad6	; 0xfad6 <__floatunsisf>
    71c2:	22 e9       	ldi	r18, 0x92	; 146
    71c4:	3a e0       	ldi	r19, 0x0A	; 10
    71c6:	46 e8       	ldi	r20, 0x86	; 134
    71c8:	5e e3       	ldi	r21, 0x3E	; 62
    71ca:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    71ce:	f5 01       	movw	r30, r10
    71d0:	20 85       	ldd	r18, Z+8	; 0x08
    71d2:	31 85       	ldd	r19, Z+9	; 0x09
    71d4:	42 85       	ldd	r20, Z+10	; 0x0a
    71d6:	53 85       	ldd	r21, Z+11	; 0x0b
    71d8:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    71dc:	d5 01       	movw	r26, r10
    71de:	1c 96       	adiw	r26, 0x0c	; 12
    71e0:	2d 91       	ld	r18, X+
    71e2:	3d 91       	ld	r19, X+
    71e4:	4d 91       	ld	r20, X+
    71e6:	5c 91       	ld	r21, X
    71e8:	1f 97       	sbiw	r26, 0x0f	; 15
    71ea:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    71ee:	0e 94 5f 80 	call	0x100be	; 0x100be <sin>
    71f2:	9b 01       	movw	r18, r22
    71f4:	ac 01       	movw	r20, r24
    71f6:	c2 01       	movw	r24, r4
    71f8:	b1 01       	movw	r22, r2
    71fa:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    71fe:	c7 5a       	subi	r28, 0xA7	; 167
    7200:	de 4f       	sbci	r29, 0xFE	; 254
    7202:	e8 81       	ld	r30, Y
    7204:	f9 81       	ldd	r31, Y+1	; 0x01
    7206:	c9 55       	subi	r28, 0x59	; 89
    7208:	d1 40       	sbci	r29, 0x01	; 1
    720a:	60 83       	st	Z, r22
    720c:	71 83       	std	Z+1, r23	; 0x01
    720e:	82 83       	std	Z+2, r24	; 0x02
    7210:	93 83       	std	Z+3, r25	; 0x03
    7212:	18 c0       	rjmp	.+48     	; 0x7244 <_ZN10Movimiento6updateEm+0x1d70>
							} else {
								brownian_noise (&bd.param_tronco[index], 0, bd.oscilator[index].amp, bd.oscilator[index].freq);     // revisar esto y la brownian noise
    7214:	c4 01       	movw	r24, r8
    7216:	88 0f       	add	r24, r24
    7218:	99 1f       	adc	r25, r25
    721a:	88 0f       	add	r24, r24
    721c:	99 1f       	adc	r25, r25
    721e:	87 58       	subi	r24, 0x87	; 135
    7220:	9f 4f       	sbci	r25, 0xFF	; 255
    7222:	d5 01       	movw	r26, r10
    7224:	18 96       	adiw	r26, 0x08	; 8
    7226:	cd 90       	ld	r12, X+
    7228:	dd 90       	ld	r13, X+
    722a:	ed 90       	ld	r14, X+
    722c:	fc 90       	ld	r15, X
    722e:	1b 97       	sbiw	r26, 0x0b	; 11
    7230:	86 0d       	add	r24, r6
    7232:	97 1d       	adc	r25, r7
    7234:	40 e0       	ldi	r20, 0x00	; 0
    7236:	50 e0       	ldi	r21, 0x00	; 0
    7238:	60 e0       	ldi	r22, 0x00	; 0
    723a:	70 e0       	ldi	r23, 0x00	; 0
    723c:	92 01       	movw	r18, r4
    723e:	81 01       	movw	r16, r2
    7240:	0e 94 b8 66 	call	0xcd70	; 0xcd70 <_Z14brownian_noisePffff>
    7244:	08 94       	sec
    7246:	81 1c       	adc	r8, r1
    7248:	91 1c       	adc	r9, r1
    724a:	ed e0       	ldi	r30, 0x0D	; 13
    724c:	f0 e0       	ldi	r31, 0x00	; 0
    724e:	ae 0e       	add	r10, r30
    7250:	bf 1e       	adc	r11, r31
    7252:	c7 5a       	subi	r28, 0xA7	; 167
    7254:	de 4f       	sbci	r29, 0xFE	; 254
    7256:	28 81       	ld	r18, Y
    7258:	39 81       	ldd	r19, Y+1	; 0x01
    725a:	c9 55       	subi	r28, 0x59	; 89
    725c:	d1 40       	sbci	r29, 0x01	; 1
    725e:	2c 5f       	subi	r18, 0xFC	; 252
    7260:	3f 4f       	sbci	r19, 0xFF	; 255
    7262:	c7 5a       	subi	r28, 0xA7	; 167
    7264:	de 4f       	sbci	r29, 0xFE	; 254
    7266:	39 83       	std	Y+1, r19	; 0x01
    7268:	28 83       	st	Y, r18
    726a:	c9 55       	subi	r28, 0x59	; 89
    726c:	d1 40       	sbci	r29, 0x01	; 1
					// no me acuerdo qué se suponía que iba a ir acá
					
					break;
				}
				case TRONCO: {
					for (byte index=0; index<9; index++) {
    726e:	39 e0       	ldi	r19, 0x09	; 9
    7270:	83 16       	cp	r8, r19
    7272:	91 04       	cpc	r9, r1
    7274:	09 f0       	breq	.+2      	; 0x7278 <_ZN10Movimiento6updateEm+0x1da4>
    7276:	83 cf       	rjmp	.-250    	; 0x717e <_ZN10Movimiento6updateEm+0x1caa>
						}
					}
					// el centro de la oscilación es sh.mv.pos_ref
					// eso hace posible que la amplitud de la oscilación sea la desviación con respecto a sh.mv.pos_ref
					// en el caso de los centros, la referencia es bd.centro_ref
					tronco (sh.mv.pos_ref, (COORD3D){bd.param_tronco[0],bd.param_tronco[1],bd.param_tronco[2]}, suma((COORD3D){bd.param_tronco[3],bd.param_tronco[4],bd.param_tronco[5]}, bd.centro_ref), bd.param_tronco[6], bd.param_tronco[7], bd.param_tronco[8], sh.mv.escala, sh.mv.nsegmentos);
    7278:	4d e7       	ldi	r20, 0x7D	; 125
    727a:	50 e0       	ldi	r21, 0x00	; 0
    727c:	64 0e       	add	r6, r20
    727e:	75 1e       	adc	r7, r21
    7280:	d3 01       	movw	r26, r6
    7282:	2d 91       	ld	r18, X+
    7284:	3d 91       	ld	r19, X+
    7286:	4d 91       	ld	r20, X+
    7288:	5d 91       	ld	r21, X+
    728a:	3d 01       	movw	r6, r26
    728c:	ed 90       	ld	r14, X+
    728e:	fd 90       	ld	r15, X+
    7290:	0d 91       	ld	r16, X+
    7292:	1c 91       	ld	r17, X
    7294:	fe 01       	movw	r30, r28
    7296:	e3 5f       	subi	r30, 0xF3	; 243
    7298:	fe 4f       	sbci	r31, 0xFE	; 254
    729a:	68 ef       	ldi	r22, 0xF8	; 248
    729c:	7f ef       	ldi	r23, 0xFF	; 255
    729e:	66 0e       	add	r6, r22
    72a0:	77 1e       	adc	r7, r23
    72a2:	d3 01       	movw	r26, r6
    72a4:	ad 90       	ld	r10, X+
    72a6:	bd 90       	ld	r11, X+
    72a8:	cd 90       	ld	r12, X+
    72aa:	dc 90       	ld	r13, X
    72ac:	a0 82       	st	Z, r10
    72ae:	b1 82       	std	Z+1, r11	; 0x01
    72b0:	c2 82       	std	Z+2, r12	; 0x02
    72b2:	d3 82       	std	Z+3, r13	; 0x03
    72b4:	24 83       	std	Z+4, r18	; 0x04
    72b6:	35 83       	std	Z+5, r19	; 0x05
    72b8:	46 83       	std	Z+6, r20	; 0x06
    72ba:	57 83       	std	Z+7, r21	; 0x07
    72bc:	e0 86       	std	Z+8, r14	; 0x08
    72be:	f1 86       	std	Z+9, r15	; 0x09
    72c0:	02 87       	std	Z+10, r16	; 0x0a
    72c2:	13 87       	std	Z+11, r17	; 0x0b
    72c4:	e0 e1       	ldi	r30, 0x10	; 16
    72c6:	f0 e0       	ldi	r31, 0x00	; 0
    72c8:	6e 0e       	add	r6, r30
    72ca:	7f 1e       	adc	r7, r31
    72cc:	d3 01       	movw	r26, r6
    72ce:	2d 91       	ld	r18, X+
    72d0:	3d 91       	ld	r19, X+
    72d2:	4d 91       	ld	r20, X+
    72d4:	5d 91       	ld	r21, X+
    72d6:	3d 01       	movw	r6, r26
    72d8:	ed 90       	ld	r14, X+
    72da:	fd 90       	ld	r15, X+
    72dc:	0d 91       	ld	r16, X+
    72de:	1c 91       	ld	r17, X
    72e0:	fe 01       	movw	r30, r28
    72e2:	e7 5e       	subi	r30, 0xE7	; 231
    72e4:	fe 4f       	sbci	r31, 0xFE	; 254
    72e6:	66 0e       	add	r6, r22
    72e8:	77 1e       	adc	r7, r23
    72ea:	d3 01       	movw	r26, r6
    72ec:	ad 90       	ld	r10, X+
    72ee:	bd 90       	ld	r11, X+
    72f0:	cd 90       	ld	r12, X+
    72f2:	dc 90       	ld	r13, X
    72f4:	6b e7       	ldi	r22, 0x7B	; 123
    72f6:	7f ef       	ldi	r23, 0xFF	; 255
    72f8:	66 0e       	add	r6, r22
    72fa:	77 1e       	adc	r7, r23
    72fc:	a0 82       	st	Z, r10
    72fe:	b1 82       	std	Z+1, r11	; 0x01
    7300:	c2 82       	std	Z+2, r12	; 0x02
    7302:	d3 82       	std	Z+3, r13	; 0x03
    7304:	24 83       	std	Z+4, r18	; 0x04
    7306:	35 83       	std	Z+5, r19	; 0x05
    7308:	46 83       	std	Z+6, r20	; 0x06
    730a:	57 83       	std	Z+7, r21	; 0x07
    730c:	e0 86       	std	Z+8, r14	; 0x08
    730e:	f1 86       	std	Z+9, r15	; 0x09
    7310:	02 87       	std	Z+10, r16	; 0x0a
    7312:	13 87       	std	Z+11, r17	; 0x0b
    7314:	8d b7       	in	r24, 0x3d	; 61
    7316:	9e b7       	in	r25, 0x3e	; 62
    7318:	0c 97       	sbiw	r24, 0x0c	; 12
    731a:	0f b6       	in	r0, 0x3f	; 63
    731c:	f8 94       	cli
    731e:	9e bf       	out	0x3e, r25	; 62
    7320:	0f be       	out	0x3f, r0	; 63
    7322:	8d bf       	out	0x3d, r24	; 61
    7324:	2d b7       	in	r18, 0x3d	; 61
    7326:	3e b7       	in	r19, 0x3e	; 62
    7328:	2f 5f       	subi	r18, 0xFF	; 255
    732a:	3f 4f       	sbci	r19, 0xFF	; 255
    732c:	a3 01       	movw	r20, r6
    732e:	43 56       	subi	r20, 0x63	; 99
    7330:	5f 4f       	sbci	r21, 0xFF	; 255
    7332:	8c e0       	ldi	r24, 0x0C	; 12
    7334:	da 01       	movw	r26, r20
    7336:	0d 90       	ld	r0, X+
    7338:	ad 01       	movw	r20, r26
    733a:	d9 01       	movw	r26, r18
    733c:	0d 92       	st	X+, r0
    733e:	9d 01       	movw	r18, r26
    7340:	81 50       	subi	r24, 0x01	; 1
    7342:	c1 f7       	brne	.-16     	; 0x7334 <_ZN10Movimiento6updateEm+0x1e60>
    7344:	ce 01       	movw	r24, r28
    7346:	8b 5d       	subi	r24, 0xDB	; 219
    7348:	9e 4f       	sbci	r25, 0xFE	; 254
    734a:	c0 80       	ld	r12, Z
    734c:	d1 80       	ldd	r13, Z+1	; 0x01
    734e:	e2 80       	ldd	r14, Z+2	; 0x02
    7350:	f3 80       	ldd	r15, Z+3	; 0x03
    7352:	04 81       	ldd	r16, Z+4	; 0x04
    7354:	15 81       	ldd	r17, Z+5	; 0x05
    7356:	26 81       	ldd	r18, Z+6	; 0x06
    7358:	37 81       	ldd	r19, Z+7	; 0x07
    735a:	40 85       	ldd	r20, Z+8	; 0x08
    735c:	51 85       	ldd	r21, Z+9	; 0x09
    735e:	62 85       	ldd	r22, Z+10	; 0x0a
    7360:	73 85       	ldd	r23, Z+11	; 0x0b
    7362:	0e 94 1c 69 	call	0xd238	; 0xd238 <_Z4suma7COORD3DS_>
    7366:	ed b7       	in	r30, 0x3d	; 61
    7368:	fe b7       	in	r31, 0x3e	; 62
    736a:	3f 97       	sbiw	r30, 0x0f	; 15
    736c:	0f b6       	in	r0, 0x3f	; 63
    736e:	f8 94       	cli
    7370:	fe bf       	out	0x3e, r31	; 62
    7372:	0f be       	out	0x3f, r0	; 63
    7374:	ed bf       	out	0x3d, r30	; 61
    7376:	31 96       	adiw	r30, 0x01	; 1
    7378:	b3 01       	movw	r22, r6
    737a:	68 56       	subi	r22, 0x68	; 104
    737c:	7e 4f       	sbci	r23, 0xFE	; 254
    737e:	8d e0       	ldi	r24, 0x0D	; 13
    7380:	88 2e       	mov	r8, r24
    7382:	81 e0       	ldi	r24, 0x01	; 1
    7384:	98 2e       	mov	r9, r24
    7386:	8c 0e       	add	r8, r28
    7388:	9d 1e       	adc	r9, r29
    738a:	9f 01       	movw	r18, r30
    738c:	ae 01       	movw	r20, r28
    738e:	4b 5d       	subi	r20, 0xDB	; 219
    7390:	5e 4f       	sbci	r21, 0xFE	; 254
    7392:	8c e0       	ldi	r24, 0x0C	; 12
    7394:	da 01       	movw	r26, r20
    7396:	0d 90       	ld	r0, X+
    7398:	ad 01       	movw	r20, r26
    739a:	d9 01       	movw	r26, r18
    739c:	0d 92       	st	X+, r0
    739e:	9d 01       	movw	r18, r26
    73a0:	81 50       	subi	r24, 0x01	; 1
    73a2:	c1 f7       	brne	.-16     	; 0x7394 <_ZN10Movimiento6updateEm+0x1ec0>
    73a4:	21 e9       	ldi	r18, 0x91	; 145
    73a6:	30 e0       	ldi	r19, 0x00	; 0
    73a8:	62 0e       	add	r6, r18
    73aa:	73 1e       	adc	r7, r19
    73ac:	d3 01       	movw	r26, r6
    73ae:	2d 91       	ld	r18, X+
    73b0:	3d 91       	ld	r19, X+
    73b2:	4d 91       	ld	r20, X+
    73b4:	5d 91       	ld	r21, X+
    73b6:	24 87       	std	Z+12, r18	; 0x0c
    73b8:	35 87       	std	Z+13, r19	; 0x0d
    73ba:	46 87       	std	Z+14, r20	; 0x0e
    73bc:	57 87       	std	Z+15, r21	; 0x0f
    73be:	2d 91       	ld	r18, X+
    73c0:	3d 91       	ld	r19, X+
    73c2:	4d 91       	ld	r20, X+
    73c4:	5d 91       	ld	r21, X+
    73c6:	3d 01       	movw	r6, r26
    73c8:	20 8b       	std	Z+16, r18	; 0x10
    73ca:	31 8b       	std	Z+17, r19	; 0x11
    73cc:	42 8b       	std	Z+18, r20	; 0x12
    73ce:	53 8b       	std	Z+19, r21	; 0x13
    73d0:	2d 91       	ld	r18, X+
    73d2:	3d 91       	ld	r19, X+
    73d4:	4d 91       	ld	r20, X+
    73d6:	5c 91       	ld	r21, X
    73d8:	24 8b       	std	Z+20, r18	; 0x14
    73da:	35 8b       	std	Z+21, r19	; 0x15
    73dc:	46 8b       	std	Z+22, r20	; 0x16
    73de:	57 8b       	std	Z+23, r21	; 0x17
    73e0:	27 e4       	ldi	r18, 0x47	; 71
    73e2:	31 e0       	ldi	r19, 0x01	; 1
    73e4:	62 0e       	add	r6, r18
    73e6:	73 1e       	adc	r7, r19
    73e8:	d3 01       	movw	r26, r6
    73ea:	8d 91       	ld	r24, X+
    73ec:	3d 01       	movw	r6, r26
    73ee:	80 8f       	std	Z+24, r24	; 0x18
    73f0:	11 8e       	std	Z+25, r1	; 0x19
    73f2:	8c 91       	ld	r24, X
    73f4:	2f e1       	ldi	r18, 0x1F	; 31
    73f6:	3e ef       	ldi	r19, 0xFE	; 254
    73f8:	62 0e       	add	r6, r18
    73fa:	73 1e       	adc	r7, r19
    73fc:	82 8f       	std	Z+26, r24	; 0x1a
    73fe:	c3 01       	movw	r24, r6
    7400:	d4 01       	movw	r26, r8
    7402:	ac 90       	ld	r10, X
    7404:	11 96       	adiw	r26, 0x01	; 1
    7406:	bc 90       	ld	r11, X
    7408:	11 97       	sbiw	r26, 0x01	; 1
    740a:	12 96       	adiw	r26, 0x02	; 2
    740c:	cc 90       	ld	r12, X
    740e:	12 97       	sbiw	r26, 0x02	; 2
    7410:	13 96       	adiw	r26, 0x03	; 3
    7412:	dc 90       	ld	r13, X
    7414:	13 97       	sbiw	r26, 0x03	; 3
    7416:	14 96       	adiw	r26, 0x04	; 4
    7418:	ec 90       	ld	r14, X
    741a:	14 97       	sbiw	r26, 0x04	; 4
    741c:	15 96       	adiw	r26, 0x05	; 5
    741e:	fc 90       	ld	r15, X
    7420:	15 97       	sbiw	r26, 0x05	; 5
    7422:	16 96       	adiw	r26, 0x06	; 6
    7424:	0c 91       	ld	r16, X
    7426:	16 97       	sbiw	r26, 0x06	; 6
    7428:	17 96       	adiw	r26, 0x07	; 7
    742a:	1c 91       	ld	r17, X
    742c:	17 97       	sbiw	r26, 0x07	; 7
    742e:	18 96       	adiw	r26, 0x08	; 8
    7430:	2c 91       	ld	r18, X
    7432:	18 97       	sbiw	r26, 0x08	; 8
    7434:	19 96       	adiw	r26, 0x09	; 9
    7436:	3c 91       	ld	r19, X
    7438:	19 97       	sbiw	r26, 0x09	; 9
    743a:	1a 96       	adiw	r26, 0x0a	; 10
    743c:	4c 91       	ld	r20, X
    743e:	1a 97       	sbiw	r26, 0x0a	; 10
    7440:	1b 96       	adiw	r26, 0x0b	; 11
    7442:	5c 91       	ld	r21, X
    7444:	0e 94 5d 24 	call	0x48ba	; 0x48ba <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih>
    7448:	ed b7       	in	r30, 0x3d	; 61
    744a:	fe b7       	in	r31, 0x3e	; 62
    744c:	7b 96       	adiw	r30, 0x1b	; 27
    744e:	0f b6       	in	r0, 0x3f	; 63
    7450:	f8 94       	cli
    7452:	fe bf       	out	0x3e, r31	; 62
    7454:	0f be       	out	0x3f, r0	; 63
    7456:	ed bf       	out	0x3d, r30	; 61
					break;
				}
			}
			sh.cn.tick ++;
    7458:	f3 01       	movw	r30, r6
    745a:	ea 51       	subi	r30, 0x1A	; 26
    745c:	fe 4f       	sbci	r31, 0xFE	; 254
    745e:	80 81       	ld	r24, Z
    7460:	91 81       	ldd	r25, Z+1	; 0x01
    7462:	01 96       	adiw	r24, 0x01	; 1
    7464:	91 83       	std	Z+1, r25	; 0x01
    7466:	80 83       	st	Z, r24
    7468:	02 c0       	rjmp	.+4      	; 0x746e <_ZN10Movimiento6updateEm+0x1f9a>
		} else {
			sh.cn.enable = false;
    746a:	da 01       	movw	r26, r20
    746c:	1c 92       	st	X, r1
		}
	}
	 
    746e:	c4 58       	subi	r28, 0x84	; 132
    7470:	de 4f       	sbci	r29, 0xFE	; 254
    7472:	0f b6       	in	r0, 0x3f	; 63
    7474:	f8 94       	cli
    7476:	de bf       	out	0x3e, r29	; 62
    7478:	0f be       	out	0x3f, r0	; 63
    747a:	cd bf       	out	0x3d, r28	; 61
    747c:	cf 91       	pop	r28
    747e:	df 91       	pop	r29
    7480:	1f 91       	pop	r17
    7482:	0f 91       	pop	r16
    7484:	ff 90       	pop	r15
    7486:	ef 90       	pop	r14
    7488:	df 90       	pop	r13
    748a:	cf 90       	pop	r12
    748c:	bf 90       	pop	r11
    748e:	af 90       	pop	r10
    7490:	9f 90       	pop	r9
    7492:	8f 90       	pop	r8
    7494:	7f 90       	pop	r7
    7496:	6f 90       	pop	r6
    7498:	5f 90       	pop	r5
    749a:	4f 90       	pop	r4
    749c:	3f 90       	pop	r3
    749e:	2f 90       	pop	r2
    74a0:	08 95       	ret

000074a2 <_ZN10Movimiento14caminata_init2Ev>:
	sh.cn.tick = wk.mv.periodo_pasos*(wk.rt.index%wk.mv.agrupamiento);   // esto equivale a inicializarlo en 0, tiene el efecto de que arranque dando un pasito
	
}

// inicialización del runtime de la caminata "on-the-fly"
void Movimiento::caminata_init2 () { 
    74a2:	af 92       	push	r10
    74a4:	bf 92       	push	r11
    74a6:	cf 92       	push	r12
    74a8:	df 92       	push	r13
    74aa:	ef 92       	push	r14
    74ac:	ff 92       	push	r15
    74ae:	0f 93       	push	r16
    74b0:	1f 93       	push	r17
    74b2:	cf 93       	push	r28
    74b4:	df 93       	push	r29
    74b6:	ec 01       	movw	r28, r24
	 
	// variables geométricas internas de la caminata (no son parámetros)              
	if (wk.mv.rotacion) {
    74b8:	71 eb       	ldi	r23, 0xB1	; 177
    74ba:	c7 2e       	mov	r12, r23
    74bc:	d1 2c       	mov	r13, r1
    74be:	c8 0e       	add	r12, r24
    74c0:	d9 1e       	adc	r13, r25
    74c2:	d6 01       	movw	r26, r12
    74c4:	ed 90       	ld	r14, X+
    74c6:	fd 90       	ld	r15, X+
    74c8:	0d 91       	ld	r16, X+
    74ca:	1c 91       	ld	r17, X
    74cc:	c8 01       	movw	r24, r16
    74ce:	b7 01       	movw	r22, r14
    74d0:	20 e0       	ldi	r18, 0x00	; 0
    74d2:	30 e0       	ldi	r19, 0x00	; 0
    74d4:	40 e0       	ldi	r20, 0x00	; 0
    74d6:	50 e0       	ldi	r21, 0x00	; 0
    74d8:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    74dc:	88 23       	and	r24, r24
    74de:	e9 f0       	breq	.+58     	; 0x751a <_ZN10Movimiento14caminata_init2Ev+0x78>
		getRotationMatrix (wk.rt.rotor1, -wk.mv.rotacion);                     // matriz de rotación del cuerpo
    74e0:	b8 01       	movw	r22, r16
    74e2:	a7 01       	movw	r20, r14
    74e4:	70 58       	subi	r23, 0x80	; 128
    74e6:	ce 01       	movw	r24, r28
    74e8:	80 53       	subi	r24, 0x30	; 48
    74ea:	9f 4f       	sbci	r25, 0xFF	; 255
    74ec:	0e 94 ae 77 	call	0xef5c	; 0xef5c <_Z17getRotationMatrixP7COORD2Df>
		getRotationMatrix (wk.rt.rotor2, wk.mv.rotacion*wk.rt.coeficiente);       // matriz de rotación de los "pasitos". 
    74f0:	c4 53       	subi	r28, 0x34	; 52
    74f2:	df 4f       	sbci	r29, 0xFF	; 255
    74f4:	f6 01       	movw	r30, r12
    74f6:	60 81       	ld	r22, Z
    74f8:	71 81       	ldd	r23, Z+1	; 0x01
    74fa:	82 81       	ldd	r24, Z+2	; 0x02
    74fc:	93 81       	ldd	r25, Z+3	; 0x03
    74fe:	28 81       	ld	r18, Y
    7500:	39 81       	ldd	r19, Y+1	; 0x01
    7502:	4a 81       	ldd	r20, Y+2	; 0x02
    7504:	5b 81       	ldd	r21, Y+3	; 0x03
    7506:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    750a:	ab 01       	movw	r20, r22
    750c:	bc 01       	movw	r22, r24
    750e:	64 96       	adiw	r28, 0x14	; 20
    7510:	ce 01       	movw	r24, r28
    7512:	c0 5e       	subi	r28, 0xE0	; 224
    7514:	d0 40       	sbci	r29, 0x00	; 0
    7516:	0e 94 ae 77 	call	0xef5c	; 0xef5c <_Z17getRotationMatrixP7COORD2Df>
    751a:	20 e0       	ldi	r18, 0x00	; 0
	}
 
	// variables de control de la caminata
	for (byte f=0; f<wk.mv.fases; f++) {wk.rt.counter [f] += wk.mv.duracion_pasos;}     // empieza valiendo duracion_pasos
    751c:	ae 01       	movw	r20, r28
    751e:	45 54       	subi	r20, 0x45	; 69
    7520:	5f 4f       	sbci	r21, 0xFF	; 255
    7522:	61 ec       	ldi	r22, 0xC1	; 193
    7524:	a6 2e       	mov	r10, r22
    7526:	b1 2c       	mov	r11, r1
    7528:	ac 0e       	add	r10, r28
    752a:	bd 1e       	adc	r11, r29
    752c:	0b c0       	rjmp	.+22     	; 0x7544 <_ZN10Movimiento14caminata_init2Ev+0xa2>
    752e:	fe 01       	movw	r30, r28
    7530:	e2 0f       	add	r30, r18
    7532:	f1 1d       	adc	r31, r1
    7534:	ee 57       	subi	r30, 0x7E	; 126
    7536:	fe 4f       	sbci	r31, 0xFE	; 254
    7538:	80 81       	ld	r24, Z
    753a:	d5 01       	movw	r26, r10
    753c:	9c 91       	ld	r25, X
    753e:	89 0f       	add	r24, r25
    7540:	80 83       	st	Z, r24
    7542:	2f 5f       	subi	r18, 0xFF	; 255
    7544:	fa 01       	movw	r30, r20
    7546:	d0 80       	ld	r13, Z
    7548:	2d 15       	cp	r18, r13
    754a:	88 f3       	brcs	.-30     	; 0x752e <_ZN10Movimiento14caminata_init2Ev+0x8c>
																																			               // esto hace que durante el primer pasito no haya movimiento del tronco (al no haber patas "apoyadas")
	wk.mv.compensate = false;
    754c:	cd 53       	subi	r28, 0x3D	; 61
    754e:	df 4f       	sbci	r29, 0xFF	; 255
    7550:	18 82       	st	Y, r1
    7552:	c3 5c       	subi	r28, 0xC3	; 195
    7554:	d0 40       	sbci	r29, 0x00	; 0
	sh.cn.tick %= wk.mv.periodo_sub_ciclo;
    7556:	fe 01       	movw	r30, r28
    7558:	ea 51       	subi	r30, 0x1A	; 26
    755a:	fe 4f       	sbci	r31, 0xFE	; 254
    755c:	c3 54       	subi	r28, 0x43	; 67
    755e:	df 4f       	sbci	r29, 0xFF	; 255
    7560:	28 81       	ld	r18, Y
    7562:	39 81       	ldd	r19, Y+1	; 0x01
    7564:	80 81       	ld	r24, Z
    7566:	91 81       	ldd	r25, Z+1	; 0x01
    7568:	b9 01       	movw	r22, r18
    756a:	0e 94 0b 81 	call	0x10216	; 0x10216 <__udivmodhi4>
    756e:	91 83       	std	Z+1, r25	; 0x01
    7570:	80 83       	st	Z, r24
	
	// esto es de la init normal
	wk.rt.ciclo = wk.mv.periodo_sub_ciclo*wk.mv.fases/wk.mv.agrupamiento;              // duración total del ciclo (en ticks) 
    7572:	8d 2d       	mov	r24, r13
    7574:	90 e0       	ldi	r25, 0x00	; 0
    7576:	6a 91       	ld	r22, -Y
    7578:	ac 01       	movw	r20, r24
    757a:	42 9f       	mul	r20, r18
    757c:	c0 01       	movw	r24, r0
    757e:	43 9f       	mul	r20, r19
    7580:	90 0d       	add	r25, r0
    7582:	52 9f       	mul	r21, r18
    7584:	90 0d       	add	r25, r0
    7586:	11 24       	eor	r1, r1
    7588:	70 e0       	ldi	r23, 0x00	; 0
    758a:	0e 94 1f 81 	call	0x1023e	; 0x1023e <__divmodhi4>
    758e:	88 27       	eor	r24, r24
    7590:	77 fd       	sbrc	r23, 7
    7592:	80 95       	com	r24
    7594:	98 2f       	mov	r25, r24
    7596:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    759a:	7b 01       	movw	r14, r22
    759c:	8c 01       	movw	r16, r24
    759e:	2c 96       	adiw	r28, 0x0c	; 12
    75a0:	69 93       	st	Y+, r22
    75a2:	79 93       	st	Y+, r23
    75a4:	89 93       	st	Y+, r24
    75a6:	99 93       	st	Y+, r25
	wk.rt.coeficiente = (wk.rt.ciclo-wk.mv.duracion_pasos) / 2;                     // duracion de los "pasitos" (en ticks)
    75a8:	d5 01       	movw	r26, r10
    75aa:	6d 91       	ld	r22, X+
    75ac:	7c 91       	ld	r23, X
    75ae:	88 27       	eor	r24, r24
    75b0:	77 fd       	sbrc	r23, 7
    75b2:	80 95       	com	r24
    75b4:	98 2f       	mov	r25, r24
    75b6:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    75ba:	9b 01       	movw	r18, r22
    75bc:	ac 01       	movw	r20, r24
    75be:	c8 01       	movw	r24, r16
    75c0:	b7 01       	movw	r22, r14
    75c2:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    75c6:	20 e0       	ldi	r18, 0x00	; 0
    75c8:	30 e0       	ldi	r19, 0x00	; 0
    75ca:	40 e0       	ldi	r20, 0x00	; 0
    75cc:	5f e3       	ldi	r21, 0x3F	; 63
    75ce:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    75d2:	68 83       	st	Y, r22
    75d4:	79 83       	std	Y+1, r23	; 0x01
    75d6:	8a 83       	std	Y+2, r24	; 0x02
    75d8:	9b 83       	std	Y+3, r25	; 0x03
    75da:	cc 5c       	subi	r28, 0xCC	; 204
    75dc:	d0 40       	sbci	r29, 0x00	; 0
	wk.rt.index %= wk.mv.fases;
    75de:	fe 01       	movw	r30, r28
    75e0:	e0 58       	subi	r30, 0x80	; 128
    75e2:	fe 4f       	sbci	r31, 0xFE	; 254
    75e4:	80 81       	ld	r24, Z
    75e6:	90 e0       	ldi	r25, 0x00	; 0
    75e8:	6d 2d       	mov	r22, r13
    75ea:	70 e0       	ldi	r23, 0x00	; 0
    75ec:	0e 94 0b 81 	call	0x10216	; 0x10216 <__udivmodhi4>
    75f0:	80 83       	st	Z, r24
	sh.cn.pausa = 1000*TICK*sh.mv.escala;
    75f2:	c0 52       	subi	r28, 0x20	; 32
    75f4:	de 4f       	sbci	r29, 0xFE	; 254
    75f6:	68 81       	ld	r22, Y
    75f8:	70 e0       	ldi	r23, 0x00	; 0
    75fa:	88 27       	eor	r24, r24
    75fc:	77 fd       	sbrc	r23, 7
    75fe:	80 95       	com	r24
    7600:	98 2f       	mov	r25, r24
    7602:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    7606:	20 e0       	ldi	r18, 0x00	; 0
    7608:	30 e0       	ldi	r19, 0x00	; 0
    760a:	40 e8       	ldi	r20, 0x80	; 128
    760c:	50 e4       	ldi	r21, 0x40	; 64
    760e:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    7612:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <__fixsfsi>
    7616:	28 96       	adiw	r28, 0x08	; 8
    7618:	79 83       	std	Y+1, r23	; 0x01
    761a:	68 83       	st	Y, r22
	
}
    761c:	df 91       	pop	r29
    761e:	cf 91       	pop	r28
    7620:	1f 91       	pop	r17
    7622:	0f 91       	pop	r16
    7624:	ff 90       	pop	r15
    7626:	ef 90       	pop	r14
    7628:	df 90       	pop	r13
    762a:	cf 90       	pop	r12
    762c:	bf 90       	pop	r11
    762e:	af 90       	pop	r10
    7630:	08 95       	ret

00007632 <_ZN10Movimiento13caminata_initEv>:
	}
	
}

// inicialización del runtime de la caminata
void Movimiento::caminata_init () {           
    7632:	2f 92       	push	r2
    7634:	3f 92       	push	r3
    7636:	4f 92       	push	r4
    7638:	5f 92       	push	r5
    763a:	6f 92       	push	r6
    763c:	7f 92       	push	r7
    763e:	8f 92       	push	r8
    7640:	9f 92       	push	r9
    7642:	af 92       	push	r10
    7644:	bf 92       	push	r11
    7646:	cf 92       	push	r12
    7648:	df 92       	push	r13
    764a:	ef 92       	push	r14
    764c:	ff 92       	push	r15
    764e:	0f 93       	push	r16
    7650:	1f 93       	push	r17
    7652:	df 93       	push	r29
    7654:	cf 93       	push	r28
    7656:	cd b7       	in	r28, 0x3d	; 61
    7658:	de b7       	in	r29, 0x3e	; 62
    765a:	6a 97       	sbiw	r28, 0x1a	; 26
    765c:	0f b6       	in	r0, 0x3f	; 63
    765e:	f8 94       	cli
    7660:	de bf       	out	0x3e, r29	; 62
    7662:	0f be       	out	0x3f, r0	; 63
    7664:	cd bf       	out	0x3d, r28	; 61
    7666:	2c 01       	movw	r4, r24
	 
	// variables geométricas internas de la caminata (no son parámetros)              
	wk.rt.ciclo = wk.mv.periodo_sub_ciclo*wk.mv.fases/wk.mv.agrupamiento;                 // duración total del ciclo (en ticks) 
    7668:	2b eb       	ldi	r18, 0xBB	; 187
    766a:	30 e0       	ldi	r19, 0x00	; 0
    766c:	42 0e       	add	r4, r18
    766e:	53 1e       	adc	r5, r19
    7670:	d2 01       	movw	r26, r4
    7672:	8c 91       	ld	r24, X
    7674:	90 e0       	ldi	r25, 0x00	; 0
    7676:	e2 e0       	ldi	r30, 0x02	; 2
    7678:	f0 e0       	ldi	r31, 0x00	; 0
    767a:	4e 0e       	add	r4, r30
    767c:	5f 1e       	adc	r5, r31
    767e:	d2 01       	movw	r26, r4
    7680:	2d 91       	ld	r18, X+
    7682:	3c 91       	ld	r19, X
    7684:	f2 01       	movw	r30, r4
    7686:	62 91       	ld	r22, -Z
    7688:	2f 01       	movw	r4, r30
    768a:	ac 01       	movw	r20, r24
    768c:	42 9f       	mul	r20, r18
    768e:	c0 01       	movw	r24, r0
    7690:	43 9f       	mul	r20, r19
    7692:	90 0d       	add	r25, r0
    7694:	52 9f       	mul	r21, r18
    7696:	90 0d       	add	r25, r0
    7698:	11 24       	eor	r1, r1
    769a:	70 e0       	ldi	r23, 0x00	; 0
    769c:	0e 94 1f 81 	call	0x1023e	; 0x1023e <__divmodhi4>
    76a0:	88 27       	eor	r24, r24
    76a2:	77 fd       	sbrc	r23, 7
    76a4:	80 95       	com	r24
    76a6:	98 2f       	mov	r25, r24
    76a8:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    76ac:	7b 01       	movw	r14, r22
    76ae:	8c 01       	movw	r16, r24
    76b0:	8c e0       	ldi	r24, 0x0C	; 12
    76b2:	90 e0       	ldi	r25, 0x00	; 0
    76b4:	48 0e       	add	r4, r24
    76b6:	59 1e       	adc	r5, r25
    76b8:	d2 01       	movw	r26, r4
    76ba:	ed 92       	st	X+, r14
    76bc:	fd 92       	st	X+, r15
    76be:	0d 93       	st	X+, r16
    76c0:	1c 93       	st	X, r17
    76c2:	13 97       	sbiw	r26, 0x03	; 3
    76c4:	e8 e3       	ldi	r30, 0x38	; 56
    76c6:	ff ef       	ldi	r31, 0xFF	; 255
    76c8:	4e 0e       	add	r4, r30
    76ca:	5f 1e       	adc	r5, r31
	wk.rt.coeficiente = (wk.rt.ciclo-wk.mv.duracion_pasos) / 2;                     // duracion de los "pasitos" (en ticks)
    76cc:	8c ec       	ldi	r24, 0xCC	; 204
    76ce:	a8 2e       	mov	r10, r24
    76d0:	b1 2c       	mov	r11, r1
    76d2:	a4 0c       	add	r10, r4
    76d4:	b5 1c       	adc	r11, r5
    76d6:	21 ec       	ldi	r18, 0xC1	; 193
    76d8:	30 e0       	ldi	r19, 0x00	; 0
    76da:	42 0e       	add	r4, r18
    76dc:	53 1e       	adc	r5, r19
    76de:	d2 01       	movw	r26, r4
    76e0:	6d 91       	ld	r22, X+
    76e2:	7c 91       	ld	r23, X
    76e4:	ef e3       	ldi	r30, 0x3F	; 63
    76e6:	ff ef       	ldi	r31, 0xFF	; 255
    76e8:	4e 0e       	add	r4, r30
    76ea:	5f 1e       	adc	r5, r31
    76ec:	88 27       	eor	r24, r24
    76ee:	77 fd       	sbrc	r23, 7
    76f0:	80 95       	com	r24
    76f2:	98 2f       	mov	r25, r24
    76f4:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    76f8:	9b 01       	movw	r18, r22
    76fa:	ac 01       	movw	r20, r24
    76fc:	c8 01       	movw	r24, r16
    76fe:	b7 01       	movw	r22, r14
    7700:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    7704:	20 e0       	ldi	r18, 0x00	; 0
    7706:	30 e0       	ldi	r19, 0x00	; 0
    7708:	40 e0       	ldi	r20, 0x00	; 0
    770a:	5f e3       	ldi	r21, 0x3F	; 63
    770c:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    7710:	d5 01       	movw	r26, r10
    7712:	6d 93       	st	X+, r22
    7714:	7d 93       	st	X+, r23
    7716:	8d 93       	st	X+, r24
    7718:	9c 93       	st	X, r25
    771a:	13 97       	sbiw	r26, 0x03	; 3
	
	if (wk.mv.rotacion) {
    771c:	11 eb       	ldi	r17, 0xB1	; 177
    771e:	c1 2e       	mov	r12, r17
    7720:	d1 2c       	mov	r13, r1
    7722:	c4 0c       	add	r12, r4
    7724:	d5 1c       	adc	r13, r5
    7726:	f6 01       	movw	r30, r12
    7728:	e0 80       	ld	r14, Z
    772a:	f1 80       	ldd	r15, Z+1	; 0x01
    772c:	02 81       	ldd	r16, Z+2	; 0x02
    772e:	13 81       	ldd	r17, Z+3	; 0x03
    7730:	c8 01       	movw	r24, r16
    7732:	b7 01       	movw	r22, r14
    7734:	20 e0       	ldi	r18, 0x00	; 0
    7736:	30 e0       	ldi	r19, 0x00	; 0
    7738:	40 e0       	ldi	r20, 0x00	; 0
    773a:	50 e0       	ldi	r21, 0x00	; 0
    773c:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    7740:	88 23       	and	r24, r24
    7742:	09 f1       	breq	.+66     	; 0x7786 <_ZN10Movimiento13caminata_initEv+0x154>
		getRotationMatrix (wk.rt.rotor1, -wk.mv.rotacion);                    // matriz de rotación del cuerpo
    7744:	b8 01       	movw	r22, r16
    7746:	a7 01       	movw	r20, r14
    7748:	70 58       	subi	r23, 0x80	; 128
    774a:	c2 01       	movw	r24, r4
    774c:	80 53       	subi	r24, 0x30	; 48
    774e:	9f 4f       	sbci	r25, 0xFF	; 255
    7750:	0e 94 ae 77 	call	0xef5c	; 0xef5c <_Z17getRotationMatrixP7COORD2Df>
		getRotationMatrix (wk.rt.rotor2, wk.mv.rotacion*wk.rt.coeficiente);     // matriz de rotación de los "pasitos". 
    7754:	20 ee       	ldi	r18, 0xE0	; 224
    7756:	30 e0       	ldi	r19, 0x00	; 0
    7758:	42 0e       	add	r4, r18
    775a:	53 1e       	adc	r5, r19
    775c:	d6 01       	movw	r26, r12
    775e:	6d 91       	ld	r22, X+
    7760:	7d 91       	ld	r23, X+
    7762:	8d 91       	ld	r24, X+
    7764:	9c 91       	ld	r25, X
    7766:	f5 01       	movw	r30, r10
    7768:	20 81       	ld	r18, Z
    776a:	31 81       	ldd	r19, Z+1	; 0x01
    776c:	42 81       	ldd	r20, Z+2	; 0x02
    776e:	53 81       	ldd	r21, Z+3	; 0x03
    7770:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    7774:	ab 01       	movw	r20, r22
    7776:	bc 01       	movw	r22, r24
    7778:	c2 01       	movw	r24, r4
    777a:	20 e2       	ldi	r18, 0x20	; 32
    777c:	3f ef       	ldi	r19, 0xFF	; 255
    777e:	42 0e       	add	r4, r18
    7780:	53 1e       	adc	r5, r19
    7782:	0e 94 ae 77 	call	0xef5c	; 0xef5c <_Z17getRotationMatrixP7COORD2Df>
    7786:	90 e0       	ldi	r25, 0x00	; 0
																																					   // Para hacer una verdadera "zancada progresiva" habría que recalcular esta matriz todo el tiempo
	}
 
	// variables de control de la caminata
	for (byte f=0; f<wk.mv.fases; f++) {wk.rt.counter [f] = wk.mv.duracion_pasos;}    // empieza valiendo duracion_pasos
    7788:	92 01       	movw	r18, r4
    778a:	25 54       	subi	r18, 0x45	; 69
    778c:	3f 4f       	sbci	r19, 0xFF	; 255
    778e:	d2 01       	movw	r26, r4
    7790:	af 53       	subi	r26, 0x3F	; 63
    7792:	bf 4f       	sbci	r27, 0xFF	; 255
    7794:	08 c0       	rjmp	.+16     	; 0x77a6 <_ZN10Movimiento13caminata_initEv+0x174>
    7796:	f2 01       	movw	r30, r4
    7798:	e9 0f       	add	r30, r25
    779a:	f1 1d       	adc	r31, r1
    779c:	ee 57       	subi	r30, 0x7E	; 126
    779e:	fe 4f       	sbci	r31, 0xFE	; 254
    77a0:	8c 91       	ld	r24, X
    77a2:	80 83       	st	Z, r24
    77a4:	9f 5f       	subi	r25, 0xFF	; 255
    77a6:	f9 01       	movw	r30, r18
    77a8:	60 81       	ld	r22, Z
    77aa:	96 17       	cp	r25, r22
    77ac:	a0 f3       	brcs	.-24     	; 0x7796 <_ZN10Movimiento13caminata_initEv+0x164>
																								  											            // esto hace que durante el primer pasito no haya movimiento del tronco (al no haber patas "apoyadas")
	wk.rt.index %= wk.mv.fases;                                            // index intenta mantenerse igual
    77ae:	f2 01       	movw	r30, r4
    77b0:	e0 58       	subi	r30, 0x80	; 128
    77b2:	fe 4f       	sbci	r31, 0xFE	; 254
    77b4:	80 81       	ld	r24, Z
    77b6:	90 e0       	ldi	r25, 0x00	; 0
    77b8:	70 e0       	ldi	r23, 0x00	; 0
    77ba:	0e 94 0b 81 	call	0x10216	; 0x10216 <__udivmodhi4>
    77be:	80 83       	st	Z, r24
	
	// compensación de la posición de referencia, attenti:
	if (wk.mv.compensate) {
    77c0:	23 ec       	ldi	r18, 0xC3	; 195
    77c2:	30 e0       	ldi	r19, 0x00	; 0
    77c4:	42 0e       	add	r4, r18
    77c6:	53 1e       	adc	r5, r19
    77c8:	d2 01       	movw	r26, r4
    77ca:	8c 91       	ld	r24, X
    77cc:	ed e3       	ldi	r30, 0x3D	; 61
    77ce:	ff ef       	ldi	r31, 0xFF	; 255
    77d0:	4e 0e       	add	r4, r30
    77d2:	5f 1e       	adc	r5, r31
    77d4:	92 01       	movw	r18, r4
    77d6:	28 5c       	subi	r18, 0xC8	; 200
    77d8:	3e 4f       	sbci	r19, 0xFE	; 254
    77da:	88 23       	and	r24, r24
    77dc:	09 f4       	brne	.+2      	; 0x77e0 <_ZN10Movimiento13caminata_initEv+0x1ae>
    77de:	93 c0       	rjmp	.+294    	; 0x7906 <_ZN10Movimiento13caminata_initEv+0x2d4>
		memcpy (wk.rt.pos_ref, pos_des, 6*sizeof(COORD3D));                   // pos_ref = posición actual
    77e0:	d9 01       	movw	r26, r18
    77e2:	e0 e5       	ldi	r30, 0x50	; 80
    77e4:	f3 e1       	ldi	r31, 0x13	; 19
    77e6:	88 e4       	ldi	r24, 0x48	; 72
    77e8:	01 90       	ld	r0, Z+
    77ea:	0d 92       	st	X+, r0
    77ec:	81 50       	subi	r24, 0x01	; 1
    77ee:	e1 f7       	brne	.-8      	; 0x77e8 <_ZN10Movimiento13caminata_initEv+0x1b6>
		proyeccion (wk.rt.pos_ref, sh.mv.pos_ref);                         // proyecta la posición de referencia sobre el plano actual
    77f0:	b2 01       	movw	r22, r4
    77f2:	68 56       	subi	r22, 0x68	; 104
    77f4:	7e 4f       	sbci	r23, 0xFE	; 254
    77f6:	c9 01       	movw	r24, r18
    77f8:	0e 94 0f 75 	call	0xea1e	; 0xea1e <_Z10proyeccionP7COORD3DS0_>
    77fc:	22 24       	eor	r2, r2
    77fe:	33 24       	eor	r3, r3
		for (byte pata=0; pata<6; pata++) {
			wk.rt.comp [pata] = producto(resta(sh.mv.pos_ref[pata], wk.rt.pos_ref[pata]), .5/wk.rt.ciclo);  // calcula el factor de corrección
    7800:	92 01       	movw	r18, r4
    7802:	28 53       	subi	r18, 0x38	; 56
    7804:	3f 4f       	sbci	r19, 0xFF	; 255
    7806:	3a 8f       	std	Y+26, r19	; 0x1a
    7808:	29 8f       	std	Y+25, r18	; 0x19
    780a:	4d b7       	in	r20, 0x3d	; 61
    780c:	5e b7       	in	r21, 0x3e	; 62
    780e:	4c 50       	subi	r20, 0x0C	; 12
    7810:	50 40       	sbci	r21, 0x00	; 0
    7812:	0f b6       	in	r0, 0x3f	; 63
    7814:	f8 94       	cli
    7816:	5e bf       	out	0x3e, r21	; 62
    7818:	0f be       	out	0x3f, r0	; 63
    781a:	4d bf       	out	0x3d, r20	; 61
    781c:	c1 01       	movw	r24, r2
    781e:	88 0f       	add	r24, r24
    7820:	99 1f       	adc	r25, r25
    7822:	82 0d       	add	r24, r2
    7824:	93 1d       	adc	r25, r3
    7826:	88 0f       	add	r24, r24
    7828:	99 1f       	adc	r25, r25
    782a:	88 0f       	add	r24, r24
    782c:	99 1f       	adc	r25, r25
    782e:	84 0d       	add	r24, r4
    7830:	95 1d       	adc	r25, r5
    7832:	fc 01       	movw	r30, r24
    7834:	e8 56       	subi	r30, 0x68	; 104
    7836:	fe 4f       	sbci	r31, 0xFE	; 254
    7838:	2d b7       	in	r18, 0x3d	; 61
    783a:	3e b7       	in	r19, 0x3e	; 62
    783c:	2f 5f       	subi	r18, 0xFF	; 255
    783e:	3f 4f       	sbci	r19, 0xFF	; 255
    7840:	ac 01       	movw	r20, r24
    7842:	48 5c       	subi	r20, 0xC8	; 200
    7844:	5e 4f       	sbci	r21, 0xFE	; 254
    7846:	8c e0       	ldi	r24, 0x0C	; 12
    7848:	da 01       	movw	r26, r20
    784a:	0d 90       	ld	r0, X+
    784c:	ad 01       	movw	r20, r26
    784e:	d9 01       	movw	r26, r18
    7850:	0d 92       	st	X+, r0
    7852:	9d 01       	movw	r18, r26
    7854:	81 50       	subi	r24, 0x01	; 1
    7856:	c1 f7       	brne	.-16     	; 0x7848 <_ZN10Movimiento13caminata_initEv+0x216>
    7858:	ce 01       	movw	r24, r28
    785a:	01 96       	adiw	r24, 0x01	; 1
    785c:	c0 80       	ld	r12, Z
    785e:	d1 80       	ldd	r13, Z+1	; 0x01
    7860:	e2 80       	ldd	r14, Z+2	; 0x02
    7862:	f3 80       	ldd	r15, Z+3	; 0x03
    7864:	04 81       	ldd	r16, Z+4	; 0x04
    7866:	15 81       	ldd	r17, Z+5	; 0x05
    7868:	26 81       	ldd	r18, Z+6	; 0x06
    786a:	37 81       	ldd	r19, Z+7	; 0x07
    786c:	40 85       	ldd	r20, Z+8	; 0x08
    786e:	51 85       	ldd	r21, Z+9	; 0x09
    7870:	62 85       	ldd	r22, Z+10	; 0x0a
    7872:	73 85       	ldd	r23, Z+11	; 0x0b
    7874:	0e 94 df 69 	call	0xd3be	; 0xd3be <_Z5resta7COORD3DS_>
    7878:	31 01       	movw	r6, r2
    787a:	66 0c       	add	r6, r6
    787c:	77 1c       	adc	r7, r7
    787e:	62 0c       	add	r6, r2
    7880:	73 1c       	adc	r7, r3
    7882:	66 0c       	add	r6, r6
    7884:	77 1c       	adc	r7, r7
    7886:	66 0c       	add	r6, r6
    7888:	77 1c       	adc	r7, r7
    788a:	64 0c       	add	r6, r4
    788c:	75 1c       	adc	r7, r5
    788e:	e0 ef       	ldi	r30, 0xF0	; 240
    7890:	f0 e0       	ldi	r31, 0x00	; 0
    7892:	6e 0e       	add	r6, r30
    7894:	7f 1e       	adc	r7, r31
    7896:	2d b7       	in	r18, 0x3d	; 61
    7898:	3e b7       	in	r19, 0x3e	; 62
    789a:	24 5f       	subi	r18, 0xF4	; 244
    789c:	3f 4f       	sbci	r19, 0xFF	; 255
    789e:	0f b6       	in	r0, 0x3f	; 63
    78a0:	f8 94       	cli
    78a2:	3e bf       	out	0x3e, r19	; 62
    78a4:	0f be       	out	0x3f, r0	; 63
    78a6:	2d bf       	out	0x3d, r18	; 61
    78a8:	60 e0       	ldi	r22, 0x00	; 0
    78aa:	70 e0       	ldi	r23, 0x00	; 0
    78ac:	80 e0       	ldi	r24, 0x00	; 0
    78ae:	9f e3       	ldi	r25, 0x3F	; 63
    78b0:	a9 8d       	ldd	r26, Y+25	; 0x19
    78b2:	ba 8d       	ldd	r27, Y+26	; 0x1a
    78b4:	2d 91       	ld	r18, X+
    78b6:	3d 91       	ld	r19, X+
    78b8:	4d 91       	ld	r20, X+
    78ba:	5c 91       	ld	r21, X
    78bc:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    78c0:	4b 01       	movw	r8, r22
    78c2:	5c 01       	movw	r10, r24
    78c4:	ce 01       	movw	r24, r28
    78c6:	0d 96       	adiw	r24, 0x0d	; 13
    78c8:	c9 80       	ldd	r12, Y+1	; 0x01
    78ca:	da 80       	ldd	r13, Y+2	; 0x02
    78cc:	eb 80       	ldd	r14, Y+3	; 0x03
    78ce:	fc 80       	ldd	r15, Y+4	; 0x04
    78d0:	0d 81       	ldd	r16, Y+5	; 0x05
    78d2:	1e 81       	ldd	r17, Y+6	; 0x06
    78d4:	2f 81       	ldd	r18, Y+7	; 0x07
    78d6:	38 85       	ldd	r19, Y+8	; 0x08
    78d8:	49 85       	ldd	r20, Y+9	; 0x09
    78da:	5a 85       	ldd	r21, Y+10	; 0x0a
    78dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    78de:	7c 85       	ldd	r23, Y+12	; 0x0c
    78e0:	0e 94 a2 6a 	call	0xd544	; 0xd544 <_Z8producto7COORD3Df>
    78e4:	d3 01       	movw	r26, r6
    78e6:	fe 01       	movw	r30, r28
    78e8:	3d 96       	adiw	r30, 0x0d	; 13
    78ea:	8c e0       	ldi	r24, 0x0C	; 12
    78ec:	01 90       	ld	r0, Z+
    78ee:	0d 92       	st	X+, r0
    78f0:	81 50       	subi	r24, 0x01	; 1
    78f2:	e1 f7       	brne	.-8      	; 0x78ec <_ZN10Movimiento13caminata_initEv+0x2ba>
    78f4:	08 94       	sec
    78f6:	21 1c       	adc	r2, r1
    78f8:	31 1c       	adc	r3, r1
	
	// compensación de la posición de referencia, attenti:
	if (wk.mv.compensate) {
		memcpy (wk.rt.pos_ref, pos_des, 6*sizeof(COORD3D));                   // pos_ref = posición actual
		proyeccion (wk.rt.pos_ref, sh.mv.pos_ref);                         // proyecta la posición de referencia sobre el plano actual
		for (byte pata=0; pata<6; pata++) {
    78fa:	b6 e0       	ldi	r27, 0x06	; 6
    78fc:	2b 16       	cp	r2, r27
    78fe:	31 04       	cpc	r3, r1
    7900:	09 f0       	breq	.+2      	; 0x7904 <_ZN10Movimiento13caminata_initEv+0x2d2>
    7902:	83 cf       	rjmp	.-250    	; 0x780a <_ZN10Movimiento13caminata_initEv+0x1d8>
    7904:	12 c0       	rjmp	.+36     	; 0x792a <_ZN10Movimiento13caminata_initEv+0x2f8>
			wk.rt.comp [pata] = producto(resta(sh.mv.pos_ref[pata], wk.rt.pos_ref[pata]), .5/wk.rt.ciclo);  // calcula el factor de corrección
		} 
	} else {
		memcpy (wk.rt.pos_ref, sh.mv.pos_ref, 6*sizeof(COORD3D));           // wt.rt.pos_ref es la posición de referencia usada en el runtime
    7906:	d9 01       	movw	r26, r18
    7908:	f2 01       	movw	r30, r4
    790a:	e8 56       	subi	r30, 0x68	; 104
    790c:	fe 4f       	sbci	r31, 0xFE	; 254
    790e:	88 e4       	ldi	r24, 0x48	; 72
    7910:	01 90       	ld	r0, Z+
    7912:	0d 92       	st	X+, r0
    7914:	81 50       	subi	r24, 0x01	; 1
    7916:	e1 f7       	brne	.-8      	; 0x7910 <_ZN10Movimiento13caminata_initEv+0x2de>
		ec_plano (wk.rt.pos_ref, &wk.rt.normal, &wk.rt.d);                // ecuación del plano de dicha posición
    7918:	b2 01       	movw	r22, r4
    791a:	68 57       	subi	r22, 0x78	; 120
    791c:	7e 4f       	sbci	r23, 0xFE	; 254
    791e:	a2 01       	movw	r20, r4
    7920:	4c 56       	subi	r20, 0x6C	; 108
    7922:	5e 4f       	sbci	r21, 0xFE	; 254
    7924:	c9 01       	movw	r24, r18
    7926:	0e 94 eb 72 	call	0xe5d6	; 0xe5d6 <_Z8ec_planoP7COORD3DS0_Pf>
	}
	
	sh.cn.tick = wk.mv.periodo_pasos*(wk.rt.index%wk.mv.agrupamiento);   // esto equivale a inicializarlo en 0, tiene el efecto de que arranque dando un pasito
    792a:	f2 01       	movw	r30, r4
    792c:	e0 58       	subi	r30, 0x80	; 128
    792e:	fe 4f       	sbci	r31, 0xFE	; 254
    7930:	2c eb       	ldi	r18, 0xBC	; 188
    7932:	30 e0       	ldi	r19, 0x00	; 0
    7934:	42 0e       	add	r4, r18
    7936:	53 1e       	adc	r5, r19
    7938:	d2 01       	movw	r26, r4
    793a:	6c 91       	ld	r22, X
    793c:	80 81       	ld	r24, Z
    793e:	90 e0       	ldi	r25, 0x00	; 0
    7940:	70 e0       	ldi	r23, 0x00	; 0
    7942:	0e 94 0b 81 	call	0x10216	; 0x10216 <__udivmodhi4>
    7946:	e3 e0       	ldi	r30, 0x03	; 3
    7948:	f0 e0       	ldi	r31, 0x00	; 0
    794a:	4e 0e       	add	r4, r30
    794c:	5f 1e       	adc	r5, r31
    794e:	d2 01       	movw	r26, r4
    7950:	2d 91       	ld	r18, X+
    7952:	3c 91       	ld	r19, X
    7954:	fc 01       	movw	r30, r24
    7956:	e2 9f       	mul	r30, r18
    7958:	c0 01       	movw	r24, r0
    795a:	e3 9f       	mul	r30, r19
    795c:	90 0d       	add	r25, r0
    795e:	f2 9f       	mul	r31, r18
    7960:	90 0d       	add	r25, r0
    7962:	11 24       	eor	r1, r1
    7964:	27 e2       	ldi	r18, 0x27	; 39
    7966:	31 e0       	ldi	r19, 0x01	; 1
    7968:	42 0e       	add	r4, r18
    796a:	53 1e       	adc	r5, r19
    796c:	d2 01       	movw	r26, r4
    796e:	8d 93       	st	X+, r24
    7970:	9c 93       	st	X, r25
	
}
    7972:	6a 96       	adiw	r28, 0x1a	; 26
    7974:	0f b6       	in	r0, 0x3f	; 63
    7976:	f8 94       	cli
    7978:	de bf       	out	0x3e, r29	; 62
    797a:	0f be       	out	0x3f, r0	; 63
    797c:	cd bf       	out	0x3d, r28	; 61
    797e:	cf 91       	pop	r28
    7980:	df 91       	pop	r29
    7982:	1f 91       	pop	r17
    7984:	0f 91       	pop	r16
    7986:	ff 90       	pop	r15
    7988:	ef 90       	pop	r14
    798a:	df 90       	pop	r13
    798c:	cf 90       	pop	r12
    798e:	bf 90       	pop	r11
    7990:	af 90       	pop	r10
    7992:	9f 90       	pop	r9
    7994:	8f 90       	pop	r8
    7996:	7f 90       	pop	r7
    7998:	6f 90       	pop	r6
    799a:	5f 90       	pop	r5
    799c:	4f 90       	pop	r4
    799e:	3f 90       	pop	r3
    79a0:	2f 90       	pop	r2
    79a2:	08 95       	ret

000079a4 <_ZN10Movimiento5startEv>:
	caminata_init2 ();
		
}

// reinicia el movimiento
void Movimiento::start () {
    79a4:	cf 93       	push	r28
    79a6:	df 93       	push	r29
    79a8:	ec 01       	movw	r28, r24
	switch (sh.cn.mode) {
    79aa:	cb 51       	subi	r28, 0x1B	; 27
    79ac:	de 4f       	sbci	r29, 0xFE	; 254
    79ae:	88 81       	ld	r24, Y
    79b0:	c5 5e       	subi	r28, 0xE5	; 229
    79b2:	d1 40       	sbci	r29, 0x01	; 1
    79b4:	88 23       	and	r24, r24
    79b6:	19 f0       	breq	.+6      	; 0x79be <_ZN10Movimiento5startEv+0x1a>
    79b8:	81 30       	cpi	r24, 0x01	; 1
    79ba:	59 f4       	brne	.+22     	; 0x79d2 <_ZN10Movimiento5startEv+0x2e>
    79bc:	04 c0       	rjmp	.+8      	; 0x79c6 <_ZN10Movimiento5startEv+0x22>
		case CAMINATA:
			caminata_init ();
    79be:	ce 01       	movw	r24, r28
    79c0:	0e 94 19 3b 	call	0x7632	; 0x7632 <_ZN10Movimiento13caminata_initEv>
    79c4:	06 c0       	rjmp	.+12     	; 0x79d2 <_ZN10Movimiento5startEv+0x2e>
			break;
		case TRONCO:
			sh.cn.tick = 0;         // la tronco_init () se reduce a esto
    79c6:	ca 51       	subi	r28, 0x1A	; 26
    79c8:	de 4f       	sbci	r29, 0xFE	; 254
    79ca:	19 82       	std	Y+1, r1	; 0x01
    79cc:	18 82       	st	Y, r1
    79ce:	c6 5e       	subi	r28, 0xE6	; 230
    79d0:	d1 40       	sbci	r29, 0x01	; 1
			break;
	}
	
	// common
	sh.cn.pausa = 1000*TICK*sh.mv.escala;
    79d2:	c0 52       	subi	r28, 0x20	; 32
    79d4:	de 4f       	sbci	r29, 0xFE	; 254
    79d6:	68 81       	ld	r22, Y
    79d8:	70 e0       	ldi	r23, 0x00	; 0
    79da:	88 27       	eor	r24, r24
    79dc:	77 fd       	sbrc	r23, 7
    79de:	80 95       	com	r24
    79e0:	98 2f       	mov	r25, r24
    79e2:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    79e6:	20 e0       	ldi	r18, 0x00	; 0
    79e8:	30 e0       	ldi	r19, 0x00	; 0
    79ea:	40 e8       	ldi	r20, 0x80	; 128
    79ec:	50 e4       	ldi	r21, 0x40	; 64
    79ee:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    79f2:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <__fixsfsi>
    79f6:	28 96       	adiw	r28, 0x08	; 8
    79f8:	79 83       	std	Y+1, r23	; 0x01
    79fa:	68 83       	st	Y, r22
	sh.cn.enable = true;
    79fc:	24 97       	sbiw	r28, 0x04	; 4
    79fe:	81 e0       	ldi	r24, 0x01	; 1
    7a00:	88 83       	st	Y, r24
}
    7a02:	df 91       	pop	r29
    7a04:	cf 91       	pop	r28
    7a06:	08 95       	ret

00007a08 <_ZN10Movimiento8caminataEb>:
		sh.mv.nsegmentos = nsegmentos;
		
}

// ejecución de la caminata
void Movimiento::caminata (bool compensate) {  
    7a08:	fc 01       	movw	r30, r24
	
	// variables de control
	wk.mv.compensate = compensate;                     // revisar esta lógica (compensate deberia ser una variable de control, por ejemplo)
    7a0a:	ed 53       	subi	r30, 0x3D	; 61
    7a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    7a0e:	60 83       	st	Z, r22
	if (!sh.cn.enable || sh.cn.mode!=CAMINATA) { 
    7a10:	ef 5d       	subi	r30, 0xDF	; 223
    7a12:	fe 4f       	sbci	r31, 0xFE	; 254
    7a14:	80 81       	ld	r24, Z
    7a16:	e4 5e       	subi	r30, 0xE4	; 228
    7a18:	f1 40       	sbci	r31, 0x01	; 1
    7a1a:	88 23       	and	r24, r24
    7a1c:	39 f0       	breq	.+14     	; 0x7a2c <_ZN10Movimiento8caminataEb+0x24>
    7a1e:	eb 51       	subi	r30, 0x1B	; 27
    7a20:	fe 4f       	sbci	r31, 0xFE	; 254
    7a22:	80 81       	ld	r24, Z
    7a24:	e5 5e       	subi	r30, 0xE5	; 229
    7a26:	f1 40       	sbci	r31, 0x01	; 1
    7a28:	88 23       	and	r24, r24
    7a2a:	49 f0       	breq	.+18     	; 0x7a3e <_ZN10Movimiento8caminataEb+0x36>
		sh.cn.mode = CAMINATA;
    7a2c:	eb 51       	subi	r30, 0x1B	; 27
    7a2e:	fe 4f       	sbci	r31, 0xFE	; 254
    7a30:	10 82       	st	Z, r1
    7a32:	e5 5e       	subi	r30, 0xE5	; 229
    7a34:	f1 40       	sbci	r31, 0x01	; 1
		start ();
    7a36:	cf 01       	movw	r24, r30
    7a38:	0e 94 d2 3c 	call	0x79a4	; 0x79a4 <_ZN10Movimiento5startEv>
    7a3c:	08 95       	ret
	} else {
		caminata_init2 ();
    7a3e:	cf 01       	movw	r24, r30
    7a40:	0e 94 51 3a 	call	0x74a2	; 0x74a2 <_ZN10Movimiento14caminata_init2Ev>
    7a44:	08 95       	ret

00007a46 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf>:
}

///////////////////////////////////////// MISC. & PRIVATE /////////////////////////////////////////

// convierte parámetros "inteligentes" en parámetros "RAW" 
void Movimiento::set_values (float velocidad, float desplazamiento, bool curva, COORD2D centro, float angulo, byte marcha, float largo_pasos) {
    7a46:	2f 92       	push	r2
    7a48:	3f 92       	push	r3
    7a4a:	4f 92       	push	r4
    7a4c:	5f 92       	push	r5
    7a4e:	6f 92       	push	r6
    7a50:	7f 92       	push	r7
    7a52:	8f 92       	push	r8
    7a54:	9f 92       	push	r9
    7a56:	af 92       	push	r10
    7a58:	bf 92       	push	r11
    7a5a:	cf 92       	push	r12
    7a5c:	df 92       	push	r13
    7a5e:	ef 92       	push	r14
    7a60:	ff 92       	push	r15
    7a62:	0f 93       	push	r16
    7a64:	1f 93       	push	r17
    7a66:	df 93       	push	r29
    7a68:	cf 93       	push	r28
    7a6a:	cd b7       	in	r28, 0x3d	; 61
    7a6c:	de b7       	in	r29, 0x3e	; 62
    7a6e:	c6 57       	subi	r28, 0x76	; 118
    7a70:	d0 40       	sbci	r29, 0x00	; 0
    7a72:	0f b6       	in	r0, 0x3f	; 63
    7a74:	f8 94       	cli
    7a76:	de bf       	out	0x3e, r29	; 62
    7a78:	0f be       	out	0x3f, r0	; 63
    7a7a:	cd bf       	out	0x3d, r28	; 61
    7a7c:	6a 96       	adiw	r28, 0x1a	; 26
    7a7e:	9f af       	std	Y+63, r25	; 0x3f
    7a80:	8e af       	std	Y+62, r24	; 0x3e
    7a82:	6a 97       	sbiw	r28, 0x1a	; 26
    7a84:	6e 96       	adiw	r28, 0x1e	; 30
    7a86:	4c af       	std	Y+60, r20	; 0x3c
    7a88:	5d af       	std	Y+61, r21	; 0x3d
    7a8a:	6e af       	std	Y+62, r22	; 0x3e
    7a8c:	7f af       	std	Y+63, r23	; 0x3f
    7a8e:	6e 97       	sbiw	r28, 0x1e	; 30
    7a90:	a2 96       	adiw	r28, 0x22	; 34
    7a92:	0c af       	std	Y+60, r16	; 0x3c
    7a94:	1d af       	std	Y+61, r17	; 0x3d
    7a96:	2e af       	std	Y+62, r18	; 0x3e
    7a98:	3f af       	std	Y+63, r19	; 0x3f
    7a9a:	a2 97       	sbiw	r28, 0x22	; 34
    7a9c:	a3 96       	adiw	r28, 0x23	; 35
    7a9e:	ef ae       	std	Y+63, r14	; 0x3f
    7aa0:	a3 97       	sbiw	r28, 0x23	; 35
		wk.mv.periodo_pasos = periodo_pasos;
		wk.mv.duracion_pasos = duracion_pasos;
		wk.mv.altura_pasito = altura_pasito;
		sh.mv.nsegmentos = nsegmentos;
		
}
    7aa2:	2d b7       	in	r18, 0x3d	; 61
    7aa4:	3e b7       	in	r19, 0x3e	; 62
    7aa6:	a9 96       	adiw	r28, 0x29	; 41
    7aa8:	3f af       	std	Y+63, r19	; 0x3f
    7aaa:	2e af       	std	Y+62, r18	; 0x3e
    7aac:	a9 97       	sbiw	r28, 0x29	; 41
}

///////////////////////////////////////// MISC. & PRIVATE /////////////////////////////////////////

// convierte parámetros "inteligentes" en parámetros "RAW" 
void Movimiento::set_values (float velocidad, float desplazamiento, bool curva, COORD2D centro, float angulo, byte marcha, float largo_pasos) {
    7aae:	c5 57       	subi	r28, 0x75	; 117
    7ab0:	df 4f       	sbci	r29, 0xFF	; 255
    7ab2:	38 81       	ld	r19, Y
    7ab4:	cb 58       	subi	r28, 0x8B	; 139
    7ab6:	d0 40       	sbci	r29, 0x00	; 0
    7ab8:	ae 96       	adiw	r28, 0x2e	; 46
    7aba:	3f af       	std	Y+63, r19	; 0x3f
    7abc:	ae 97       	sbiw	r28, 0x2e	; 46
    7abe:	c4 57       	subi	r28, 0x74	; 116
    7ac0:	df 4f       	sbci	r29, 0xFF	; 255
    7ac2:	88 81       	ld	r24, Y
    7ac4:	cc 58       	subi	r28, 0x8C	; 140
    7ac6:	d0 40       	sbci	r29, 0x00	; 0
    7ac8:	af 96       	adiw	r28, 0x2f	; 47
    7aca:	8f af       	std	Y+63, r24	; 0x3f
    7acc:	af 97       	sbiw	r28, 0x2f	; 47
    7ace:	c3 57       	subi	r28, 0x73	; 115
    7ad0:	df 4f       	sbci	r29, 0xFF	; 255
    7ad2:	98 81       	ld	r25, Y
    7ad4:	cd 58       	subi	r28, 0x8D	; 141
    7ad6:	d0 40       	sbci	r29, 0x00	; 0
    7ad8:	e0 96       	adiw	r28, 0x30	; 48
    7ada:	9f af       	std	Y+63, r25	; 0x3f
    7adc:	e0 97       	sbiw	r28, 0x30	; 48
    7ade:	c2 57       	subi	r28, 0x72	; 114
    7ae0:	df 4f       	sbci	r29, 0xFF	; 255
    7ae2:	a8 81       	ld	r26, Y
    7ae4:	ce 58       	subi	r28, 0x8E	; 142
    7ae6:	d0 40       	sbci	r29, 0x00	; 0
    7ae8:	e1 96       	adiw	r28, 0x31	; 49
    7aea:	af af       	std	Y+63, r26	; 0x3f
    7aec:	e1 97       	sbiw	r28, 0x31	; 49
    7aee:	c1 57       	subi	r28, 0x71	; 113
    7af0:	df 4f       	sbci	r29, 0xFF	; 255
    7af2:	b8 81       	ld	r27, Y
    7af4:	cf 58       	subi	r28, 0x8F	; 143
    7af6:	d0 40       	sbci	r29, 0x00	; 0
    7af8:	aa 96       	adiw	r28, 0x2a	; 42
    7afa:	bf af       	std	Y+63, r27	; 0x3f
    7afc:	aa 97       	sbiw	r28, 0x2a	; 42
    7afe:	c0 57       	subi	r28, 0x70	; 112
    7b00:	df 4f       	sbci	r29, 0xFF	; 255
    7b02:	e8 81       	ld	r30, Y
    7b04:	c0 59       	subi	r28, 0x90	; 144
    7b06:	d0 40       	sbci	r29, 0x00	; 0
    7b08:	ab 96       	adiw	r28, 0x2b	; 43
    7b0a:	ef af       	std	Y+63, r30	; 0x3f
    7b0c:	ab 97       	sbiw	r28, 0x2b	; 43
    7b0e:	cf 56       	subi	r28, 0x6F	; 111
    7b10:	df 4f       	sbci	r29, 0xFF	; 255
    7b12:	f8 81       	ld	r31, Y
    7b14:	c1 59       	subi	r28, 0x91	; 145
    7b16:	d0 40       	sbci	r29, 0x00	; 0
    7b18:	ac 96       	adiw	r28, 0x2c	; 44
    7b1a:	ff af       	std	Y+63, r31	; 0x3f
    7b1c:	ac 97       	sbiw	r28, 0x2c	; 44
    7b1e:	ce 56       	subi	r28, 0x6E	; 110
    7b20:	df 4f       	sbci	r29, 0xFF	; 255
    7b22:	28 81       	ld	r18, Y
    7b24:	c2 59       	subi	r28, 0x92	; 146
    7b26:	d0 40       	sbci	r29, 0x00	; 0
    7b28:	ad 96       	adiw	r28, 0x2d	; 45
    7b2a:	2f af       	std	Y+63, r18	; 0x3f
    7b2c:	ad 97       	sbiw	r28, 0x2d	; 45
  // si curva == true  -> caminata curva con centro [centro] y sentido = signo de [angulo]
  // todos los parámetros son en centímetros y en segundos.
  // marcha admite los valores 1, 2 y 3 (es el numero de patas simultáneas)  
  // desplazamiento < 0 -> movimiento infinito, detenerlo con stop();
  
  if (largo_pasos == 0) {
    7b2e:	c8 56       	subi	r28, 0x68	; 104
    7b30:	df 4f       	sbci	r29, 0xFF	; 255
    7b32:	68 81       	ld	r22, Y
    7b34:	79 81       	ldd	r23, Y+1	; 0x01
    7b36:	8a 81       	ldd	r24, Y+2	; 0x02
    7b38:	9b 81       	ldd	r25, Y+3	; 0x03
    7b3a:	c8 59       	subi	r28, 0x98	; 152
    7b3c:	d0 40       	sbci	r29, 0x00	; 0
    7b3e:	20 e0       	ldi	r18, 0x00	; 0
    7b40:	30 e0       	ldi	r19, 0x00	; 0
    7b42:	40 e0       	ldi	r20, 0x00	; 0
    7b44:	50 e0       	ldi	r21, 0x00	; 0
    7b46:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    7b4a:	88 23       	and	r24, r24
    7b4c:	09 f0       	breq	.+2      	; 0x7b50 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x10a>
    7b4e:	ea c0       	rjmp	.+468    	; 0x7d24 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x2de>
		// esta fórmula para calcular automáticamente el largo de los pasos, contempla la distancia entre las patas
		// pero igual da cualquier fruta, hay que corregirla
		largo_pasos = sigmoide (velocidad/7) * .335 * distancia (rel2abs (xyz2xz(sh.mv.pos_ref[0]), 0), rel2abs (xyz2xz(sh.mv.pos_ref[2]), 2)); 
    7b50:	6e 96       	adiw	r28, 0x1e	; 30
    7b52:	6c ad       	ldd	r22, Y+60	; 0x3c
    7b54:	7d ad       	ldd	r23, Y+61	; 0x3d
    7b56:	8e ad       	ldd	r24, Y+62	; 0x3e
    7b58:	9f ad       	ldd	r25, Y+63	; 0x3f
    7b5a:	6e 97       	sbiw	r28, 0x1e	; 30
    7b5c:	20 e0       	ldi	r18, 0x00	; 0
    7b5e:	30 e0       	ldi	r19, 0x00	; 0
    7b60:	40 ee       	ldi	r20, 0xE0	; 224
    7b62:	50 e4       	ldi	r21, 0x40	; 64
    7b64:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    7b68:	0e 94 9b 68 	call	0xd136	; 0xd136 <_Z8sigmoided>
    7b6c:	3b 01       	movw	r6, r22
    7b6e:	4c 01       	movw	r8, r24
    7b70:	6a 96       	adiw	r28, 0x1a	; 26
    7b72:	ee ad       	ldd	r30, Y+62	; 0x3e
    7b74:	ff ad       	ldd	r31, Y+63	; 0x3f
    7b76:	6a 97       	sbiw	r28, 0x1a	; 26
    7b78:	e8 56       	subi	r30, 0x68	; 104
    7b7a:	fe 4f       	sbci	r31, 0xFE	; 254
    7b7c:	e0 80       	ld	r14, Z
    7b7e:	f1 80       	ldd	r15, Z+1	; 0x01
    7b80:	02 81       	ldd	r16, Z+2	; 0x02
    7b82:	13 81       	ldd	r17, Z+3	; 0x03
    7b84:	24 81       	ldd	r18, Z+4	; 0x04
    7b86:	35 81       	ldd	r19, Z+5	; 0x05
    7b88:	46 81       	ldd	r20, Z+6	; 0x06
    7b8a:	57 81       	ldd	r21, Z+7	; 0x07
    7b8c:	60 85       	ldd	r22, Z+8	; 0x08
    7b8e:	71 85       	ldd	r23, Z+9	; 0x09
    7b90:	82 85       	ldd	r24, Z+10	; 0x0a
    7b92:	93 85       	ldd	r25, Z+11	; 0x0b
    7b94:	0e 94 98 6b 	call	0xd730	; 0xd730 <_Z6xyz2xz7COORD3D>
    7b98:	2c af       	std	Y+60, r18	; 0x3c
    7b9a:	3d af       	std	Y+61, r19	; 0x3d
    7b9c:	4e af       	std	Y+62, r20	; 0x3e
    7b9e:	5f af       	std	Y+63, r21	; 0x3f
    7ba0:	fe 01       	movw	r30, r28
    7ba2:	e0 5c       	subi	r30, 0xC0	; 192
    7ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    7ba6:	60 83       	st	Z, r22
    7ba8:	fe 01       	movw	r30, r28
    7baa:	ef 5b       	subi	r30, 0xBF	; 191
    7bac:	ff 4f       	sbci	r31, 0xFF	; 255
    7bae:	70 83       	st	Z, r23
    7bb0:	fe 01       	movw	r30, r28
    7bb2:	ee 5b       	subi	r30, 0xBE	; 190
    7bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    7bb6:	80 83       	st	Z, r24
    7bb8:	fe 01       	movw	r30, r28
    7bba:	ed 5b       	subi	r30, 0xBD	; 189
    7bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    7bbe:	90 83       	st	Z, r25
    7bc0:	de 01       	movw	r26, r28
    7bc2:	1c 96       	adiw	r26, 0x0c	; 12
    7bc4:	fe 01       	movw	r30, r28
    7bc6:	fc 96       	adiw	r30, 0x3c	; 60
    7bc8:	88 e0       	ldi	r24, 0x08	; 8
    7bca:	01 90       	ld	r0, Z+
    7bcc:	0d 92       	st	X+, r0
    7bce:	81 50       	subi	r24, 0x01	; 1
    7bd0:	e1 f7       	brne	.-8      	; 0x7bca <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x184>
    7bd2:	2c 85       	ldd	r18, Y+12	; 0x0c
    7bd4:	3d 85       	ldd	r19, Y+13	; 0x0d
    7bd6:	4e 85       	ldd	r20, Y+14	; 0x0e
    7bd8:	5f 85       	ldd	r21, Y+15	; 0x0f
    7bda:	68 89       	ldd	r22, Y+16	; 0x10
    7bdc:	79 89       	ldd	r23, Y+17	; 0x11
    7bde:	8a 89       	ldd	r24, Y+18	; 0x12
    7be0:	9b 89       	ldd	r25, Y+19	; 0x13
    7be2:	00 e0       	ldi	r16, 0x00	; 0
    7be4:	0e 94 f9 71 	call	0xe3f2	; 0xe3f2 <_Z7rel2abs7COORD2Dh>
    7be8:	2c af       	std	Y+60, r18	; 0x3c
    7bea:	3d af       	std	Y+61, r19	; 0x3d
    7bec:	4e af       	std	Y+62, r20	; 0x3e
    7bee:	5f af       	std	Y+63, r21	; 0x3f
    7bf0:	fe 01       	movw	r30, r28
    7bf2:	e0 5c       	subi	r30, 0xC0	; 192
    7bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    7bf6:	60 83       	st	Z, r22
    7bf8:	fe 01       	movw	r30, r28
    7bfa:	ef 5b       	subi	r30, 0xBF	; 191
    7bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    7bfe:	70 83       	st	Z, r23
    7c00:	fe 01       	movw	r30, r28
    7c02:	ee 5b       	subi	r30, 0xBE	; 190
    7c04:	ff 4f       	sbci	r31, 0xFF	; 255
    7c06:	80 83       	st	Z, r24
    7c08:	fe 01       	movw	r30, r28
    7c0a:	ed 5b       	subi	r30, 0xBD	; 189
    7c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    7c0e:	90 83       	st	Z, r25
    7c10:	de 01       	movw	r26, r28
    7c12:	54 96       	adiw	r26, 0x14	; 20
    7c14:	fe 01       	movw	r30, r28
    7c16:	fc 96       	adiw	r30, 0x3c	; 60
    7c18:	88 e0       	ldi	r24, 0x08	; 8
    7c1a:	01 90       	ld	r0, Z+
    7c1c:	0d 92       	st	X+, r0
    7c1e:	81 50       	subi	r24, 0x01	; 1
    7c20:	e1 f7       	brne	.-8      	; 0x7c1a <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x1d4>
    7c22:	6a 96       	adiw	r28, 0x1a	; 26
    7c24:	ee ad       	ldd	r30, Y+62	; 0x3e
    7c26:	ff ad       	ldd	r31, Y+63	; 0x3f
    7c28:	6a 97       	sbiw	r28, 0x1a	; 26
    7c2a:	e0 55       	subi	r30, 0x50	; 80
    7c2c:	fe 4f       	sbci	r31, 0xFE	; 254
    7c2e:	e0 80       	ld	r14, Z
    7c30:	f1 80       	ldd	r15, Z+1	; 0x01
    7c32:	02 81       	ldd	r16, Z+2	; 0x02
    7c34:	13 81       	ldd	r17, Z+3	; 0x03
    7c36:	24 81       	ldd	r18, Z+4	; 0x04
    7c38:	35 81       	ldd	r19, Z+5	; 0x05
    7c3a:	46 81       	ldd	r20, Z+6	; 0x06
    7c3c:	57 81       	ldd	r21, Z+7	; 0x07
    7c3e:	60 85       	ldd	r22, Z+8	; 0x08
    7c40:	71 85       	ldd	r23, Z+9	; 0x09
    7c42:	82 85       	ldd	r24, Z+10	; 0x0a
    7c44:	93 85       	ldd	r25, Z+11	; 0x0b
    7c46:	0e 94 98 6b 	call	0xd730	; 0xd730 <_Z6xyz2xz7COORD3D>
    7c4a:	2c af       	std	Y+60, r18	; 0x3c
    7c4c:	3d af       	std	Y+61, r19	; 0x3d
    7c4e:	4e af       	std	Y+62, r20	; 0x3e
    7c50:	5f af       	std	Y+63, r21	; 0x3f
    7c52:	fe 01       	movw	r30, r28
    7c54:	e0 5c       	subi	r30, 0xC0	; 192
    7c56:	ff 4f       	sbci	r31, 0xFF	; 255
    7c58:	60 83       	st	Z, r22
    7c5a:	fe 01       	movw	r30, r28
    7c5c:	ef 5b       	subi	r30, 0xBF	; 191
    7c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    7c60:	70 83       	st	Z, r23
    7c62:	fe 01       	movw	r30, r28
    7c64:	ee 5b       	subi	r30, 0xBE	; 190
    7c66:	ff 4f       	sbci	r31, 0xFF	; 255
    7c68:	80 83       	st	Z, r24
    7c6a:	fe 01       	movw	r30, r28
    7c6c:	ed 5b       	subi	r30, 0xBD	; 189
    7c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    7c70:	90 83       	st	Z, r25
    7c72:	de 01       	movw	r26, r28
    7c74:	5c 96       	adiw	r26, 0x1c	; 28
    7c76:	fe 01       	movw	r30, r28
    7c78:	fc 96       	adiw	r30, 0x3c	; 60
    7c7a:	88 e0       	ldi	r24, 0x08	; 8
    7c7c:	01 90       	ld	r0, Z+
    7c7e:	0d 92       	st	X+, r0
    7c80:	81 50       	subi	r24, 0x01	; 1
    7c82:	e1 f7       	brne	.-8      	; 0x7c7c <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x236>
    7c84:	2c 8d       	ldd	r18, Y+28	; 0x1c
    7c86:	3d 8d       	ldd	r19, Y+29	; 0x1d
    7c88:	4e 8d       	ldd	r20, Y+30	; 0x1e
    7c8a:	5f 8d       	ldd	r21, Y+31	; 0x1f
    7c8c:	68 a1       	ldd	r22, Y+32	; 0x20
    7c8e:	79 a1       	ldd	r23, Y+33	; 0x21
    7c90:	8a a1       	ldd	r24, Y+34	; 0x22
    7c92:	9b a1       	ldd	r25, Y+35	; 0x23
    7c94:	02 e0       	ldi	r16, 0x02	; 2
    7c96:	0e 94 f9 71 	call	0xe3f2	; 0xe3f2 <_Z7rel2abs7COORD2Dh>
    7c9a:	2c af       	std	Y+60, r18	; 0x3c
    7c9c:	3d af       	std	Y+61, r19	; 0x3d
    7c9e:	4e af       	std	Y+62, r20	; 0x3e
    7ca0:	5f af       	std	Y+63, r21	; 0x3f
    7ca2:	fe 01       	movw	r30, r28
    7ca4:	e0 5c       	subi	r30, 0xC0	; 192
    7ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    7ca8:	60 83       	st	Z, r22
    7caa:	fe 01       	movw	r30, r28
    7cac:	ef 5b       	subi	r30, 0xBF	; 191
    7cae:	ff 4f       	sbci	r31, 0xFF	; 255
    7cb0:	70 83       	st	Z, r23
    7cb2:	fe 01       	movw	r30, r28
    7cb4:	ee 5b       	subi	r30, 0xBE	; 190
    7cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    7cb8:	80 83       	st	Z, r24
    7cba:	fe 01       	movw	r30, r28
    7cbc:	ed 5b       	subi	r30, 0xBD	; 189
    7cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    7cc0:	90 83       	st	Z, r25
    7cc2:	de 01       	movw	r26, r28
    7cc4:	94 96       	adiw	r26, 0x24	; 36
    7cc6:	fe 01       	movw	r30, r28
    7cc8:	fc 96       	adiw	r30, 0x3c	; 60
    7cca:	88 e0       	ldi	r24, 0x08	; 8
    7ccc:	01 90       	ld	r0, Z+
    7cce:	0d 92       	st	X+, r0
    7cd0:	81 50       	subi	r24, 0x01	; 1
    7cd2:	e1 f7       	brne	.-8      	; 0x7ccc <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x286>
    7cd4:	2c 89       	ldd	r18, Y+20	; 0x14
    7cd6:	3d 89       	ldd	r19, Y+21	; 0x15
    7cd8:	4e 89       	ldd	r20, Y+22	; 0x16
    7cda:	5f 89       	ldd	r21, Y+23	; 0x17
    7cdc:	68 8d       	ldd	r22, Y+24	; 0x18
    7cde:	79 8d       	ldd	r23, Y+25	; 0x19
    7ce0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7ce2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7ce4:	ac a0       	ldd	r10, Y+36	; 0x24
    7ce6:	bd a0       	ldd	r11, Y+37	; 0x25
    7ce8:	ce a0       	ldd	r12, Y+38	; 0x26
    7cea:	df a0       	ldd	r13, Y+39	; 0x27
    7cec:	e8 a4       	ldd	r14, Y+40	; 0x28
    7cee:	f9 a4       	ldd	r15, Y+41	; 0x29
    7cf0:	0a a5       	ldd	r16, Y+42	; 0x2a
    7cf2:	1b a5       	ldd	r17, Y+43	; 0x2b
    7cf4:	0e 94 5f 77 	call	0xeebe	; 0xeebe <_Z9distancia7COORD2DS_>
    7cf8:	7b 01       	movw	r14, r22
    7cfa:	8c 01       	movw	r16, r24
    7cfc:	c4 01       	movw	r24, r8
    7cfe:	b3 01       	movw	r22, r6
    7d00:	2f e1       	ldi	r18, 0x1F	; 31
    7d02:	35 e8       	ldi	r19, 0x85	; 133
    7d04:	4b ea       	ldi	r20, 0xAB	; 171
    7d06:	5e e3       	ldi	r21, 0x3E	; 62
    7d08:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    7d0c:	a8 01       	movw	r20, r16
    7d0e:	97 01       	movw	r18, r14
    7d10:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    7d14:	c8 56       	subi	r28, 0x68	; 104
    7d16:	df 4f       	sbci	r29, 0xFF	; 255
    7d18:	68 83       	st	Y, r22
    7d1a:	79 83       	std	Y+1, r23	; 0x01
    7d1c:	8a 83       	std	Y+2, r24	; 0x02
    7d1e:	9b 83       	std	Y+3, r25	; 0x03
    7d20:	c8 59       	subi	r28, 0x98	; 152
    7d22:	d0 40       	sbci	r29, 0x00	; 0
	/* 1) En este mega-loop, vamos a calcular: 
	           K (relación entre duracion_paso y periodo_sub_ciclo), agrupamiento, periodo_sub_ciclo, marcha y fases */
  byte agrupamiento = 0, Amax = 0, fases;
  int periodo_sub_ciclo;
  float K = 0, Kmax = 0;
  marcha --;                     // marcha se va a incrementar por lo menos 1 vez
    7d24:	c9 56       	subi	r28, 0x69	; 105
    7d26:	df 4f       	sbci	r29, 0xFF	; 255
    7d28:	88 81       	ld	r24, Y
    7d2a:	c7 59       	subi	r28, 0x97	; 151
    7d2c:	d0 40       	sbci	r29, 0x00	; 0
    7d2e:	68 2e       	mov	r6, r24
    7d30:	6a 94       	dec	r6
    7d32:	68 96       	adiw	r28, 0x18	; 24
    7d34:	1f ae       	std	Y+63, r1	; 0x3f
    7d36:	68 97       	sbiw	r28, 0x18	; 24
    7d38:	67 96       	adiw	r28, 0x17	; 23
    7d3a:	1f ae       	std	Y+63, r1	; 0x3f
    7d3c:	67 97       	sbiw	r28, 0x17	; 23
    7d3e:	0f 2e       	mov	r0, r31
    7d40:	f0 e0       	ldi	r31, 0x00	; 0
    7d42:	2f 2e       	mov	r2, r31
    7d44:	f0 e0       	ldi	r31, 0x00	; 0
    7d46:	3f 2e       	mov	r3, r31
    7d48:	f0 e0       	ldi	r31, 0x00	; 0
    7d4a:	4f 2e       	mov	r4, r31
    7d4c:	f0 e0       	ldi	r31, 0x00	; 0
    7d4e:	5f 2e       	mov	r5, r31
    7d50:	f0 2d       	mov	r31, r0
    7d52:	63 96       	adiw	r28, 0x13	; 19
    7d54:	2c ae       	std	Y+60, r2	; 0x3c
    7d56:	3d ae       	std	Y+61, r3	; 0x3d
    7d58:	4e ae       	std	Y+62, r4	; 0x3e
    7d5a:	5f ae       	std	Y+63, r5	; 0x3f
    7d5c:	63 97       	sbiw	r28, 0x13	; 19
          fases = 6 / marcha;
          agrupamiento = 0;
        } else {break;}
      }
    }
    periodo_sub_ciclo = -largo_pasos*agrupamiento/(velocidad*TICK*(K*agrupamiento-fases));  // [velocidad*TICK] es [velocidad*TICK*escala], pero escala=1 en este momento.
    7d5e:	c8 56       	subi	r28, 0x68	; 104
    7d60:	df 4f       	sbci	r29, 0xFF	; 255
    7d62:	88 81       	ld	r24, Y
    7d64:	99 81       	ldd	r25, Y+1	; 0x01
    7d66:	aa 81       	ldd	r26, Y+2	; 0x02
    7d68:	bb 81       	ldd	r27, Y+3	; 0x03
    7d6a:	c8 59       	subi	r28, 0x98	; 152
    7d6c:	d0 40       	sbci	r29, 0x00	; 0
    7d6e:	b0 58       	subi	r27, 0x80	; 128
    7d70:	e7 96       	adiw	r28, 0x37	; 55
    7d72:	8c af       	std	Y+60, r24	; 0x3c
    7d74:	9d af       	std	Y+61, r25	; 0x3d
    7d76:	ae af       	std	Y+62, r26	; 0x3e
    7d78:	bf af       	std	Y+63, r27	; 0x3f
    7d7a:	e7 97       	sbiw	r28, 0x37	; 55
  byte agrupamiento = 0, Amax = 0, fases;
  int periodo_sub_ciclo;
  float K = 0, Kmax = 0;
  marcha --;                     // marcha se va a incrementar por lo menos 1 vez
  do {
    if (K < Kmax-2*Kinc*(agrupamiento-1)) { // esto es otra manera de prevenir el overflow (antes era K < Kmax) 
    7d7c:	68 96       	adiw	r28, 0x18	; 24
    7d7e:	9f ad       	ldd	r25, Y+63	; 0x3f
    7d80:	68 97       	sbiw	r28, 0x18	; 24
    7d82:	69 2f       	mov	r22, r25
    7d84:	70 e0       	ldi	r23, 0x00	; 0
    7d86:	61 50       	subi	r22, 0x01	; 1
    7d88:	70 40       	sbci	r23, 0x00	; 0
    7d8a:	88 27       	eor	r24, r24
    7d8c:	77 fd       	sbrc	r23, 7
    7d8e:	80 95       	com	r24
    7d90:	98 2f       	mov	r25, r24
    7d92:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    7d96:	2d ec       	ldi	r18, 0xCD	; 205
    7d98:	3c ec       	ldi	r19, 0xCC	; 204
    7d9a:	4c e4       	ldi	r20, 0x4C	; 76
    7d9c:	5e eb       	ldi	r21, 0xBE	; 190
    7d9e:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    7da2:	9b 01       	movw	r18, r22
    7da4:	ac 01       	movw	r20, r24
    7da6:	63 96       	adiw	r28, 0x13	; 19
    7da8:	6c ad       	ldd	r22, Y+60	; 0x3c
    7daa:	7d ad       	ldd	r23, Y+61	; 0x3d
    7dac:	8e ad       	ldd	r24, Y+62	; 0x3e
    7dae:	9f ad       	ldd	r25, Y+63	; 0x3f
    7db0:	63 97       	sbiw	r28, 0x13	; 19
    7db2:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    7db6:	9b 01       	movw	r18, r22
    7db8:	ac 01       	movw	r20, r24
    7dba:	c2 01       	movw	r24, r4
    7dbc:	b1 01       	movw	r22, r2
    7dbe:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    7dc2:	88 23       	and	r24, r24
    7dc4:	5c f4       	brge	.+22     	; 0x7ddc <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x396>
      // K = min (K + .05, Kmax);            // esto previene el overflow, que después provoca errores en el cálculo de 'periodo_pasos'
      K += Kinc;
    7dc6:	c2 01       	movw	r24, r4
    7dc8:	b1 01       	movw	r22, r2
    7dca:	2d ec       	ldi	r18, 0xCD	; 205
    7dcc:	3c ec       	ldi	r19, 0xCC	; 204
    7dce:	4c ec       	ldi	r20, 0xCC	; 204
    7dd0:	5d e3       	ldi	r21, 0x3D	; 61
    7dd2:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    7dd6:	1b 01       	movw	r2, r22
    7dd8:	2c 01       	movw	r4, r24
    7dda:	4e c0       	rjmp	.+156    	; 0x7e78 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x432>
    } else {
      if (agrupamiento < Amax) {
    7ddc:	68 96       	adiw	r28, 0x18	; 24
    7dde:	af ad       	ldd	r26, Y+63	; 0x3f
    7de0:	68 97       	sbiw	r28, 0x18	; 24
    7de2:	67 96       	adiw	r28, 0x17	; 23
    7de4:	bf ad       	ldd	r27, Y+63	; 0x3f
    7de6:	67 97       	sbiw	r28, 0x17	; 23
    7de8:	ab 17       	cp	r26, r27
    7dea:	60 f5       	brcc	.+88     	; 0x7e44 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x3fe>
        agrupamiento ++;
    7dec:	af 5f       	subi	r26, 0xFF	; 255
    7dee:	68 96       	adiw	r28, 0x18	; 24
    7df0:	af af       	std	Y+63, r26	; 0x3f
    7df2:	68 97       	sbiw	r28, 0x18	; 24
        Kmax = 3.0/(marcha*agrupamiento*1.2);    // revisar esto
    7df4:	a6 9d       	mul	r26, r6
    7df6:	b0 01       	movw	r22, r0
    7df8:	11 24       	eor	r1, r1
    7dfa:	88 27       	eor	r24, r24
    7dfc:	77 fd       	sbrc	r23, 7
    7dfe:	80 95       	com	r24
    7e00:	98 2f       	mov	r25, r24
    7e02:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    7e06:	2a e9       	ldi	r18, 0x9A	; 154
    7e08:	39 e9       	ldi	r19, 0x99	; 153
    7e0a:	49 e9       	ldi	r20, 0x99	; 153
    7e0c:	5f e3       	ldi	r21, 0x3F	; 63
    7e0e:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    7e12:	9b 01       	movw	r18, r22
    7e14:	ac 01       	movw	r20, r24
    7e16:	60 e0       	ldi	r22, 0x00	; 0
    7e18:	70 e0       	ldi	r23, 0x00	; 0
    7e1a:	80 e4       	ldi	r24, 0x40	; 64
    7e1c:	90 e4       	ldi	r25, 0x40	; 64
    7e1e:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    7e22:	63 96       	adiw	r28, 0x13	; 19
    7e24:	6c af       	std	Y+60, r22	; 0x3c
    7e26:	7d af       	std	Y+61, r23	; 0x3d
    7e28:	8e af       	std	Y+62, r24	; 0x3e
    7e2a:	9f af       	std	Y+63, r25	; 0x3f
    7e2c:	63 97       	sbiw	r28, 0x13	; 19
    7e2e:	0f 2e       	mov	r0, r31
    7e30:	f3 ec       	ldi	r31, 0xC3	; 195
    7e32:	2f 2e       	mov	r2, r31
    7e34:	f5 ef       	ldi	r31, 0xF5	; 245
    7e36:	3f 2e       	mov	r3, r31
    7e38:	f8 ea       	ldi	r31, 0xA8	; 168
    7e3a:	4f 2e       	mov	r4, r31
    7e3c:	fe e3       	ldi	r31, 0x3E	; 62
    7e3e:	5f 2e       	mov	r5, r31
    7e40:	f0 2d       	mov	r31, r0
    7e42:	1a c0       	rjmp	.+52     	; 0x7e78 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x432>
        K = Kmin;
      } else {
        if (marcha < 3) {
    7e44:	e2 e0       	ldi	r30, 0x02	; 2
    7e46:	e6 15       	cp	r30, r6
    7e48:	08 f4       	brcc	.+2      	; 0x7e4c <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x406>
    7e4a:	74 c0       	rjmp	.+232    	; 0x7f34 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x4ee>
          marcha ++;
    7e4c:	63 94       	inc	r6
          Amax = 3 / marcha;    // división entera: va a dar 1 si marcha>1
    7e4e:	83 e0       	ldi	r24, 0x03	; 3
    7e50:	90 e0       	ldi	r25, 0x00	; 0
    7e52:	66 2d       	mov	r22, r6
    7e54:	70 e0       	ldi	r23, 0x00	; 0
    7e56:	0e 94 1f 81 	call	0x1023e	; 0x1023e <__divmodhi4>
    7e5a:	67 96       	adiw	r28, 0x17	; 23
    7e5c:	6f af       	std	Y+63, r22	; 0x3f
    7e5e:	67 97       	sbiw	r28, 0x17	; 23
          fases = 6 / marcha;
    7e60:	86 e0       	ldi	r24, 0x06	; 6
    7e62:	90 e0       	ldi	r25, 0x00	; 0
    7e64:	66 2d       	mov	r22, r6
    7e66:	70 e0       	ldi	r23, 0x00	; 0
    7e68:	0e 94 1f 81 	call	0x1023e	; 0x1023e <__divmodhi4>
    7e6c:	66 96       	adiw	r28, 0x16	; 22
    7e6e:	6f af       	std	Y+63, r22	; 0x3f
    7e70:	66 97       	sbiw	r28, 0x16	; 22
    7e72:	68 96       	adiw	r28, 0x18	; 24
    7e74:	1f ae       	std	Y+63, r1	; 0x3f
    7e76:	68 97       	sbiw	r28, 0x18	; 24
          agrupamiento = 0;
        } else {break;}
      }
    }
    periodo_sub_ciclo = -largo_pasos*agrupamiento/(velocidad*TICK*(K*agrupamiento-fases));  // [velocidad*TICK] es [velocidad*TICK*escala], pero escala=1 en este momento.
    7e78:	68 96       	adiw	r28, 0x18	; 24
    7e7a:	ff ad       	ldd	r31, Y+63	; 0x3f
    7e7c:	68 97       	sbiw	r28, 0x18	; 24
    7e7e:	6f 2f       	mov	r22, r31
    7e80:	70 e0       	ldi	r23, 0x00	; 0
    7e82:	88 27       	eor	r24, r24
    7e84:	77 fd       	sbrc	r23, 7
    7e86:	80 95       	com	r24
    7e88:	98 2f       	mov	r25, r24
    7e8a:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    7e8e:	7b 01       	movw	r14, r22
    7e90:	8c 01       	movw	r16, r24
    7e92:	e7 96       	adiw	r28, 0x37	; 55
    7e94:	6c ad       	ldd	r22, Y+60	; 0x3c
    7e96:	7d ad       	ldd	r23, Y+61	; 0x3d
    7e98:	8e ad       	ldd	r24, Y+62	; 0x3e
    7e9a:	9f ad       	ldd	r25, Y+63	; 0x3f
    7e9c:	e7 97       	sbiw	r28, 0x37	; 55
    7e9e:	a8 01       	movw	r20, r16
    7ea0:	97 01       	movw	r18, r14
    7ea2:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    7ea6:	a7 96       	adiw	r28, 0x27	; 39
    7ea8:	6c af       	std	Y+60, r22	; 0x3c
    7eaa:	7d af       	std	Y+61, r23	; 0x3d
    7eac:	8e af       	std	Y+62, r24	; 0x3e
    7eae:	9f af       	std	Y+63, r25	; 0x3f
    7eb0:	a7 97       	sbiw	r28, 0x27	; 39
    7eb2:	6e 96       	adiw	r28, 0x1e	; 30
    7eb4:	6c ad       	ldd	r22, Y+60	; 0x3c
    7eb6:	7d ad       	ldd	r23, Y+61	; 0x3d
    7eb8:	8e ad       	ldd	r24, Y+62	; 0x3e
    7eba:	9f ad       	ldd	r25, Y+63	; 0x3f
    7ebc:	6e 97       	sbiw	r28, 0x1e	; 30
    7ebe:	2f e6       	ldi	r18, 0x6F	; 111
    7ec0:	32 e1       	ldi	r19, 0x12	; 18
    7ec2:	43 e8       	ldi	r20, 0x83	; 131
    7ec4:	5b e3       	ldi	r21, 0x3B	; 59
    7ec6:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    7eca:	5b 01       	movw	r10, r22
    7ecc:	6c 01       	movw	r12, r24
    7ece:	c2 01       	movw	r24, r4
    7ed0:	b1 01       	movw	r22, r2
    7ed2:	a8 01       	movw	r20, r16
    7ed4:	97 01       	movw	r18, r14
    7ed6:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    7eda:	7b 01       	movw	r14, r22
    7edc:	8c 01       	movw	r16, r24
    7ede:	66 96       	adiw	r28, 0x16	; 22
    7ee0:	2f ad       	ldd	r18, Y+63	; 0x3f
    7ee2:	66 97       	sbiw	r28, 0x16	; 22
    7ee4:	62 2f       	mov	r22, r18
    7ee6:	70 e0       	ldi	r23, 0x00	; 0
    7ee8:	88 27       	eor	r24, r24
    7eea:	77 fd       	sbrc	r23, 7
    7eec:	80 95       	com	r24
    7eee:	98 2f       	mov	r25, r24
    7ef0:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    7ef4:	9b 01       	movw	r18, r22
    7ef6:	ac 01       	movw	r20, r24
    7ef8:	c8 01       	movw	r24, r16
    7efa:	b7 01       	movw	r22, r14
    7efc:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    7f00:	9b 01       	movw	r18, r22
    7f02:	ac 01       	movw	r20, r24
    7f04:	c6 01       	movw	r24, r12
    7f06:	b5 01       	movw	r22, r10
    7f08:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    7f0c:	9b 01       	movw	r18, r22
    7f0e:	ac 01       	movw	r20, r24
    7f10:	a7 96       	adiw	r28, 0x27	; 39
    7f12:	6c ad       	ldd	r22, Y+60	; 0x3c
    7f14:	7d ad       	ldd	r23, Y+61	; 0x3d
    7f16:	8e ad       	ldd	r24, Y+62	; 0x3e
    7f18:	9f ad       	ldd	r25, Y+63	; 0x3f
    7f1a:	a7 97       	sbiw	r28, 0x27	; 39
    7f1c:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    7f20:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <__fixsfsi>
    7f24:	65 96       	adiw	r28, 0x15	; 21
    7f26:	7f af       	std	Y+63, r23	; 0x3f
    7f28:	6e af       	std	Y+62, r22	; 0x3e
    7f2a:	65 97       	sbiw	r28, 0x15	; 21
	           K (relación entre duracion_paso y periodo_sub_ciclo), agrupamiento, periodo_sub_ciclo, marcha y fases */
  byte agrupamiento = 0, Amax = 0, fases;
  int periodo_sub_ciclo;
  float K = 0, Kmax = 0;
  marcha --;                     // marcha se va a incrementar por lo menos 1 vez
  do {
    7f2c:	63 38       	cpi	r22, 0x83	; 131
    7f2e:	71 05       	cpc	r23, r1
    7f30:	0c f4       	brge	.+2      	; 0x7f34 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x4ee>
    7f32:	24 cf       	rjmp	.-440    	; 0x7d7c <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x336>
    }
    periodo_sub_ciclo = -largo_pasos*agrupamiento/(velocidad*TICK*(K*agrupamiento-fases));  // [velocidad*TICK] es [velocidad*TICK*escala], pero escala=1 en este momento.
  } while (periodo_sub_ciclo < PERIODO_MIN_TICKS);
  
	// 2) vamos a elegir la secuencia
  byte secuencia [fases];
    7f34:	ad b7       	in	r26, 0x3d	; 61
    7f36:	be b7       	in	r27, 0x3e	; 62
    7f38:	66 96       	adiw	r28, 0x16	; 22
    7f3a:	ef ad       	ldd	r30, Y+63	; 0x3f
    7f3c:	66 97       	sbiw	r28, 0x16	; 22
    7f3e:	ae 1b       	sub	r26, r30
    7f40:	b1 09       	sbc	r27, r1
    7f42:	0f b6       	in	r0, 0x3f	; 63
    7f44:	f8 94       	cli
    7f46:	be bf       	out	0x3e, r27	; 62
    7f48:	0f be       	out	0x3f, r0	; 63
    7f4a:	ad bf       	out	0x3d, r26	; 61
    7f4c:	2d b7       	in	r18, 0x3d	; 61
    7f4e:	3e b7       	in	r19, 0x3e	; 62
    7f50:	2f 5f       	subi	r18, 0xFF	; 255
    7f52:	3f 4f       	sbci	r19, 0xFF	; 255
    7f54:	e2 96       	adiw	r28, 0x32	; 50
    7f56:	2f af       	std	Y+63, r18	; 0x3f
    7f58:	e2 97       	sbiw	r28, 0x32	; 50
    7f5a:	e3 96       	adiw	r28, 0x33	; 51
    7f5c:	3f af       	std	Y+63, r19	; 0x3f
    7f5e:	e3 97       	sbiw	r28, 0x33	; 51
  if (marcha == 1) {memcpy (secuencia, (byte[]){1, 16, 4, 8, 2, 32}, fases);}
    7f60:	f1 e0       	ldi	r31, 0x01	; 1
    7f62:	6f 16       	cp	r6, r31
    7f64:	69 f4       	brne	.+26     	; 0x7f80 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x53a>
    7f66:	de 01       	movw	r26, r28
    7f68:	16 96       	adiw	r26, 0x06	; 6
    7f6a:	ef e5       	ldi	r30, 0x5F	; 95
    7f6c:	f5 e0       	ldi	r31, 0x05	; 5
    7f6e:	86 e0       	ldi	r24, 0x06	; 6
    7f70:	01 90       	ld	r0, Z+
    7f72:	0d 92       	st	X+, r0
    7f74:	81 50       	subi	r24, 0x01	; 1
    7f76:	e1 f7       	brne	.-8      	; 0x7f70 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x52a>
    7f78:	9e 01       	movw	r18, r28
    7f7a:	2a 5f       	subi	r18, 0xFA	; 250
    7f7c:	3f 4f       	sbci	r19, 0xFF	; 255
    7f7e:	0f c0       	rjmp	.+30     	; 0x7f9e <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x558>
  else if (marcha == 2) {memcpy (secuencia, (byte[]){33, 12, 18}, fases);}
    7f80:	82 e0       	ldi	r24, 0x02	; 2
    7f82:	68 16       	cp	r6, r24
    7f84:	a1 f4       	brne	.+40     	; 0x7fae <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x568>
    7f86:	de 01       	movw	r26, r28
    7f88:	13 96       	adiw	r26, 0x03	; 3
    7f8a:	ec e5       	ldi	r30, 0x5C	; 92
    7f8c:	f5 e0       	ldi	r31, 0x05	; 5
    7f8e:	83 e0       	ldi	r24, 0x03	; 3
    7f90:	01 90       	ld	r0, Z+
    7f92:	0d 92       	st	X+, r0
    7f94:	81 50       	subi	r24, 0x01	; 1
    7f96:	e1 f7       	brne	.-8      	; 0x7f90 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x54a>
    7f98:	9e 01       	movw	r18, r28
    7f9a:	2d 5f       	subi	r18, 0xFD	; 253
    7f9c:	3f 4f       	sbci	r19, 0xFF	; 255
    7f9e:	e2 96       	adiw	r28, 0x32	; 50
    7fa0:	8f ad       	ldd	r24, Y+63	; 0x3f
    7fa2:	e2 97       	sbiw	r28, 0x32	; 50
    7fa4:	e3 96       	adiw	r28, 0x33	; 51
    7fa6:	9f ad       	ldd	r25, Y+63	; 0x3f
    7fa8:	e3 97       	sbiw	r28, 0x33	; 51
    7faa:	b9 01       	movw	r22, r18
    7fac:	08 c0       	rjmp	.+16     	; 0x7fbe <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x578>
  else {memcpy (secuencia, (byte[]){42, 21}, fases);}
    7fae:	8a e2       	ldi	r24, 0x2A	; 42
    7fb0:	89 83       	std	Y+1, r24	; 0x01
    7fb2:	85 e1       	ldi	r24, 0x15	; 21
    7fb4:	8a 83       	std	Y+2, r24	; 0x02
    7fb6:	c9 01       	movw	r24, r18
    7fb8:	be 01       	movw	r22, r28
    7fba:	6f 5f       	subi	r22, 0xFF	; 255
    7fbc:	7f 4f       	sbci	r23, 0xFF	; 255
    7fbe:	66 96       	adiw	r28, 0x16	; 22
    7fc0:	4f ad       	ldd	r20, Y+63	; 0x3f
    7fc2:	66 97       	sbiw	r28, 0x16	; 22
    7fc4:	50 e0       	ldi	r21, 0x00	; 0
    7fc6:	0e 94 6f 7b 	call	0xf6de	; 0xf6de <memcpy>
  /* otras secuencias que se podrían haber utilizado son {1, 2, 4, 8, 16, 32} y {1, 32, 4, 8, 2, 16}; */
  
  // 3) vamos a calcular: periodo_pasos, duracion_pasos
  int periodo_pasos;
  int duracion_pasos = K * periodo_sub_ciclo;
    7fca:	65 96       	adiw	r28, 0x15	; 21
    7fcc:	ae ad       	ldd	r26, Y+62	; 0x3e
    7fce:	bf ad       	ldd	r27, Y+63	; 0x3f
    7fd0:	65 97       	sbiw	r28, 0x15	; 21
    7fd2:	bd 01       	movw	r22, r26
    7fd4:	88 27       	eor	r24, r24
    7fd6:	77 fd       	sbrc	r23, 7
    7fd8:	80 95       	com	r24
    7fda:	98 2f       	mov	r25, r24
    7fdc:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    7fe0:	5b 01       	movw	r10, r22
    7fe2:	6c 01       	movw	r12, r24
    7fe4:	c2 01       	movw	r24, r4
    7fe6:	b1 01       	movw	r22, r2
    7fe8:	a6 01       	movw	r20, r12
    7fea:	95 01       	movw	r18, r10
    7fec:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    7ff0:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <__fixsfsi>
    7ff4:	3b 01       	movw	r6, r22
  if (agrupamiento == 1) {
    7ff6:	68 96       	adiw	r28, 0x18	; 24
    7ff8:	bf ad       	ldd	r27, Y+63	; 0x3f
    7ffa:	68 97       	sbiw	r28, 0x18	; 24
    7ffc:	b1 30       	cpi	r27, 0x01	; 1
    7ffe:	49 f4       	brne	.+18     	; 0x8012 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x5cc>
    8000:	65 96       	adiw	r28, 0x15	; 21
    8002:	ee ad       	ldd	r30, Y+62	; 0x3e
    8004:	ff ad       	ldd	r31, Y+63	; 0x3f
    8006:	65 97       	sbiw	r28, 0x15	; 21
    8008:	2f 96       	adiw	r28, 0x0f	; 15
    800a:	ff af       	std	Y+63, r31	; 0x3f
    800c:	ee af       	std	Y+62, r30	; 0x3e
    800e:	2f 97       	sbiw	r28, 0x0f	; 15
    8010:	2d c0       	rjmp	.+90     	; 0x806c <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x626>
    periodo_pasos = periodo_sub_ciclo;
  } else {
    periodo_pasos = (Kmax - K) * periodo_sub_ciclo / agrupamiento + 2;    // revisar esto también   
    8012:	63 96       	adiw	r28, 0x13	; 19
    8014:	6c ad       	ldd	r22, Y+60	; 0x3c
    8016:	7d ad       	ldd	r23, Y+61	; 0x3d
    8018:	8e ad       	ldd	r24, Y+62	; 0x3e
    801a:	9f ad       	ldd	r25, Y+63	; 0x3f
    801c:	63 97       	sbiw	r28, 0x13	; 19
    801e:	a2 01       	movw	r20, r4
    8020:	91 01       	movw	r18, r2
    8022:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    8026:	a6 01       	movw	r20, r12
    8028:	95 01       	movw	r18, r10
    802a:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    802e:	7b 01       	movw	r14, r22
    8030:	8c 01       	movw	r16, r24
    8032:	68 96       	adiw	r28, 0x18	; 24
    8034:	ff ad       	ldd	r31, Y+63	; 0x3f
    8036:	68 97       	sbiw	r28, 0x18	; 24
    8038:	6f 2f       	mov	r22, r31
    803a:	70 e0       	ldi	r23, 0x00	; 0
    803c:	88 27       	eor	r24, r24
    803e:	77 fd       	sbrc	r23, 7
    8040:	80 95       	com	r24
    8042:	98 2f       	mov	r25, r24
    8044:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    8048:	9b 01       	movw	r18, r22
    804a:	ac 01       	movw	r20, r24
    804c:	c8 01       	movw	r24, r16
    804e:	b7 01       	movw	r22, r14
    8050:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    8054:	20 e0       	ldi	r18, 0x00	; 0
    8056:	30 e0       	ldi	r19, 0x00	; 0
    8058:	40 e0       	ldi	r20, 0x00	; 0
    805a:	50 e4       	ldi	r21, 0x40	; 64
    805c:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    8060:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <__fixsfsi>
    8064:	2f 96       	adiw	r28, 0x0f	; 15
    8066:	7f af       	std	Y+63, r23	; 0x3f
    8068:	6e af       	std	Y+62, r22	; 0x3e
    806a:	2f 97       	sbiw	r28, 0x0f	; 15
  }
   
  // 4) vamos a calcular: escala (y escalar los 3 parámetros anteriores)
  byte escala = min (min(duracion_pasos, periodo_pasos), periodo_sub_ciclo) / 4;  // esto hace que luego del escalamiento, el parámetro más chico valga 4
    806c:	2f 96       	adiw	r28, 0x0f	; 15
    806e:	8e ad       	ldd	r24, Y+62	; 0x3e
    8070:	9f ad       	ldd	r25, Y+63	; 0x3f
    8072:	2f 97       	sbiw	r28, 0x0f	; 15
    8074:	68 16       	cp	r6, r24
    8076:	79 06       	cpc	r7, r25
    8078:	0c f4       	brge	.+2      	; 0x807c <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x636>
    807a:	c3 01       	movw	r24, r6
    807c:	65 96       	adiw	r28, 0x15	; 21
    807e:	2e ad       	ldd	r18, Y+62	; 0x3e
    8080:	3f ad       	ldd	r19, Y+63	; 0x3f
    8082:	65 97       	sbiw	r28, 0x15	; 21
    8084:	82 17       	cp	r24, r18
    8086:	93 07       	cpc	r25, r19
    8088:	74 f4       	brge	.+28     	; 0x80a6 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x660>
    808a:	2f 96       	adiw	r28, 0x0f	; 15
    808c:	8e ad       	ldd	r24, Y+62	; 0x3e
    808e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8090:	2f 97       	sbiw	r28, 0x0f	; 15
    8092:	68 16       	cp	r6, r24
    8094:	79 06       	cpc	r7, r25
    8096:	14 f4       	brge	.+4      	; 0x809c <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x656>
    8098:	c3 01       	movw	r24, r6
    809a:	09 c0       	rjmp	.+18     	; 0x80ae <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x668>
    809c:	2f 96       	adiw	r28, 0x0f	; 15
    809e:	8e ad       	ldd	r24, Y+62	; 0x3e
    80a0:	9f ad       	ldd	r25, Y+63	; 0x3f
    80a2:	2f 97       	sbiw	r28, 0x0f	; 15
    80a4:	04 c0       	rjmp	.+8      	; 0x80ae <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x668>
    80a6:	65 96       	adiw	r28, 0x15	; 21
    80a8:	8e ad       	ldd	r24, Y+62	; 0x3e
    80aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    80ac:	65 97       	sbiw	r28, 0x15	; 21
    80ae:	64 e0       	ldi	r22, 0x04	; 4
    80b0:	70 e0       	ldi	r23, 0x00	; 0
    80b2:	0e 94 1f 81 	call	0x1023e	; 0x1023e <__divmodhi4>
    80b6:	2d 96       	adiw	r28, 0x0d	; 13
    80b8:	6f af       	std	Y+63, r22	; 0x3f
    80ba:	2d 97       	sbiw	r28, 0x0d	; 13
  if (escala > 1) {
    80bc:	2d 96       	adiw	r28, 0x0d	; 13
    80be:	9f ad       	ldd	r25, Y+63	; 0x3f
    80c0:	2d 97       	sbiw	r28, 0x0d	; 13
    80c2:	92 30       	cpi	r25, 0x02	; 2
    80c4:	28 f4       	brcc	.+10     	; 0x80d0 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x68a>
    80c6:	a1 e0       	ldi	r26, 0x01	; 1
    80c8:	2d 96       	adiw	r28, 0x0d	; 13
    80ca:	af af       	std	Y+63, r26	; 0x3f
    80cc:	2d 97       	sbiw	r28, 0x0d	; 13
    80ce:	4e c0       	rjmp	.+156    	; 0x816c <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x726>
		periodo_sub_ciclo = 1.0*periodo_sub_ciclo/escala + 0.5;
    80d0:	2d 96       	adiw	r28, 0x0d	; 13
    80d2:	bf ad       	ldd	r27, Y+63	; 0x3f
    80d4:	2d 97       	sbiw	r28, 0x0d	; 13
    80d6:	6b 2f       	mov	r22, r27
    80d8:	70 e0       	ldi	r23, 0x00	; 0
    80da:	88 27       	eor	r24, r24
    80dc:	77 fd       	sbrc	r23, 7
    80de:	80 95       	com	r24
    80e0:	98 2f       	mov	r25, r24
    80e2:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    80e6:	7b 01       	movw	r14, r22
    80e8:	8c 01       	movw	r16, r24
    80ea:	c6 01       	movw	r24, r12
    80ec:	b5 01       	movw	r22, r10
    80ee:	a8 01       	movw	r20, r16
    80f0:	97 01       	movw	r18, r14
    80f2:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    80f6:	20 e0       	ldi	r18, 0x00	; 0
    80f8:	30 e0       	ldi	r19, 0x00	; 0
    80fa:	40 e0       	ldi	r20, 0x00	; 0
    80fc:	5f e3       	ldi	r21, 0x3F	; 63
    80fe:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    8102:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <__fixsfsi>
    8106:	65 96       	adiw	r28, 0x15	; 21
    8108:	7f af       	std	Y+63, r23	; 0x3f
    810a:	6e af       	std	Y+62, r22	; 0x3e
    810c:	65 97       	sbiw	r28, 0x15	; 21
		duracion_pasos = 1.0*duracion_pasos/escala + 0.5;
    810e:	b3 01       	movw	r22, r6
    8110:	88 27       	eor	r24, r24
    8112:	77 fd       	sbrc	r23, 7
    8114:	80 95       	com	r24
    8116:	98 2f       	mov	r25, r24
    8118:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    811c:	a8 01       	movw	r20, r16
    811e:	97 01       	movw	r18, r14
    8120:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    8124:	20 e0       	ldi	r18, 0x00	; 0
    8126:	30 e0       	ldi	r19, 0x00	; 0
    8128:	40 e0       	ldi	r20, 0x00	; 0
    812a:	5f e3       	ldi	r21, 0x3F	; 63
    812c:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    8130:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <__fixsfsi>
    8134:	3b 01       	movw	r6, r22
		periodo_pasos = 1.0*periodo_pasos/escala + 0.5;
    8136:	2f 96       	adiw	r28, 0x0f	; 15
    8138:	ee ad       	ldd	r30, Y+62	; 0x3e
    813a:	ff ad       	ldd	r31, Y+63	; 0x3f
    813c:	2f 97       	sbiw	r28, 0x0f	; 15
    813e:	bf 01       	movw	r22, r30
    8140:	88 27       	eor	r24, r24
    8142:	77 fd       	sbrc	r23, 7
    8144:	80 95       	com	r24
    8146:	98 2f       	mov	r25, r24
    8148:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    814c:	a8 01       	movw	r20, r16
    814e:	97 01       	movw	r18, r14
    8150:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    8154:	20 e0       	ldi	r18, 0x00	; 0
    8156:	30 e0       	ldi	r19, 0x00	; 0
    8158:	40 e0       	ldi	r20, 0x00	; 0
    815a:	5f e3       	ldi	r21, 0x3F	; 63
    815c:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    8160:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <__fixsfsi>
    8164:	2f 96       	adiw	r28, 0x0f	; 15
    8166:	7f af       	std	Y+63, r23	; 0x3f
    8168:	6e af       	std	Y+62, r22	; 0x3e
    816a:	2f 97       	sbiw	r28, 0x0f	; 15
	} else {escala = 1;}
  
  // 5) vamos a calcular: modulo_vector, ticks, altura_pasito, nsegmentos
  float modulo_vector = velocidad * TICK * escala;
    816c:	2d 96       	adiw	r28, 0x0d	; 13
    816e:	3f ad       	ldd	r19, Y+63	; 0x3f
    8170:	2d 97       	sbiw	r28, 0x0d	; 13
    8172:	23 2f       	mov	r18, r19
    8174:	30 e0       	ldi	r19, 0x00	; 0
    8176:	26 96       	adiw	r28, 0x06	; 6
    8178:	3f af       	std	Y+63, r19	; 0x3f
    817a:	2e af       	std	Y+62, r18	; 0x3e
    817c:	26 97       	sbiw	r28, 0x06	; 6
    817e:	6e 96       	adiw	r28, 0x1e	; 30
    8180:	6c ad       	ldd	r22, Y+60	; 0x3c
    8182:	7d ad       	ldd	r23, Y+61	; 0x3d
    8184:	8e ad       	ldd	r24, Y+62	; 0x3e
    8186:	9f ad       	ldd	r25, Y+63	; 0x3f
    8188:	6e 97       	sbiw	r28, 0x1e	; 30
    818a:	2f e6       	ldi	r18, 0x6F	; 111
    818c:	32 e1       	ldi	r19, 0x12	; 18
    818e:	43 e8       	ldi	r20, 0x83	; 131
    8190:	5b e3       	ldi	r21, 0x3B	; 59
    8192:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    8196:	7b 01       	movw	r14, r22
    8198:	8c 01       	movw	r16, r24
    819a:	26 96       	adiw	r28, 0x06	; 6
    819c:	ae ad       	ldd	r26, Y+62	; 0x3e
    819e:	bf ad       	ldd	r27, Y+63	; 0x3f
    81a0:	26 97       	sbiw	r28, 0x06	; 6
    81a2:	bd 01       	movw	r22, r26
    81a4:	88 27       	eor	r24, r24
    81a6:	77 fd       	sbrc	r23, 7
    81a8:	80 95       	com	r24
    81aa:	98 2f       	mov	r25, r24
    81ac:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    81b0:	9b 01       	movw	r18, r22
    81b2:	ac 01       	movw	r20, r24
    81b4:	c8 01       	movw	r24, r16
    81b6:	b7 01       	movw	r22, r14
    81b8:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    81bc:	2c 96       	adiw	r28, 0x0c	; 12
    81be:	6c af       	std	Y+60, r22	; 0x3c
    81c0:	7d af       	std	Y+61, r23	; 0x3d
    81c2:	8e af       	std	Y+62, r24	; 0x3e
    81c4:	9f af       	std	Y+63, r25	; 0x3f
    81c6:	2c 97       	sbiw	r28, 0x0c	; 12
  unsigned int ticks;
  if (desplazamiento >= 0) {ticks = desplazamiento / modulo_vector + duracion_pasos;} else {ticks = -1;}  
    81c8:	a2 96       	adiw	r28, 0x22	; 34
    81ca:	6c ad       	ldd	r22, Y+60	; 0x3c
    81cc:	7d ad       	ldd	r23, Y+61	; 0x3d
    81ce:	8e ad       	ldd	r24, Y+62	; 0x3e
    81d0:	9f ad       	ldd	r25, Y+63	; 0x3f
    81d2:	a2 97       	sbiw	r28, 0x22	; 34
    81d4:	20 e0       	ldi	r18, 0x00	; 0
    81d6:	30 e0       	ldi	r19, 0x00	; 0
    81d8:	40 e0       	ldi	r20, 0x00	; 0
    81da:	50 e0       	ldi	r21, 0x00	; 0
    81dc:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <__gesf2>
    81e0:	87 ff       	sbrs	r24, 7
    81e2:	07 c0       	rjmp	.+14     	; 0x81f2 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x7ac>
    81e4:	ef ef       	ldi	r30, 0xFF	; 255
    81e6:	ff ef       	ldi	r31, 0xFF	; 255
    81e8:	28 96       	adiw	r28, 0x08	; 8
    81ea:	ff af       	std	Y+63, r31	; 0x3f
    81ec:	ee af       	std	Y+62, r30	; 0x3e
    81ee:	28 97       	sbiw	r28, 0x08	; 8
    81f0:	23 c0       	rjmp	.+70     	; 0x8238 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x7f2>
    81f2:	a2 96       	adiw	r28, 0x22	; 34
    81f4:	6c ad       	ldd	r22, Y+60	; 0x3c
    81f6:	7d ad       	ldd	r23, Y+61	; 0x3d
    81f8:	8e ad       	ldd	r24, Y+62	; 0x3e
    81fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    81fc:	a2 97       	sbiw	r28, 0x22	; 34
    81fe:	2c 96       	adiw	r28, 0x0c	; 12
    8200:	2c ad       	ldd	r18, Y+60	; 0x3c
    8202:	3d ad       	ldd	r19, Y+61	; 0x3d
    8204:	4e ad       	ldd	r20, Y+62	; 0x3e
    8206:	5f ad       	ldd	r21, Y+63	; 0x3f
    8208:	2c 97       	sbiw	r28, 0x0c	; 12
    820a:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    820e:	7b 01       	movw	r14, r22
    8210:	8c 01       	movw	r16, r24
    8212:	b3 01       	movw	r22, r6
    8214:	88 27       	eor	r24, r24
    8216:	77 fd       	sbrc	r23, 7
    8218:	80 95       	com	r24
    821a:	98 2f       	mov	r25, r24
    821c:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    8220:	9b 01       	movw	r18, r22
    8222:	ac 01       	movw	r20, r24
    8224:	c8 01       	movw	r24, r16
    8226:	b7 01       	movw	r22, r14
    8228:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    822c:	0e 94 3f 7d 	call	0xfa7e	; 0xfa7e <__fixunssfsi>
    8230:	28 96       	adiw	r28, 0x08	; 8
    8232:	7f af       	std	Y+63, r23	; 0x3f
    8234:	6e af       	std	Y+62, r22	; 0x3e
    8236:	28 97       	sbiw	r28, 0x08	; 8
	// hasta acá lo que es común a traslación y rotación

  // 6) vamos a calcular: los vectores de movimiento (el único paso que varía según sea recta o curva)
  COORD2D vector;
  float rotacion;
  if (!curva) {
    8238:	a3 96       	adiw	r28, 0x23	; 35
    823a:	ff ad       	ldd	r31, Y+63	; 0x3f
    823c:	a3 97       	sbiw	r28, 0x23	; 35
    823e:	ff 23       	and	r31, r31
    8240:	99 f5       	brne	.+102    	; 0x82a8 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x862>
    vector = (COORD2D) {-modulo_vector*cos(angulo), -modulo_vector*sin(angulo)};  // lo invierte para acelerar los cálculos
    8242:	2c 96       	adiw	r28, 0x0c	; 12
    8244:	ec ac       	ldd	r14, Y+60	; 0x3c
    8246:	fd ac       	ldd	r15, Y+61	; 0x3d
    8248:	0e ad       	ldd	r16, Y+62	; 0x3e
    824a:	1f ad       	ldd	r17, Y+63	; 0x3f
    824c:	2c 97       	sbiw	r28, 0x0c	; 12
    824e:	17 fb       	bst	r17, 7
    8250:	10 95       	com	r17
    8252:	17 f9       	bld	r17, 7
    8254:	10 95       	com	r17
    8256:	cd 56       	subi	r28, 0x6D	; 109
    8258:	df 4f       	sbci	r29, 0xFF	; 255
    825a:	68 81       	ld	r22, Y
    825c:	79 81       	ldd	r23, Y+1	; 0x01
    825e:	8a 81       	ldd	r24, Y+2	; 0x02
    8260:	9b 81       	ldd	r25, Y+3	; 0x03
    8262:	c3 59       	subi	r28, 0x93	; 147
    8264:	d0 40       	sbci	r29, 0x00	; 0
    8266:	0e 94 9e 7c 	call	0xf93c	; 0xf93c <cos>
    826a:	9b 01       	movw	r18, r22
    826c:	ac 01       	movw	r20, r24
    826e:	c8 01       	movw	r24, r16
    8270:	b7 01       	movw	r22, r14
    8272:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    8276:	5b 01       	movw	r10, r22
    8278:	6c 01       	movw	r12, r24
    827a:	cd 56       	subi	r28, 0x6D	; 109
    827c:	df 4f       	sbci	r29, 0xFF	; 255
    827e:	68 81       	ld	r22, Y
    8280:	79 81       	ldd	r23, Y+1	; 0x01
    8282:	8a 81       	ldd	r24, Y+2	; 0x02
    8284:	9b 81       	ldd	r25, Y+3	; 0x03
    8286:	c3 59       	subi	r28, 0x93	; 147
    8288:	d0 40       	sbci	r29, 0x00	; 0
    828a:	0e 94 5f 80 	call	0x100be	; 0x100be <sin>
    828e:	9b 01       	movw	r18, r22
    8290:	ac 01       	movw	r20, r24
    8292:	c8 01       	movw	r24, r16
    8294:	b7 01       	movw	r22, r14
    8296:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    829a:	e6 2f       	mov	r30, r22
    829c:	69 2f       	mov	r22, r25
    829e:	ff 24       	eor	r15, r15
    82a0:	00 e0       	ldi	r16, 0x00	; 0
    82a2:	10 e0       	ldi	r17, 0x00	; 0
    82a4:	ee 24       	eor	r14, r14
    82a6:	21 c1       	rjmp	.+578    	; 0x84ea <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0xaa4>
    82a8:	0f 2e       	mov	r0, r31
    82aa:	f0 e0       	ldi	r31, 0x00	; 0
    82ac:	2f 2e       	mov	r2, r31
    82ae:	f0 e0       	ldi	r31, 0x00	; 0
    82b0:	3f 2e       	mov	r3, r31
    82b2:	f0 e0       	ldi	r31, 0x00	; 0
    82b4:	4f 2e       	mov	r4, r31
    82b6:	f0 e0       	ldi	r31, 0x00	; 0
    82b8:	5f 2e       	mov	r5, r31
    82ba:	f0 2d       	mov	r31, r0
    82bc:	88 24       	eor	r8, r8
    82be:	99 24       	eor	r9, r9
  } else {
    vector = centro;
    // medimos la pata más distante del centro
    float dist = 0;
    for (byte pata=0; pata<6; pata++) {
      float d = distancia (centro, rel2abs (xyz2xz(sh.mv.pos_ref[pata]), pata));
    82c0:	f4 01       	movw	r30, r8
    82c2:	ee 0f       	add	r30, r30
    82c4:	ff 1f       	adc	r31, r31
    82c6:	e8 0d       	add	r30, r8
    82c8:	f9 1d       	adc	r31, r9
    82ca:	ee 0f       	add	r30, r30
    82cc:	ff 1f       	adc	r31, r31
    82ce:	ee 0f       	add	r30, r30
    82d0:	ff 1f       	adc	r31, r31
    82d2:	6a 96       	adiw	r28, 0x1a	; 26
    82d4:	2e ad       	ldd	r18, Y+62	; 0x3e
    82d6:	3f ad       	ldd	r19, Y+63	; 0x3f
    82d8:	6a 97       	sbiw	r28, 0x1a	; 26
    82da:	e2 0f       	add	r30, r18
    82dc:	f3 1f       	adc	r31, r19
    82de:	e8 56       	subi	r30, 0x68	; 104
    82e0:	fe 4f       	sbci	r31, 0xFE	; 254
    82e2:	e0 80       	ld	r14, Z
    82e4:	f1 80       	ldd	r15, Z+1	; 0x01
    82e6:	02 81       	ldd	r16, Z+2	; 0x02
    82e8:	13 81       	ldd	r17, Z+3	; 0x03
    82ea:	24 81       	ldd	r18, Z+4	; 0x04
    82ec:	35 81       	ldd	r19, Z+5	; 0x05
    82ee:	46 81       	ldd	r20, Z+6	; 0x06
    82f0:	57 81       	ldd	r21, Z+7	; 0x07
    82f2:	60 85       	ldd	r22, Z+8	; 0x08
    82f4:	71 85       	ldd	r23, Z+9	; 0x09
    82f6:	82 85       	ldd	r24, Z+10	; 0x0a
    82f8:	93 85       	ldd	r25, Z+11	; 0x0b
    82fa:	0e 94 98 6b 	call	0xd730	; 0xd730 <_Z6xyz2xz7COORD3D>
    82fe:	2c af       	std	Y+60, r18	; 0x3c
    8300:	3d af       	std	Y+61, r19	; 0x3d
    8302:	4e af       	std	Y+62, r20	; 0x3e
    8304:	5f af       	std	Y+63, r21	; 0x3f
    8306:	21 96       	adiw	r28, 0x01	; 1
    8308:	6f af       	std	Y+63, r22	; 0x3f
    830a:	21 97       	sbiw	r28, 0x01	; 1
    830c:	22 96       	adiw	r28, 0x02	; 2
    830e:	7f af       	std	Y+63, r23	; 0x3f
    8310:	22 97       	sbiw	r28, 0x02	; 2
    8312:	23 96       	adiw	r28, 0x03	; 3
    8314:	8f af       	std	Y+63, r24	; 0x3f
    8316:	23 97       	sbiw	r28, 0x03	; 3
    8318:	24 96       	adiw	r28, 0x04	; 4
    831a:	9f af       	std	Y+63, r25	; 0x3f
    831c:	24 97       	sbiw	r28, 0x04	; 4
    831e:	de 01       	movw	r26, r28
    8320:	9c 96       	adiw	r26, 0x2c	; 44
    8322:	fe 01       	movw	r30, r28
    8324:	fc 96       	adiw	r30, 0x3c	; 60
    8326:	88 e0       	ldi	r24, 0x08	; 8
    8328:	01 90       	ld	r0, Z+
    832a:	0d 92       	st	X+, r0
    832c:	81 50       	subi	r24, 0x01	; 1
    832e:	e1 f7       	brne	.-8      	; 0x8328 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x8e2>
    8330:	2c a5       	ldd	r18, Y+44	; 0x2c
    8332:	3d a5       	ldd	r19, Y+45	; 0x2d
    8334:	4e a5       	ldd	r20, Y+46	; 0x2e
    8336:	5f a5       	ldd	r21, Y+47	; 0x2f
    8338:	68 a9       	ldd	r22, Y+48	; 0x30
    833a:	79 a9       	ldd	r23, Y+49	; 0x31
    833c:	8a a9       	ldd	r24, Y+50	; 0x32
    833e:	9b a9       	ldd	r25, Y+51	; 0x33
    8340:	08 2d       	mov	r16, r8
    8342:	0e 94 f9 71 	call	0xe3f2	; 0xe3f2 <_Z7rel2abs7COORD2Dh>
    8346:	2c af       	std	Y+60, r18	; 0x3c
    8348:	3d af       	std	Y+61, r19	; 0x3d
    834a:	4e af       	std	Y+62, r20	; 0x3e
    834c:	5f af       	std	Y+63, r21	; 0x3f
    834e:	21 96       	adiw	r28, 0x01	; 1
    8350:	6f af       	std	Y+63, r22	; 0x3f
    8352:	21 97       	sbiw	r28, 0x01	; 1
    8354:	22 96       	adiw	r28, 0x02	; 2
    8356:	7f af       	std	Y+63, r23	; 0x3f
    8358:	22 97       	sbiw	r28, 0x02	; 2
    835a:	23 96       	adiw	r28, 0x03	; 3
    835c:	8f af       	std	Y+63, r24	; 0x3f
    835e:	23 97       	sbiw	r28, 0x03	; 3
    8360:	24 96       	adiw	r28, 0x04	; 4
    8362:	9f af       	std	Y+63, r25	; 0x3f
    8364:	24 97       	sbiw	r28, 0x04	; 4
    8366:	de 01       	movw	r26, r28
    8368:	d4 96       	adiw	r26, 0x34	; 52
    836a:	fe 01       	movw	r30, r28
    836c:	fc 96       	adiw	r30, 0x3c	; 60
    836e:	88 e0       	ldi	r24, 0x08	; 8
    8370:	01 90       	ld	r0, Z+
    8372:	0d 92       	st	X+, r0
    8374:	81 50       	subi	r24, 0x01	; 1
    8376:	e1 f7       	brne	.-8      	; 0x8370 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x92a>
    8378:	ae 96       	adiw	r28, 0x2e	; 46
    837a:	2f ad       	ldd	r18, Y+63	; 0x3f
    837c:	ae 97       	sbiw	r28, 0x2e	; 46
    837e:	af 96       	adiw	r28, 0x2f	; 47
    8380:	3f ad       	ldd	r19, Y+63	; 0x3f
    8382:	af 97       	sbiw	r28, 0x2f	; 47
    8384:	e0 96       	adiw	r28, 0x30	; 48
    8386:	4f ad       	ldd	r20, Y+63	; 0x3f
    8388:	e0 97       	sbiw	r28, 0x30	; 48
    838a:	e1 96       	adiw	r28, 0x31	; 49
    838c:	5f ad       	ldd	r21, Y+63	; 0x3f
    838e:	e1 97       	sbiw	r28, 0x31	; 49
    8390:	c9 01       	movw	r24, r18
    8392:	da 01       	movw	r26, r20
    8394:	c5 57       	subi	r28, 0x75	; 117
    8396:	df 4f       	sbci	r29, 0xFF	; 255
    8398:	88 83       	st	Y, r24
    839a:	99 83       	std	Y+1, r25	; 0x01
    839c:	aa 83       	std	Y+2, r26	; 0x02
    839e:	bb 83       	std	Y+3, r27	; 0x03
    83a0:	cb 58       	subi	r28, 0x8B	; 139
    83a2:	d0 40       	sbci	r29, 0x00	; 0
    83a4:	aa 96       	adiw	r28, 0x2a	; 42
    83a6:	2f ad       	ldd	r18, Y+63	; 0x3f
    83a8:	aa 97       	sbiw	r28, 0x2a	; 42
    83aa:	ab 96       	adiw	r28, 0x2b	; 43
    83ac:	3f ad       	ldd	r19, Y+63	; 0x3f
    83ae:	ab 97       	sbiw	r28, 0x2b	; 43
    83b0:	ac 96       	adiw	r28, 0x2c	; 44
    83b2:	4f ad       	ldd	r20, Y+63	; 0x3f
    83b4:	ac 97       	sbiw	r28, 0x2c	; 44
    83b6:	ad 96       	adiw	r28, 0x2d	; 45
    83b8:	5f ad       	ldd	r21, Y+63	; 0x3f
    83ba:	ad 97       	sbiw	r28, 0x2d	; 45
    83bc:	c9 01       	movw	r24, r18
    83be:	da 01       	movw	r26, r20
    83c0:	c1 57       	subi	r28, 0x71	; 113
    83c2:	df 4f       	sbci	r29, 0xFF	; 255
    83c4:	88 83       	st	Y, r24
    83c6:	99 83       	std	Y+1, r25	; 0x01
    83c8:	aa 83       	std	Y+2, r26	; 0x02
    83ca:	bb 83       	std	Y+3, r27	; 0x03
    83cc:	cf 58       	subi	r28, 0x8F	; 143
    83ce:	d0 40       	sbci	r29, 0x00	; 0
    83d0:	c5 57       	subi	r28, 0x75	; 117
    83d2:	df 4f       	sbci	r29, 0xFF	; 255
    83d4:	28 81       	ld	r18, Y
    83d6:	cb 58       	subi	r28, 0x8B	; 139
    83d8:	d0 40       	sbci	r29, 0x00	; 0
    83da:	c4 57       	subi	r28, 0x74	; 116
    83dc:	df 4f       	sbci	r29, 0xFF	; 255
    83de:	38 81       	ld	r19, Y
    83e0:	cc 58       	subi	r28, 0x8C	; 140
    83e2:	d0 40       	sbci	r29, 0x00	; 0
    83e4:	c3 57       	subi	r28, 0x73	; 115
    83e6:	df 4f       	sbci	r29, 0xFF	; 255
    83e8:	48 81       	ld	r20, Y
    83ea:	cd 58       	subi	r28, 0x8D	; 141
    83ec:	d0 40       	sbci	r29, 0x00	; 0
    83ee:	c2 57       	subi	r28, 0x72	; 114
    83f0:	df 4f       	sbci	r29, 0xFF	; 255
    83f2:	58 81       	ld	r21, Y
    83f4:	ce 58       	subi	r28, 0x8E	; 142
    83f6:	d0 40       	sbci	r29, 0x00	; 0
    83f8:	c1 57       	subi	r28, 0x71	; 113
    83fa:	df 4f       	sbci	r29, 0xFF	; 255
    83fc:	68 81       	ld	r22, Y
    83fe:	cf 58       	subi	r28, 0x8F	; 143
    8400:	d0 40       	sbci	r29, 0x00	; 0
    8402:	c0 57       	subi	r28, 0x70	; 112
    8404:	df 4f       	sbci	r29, 0xFF	; 255
    8406:	78 81       	ld	r23, Y
    8408:	c0 59       	subi	r28, 0x90	; 144
    840a:	d0 40       	sbci	r29, 0x00	; 0
    840c:	cf 56       	subi	r28, 0x6F	; 111
    840e:	df 4f       	sbci	r29, 0xFF	; 255
    8410:	88 81       	ld	r24, Y
    8412:	c1 59       	subi	r28, 0x91	; 145
    8414:	d0 40       	sbci	r29, 0x00	; 0
    8416:	ce 56       	subi	r28, 0x6E	; 110
    8418:	df 4f       	sbci	r29, 0xFF	; 255
    841a:	98 81       	ld	r25, Y
    841c:	c2 59       	subi	r28, 0x92	; 146
    841e:	d0 40       	sbci	r29, 0x00	; 0
    8420:	ac a8       	ldd	r10, Y+52	; 0x34
    8422:	bd a8       	ldd	r11, Y+53	; 0x35
    8424:	ce a8       	ldd	r12, Y+54	; 0x36
    8426:	df a8       	ldd	r13, Y+55	; 0x37
    8428:	e8 ac       	ldd	r14, Y+56	; 0x38
    842a:	f9 ac       	ldd	r15, Y+57	; 0x39
    842c:	0a ad       	ldd	r16, Y+58	; 0x3a
    842e:	1b ad       	ldd	r17, Y+59	; 0x3b
    8430:	0e 94 5f 77 	call	0xeebe	; 0xeebe <_Z9distancia7COORD2DS_>
    8434:	16 2f       	mov	r17, r22
    8436:	07 2f       	mov	r16, r23
    8438:	f8 2e       	mov	r15, r24
    843a:	e9 2e       	mov	r14, r25
      if (dist < d) {dist = d;}
    843c:	c2 01       	movw	r24, r4
    843e:	b1 01       	movw	r22, r2
    8440:	21 2f       	mov	r18, r17
    8442:	30 2f       	mov	r19, r16
    8444:	4f 2d       	mov	r20, r15
    8446:	5e 2d       	mov	r21, r14
    8448:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    844c:	88 23       	and	r24, r24
    844e:	34 f4       	brge	.+12     	; 0x845c <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0xa16>
    8450:	81 2f       	mov	r24, r17
    8452:	90 2f       	mov	r25, r16
    8454:	af 2d       	mov	r26, r15
    8456:	be 2d       	mov	r27, r14
    8458:	1c 01       	movw	r2, r24
    845a:	2d 01       	movw	r4, r26
    845c:	08 94       	sec
    845e:	81 1c       	adc	r8, r1
    8460:	91 1c       	adc	r9, r1
    rotacion = 0;
  } else {
    vector = centro;
    // medimos la pata más distante del centro
    float dist = 0;
    for (byte pata=0; pata<6; pata++) {
    8462:	36 e0       	ldi	r19, 0x06	; 6
    8464:	83 16       	cp	r8, r19
    8466:	91 04       	cpc	r9, r1
    8468:	09 f0       	breq	.+2      	; 0x846c <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0xa26>
    846a:	2a cf       	rjmp	.-428    	; 0x82c0 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x87a>
      float d = distancia (centro, rel2abs (xyz2xz(sh.mv.pos_ref[pata]), pata));
      if (dist < d) {dist = d;}
    } 
    rotacion = sign (angulo) * modulo_vector / dist;       // aproximación basada en el arco; también podría usarse la cuerda
    846c:	cd 56       	subi	r28, 0x6D	; 109
    846e:	df 4f       	sbci	r29, 0xFF	; 255
    8470:	68 81       	ld	r22, Y
    8472:	79 81       	ldd	r23, Y+1	; 0x01
    8474:	8a 81       	ldd	r24, Y+2	; 0x02
    8476:	9b 81       	ldd	r25, Y+3	; 0x03
    8478:	c3 59       	subi	r28, 0x93	; 147
    847a:	d0 40       	sbci	r29, 0x00	; 0
    847c:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <__fixsfsi>
    8480:	dc 01       	movw	r26, r24
    8482:	cb 01       	movw	r24, r22
    8484:	0e 94 4c 66 	call	0xcc98	; 0xcc98 <_Z4signi>
    8488:	99 27       	eor	r25, r25
    848a:	87 fd       	sbrc	r24, 7
    848c:	90 95       	com	r25
    848e:	a9 2f       	mov	r26, r25
    8490:	b9 2f       	mov	r27, r25
    8492:	bc 01       	movw	r22, r24
    8494:	cd 01       	movw	r24, r26
    8496:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    849a:	2c 96       	adiw	r28, 0x0c	; 12
    849c:	2c ad       	ldd	r18, Y+60	; 0x3c
    849e:	3d ad       	ldd	r19, Y+61	; 0x3d
    84a0:	4e ad       	ldd	r20, Y+62	; 0x3e
    84a2:	5f ad       	ldd	r21, Y+63	; 0x3f
    84a4:	2c 97       	sbiw	r28, 0x0c	; 12
    84a6:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    84aa:	a2 01       	movw	r20, r4
    84ac:	91 01       	movw	r18, r2
    84ae:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    84b2:	f6 2e       	mov	r15, r22
    84b4:	07 2f       	mov	r16, r23
    84b6:	18 2f       	mov	r17, r24
    84b8:	e9 2e       	mov	r14, r25
    84ba:	aa 96       	adiw	r28, 0x2a	; 42
    84bc:	ef ad       	ldd	r30, Y+63	; 0x3f
    84be:	aa 97       	sbiw	r28, 0x2a	; 42
    84c0:	ab 96       	adiw	r28, 0x2b	; 43
    84c2:	7f ad       	ldd	r23, Y+63	; 0x3f
    84c4:	ab 97       	sbiw	r28, 0x2b	; 43
    84c6:	ac 96       	adiw	r28, 0x2c	; 44
    84c8:	8f ad       	ldd	r24, Y+63	; 0x3f
    84ca:	ac 97       	sbiw	r28, 0x2c	; 44
    84cc:	ad 96       	adiw	r28, 0x2d	; 45
    84ce:	6f ad       	ldd	r22, Y+63	; 0x3f
    84d0:	ad 97       	sbiw	r28, 0x2d	; 45
    84d2:	ae 96       	adiw	r28, 0x2e	; 46
    84d4:	af ac       	ldd	r10, Y+63	; 0x3f
    84d6:	ae 97       	sbiw	r28, 0x2e	; 46
    84d8:	af 96       	adiw	r28, 0x2f	; 47
    84da:	bf ac       	ldd	r11, Y+63	; 0x3f
    84dc:	af 97       	sbiw	r28, 0x2f	; 47
    84de:	e0 96       	adiw	r28, 0x30	; 48
    84e0:	cf ac       	ldd	r12, Y+63	; 0x3f
    84e2:	e0 97       	sbiw	r28, 0x30	; 48
    84e4:	e1 96       	adiw	r28, 0x31	; 49
    84e6:	df ac       	ldd	r13, Y+63	; 0x3f
    84e8:	e1 97       	sbiw	r28, 0x31	; 49
   duracion_pasos                 // si es == periodo_pasos, significa no aire entre las fases... si es > periodo_pasos hay "solapamiento" 
   altura_pasito                  // altura de las curvas bezier (pasitos) 
   nsegmentos                     // resolución de las curvas bezier (idealmente: largo_pasos*escala/nsegmentos != escala, para distribuir mejor los eventos AX12)  
	 compensate                     // boolean que indica si se debe corregir progresivamente la posición de referencia    */
	 
		wk.mv.vector = vector;         // en la recta esto es el vector, en la curva el centro (el vector es el desplazamiento por micropaso)
    84ea:	6a 96       	adiw	r28, 0x1a	; 26
    84ec:	ae ad       	ldd	r26, Y+62	; 0x3e
    84ee:	bf ad       	ldd	r27, Y+63	; 0x3f
    84f0:	6a 97       	sbiw	r28, 0x1a	; 26
    84f2:	a3 55       	subi	r26, 0x53	; 83
    84f4:	bf 4f       	sbci	r27, 0xFF	; 255
    84f6:	6a 96       	adiw	r28, 0x1a	; 26
    84f8:	bf af       	std	Y+63, r27	; 0x3f
    84fa:	ae af       	std	Y+62, r26	; 0x3e
    84fc:	6a 97       	sbiw	r28, 0x1a	; 26
    84fe:	2e 2f       	mov	r18, r30
    8500:	37 2f       	mov	r19, r23
    8502:	48 2f       	mov	r20, r24
    8504:	56 2f       	mov	r21, r22
    8506:	c9 01       	movw	r24, r18
    8508:	da 01       	movw	r26, r20
    850a:	6a 96       	adiw	r28, 0x1a	; 26
    850c:	ee ad       	ldd	r30, Y+62	; 0x3e
    850e:	ff ad       	ldd	r31, Y+63	; 0x3f
    8510:	6a 97       	sbiw	r28, 0x1a	; 26
    8512:	80 83       	st	Z, r24
    8514:	91 83       	std	Z+1, r25	; 0x01
    8516:	a2 83       	std	Z+2, r26	; 0x02
    8518:	b3 83       	std	Z+3, r27	; 0x03
    851a:	c5 01       	movw	r24, r10
    851c:	d6 01       	movw	r26, r12
    851e:	b2 93       	st	-Z, r27
    8520:	a2 93       	st	-Z, r26
    8522:	92 93       	st	-Z, r25
    8524:	82 93       	st	-Z, r24
		wk.mv.rotacion = rotacion;      // si vale 0 es recta, de lo contrario es el arco de la curva
    8526:	38 96       	adiw	r30, 0x08	; 8
    8528:	2f 2d       	mov	r18, r15
    852a:	30 2f       	mov	r19, r16
    852c:	41 2f       	mov	r20, r17
    852e:	5e 2d       	mov	r21, r14
    8530:	c9 01       	movw	r24, r18
    8532:	da 01       	movw	r26, r20
    8534:	80 83       	st	Z, r24
    8536:	91 83       	std	Z+1, r25	; 0x01
    8538:	a2 83       	std	Z+2, r26	; 0x02
    853a:	b3 83       	std	Z+3, r27	; 0x03
		sh.mv.ticks = ticks;
    853c:	ef 5c       	subi	r30, 0xCF	; 207
    853e:	fe 4f       	sbci	r31, 0xFE	; 254
    8540:	28 96       	adiw	r28, 0x08	; 8
    8542:	2e ad       	ldd	r18, Y+62	; 0x3e
    8544:	3f ad       	ldd	r19, Y+63	; 0x3f
    8546:	28 97       	sbiw	r28, 0x08	; 8
    8548:	31 83       	std	Z+1, r19	; 0x01
    854a:	20 83       	st	Z, r18
    854c:	e2 5e       	subi	r30, 0xE2	; 226
    854e:	f1 40       	sbci	r31, 0x01	; 1
    8550:	6a 96       	adiw	r28, 0x1a	; 26
    8552:	ff af       	std	Y+63, r31	; 0x3f
    8554:	ee af       	std	Y+62, r30	; 0x3e
    8556:	6a 97       	sbiw	r28, 0x1a	; 26
		memcpy (wk.mv.secuencia, secuencia, fases);
    8558:	9f 01       	movw	r18, r30
    855a:	2b 54       	subi	r18, 0x4B	; 75
    855c:	3f 4f       	sbci	r19, 0xFF	; 255
    855e:	c9 01       	movw	r24, r18
    8560:	e2 96       	adiw	r28, 0x32	; 50
    8562:	6f ad       	ldd	r22, Y+63	; 0x3f
    8564:	e2 97       	sbiw	r28, 0x32	; 50
    8566:	e3 96       	adiw	r28, 0x33	; 51
    8568:	7f ad       	ldd	r23, Y+63	; 0x3f
    856a:	e3 97       	sbiw	r28, 0x33	; 51
    856c:	66 96       	adiw	r28, 0x16	; 22
    856e:	4f ad       	ldd	r20, Y+63	; 0x3f
    8570:	66 97       	sbiw	r28, 0x16	; 22
    8572:	50 e0       	ldi	r21, 0x00	; 0
    8574:	0e 94 6f 7b 	call	0xf6de	; 0xf6de <memcpy>
		wk.mv.fases = fases;
    8578:	6a 96       	adiw	r28, 0x1a	; 26
    857a:	8e ad       	ldd	r24, Y+62	; 0x3e
    857c:	9f ad       	ldd	r25, Y+63	; 0x3f
    857e:	6a 97       	sbiw	r28, 0x1a	; 26
    8580:	85 54       	subi	r24, 0x45	; 69
    8582:	9f 4f       	sbci	r25, 0xFF	; 255
    8584:	dc 01       	movw	r26, r24
    8586:	66 96       	adiw	r28, 0x16	; 22
    8588:	ef ad       	ldd	r30, Y+63	; 0x3f
    858a:	66 97       	sbiw	r28, 0x16	; 22
    858c:	ed 93       	st	X+, r30
		wk.mv.agrupamiento = agrupamiento;
    858e:	68 96       	adiw	r28, 0x18	; 24
    8590:	ff ad       	ldd	r31, Y+63	; 0x3f
    8592:	68 97       	sbiw	r28, 0x18	; 24
    8594:	fc 93       	st	X, r31
		sh.mv.escala = escala;
    8596:	ac 5d       	subi	r26, 0xDC	; 220
    8598:	be 4f       	sbci	r27, 0xFE	; 254
    859a:	2d 96       	adiw	r28, 0x0d	; 13
    859c:	2f ad       	ldd	r18, Y+63	; 0x3f
    859e:	2d 97       	sbiw	r28, 0x0d	; 13
    85a0:	2c 93       	st	X, r18
		wk.mv.periodo_sub_ciclo = periodo_sub_ciclo;
    85a2:	a3 52       	subi	r26, 0x23	; 35
    85a4:	b1 40       	sbci	r27, 0x01	; 1
    85a6:	65 96       	adiw	r28, 0x15	; 21
    85a8:	8e ad       	ldd	r24, Y+62	; 0x3e
    85aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    85ac:	65 97       	sbiw	r28, 0x15	; 21
    85ae:	8d 93       	st	X+, r24
    85b0:	9d 93       	st	X+, r25
		wk.mv.periodo_pasos = periodo_pasos;
    85b2:	2f 96       	adiw	r28, 0x0f	; 15
    85b4:	ee ad       	ldd	r30, Y+62	; 0x3e
    85b6:	ff ad       	ldd	r31, Y+63	; 0x3f
    85b8:	2f 97       	sbiw	r28, 0x0f	; 15
    85ba:	ed 93       	st	X+, r30
    85bc:	fd 93       	st	X+, r31
    85be:	6a 96       	adiw	r28, 0x1a	; 26
    85c0:	bf af       	std	Y+63, r27	; 0x3f
    85c2:	ae af       	std	Y+62, r26	; 0x3e
    85c4:	6a 97       	sbiw	r28, 0x1a	; 26
		wk.mv.duracion_pasos = duracion_pasos;
    85c6:	6d 92       	st	X+, r6
    85c8:	7c 92       	st	X, r7
  /* a esta altura podemos hacer la siguiente operación comprobatoria: 
	    periodo_sub_ciclo = (largo_pasos/modulo_vector + duracion_pasos)*agrupamiento/fases */
  byte nsegmentos =  nseg (duracion_pasos, escala, largo_pasos);
  // fórmula para la altura del punto manejador de la curva bezier
  // contempla el largo y la duración de los pasos, pero igual da fruta
  float altura_pasito = 7.7 + 25*(8.4 + 2.6*sqrt(largo_pasos))/(duracion_pasos*escala);      // ajustar esto es casi imposible
    85ca:	c8 56       	subi	r28, 0x68	; 104
    85cc:	df 4f       	sbci	r29, 0xFF	; 255
    85ce:	68 81       	ld	r22, Y
    85d0:	79 81       	ldd	r23, Y+1	; 0x01
    85d2:	8a 81       	ldd	r24, Y+2	; 0x02
    85d4:	9b 81       	ldd	r25, Y+3	; 0x03
    85d6:	c8 59       	subi	r28, 0x98	; 152
    85d8:	d0 40       	sbci	r29, 0x00	; 0
    85da:	0e 94 69 80 	call	0x100d2	; 0x100d2 <sqrt>
		wk.mv.agrupamiento = agrupamiento;
		sh.mv.escala = escala;
		wk.mv.periodo_sub_ciclo = periodo_sub_ciclo;
		wk.mv.periodo_pasos = periodo_pasos;
		wk.mv.duracion_pasos = duracion_pasos;
		wk.mv.altura_pasito = altura_pasito;
    85de:	6a 96       	adiw	r28, 0x1a	; 26
    85e0:	2e ad       	ldd	r18, Y+62	; 0x3e
    85e2:	3f ad       	ldd	r19, Y+63	; 0x3f
    85e4:	6a 97       	sbiw	r28, 0x1a	; 26
    85e6:	2d 5f       	subi	r18, 0xFD	; 253
    85e8:	3f 4f       	sbci	r19, 0xFF	; 255
    85ea:	6a 96       	adiw	r28, 0x1a	; 26
    85ec:	3f af       	std	Y+63, r19	; 0x3f
    85ee:	2e af       	std	Y+62, r18	; 0x3e
    85f0:	6a 97       	sbiw	r28, 0x1a	; 26
    85f2:	26 e6       	ldi	r18, 0x66	; 102
    85f4:	36 e6       	ldi	r19, 0x66	; 102
    85f6:	46 e2       	ldi	r20, 0x26	; 38
    85f8:	50 e4       	ldi	r21, 0x40	; 64
    85fa:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    85fe:	26 e6       	ldi	r18, 0x66	; 102
    8600:	36 e6       	ldi	r19, 0x66	; 102
    8602:	46 e0       	ldi	r20, 0x06	; 6
    8604:	51 e4       	ldi	r21, 0x41	; 65
    8606:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    860a:	20 e0       	ldi	r18, 0x00	; 0
    860c:	30 e0       	ldi	r19, 0x00	; 0
    860e:	48 ec       	ldi	r20, 0xC8	; 200
    8610:	51 e4       	ldi	r21, 0x41	; 65
    8612:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    8616:	7b 01       	movw	r14, r22
    8618:	8c 01       	movw	r16, r24
    861a:	26 96       	adiw	r28, 0x06	; 6
    861c:	8e ad       	ldd	r24, Y+62	; 0x3e
    861e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8620:	26 97       	sbiw	r28, 0x06	; 6
    8622:	86 9d       	mul	r24, r6
    8624:	b0 01       	movw	r22, r0
    8626:	87 9d       	mul	r24, r7
    8628:	70 0d       	add	r23, r0
    862a:	96 9d       	mul	r25, r6
    862c:	70 0d       	add	r23, r0
    862e:	11 24       	eor	r1, r1
    8630:	88 27       	eor	r24, r24
    8632:	77 fd       	sbrc	r23, 7
    8634:	80 95       	com	r24
    8636:	98 2f       	mov	r25, r24
    8638:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    863c:	9b 01       	movw	r18, r22
    863e:	ac 01       	movw	r20, r24
    8640:	c8 01       	movw	r24, r16
    8642:	b7 01       	movw	r22, r14
    8644:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    8648:	26 e6       	ldi	r18, 0x66	; 102
    864a:	36 e6       	ldi	r19, 0x66	; 102
    864c:	46 ef       	ldi	r20, 0xF6	; 246
    864e:	50 e4       	ldi	r21, 0x40	; 64
    8650:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    8654:	6a 96       	adiw	r28, 0x1a	; 26
    8656:	ae ad       	ldd	r26, Y+62	; 0x3e
    8658:	bf ad       	ldd	r27, Y+63	; 0x3f
    865a:	6a 97       	sbiw	r28, 0x1a	; 26
    865c:	6d 93       	st	X+, r22
    865e:	7d 93       	st	X+, r23
    8660:	8d 93       	st	X+, r24
    8662:	9c 93       	st	X, r25
    8664:	13 97       	sbiw	r26, 0x03	; 3
    8666:	a4 5c       	subi	r26, 0xC4	; 196
    8668:	b0 40       	sbci	r27, 0x00	; 0
    866a:	6a 96       	adiw	r28, 0x1a	; 26
    866c:	bf af       	std	Y+63, r27	; 0x3f
    866e:	ae af       	std	Y+62, r26	; 0x3e
    8670:	6a 97       	sbiw	r28, 0x1a	; 26
  float modulo_vector = velocidad * TICK * escala;
  unsigned int ticks;
  if (desplazamiento >= 0) {ticks = desplazamiento / modulo_vector + duracion_pasos;} else {ticks = -1;}  
  /* a esta altura podemos hacer la siguiente operación comprobatoria: 
	    periodo_sub_ciclo = (largo_pasos/modulo_vector + duracion_pasos)*agrupamiento/fases */
  byte nsegmentos =  nseg (duracion_pasos, escala, largo_pasos);
    8672:	cd 01       	movw	r24, r26
    8674:	b3 01       	movw	r22, r6
    8676:	2d 96       	adiw	r28, 0x0d	; 13
    8678:	4f ad       	ldd	r20, Y+63	; 0x3f
    867a:	2d 97       	sbiw	r28, 0x0d	; 13
    867c:	c8 56       	subi	r28, 0x68	; 104
    867e:	df 4f       	sbci	r29, 0xFF	; 255
    8680:	08 81       	ld	r16, Y
    8682:	19 81       	ldd	r17, Y+1	; 0x01
    8684:	2a 81       	ldd	r18, Y+2	; 0x02
    8686:	3b 81       	ldd	r19, Y+3	; 0x03
    8688:	c8 59       	subi	r28, 0x98	; 152
    868a:	d0 40       	sbci	r29, 0x00	; 0
    868c:	0e 94 7e 28 	call	0x50fc	; 0x50fc <_ZN10Movimiento4nsegEihf>
		sh.mv.escala = escala;
		wk.mv.periodo_sub_ciclo = periodo_sub_ciclo;
		wk.mv.periodo_pasos = periodo_pasos;
		wk.mv.duracion_pasos = duracion_pasos;
		wk.mv.altura_pasito = altura_pasito;
		sh.mv.nsegmentos = nsegmentos;
    8690:	6a 96       	adiw	r28, 0x1a	; 26
    8692:	ee ad       	ldd	r30, Y+62	; 0x3e
    8694:	ff ad       	ldd	r31, Y+63	; 0x3f
    8696:	6a 97       	sbiw	r28, 0x1a	; 26
    8698:	ef 51       	subi	r30, 0x1F	; 31
    869a:	fe 4f       	sbci	r31, 0xFE	; 254
    869c:	80 83       	st	Z, r24
		
}
    869e:	a9 96       	adiw	r28, 0x29	; 41
    86a0:	2e ad       	ldd	r18, Y+62	; 0x3e
    86a2:	3f ad       	ldd	r19, Y+63	; 0x3f
    86a4:	a9 97       	sbiw	r28, 0x29	; 41
    86a6:	0f b6       	in	r0, 0x3f	; 63
    86a8:	f8 94       	cli
    86aa:	3e bf       	out	0x3e, r19	; 62
    86ac:	0f be       	out	0x3f, r0	; 63
    86ae:	2d bf       	out	0x3d, r18	; 61
    86b0:	ca 58       	subi	r28, 0x8A	; 138
    86b2:	df 4f       	sbci	r29, 0xFF	; 255
    86b4:	0f b6       	in	r0, 0x3f	; 63
    86b6:	f8 94       	cli
    86b8:	de bf       	out	0x3e, r29	; 62
    86ba:	0f be       	out	0x3f, r0	; 63
    86bc:	cd bf       	out	0x3d, r28	; 61
    86be:	cf 91       	pop	r28
    86c0:	df 91       	pop	r29
    86c2:	1f 91       	pop	r17
    86c4:	0f 91       	pop	r16
    86c6:	ff 90       	pop	r15
    86c8:	ef 90       	pop	r14
    86ca:	df 90       	pop	r13
    86cc:	cf 90       	pop	r12
    86ce:	bf 90       	pop	r11
    86d0:	af 90       	pop	r10
    86d2:	9f 90       	pop	r9
    86d4:	8f 90       	pop	r8
    86d6:	7f 90       	pop	r7
    86d8:	6f 90       	pop	r6
    86da:	5f 90       	pop	r5
    86dc:	4f 90       	pop	r4
    86de:	3f 90       	pop	r3
    86e0:	2f 90       	pop	r2
    86e2:	08 95       	ret

000086e4 <_ZN10Movimiento7set_velEf>:

/********************************************************************************************
                          MODIFICADORES ON-THE-FLY (revisar esto)
********************************************************************************************/													

void Movimiento::set_vel (float velocidad) {
    86e4:	2f 92       	push	r2
    86e6:	3f 92       	push	r3
    86e8:	4f 92       	push	r4
    86ea:	5f 92       	push	r5
    86ec:	6f 92       	push	r6
    86ee:	7f 92       	push	r7
    86f0:	8f 92       	push	r8
    86f2:	9f 92       	push	r9
    86f4:	af 92       	push	r10
    86f6:	bf 92       	push	r11
    86f8:	cf 92       	push	r12
    86fa:	df 92       	push	r13
    86fc:	ef 92       	push	r14
    86fe:	ff 92       	push	r15
    8700:	0f 93       	push	r16
    8702:	1f 93       	push	r17
    8704:	df 93       	push	r29
    8706:	cf 93       	push	r28
    8708:	cd b7       	in	r28, 0x3d	; 61
    870a:	de b7       	in	r29, 0x3e	; 62
    870c:	2e 97       	sbiw	r28, 0x0e	; 14
    870e:	0f b6       	in	r0, 0x3f	; 63
    8710:	f8 94       	cli
    8712:	de bf       	out	0x3e, r29	; 62
    8714:	0f be       	out	0x3f, r0	; 63
    8716:	cd bf       	out	0x3d, r28	; 61
    8718:	2c 01       	movw	r4, r24
    871a:	49 87       	std	Y+9, r20	; 0x09
    871c:	5a 87       	std	Y+10, r21	; 0x0a
    871e:	6b 87       	std	Y+11, r22	; 0x0b
    8720:	7c 87       	std	Y+12, r23	; 0x0c
		
	// re-calcular los parámetros
	if (wk.mv.rotacion != 0) {return;}                                              // por ahora sólo para caminatas rectas
    8722:	fc 01       	movw	r30, r24
    8724:	ef 54       	subi	r30, 0x4F	; 79
    8726:	ff 4f       	sbci	r31, 0xFF	; 255
    8728:	60 81       	ld	r22, Z
    872a:	71 81       	ldd	r23, Z+1	; 0x01
    872c:	82 81       	ldd	r24, Z+2	; 0x02
    872e:	93 81       	ldd	r25, Z+3	; 0x03
    8730:	20 e0       	ldi	r18, 0x00	; 0
    8732:	30 e0       	ldi	r19, 0x00	; 0
    8734:	40 e0       	ldi	r20, 0x00	; 0
    8736:	50 e0       	ldi	r21, 0x00	; 0
    8738:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    873c:	88 23       	and	r24, r24
    873e:	09 f0       	breq	.+2      	; 0x8742 <_ZN10Movimiento7set_velEf+0x5e>
    8740:	a1 c0       	rjmp	.+322    	; 0x8884 <_ZN10Movimiento7set_velEf+0x1a0>
	float modulo_vector = hypot (wk.mv.vector.x, wk.mv.vector.z);
    8742:	29 ea       	ldi	r18, 0xA9	; 169
    8744:	30 e0       	ldi	r19, 0x00	; 0
    8746:	42 0e       	add	r4, r18
    8748:	53 1e       	adc	r5, r19
    874a:	d2 01       	movw	r26, r4
    874c:	ad 90       	ld	r10, X+
    874e:	bd 90       	ld	r11, X+
    8750:	cd 90       	ld	r12, X+
    8752:	dd 90       	ld	r13, X+
    8754:	2d 01       	movw	r4, r26
    8756:	ed 90       	ld	r14, X+
    8758:	fd 90       	ld	r15, X+
    875a:	0d 91       	ld	r16, X+
    875c:	1c 91       	ld	r17, X
    875e:	e3 e5       	ldi	r30, 0x53	; 83
    8760:	ff ef       	ldi	r31, 0xFF	; 255
    8762:	4e 0e       	add	r4, r30
    8764:	5f 1e       	adc	r5, r31
    8766:	c6 01       	movw	r24, r12
    8768:	b5 01       	movw	r22, r10
    876a:	a8 01       	movw	r20, r16
    876c:	97 01       	movw	r18, r14
    876e:	0e 94 a3 7e 	call	0xfd46	; 0xfd46 <hypot>
    8772:	3b 01       	movw	r6, r22
    8774:	4c 01       	movw	r8, r24
	float desplazamiento = (sh.mv.ticks - sh.cn.tick) * modulo_vector; 
    8776:	f2 01       	movw	r30, r4
    8778:	ee 51       	subi	r30, 0x1E	; 30
    877a:	fe 4f       	sbci	r31, 0xFE	; 254
    877c:	26 ee       	ldi	r18, 0xE6	; 230
    877e:	31 e0       	ldi	r19, 0x01	; 1
    8780:	42 0e       	add	r4, r18
    8782:	53 1e       	adc	r5, r19
    8784:	60 81       	ld	r22, Z
    8786:	71 81       	ldd	r23, Z+1	; 0x01
    8788:	d2 01       	movw	r26, r4
    878a:	2d 91       	ld	r18, X+
    878c:	3c 91       	ld	r19, X
    878e:	ea e1       	ldi	r30, 0x1A	; 26
    8790:	fe ef       	ldi	r31, 0xFE	; 254
    8792:	4e 0e       	add	r4, r30
    8794:	5f 1e       	adc	r5, r31
    8796:	62 1b       	sub	r22, r18
    8798:	73 0b       	sbc	r23, r19
    879a:	80 e0       	ldi	r24, 0x00	; 0
    879c:	90 e0       	ldi	r25, 0x00	; 0
    879e:	0e 94 6b 7d 	call	0xfad6	; 0xfad6 <__floatunsisf>
    87a2:	a4 01       	movw	r20, r8
    87a4:	93 01       	movw	r18, r6
    87a6:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    87aa:	36 2e       	mov	r3, r22
    87ac:	27 2e       	mov	r2, r23
    87ae:	8d 87       	std	Y+13, r24	; 0x0d
    87b0:	9e 87       	std	Y+14, r25	; 0x0e
	float angulo = atan2 (-wk.mv.vector.z, -wk.mv.vector.x);
    87b2:	17 fb       	bst	r17, 7
    87b4:	10 95       	com	r17
    87b6:	17 f9       	bld	r17, 7
    87b8:	10 95       	com	r17
    87ba:	d7 fa       	bst	r13, 7
    87bc:	d0 94       	com	r13
    87be:	d7 f8       	bld	r13, 7
    87c0:	d0 94       	com	r13
    87c2:	c8 01       	movw	r24, r16
    87c4:	b7 01       	movw	r22, r14
    87c6:	a6 01       	movw	r20, r12
    87c8:	95 01       	movw	r18, r10
    87ca:	0e 94 47 7c 	call	0xf88e	; 0xf88e <atan2>
    87ce:	7b 01       	movw	r14, r22
    87d0:	8c 01       	movw	r16, r24
	float largo_pasos = modulo_vector * 2 * wk.rt.coeficiente;
    87d2:	c4 01       	movw	r24, r8
    87d4:	b3 01       	movw	r22, r6
    87d6:	a4 01       	movw	r20, r8
    87d8:	93 01       	movw	r18, r6
    87da:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    87de:	f2 01       	movw	r30, r4
    87e0:	e4 53       	subi	r30, 0x34	; 52
    87e2:	ff 4f       	sbci	r31, 0xFF	; 255
    87e4:	20 81       	ld	r18, Z
    87e6:	31 81       	ldd	r19, Z+1	; 0x01
    87e8:	42 81       	ldd	r20, Z+2	; 0x02
    87ea:	53 81       	ldd	r21, Z+3	; 0x03
    87ec:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    87f0:	a8 2e       	mov	r10, r24
	
	// re-setear todas las variables
	set_values (velocidad, desplazamiento, false, (COORD2D){0,0}, angulo, 1, largo_pasos); 
    87f2:	de 01       	movw	r26, r28
    87f4:	11 96       	adiw	r26, 0x01	; 1
    87f6:	e4 e5       	ldi	r30, 0x54	; 84
    87f8:	f5 e0       	ldi	r31, 0x05	; 5
    87fa:	88 e0       	ldi	r24, 0x08	; 8
    87fc:	01 90       	ld	r0, Z+
    87fe:	0d 92       	st	X+, r0
    8800:	81 50       	subi	r24, 0x01	; 1
    8802:	e1 f7       	brne	.-8      	; 0x87fc <_ZN10Movimiento7set_velEf+0x118>
    8804:	2d b7       	in	r18, 0x3d	; 61
    8806:	3e b7       	in	r19, 0x3e	; 62
    8808:	21 51       	subi	r18, 0x11	; 17
    880a:	30 40       	sbci	r19, 0x00	; 0
    880c:	0f b6       	in	r0, 0x3f	; 63
    880e:	f8 94       	cli
    8810:	3e bf       	out	0x3e, r19	; 62
    8812:	0f be       	out	0x3f, r0	; 63
    8814:	2d bf       	out	0x3d, r18	; 61
    8816:	ed b7       	in	r30, 0x3d	; 61
    8818:	fe b7       	in	r31, 0x3e	; 62
    881a:	31 96       	adiw	r30, 0x01	; 1
    881c:	9f 01       	movw	r18, r30
    881e:	ae 01       	movw	r20, r28
    8820:	4f 5f       	subi	r20, 0xFF	; 255
    8822:	5f 4f       	sbci	r21, 0xFF	; 255
    8824:	88 e0       	ldi	r24, 0x08	; 8
    8826:	da 01       	movw	r26, r20
    8828:	0d 90       	ld	r0, X+
    882a:	ad 01       	movw	r20, r26
    882c:	d9 01       	movw	r26, r18
    882e:	0d 92       	st	X+, r0
    8830:	9d 01       	movw	r18, r26
    8832:	81 50       	subi	r24, 0x01	; 1
    8834:	c1 f7       	brne	.-16     	; 0x8826 <_ZN10Movimiento7set_velEf+0x142>
    8836:	e0 86       	std	Z+8, r14	; 0x08
    8838:	f1 86       	std	Z+9, r15	; 0x09
    883a:	02 87       	std	Z+10, r16	; 0x0a
    883c:	13 87       	std	Z+11, r17	; 0x0b
    883e:	81 e0       	ldi	r24, 0x01	; 1
    8840:	84 87       	std	Z+12, r24	; 0x0c
    8842:	4a 2d       	mov	r20, r10
    8844:	59 2f       	mov	r21, r25
    8846:	cb 01       	movw	r24, r22
    8848:	da 01       	movw	r26, r20
    884a:	85 87       	std	Z+13, r24	; 0x0d
    884c:	96 87       	std	Z+14, r25	; 0x0e
    884e:	a7 87       	std	Z+15, r26	; 0x0f
    8850:	b0 8b       	std	Z+16, r27	; 0x10
    8852:	c2 01       	movw	r24, r4
    8854:	49 85       	ldd	r20, Y+9	; 0x09
    8856:	5a 85       	ldd	r21, Y+10	; 0x0a
    8858:	6b 85       	ldd	r22, Y+11	; 0x0b
    885a:	7c 85       	ldd	r23, Y+12	; 0x0c
    885c:	e3 2d       	mov	r30, r3
    885e:	f2 2d       	mov	r31, r2
    8860:	ad 85       	ldd	r26, Y+13	; 0x0d
    8862:	be 85       	ldd	r27, Y+14	; 0x0e
    8864:	8f 01       	movw	r16, r30
    8866:	9d 01       	movw	r18, r26
    8868:	ee 24       	eor	r14, r14
    886a:	0e 94 23 3d 	call	0x7a46	; 0x7a46 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf>
	caminata_init2 ();
    886e:	ed b7       	in	r30, 0x3d	; 61
    8870:	fe b7       	in	r31, 0x3e	; 62
    8872:	71 96       	adiw	r30, 0x11	; 17
    8874:	0f b6       	in	r0, 0x3f	; 63
    8876:	f8 94       	cli
    8878:	fe bf       	out	0x3e, r31	; 62
    887a:	0f be       	out	0x3f, r0	; 63
    887c:	ed bf       	out	0x3d, r30	; 61
    887e:	c2 01       	movw	r24, r4
    8880:	0e 94 51 3a 	call	0x74a2	; 0x74a2 <_ZN10Movimiento14caminata_init2Ev>
		
}
    8884:	2e 96       	adiw	r28, 0x0e	; 14
    8886:	0f b6       	in	r0, 0x3f	; 63
    8888:	f8 94       	cli
    888a:	de bf       	out	0x3e, r29	; 62
    888c:	0f be       	out	0x3f, r0	; 63
    888e:	cd bf       	out	0x3d, r28	; 61
    8890:	cf 91       	pop	r28
    8892:	df 91       	pop	r29
    8894:	1f 91       	pop	r17
    8896:	0f 91       	pop	r16
    8898:	ff 90       	pop	r15
    889a:	ef 90       	pop	r14
    889c:	df 90       	pop	r13
    889e:	cf 90       	pop	r12
    88a0:	bf 90       	pop	r11
    88a2:	af 90       	pop	r10
    88a4:	9f 90       	pop	r9
    88a6:	8f 90       	pop	r8
    88a8:	7f 90       	pop	r7
    88aa:	6f 90       	pop	r6
    88ac:	5f 90       	pop	r5
    88ae:	4f 90       	pop	r4
    88b0:	3f 90       	pop	r3
    88b2:	2f 90       	pop	r2
    88b4:	08 95       	ret

000088b6 <_ZN10Movimiento8caminataEffb7COORD2Dfhf>:
void Movimiento::curva (float velocidad, float desplazamiento, COORD2D centro, bool sentido, byte marcha, float largo_pasos) {
  caminata (velocidad, desplazamiento, true, centro, bin2sign(sentido), marcha, largo_pasos);
}

// caminata con parámetros "inteligentes"
void Movimiento::caminata (float velocidad, float desplazamiento, bool curva, COORD2D centro, float angulo, byte marcha, float largo_pasos) {
    88b6:	8f 92       	push	r8
    88b8:	9f 92       	push	r9
    88ba:	af 92       	push	r10
    88bc:	bf 92       	push	r11
    88be:	cf 92       	push	r12
    88c0:	df 92       	push	r13
    88c2:	ef 92       	push	r14
    88c4:	0f 93       	push	r16
    88c6:	1f 93       	push	r17
    88c8:	df 93       	push	r29
    88ca:	cf 93       	push	r28
    88cc:	cd b7       	in	r28, 0x3d	; 61
    88ce:	de b7       	in	r29, 0x3e	; 62
    88d0:	4c 01       	movw	r8, r24
    88d2:	58 01       	movw	r10, r16
    88d4:	69 01       	movw	r12, r18
	set_values (velocidad, desplazamiento, curva, centro, angulo, marcha, largo_pasos);
    88d6:	8d b7       	in	r24, 0x3d	; 61
    88d8:	9e b7       	in	r25, 0x3e	; 62
    88da:	41 97       	sbiw	r24, 0x11	; 17
    88dc:	0f b6       	in	r0, 0x3f	; 63
    88de:	f8 94       	cli
    88e0:	9e bf       	out	0x3e, r25	; 62
    88e2:	0f be       	out	0x3f, r0	; 63
    88e4:	8d bf       	out	0x3d, r24	; 61
    88e6:	ed b7       	in	r30, 0x3d	; 61
    88e8:	fe b7       	in	r31, 0x3e	; 62
    88ea:	31 96       	adiw	r30, 0x01	; 1
    88ec:	9f 01       	movw	r18, r30
    88ee:	8e 01       	movw	r16, r28
    88f0:	02 5f       	subi	r16, 0xF2	; 242
    88f2:	1f 4f       	sbci	r17, 0xFF	; 255
    88f4:	88 e0       	ldi	r24, 0x08	; 8
    88f6:	d8 01       	movw	r26, r16
    88f8:	0d 90       	ld	r0, X+
    88fa:	8d 01       	movw	r16, r26
    88fc:	d9 01       	movw	r26, r18
    88fe:	0d 92       	st	X+, r0
    8900:	9d 01       	movw	r18, r26
    8902:	81 50       	subi	r24, 0x01	; 1
    8904:	c1 f7       	brne	.-16     	; 0x88f6 <_ZN10Movimiento8caminataEffb7COORD2Dfhf+0x40>
    8906:	8e 89       	ldd	r24, Y+22	; 0x16
    8908:	9f 89       	ldd	r25, Y+23	; 0x17
    890a:	a8 8d       	ldd	r26, Y+24	; 0x18
    890c:	b9 8d       	ldd	r27, Y+25	; 0x19
    890e:	80 87       	std	Z+8, r24	; 0x08
    8910:	91 87       	std	Z+9, r25	; 0x09
    8912:	a2 87       	std	Z+10, r26	; 0x0a
    8914:	b3 87       	std	Z+11, r27	; 0x0b
    8916:	8a 8d       	ldd	r24, Y+26	; 0x1a
    8918:	84 87       	std	Z+12, r24	; 0x0c
    891a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    891c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    891e:	ad 8d       	ldd	r26, Y+29	; 0x1d
    8920:	be 8d       	ldd	r27, Y+30	; 0x1e
    8922:	85 87       	std	Z+13, r24	; 0x0d
    8924:	96 87       	std	Z+14, r25	; 0x0e
    8926:	a7 87       	std	Z+15, r26	; 0x0f
    8928:	b0 8b       	std	Z+16, r27	; 0x10
    892a:	c4 01       	movw	r24, r8
    892c:	96 01       	movw	r18, r12
    892e:	85 01       	movw	r16, r10
    8930:	0e 94 23 3d 	call	0x7a46	; 0x7a46 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf>
	caminata (true);                                                           // revisar esta lógica
    8934:	8d b7       	in	r24, 0x3d	; 61
    8936:	9e b7       	in	r25, 0x3e	; 62
    8938:	41 96       	adiw	r24, 0x11	; 17
    893a:	0f b6       	in	r0, 0x3f	; 63
    893c:	f8 94       	cli
    893e:	9e bf       	out	0x3e, r25	; 62
    8940:	0f be       	out	0x3f, r0	; 63
    8942:	8d bf       	out	0x3d, r24	; 61
    8944:	c4 01       	movw	r24, r8
    8946:	61 e0       	ldi	r22, 0x01	; 1
    8948:	0e 94 04 3d 	call	0x7a08	; 0x7a08 <_ZN10Movimiento8caminataEb>
}
    894c:	cf 91       	pop	r28
    894e:	df 91       	pop	r29
    8950:	1f 91       	pop	r17
    8952:	0f 91       	pop	r16
    8954:	ef 90       	pop	r14
    8956:	df 90       	pop	r13
    8958:	cf 90       	pop	r12
    895a:	bf 90       	pop	r11
    895c:	af 90       	pop	r10
    895e:	9f 90       	pop	r9
    8960:	8f 90       	pop	r8
    8962:	08 95       	ret

00008964 <_ZN10Movimiento5rectaEfffhf>:

					
///////////////////////////////////////// CAMINATAS /////////////////////////////////////////

// recta común
void Movimiento::recta (float velocidad, float desplazamiento, float angulo, byte marcha, float largo_pasos) {
    8964:	4f 92       	push	r4
    8966:	5f 92       	push	r5
    8968:	6f 92       	push	r6
    896a:	7f 92       	push	r7
    896c:	8f 92       	push	r8
    896e:	9f 92       	push	r9
    8970:	af 92       	push	r10
    8972:	cf 92       	push	r12
    8974:	df 92       	push	r13
    8976:	ef 92       	push	r14
    8978:	ff 92       	push	r15
    897a:	0f 93       	push	r16
    897c:	1f 93       	push	r17
    897e:	df 93       	push	r29
    8980:	cf 93       	push	r28
    8982:	cd b7       	in	r28, 0x3d	; 61
    8984:	de b7       	in	r29, 0x3e	; 62
    8986:	28 97       	sbiw	r28, 0x08	; 8
    8988:	0f b6       	in	r0, 0x3f	; 63
    898a:	f8 94       	cli
    898c:	de bf       	out	0x3e, r29	; 62
    898e:	0f be       	out	0x3f, r0	; 63
    8990:	cd bf       	out	0x3d, r28	; 61
    8992:	2c 01       	movw	r4, r24
    8994:	38 01       	movw	r6, r16
    8996:	49 01       	movw	r8, r18
  caminata (velocidad, desplazamiento, false, (COORD2D){0,0}, angulo, marcha, largo_pasos);
    8998:	de 01       	movw	r26, r28
    899a:	11 96       	adiw	r26, 0x01	; 1
    899c:	e5 e6       	ldi	r30, 0x65	; 101
    899e:	f5 e0       	ldi	r31, 0x05	; 5
    89a0:	88 e0       	ldi	r24, 0x08	; 8
    89a2:	01 90       	ld	r0, Z+
    89a4:	0d 92       	st	X+, r0
    89a6:	81 50       	subi	r24, 0x01	; 1
    89a8:	e1 f7       	brne	.-8      	; 0x89a2 <_ZN10Movimiento5rectaEfffhf+0x3e>
    89aa:	8d b7       	in	r24, 0x3d	; 61
    89ac:	9e b7       	in	r25, 0x3e	; 62
    89ae:	41 97       	sbiw	r24, 0x11	; 17
    89b0:	0f b6       	in	r0, 0x3f	; 63
    89b2:	f8 94       	cli
    89b4:	9e bf       	out	0x3e, r25	; 62
    89b6:	0f be       	out	0x3f, r0	; 63
    89b8:	8d bf       	out	0x3d, r24	; 61
    89ba:	ed b7       	in	r30, 0x3d	; 61
    89bc:	fe b7       	in	r31, 0x3e	; 62
    89be:	31 96       	adiw	r30, 0x01	; 1
    89c0:	9f 01       	movw	r18, r30
    89c2:	8e 01       	movw	r16, r28
    89c4:	0f 5f       	subi	r16, 0xFF	; 255
    89c6:	1f 4f       	sbci	r17, 0xFF	; 255
    89c8:	88 e0       	ldi	r24, 0x08	; 8
    89ca:	d8 01       	movw	r26, r16
    89cc:	0d 90       	ld	r0, X+
    89ce:	8d 01       	movw	r16, r26
    89d0:	d9 01       	movw	r26, r18
    89d2:	0d 92       	st	X+, r0
    89d4:	9d 01       	movw	r18, r26
    89d6:	81 50       	subi	r24, 0x01	; 1
    89d8:	c1 f7       	brne	.-16     	; 0x89ca <_ZN10Movimiento5rectaEfffhf+0x66>
    89da:	c0 86       	std	Z+8, r12	; 0x08
    89dc:	d1 86       	std	Z+9, r13	; 0x09
    89de:	e2 86       	std	Z+10, r14	; 0x0a
    89e0:	f3 86       	std	Z+11, r15	; 0x0b
    89e2:	a4 86       	std	Z+12, r10	; 0x0c
    89e4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    89e6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    89e8:	ac 8d       	ldd	r26, Y+28	; 0x1c
    89ea:	bd 8d       	ldd	r27, Y+29	; 0x1d
    89ec:	85 87       	std	Z+13, r24	; 0x0d
    89ee:	96 87       	std	Z+14, r25	; 0x0e
    89f0:	a7 87       	std	Z+15, r26	; 0x0f
    89f2:	b0 8b       	std	Z+16, r27	; 0x10
    89f4:	c2 01       	movw	r24, r4
    89f6:	94 01       	movw	r18, r8
    89f8:	83 01       	movw	r16, r6
    89fa:	ee 24       	eor	r14, r14
    89fc:	0e 94 5b 44 	call	0x88b6	; 0x88b6 <_ZN10Movimiento8caminataEffb7COORD2Dfhf>
    8a00:	8d b7       	in	r24, 0x3d	; 61
    8a02:	9e b7       	in	r25, 0x3e	; 62
    8a04:	41 96       	adiw	r24, 0x11	; 17
    8a06:	0f b6       	in	r0, 0x3f	; 63
    8a08:	f8 94       	cli
    8a0a:	9e bf       	out	0x3e, r25	; 62
    8a0c:	0f be       	out	0x3f, r0	; 63
    8a0e:	8d bf       	out	0x3d, r24	; 61
}
    8a10:	28 96       	adiw	r28, 0x08	; 8
    8a12:	0f b6       	in	r0, 0x3f	; 63
    8a14:	f8 94       	cli
    8a16:	de bf       	out	0x3e, r29	; 62
    8a18:	0f be       	out	0x3f, r0	; 63
    8a1a:	cd bf       	out	0x3d, r28	; 61
    8a1c:	cf 91       	pop	r28
    8a1e:	df 91       	pop	r29
    8a20:	1f 91       	pop	r17
    8a22:	0f 91       	pop	r16
    8a24:	ff 90       	pop	r15
    8a26:	ef 90       	pop	r14
    8a28:	df 90       	pop	r13
    8a2a:	cf 90       	pop	r12
    8a2c:	af 90       	pop	r10
    8a2e:	9f 90       	pop	r9
    8a30:	8f 90       	pop	r8
    8a32:	7f 90       	pop	r7
    8a34:	6f 90       	pop	r6
    8a36:	5f 90       	pop	r5
    8a38:	4f 90       	pop	r4
    8a3a:	08 95       	ret

00008a3c <_ZN10Movimiento5curvaEff7COORD2Dbhf>:
		
// curva común
void Movimiento::curva (float velocidad, float desplazamiento, COORD2D centro, bool sentido, byte marcha, float largo_pasos) {
    8a3c:	2f 92       	push	r2
    8a3e:	3f 92       	push	r3
    8a40:	4f 92       	push	r4
    8a42:	5f 92       	push	r5
    8a44:	6f 92       	push	r6
    8a46:	7f 92       	push	r7
    8a48:	8f 92       	push	r8
    8a4a:	9f 92       	push	r9
    8a4c:	af 92       	push	r10
    8a4e:	bf 92       	push	r11
    8a50:	cf 92       	push	r12
    8a52:	df 92       	push	r13
    8a54:	ef 92       	push	r14
    8a56:	ff 92       	push	r15
    8a58:	0f 93       	push	r16
    8a5a:	1f 93       	push	r17
    8a5c:	df 93       	push	r29
    8a5e:	cf 93       	push	r28
    8a60:	cd b7       	in	r28, 0x3d	; 61
    8a62:	de b7       	in	r29, 0x3e	; 62
    8a64:	2c 97       	sbiw	r28, 0x0c	; 12
    8a66:	0f b6       	in	r0, 0x3f	; 63
    8a68:	f8 94       	cli
    8a6a:	de bf       	out	0x3e, r29	; 62
    8a6c:	0f be       	out	0x3f, r0	; 63
    8a6e:	cd bf       	out	0x3d, r28	; 61
    8a70:	1c 01       	movw	r2, r24
    8a72:	2a 01       	movw	r4, r20
    8a74:	3b 01       	movw	r6, r22
    8a76:	09 87       	std	Y+9, r16	; 0x09
    8a78:	1a 87       	std	Y+10, r17	; 0x0a
    8a7a:	2b 87       	std	Y+11, r18	; 0x0b
    8a7c:	3c 87       	std	Y+12, r19	; 0x0c
    8a7e:	89 82       	std	Y+1, r8	; 0x01
    8a80:	9a 82       	std	Y+2, r9	; 0x02
    8a82:	ab 82       	std	Y+3, r10	; 0x03
    8a84:	bc 82       	std	Y+4, r11	; 0x04
    8a86:	cd 82       	std	Y+5, r12	; 0x05
    8a88:	de 82       	std	Y+6, r13	; 0x06
    8a8a:	ef 82       	std	Y+7, r14	; 0x07
    8a8c:	f8 86       	std	Y+8, r15	; 0x08
  caminata (velocidad, desplazamiento, true, centro, bin2sign(sentido), marcha, largo_pasos);
    8a8e:	89 a1       	ldd	r24, Y+33	; 0x21
    8a90:	0e 94 48 0a 	call	0x1490	; 0x1490 <_Z8bin2signb>
    8a94:	2d b7       	in	r18, 0x3d	; 61
    8a96:	3e b7       	in	r19, 0x3e	; 62
    8a98:	21 51       	subi	r18, 0x11	; 17
    8a9a:	30 40       	sbci	r19, 0x00	; 0
    8a9c:	0f b6       	in	r0, 0x3f	; 63
    8a9e:	f8 94       	cli
    8aa0:	3e bf       	out	0x3e, r19	; 62
    8aa2:	0f be       	out	0x3f, r0	; 63
    8aa4:	2d bf       	out	0x3d, r18	; 61
    8aa6:	ed b6       	in	r14, 0x3d	; 61
    8aa8:	fe b6       	in	r15, 0x3e	; 62
    8aaa:	08 94       	sec
    8aac:	e1 1c       	adc	r14, r1
    8aae:	f1 1c       	adc	r15, r1
    8ab0:	d7 01       	movw	r26, r14
    8ab2:	fe 01       	movw	r30, r28
    8ab4:	31 96       	adiw	r30, 0x01	; 1
    8ab6:	28 e0       	ldi	r18, 0x08	; 8
    8ab8:	01 90       	ld	r0, Z+
    8aba:	0d 92       	st	X+, r0
    8abc:	21 50       	subi	r18, 0x01	; 1
    8abe:	e1 f7       	brne	.-8      	; 0x8ab8 <_ZN10Movimiento5curvaEff7COORD2Dbhf+0x7c>
    8ac0:	68 2f       	mov	r22, r24
    8ac2:	77 27       	eor	r23, r23
    8ac4:	67 fd       	sbrc	r22, 7
    8ac6:	70 95       	com	r23
    8ac8:	87 2f       	mov	r24, r23
    8aca:	97 2f       	mov	r25, r23
    8acc:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    8ad0:	f7 01       	movw	r30, r14
    8ad2:	60 87       	std	Z+8, r22	; 0x08
    8ad4:	71 87       	std	Z+9, r23	; 0x09
    8ad6:	82 87       	std	Z+10, r24	; 0x0a
    8ad8:	93 87       	std	Z+11, r25	; 0x0b
    8ada:	8a a1       	ldd	r24, Y+34	; 0x22
    8adc:	84 87       	std	Z+12, r24	; 0x0c
    8ade:	8b a1       	ldd	r24, Y+35	; 0x23
    8ae0:	9c a1       	ldd	r25, Y+36	; 0x24
    8ae2:	ad a1       	ldd	r26, Y+37	; 0x25
    8ae4:	be a1       	ldd	r27, Y+38	; 0x26
    8ae6:	85 87       	std	Z+13, r24	; 0x0d
    8ae8:	96 87       	std	Z+14, r25	; 0x0e
    8aea:	a7 87       	std	Z+15, r26	; 0x0f
    8aec:	b0 8b       	std	Z+16, r27	; 0x10
    8aee:	c1 01       	movw	r24, r2
    8af0:	b3 01       	movw	r22, r6
    8af2:	a2 01       	movw	r20, r4
    8af4:	09 85       	ldd	r16, Y+9	; 0x09
    8af6:	1a 85       	ldd	r17, Y+10	; 0x0a
    8af8:	2b 85       	ldd	r18, Y+11	; 0x0b
    8afa:	3c 85       	ldd	r19, Y+12	; 0x0c
    8afc:	ee 24       	eor	r14, r14
    8afe:	e3 94       	inc	r14
    8b00:	0e 94 5b 44 	call	0x88b6	; 0x88b6 <_ZN10Movimiento8caminataEffb7COORD2Dfhf>
    8b04:	2d b7       	in	r18, 0x3d	; 61
    8b06:	3e b7       	in	r19, 0x3e	; 62
    8b08:	2f 5e       	subi	r18, 0xEF	; 239
    8b0a:	3f 4f       	sbci	r19, 0xFF	; 255
    8b0c:	0f b6       	in	r0, 0x3f	; 63
    8b0e:	f8 94       	cli
    8b10:	3e bf       	out	0x3e, r19	; 62
    8b12:	0f be       	out	0x3f, r0	; 63
    8b14:	2d bf       	out	0x3d, r18	; 61
}
    8b16:	2c 96       	adiw	r28, 0x0c	; 12
    8b18:	0f b6       	in	r0, 0x3f	; 63
    8b1a:	f8 94       	cli
    8b1c:	de bf       	out	0x3e, r29	; 62
    8b1e:	0f be       	out	0x3f, r0	; 63
    8b20:	cd bf       	out	0x3d, r28	; 61
    8b22:	cf 91       	pop	r28
    8b24:	df 91       	pop	r29
    8b26:	1f 91       	pop	r17
    8b28:	0f 91       	pop	r16
    8b2a:	ff 90       	pop	r15
    8b2c:	ef 90       	pop	r14
    8b2e:	df 90       	pop	r13
    8b30:	cf 90       	pop	r12
    8b32:	bf 90       	pop	r11
    8b34:	af 90       	pop	r10
    8b36:	9f 90       	pop	r9
    8b38:	8f 90       	pop	r8
    8b3a:	7f 90       	pop	r7
    8b3c:	6f 90       	pop	r6
    8b3e:	5f 90       	pop	r5
    8b40:	4f 90       	pop	r4
    8b42:	3f 90       	pop	r3
    8b44:	2f 90       	pop	r2
    8b46:	08 95       	ret

00008b48 <_Z12init_filtersv>:
	motor_index %= 18;
	
	idle ++;
}

void init_filters () {                            // inicialización de los buffers circulares
    8b48:	ea e0       	ldi	r30, 0x0A	; 10
    8b4a:	f4 e1       	ldi	r31, 0x14	; 20
    8b4c:	20 e0       	ldi	r18, 0x00	; 0
    8b4e:	30 e0       	ldi	r19, 0x00	; 0
	for (byte f=0; f<18; f++) {
		filtro [f] = RingBuffer <char> (buffer[f], 5);          
    8b50:	45 e0       	ldi	r20, 0x05	; 5
    8b52:	c9 01       	movw	r24, r18
    8b54:	88 0f       	add	r24, r24
    8b56:	99 1f       	adc	r25, r25
    8b58:	88 0f       	add	r24, r24
    8b5a:	99 1f       	adc	r25, r25
    8b5c:	82 0f       	add	r24, r18
    8b5e:	93 1f       	adc	r25, r19
    8b60:	80 55       	subi	r24, 0x50	; 80
    8b62:	9c 4e       	sbci	r25, 0xEC	; 236
    8b64:	80 83       	st	Z, r24
    8b66:	91 83       	std	Z+1, r25	; 0x01
    8b68:	12 82       	std	Z+2, r1	; 0x02
    8b6a:	43 83       	std	Z+3, r20	; 0x03
    8b6c:	2f 5f       	subi	r18, 0xFF	; 255
    8b6e:	3f 4f       	sbci	r19, 0xFF	; 255
    8b70:	34 96       	adiw	r30, 0x04	; 4
	
	idle ++;
}

void init_filters () {                            // inicialización de los buffers circulares
	for (byte f=0; f<18; f++) {
    8b72:	22 31       	cpi	r18, 0x12	; 18
    8b74:	31 05       	cpc	r19, r1
    8b76:	69 f7       	brne	.-38     	; 0x8b52 <_Z12init_filtersv+0xa>
		filtro [f] = RingBuffer <char> (buffer[f], 5);          
	}
}
    8b78:	08 95       	ret

00008b7a <_GLOBAL__I_motors>:
	byte dat = 2*digitalRead (4) + digitalRead(5); 
	// esto es provisorio
	pantalla.scrollText (("C"+String(dat, DEC)).toCharArray(), 70);    //PRUEBA DE CONCEPTO (provisorio)
	// termina provisorio
	cuerdita_flag = 128 + dat;
    8b7a:	cf 93       	push	r28
    8b7c:	df 93       	push	r29
    8b7e:	cf ec       	ldi	r28, 0xCF	; 207
    8b80:	d2 e1       	ldi	r29, 0x12	; 18
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const byte ids[6][3] = {{0,1,2}, {4,5,6}, {8,9,10}, {12,13,14}, {16,17,18}, {20,21,22}};      // IDs de los motores
// const char offset[3] = {0, 0, 0};                                                              // offsets angulares de cada anillo (no se usó al final)

AX12 motors [6][3];                                          // array de los 18 motores
    8b82:	ce 01       	movw	r24, r28
    8b84:	0e 94 8c 09 	call	0x1318	; 0x1318 <_ZN4AX12C1Ev>
    8b88:	ce 01       	movw	r24, r28
    8b8a:	03 96       	adiw	r24, 0x03	; 3
    8b8c:	0e 94 8c 09 	call	0x1318	; 0x1318 <_ZN4AX12C1Ev>
    8b90:	ce 01       	movw	r24, r28
    8b92:	06 96       	adiw	r24, 0x06	; 6
    8b94:	0e 94 8c 09 	call	0x1318	; 0x1318 <_ZN4AX12C1Ev>
    8b98:	29 96       	adiw	r28, 0x09	; 9
    8b9a:	83 e1       	ldi	r24, 0x13	; 19
    8b9c:	c5 30       	cpi	r28, 0x05	; 5
    8b9e:	d8 07       	cpc	r29, r24
    8ba0:	81 f7       	brne	.-32     	; 0x8b82 <_GLOBAL__I_motors+0x8>
AX12 broadcast = AX12();                                      // objeto broadcast, rara vez usado
    8ba2:	85 e0       	ldi	r24, 0x05	; 5
    8ba4:	93 e1       	ldi	r25, 0x13	; 19
    8ba6:	0e 94 8c 09 	call	0x1318	; 0x1318 <_ZN4AX12C1Ev>
	byte dat = 2*digitalRead (4) + digitalRead(5); 
	// esto es provisorio
	pantalla.scrollText (("C"+String(dat, DEC)).toCharArray(), 70);    //PRUEBA DE CONCEPTO (provisorio)
	// termina provisorio
	cuerdita_flag = 128 + dat;
    8baa:	df 91       	pop	r29
    8bac:	cf 91       	pop	r28
    8bae:	08 95       	ret

00008bb0 <_Z18poll_analog_sensorm>:
#define SNS_SAMPLE   6                	  // período de muestreo sensores analógicos (en ms)
#define NUM_SENSORS  2                  	// cantidad de sensores analógicos
enum {SNS_FUERZA, SNS_ANGULO};        	// nombres de los sensores
byte sensor [NUM_SENSORS] = {6, 7};   	// mapea el indice de sensor al número de port analógico

void poll_analog_sensor (unsigned long milis) {
    8bb0:	ef 92       	push	r14
    8bb2:	ff 92       	push	r15
    8bb4:	0f 93       	push	r16
    8bb6:	1f 93       	push	r17
    8bb8:	9b 01       	movw	r18, r22
    8bba:	ac 01       	movw	r20, r24
	
	static unsigned long timer = 0;
	static byte index;                 // alterna entre los sensores
	
	if (milis-timer >= SNS_SAMPLE) {   
    8bbc:	80 91 53 14 	lds	r24, 0x1453
    8bc0:	90 91 54 14 	lds	r25, 0x1454
    8bc4:	a0 91 55 14 	lds	r26, 0x1455
    8bc8:	b0 91 56 14 	lds	r27, 0x1456
    8bcc:	79 01       	movw	r14, r18
    8bce:	8a 01       	movw	r16, r20
    8bd0:	e8 1a       	sub	r14, r24
    8bd2:	f9 0a       	sbc	r15, r25
    8bd4:	0a 0b       	sbc	r16, r26
    8bd6:	1b 0b       	sbc	r17, r27
    8bd8:	d8 01       	movw	r26, r16
    8bda:	c7 01       	movw	r24, r14
    8bdc:	06 97       	sbiw	r24, 0x06	; 6
    8bde:	a1 05       	cpc	r26, r1
    8be0:	b1 05       	cpc	r27, r1
    8be2:	20 f1       	brcs	.+72     	; 0x8c2c <_Z18poll_analog_sensorm+0x7c>
		timer = milis;
    8be4:	20 93 53 14 	sts	0x1453, r18
    8be8:	30 93 54 14 	sts	0x1454, r19
    8bec:	40 93 55 14 	sts	0x1455, r20
    8bf0:	50 93 56 14 	sts	0x1456, r21
		int val = ADCReadConv ();
    8bf4:	0e 94 29 1b 	call	0x3652	; 0x3652 <_Z11ADCReadConvv>
		switch (index) {
    8bf8:	e0 91 52 14 	lds	r30, 0x1452
    8bfc:	ee 23       	and	r30, r30
    8bfe:	19 f0       	breq	.+6      	; 0x8c06 <_Z18poll_analog_sensorm+0x56>
    8c00:	e1 30       	cpi	r30, 0x01	; 1
    8c02:	51 f4       	brne	.+20     	; 0x8c18 <_Z18poll_analog_sensorm+0x68>
    8c04:	05 c0       	rjmp	.+10     	; 0x8c10 <_Z18poll_analog_sensorm+0x60>
			case SNS_FUERZA:
				sns_fuerza = val;                       // el valor se almacena como viene... 
    8c06:	90 93 ab 13 	sts	0x13AB, r25
    8c0a:	80 93 aa 13 	sts	0x13AA, r24
    8c0e:	04 c0       	rjmp	.+8      	; 0x8c18 <_Z18poll_analog_sensorm+0x68>
				break;
			case SNS_ANGULO:
				sns_angulo = val;														  // ...para no gastar procesamiento acá
    8c10:	90 93 ad 13 	sts	0x13AD, r25
    8c14:	80 93 ac 13 	sts	0x13AC, r24
				break;
		}
		index ++;
		index %= NUM_SENSORS;
    8c18:	ef 5f       	subi	r30, 0xFF	; 255
    8c1a:	e1 70       	andi	r30, 0x01	; 1
    8c1c:	e0 93 52 14 	sts	0x1452, r30
		ADCInitConv (sensor[index]);
    8c20:	f0 e0       	ldi	r31, 0x00	; 0
    8c22:	ee 50       	subi	r30, 0x0E	; 14
    8c24:	fc 4f       	sbci	r31, 0xFC	; 252
    8c26:	80 81       	ld	r24, Z
    8c28:	0e 94 10 1b 	call	0x3620	; 0x3620 <_Z11ADCInitConvh>
	}
	
}
    8c2c:	1f 91       	pop	r17
    8c2e:	0f 91       	pop	r16
    8c30:	ff 90       	pop	r15
    8c32:	ef 90       	pop	r14
    8c34:	08 95       	ret

00008c36 <_Z9poll_loadv>:
unsigned int idle = 0;     // esto es importantísimo para las conductas

char buffer [18][5];                              // buffers para el filtrado de la carga de los motores
RingBuffer <char> filtro[18];                       // circularización de dichos buffers 

void poll_load () {               /* mide la carga en cada motor. Lo hace cuando los motores no están trabajando, y a un 
    8c36:	9f 92       	push	r9
    8c38:	af 92       	push	r10
    8c3a:	bf 92       	push	r11
    8c3c:	cf 92       	push	r12
    8c3e:	df 92       	push	r13
    8c40:	ef 92       	push	r14
    8c42:	ff 92       	push	r15
    8c44:	0f 93       	push	r16
    8c46:	1f 93       	push	r17
    8c48:	cf 93       	push	r28
    8c4a:	df 93       	push	r29
                                        ritmo de 14 veces por segundo, lo cual es acorde con las características del motor
																				El resultado queda en array 'char load [6][3]'                                     */
	                                                          
	static byte motor_index = 0;                        // motor al que se le mide el load
	byte pata = motor_index / 3;
    8c4c:	e0 90 57 14 	lds	r14, 0x1457
	byte anillo = motor_index % 3;
	all_timers_off ();
    8c50:	80 e0       	ldi	r24, 0x00	; 0
    8c52:	0e 94 3d 1b 	call	0x367a	; 0x367a <_Z14all_timers_offb>
	sei();                   // habilita las "nested interrupts"...
    8c56:	78 94       	sei
	// ...lo que hace posible la lectura del motor desde dentro de la ISR
	char carga = bin2sign(motor_index>8)*motors[pata][anillo].getLoad()/8;   // el valor es de 7 bits en realidad, por eso / 8    
    8c58:	90 e0       	ldi	r25, 0x00	; 0
    8c5a:	80 91 57 14 	lds	r24, 0x1457
    8c5e:	89 30       	cpi	r24, 0x09	; 9
    8c60:	08 f0       	brcs	.+2      	; 0x8c64 <_Z9poll_loadv+0x2e>
    8c62:	91 e0       	ldi	r25, 0x01	; 1
    8c64:	89 2f       	mov	r24, r25
    8c66:	0e 94 48 0a 	call	0x1490	; 0x1490 <_Z8bin2signb>
    8c6a:	08 2f       	mov	r16, r24
    8c6c:	8e 2d       	mov	r24, r14
    8c6e:	63 e0       	ldi	r22, 0x03	; 3
    8c70:	0e 94 ff 80 	call	0x101fe	; 0x101fe <__udivmodqi4>
    8c74:	c8 2e       	mov	r12, r24
    8c76:	dd 24       	eor	r13, r13
    8c78:	8e 2d       	mov	r24, r14
    8c7a:	0e 94 ff 80 	call	0x101fe	; 0x101fe <__udivmodqi4>
    8c7e:	a9 2e       	mov	r10, r25
    8c80:	bb 24       	eor	r11, r11
    8c82:	c5 01       	movw	r24, r10
    8c84:	88 0f       	add	r24, r24
    8c86:	99 1f       	adc	r25, r25
    8c88:	8a 0d       	add	r24, r10
    8c8a:	9b 1d       	adc	r25, r11
    8c8c:	96 01       	movw	r18, r12
    8c8e:	43 e0       	ldi	r20, 0x03	; 3
    8c90:	22 0f       	add	r18, r18
    8c92:	33 1f       	adc	r19, r19
    8c94:	4a 95       	dec	r20
    8c96:	e1 f7       	brne	.-8      	; 0x8c90 <_Z9poll_loadv+0x5a>
    8c98:	2c 0d       	add	r18, r12
    8c9a:	3d 1d       	adc	r19, r13
    8c9c:	82 0f       	add	r24, r18
    8c9e:	93 1f       	adc	r25, r19
    8ca0:	81 53       	subi	r24, 0x31	; 49
    8ca2:	9d 4e       	sbci	r25, 0xED	; 237
    8ca4:	68 e2       	ldi	r22, 0x28	; 40
    8ca6:	0e 94 1e 0b 	call	0x163c	; 0x163c <_ZN4AX128readInfoEh>
    8caa:	ac 01       	movw	r20, r24
    8cac:	11 27       	eor	r17, r17
    8cae:	07 fd       	sbrc	r16, 7
    8cb0:	10 95       	com	r17
    8cb2:	04 9f       	mul	r16, r20
    8cb4:	c0 01       	movw	r24, r0
    8cb6:	05 9f       	mul	r16, r21
    8cb8:	90 0d       	add	r25, r0
    8cba:	14 9f       	mul	r17, r20
    8cbc:	90 0d       	add	r25, r0
    8cbe:	11 24       	eor	r1, r1
    8cc0:	68 e0       	ldi	r22, 0x08	; 8
    8cc2:	70 e0       	ldi	r23, 0x00	; 0
    8cc4:	0e 94 1f 81 	call	0x1023e	; 0x1023e <__divmodhi4>
    8cc8:	46 2f       	mov	r20, r22
	filtro[motor_index].store(carga);                                 // lo guarda en el buffer circular  
    8cca:	20 91 57 14 	lds	r18, 0x1457
    8cce:	82 2f       	mov	r24, r18
    8cd0:	90 e0       	ldi	r25, 0x00	; 0
		T read (byte index) {              // 0 es la posición actual, 1 la última, 2 la penúltima, etc.
			return buffer [get_index(index)];
		}
		
		void store (T new_value) {
			p = (p + size - 1) % size;
    8cd2:	88 0f       	add	r24, r24
    8cd4:	99 1f       	adc	r25, r25
    8cd6:	88 0f       	add	r24, r24
    8cd8:	99 1f       	adc	r25, r25
    8cda:	9c 01       	movw	r18, r24
    8cdc:	26 5f       	subi	r18, 0xF6	; 246
    8cde:	3b 4e       	sbci	r19, 0xEB	; 235
    8ce0:	d9 01       	movw	r26, r18
    8ce2:	13 96       	adiw	r26, 0x03	; 3
    8ce4:	6c 91       	ld	r22, X
    8ce6:	70 e0       	ldi	r23, 0x00	; 0
    8ce8:	ec 01       	movw	r28, r24
    8cea:	c4 5f       	subi	r28, 0xF4	; 244
    8cec:	db 4e       	sbci	r29, 0xEB	; 235
    8cee:	88 81       	ld	r24, Y
    8cf0:	fb 01       	movw	r30, r22
    8cf2:	e8 0f       	add	r30, r24
    8cf4:	f1 1d       	adc	r31, r1
    8cf6:	cf 01       	movw	r24, r30
    8cf8:	01 97       	sbiw	r24, 0x01	; 1
    8cfa:	0e 94 1f 81 	call	0x1023e	; 0x1023e <__divmodhi4>
    8cfe:	88 83       	st	Y, r24
			buffer [p] = new_value;
    8d00:	d9 01       	movw	r26, r18
    8d02:	ed 91       	ld	r30, X+
    8d04:	fc 91       	ld	r31, X
    8d06:	11 97       	sbiw	r26, 0x01	; 1
    8d08:	e8 0f       	add	r30, r24
    8d0a:	f1 1d       	adc	r31, r1
    8d0c:	40 83       	st	Z, r20
			buffer = buffer_;
			size = size_;
		}
		
		T read (byte index) {              // 0 es la posición actual, 1 la última, 2 la penúltima, etc.
			return buffer [get_index(index)];
    8d0e:	ed 90       	ld	r14, X+
    8d10:	fc 90       	ld	r15, X
    8d12:	11 97       	sbiw	r26, 0x01	; 1
		}
    
	private:
		
		byte get_index (byte index) {
			return (p+index) % size;
    8d14:	08 81       	ld	r16, Y
    8d16:	10 e0       	ldi	r17, 0x00	; 0
    8d18:	13 96       	adiw	r26, 0x03	; 3
    8d1a:	9c 90       	ld	r9, X
};

// atencion, si los buffers son *char, el moving average filter no puede ser de más de 4 o 5 puntos

template <class T> void mov_avg_filter (RingBuffer<T>* origen, T* destino, byte puntos) {
  *destino = *destino - origen->read(puntos) + origen->read(0);
    8d1c:	96 01       	movw	r18, r12
    8d1e:	22 0f       	add	r18, r18
    8d20:	33 1f       	adc	r19, r19
    8d22:	2c 0d       	add	r18, r12
    8d24:	3d 1d       	adc	r19, r13
    8d26:	2a 0d       	add	r18, r10
    8d28:	3b 1d       	adc	r19, r11
    8d2a:	28 56       	subi	r18, 0x68	; 104
    8d2c:	3c 4e       	sbci	r19, 0xEC	; 236
    8d2e:	c8 01       	movw	r24, r16
    8d30:	69 2d       	mov	r22, r9
    8d32:	70 e0       	ldi	r23, 0x00	; 0
    8d34:	0e 94 1f 81 	call	0x1023e	; 0x1023e <__divmodhi4>
    8d38:	f7 01       	movw	r30, r14
    8d3a:	e8 0f       	add	r30, r24
    8d3c:	f1 1d       	adc	r31, r1
    8d3e:	40 81       	ld	r20, Z
    8d40:	f9 01       	movw	r30, r18
    8d42:	80 81       	ld	r24, Z
    8d44:	48 0f       	add	r20, r24
    8d46:	c8 01       	movw	r24, r16
    8d48:	04 96       	adiw	r24, 0x04	; 4
    8d4a:	69 2d       	mov	r22, r9
    8d4c:	70 e0       	ldi	r23, 0x00	; 0
    8d4e:	0e 94 1f 81 	call	0x1023e	; 0x1023e <__divmodhi4>
    8d52:	e8 0e       	add	r14, r24
    8d54:	f1 1c       	adc	r15, r1
    8d56:	d7 01       	movw	r26, r14
    8d58:	8c 91       	ld	r24, X
    8d5a:	48 1b       	sub	r20, r24
    8d5c:	40 83       	st	Z, r20
	mov_avg_filter (&filtro[motor_index], &load[pata][anillo], 4);         // aplica un moving average de 4 puntos
	cli(); 
    8d5e:	f8 94       	cli
	all_timers_off (RESTORE);
    8d60:	81 e0       	ldi	r24, 0x01	; 1
    8d62:	0e 94 3d 1b 	call	0x367a	; 0x367a <_Z14all_timers_offb>
	motor_index ++;
	motor_index %= 18;
    8d66:	80 91 57 14 	lds	r24, 0x1457
    8d6a:	8f 5f       	subi	r24, 0xFF	; 255
    8d6c:	62 e1       	ldi	r22, 0x12	; 18
    8d6e:	0e 94 ff 80 	call	0x101fe	; 0x101fe <__udivmodqi4>
    8d72:	90 93 57 14 	sts	0x1457, r25
	
	idle ++;
    8d76:	80 91 ae 13 	lds	r24, 0x13AE
    8d7a:	90 91 af 13 	lds	r25, 0x13AF
    8d7e:	01 96       	adiw	r24, 0x01	; 1
    8d80:	90 93 af 13 	sts	0x13AF, r25
    8d84:	80 93 ae 13 	sts	0x13AE, r24
}
    8d88:	df 91       	pop	r29
    8d8a:	cf 91       	pop	r28
    8d8c:	1f 91       	pop	r17
    8d8e:	0f 91       	pop	r16
    8d90:	ff 90       	pop	r15
    8d92:	ef 90       	pop	r14
    8d94:	df 90       	pop	r13
    8d96:	cf 90       	pop	r12
    8d98:	bf 90       	pop	r11
    8d9a:	af 90       	pop	r10
    8d9c:	9f 90       	pop	r9
    8d9e:	08 95       	ret

00008da0 <_Z10motor_inithh>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                               inicialización motores                                                            //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int motor_init (byte pata, byte anillo) {                    
    8da0:	0f 93       	push	r16
    8da2:	1f 93       	push	r17
    8da4:	cf 93       	push	r28
    8da6:	df 93       	push	r29
    8da8:	08 2f       	mov	r16, r24
    8daa:	16 2f       	mov	r17, r22
  
	motors[pata][anillo].writeInfo (LED, 1);               // prende led
    8dac:	83 e0       	ldi	r24, 0x03	; 3
    8dae:	68 9f       	mul	r22, r24
    8db0:	e0 01       	movw	r28, r0
    8db2:	11 24       	eor	r1, r1
    8db4:	89 e0       	ldi	r24, 0x09	; 9
    8db6:	08 9f       	mul	r16, r24
    8db8:	c0 01       	movw	r24, r0
    8dba:	11 24       	eor	r1, r1
    8dbc:	c8 0f       	add	r28, r24
    8dbe:	d9 1f       	adc	r29, r25
    8dc0:	c1 53       	subi	r28, 0x31	; 49
    8dc2:	dd 4e       	sbci	r29, 0xED	; 237
    8dc4:	ce 01       	movw	r24, r28
    8dc6:	69 e1       	ldi	r22, 0x19	; 25
    8dc8:	41 e0       	ldi	r20, 0x01	; 1
    8dca:	50 e0       	ldi	r21, 0x00	; 0
    8dcc:	20 e0       	ldi	r18, 0x00	; 0
    8dce:	0e 94 bb 0c 	call	0x1976	; 0x1976 <_ZN4AX129writeInfoEhib>
	}	
	
	/* CW_COMPLIANCE_MARGIN y  CCW_COMPLIANCE_MARGIN
  Expresan el error mínimo de posición a partir del cual el motor empieza a hacer fuerza 
  (CW y CCW es en cada una de las direcciones) */
  motors[pata][anillo].writeInfo (CW_COMPLIANCE_MARGIN, 1);
    8dd2:	ce 01       	movw	r24, r28
    8dd4:	6a e1       	ldi	r22, 0x1A	; 26
    8dd6:	41 e0       	ldi	r20, 0x01	; 1
    8dd8:	50 e0       	ldi	r21, 0x00	; 0
    8dda:	20 e0       	ldi	r18, 0x00	; 0
    8ddc:	0e 94 bb 0c 	call	0x1976	; 0x1976 <_ZN4AX129writeInfoEhib>
  motors[pata][anillo].writeInfo (CCW_COMPLIANCE_MARGIN, 1);
    8de0:	ce 01       	movw	r24, r28
    8de2:	6b e1       	ldi	r22, 0x1B	; 27
    8de4:	41 e0       	ldi	r20, 0x01	; 1
    8de6:	50 e0       	ldi	r21, 0x00	; 0
    8de8:	20 e0       	ldi	r18, 0x00	; 0
    8dea:	0e 94 bb 0c 	call	0x1976	; 0x1976 <_ZN4AX129writeInfoEhib>
  
  /* CW_COMPLIANCE_SLOPE y  CCW_COMPLIANCE_SLOPE
  Determinan cómo aumenta el torque a medida que aumenta el error de posición. 
  Valores pequeños indican más aumento a menor error */
  if (anillo==0) {
    8dee:	11 23       	and	r17, r17
    8df0:	a9 f0       	breq	.+42     	; 0x8e1c <_Z10motor_inithh+0x7c>
    motors[pata][anillo].writeInfo (CW_COMPLIANCE_SLOPE, 64);
    motors[pata][anillo].writeInfo (CCW_COMPLIANCE_SLOPE, 64);
  } else if (anillo==1) {
    8df2:	11 30       	cpi	r17, 0x01	; 1
    8df4:	99 f4       	brne	.+38     	; 0x8e1c <_Z10motor_inithh+0x7c>
    if (pata<=2) {
    8df6:	03 30       	cpi	r16, 0x03	; 3
    8df8:	60 f4       	brcc	.+24     	; 0x8e12 <_Z10motor_inithh+0x72>
      motors[pata][anillo].writeInfo (CW_COMPLIANCE_SLOPE, 64);
    8dfa:	ce 01       	movw	r24, r28
    8dfc:	6c e1       	ldi	r22, 0x1C	; 28
    8dfe:	40 e4       	ldi	r20, 0x40	; 64
    8e00:	50 e0       	ldi	r21, 0x00	; 0
    8e02:	20 e0       	ldi	r18, 0x00	; 0
    8e04:	0e 94 bb 0c 	call	0x1976	; 0x1976 <_ZN4AX129writeInfoEhib>
      motors[pata][anillo].writeInfo (CCW_COMPLIANCE_SLOPE, 128);
    8e08:	ce 01       	movw	r24, r28
    8e0a:	6d e1       	ldi	r22, 0x1D	; 29
    8e0c:	40 e8       	ldi	r20, 0x80	; 128
    8e0e:	50 e0       	ldi	r21, 0x00	; 0
    8e10:	10 c0       	rjmp	.+32     	; 0x8e32 <_Z10motor_inithh+0x92>
    } else {
      motors[pata][anillo].writeInfo (CW_COMPLIANCE_SLOPE, 128);
    8e12:	ce 01       	movw	r24, r28
    8e14:	6c e1       	ldi	r22, 0x1C	; 28
    8e16:	40 e8       	ldi	r20, 0x80	; 128
    8e18:	50 e0       	ldi	r21, 0x00	; 0
    8e1a:	04 c0       	rjmp	.+8      	; 0x8e24 <_Z10motor_inithh+0x84>
      motors[pata][anillo].writeInfo (CCW_COMPLIANCE_SLOPE, 64);
    }
  } else {
    motors[pata][anillo].writeInfo (CW_COMPLIANCE_SLOPE, 64);
    8e1c:	ce 01       	movw	r24, r28
    8e1e:	6c e1       	ldi	r22, 0x1C	; 28
    8e20:	40 e4       	ldi	r20, 0x40	; 64
    8e22:	50 e0       	ldi	r21, 0x00	; 0
    8e24:	20 e0       	ldi	r18, 0x00	; 0
    8e26:	0e 94 bb 0c 	call	0x1976	; 0x1976 <_ZN4AX129writeInfoEhib>
    motors[pata][anillo].writeInfo (CCW_COMPLIANCE_SLOPE, 64);
    8e2a:	ce 01       	movw	r24, r28
    8e2c:	6d e1       	ldi	r22, 0x1D	; 29
    8e2e:	40 e4       	ldi	r20, 0x40	; 64
    8e30:	50 e0       	ldi	r21, 0x00	; 0
    8e32:	20 e0       	ldi	r18, 0x00	; 0
    8e34:	0e 94 bb 0c 	call	0x1976	; 0x1976 <_ZN4AX129writeInfoEhib>
  }
    
	/* PUNCH Indica la fuerza mínima que el motor hace cuando comienza a actuar, es decir, 
  la fuerza de la que parte la curva, la fuerza que el motor hace ante el error de posición indicado por COMPLIANCE_MARGIN. 
  A partir de ahí, si el error de posición aumenta, la fuerza también aumenta, tan lentamente como se lo indique COMPLIANCE_SLOPE */
	motors[pata][anillo].writeInfo (PUNCH, 32);
    8e38:	ce 01       	movw	r24, r28
    8e3a:	60 e3       	ldi	r22, 0x30	; 48
    8e3c:	40 e2       	ldi	r20, 0x20	; 32
    8e3e:	50 e0       	ldi	r21, 0x00	; 0
    8e40:	20 e0       	ldi	r18, 0x00	; 0
    8e42:	0e 94 bb 0c 	call	0x1976	; 0x1976 <_ZN4AX129writeInfoEhib>
    
 	motors[pata][anillo].writeInfo (LED, 0);                // apaga led
    8e46:	ce 01       	movw	r24, r28
    8e48:	69 e1       	ldi	r22, 0x19	; 25
    8e4a:	40 e0       	ldi	r20, 0x00	; 0
    8e4c:	50 e0       	ldi	r21, 0x00	; 0
    8e4e:	20 e0       	ldi	r18, 0x00	; 0
    8e50:	0e 94 bb 0c 	call	0x1976	; 0x1976 <_ZN4AX129writeInfoEhib>
void inline enable_ovf0() {TIMSK0 |= _BV(TOIE0);}                 // habilita el Overflow Interrupt (timer0)
    8e54:	80 91 6e 00 	lds	r24, 0x006E
    8e58:	81 60       	ori	r24, 0x01	; 1
    8e5a:	80 93 6e 00 	sts	0x006E, r24
		
	enable_ovf0();           // esto permite que el tiempo sea registrado
	delay (41);             // este delay es necesario, no sé por qué 
    8e5e:	69 e2       	ldi	r22, 0x29	; 41
    8e60:	70 e0       	ldi	r23, 0x00	; 0
    8e62:	80 e0       	ldi	r24, 0x00	; 0
    8e64:	90 e0       	ldi	r25, 0x00	; 0
    8e66:	0e 94 67 1b 	call	0x36ce	; 0x36ce <_Z5delaym>
void inline disable_ovf0() {TIMSK0 &= ~_BV(TOIE0);}               // deshabilita el Overflow Interrupt (timer0)
    8e6a:	80 91 6e 00 	lds	r24, 0x006E
    8e6e:	8e 7f       	andi	r24, 0xFE	; 254
    8e70:	80 93 6e 00 	sts	0x006E, r24
	disable_ovf0();          // vuelve a apagar la interrupción del timer0
	
	return motors[pata][anillo].ping();      // testea a ver si el motor responde a un ping
    8e74:	ce 01       	movw	r24, r28
    8e76:	0e 94 c9 0a 	call	0x1592	; 0x1592 <_ZN4AX124pingEv>

}
    8e7a:	df 91       	pop	r29
    8e7c:	cf 91       	pop	r28
    8e7e:	1f 91       	pop	r17
    8e80:	0f 91       	pop	r16
    8e82:	08 95       	ret

00008e84 <_Z12motor_updatev>:
      pos_ang (pata, A, m.duracion);           // es siempre absoluta, en este punto
    }                   
  }
}

byte motor_update () {                                       // actualiza los servos
    8e84:	2f 92       	push	r2
    8e86:	3f 92       	push	r3
    8e88:	4f 92       	push	r4
    8e8a:	5f 92       	push	r5
    8e8c:	6f 92       	push	r6
    8e8e:	7f 92       	push	r7
    8e90:	8f 92       	push	r8
    8e92:	9f 92       	push	r9
    8e94:	af 92       	push	r10
    8e96:	bf 92       	push	r11
    8e98:	cf 92       	push	r12
    8e9a:	df 92       	push	r13
    8e9c:	ef 92       	push	r14
    8e9e:	ff 92       	push	r15
    8ea0:	0f 93       	push	r16
    8ea2:	1f 93       	push	r17
    8ea4:	df 93       	push	r29
    8ea6:	cf 93       	push	r28
    8ea8:	cd b7       	in	r28, 0x3d	; 61
    8eaa:	de b7       	in	r29, 0x3e	; 62
    8eac:	c0 56       	subi	r28, 0x60	; 96
    8eae:	d0 40       	sbci	r29, 0x00	; 0
    8eb0:	0f b6       	in	r0, 0x3f	; 63
    8eb2:	f8 94       	cli
    8eb4:	de bf       	out	0x3e, r29	; 62
    8eb6:	0f be       	out	0x3f, r0	; 63
    8eb8:	cd bf       	out	0x3d, r28	; 61
    8eba:	2e e5       	ldi	r18, 0x5E	; 94
    8ebc:	34 e1       	ldi	r19, 0x14	; 20
    8ebe:	6f 96       	adiw	r28, 0x1f	; 31
    8ec0:	3f af       	std	Y+63, r19	; 0x3f
    8ec2:	2e af       	std	Y+62, r18	; 0x3e
    8ec4:	6f 97       	sbiw	r28, 0x1f	; 31
    8ec6:	33 24       	eor	r3, r3
    8ec8:	aa 24       	eor	r10, r10
    8eca:	bb 24       	eor	r11, r11
    8ecc:	b1 c0       	rjmp	.+354    	; 0x9030 <_Z12motor_updatev+0x1ac>
	static int ang_act [6][3];                                  // ángulo actual de los 18 servos
	byte targetlength = 0;
	byte targets [18]; int posvalues[18]; int velvalues[18];
	for (byte pata=0; pata<6; pata++) {
		for (byte anillo=0; anillo<3; anillo++) {
			int diff = ang_act[pata][anillo] - ang_des[pata][anillo];
    8ece:	d6 01       	movw	r26, r12
    8ed0:	0d 91       	ld	r16, X+
    8ed2:	1c 91       	ld	r17, X
    8ed4:	f4 01       	movw	r30, r8
    8ed6:	80 81       	ld	r24, Z
    8ed8:	91 81       	ldd	r25, Z+1	; 0x01
    8eda:	08 1b       	sub	r16, r24
    8edc:	19 0b       	sbc	r17, r25
			if (diff != 0) {
    8ede:	09 f4       	brne	.+2      	; 0x8ee2 <_Z12motor_updatev+0x5e>
    8ee0:	87 c0       	rjmp	.+270    	; 0x8ff0 <_Z12motor_updatev+0x16c>
				targets [targetlength] = ids [pata][anillo];
    8ee2:	23 2d       	mov	r18, r3
    8ee4:	30 e0       	ldi	r19, 0x00	; 0
    8ee6:	a1 96       	adiw	r28, 0x21	; 33
    8ee8:	3f af       	std	Y+63, r19	; 0x3f
    8eea:	2e af       	std	Y+62, r18	; 0x3e
    8eec:	a1 97       	sbiw	r28, 0x21	; 33
    8eee:	e1 e0       	ldi	r30, 0x01	; 1
    8ef0:	f0 e0       	ldi	r31, 0x00	; 0
    8ef2:	ec 0f       	add	r30, r28
    8ef4:	fd 1f       	adc	r31, r29
    8ef6:	e2 0f       	add	r30, r18
    8ef8:	f3 1f       	adc	r31, r19
    8efa:	d2 01       	movw	r26, r4
    8efc:	8c 91       	ld	r24, X
    8efe:	80 83       	st	Z, r24
				// posvalues [targetlength] = ANG_ZERO + bin2sign(pata>2) * (ang_des[pata][anillo] + offset[anillo]);   // versión con offset 
				posvalues [targetlength] = ANG_ZERO + bin2sign(pata>2) * ang_des[pata][anillo];                  // acá no habría que poner un constrain??
    8f00:	80 e0       	ldi	r24, 0x00	; 0
    8f02:	b2 e0       	ldi	r27, 0x02	; 2
    8f04:	ba 15       	cp	r27, r10
    8f06:	08 f4       	brcc	.+2      	; 0x8f0a <_Z12motor_updatev+0x86>
    8f08:	81 e0       	ldi	r24, 0x01	; 1
    8f0a:	0e 94 48 0a 	call	0x1490	; 0x1490 <_Z8bin2signb>
    8f0e:	28 2e       	mov	r2, r24
    8f10:	f4 01       	movw	r30, r8
    8f12:	01 90       	ld	r0, Z+
    8f14:	f0 81       	ld	r31, Z
    8f16:	e0 2d       	mov	r30, r0
    8f18:	6d 96       	adiw	r28, 0x1d	; 29
    8f1a:	ff af       	std	Y+63, r31	; 0x3f
    8f1c:	ee af       	std	Y+62, r30	; 0x3e
    8f1e:	6d 97       	sbiw	r28, 0x1d	; 29
				velvalues [targetlength] = constrain(vel_scale*abs(diff)/dur_des [pata][anillo], 1, 1023);                
    8f20:	98 01       	movw	r18, r16
    8f22:	17 ff       	sbrs	r17, 7
    8f24:	03 c0       	rjmp	.+6      	; 0x8f2c <_Z12motor_updatev+0xa8>
    8f26:	30 95       	com	r19
    8f28:	21 95       	neg	r18
    8f2a:	3f 4f       	sbci	r19, 0xFF	; 255
    8f2c:	b9 01       	movw	r22, r18
    8f2e:	88 27       	eor	r24, r24
    8f30:	77 fd       	sbrc	r23, 7
    8f32:	80 95       	com	r24
    8f34:	98 2f       	mov	r25, r24
    8f36:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    8f3a:	29 e5       	ldi	r18, 0x59	; 89
    8f3c:	3c e4       	ldi	r19, 0x4C	; 76
    8f3e:	4b ed       	ldi	r20, 0xDB	; 219
    8f40:	52 e4       	ldi	r21, 0x42	; 66
    8f42:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    8f46:	7b 01       	movw	r14, r22
    8f48:	8c 01       	movw	r16, r24
    8f4a:	d3 01       	movw	r26, r6
    8f4c:	6d 91       	ld	r22, X+
    8f4e:	7c 91       	ld	r23, X
    8f50:	88 27       	eor	r24, r24
    8f52:	77 fd       	sbrc	r23, 7
    8f54:	80 95       	com	r24
    8f56:	98 2f       	mov	r25, r24
    8f58:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    8f5c:	9b 01       	movw	r18, r22
    8f5e:	ac 01       	movw	r20, r24
    8f60:	c8 01       	movw	r24, r16
    8f62:	b7 01       	movw	r22, r14
    8f64:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    8f68:	7b 01       	movw	r14, r22
    8f6a:	8c 01       	movw	r16, r24
    8f6c:	20 e0       	ldi	r18, 0x00	; 0
    8f6e:	30 e0       	ldi	r19, 0x00	; 0
    8f70:	40 e8       	ldi	r20, 0x80	; 128
    8f72:	5f e3       	ldi	r21, 0x3F	; 63
    8f74:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    8f78:	88 23       	and	r24, r24
    8f7a:	1c f4       	brge	.+6      	; 0x8f82 <_Z12motor_updatev+0xfe>
    8f7c:	61 e0       	ldi	r22, 0x01	; 1
    8f7e:	70 e0       	ldi	r23, 0x00	; 0
    8f80:	11 c0       	rjmp	.+34     	; 0x8fa4 <_Z12motor_updatev+0x120>
    8f82:	c8 01       	movw	r24, r16
    8f84:	b7 01       	movw	r22, r14
    8f86:	20 e0       	ldi	r18, 0x00	; 0
    8f88:	30 ec       	ldi	r19, 0xC0	; 192
    8f8a:	4f e7       	ldi	r20, 0x7F	; 127
    8f8c:	54 e4       	ldi	r21, 0x44	; 68
    8f8e:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <__gesf2>
    8f92:	18 16       	cp	r1, r24
    8f94:	1c f4       	brge	.+6      	; 0x8f9c <_Z12motor_updatev+0x118>
    8f96:	6f ef       	ldi	r22, 0xFF	; 255
    8f98:	73 e0       	ldi	r23, 0x03	; 3
    8f9a:	04 c0       	rjmp	.+8      	; 0x8fa4 <_Z12motor_updatev+0x120>
    8f9c:	c8 01       	movw	r24, r16
    8f9e:	b7 01       	movw	r22, r14
    8fa0:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <__fixsfsi>
		for (byte anillo=0; anillo<3; anillo++) {
			int diff = ang_act[pata][anillo] - ang_des[pata][anillo];
			if (diff != 0) {
				targets [targetlength] = ids [pata][anillo];
				// posvalues [targetlength] = ANG_ZERO + bin2sign(pata>2) * (ang_des[pata][anillo] + offset[anillo]);   // versión con offset 
				posvalues [targetlength] = ANG_ZERO + bin2sign(pata>2) * ang_des[pata][anillo];                  // acá no habría que poner un constrain??
    8fa4:	a1 96       	adiw	r28, 0x21	; 33
    8fa6:	ee ad       	ldd	r30, Y+62	; 0x3e
    8fa8:	ff ad       	ldd	r31, Y+63	; 0x3f
    8faa:	a1 97       	sbiw	r28, 0x21	; 33
    8fac:	ee 0f       	add	r30, r30
    8fae:	ff 1f       	adc	r31, r31
    8fb0:	21 e0       	ldi	r18, 0x01	; 1
    8fb2:	30 e0       	ldi	r19, 0x00	; 0
    8fb4:	2c 0f       	add	r18, r28
    8fb6:	3d 1f       	adc	r19, r29
    8fb8:	e2 0f       	add	r30, r18
    8fba:	f3 1f       	adc	r31, r19
    8fbc:	82 2d       	mov	r24, r2
    8fbe:	99 27       	eor	r25, r25
    8fc0:	87 fd       	sbrc	r24, 7
    8fc2:	90 95       	com	r25
    8fc4:	ac 01       	movw	r20, r24
    8fc6:	6d 96       	adiw	r28, 0x1d	; 29
    8fc8:	ae ad       	ldd	r26, Y+62	; 0x3e
    8fca:	bf ad       	ldd	r27, Y+63	; 0x3f
    8fcc:	6d 97       	sbiw	r28, 0x1d	; 29
    8fce:	4a 9f       	mul	r20, r26
    8fd0:	c0 01       	movw	r24, r0
    8fd2:	4b 9f       	mul	r20, r27
    8fd4:	90 0d       	add	r25, r0
    8fd6:	5a 9f       	mul	r21, r26
    8fd8:	90 0d       	add	r25, r0
    8fda:	11 24       	eor	r1, r1
    8fdc:	8a 5f       	subi	r24, 0xFA	; 250
    8fde:	9d 4f       	sbci	r25, 0xFD	; 253
    8fe0:	93 8b       	std	Z+19, r25	; 0x13
    8fe2:	82 8b       	std	Z+18, r24	; 0x12
				velvalues [targetlength] = constrain(vel_scale*abs(diff)/dur_des [pata][anillo], 1, 1023);                
    8fe4:	77 ab       	std	Z+55, r23	; 0x37
    8fe6:	66 ab       	std	Z+54, r22	; 0x36
				// podemos mandar los mensajes individuales (para minimizar errores)...
				// motors[pata][anillo].setPosVel (posvalues [targetlength], velvalues [targetlength]);
				// (en ese caso no se justifica que haya una "update"; lo ideal es usar el gran mensajón)
				targetlength ++;
    8fe8:	33 94       	inc	r3
				ang_act[pata][anillo] = ang_des[pata][anillo];
    8fea:	f6 01       	movw	r30, r12
    8fec:	b1 83       	std	Z+1, r27	; 0x01
    8fee:	a0 83       	st	Z, r26
    8ff0:	22 e0       	ldi	r18, 0x02	; 2
    8ff2:	30 e0       	ldi	r19, 0x00	; 0
    8ff4:	c2 0e       	add	r12, r18
    8ff6:	d3 1e       	adc	r13, r19
    8ff8:	82 0e       	add	r8, r18
    8ffa:	93 1e       	adc	r9, r19
    8ffc:	08 94       	sec
    8ffe:	41 1c       	adc	r4, r1
    9000:	51 1c       	adc	r5, r1
    9002:	62 0e       	add	r6, r18
    9004:	73 1e       	adc	r7, r19
byte motor_update () {                                       // actualiza los servos
	static int ang_act [6][3];                                  // ángulo actual de los 18 servos
	byte targetlength = 0;
	byte targets [18]; int posvalues[18]; int velvalues[18];
	for (byte pata=0; pata<6; pata++) {
		for (byte anillo=0; anillo<3; anillo++) {
    9006:	6f 96       	adiw	r28, 0x1f	; 31
    9008:	4e ad       	ldd	r20, Y+62	; 0x3e
    900a:	5f ad       	ldd	r21, Y+63	; 0x3f
    900c:	6f 97       	sbiw	r28, 0x1f	; 31
    900e:	c4 16       	cp	r12, r20
    9010:	d5 06       	cpc	r13, r21
    9012:	09 f0       	breq	.+2      	; 0x9016 <_Z12motor_updatev+0x192>
    9014:	5c cf       	rjmp	.-328    	; 0x8ece <_Z12motor_updatev+0x4a>
    9016:	08 94       	sec
    9018:	a1 1c       	adc	r10, r1
    901a:	b1 1c       	adc	r11, r1
    901c:	c6 01       	movw	r24, r12
    901e:	06 96       	adiw	r24, 0x06	; 6
    9020:	6f 96       	adiw	r28, 0x1f	; 31
    9022:	9f af       	std	Y+63, r25	; 0x3f
    9024:	8e af       	std	Y+62, r24	; 0x3e
    9026:	6f 97       	sbiw	r28, 0x1f	; 31

byte motor_update () {                                       // actualiza los servos
	static int ang_act [6][3];                                  // ángulo actual de los 18 servos
	byte targetlength = 0;
	byte targets [18]; int posvalues[18]; int velvalues[18];
	for (byte pata=0; pata<6; pata++) {
    9028:	96 e0       	ldi	r25, 0x06	; 6
    902a:	a9 16       	cp	r10, r25
    902c:	b1 04       	cpc	r11, r1
    902e:	09 f1       	breq	.+66     	; 0x9072 <_Z12motor_updatev+0x1ee>
    9030:	c5 01       	movw	r24, r10
    9032:	88 0f       	add	r24, r24
    9034:	99 1f       	adc	r25, r25
    9036:	8a 0d       	add	r24, r10
    9038:	9b 1d       	adc	r25, r11
    903a:	9c 01       	movw	r18, r24
    903c:	22 0f       	add	r18, r18
    903e:	33 1f       	adc	r19, r19
    9040:	f8 e5       	ldi	r31, 0x58	; 88
    9042:	cf 2e       	mov	r12, r31
    9044:	f4 e1       	ldi	r31, 0x14	; 20
    9046:	df 2e       	mov	r13, r31
    9048:	c2 0e       	add	r12, r18
    904a:	d3 1e       	adc	r13, r19
    904c:	e8 e0       	ldi	r30, 0x08	; 8
    904e:	8e 2e       	mov	r8, r30
    9050:	e3 e1       	ldi	r30, 0x13	; 19
    9052:	9e 2e       	mov	r9, r30
    9054:	82 0e       	add	r8, r18
    9056:	93 1e       	adc	r9, r19
    9058:	7d e6       	ldi	r23, 0x6D	; 109
    905a:	47 2e       	mov	r4, r23
    905c:	75 e0       	ldi	r23, 0x05	; 5
    905e:	57 2e       	mov	r5, r23
    9060:	48 0e       	add	r4, r24
    9062:	59 1e       	adc	r5, r25
    9064:	6c e2       	ldi	r22, 0x2C	; 44
    9066:	66 2e       	mov	r6, r22
    9068:	63 e1       	ldi	r22, 0x13	; 19
    906a:	76 2e       	mov	r7, r22
    906c:	62 0e       	add	r6, r18
    906e:	73 1e       	adc	r7, r19
    9070:	2e cf       	rjmp	.-420    	; 0x8ece <_Z12motor_updatev+0x4a>
				targetlength ++;
				ang_act[pata][anillo] = ang_des[pata][anillo];
			}
		}
	}
	if (targetlength > 0) {                               // por las dudas
    9072:	33 20       	and	r3, r3
    9074:	61 f0       	breq	.+24     	; 0x908e <_Z12motor_updatev+0x20a>
	  // .. o podemos mandar el gran mensajón:
		AX12::setMultiPosVel (targetlength, targets, posvalues, velvalues);     // gran mensajón  
    9076:	83 2d       	mov	r24, r3
    9078:	be 01       	movw	r22, r28
    907a:	6f 5f       	subi	r22, 0xFF	; 255
    907c:	7f 4f       	sbci	r23, 0xFF	; 255
    907e:	ae 01       	movw	r20, r28
    9080:	4d 5e       	subi	r20, 0xED	; 237
    9082:	5f 4f       	sbci	r21, 0xFF	; 255
    9084:	9e 01       	movw	r18, r28
    9086:	29 5c       	subi	r18, 0xC9	; 201
    9088:	3f 4f       	sbci	r19, 0xFF	; 255
    908a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <_ZN4AX1214setMultiPosVelEhPhPiS1_>
		// .. otra alternativa es separarlo en 2 mensajotes: 
		// AX12::setMultiVel (targetlength, targets, velvalues);
		// AX12::setMultiPos (targetlength, targets, posvalues);
	} 
	return targetlength;
}
    908e:	83 2d       	mov	r24, r3
    9090:	c0 5a       	subi	r28, 0xA0	; 160
    9092:	df 4f       	sbci	r29, 0xFF	; 255
    9094:	0f b6       	in	r0, 0x3f	; 63
    9096:	f8 94       	cli
    9098:	de bf       	out	0x3e, r29	; 62
    909a:	0f be       	out	0x3f, r0	; 63
    909c:	cd bf       	out	0x3d, r28	; 61
    909e:	cf 91       	pop	r28
    90a0:	df 91       	pop	r29
    90a2:	1f 91       	pop	r17
    90a4:	0f 91       	pop	r16
    90a6:	ff 90       	pop	r15
    90a8:	ef 90       	pop	r14
    90aa:	df 90       	pop	r13
    90ac:	cf 90       	pop	r12
    90ae:	bf 90       	pop	r11
    90b0:	af 90       	pop	r10
    90b2:	9f 90       	pop	r9
    90b4:	8f 90       	pop	r8
    90b6:	7f 90       	pop	r7
    90b8:	6f 90       	pop	r6
    90ba:	5f 90       	pop	r5
    90bc:	4f 90       	pop	r4
    90be:	3f 90       	pop	r3
    90c0:	2f 90       	pop	r2
    90c2:	08 95       	ret

000090c4 <_Z3xyzPi>:
  A.beta = ANG_SCALE/2 - ANG_SCALE*acos(cosbeta)/PI;
  
  return A;  
}

COORD3D xyz (int angulos[]) {                   // "cinemática directa"
    90c4:	2f 92       	push	r2
    90c6:	3f 92       	push	r3
    90c8:	4f 92       	push	r4
    90ca:	5f 92       	push	r5
    90cc:	6f 92       	push	r6
    90ce:	7f 92       	push	r7
    90d0:	8f 92       	push	r8
    90d2:	9f 92       	push	r9
    90d4:	af 92       	push	r10
    90d6:	bf 92       	push	r11
    90d8:	cf 92       	push	r12
    90da:	df 92       	push	r13
    90dc:	ef 92       	push	r14
    90de:	ff 92       	push	r15
    90e0:	0f 93       	push	r16
    90e2:	1f 93       	push	r17
    90e4:	df 93       	push	r29
    90e6:	cf 93       	push	r28
    90e8:	cd b7       	in	r28, 0x3d	; 61
    90ea:	de b7       	in	r29, 0x3e	; 62
    90ec:	62 97       	sbiw	r28, 0x12	; 18
    90ee:	0f b6       	in	r0, 0x3f	; 63
    90f0:	f8 94       	cli
    90f2:	de bf       	out	0x3e, r29	; 62
    90f4:	0f be       	out	0x3f, r0	; 63
    90f6:	cd bf       	out	0x3d, r28	; 61
    90f8:	9e 87       	std	Y+14, r25	; 0x0e
    90fa:	8d 87       	std	Y+13, r24	; 0x0d
    90fc:	7b 01       	movw	r14, r22
    90fe:	8e 01       	movw	r16, r28
    9100:	0f 5f       	subi	r16, 0xFF	; 255
    9102:	1f 4f       	sbci	r17, 0xFF	; 255
  float rad [3]; 
  for (byte i=0; i<3; i++) {
    9104:	8d e0       	ldi	r24, 0x0D	; 13
    9106:	c8 2e       	mov	r12, r24
    9108:	d1 2c       	mov	r13, r1
    910a:	cc 0e       	add	r12, r28
    910c:	dd 1e       	adc	r13, r29
    rad[i] = PI * angulos[i] / ANG_SCALE;        // convierte a radianes
    910e:	f7 01       	movw	r30, r14
    9110:	61 91       	ld	r22, Z+
    9112:	71 91       	ld	r23, Z+
    9114:	7f 01       	movw	r14, r30
    9116:	88 27       	eor	r24, r24
    9118:	77 fd       	sbrc	r23, 7
    911a:	80 95       	com	r24
    911c:	98 2f       	mov	r25, r24
    911e:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    9122:	2b ed       	ldi	r18, 0xDB	; 219
    9124:	3f e0       	ldi	r19, 0x0F	; 15
    9126:	49 e4       	ldi	r20, 0x49	; 73
    9128:	50 e4       	ldi	r21, 0x40	; 64
    912a:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    912e:	20 e0       	ldi	r18, 0x00	; 0
    9130:	30 e8       	ldi	r19, 0x80	; 128
    9132:	49 e1       	ldi	r20, 0x19	; 25
    9134:	54 e4       	ldi	r21, 0x44	; 68
    9136:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    913a:	f8 01       	movw	r30, r16
    913c:	61 93       	st	Z+, r22
    913e:	71 93       	st	Z+, r23
    9140:	81 93       	st	Z+, r24
    9142:	91 93       	st	Z+, r25
    9144:	8f 01       	movw	r16, r30
  return A;  
}

COORD3D xyz (int angulos[]) {                   // "cinemática directa"
  float rad [3]; 
  for (byte i=0; i<3; i++) {
    9146:	ec 15       	cp	r30, r12
    9148:	fd 05       	cpc	r31, r13
    914a:	09 f7       	brne	.-62     	; 0x910e <_Z3xyzPi+0x4a>
    rad[i] = PI * angulos[i] / ANG_SCALE;        // convierte a radianes
  }
  // rad[0] = gama; rad[1] = alfa; rad[2] = beta 
  float sqc = sqaplussqb - (doubleab * cos(rad[2]-HALF_PI));
    914c:	69 85       	ldd	r22, Y+9	; 0x09
    914e:	7a 85       	ldd	r23, Y+10	; 0x0a
    9150:	8b 85       	ldd	r24, Y+11	; 0x0b
    9152:	9c 85       	ldd	r25, Y+12	; 0x0c
    9154:	2b ed       	ldi	r18, 0xDB	; 219
    9156:	3f e0       	ldi	r19, 0x0F	; 15
    9158:	49 ec       	ldi	r20, 0xC9	; 201
    915a:	5f e3       	ldi	r21, 0x3F	; 63
    915c:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    9160:	0e 94 9e 7c 	call	0xf93c	; 0xf93c <cos>
    9164:	27 e4       	ldi	r18, 0x47	; 71
    9166:	31 ee       	ldi	r19, 0xE1	; 225
    9168:	4f e3       	ldi	r20, 0x3F	; 63
    916a:	53 ec       	ldi	r21, 0xC3	; 195
    916c:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    9170:	28 e4       	ldi	r18, 0x48	; 72
    9172:	31 e2       	ldi	r19, 0x21	; 33
    9174:	4c e4       	ldi	r20, 0x4C	; 76
    9176:	53 e4       	ldi	r21, 0x43	; 67
    9178:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    917c:	7b 01       	movw	r14, r22
    917e:	8c 01       	movw	r16, r24
  float c = sqrt(sqc);
    9180:	0e 94 69 80 	call	0x100d2	; 0x100d2 <sqrt>
    9184:	3b 01       	movw	r6, r22
    9186:	4c 01       	movw	r8, r24
  float cosalfa = (sqc + sqaminussqb) / (doublea*c);
  float delta = rad[1] - acos(cosalfa);
    9188:	c8 01       	movw	r24, r16
    918a:	b7 01       	movw	r22, r14
    918c:	2d ec       	ldi	r18, 0xCD	; 205
    918e:	3c e4       	ldi	r19, 0x4C	; 76
    9190:	4b e8       	ldi	r20, 0x8B	; 139
    9192:	52 e4       	ldi	r21, 0x42	; 66
    9194:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    9198:	7b 01       	movw	r14, r22
    919a:	8c 01       	movw	r16, r24
    919c:	c4 01       	movw	r24, r8
    919e:	b3 01       	movw	r22, r6
    91a0:	23 e3       	ldi	r18, 0x33	; 51
    91a2:	33 e3       	ldi	r19, 0x33	; 51
    91a4:	43 e8       	ldi	r20, 0x83	; 131
    91a6:	51 e4       	ldi	r21, 0x41	; 65
    91a8:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    91ac:	9b 01       	movw	r18, r22
    91ae:	ac 01       	movw	r20, r24
    91b0:	c8 01       	movw	r24, r16
    91b2:	b7 01       	movw	r22, r14
    91b4:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    91b8:	0e 94 c5 7b 	call	0xf78a	; 0xf78a <acos>
    91bc:	9b 01       	movw	r18, r22
    91be:	ac 01       	movw	r20, r24
    91c0:	6d 81       	ldd	r22, Y+5	; 0x05
    91c2:	7e 81       	ldd	r23, Y+6	; 0x06
    91c4:	8f 81       	ldd	r24, Y+7	; 0x07
    91c6:	98 85       	ldd	r25, Y+8	; 0x08
    91c8:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    91cc:	7b 01       	movw	r14, r22
    91ce:	8c 01       	movw	r16, r24
  float x = c * cos(delta);
    91d0:	c8 01       	movw	r24, r16
    91d2:	0e 94 9e 7c 	call	0xf93c	; 0xf93c <cos>
    91d6:	9b 01       	movw	r18, r22
    91d8:	ac 01       	movw	r20, r24
  return (COORD3D) {(x+COXA)*cos(rad[0]), c*sin(delta), (x+COXA)*sin(rad[0])};
    91da:	c4 01       	movw	r24, r8
    91dc:	b3 01       	movw	r22, r6
    91de:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    91e2:	20 e0       	ldi	r18, 0x00	; 0
    91e4:	30 e0       	ldi	r19, 0x00	; 0
    91e6:	40 ea       	ldi	r20, 0xA0	; 160
    91e8:	50 e4       	ldi	r21, 0x40	; 64
    91ea:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    91ee:	6f 87       	std	Y+15, r22	; 0x0f
    91f0:	78 8b       	std	Y+16, r23	; 0x10
    91f2:	89 8b       	std	Y+17, r24	; 0x11
    91f4:	9a 8b       	std	Y+18, r25	; 0x12
    91f6:	a9 80       	ldd	r10, Y+1	; 0x01
    91f8:	ba 80       	ldd	r11, Y+2	; 0x02
    91fa:	cb 80       	ldd	r12, Y+3	; 0x03
    91fc:	dc 80       	ldd	r13, Y+4	; 0x04
    91fe:	c6 01       	movw	r24, r12
    9200:	b5 01       	movw	r22, r10
    9202:	0e 94 9e 7c 	call	0xf93c	; 0xf93c <cos>
    9206:	1b 01       	movw	r2, r22
    9208:	2c 01       	movw	r4, r24
    920a:	b7 01       	movw	r22, r14
    920c:	c8 01       	movw	r24, r16
    920e:	0e 94 5f 80 	call	0x100be	; 0x100be <sin>
    9212:	7b 01       	movw	r14, r22
    9214:	8c 01       	movw	r16, r24
    9216:	c6 01       	movw	r24, r12
    9218:	b5 01       	movw	r22, r10
    921a:	0e 94 5f 80 	call	0x100be	; 0x100be <sin>
    921e:	5b 01       	movw	r10, r22
    9220:	6c 01       	movw	r12, r24
    9222:	6f 85       	ldd	r22, Y+15	; 0x0f
    9224:	78 89       	ldd	r23, Y+16	; 0x10
    9226:	89 89       	ldd	r24, Y+17	; 0x11
    9228:	9a 89       	ldd	r25, Y+18	; 0x12
    922a:	a2 01       	movw	r20, r4
    922c:	91 01       	movw	r18, r2
    922e:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    9232:	ed 85       	ldd	r30, Y+13	; 0x0d
    9234:	fe 85       	ldd	r31, Y+14	; 0x0e
    9236:	60 83       	st	Z, r22
    9238:	71 83       	std	Z+1, r23	; 0x01
    923a:	82 83       	std	Z+2, r24	; 0x02
    923c:	93 83       	std	Z+3, r25	; 0x03
    923e:	c4 01       	movw	r24, r8
    9240:	b3 01       	movw	r22, r6
    9242:	a8 01       	movw	r20, r16
    9244:	97 01       	movw	r18, r14
    9246:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    924a:	ed 85       	ldd	r30, Y+13	; 0x0d
    924c:	fe 85       	ldd	r31, Y+14	; 0x0e
    924e:	64 83       	std	Z+4, r22	; 0x04
    9250:	75 83       	std	Z+5, r23	; 0x05
    9252:	86 83       	std	Z+6, r24	; 0x06
    9254:	97 83       	std	Z+7, r25	; 0x07
    9256:	6f 85       	ldd	r22, Y+15	; 0x0f
    9258:	78 89       	ldd	r23, Y+16	; 0x10
    925a:	89 89       	ldd	r24, Y+17	; 0x11
    925c:	9a 89       	ldd	r25, Y+18	; 0x12
    925e:	a6 01       	movw	r20, r12
    9260:	95 01       	movw	r18, r10
    9262:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    9266:	ed 85       	ldd	r30, Y+13	; 0x0d
    9268:	fe 85       	ldd	r31, Y+14	; 0x0e
    926a:	60 87       	std	Z+8, r22	; 0x08
    926c:	71 87       	std	Z+9, r23	; 0x09
    926e:	82 87       	std	Z+10, r24	; 0x0a
    9270:	93 87       	std	Z+11, r25	; 0x0b
}
    9272:	cf 01       	movw	r24, r30
    9274:	62 96       	adiw	r28, 0x12	; 18
    9276:	0f b6       	in	r0, 0x3f	; 63
    9278:	f8 94       	cli
    927a:	de bf       	out	0x3e, r29	; 62
    927c:	0f be       	out	0x3f, r0	; 63
    927e:	cd bf       	out	0x3d, r28	; 61
    9280:	cf 91       	pop	r28
    9282:	df 91       	pop	r29
    9284:	1f 91       	pop	r17
    9286:	0f 91       	pop	r16
    9288:	ff 90       	pop	r15
    928a:	ef 90       	pop	r14
    928c:	df 90       	pop	r13
    928e:	cf 90       	pop	r12
    9290:	bf 90       	pop	r11
    9292:	af 90       	pop	r10
    9294:	9f 90       	pop	r9
    9296:	8f 90       	pop	r8
    9298:	7f 90       	pop	r7
    929a:	6f 90       	pop	r6
    929c:	5f 90       	pop	r5
    929e:	4f 90       	pop	r4
    92a0:	3f 90       	pop	r3
    92a2:	2f 90       	pop	r2
    92a4:	08 95       	ret

000092a6 <_Z9get_coordh>:
		// AX12::setMultiPos (targetlength, targets, posvalues);
	} 
	return targetlength;
}

COORD3D get_coord (byte pata) {    
    92a6:	4f 92       	push	r4
    92a8:	5f 92       	push	r5
    92aa:	6f 92       	push	r6
    92ac:	7f 92       	push	r7
    92ae:	8f 92       	push	r8
    92b0:	9f 92       	push	r9
    92b2:	af 92       	push	r10
    92b4:	bf 92       	push	r11
    92b6:	cf 92       	push	r12
    92b8:	df 92       	push	r13
    92ba:	ef 92       	push	r14
    92bc:	ff 92       	push	r15
    92be:	0f 93       	push	r16
    92c0:	1f 93       	push	r17
    92c2:	df 93       	push	r29
    92c4:	cf 93       	push	r28
    92c6:	cd b7       	in	r28, 0x3d	; 61
    92c8:	de b7       	in	r29, 0x3e	; 62
    92ca:	62 97       	sbiw	r28, 0x12	; 18
    92cc:	0f b6       	in	r0, 0x3f	; 63
    92ce:	f8 94       	cli
    92d0:	de bf       	out	0x3e, r29	; 62
    92d2:	0f be       	out	0x3f, r0	; 63
    92d4:	cd bf       	out	0x3d, r28	; 61
    92d6:	2c 01       	movw	r4, r24
    92d8:	66 2e       	mov	r6, r22
  int angulos [3];
  all_timers_off ();
    92da:	80 e0       	ldi	r24, 0x00	; 0
    92dc:	0e 94 3d 1b 	call	0x367a	; 0x367a <_Z14all_timers_offb>
    92e0:	6e 01       	movw	r12, r28
    92e2:	08 94       	sec
    92e4:	c1 1c       	adc	r12, r1
    92e6:	d1 1c       	adc	r13, r1
    92e8:	00 e0       	ldi	r16, 0x00	; 0
    92ea:	10 e0       	ldi	r17, 0x00	; 0
  for (byte i=0; i<3; i++) {
    angulos[i] = (motors[pata][i].getPos() - ANG_ZERO) * bin2sign(pata>2);       // los motores no tienen la propiedad "inverse"
    92ec:	89 e0       	ldi	r24, 0x09	; 9
    92ee:	68 9e       	mul	r6, r24
    92f0:	40 01       	movw	r8, r0
    92f2:	11 24       	eor	r1, r1
    92f4:	c8 01       	movw	r24, r16
    92f6:	88 0f       	add	r24, r24
    92f8:	99 1f       	adc	r25, r25
    92fa:	80 0f       	add	r24, r16
    92fc:	91 1f       	adc	r25, r17
    92fe:	88 0d       	add	r24, r8
    9300:	99 1d       	adc	r25, r9
    9302:	81 53       	subi	r24, 0x31	; 49
    9304:	9d 4e       	sbci	r25, 0xED	; 237
    9306:	64 e2       	ldi	r22, 0x24	; 36
    9308:	0e 94 1e 0b 	call	0x163c	; 0x163c <_ZN4AX128readInfoEh>
    930c:	ac 01       	movw	r20, r24
    930e:	9a ef       	ldi	r25, 0xFA	; 250
    9310:	e9 2e       	mov	r14, r25
    9312:	9d ef       	ldi	r25, 0xFD	; 253
    9314:	f9 2e       	mov	r15, r25
    9316:	e4 0e       	add	r14, r20
    9318:	f5 1e       	adc	r15, r21
    931a:	aa 24       	eor	r10, r10
    931c:	22 e0       	ldi	r18, 0x02	; 2
    931e:	26 15       	cp	r18, r6
    9320:	10 f4       	brcc	.+4      	; 0x9326 <_Z9get_coordh+0x80>
    9322:	aa 24       	eor	r10, r10
    9324:	a3 94       	inc	r10
    9326:	8a 2d       	mov	r24, r10
    9328:	0e 94 48 0a 	call	0x1490	; 0x1490 <_Z8bin2signb>
    932c:	99 27       	eor	r25, r25
    932e:	87 fd       	sbrc	r24, 7
    9330:	90 95       	com	r25
    9332:	fc 01       	movw	r30, r24
    9334:	ee 9d       	mul	r30, r14
    9336:	c0 01       	movw	r24, r0
    9338:	ef 9d       	mul	r30, r15
    933a:	90 0d       	add	r25, r0
    933c:	fe 9d       	mul	r31, r14
    933e:	90 0d       	add	r25, r0
    9340:	11 24       	eor	r1, r1
    9342:	f6 01       	movw	r30, r12
    9344:	81 93       	st	Z+, r24
    9346:	91 93       	st	Z+, r25
    9348:	6f 01       	movw	r12, r30
    934a:	0f 5f       	subi	r16, 0xFF	; 255
    934c:	1f 4f       	sbci	r17, 0xFF	; 255
}

COORD3D get_coord (byte pata) {    
  int angulos [3];
  all_timers_off ();
  for (byte i=0; i<3; i++) {
    934e:	03 30       	cpi	r16, 0x03	; 3
    9350:	11 05       	cpc	r17, r1
    9352:	81 f6       	brne	.-96     	; 0x92f4 <_Z9get_coordh+0x4e>
    angulos[i] = (motors[pata][i].getPos() - ANG_ZERO) * bin2sign(pata>2);       // los motores no tienen la propiedad "inverse"
  } 
  all_timers_off (RESTORE);
    9354:	81 e0       	ldi	r24, 0x01	; 1
    9356:	0e 94 3d 1b 	call	0x367a	; 0x367a <_Z14all_timers_offb>
  COORD3D P = xyz (angulos);
    935a:	ce 01       	movw	r24, r28
    935c:	07 96       	adiw	r24, 0x07	; 7
    935e:	be 01       	movw	r22, r28
    9360:	6f 5f       	subi	r22, 0xFF	; 255
    9362:	7f 4f       	sbci	r23, 0xFF	; 255
    9364:	0e 94 62 48 	call	0x90c4	; 0x90c4 <_Z3xyzPi>
  return (COORD3D) {P.x*bin2sign(pata>2), P.y, P.z};   
    9368:	ef 80       	ldd	r14, Y+7	; 0x07
    936a:	f8 84       	ldd	r15, Y+8	; 0x08
    936c:	09 85       	ldd	r16, Y+9	; 0x09
    936e:	1a 85       	ldd	r17, Y+10	; 0x0a
    9370:	8a 2d       	mov	r24, r10
    9372:	0e 94 48 0a 	call	0x1490	; 0x1490 <_Z8bin2signb>
    9376:	ab 84       	ldd	r10, Y+11	; 0x0b
    9378:	bc 84       	ldd	r11, Y+12	; 0x0c
    937a:	cd 84       	ldd	r12, Y+13	; 0x0d
    937c:	de 84       	ldd	r13, Y+14	; 0x0e
    937e:	6f 84       	ldd	r6, Y+15	; 0x0f
    9380:	78 88       	ldd	r7, Y+16	; 0x10
    9382:	89 88       	ldd	r8, Y+17	; 0x11
    9384:	9a 88       	ldd	r9, Y+18	; 0x12
    9386:	99 27       	eor	r25, r25
    9388:	87 fd       	sbrc	r24, 7
    938a:	90 95       	com	r25
    938c:	a9 2f       	mov	r26, r25
    938e:	b9 2f       	mov	r27, r25
    9390:	bc 01       	movw	r22, r24
    9392:	cd 01       	movw	r24, r26
    9394:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    9398:	9b 01       	movw	r18, r22
    939a:	ac 01       	movw	r20, r24
    939c:	c8 01       	movw	r24, r16
    939e:	b7 01       	movw	r22, r14
    93a0:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    93a4:	f2 01       	movw	r30, r4
    93a6:	60 83       	st	Z, r22
    93a8:	71 83       	std	Z+1, r23	; 0x01
    93aa:	82 83       	std	Z+2, r24	; 0x02
    93ac:	93 83       	std	Z+3, r25	; 0x03
    93ae:	a4 82       	std	Z+4, r10	; 0x04
    93b0:	b5 82       	std	Z+5, r11	; 0x05
    93b2:	c6 82       	std	Z+6, r12	; 0x06
    93b4:	d7 82       	std	Z+7, r13	; 0x07
    93b6:	60 86       	std	Z+8, r6	; 0x08
    93b8:	71 86       	std	Z+9, r7	; 0x09
    93ba:	82 86       	std	Z+10, r8	; 0x0a
    93bc:	93 86       	std	Z+11, r9	; 0x0b
}
    93be:	c2 01       	movw	r24, r4
    93c0:	62 96       	adiw	r28, 0x12	; 18
    93c2:	0f b6       	in	r0, 0x3f	; 63
    93c4:	f8 94       	cli
    93c6:	de bf       	out	0x3e, r29	; 62
    93c8:	0f be       	out	0x3f, r0	; 63
    93ca:	cd bf       	out	0x3d, r28	; 61
    93cc:	cf 91       	pop	r28
    93ce:	df 91       	pop	r29
    93d0:	1f 91       	pop	r17
    93d2:	0f 91       	pop	r16
    93d4:	ff 90       	pop	r15
    93d6:	ef 90       	pop	r14
    93d8:	df 90       	pop	r13
    93da:	cf 90       	pop	r12
    93dc:	bf 90       	pop	r11
    93de:	af 90       	pop	r10
    93e0:	9f 90       	pop	r9
    93e2:	8f 90       	pop	r8
    93e4:	7f 90       	pop	r7
    93e6:	6f 90       	pop	r6
    93e8:	5f 90       	pop	r5
    93ea:	4f 90       	pop	r4
    93ec:	08 95       	ret

000093ee <_Z11motor_setupv>:
	
	return motors[pata][anillo].ping();      // testea a ver si el motor responde a un ping

}

void motor_setup ()   {                
    93ee:	2f 92       	push	r2
    93f0:	3f 92       	push	r3
    93f2:	4f 92       	push	r4
    93f4:	5f 92       	push	r5
    93f6:	7f 92       	push	r7
    93f8:	8f 92       	push	r8
    93fa:	9f 92       	push	r9
    93fc:	af 92       	push	r10
    93fe:	bf 92       	push	r11
    9400:	cf 92       	push	r12
    9402:	df 92       	push	r13
    9404:	ef 92       	push	r14
    9406:	ff 92       	push	r15
    9408:	0f 93       	push	r16
    940a:	1f 93       	push	r17
    940c:	df 93       	push	r29
    940e:	cf 93       	push	r28
    9410:	cd b7       	in	r28, 0x3d	; 61
    9412:	de b7       	in	r29, 0x3e	; 62
    9414:	2f 97       	sbiw	r28, 0x0f	; 15
    9416:	0f b6       	in	r0, 0x3f	; 63
    9418:	f8 94       	cli
    941a:	de bf       	out	0x3e, r29	; 62
    941c:	0f be       	out	0x3f, r0	; 63
    941e:	cd bf       	out	0x3d, r28	; 61
	AX12::init (BAUDRATE);                             // inicializa la biblioteca AX12 al baudrate indicado
    9420:	60 e4       	ldi	r22, 0x40	; 64
    9422:	72 e4       	ldi	r23, 0x42	; 66
    9424:	8f e0       	ldi	r24, 0x0F	; 15
    9426:	90 e0       	ldi	r25, 0x00	; 0
    9428:	0e 94 67 09 	call	0x12ce	; 0x12ce <_ZN4AX124initEl>
    942c:	ee 24       	eor	r14, r14
    942e:	ff 24       	eor	r15, r15
	for (byte pata=0; pata<6; pata++) {
		all_timers_off ();
		for (byte anillo=0; anillo<3; anillo++) {
			motors [pata][anillo] = AX12(ids[pata][anillo]);   // asigna los IDs
    9430:	1e 01       	movw	r2, r28
    9432:	08 94       	sec
    9434:	21 1c       	adc	r2, r1
    9436:	31 1c       	adc	r3, r1
				//motors[pata][anillo].torqueOff;                                              // esto no tiene ningún efecto, debido a un bug en la documentación de los AX12
			  motors[pata][anillo].writeInfo(TORQUE_LIMIT, 0);                       // en su lugar usamos esto que tiene el mismo efecto 
			}      
		}
		all_timers_off (RESTORE);
		pos_des [pata] = get_coord (pata);         // setea la "posición actual" a la posición real 
    9438:	f4 e0       	ldi	r31, 0x04	; 4
    943a:	4f 2e       	mov	r4, r31
    943c:	51 2c       	mov	r5, r1
    943e:	4c 0e       	add	r4, r28
    9440:	5d 1e       	adc	r5, r29
	return motors[pata][anillo].ping();      // testea a ver si el motor responde a un ping

}

void motor_setup ()   {                
	AX12::init (BAUDRATE);                             // inicializa la biblioteca AX12 al baudrate indicado
    9442:	7e 2c       	mov	r7, r14
	for (byte pata=0; pata<6; pata++) {
		all_timers_off ();
    9444:	80 e0       	ldi	r24, 0x00	; 0
    9446:	0e 94 3d 1b 	call	0x367a	; 0x367a <_Z14all_timers_offb>
    944a:	87 01       	movw	r16, r14
    944c:	00 0f       	add	r16, r16
    944e:	11 1f       	adc	r17, r17
    9450:	0e 0d       	add	r16, r14
    9452:	1f 1d       	adc	r17, r15
    9454:	03 59       	subi	r16, 0x93	; 147
    9456:	1a 4f       	sbci	r17, 0xFA	; 250
    9458:	c7 01       	movw	r24, r14
    945a:	73 e0       	ldi	r23, 0x03	; 3
    945c:	88 0f       	add	r24, r24
    945e:	99 1f       	adc	r25, r25
    9460:	7a 95       	dec	r23
    9462:	e1 f7       	brne	.-8      	; 0x945c <_Z11motor_setupv+0x6e>
    9464:	8e 0d       	add	r24, r14
    9466:	9f 1d       	adc	r25, r15
    9468:	6f ec       	ldi	r22, 0xCF	; 207
    946a:	a6 2e       	mov	r10, r22
    946c:	62 e1       	ldi	r22, 0x12	; 18
    946e:	b6 2e       	mov	r11, r22
    9470:	a8 0e       	add	r10, r24
    9472:	b9 1e       	adc	r11, r25
    9474:	cc 24       	eor	r12, r12
    9476:	dd 24       	eor	r13, r13
					motors[pata][anillo].torqueOn;                                     // habilita el torque
					pantalla.setPixel(anillo+3,6-pata);                                 // motor testeado y configurado OK
				}
			} else {
				//motors[pata][anillo].torqueOff;                                              // esto no tiene ningún efecto, debido a un bug en la documentación de los AX12
			  motors[pata][anillo].writeInfo(TORQUE_LIMIT, 0);                       // en su lugar usamos esto que tiene el mismo efecto 
    9478:	4c 01       	movw	r8, r24
void motor_setup ()   {                
	AX12::init (BAUDRATE);                             // inicializa la biblioteca AX12 al baudrate indicado
	for (byte pata=0; pata<6; pata++) {
		all_timers_off ();
		for (byte anillo=0; anillo<3; anillo++) {
			motors [pata][anillo] = AX12(ids[pata][anillo]);   // asigna los IDs
    947a:	c1 01       	movw	r24, r2
    947c:	f8 01       	movw	r30, r16
    947e:	60 81       	ld	r22, Z
    9480:	0e 94 86 09 	call	0x130c	; 0x130c <_ZN4AX12C1Eh>
    9484:	d5 01       	movw	r26, r10
    9486:	f1 01       	movw	r30, r2
    9488:	83 e0       	ldi	r24, 0x03	; 3
    948a:	01 90       	ld	r0, Z+
    948c:	0d 92       	st	X+, r0
    948e:	81 50       	subi	r24, 0x01	; 1
    9490:	e1 f7       	brne	.-8      	; 0x948a <_Z11motor_setupv+0x9c>
			int error = motor_init (pata, anillo);
    9492:	87 2d       	mov	r24, r7
    9494:	6c 2d       	mov	r22, r12
    9496:	0e 94 d0 46 	call	0x8da0	; 0x8da0 <_Z10motor_inithh>
					motors[pata][anillo].torqueOn;                                     // habilita el torque
					pantalla.setPixel(anillo+3,6-pata);                                 // motor testeado y configurado OK
				}
			} else {
				//motors[pata][anillo].torqueOff;                                              // esto no tiene ningún efecto, debido a un bug en la documentación de los AX12
			  motors[pata][anillo].writeInfo(TORQUE_LIMIT, 0);                       // en su lugar usamos esto que tiene el mismo efecto 
    949a:	c6 01       	movw	r24, r12
    949c:	88 0f       	add	r24, r24
    949e:	99 1f       	adc	r25, r25
    94a0:	8c 0d       	add	r24, r12
    94a2:	9d 1d       	adc	r25, r13
    94a4:	88 0d       	add	r24, r8
    94a6:	99 1d       	adc	r25, r9
    94a8:	81 53       	subi	r24, 0x31	; 49
    94aa:	9d 4e       	sbci	r25, 0xED	; 237
    94ac:	62 e2       	ldi	r22, 0x22	; 34
    94ae:	40 e0       	ldi	r20, 0x00	; 0
    94b0:	50 e0       	ldi	r21, 0x00	; 0
    94b2:	20 e0       	ldi	r18, 0x00	; 0
    94b4:	0e 94 bb 0c 	call	0x1976	; 0x1976 <_ZN4AX129writeInfoEhib>
    94b8:	08 94       	sec
    94ba:	c1 1c       	adc	r12, r1
    94bc:	d1 1c       	adc	r13, r1
    94be:	0f 5f       	subi	r16, 0xFF	; 255
    94c0:	1f 4f       	sbci	r17, 0xFF	; 255
    94c2:	83 e0       	ldi	r24, 0x03	; 3
    94c4:	90 e0       	ldi	r25, 0x00	; 0
    94c6:	a8 0e       	add	r10, r24
    94c8:	b9 1e       	adc	r11, r25

void motor_setup ()   {                
	AX12::init (BAUDRATE);                             // inicializa la biblioteca AX12 al baudrate indicado
	for (byte pata=0; pata<6; pata++) {
		all_timers_off ();
		for (byte anillo=0; anillo<3; anillo++) {
    94ca:	93 e0       	ldi	r25, 0x03	; 3
    94cc:	c9 16       	cp	r12, r25
    94ce:	d1 04       	cpc	r13, r1
    94d0:	a1 f6       	brne	.-88     	; 0x947a <_Z11motor_setupv+0x8c>
			} else {
				//motors[pata][anillo].torqueOff;                                              // esto no tiene ningún efecto, debido a un bug en la documentación de los AX12
			  motors[pata][anillo].writeInfo(TORQUE_LIMIT, 0);                       // en su lugar usamos esto que tiene el mismo efecto 
			}      
		}
		all_timers_off (RESTORE);
    94d2:	81 e0       	ldi	r24, 0x01	; 1
    94d4:	0e 94 3d 1b 	call	0x367a	; 0x367a <_Z14all_timers_offb>
		pos_des [pata] = get_coord (pata);         // setea la "posición actual" a la posición real 
    94d8:	87 01       	movw	r16, r14
    94da:	00 0f       	add	r16, r16
    94dc:	11 1f       	adc	r17, r17
    94de:	0e 0d       	add	r16, r14
    94e0:	1f 1d       	adc	r17, r15
    94e2:	00 0f       	add	r16, r16
    94e4:	11 1f       	adc	r17, r17
    94e6:	00 0f       	add	r16, r16
    94e8:	11 1f       	adc	r17, r17
    94ea:	00 5b       	subi	r16, 0xB0	; 176
    94ec:	1c 4e       	sbci	r17, 0xEC	; 236
    94ee:	c2 01       	movw	r24, r4
    94f0:	67 2d       	mov	r22, r7
    94f2:	0e 94 53 49 	call	0x92a6	; 0x92a6 <_Z9get_coordh>
    94f6:	d8 01       	movw	r26, r16
    94f8:	f2 01       	movw	r30, r4
    94fa:	8c e0       	ldi	r24, 0x0C	; 12
    94fc:	01 90       	ld	r0, Z+
    94fe:	0d 92       	st	X+, r0
    9500:	81 50       	subi	r24, 0x01	; 1
    9502:	e1 f7       	brne	.-8      	; 0x94fc <_Z11motor_setupv+0x10e>
    9504:	08 94       	sec
    9506:	e1 1c       	adc	r14, r1
    9508:	f1 1c       	adc	r15, r1

}

void motor_setup ()   {                
	AX12::init (BAUDRATE);                             // inicializa la biblioteca AX12 al baudrate indicado
	for (byte pata=0; pata<6; pata++) {
    950a:	e6 e0       	ldi	r30, 0x06	; 6
    950c:	ee 16       	cp	r14, r30
    950e:	f1 04       	cpc	r15, r1
    9510:	09 f0       	breq	.+2      	; 0x9514 <_Z11motor_setupv+0x126>
    9512:	97 cf       	rjmp	.-210    	; 0x9442 <_Z11motor_setupv+0x54>
			}      
		}
		all_timers_off (RESTORE);
		pos_des [pata] = get_coord (pata);         // setea la "posición actual" a la posición real 
	}
}
    9514:	2f 96       	adiw	r28, 0x0f	; 15
    9516:	0f b6       	in	r0, 0x3f	; 63
    9518:	f8 94       	cli
    951a:	de bf       	out	0x3e, r29	; 62
    951c:	0f be       	out	0x3f, r0	; 63
    951e:	cd bf       	out	0x3d, r28	; 61
    9520:	cf 91       	pop	r28
    9522:	df 91       	pop	r29
    9524:	1f 91       	pop	r17
    9526:	0f 91       	pop	r16
    9528:	ff 90       	pop	r15
    952a:	ef 90       	pop	r14
    952c:	df 90       	pop	r13
    952e:	cf 90       	pop	r12
    9530:	bf 90       	pop	r11
    9532:	af 90       	pop	r10
    9534:	9f 90       	pop	r9
    9536:	8f 90       	pop	r8
    9538:	7f 90       	pop	r7
    953a:	5f 90       	pop	r5
    953c:	4f 90       	pop	r4
    953e:	3f 90       	pop	r3
    9540:	2f 90       	pop	r2
    9542:	08 95       	ret

00009544 <_Z12alfabetagama7COORD3D>:
  servo (pata, 0, A.gama, duracion);                           
  servo (pata, 1, A.alfa, duracion);                          
  servo (pata, 2, A.beta, duracion);    
}

ANGULOS alfabetagama (COORD3D P) {     
    9544:	2f 92       	push	r2
    9546:	3f 92       	push	r3
    9548:	4f 92       	push	r4
    954a:	5f 92       	push	r5
    954c:	6f 92       	push	r6
    954e:	7f 92       	push	r7
    9550:	8f 92       	push	r8
    9552:	9f 92       	push	r9
    9554:	af 92       	push	r10
    9556:	bf 92       	push	r11
    9558:	cf 92       	push	r12
    955a:	df 92       	push	r13
    955c:	ef 92       	push	r14
    955e:	ff 92       	push	r15
    9560:	0f 93       	push	r16
    9562:	1f 93       	push	r17
    9564:	df 93       	push	r29
    9566:	cf 93       	push	r28
    9568:	cd b7       	in	r28, 0x3d	; 61
    956a:	de b7       	in	r29, 0x3e	; 62
    956c:	6e 97       	sbiw	r28, 0x1e	; 30
    956e:	0f b6       	in	r0, 0x3f	; 63
    9570:	f8 94       	cli
    9572:	de bf       	out	0x3e, r29	; 62
    9574:	0f be       	out	0x3f, r0	; 63
    9576:	cd bf       	out	0x3d, r28	; 61
    9578:	ef 82       	std	Y+7, r14	; 0x07
    957a:	f8 86       	std	Y+8, r15	; 0x08
    957c:	09 87       	std	Y+9, r16	; 0x09
    957e:	1a 87       	std	Y+10, r17	; 0x0a
    9580:	2b 87       	std	Y+11, r18	; 0x0b
    9582:	3c 87       	std	Y+12, r19	; 0x0c
    9584:	4d 87       	std	Y+13, r20	; 0x0d
    9586:	5e 87       	std	Y+14, r21	; 0x0e
    9588:	6f 87       	std	Y+15, r22	; 0x0f
    958a:	78 8b       	std	Y+16, r23	; 0x10
    958c:	89 8b       	std	Y+17, r24	; 0x11
    958e:	9a 8b       	std	Y+18, r25	; 0x12
    9590:	ef 80       	ldd	r14, Y+7	; 0x07
    9592:	f8 84       	ldd	r15, Y+8	; 0x08
    9594:	09 85       	ldd	r16, Y+9	; 0x09
    9596:	1a 85       	ldd	r17, Y+10	; 0x0a
    9598:	af 84       	ldd	r10, Y+15	; 0x0f
    959a:	b8 88       	ldd	r11, Y+16	; 0x10
    959c:	c9 88       	ldd	r12, Y+17	; 0x11
    959e:	da 88       	ldd	r13, Y+18	; 0x12
    95a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    95a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    95a4:	ad 85       	ldd	r26, Y+13	; 0x0d
    95a6:	be 85       	ldd	r27, Y+14	; 0x0e
    95a8:	8b 8b       	std	Y+19, r24	; 0x13
    95aa:	9c 8b       	std	Y+20, r25	; 0x14
    95ac:	ad 8b       	std	Y+21, r26	; 0x15
    95ae:	be 8b       	std	Y+22, r27	; 0x16
  // convierte las coordenadas cartesianas en los ángulos correspondientes
  // recibe: xn, y, z; devuelve: gama (ángulo cuerpo|coxa), alfa (ángulo coxa|femur), beta (ángulo femur|tibia)  
  // fundamento: teorema de pitágoras + teorema del coseno (ver figura) 
  
  P.x = abs (P.x);        // pequeño truco para abarajar la simetría del eje x 
    95b0:	c8 01       	movw	r24, r16
    95b2:	b7 01       	movw	r22, r14
    95b4:	20 e0       	ldi	r18, 0x00	; 0
    95b6:	30 e0       	ldi	r19, 0x00	; 0
    95b8:	40 e0       	ldi	r20, 0x00	; 0
    95ba:	50 e0       	ldi	r21, 0x00	; 0
    95bc:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <__gesf2>
    95c0:	87 ff       	sbrs	r24, 7
    95c2:	04 c0       	rjmp	.+8      	; 0x95cc <_Z12alfabetagama7COORD3D+0x88>
    95c4:	17 fb       	bst	r17, 7
    95c6:	10 95       	com	r17
    95c8:	17 f9       	bld	r17, 7
    95ca:	10 95       	com	r17
  ANGULOS A;
  
  // fase 1, calculamos "x" y el ángulo "gama"
  // COXA es la distancia entre el eje del primer motor y el segundo
  float x = hypot (P.z, P.x) - COXA;   // P.x = xn (esto es confuso)                          
    95cc:	c6 01       	movw	r24, r12
    95ce:	b5 01       	movw	r22, r10
    95d0:	a8 01       	movw	r20, r16
    95d2:	97 01       	movw	r18, r14
    95d4:	0e 94 a3 7e 	call	0xfd46	; 0xfd46 <hypot>
    95d8:	20 e0       	ldi	r18, 0x00	; 0
    95da:	30 e0       	ldi	r19, 0x00	; 0
    95dc:	40 ea       	ldi	r20, 0xA0	; 160
    95de:	50 e4       	ldi	r21, 0x40	; 64
    95e0:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    95e4:	3b 01       	movw	r6, r22
    95e6:	4c 01       	movw	r8, r24
  A.gama = ANG_SCALE*(atan(P.z/P.x))/PI;                   
    95e8:	c6 01       	movw	r24, r12
    95ea:	b5 01       	movw	r22, r10
    95ec:	a8 01       	movw	r20, r16
    95ee:	97 01       	movw	r18, r14
    95f0:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    95f4:	0e 94 72 7c 	call	0xf8e4	; 0xf8e4 <atan>
    95f8:	6f 8b       	std	Y+23, r22	; 0x17
    95fa:	78 8f       	std	Y+24, r23	; 0x18
    95fc:	89 8f       	std	Y+25, r24	; 0x19
    95fe:	9a 8f       	std	Y+26, r25	; 0x1a
  
  // fase 2, calculamos alfa y beta
  // ver constantes definidas al principio
  float sqx = sq(x); float sqy = sq(P.y);
    9600:	c4 01       	movw	r24, r8
    9602:	b3 01       	movw	r22, r6
    9604:	a4 01       	movw	r20, r8
    9606:	93 01       	movw	r18, r6
    9608:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    960c:	1b 01       	movw	r2, r22
    960e:	2c 01       	movw	r4, r24
    9610:	6b 89       	ldd	r22, Y+19	; 0x13
    9612:	7c 89       	ldd	r23, Y+20	; 0x14
    9614:	8d 89       	ldd	r24, Y+21	; 0x15
    9616:	9e 89       	ldd	r25, Y+22	; 0x16
    9618:	9b 01       	movw	r18, r22
    961a:	ac 01       	movw	r20, r24
    961c:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    9620:	6b 8f       	std	Y+27, r22	; 0x1b
    9622:	7c 8f       	std	Y+28, r23	; 0x1c
    9624:	8d 8f       	std	Y+29, r24	; 0x1d
    9626:	9e 8f       	std	Y+30, r25	; 0x1e
  float cosalfa = (sqx + sqy + sqaminussqb) / (doublea*sqrt(sqx + sqy));          // coseno del angulo que forman el "femur" y la hipotenusa
    9628:	c2 01       	movw	r24, r4
    962a:	b1 01       	movw	r22, r2
    962c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    962e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    9630:	4d 8d       	ldd	r20, Y+29	; 0x1d
    9632:	5e 8d       	ldd	r21, Y+30	; 0x1e
    9634:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    9638:	7b 01       	movw	r14, r22
    963a:	8c 01       	movw	r16, r24
    963c:	0e 94 69 80 	call	0x100d2	; 0x100d2 <sqrt>
    9640:	5b 01       	movw	r10, r22
    9642:	6c 01       	movw	r12, r24
  float cosbeta = (sqaplussqb - sqx - sqy) / doubleab;                         // coseno del angulo que forman "femur" y "tibia"
  A.alfa = ANG_SCALE*(acos(cosalfa) + atan(P.y/x))/PI;
    9644:	c8 01       	movw	r24, r16
    9646:	b7 01       	movw	r22, r14
    9648:	2d ec       	ldi	r18, 0xCD	; 205
    964a:	3c e4       	ldi	r19, 0x4C	; 76
    964c:	4b e8       	ldi	r20, 0x8B	; 139
    964e:	52 e4       	ldi	r21, 0x42	; 66
    9650:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    9654:	7b 01       	movw	r14, r22
    9656:	8c 01       	movw	r16, r24
    9658:	c6 01       	movw	r24, r12
    965a:	b5 01       	movw	r22, r10
    965c:	23 e3       	ldi	r18, 0x33	; 51
    965e:	33 e3       	ldi	r19, 0x33	; 51
    9660:	43 e8       	ldi	r20, 0x83	; 131
    9662:	51 e4       	ldi	r21, 0x41	; 65
    9664:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    9668:	9b 01       	movw	r18, r22
    966a:	ac 01       	movw	r20, r24
    966c:	c8 01       	movw	r24, r16
    966e:	b7 01       	movw	r22, r14
    9670:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    9674:	0e 94 c5 7b 	call	0xf78a	; 0xf78a <acos>
    9678:	5b 01       	movw	r10, r22
    967a:	6c 01       	movw	r12, r24
    967c:	6b 89       	ldd	r22, Y+19	; 0x13
    967e:	7c 89       	ldd	r23, Y+20	; 0x14
    9680:	8d 89       	ldd	r24, Y+21	; 0x15
    9682:	9e 89       	ldd	r25, Y+22	; 0x16
    9684:	a4 01       	movw	r20, r8
    9686:	93 01       	movw	r18, r6
    9688:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    968c:	0e 94 72 7c 	call	0xf8e4	; 0xf8e4 <atan>
    9690:	7b 01       	movw	r14, r22
    9692:	8c 01       	movw	r16, r24
  A.beta = ANG_SCALE/2 - ANG_SCALE*acos(cosbeta)/PI;
    9694:	68 e4       	ldi	r22, 0x48	; 72
    9696:	71 e2       	ldi	r23, 0x21	; 33
    9698:	8c e4       	ldi	r24, 0x4C	; 76
    969a:	93 e4       	ldi	r25, 0x43	; 67
    969c:	a2 01       	movw	r20, r4
    969e:	91 01       	movw	r18, r2
    96a0:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    96a4:	2b 8d       	ldd	r18, Y+27	; 0x1b
    96a6:	3c 8d       	ldd	r19, Y+28	; 0x1c
    96a8:	4d 8d       	ldd	r20, Y+29	; 0x1d
    96aa:	5e 8d       	ldd	r21, Y+30	; 0x1e
    96ac:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    96b0:	27 e4       	ldi	r18, 0x47	; 71
    96b2:	31 ee       	ldi	r19, 0xE1	; 225
    96b4:	4f e3       	ldi	r20, 0x3F	; 63
    96b6:	53 e4       	ldi	r21, 0x43	; 67
    96b8:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    96bc:	0e 94 c5 7b 	call	0xf78a	; 0xf78a <acos>
  
  return A;  
    96c0:	20 e0       	ldi	r18, 0x00	; 0
    96c2:	30 e8       	ldi	r19, 0x80	; 128
    96c4:	49 e1       	ldi	r20, 0x19	; 25
    96c6:	54 e4       	ldi	r21, 0x44	; 68
    96c8:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    96cc:	2b ed       	ldi	r18, 0xDB	; 219
    96ce:	3f e0       	ldi	r19, 0x0F	; 15
    96d0:	49 e4       	ldi	r20, 0x49	; 73
    96d2:	50 ec       	ldi	r21, 0xC0	; 192
    96d4:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    96d8:	20 e0       	ldi	r18, 0x00	; 0
    96da:	30 e8       	ldi	r19, 0x80	; 128
    96dc:	49 e9       	ldi	r20, 0x99	; 153
    96de:	53 e4       	ldi	r21, 0x43	; 67
    96e0:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    96e4:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <__fixsfsi>
    96e8:	7e 83       	std	Y+6, r23	; 0x06
    96ea:	6d 83       	std	Y+5, r22	; 0x05
    96ec:	c6 01       	movw	r24, r12
    96ee:	b5 01       	movw	r22, r10
    96f0:	a8 01       	movw	r20, r16
    96f2:	97 01       	movw	r18, r14
    96f4:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    96f8:	20 e0       	ldi	r18, 0x00	; 0
    96fa:	30 e8       	ldi	r19, 0x80	; 128
    96fc:	49 e1       	ldi	r20, 0x19	; 25
    96fe:	54 e4       	ldi	r21, 0x44	; 68
    9700:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    9704:	2b ed       	ldi	r18, 0xDB	; 219
    9706:	3f e0       	ldi	r19, 0x0F	; 15
    9708:	49 e4       	ldi	r20, 0x49	; 73
    970a:	50 e4       	ldi	r21, 0x40	; 64
    970c:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    9710:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <__fixsfsi>
    9714:	7c 83       	std	Y+4, r23	; 0x04
    9716:	6b 83       	std	Y+3, r22	; 0x03
    9718:	6f 89       	ldd	r22, Y+23	; 0x17
    971a:	78 8d       	ldd	r23, Y+24	; 0x18
    971c:	89 8d       	ldd	r24, Y+25	; 0x19
    971e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9720:	20 e0       	ldi	r18, 0x00	; 0
    9722:	30 e8       	ldi	r19, 0x80	; 128
    9724:	49 e1       	ldi	r20, 0x19	; 25
    9726:	54 e4       	ldi	r21, 0x44	; 68
    9728:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    972c:	2b ed       	ldi	r18, 0xDB	; 219
    972e:	3f e0       	ldi	r19, 0x0F	; 15
    9730:	49 e4       	ldi	r20, 0x49	; 73
    9732:	50 e4       	ldi	r21, 0x40	; 64
    9734:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    9738:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <__fixsfsi>
    973c:	7a 83       	std	Y+2, r23	; 0x02
    973e:	69 83       	std	Y+1, r22	; 0x01
    9740:	29 81       	ldd	r18, Y+1	; 0x01
    9742:	3a 81       	ldd	r19, Y+2	; 0x02
    9744:	4b 81       	ldd	r20, Y+3	; 0x03
    9746:	5c 81       	ldd	r21, Y+4	; 0x04
    9748:	6d 81       	ldd	r22, Y+5	; 0x05
    974a:	7e 81       	ldd	r23, Y+6	; 0x06
}
    974c:	80 e0       	ldi	r24, 0x00	; 0
    974e:	90 e0       	ldi	r25, 0x00	; 0
    9750:	6e 96       	adiw	r28, 0x1e	; 30
    9752:	0f b6       	in	r0, 0x3f	; 63
    9754:	f8 94       	cli
    9756:	de bf       	out	0x3e, r29	; 62
    9758:	0f be       	out	0x3f, r0	; 63
    975a:	cd bf       	out	0x3d, r28	; 61
    975c:	cf 91       	pop	r28
    975e:	df 91       	pop	r29
    9760:	1f 91       	pop	r17
    9762:	0f 91       	pop	r16
    9764:	ff 90       	pop	r15
    9766:	ef 90       	pop	r14
    9768:	df 90       	pop	r13
    976a:	cf 90       	pop	r12
    976c:	bf 90       	pop	r11
    976e:	af 90       	pop	r10
    9770:	9f 90       	pop	r9
    9772:	8f 90       	pop	r8
    9774:	7f 90       	pop	r7
    9776:	6f 90       	pop	r6
    9778:	5f 90       	pop	r5
    977a:	4f 90       	pop	r4
    977c:	3f 90       	pop	r3
    977e:	2f 90       	pop	r2
    9780:	08 95       	ret

00009782 <_Z9set_coordR7MOVDATA>:
  float delta = rad[1] - acos(cosalfa);
  float x = c * cos(delta);
  return (COORD3D) {(x+COXA)*cos(rad[0]), c*sin(delta), (x+COXA)*sin(rad[0])};
}

void set_coord (MOVDATA &m) {     
    9782:	2f 92       	push	r2
    9784:	3f 92       	push	r3
    9786:	4f 92       	push	r4
    9788:	5f 92       	push	r5
    978a:	6f 92       	push	r6
    978c:	7f 92       	push	r7
    978e:	8f 92       	push	r8
    9790:	9f 92       	push	r9
    9792:	af 92       	push	r10
    9794:	bf 92       	push	r11
    9796:	cf 92       	push	r12
    9798:	df 92       	push	r13
    979a:	ef 92       	push	r14
    979c:	ff 92       	push	r15
    979e:	0f 93       	push	r16
    97a0:	1f 93       	push	r17
    97a2:	df 93       	push	r29
    97a4:	cf 93       	push	r28
    97a6:	cd b7       	in	r28, 0x3d	; 61
    97a8:	de b7       	in	r29, 0x3e	; 62
    97aa:	60 97       	sbiw	r28, 0x10	; 16
    97ac:	0f b6       	in	r0, 0x3f	; 63
    97ae:	f8 94       	cli
    97b0:	de bf       	out	0x3e, r29	; 62
    97b2:	0f be       	out	0x3f, r0	; 63
    97b4:	cd bf       	out	0x3d, r28	; 61
    97b6:	4c 01       	movw	r8, r24
  // mueve x patas con coordenadas cartesianas
  // el byte "patas" indica en binario qué patas van
  ANGULOS A;
  if (m.absolute) {A = alfabetagama (m.coord);}
    97b8:	fc 01       	movw	r30, r24
    97ba:	87 85       	ldd	r24, Z+15	; 0x0f
    97bc:	88 23       	and	r24, r24
    97be:	e9 f0       	breq	.+58     	; 0x97fa <_Z9set_coordR7MOVDATA+0x78>
    97c0:	e1 80       	ldd	r14, Z+1	; 0x01
    97c2:	f2 80       	ldd	r15, Z+2	; 0x02
    97c4:	03 81       	ldd	r16, Z+3	; 0x03
    97c6:	14 81       	ldd	r17, Z+4	; 0x04
    97c8:	25 81       	ldd	r18, Z+5	; 0x05
    97ca:	36 81       	ldd	r19, Z+6	; 0x06
    97cc:	47 81       	ldd	r20, Z+7	; 0x07
    97ce:	50 85       	ldd	r21, Z+8	; 0x08
    97d0:	61 85       	ldd	r22, Z+9	; 0x09
    97d2:	72 85       	ldd	r23, Z+10	; 0x0a
    97d4:	83 85       	ldd	r24, Z+11	; 0x0b
    97d6:	94 85       	ldd	r25, Z+12	; 0x0c
    97d8:	0e 94 a2 4a 	call	0x9544	; 0x9544 <_Z12alfabetagama7COORD3D>
    97dc:	2f 83       	std	Y+7, r18	; 0x07
    97de:	38 87       	std	Y+8, r19	; 0x08
    97e0:	49 87       	std	Y+9, r20	; 0x09
    97e2:	5a 87       	std	Y+10, r21	; 0x0a
    97e4:	6b 87       	std	Y+11, r22	; 0x0b
    97e6:	7c 87       	std	Y+12, r23	; 0x0c
    97e8:	de 01       	movw	r26, r28
    97ea:	11 96       	adiw	r26, 0x01	; 1
    97ec:	fe 01       	movw	r30, r28
    97ee:	37 96       	adiw	r30, 0x07	; 7
    97f0:	86 e0       	ldi	r24, 0x06	; 6
    97f2:	01 90       	ld	r0, Z+
    97f4:	0d 92       	st	X+, r0
    97f6:	81 50       	subi	r24, 0x01	; 1
    97f8:	e1 f7       	brne	.-8      	; 0x97f2 <_Z9set_coordR7MOVDATA+0x70>
    97fa:	08 e0       	ldi	r16, 0x08	; 8
    97fc:	20 2e       	mov	r2, r16
    97fe:	03 e1       	ldi	r16, 0x13	; 19
    9800:	30 2e       	mov	r3, r16
    9802:	1c e2       	ldi	r17, 0x2C	; 44
    9804:	41 2e       	mov	r4, r17
    9806:	13 e1       	ldi	r17, 0x13	; 19
    9808:	51 2e       	mov	r5, r17
    980a:	80 e5       	ldi	r24, 0x50	; 80
    980c:	93 e1       	ldi	r25, 0x13	; 19
    980e:	9e 87       	std	Y+14, r25	; 0x0e
    9810:	8d 87       	std	Y+13, r24	; 0x0d
    9812:	66 24       	eor	r6, r6
    9814:	77 24       	eor	r7, r7
  for (byte pata=0; pata<6; pata++) {
    if ((m.patas>>pata)&1) {
      if (m.absolute) {
        pos_des [pata] = m.coord;
    9816:	f4 01       	movw	r30, r8
    9818:	31 96       	adiw	r30, 0x01	; 1
    981a:	f8 8b       	std	Y+16, r31	; 0x10
    981c:	ef 87       	std	Y+15, r30	; 0x0f
  // mueve x patas con coordenadas cartesianas
  // el byte "patas" indica en binario qué patas van
  ANGULOS A;
  if (m.absolute) {A = alfabetagama (m.coord);}
  for (byte pata=0; pata<6; pata++) {
    if ((m.patas>>pata)&1) {
    981e:	f4 01       	movw	r30, r8
    9820:	80 81       	ld	r24, Z
    9822:	90 e0       	ldi	r25, 0x00	; 0
    9824:	06 2c       	mov	r0, r6
    9826:	02 c0       	rjmp	.+4      	; 0x982c <_Z9set_coordR7MOVDATA+0xaa>
    9828:	95 95       	asr	r25
    982a:	87 95       	ror	r24
    982c:	0a 94       	dec	r0
    982e:	e2 f7       	brpl	.-8      	; 0x9828 <_Z9set_coordR7MOVDATA+0xa6>
    9830:	80 ff       	sbrs	r24, 0
    9832:	63 c0       	rjmp	.+198    	; 0x98fa <_Z9set_coordR7MOVDATA+0x178>
      if (m.absolute) {
    9834:	87 85       	ldd	r24, Z+15	; 0x0f
    9836:	88 23       	and	r24, r24
    9838:	51 f0       	breq	.+20     	; 0x984e <_Z9set_coordR7MOVDATA+0xcc>
        pos_des [pata] = m.coord;
    983a:	ad 85       	ldd	r26, Y+13	; 0x0d
    983c:	be 85       	ldd	r27, Y+14	; 0x0e
    983e:	ef 85       	ldd	r30, Y+15	; 0x0f
    9840:	f8 89       	ldd	r31, Y+16	; 0x10
    9842:	8c e0       	ldi	r24, 0x0C	; 12
    9844:	01 90       	ld	r0, Z+
    9846:	0d 92       	st	X+, r0
    9848:	81 50       	subi	r24, 0x01	; 1
    984a:	e1 f7       	brne	.-8      	; 0x9844 <_Z9set_coordR7MOVDATA+0xc2>
    984c:	3b c0       	rjmp	.+118    	; 0x98c4 <_Z9set_coordR7MOVDATA+0x142>
      } else {
        sumasigna (&pos_des[pata], m.coord);
    984e:	53 01       	movw	r10, r6
    9850:	aa 0c       	add	r10, r10
    9852:	bb 1c       	adc	r11, r11
    9854:	a6 0c       	add	r10, r6
    9856:	b7 1c       	adc	r11, r7
    9858:	aa 0c       	add	r10, r10
    985a:	bb 1c       	adc	r11, r11
    985c:	aa 0c       	add	r10, r10
    985e:	bb 1c       	adc	r11, r11
    9860:	80 e5       	ldi	r24, 0x50	; 80
    9862:	93 e1       	ldi	r25, 0x13	; 19
    9864:	a8 0e       	add	r10, r24
    9866:	b9 1e       	adc	r11, r25
    9868:	c5 01       	movw	r24, r10
    986a:	f4 01       	movw	r30, r8
    986c:	c1 80       	ldd	r12, Z+1	; 0x01
    986e:	d2 80       	ldd	r13, Z+2	; 0x02
    9870:	e3 80       	ldd	r14, Z+3	; 0x03
    9872:	f4 80       	ldd	r15, Z+4	; 0x04
    9874:	05 81       	ldd	r16, Z+5	; 0x05
    9876:	16 81       	ldd	r17, Z+6	; 0x06
    9878:	27 81       	ldd	r18, Z+7	; 0x07
    987a:	30 85       	ldd	r19, Z+8	; 0x08
    987c:	41 85       	ldd	r20, Z+9	; 0x09
    987e:	52 85       	ldd	r21, Z+10	; 0x0a
    9880:	63 85       	ldd	r22, Z+11	; 0x0b
    9882:	74 85       	ldd	r23, Z+12	; 0x0c
    9884:	0e 94 72 6d 	call	0xdae4	; 0xdae4 <_Z9sumasignaP7COORD3DS_>
        A = alfabetagama (pos_des [pata]);
    9888:	f5 01       	movw	r30, r10
    988a:	e0 80       	ld	r14, Z
    988c:	f1 80       	ldd	r15, Z+1	; 0x01
    988e:	02 81       	ldd	r16, Z+2	; 0x02
    9890:	13 81       	ldd	r17, Z+3	; 0x03
    9892:	24 81       	ldd	r18, Z+4	; 0x04
    9894:	35 81       	ldd	r19, Z+5	; 0x05
    9896:	46 81       	ldd	r20, Z+6	; 0x06
    9898:	57 81       	ldd	r21, Z+7	; 0x07
    989a:	60 85       	ldd	r22, Z+8	; 0x08
    989c:	71 85       	ldd	r23, Z+9	; 0x09
    989e:	82 85       	ldd	r24, Z+10	; 0x0a
    98a0:	93 85       	ldd	r25, Z+11	; 0x0b
    98a2:	0e 94 a2 4a 	call	0x9544	; 0x9544 <_Z12alfabetagama7COORD3D>
    98a6:	2f 83       	std	Y+7, r18	; 0x07
    98a8:	38 87       	std	Y+8, r19	; 0x08
    98aa:	49 87       	std	Y+9, r20	; 0x09
    98ac:	5a 87       	std	Y+10, r21	; 0x0a
    98ae:	6b 87       	std	Y+11, r22	; 0x0b
    98b0:	7c 87       	std	Y+12, r23	; 0x0c
    98b2:	de 01       	movw	r26, r28
    98b4:	11 96       	adiw	r26, 0x01	; 1
    98b6:	fe 01       	movw	r30, r28
    98b8:	37 96       	adiw	r30, 0x07	; 7
    98ba:	86 e0       	ldi	r24, 0x06	; 6
    98bc:	01 90       	ld	r0, Z+
    98be:	0d 92       	st	X+, r0
    98c0:	81 50       	subi	r24, 0x01	; 1
    98c2:	e1 f7       	brne	.-8      	; 0x98bc <_Z9set_coordR7MOVDATA+0x13a>
      }      
      pos_ang (pata, A, m.duracion);           // es siempre absoluta, en este punto
    98c4:	f4 01       	movw	r30, r8
    98c6:	25 85       	ldd	r18, Z+13	; 0x0d
    98c8:	36 85       	ldd	r19, Z+14	; 0x0e
    98ca:	4b 81       	ldd	r20, Y+3	; 0x03
    98cc:	5c 81       	ldd	r21, Y+4	; 0x04
    98ce:	6d 81       	ldd	r22, Y+5	; 0x05
    98d0:	7e 81       	ldd	r23, Y+6	; 0x06
COORD3D pos_des [6];                                         // posición destino de cada pata  
char load [6][3];                                            // carga de los motores
volatile int sns_fuerza, sns_angulo;                             // sensores analógicos (de cuerdita)

void servo (byte pata, byte anillo, int angulo, int duracion) {                 
  ang_des [pata][anillo] = angulo;    
    98d2:	89 81       	ldd	r24, Y+1	; 0x01
    98d4:	9a 81       	ldd	r25, Y+2	; 0x02
    98d6:	f1 01       	movw	r30, r2
    98d8:	91 83       	std	Z+1, r25	; 0x01
    98da:	80 83       	st	Z, r24
  dur_des [pata][anillo] = duracion;
    98dc:	f2 01       	movw	r30, r4
    98de:	31 83       	std	Z+1, r19	; 0x01
    98e0:	20 83       	st	Z, r18
COORD3D pos_des [6];                                         // posición destino de cada pata  
char load [6][3];                                            // carga de los motores
volatile int sns_fuerza, sns_angulo;                             // sensores analógicos (de cuerdita)

void servo (byte pata, byte anillo, int angulo, int duracion) {                 
  ang_des [pata][anillo] = angulo;    
    98e2:	f1 01       	movw	r30, r2
    98e4:	53 83       	std	Z+3, r21	; 0x03
    98e6:	42 83       	std	Z+2, r20	; 0x02
  dur_des [pata][anillo] = duracion;
    98e8:	f2 01       	movw	r30, r4
    98ea:	33 83       	std	Z+3, r19	; 0x03
    98ec:	22 83       	std	Z+2, r18	; 0x02
COORD3D pos_des [6];                                         // posición destino de cada pata  
char load [6][3];                                            // carga de los motores
volatile int sns_fuerza, sns_angulo;                             // sensores analógicos (de cuerdita)

void servo (byte pata, byte anillo, int angulo, int duracion) {                 
  ang_des [pata][anillo] = angulo;    
    98ee:	f1 01       	movw	r30, r2
    98f0:	75 83       	std	Z+5, r23	; 0x05
    98f2:	64 83       	std	Z+4, r22	; 0x04
  dur_des [pata][anillo] = duracion;
    98f4:	f2 01       	movw	r30, r4
    98f6:	35 83       	std	Z+5, r19	; 0x05
    98f8:	24 83       	std	Z+4, r18	; 0x04
    98fa:	08 94       	sec
    98fc:	61 1c       	adc	r6, r1
    98fe:	71 1c       	adc	r7, r1
    9900:	86 e0       	ldi	r24, 0x06	; 6
    9902:	90 e0       	ldi	r25, 0x00	; 0
    9904:	28 0e       	add	r2, r24
    9906:	39 1e       	adc	r3, r25
    9908:	48 0e       	add	r4, r24
    990a:	59 1e       	adc	r5, r25
    990c:	ed 85       	ldd	r30, Y+13	; 0x0d
    990e:	fe 85       	ldd	r31, Y+14	; 0x0e
    9910:	3c 96       	adiw	r30, 0x0c	; 12
    9912:	fe 87       	std	Y+14, r31	; 0x0e
    9914:	ed 87       	std	Y+13, r30	; 0x0d
void set_coord (MOVDATA &m) {     
  // mueve x patas con coordenadas cartesianas
  // el byte "patas" indica en binario qué patas van
  ANGULOS A;
  if (m.absolute) {A = alfabetagama (m.coord);}
  for (byte pata=0; pata<6; pata++) {
    9916:	f6 e0       	ldi	r31, 0x06	; 6
    9918:	6f 16       	cp	r6, r31
    991a:	71 04       	cpc	r7, r1
    991c:	09 f0       	breq	.+2      	; 0x9920 <_Z9set_coordR7MOVDATA+0x19e>
    991e:	7f cf       	rjmp	.-258    	; 0x981e <_Z9set_coordR7MOVDATA+0x9c>
        A = alfabetagama (pos_des [pata]);
      }      
      pos_ang (pata, A, m.duracion);           // es siempre absoluta, en este punto
    }                   
  }
}
    9920:	60 96       	adiw	r28, 0x10	; 16
    9922:	0f b6       	in	r0, 0x3f	; 63
    9924:	f8 94       	cli
    9926:	de bf       	out	0x3e, r29	; 62
    9928:	0f be       	out	0x3f, r0	; 63
    992a:	cd bf       	out	0x3d, r28	; 61
    992c:	cf 91       	pop	r28
    992e:	df 91       	pop	r29
    9930:	1f 91       	pop	r17
    9932:	0f 91       	pop	r16
    9934:	ff 90       	pop	r15
    9936:	ef 90       	pop	r14
    9938:	df 90       	pop	r13
    993a:	cf 90       	pop	r12
    993c:	bf 90       	pop	r11
    993e:	af 90       	pop	r10
    9940:	9f 90       	pop	r9
    9942:	8f 90       	pop	r8
    9944:	7f 90       	pop	r7
    9946:	6f 90       	pop	r6
    9948:	5f 90       	pop	r5
    994a:	4f 90       	pop	r4
    994c:	3f 90       	pop	r3
    994e:	2f 90       	pop	r2
    9950:	08 95       	ret

00009952 <_ZN13RemoteControl11displayTextEv>:

void RemoteControl::displayText () {
    9952:	ef 92       	push	r14
    9954:	ff 92       	push	r15
    9956:	0f 93       	push	r16
    9958:	cf 93       	push	r28
    995a:	df 93       	push	r29
    995c:	ec 01       	movw	r28, r24
	if (!pantalla.isBusy()) {
    995e:	80 ec       	ldi	r24, 0xC0	; 192
    9960:	96 e0       	ldi	r25, 0x06	; 6
    9962:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    9966:	88 23       	and	r24, r24
    9968:	f9 f4       	brne	.+62     	; 0x99a8 <_ZN13RemoteControl11displayTextEv+0x56>
		pantalla.setColor (LISO, color1, color1);
    996a:	2c a9       	ldd	r18, Y+52	; 0x34
    996c:	80 ec       	ldi	r24, 0xC0	; 192
    996e:	96 e0       	ldi	r25, 0x06	; 6
    9970:	60 e0       	ldi	r22, 0x00	; 0
    9972:	42 2f       	mov	r20, r18
    9974:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <_ZN7Display8setColorEhhh>
		pantalla.scrollText (texto1.toCharArray(), 53, retardo*6);  // el retardo permite apretar varias veces un botón
    9978:	ce 01       	movw	r24, r28
    997a:	88 96       	adiw	r24, 0x28	; 40
    997c:	0e 94 ed 07 	call	0xfda	; 0xfda <_ZN6String11toCharArrayEv>
    9980:	bc 01       	movw	r22, r24
    9982:	8e a9       	ldd	r24, Y+54	; 0x36
    9984:	90 e0       	ldi	r25, 0x00	; 0
    9986:	9c 01       	movw	r18, r24
    9988:	22 0f       	add	r18, r18
    998a:	33 1f       	adc	r19, r19
    998c:	28 0f       	add	r18, r24
    998e:	39 1f       	adc	r19, r25
    9990:	22 0f       	add	r18, r18
    9992:	33 1f       	adc	r19, r19
    9994:	80 ec       	ldi	r24, 0xC0	; 192
    9996:	96 e0       	ldi	r25, 0x06	; 6
    9998:	45 e3       	ldi	r20, 0x35	; 53
    999a:	50 e0       	ldi	r21, 0x00	; 0
    999c:	01 e0       	ldi	r16, 0x01	; 1
    999e:	ee 24       	eor	r14, r14
    99a0:	ea 94       	dec	r14
    99a2:	fe 2c       	mov	r15, r14
    99a4:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <_ZN7Display10scrollTextEPKciici>
	}			                                             // harcodeo en la velocidad del scroll
	retardo = false;
    99a8:	1e aa       	std	Y+54, r1	; 0x36
    99aa:	df 91       	pop	r29
    99ac:	cf 91       	pop	r28
    99ae:	0f 91       	pop	r16
    99b0:	ff 90       	pop	r15
    99b2:	ef 90       	pop	r14
    99b4:	08 95       	ret

000099b6 <_ZN13RemoteControlC1Ev>:
#include "ax12.h"               // por el eterno bin2sign()


RemoteControl rc;                     // ojebto

RemoteControl::RemoteControl () {
    99b6:	cf 93       	push	r28
    99b8:	df 93       	push	r29
    99ba:	ec 01       	movw	r28, r24
    99bc:	88 96       	adiw	r24, 0x28	; 40
    99be:	61 e7       	ldi	r22, 0x71	; 113
    99c0:	72 e0       	ldi	r23, 0x02	; 2
    99c2:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    99c6:	ce 01       	movw	r24, r28
    99c8:	8e 96       	adiw	r24, 0x2e	; 46
    99ca:	61 e7       	ldi	r22, 0x71	; 113
    99cc:	72 e0       	ldi	r23, 0x02	; 2
    99ce:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
	velocidad = 8.0;
    99d2:	80 e0       	ldi	r24, 0x00	; 0
    99d4:	90 e0       	ldi	r25, 0x00	; 0
    99d6:	a0 e0       	ldi	r26, 0x00	; 0
    99d8:	b1 e4       	ldi	r27, 0x41	; 65
    99da:	88 83       	st	Y, r24
    99dc:	99 83       	std	Y+1, r25	; 0x01
    99de:	aa 83       	std	Y+2, r26	; 0x02
    99e0:	bb 83       	std	Y+3, r27	; 0x03
	marcha = 1;
    99e2:	81 e0       	ldi	r24, 0x01	; 1
    99e4:	8c 83       	std	Y+4, r24	; 0x04
	angulo_offset = 0;
    99e6:	80 e0       	ldi	r24, 0x00	; 0
    99e8:	90 e0       	ldi	r25, 0x00	; 0
    99ea:	a0 e0       	ldi	r26, 0x00	; 0
    99ec:	b0 e0       	ldi	r27, 0x00	; 0
    99ee:	89 87       	std	Y+9, r24	; 0x09
    99f0:	9a 87       	std	Y+10, r25	; 0x0a
    99f2:	ab 87       	std	Y+11, r26	; 0x0b
    99f4:	bc 87       	std	Y+12, r27	; 0x0c
	largo_pasos = 0;
    99f6:	8d 87       	std	Y+13, r24	; 0x0d
    99f8:	9e 87       	std	Y+14, r25	; 0x0e
    99fa:	af 87       	std	Y+15, r26	; 0x0f
    99fc:	b8 8b       	std	Y+16, r27	; 0x10
	desplazamiento = -1;                 // esto? podría cambiar?
    99fe:	80 e0       	ldi	r24, 0x00	; 0
    9a00:	90 e0       	ldi	r25, 0x00	; 0
    9a02:	a0 e8       	ldi	r26, 0x80	; 128
    9a04:	bf eb       	ldi	r27, 0xBF	; 191
    9a06:	8d 8b       	std	Y+21, r24	; 0x15
    9a08:	9e 8b       	std	Y+22, r25	; 0x16
    9a0a:	af 8b       	std	Y+23, r26	; 0x17
    9a0c:	b8 8f       	std	Y+24, r27	; 0x18
	centro_caminata = (COORD2D) {0, 0};
    9a0e:	de 01       	movw	r26, r28
    9a10:	59 96       	adiw	r26, 0x19	; 25
    9a12:	ef e9       	ldi	r30, 0x9F	; 159
    9a14:	f5 e0       	ldi	r31, 0x05	; 5
    9a16:	88 e0       	ldi	r24, 0x08	; 8
    9a18:	01 90       	ld	r0, Z+
    9a1a:	0d 92       	st	X+, r0
    9a1c:	81 50       	subi	r24, 0x01	; 1
    9a1e:	e1 f7       	brne	.-8      	; 0x9a18 <_ZN13RemoteControlC1Ev+0x62>
	inc = .5;                          // incremento para todas las variables
    9a20:	20 e0       	ldi	r18, 0x00	; 0
    9a22:	30 e0       	ldi	r19, 0x00	; 0
    9a24:	40 e0       	ldi	r20, 0x00	; 0
    9a26:	5f e3       	ldi	r21, 0x3F	; 63
    9a28:	29 a3       	std	Y+33, r18	; 0x21
    9a2a:	3a a3       	std	Y+34, r19	; 0x22
    9a2c:	4b a3       	std	Y+35, r20	; 0x23
    9a2e:	5c a3       	std	Y+36, r21	; 0x24
	color1 = RGB(2, 3, 2);
    9a30:	8e e2       	ldi	r24, 0x2E	; 46
    9a32:	8c ab       	std	Y+52, r24	; 0x34
	modo = REMOTE_OFF;                   // máquina de estados
    9a34:	1e a2       	std	Y+38, r1	; 0x26
	isMoving = false;
    9a36:	1d a2       	std	Y+37, r1	; 0x25
	retardo = false;
    9a38:	1e aa       	std	Y+54, r1	; 0x36
	step = .5;
    9a3a:	29 8b       	std	Y+17, r18	; 0x11
    9a3c:	3a 8b       	std	Y+18, r19	; 0x12
    9a3e:	4b 8b       	std	Y+19, r20	; 0x13
    9a40:	5c 8b       	std	Y+20, r21	; 0x14
	pagina = 0;
    9a42:	1f a2       	std	Y+39, r1	; 0x27
}	
    9a44:	df 91       	pop	r29
    9a46:	cf 91       	pop	r28
    9a48:	08 95       	ret

00009a4a <_Z41__static_initialization_and_destruction_0ii>:
	if (!pantalla.isBusy()) {
		pantalla.setColor (LISO, color1, color1);
		pantalla.scrollText (texto1.toCharArray(), 53, retardo*6);  // el retardo permite apretar varias veces un botón
	}			                                             // harcodeo en la velocidad del scroll
	retardo = false;
    9a4a:	81 30       	cpi	r24, 0x01	; 1
    9a4c:	91 05       	cpc	r25, r1
    9a4e:	41 f4       	brne	.+16     	; 0x9a60 <_Z41__static_initialization_and_destruction_0ii+0x16>
    9a50:	6f 5f       	subi	r22, 0xFF	; 255
    9a52:	7f 4f       	sbci	r23, 0xFF	; 255
    9a54:	91 f4       	brne	.+36     	; 0x9a7a <_Z41__static_initialization_and_destruction_0ii+0x30>
#include "Display.h"
#include "string.h"
#include "ax12.h"               // por el eterno bin2sign()


RemoteControl rc;                     // ojebto
    9a56:	8c e7       	ldi	r24, 0x7C	; 124
    9a58:	94 e1       	ldi	r25, 0x14	; 20
    9a5a:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <_ZN13RemoteControlC1Ev>
    9a5e:	08 95       	ret
    9a60:	89 2b       	or	r24, r25
    9a62:	59 f4       	brne	.+22     	; 0x9a7a <_Z41__static_initialization_and_destruction_0ii+0x30>
    9a64:	6f 5f       	subi	r22, 0xFF	; 255
    9a66:	7f 4f       	sbci	r23, 0xFF	; 255
    9a68:	41 f4       	brne	.+16     	; 0x9a7a <_Z41__static_initialization_and_destruction_0ii+0x30>

// modos del control remoto
enum {REMOTE_OFF, CAMINATAS1, CAMINATAS2, TRASLACIONES, ROTACIONES, EDITAR_CENTRO, EDITAR_POS, OSCILADORES1,  OSCILADORES2, OSCILADORES3, CONDUCTAS};


class RemoteControl {
    9a6a:	8a ea       	ldi	r24, 0xAA	; 170
    9a6c:	94 e1       	ldi	r25, 0x14	; 20
    9a6e:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    9a72:	84 ea       	ldi	r24, 0xA4	; 164
    9a74:	94 e1       	ldi	r25, 0x14	; 20
    9a76:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    9a7a:	08 95       	ret

00009a7c <_GLOBAL__D_rc>:
	if (!pantalla.isBusy()) {
		pantalla.setColor (LISO, color1, color1);
		pantalla.scrollText (texto1.toCharArray(), 53, retardo*6);  // el retardo permite apretar varias veces un botón
	}			                                             // harcodeo en la velocidad del scroll
	retardo = false;
    9a7c:	80 e0       	ldi	r24, 0x00	; 0
    9a7e:	90 e0       	ldi	r25, 0x00	; 0
    9a80:	6f ef       	ldi	r22, 0xFF	; 255
    9a82:	7f ef       	ldi	r23, 0xFF	; 255
    9a84:	0e 94 25 4d 	call	0x9a4a	; 0x9a4a <_Z41__static_initialization_and_destruction_0ii>
    9a88:	08 95       	ret

00009a8a <_GLOBAL__I_rc>:
    9a8a:	81 e0       	ldi	r24, 0x01	; 1
    9a8c:	90 e0       	ldi	r25, 0x00	; 0
    9a8e:	6f ef       	ldi	r22, 0xFF	; 255
    9a90:	7f ef       	ldi	r23, 0xFF	; 255
    9a92:	0e 94 25 4d 	call	0x9a4a	; 0x9a4a <_Z41__static_initialization_and_destruction_0ii>
    9a96:	08 95       	ret

00009a98 <_Zpl6StringRKS_>:

  private: 
	
};

inline String operator+( String lhs, const String &rhs )
    9a98:	0f 93       	push	r16
    9a9a:	1f 93       	push	r17
    9a9c:	18 2f       	mov	r17, r24
    9a9e:	09 2f       	mov	r16, r25
    9aa0:	cb 01       	movw	r24, r22
{
  return lhs += rhs;
    9aa2:	ba 01       	movw	r22, r20
    9aa4:	0e 94 24 08 	call	0x1048	; 0x1048 <_ZN6StringpLERKS_>
    9aa8:	bc 01       	movw	r22, r24
    9aaa:	81 2f       	mov	r24, r17
    9aac:	90 2f       	mov	r25, r16
    9aae:	0e 94 a0 08 	call	0x1140	; 0x1140 <_ZN6StringC1ERKS_>
}
    9ab2:	81 2f       	mov	r24, r17
    9ab4:	90 2f       	mov	r25, r16
    9ab6:	1f 91       	pop	r17
    9ab8:	0f 91       	pop	r16
    9aba:	08 95       	ret

00009abc <_ZN13RemoteControl11osciladoresEh>:
			
	}
	
}

void RemoteControl::osciladores (byte comando) {
    9abc:	6f 92       	push	r6
    9abe:	7f 92       	push	r7
    9ac0:	8f 92       	push	r8
    9ac2:	9f 92       	push	r9
    9ac4:	af 92       	push	r10
    9ac6:	bf 92       	push	r11
    9ac8:	cf 92       	push	r12
    9aca:	df 92       	push	r13
    9acc:	ef 92       	push	r14
    9ace:	ff 92       	push	r15
    9ad0:	0f 93       	push	r16
    9ad2:	1f 93       	push	r17
    9ad4:	df 93       	push	r29
    9ad6:	cf 93       	push	r28
    9ad8:	cd b7       	in	r28, 0x3d	; 61
    9ada:	de b7       	in	r29, 0x3e	; 62
    9adc:	c1 59       	subi	r28, 0x91	; 145
    9ade:	d0 40       	sbci	r29, 0x00	; 0
    9ae0:	0f b6       	in	r0, 0x3f	; 63
    9ae2:	f8 94       	cli
    9ae4:	de bf       	out	0x3e, r29	; 62
    9ae6:	0f be       	out	0x3f, r0	; 63
    9ae8:	cd bf       	out	0x3d, r28	; 61
    9aea:	3c 01       	movw	r6, r24
		
	static byte parametro = TRASL_X;
	byte sub_parametro;
	char increment = 0;
		
	switch (comando) {
    9aec:	6f 31       	cpi	r22, 0x1F	; 31
    9aee:	09 f4       	brne	.+2      	; 0x9af2 <_ZN13RemoteControl11osciladoresEh+0x36>
    9af0:	69 c1       	rjmp	.+722    	; 0x9dc4 <_ZN13RemoteControl11osciladoresEh+0x308>
    9af2:	60 32       	cpi	r22, 0x20	; 32
    9af4:	c8 f4       	brcc	.+50     	; 0x9b28 <_ZN13RemoteControl11osciladoresEh+0x6c>
    9af6:	63 31       	cpi	r22, 0x13	; 19
    9af8:	09 f4       	brne	.+2      	; 0x9afc <_ZN13RemoteControl11osciladoresEh+0x40>
    9afa:	60 c0       	rjmp	.+192    	; 0x9bbc <_ZN13RemoteControl11osciladoresEh+0x100>
    9afc:	64 31       	cpi	r22, 0x14	; 20
    9afe:	50 f4       	brcc	.+20     	; 0x9b14 <_ZN13RemoteControl11osciladoresEh+0x58>
    9b00:	61 30       	cpi	r22, 0x01	; 1
    9b02:	09 f4       	brne	.+2      	; 0x9b06 <_ZN13RemoteControl11osciladoresEh+0x4a>
    9b04:	f3 c0       	rjmp	.+486    	; 0x9cec <_ZN13RemoteControl11osciladoresEh+0x230>
    9b06:	61 30       	cpi	r22, 0x01	; 1
    9b08:	08 f4       	brcc	.+2      	; 0x9b0c <_ZN13RemoteControl11osciladoresEh+0x50>
    9b0a:	d6 c0       	rjmp	.+428    	; 0x9cb8 <_ZN13RemoteControl11osciladoresEh+0x1fc>
    9b0c:	60 31       	cpi	r22, 0x10	; 16
    9b0e:	09 f0       	breq	.+2      	; 0x9b12 <_ZN13RemoteControl11osciladoresEh+0x56>
    9b10:	2d c3       	rjmp	.+1626   	; 0xa16c <_ZN13RemoteControl11osciladoresEh+0x6b0>
    9b12:	61 c0       	rjmp	.+194    	; 0x9bd6 <_ZN13RemoteControl11osciladoresEh+0x11a>
    9b14:	6b 31       	cpi	r22, 0x1B	; 27
    9b16:	09 f4       	brne	.+2      	; 0x9b1a <_ZN13RemoteControl11osciladoresEh+0x5e>
    9b18:	3f c1       	rjmp	.+638    	; 0x9d98 <_ZN13RemoteControl11osciladoresEh+0x2dc>
    9b1a:	6e 31       	cpi	r22, 0x1E	; 30
    9b1c:	09 f4       	brne	.+2      	; 0x9b20 <_ZN13RemoteControl11osciladoresEh+0x64>
    9b1e:	28 c1       	rjmp	.+592    	; 0x9d70 <_ZN13RemoteControl11osciladoresEh+0x2b4>
    9b20:	6a 31       	cpi	r22, 0x1A	; 26
    9b22:	09 f0       	breq	.+2      	; 0x9b26 <_ZN13RemoteControl11osciladoresEh+0x6a>
    9b24:	23 c3       	rjmp	.+1606   	; 0xa16c <_ZN13RemoteControl11osciladoresEh+0x6b0>
    9b26:	10 c1       	rjmp	.+544    	; 0x9d48 <_ZN13RemoteControl11osciladoresEh+0x28c>
    9b28:	6c 35       	cpi	r22, 0x5C	; 92
    9b2a:	a1 f0       	breq	.+40     	; 0x9b54 <_ZN13RemoteControl11osciladoresEh+0x98>
    9b2c:	6d 35       	cpi	r22, 0x5D	; 93
    9b2e:	50 f4       	brcc	.+20     	; 0x9b44 <_ZN13RemoteControl11osciladoresEh+0x88>
    9b30:	6f 34       	cpi	r22, 0x4F	; 79
    9b32:	09 f4       	brne	.+2      	; 0x9b36 <_ZN13RemoteControl11osciladoresEh+0x7a>
    9b34:	5d c0       	rjmp	.+186    	; 0x9bf0 <_ZN13RemoteControl11osciladoresEh+0x134>
    9b36:	63 35       	cpi	r22, 0x53	; 83
    9b38:	09 f4       	brne	.+2      	; 0x9b3c <_ZN13RemoteControl11osciladoresEh+0x80>
    9b3a:	82 c0       	rjmp	.+260    	; 0x9c40 <_ZN13RemoteControl11osciladoresEh+0x184>
    9b3c:	6e 34       	cpi	r22, 0x4E	; 78
    9b3e:	09 f0       	breq	.+2      	; 0x9b42 <_ZN13RemoteControl11osciladoresEh+0x86>
    9b40:	15 c3       	rjmp	.+1578   	; 0xa16c <_ZN13RemoteControl11osciladoresEh+0x6b0>
    9b42:	6a c0       	rjmp	.+212    	; 0x9c18 <_ZN13RemoteControl11osciladoresEh+0x15c>
    9b44:	6e 35       	cpi	r22, 0x5E	; 94
    9b46:	f1 f0       	breq	.+60     	; 0x9b84 <_ZN13RemoteControl11osciladoresEh+0xc8>
    9b48:	6e 35       	cpi	r22, 0x5E	; 94
    9b4a:	50 f1       	brcs	.+84     	; 0x9ba0 <_ZN13RemoteControl11osciladoresEh+0xe4>
    9b4c:	6f 35       	cpi	r22, 0x5F	; 95
    9b4e:	09 f0       	breq	.+2      	; 0x9b52 <_ZN13RemoteControl11osciladoresEh+0x96>
    9b50:	0d c3       	rjmp	.+1562   	; 0xa16c <_ZN13RemoteControl11osciladoresEh+0x6b0>
    9b52:	0c c0       	rjmp	.+24     	; 0x9b6c <_ZN13RemoteControl11osciladoresEh+0xb0>
		case RC_UP:
			if (pantalla.isBusy()) {break;}
    9b54:	80 ec       	ldi	r24, 0xC0	; 192
    9b56:	96 e0       	ldi	r25, 0x06	; 6
    9b58:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    9b5c:	88 23       	and	r24, r24
    9b5e:	09 f0       	breq	.+2      	; 0x9b62 <_ZN13RemoteControl11osciladoresEh+0xa6>
    9b60:	05 c3       	rjmp	.+1546   	; 0xa16c <_ZN13RemoteControl11osciladoresEh+0x6b0>
			retardo = true;
    9b62:	81 e0       	ldi	r24, 0x01	; 1
    9b64:	f3 01       	movw	r30, r6
    9b66:	86 ab       	std	Z+54, r24	; 0x36
			parametro = TRASL_Z;
    9b68:	82 e0       	ldi	r24, 0x02	; 2
    9b6a:	3f c0       	rjmp	.+126    	; 0x9bea <_ZN13RemoteControl11osciladoresEh+0x12e>
			sub_parametro = AMP;
			increment = 1;
			break;
		
		case RC_DOWN:
			if (pantalla.isBusy()) {break;}
    9b6c:	80 ec       	ldi	r24, 0xC0	; 192
    9b6e:	96 e0       	ldi	r25, 0x06	; 6
    9b70:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    9b74:	88 23       	and	r24, r24
    9b76:	09 f0       	breq	.+2      	; 0x9b7a <_ZN13RemoteControl11osciladoresEh+0xbe>
    9b78:	f9 c2       	rjmp	.+1522   	; 0xa16c <_ZN13RemoteControl11osciladoresEh+0x6b0>
			retardo = true;
    9b7a:	81 e0       	ldi	r24, 0x01	; 1
    9b7c:	f3 01       	movw	r30, r6
    9b7e:	86 ab       	std	Z+54, r24	; 0x36
			parametro = TRASL_Z;
    9b80:	82 e0       	ldi	r24, 0x02	; 2
    9b82:	26 c0       	rjmp	.+76     	; 0x9bd0 <_ZN13RemoteControl11osciladoresEh+0x114>
			sub_parametro = AMP;
			increment = -1;
			break;
		
		case RC_RIGHT:
			if (pantalla.isBusy()) {break;}
    9b84:	80 ec       	ldi	r24, 0xC0	; 192
    9b86:	96 e0       	ldi	r25, 0x06	; 6
    9b88:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    9b8c:	88 23       	and	r24, r24
    9b8e:	09 f0       	breq	.+2      	; 0x9b92 <_ZN13RemoteControl11osciladoresEh+0xd6>
    9b90:	ed c2       	rjmp	.+1498   	; 0xa16c <_ZN13RemoteControl11osciladoresEh+0x6b0>
			retardo = true;
    9b92:	81 e0       	ldi	r24, 0x01	; 1
    9b94:	f3 01       	movw	r30, r6
    9b96:	86 ab       	std	Z+54, r24	; 0x36
			parametro = TRASL_X;
    9b98:	10 92 b3 14 	sts	0x14B3, r1
    9b9c:	ee 24       	eor	r14, r14
    9b9e:	0f c1       	rjmp	.+542    	; 0x9dbe <_ZN13RemoteControl11osciladoresEh+0x302>
			sub_parametro = AMP;
			increment = 1;
			break;
	
		case RC_LEFT:
			if (pantalla.isBusy()) {break;}
    9ba0:	80 ec       	ldi	r24, 0xC0	; 192
    9ba2:	96 e0       	ldi	r25, 0x06	; 6
    9ba4:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    9ba8:	88 23       	and	r24, r24
    9baa:	09 f0       	breq	.+2      	; 0x9bae <_ZN13RemoteControl11osciladoresEh+0xf2>
    9bac:	df c2       	rjmp	.+1470   	; 0xa16c <_ZN13RemoteControl11osciladoresEh+0x6b0>
			retardo = true;
    9bae:	81 e0       	ldi	r24, 0x01	; 1
    9bb0:	f3 01       	movw	r30, r6
    9bb2:	86 ab       	std	Z+54, r24	; 0x36
			parametro = TRASL_X;
    9bb4:	10 92 b3 14 	sts	0x14B3, r1
    9bb8:	ee 24       	eor	r14, r14
    9bba:	17 c1       	rjmp	.+558    	; 0x9dea <_ZN13RemoteControl11osciladoresEh+0x32e>
			sub_parametro = AMP;
			increment = -1;
			break;

		case RC_MTS:
			if (pantalla.isBusy()) {break;}
    9bbc:	80 ec       	ldi	r24, 0xC0	; 192
    9bbe:	96 e0       	ldi	r25, 0x06	; 6
    9bc0:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    9bc4:	88 23       	and	r24, r24
    9bc6:	09 f0       	breq	.+2      	; 0x9bca <_ZN13RemoteControl11osciladoresEh+0x10e>
    9bc8:	d1 c2       	rjmp	.+1442   	; 0xa16c <_ZN13RemoteControl11osciladoresEh+0x6b0>
			retardo = true;
    9bca:	81 e0       	ldi	r24, 0x01	; 1
    9bcc:	f3 01       	movw	r30, r6
    9bce:	86 ab       	std	Z+54, r24	; 0x36
			parametro = TRASL_Y;
    9bd0:	80 93 b3 14 	sts	0x14B3, r24
    9bd4:	f1 cf       	rjmp	.-30     	; 0x9bb8 <_ZN13RemoteControl11osciladoresEh+0xfc>
			sub_parametro = AMP;
			increment = -1;
			break;
			
		case RC_MENU:
			if (pantalla.isBusy()) {break;}
    9bd6:	80 ec       	ldi	r24, 0xC0	; 192
    9bd8:	96 e0       	ldi	r25, 0x06	; 6
    9bda:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    9bde:	88 23       	and	r24, r24
    9be0:	09 f0       	breq	.+2      	; 0x9be4 <_ZN13RemoteControl11osciladoresEh+0x128>
    9be2:	c4 c2       	rjmp	.+1416   	; 0xa16c <_ZN13RemoteControl11osciladoresEh+0x6b0>
			retardo = true;
    9be4:	81 e0       	ldi	r24, 0x01	; 1
    9be6:	f3 01       	movw	r30, r6
    9be8:	86 ab       	std	Z+54, r24	; 0x36
			parametro = TRASL_Y;
    9bea:	80 93 b3 14 	sts	0x14B3, r24
    9bee:	d6 cf       	rjmp	.-84     	; 0x9b9c <_ZN13RemoteControl11osciladoresEh+0xe0>
			sub_parametro = AMP;
			increment = 1;
			break;
			
		case RC_CCTTX:
			if (pantalla.isBusy()) {break;}
    9bf0:	80 ec       	ldi	r24, 0xC0	; 192
    9bf2:	96 e0       	ldi	r25, 0x06	; 6
    9bf4:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    9bf8:	88 23       	and	r24, r24
    9bfa:	09 f0       	breq	.+2      	; 0x9bfe <_ZN13RemoteControl11osciladoresEh+0x142>
    9bfc:	b7 c2       	rjmp	.+1390   	; 0xa16c <_ZN13RemoteControl11osciladoresEh+0x6b0>
			retardo = true;
    9bfe:	81 e0       	ldi	r24, 0x01	; 1
    9c00:	f3 01       	movw	r30, r6
    9c02:	86 ab       	std	Z+54, r24	; 0x36
			parametro %= 3;
    9c04:	80 91 b3 14 	lds	r24, 0x14B3
    9c08:	63 e0       	ldi	r22, 0x03	; 3
    9c0a:	0e 94 ff 80 	call	0x101fe	; 0x101fe <__udivmodqi4>
    9c0e:	90 93 b3 14 	sts	0x14B3, r25
    9c12:	b3 e0       	ldi	r27, 0x03	; 3
    9c14:	eb 2e       	mov	r14, r27
    9c16:	e9 c0       	rjmp	.+466    	; 0x9dea <_ZN13RemoteControl11osciladoresEh+0x32e>
			sub_parametro = BROWN;
			increment = -1;
			break;
			
		case RC_EXIT:
			if (pantalla.isBusy()) {break;}
    9c18:	80 ec       	ldi	r24, 0xC0	; 192
    9c1a:	96 e0       	ldi	r25, 0x06	; 6
    9c1c:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    9c20:	88 23       	and	r24, r24
    9c22:	09 f0       	breq	.+2      	; 0x9c26 <_ZN13RemoteControl11osciladoresEh+0x16a>
    9c24:	a3 c2       	rjmp	.+1350   	; 0xa16c <_ZN13RemoteControl11osciladoresEh+0x6b0>
			retardo = true;
    9c26:	81 e0       	ldi	r24, 0x01	; 1
    9c28:	f3 01       	movw	r30, r6
    9c2a:	86 ab       	std	Z+54, r24	; 0x36
			parametro %= 3;
    9c2c:	80 91 b3 14 	lds	r24, 0x14B3
    9c30:	63 e0       	ldi	r22, 0x03	; 3
    9c32:	0e 94 ff 80 	call	0x101fe	; 0x101fe <__udivmodqi4>
    9c36:	90 93 b3 14 	sts	0x14B3, r25
    9c3a:	a3 e0       	ldi	r26, 0x03	; 3
    9c3c:	ea 2e       	mov	r14, r26
    9c3e:	bf c0       	rjmp	.+382    	; 0x9dbe <_ZN13RemoteControl11osciladoresEh+0x302>
			sub_parametro = BROWN;
			increment = 1;
			break;
			
		case RC_ENTER1:
			if (!isMoving) {
    9c40:	fc 01       	movw	r30, r24
    9c42:	85 a1       	ldd	r24, Z+37	; 0x25
    9c44:	f8 e2       	ldi	r31, 0x28	; 40
    9c46:	cf 2e       	mov	r12, r31
    9c48:	d1 2c       	mov	r13, r1
    9c4a:	c6 0c       	add	r12, r6
    9c4c:	d7 1c       	adc	r13, r7
    9c4e:	88 23       	and	r24, r24
    9c50:	e9 f4       	brne	.+58     	; 0x9c8c <_ZN13RemoteControl11osciladoresEh+0x1d0>
				texto1 = "PLAY";
    9c52:	8e 01       	movw	r16, r28
    9c54:	0f 5f       	subi	r16, 0xFF	; 255
    9c56:	1f 4f       	sbci	r17, 0xFF	; 255
    9c58:	c8 01       	movw	r24, r16
    9c5a:	62 e7       	ldi	r22, 0x72	; 114
    9c5c:	72 e0       	ldi	r23, 0x02	; 2
    9c5e:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    9c62:	c6 01       	movw	r24, r12
    9c64:	b8 01       	movw	r22, r16
    9c66:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    9c6a:	c8 01       	movw	r24, r16
    9c6c:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
				mov.oscilador (1, 32767);
    9c70:	81 ee       	ldi	r24, 0xE1	; 225
    9c72:	90 e1       	ldi	r25, 0x10	; 16
    9c74:	40 e0       	ldi	r20, 0x00	; 0
    9c76:	50 e0       	ldi	r21, 0x00	; 0
    9c78:	60 e8       	ldi	r22, 0x80	; 128
    9c7a:	7f e3       	ldi	r23, 0x3F	; 63
    9c7c:	2f ef       	ldi	r18, 0xFF	; 255
    9c7e:	3f e7       	ldi	r19, 0x7F	; 127
    9c80:	0e 94 72 23 	call	0x46e4	; 0x46e4 <_ZN10Movimiento9osciladorEfi>
				isMoving = true;
    9c84:	81 e0       	ldi	r24, 0x01	; 1
    9c86:	f3 01       	movw	r30, r6
    9c88:	85 a3       	std	Z+37, r24	; 0x25
    9c8a:	70 c2       	rjmp	.+1248   	; 0xa16c <_ZN13RemoteControl11osciladoresEh+0x6b0>
			} else {
				texto1 = "STOP";
    9c8c:	8e 01       	movw	r16, r28
    9c8e:	09 5f       	subi	r16, 0xF9	; 249
    9c90:	1f 4f       	sbci	r17, 0xFF	; 255
    9c92:	c8 01       	movw	r24, r16
    9c94:	67 e7       	ldi	r22, 0x77	; 119
    9c96:	72 e0       	ldi	r23, 0x02	; 2
    9c98:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    9c9c:	c6 01       	movw	r24, r12
    9c9e:	b8 01       	movw	r22, r16
    9ca0:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    9ca4:	c8 01       	movw	r24, r16
    9ca6:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
				mov.stop();
    9caa:	81 ee       	ldi	r24, 0xE1	; 225
    9cac:	90 e1       	ldi	r25, 0x10	; 16
    9cae:	0e 94 68 28 	call	0x50d0	; 0x50d0 <_ZN10Movimiento4stopEv>
				isMoving = false;
    9cb2:	f3 01       	movw	r30, r6
    9cb4:	15 a2       	std	Z+37, r1	; 0x25
    9cb6:	5a c2       	rjmp	.+1204   	; 0xa16c <_ZN13RemoteControl11osciladoresEh+0x6b0>
			break;

		/* esto es más provisorio */
		////////////////////////////
		case 0:
			if (!isMoving) {
    9cb8:	fc 01       	movw	r30, r24
    9cba:	85 a1       	ldd	r24, Z+37	; 0x25
    9cbc:	88 23       	and	r24, r24
    9cbe:	09 f0       	breq	.+2      	; 0x9cc2 <_ZN13RemoteControl11osciladoresEh+0x206>
    9cc0:	55 c2       	rjmp	.+1194   	; 0xa16c <_ZN13RemoteControl11osciladoresEh+0x6b0>
				texto1 = "Reset";
    9cc2:	8e 01       	movw	r16, r28
    9cc4:	03 5f       	subi	r16, 0xF3	; 243
    9cc6:	1f 4f       	sbci	r17, 0xFF	; 255
    9cc8:	c8 01       	movw	r24, r16
    9cca:	6c e7       	ldi	r22, 0x7C	; 124
    9ccc:	72 e0       	ldi	r23, 0x02	; 2
    9cce:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    9cd2:	c3 01       	movw	r24, r6
    9cd4:	88 96       	adiw	r24, 0x28	; 40
    9cd6:	b8 01       	movw	r22, r16
    9cd8:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    9cdc:	c8 01       	movw	r24, r16
    9cde:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
				mov.osc_reset ();
    9ce2:	81 ee       	ldi	r24, 0xE1	; 225
    9ce4:	90 e1       	ldi	r25, 0x10	; 16
    9ce6:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <_ZN10Movimiento9osc_resetEv>
    9cea:	40 c2       	rjmp	.+1152   	; 0xa16c <_ZN13RemoteControl11osciladoresEh+0x6b0>
			} 
			break;
		
		case 1:
			if (!isMoving) {
    9cec:	fc 01       	movw	r30, r24
    9cee:	85 a1       	ldd	r24, Z+37	; 0x25
    9cf0:	88 23       	and	r24, r24
    9cf2:	09 f0       	breq	.+2      	; 0x9cf6 <_ZN13RemoteControl11osciladoresEh+0x23a>
    9cf4:	3b c2       	rjmp	.+1142   	; 0xa16c <_ZN13RemoteControl11osciladoresEh+0x6b0>
				texto1 = "Random";    
    9cf6:	8e 01       	movw	r16, r28
    9cf8:	0d 5e       	subi	r16, 0xED	; 237
    9cfa:	1f 4f       	sbci	r17, 0xFF	; 255
    9cfc:	c8 01       	movw	r24, r16
    9cfe:	62 e8       	ldi	r22, 0x82	; 130
    9d00:	72 e0       	ldi	r23, 0x02	; 2
    9d02:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    9d06:	c3 01       	movw	r24, r6
    9d08:	88 96       	adiw	r24, 0x28	; 40
    9d0a:	b8 01       	movw	r22, r16
    9d0c:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    9d10:	c8 01       	movw	r24, r16
    9d12:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
				mov.osc_randomize (3, 1);      // en el futuro va a haber randomize sólo traslación, sólo rotación, etc
    9d16:	81 ee       	ldi	r24, 0xE1	; 225
    9d18:	90 e1       	ldi	r25, 0x10	; 16
    9d1a:	40 e0       	ldi	r20, 0x00	; 0
    9d1c:	50 e0       	ldi	r21, 0x00	; 0
    9d1e:	60 e4       	ldi	r22, 0x40	; 64
    9d20:	70 e4       	ldi	r23, 0x40	; 64
    9d22:	00 e0       	ldi	r16, 0x00	; 0
    9d24:	10 e0       	ldi	r17, 0x00	; 0
    9d26:	20 e8       	ldi	r18, 0x80	; 128
    9d28:	3f e3       	ldi	r19, 0x3F	; 63
    9d2a:	e5 e0       	ldi	r30, 0x05	; 5
    9d2c:	ee 2e       	mov	r14, r30
    9d2e:	0f 2e       	mov	r0, r31
    9d30:	f0 e0       	ldi	r31, 0x00	; 0
    9d32:	af 2e       	mov	r10, r31
    9d34:	f0 e0       	ldi	r31, 0x00	; 0
    9d36:	bf 2e       	mov	r11, r31
    9d38:	f0 e0       	ldi	r31, 0x00	; 0
    9d3a:	cf 2e       	mov	r12, r31
    9d3c:	f0 e4       	ldi	r31, 0x40	; 64
    9d3e:	df 2e       	mov	r13, r31
    9d40:	f0 2d       	mov	r31, r0
    9d42:	0e 94 94 22 	call	0x4528	; 0x4528 <_ZN10Movimiento13osc_randomizeEffhf>
    9d46:	12 c2       	rjmp	.+1060   	; 0xa16c <_ZN13RemoteControl11osciladoresEh+0x6b0>
			break;
		/////////////////////////////	
		/* termina zona de números */	
			
		case RC_CH_UP:
			if (pantalla.isBusy()) {break;}
    9d48:	80 ec       	ldi	r24, 0xC0	; 192
    9d4a:	96 e0       	ldi	r25, 0x06	; 6
    9d4c:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    9d50:	88 23       	and	r24, r24
    9d52:	09 f0       	breq	.+2      	; 0x9d56 <_ZN13RemoteControl11osciladoresEh+0x29a>
    9d54:	0b c2       	rjmp	.+1046   	; 0xa16c <_ZN13RemoteControl11osciladoresEh+0x6b0>
			retardo = true;
    9d56:	81 e0       	ldi	r24, 0x01	; 1
    9d58:	f3 01       	movw	r30, r6
    9d5a:	86 ab       	std	Z+54, r24	; 0x36
			parametro %= 3;
    9d5c:	80 91 b3 14 	lds	r24, 0x14B3
    9d60:	63 e0       	ldi	r22, 0x03	; 3
    9d62:	0e 94 ff 80 	call	0x101fe	; 0x101fe <__udivmodqi4>
    9d66:	90 93 b3 14 	sts	0x14B3, r25
    9d6a:	52 e0       	ldi	r21, 0x02	; 2
    9d6c:	e5 2e       	mov	r14, r21
    9d6e:	27 c0       	rjmp	.+78     	; 0x9dbe <_ZN13RemoteControl11osciladoresEh+0x302>
			sub_parametro = PHASE;
			increment = 1;
			break;
			
		case RC_CH_DN:
			if (pantalla.isBusy()) {break;}
    9d70:	80 ec       	ldi	r24, 0xC0	; 192
    9d72:	96 e0       	ldi	r25, 0x06	; 6
    9d74:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    9d78:	88 23       	and	r24, r24
    9d7a:	09 f0       	breq	.+2      	; 0x9d7e <_ZN13RemoteControl11osciladoresEh+0x2c2>
    9d7c:	f7 c1       	rjmp	.+1006   	; 0xa16c <_ZN13RemoteControl11osciladoresEh+0x6b0>
			retardo = true;
    9d7e:	81 e0       	ldi	r24, 0x01	; 1
    9d80:	f3 01       	movw	r30, r6
    9d82:	86 ab       	std	Z+54, r24	; 0x36
			parametro %= 3;
    9d84:	80 91 b3 14 	lds	r24, 0x14B3
    9d88:	63 e0       	ldi	r22, 0x03	; 3
    9d8a:	0e 94 ff 80 	call	0x101fe	; 0x101fe <__udivmodqi4>
    9d8e:	90 93 b3 14 	sts	0x14B3, r25
    9d92:	42 e0       	ldi	r20, 0x02	; 2
    9d94:	e4 2e       	mov	r14, r20
    9d96:	29 c0       	rjmp	.+82     	; 0x9dea <_ZN13RemoteControl11osciladoresEh+0x32e>
			sub_parametro = PHASE;
			increment = -1;
			break;
		
		case RC_VOL_UP:
			if (pantalla.isBusy()) {break;}
    9d98:	80 ec       	ldi	r24, 0xC0	; 192
    9d9a:	96 e0       	ldi	r25, 0x06	; 6
    9d9c:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    9da0:	88 23       	and	r24, r24
    9da2:	09 f0       	breq	.+2      	; 0x9da6 <_ZN13RemoteControl11osciladoresEh+0x2ea>
    9da4:	e3 c1       	rjmp	.+966    	; 0xa16c <_ZN13RemoteControl11osciladoresEh+0x6b0>
			retardo = true;
    9da6:	81 e0       	ldi	r24, 0x01	; 1
    9da8:	f3 01       	movw	r30, r6
    9daa:	86 ab       	std	Z+54, r24	; 0x36
			parametro %= 3;
    9dac:	80 91 b3 14 	lds	r24, 0x14B3
    9db0:	63 e0       	ldi	r22, 0x03	; 3
    9db2:	0e 94 ff 80 	call	0x101fe	; 0x101fe <__udivmodqi4>
    9db6:	90 93 b3 14 	sts	0x14B3, r25
    9dba:	ee 24       	eor	r14, r14
    9dbc:	e3 94       	inc	r14
    9dbe:	88 24       	eor	r8, r8
    9dc0:	83 94       	inc	r8
    9dc2:	b7 c1       	rjmp	.+878    	; 0xa132 <_ZN13RemoteControl11osciladoresEh+0x676>
			sub_parametro = FREQ;
			increment = 1;
			break;
			
		case RC_VOL_DN:
			if (pantalla.isBusy()) {break;}
    9dc4:	80 ec       	ldi	r24, 0xC0	; 192
    9dc6:	96 e0       	ldi	r25, 0x06	; 6
    9dc8:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    9dcc:	88 23       	and	r24, r24
    9dce:	09 f0       	breq	.+2      	; 0x9dd2 <_ZN13RemoteControl11osciladoresEh+0x316>
    9dd0:	cd c1       	rjmp	.+922    	; 0xa16c <_ZN13RemoteControl11osciladoresEh+0x6b0>
			retardo = true;
    9dd2:	81 e0       	ldi	r24, 0x01	; 1
    9dd4:	f3 01       	movw	r30, r6
    9dd6:	86 ab       	std	Z+54, r24	; 0x36
			parametro %= 3;
    9dd8:	80 91 b3 14 	lds	r24, 0x14B3
    9ddc:	63 e0       	ldi	r22, 0x03	; 3
    9dde:	0e 94 ff 80 	call	0x101fe	; 0x101fe <__udivmodqi4>
    9de2:	90 93 b3 14 	sts	0x14B3, r25
    9de6:	ee 24       	eor	r14, r14
    9de8:	e3 94       	inc	r14
    9dea:	88 24       	eor	r8, r8
    9dec:	8a 94       	dec	r8
    9dee:	a1 c1       	rjmp	.+834    	; 0xa132 <_ZN13RemoteControl11osciladoresEh+0x676>
	if (increment != 0) {
		float value = increment * inc;
		switch (modo) {
			case OSCILADORES1:
				parametro += TRASL_X;
				texto1 = "T.";
    9df0:	8e 01       	movw	r16, r28
    9df2:	07 5e       	subi	r16, 0xE7	; 231
    9df4:	1f 4f       	sbci	r17, 0xFF	; 255
    9df6:	c8 01       	movw	r24, r16
    9df8:	69 e8       	ldi	r22, 0x89	; 137
    9dfa:	72 e0       	ldi	r23, 0x02	; 2
    9dfc:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    9e00:	c3 01       	movw	r24, r6
    9e02:	88 96       	adiw	r24, 0x28	; 40
    9e04:	b8 01       	movw	r22, r16
    9e06:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    9e0a:	c8 01       	movw	r24, r16
    9e0c:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    9e10:	40 c0       	rjmp	.+128    	; 0x9e92 <_ZN13RemoteControl11osciladoresEh+0x3d6>
				break;
			case OSCILADORES2:
				parametro += CENTRO_X;
    9e12:	80 91 b3 14 	lds	r24, 0x14B3
    9e16:	8d 5f       	subi	r24, 0xFD	; 253
    9e18:	80 93 b3 14 	sts	0x14B3, r24
				texto1 = "C.";
    9e1c:	8e 01       	movw	r16, r28
    9e1e:	01 5e       	subi	r16, 0xE1	; 225
    9e20:	1f 4f       	sbci	r17, 0xFF	; 255
    9e22:	c8 01       	movw	r24, r16
    9e24:	6c e8       	ldi	r22, 0x8C	; 140
    9e26:	72 e0       	ldi	r23, 0x02	; 2
    9e28:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    9e2c:	c3 01       	movw	r24, r6
    9e2e:	88 96       	adiw	r24, 0x28	; 40
    9e30:	b8 01       	movw	r22, r16
    9e32:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    9e36:	c8 01       	movw	r24, r16
    9e38:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
				if (sub_parametro == AMP) {value *= 2;}         // ?
    9e3c:	ee 20       	and	r14, r14
    9e3e:	49 f5       	brne	.+82     	; 0x9e92 <_ZN13RemoteControl11osciladoresEh+0x3d6>
    9e40:	c6 01       	movw	r24, r12
    9e42:	b5 01       	movw	r22, r10
    9e44:	a6 01       	movw	r20, r12
    9e46:	95 01       	movw	r18, r10
    9e48:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    9e4c:	20 c0       	rjmp	.+64     	; 0x9e8e <_ZN13RemoteControl11osciladoresEh+0x3d2>
				break;
			case OSCILADORES3:
				parametro = 2-parametro;   // esto invierte los ejes X y Z 
				parametro += ROT_X;
    9e4e:	80 91 b3 14 	lds	r24, 0x14B3
    9e52:	81 95       	neg	r24
    9e54:	88 5f       	subi	r24, 0xF8	; 248
    9e56:	80 93 b3 14 	sts	0x14B3, r24
				texto1 = "R.";
    9e5a:	8e 01       	movw	r16, r28
    9e5c:	0b 5d       	subi	r16, 0xDB	; 219
    9e5e:	1f 4f       	sbci	r17, 0xFF	; 255
    9e60:	c8 01       	movw	r24, r16
    9e62:	6f e8       	ldi	r22, 0x8F	; 143
    9e64:	72 e0       	ldi	r23, 0x02	; 2
    9e66:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    9e6a:	c3 01       	movw	r24, r6
    9e6c:	88 96       	adiw	r24, 0x28	; 40
    9e6e:	b8 01       	movw	r22, r16
    9e70:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    9e74:	c8 01       	movw	r24, r16
    9e76:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
				if (sub_parametro == AMP) {value /= 15;}         // antes era * .1 (el 15 podría ser un #define, ya que aparece muchas veces)
    9e7a:	ee 20       	and	r14, r14
    9e7c:	51 f4       	brne	.+20     	; 0x9e92 <_ZN13RemoteControl11osciladoresEh+0x3d6>
    9e7e:	c6 01       	movw	r24, r12
    9e80:	b5 01       	movw	r22, r10
    9e82:	20 e0       	ldi	r18, 0x00	; 0
    9e84:	30 e0       	ldi	r19, 0x00	; 0
    9e86:	40 e7       	ldi	r20, 0x70	; 112
    9e88:	51 e4       	ldi	r21, 0x41	; 65
    9e8a:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    9e8e:	5b 01       	movw	r10, r22
    9e90:	6c 01       	movw	r12, r24
				break;
		}
		switch (parametro % 3) {
    9e92:	80 91 b3 14 	lds	r24, 0x14B3
    9e96:	63 e0       	ldi	r22, 0x03	; 3
    9e98:	0e 94 ff 80 	call	0x101fe	; 0x101fe <__udivmodqi4>
    9e9c:	91 30       	cpi	r25, 0x01	; 1
    9e9e:	61 f0       	breq	.+24     	; 0x9eb8 <_ZN13RemoteControl11osciladoresEh+0x3fc>
    9ea0:	91 30       	cpi	r25, 0x01	; 1
    9ea2:	18 f0       	brcs	.+6      	; 0x9eaa <_ZN13RemoteControl11osciladoresEh+0x3ee>
    9ea4:	92 30       	cpi	r25, 0x02	; 2
    9ea6:	f9 f4       	brne	.+62     	; 0x9ee6 <_ZN13RemoteControl11osciladoresEh+0x42a>
    9ea8:	0e c0       	rjmp	.+28     	; 0x9ec6 <_ZN13RemoteControl11osciladoresEh+0x40a>
			case TRASL_X: texto1 += "X."; break;
    9eaa:	8e 01       	movw	r16, r28
    9eac:	05 5d       	subi	r16, 0xD5	; 213
    9eae:	1f 4f       	sbci	r17, 0xFF	; 255
    9eb0:	c8 01       	movw	r24, r16
    9eb2:	62 e9       	ldi	r22, 0x92	; 146
    9eb4:	72 e0       	ldi	r23, 0x02	; 2
    9eb6:	0d c0       	rjmp	.+26     	; 0x9ed2 <_ZN13RemoteControl11osciladoresEh+0x416>
			case TRASL_Y: texto1 += "Y."; break;
    9eb8:	8e 01       	movw	r16, r28
    9eba:	0f 5c       	subi	r16, 0xCF	; 207
    9ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    9ebe:	c8 01       	movw	r24, r16
    9ec0:	65 e9       	ldi	r22, 0x95	; 149
    9ec2:	72 e0       	ldi	r23, 0x02	; 2
    9ec4:	06 c0       	rjmp	.+12     	; 0x9ed2 <_ZN13RemoteControl11osciladoresEh+0x416>
			case TRASL_Z: texto1 += "Z."; break;
    9ec6:	8e 01       	movw	r16, r28
    9ec8:	09 5c       	subi	r16, 0xC9	; 201
    9eca:	1f 4f       	sbci	r17, 0xFF	; 255
    9ecc:	c8 01       	movw	r24, r16
    9ece:	68 e9       	ldi	r22, 0x98	; 152
    9ed0:	72 e0       	ldi	r23, 0x02	; 2
    9ed2:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    9ed6:	c3 01       	movw	r24, r6
    9ed8:	88 96       	adiw	r24, 0x28	; 40
    9eda:	b8 01       	movw	r22, r16
    9edc:	0e 94 24 08 	call	0x1048	; 0x1048 <_ZN6StringpLERKS_>
    9ee0:	c8 01       	movw	r24, r16
    9ee2:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
		}
		OSCILATOR osc = mov.get_oscilador (parametro);
    9ee6:	8e 01       	movw	r16, r28
    9ee8:	0b 57       	subi	r16, 0x7B	; 123
    9eea:	1f 4f       	sbci	r17, 0xFF	; 255
    9eec:	c8 01       	movw	r24, r16
    9eee:	61 ee       	ldi	r22, 0xE1	; 225
    9ef0:	70 e1       	ldi	r23, 0x10	; 16
    9ef2:	40 91 b3 14 	lds	r20, 0x14B3
    9ef6:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <_ZN10Movimiento13get_osciladorEh>
		switch (sub_parametro) {
    9efa:	f1 e0       	ldi	r31, 0x01	; 1
    9efc:	ef 16       	cp	r14, r31
    9efe:	09 f4       	brne	.+2      	; 0x9f02 <_ZN13RemoteControl11osciladoresEh+0x446>
    9f00:	4d c0       	rjmp	.+154    	; 0x9f9c <_ZN13RemoteControl11osciladoresEh+0x4e0>
    9f02:	ef 16       	cp	r14, r31
    9f04:	48 f0       	brcs	.+18     	; 0x9f18 <_ZN13RemoteControl11osciladoresEh+0x45c>
    9f06:	82 e0       	ldi	r24, 0x02	; 2
    9f08:	e8 16       	cp	r14, r24
    9f0a:	09 f4       	brne	.+2      	; 0x9f0e <_ZN13RemoteControl11osciladoresEh+0x452>
    9f0c:	8f c0       	rjmp	.+286    	; 0xa02c <_ZN13RemoteControl11osciladoresEh+0x570>
    9f0e:	e3 e0       	ldi	r30, 0x03	; 3
    9f10:	ee 16       	cp	r14, r30
    9f12:	09 f0       	breq	.+2      	; 0x9f16 <_ZN13RemoteControl11osciladoresEh+0x45a>
    9f14:	2b c1       	rjmp	.+598    	; 0xa16c <_ZN13RemoteControl11osciladoresEh+0x6b0>
    9f16:	d2 c0       	rjmp	.+420    	; 0xa0bc <_ZN13RemoteControl11osciladoresEh+0x600>
			case AMP: 
				value += osc.amp;
    9f18:	c6 01       	movw	r24, r12
    9f1a:	b5 01       	movw	r22, r10
    9f1c:	f8 01       	movw	r30, r16
    9f1e:	20 81       	ld	r18, Z
    9f20:	31 81       	ldd	r19, Z+1	; 0x01
    9f22:	42 81       	ldd	r20, Z+2	; 0x02
    9f24:	53 81       	ldd	r21, Z+3	; 0x03
    9f26:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    9f2a:	7b 01       	movw	r14, r22
    9f2c:	8c 01       	movw	r16, r24
				texto1 += ("amp " + float2string (value)); 
    9f2e:	33 e4       	ldi	r19, 0x43	; 67
    9f30:	83 2e       	mov	r8, r19
    9f32:	91 2c       	mov	r9, r1
    9f34:	8c 0e       	add	r8, r28
    9f36:	9d 1e       	adc	r9, r29
    9f38:	c4 01       	movw	r24, r8
    9f3a:	6b e9       	ldi	r22, 0x9B	; 155
    9f3c:	72 e0       	ldi	r23, 0x02	; 2
    9f3e:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    9f42:	2d e3       	ldi	r18, 0x3D	; 61
    9f44:	a2 2e       	mov	r10, r18
    9f46:	b1 2c       	mov	r11, r1
    9f48:	ac 0e       	add	r10, r28
    9f4a:	bd 1e       	adc	r11, r29
    9f4c:	c5 01       	movw	r24, r10
    9f4e:	a7 01       	movw	r20, r14
    9f50:	b8 01       	movw	r22, r16
    9f52:	0e 94 51 67 	call	0xcea2	; 0xcea2 <_Z12float2stringf>
    9f56:	99 e4       	ldi	r25, 0x49	; 73
    9f58:	c9 2e       	mov	r12, r25
    9f5a:	d1 2c       	mov	r13, r1
    9f5c:	cc 0e       	add	r12, r28
    9f5e:	dd 1e       	adc	r13, r29
    9f60:	c6 01       	movw	r24, r12
    9f62:	b4 01       	movw	r22, r8
    9f64:	a5 01       	movw	r20, r10
    9f66:	0e 94 4c 4d 	call	0x9a98	; 0x9a98 <_Zpl6StringRKS_>
    9f6a:	c3 01       	movw	r24, r6
    9f6c:	88 96       	adiw	r24, 0x28	; 40
    9f6e:	b6 01       	movw	r22, r12
    9f70:	0e 94 24 08 	call	0x1048	; 0x1048 <_ZN6StringpLERKS_>
    9f74:	c6 01       	movw	r24, r12
    9f76:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    9f7a:	c5 01       	movw	r24, r10
    9f7c:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    9f80:	c4 01       	movw	r24, r8
    9f82:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
				mov.set_amp (parametro, value);
    9f86:	81 ee       	ldi	r24, 0xE1	; 225
    9f88:	90 e1       	ldi	r25, 0x10	; 16
    9f8a:	60 91 b3 14 	lds	r22, 0x14B3
    9f8e:	2e 2d       	mov	r18, r14
    9f90:	3f 2d       	mov	r19, r15
    9f92:	40 2f       	mov	r20, r16
    9f94:	51 2f       	mov	r21, r17
    9f96:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <_ZN10Movimiento7set_ampEhf>
    9f9a:	e8 c0       	rjmp	.+464    	; 0xa16c <_ZN13RemoteControl11osciladoresEh+0x6b0>
				break;
			case FREQ: 
				value /= 5;
    9f9c:	c6 01       	movw	r24, r12
    9f9e:	b5 01       	movw	r22, r10
    9fa0:	20 e0       	ldi	r18, 0x00	; 0
    9fa2:	30 e0       	ldi	r19, 0x00	; 0
    9fa4:	40 ea       	ldi	r20, 0xA0	; 160
    9fa6:	50 e4       	ldi	r21, 0x40	; 64
    9fa8:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
				value += osc.freq;
    9fac:	f8 01       	movw	r30, r16
    9fae:	24 81       	ldd	r18, Z+4	; 0x04
    9fb0:	35 81       	ldd	r19, Z+5	; 0x05
    9fb2:	46 81       	ldd	r20, Z+6	; 0x06
    9fb4:	57 81       	ldd	r21, Z+7	; 0x07
    9fb6:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    9fba:	7b 01       	movw	r14, r22
    9fbc:	8c 01       	movw	r16, r24
				texto1 += ("frq " + float2string (value)); 
    9fbe:	85 e5       	ldi	r24, 0x55	; 85
    9fc0:	88 2e       	mov	r8, r24
    9fc2:	91 2c       	mov	r9, r1
    9fc4:	8c 0e       	add	r8, r28
    9fc6:	9d 1e       	adc	r9, r29
    9fc8:	c4 01       	movw	r24, r8
    9fca:	60 ea       	ldi	r22, 0xA0	; 160
    9fcc:	72 e0       	ldi	r23, 0x02	; 2
    9fce:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    9fd2:	bf e4       	ldi	r27, 0x4F	; 79
    9fd4:	ab 2e       	mov	r10, r27
    9fd6:	b1 2c       	mov	r11, r1
    9fd8:	ac 0e       	add	r10, r28
    9fda:	bd 1e       	adc	r11, r29
    9fdc:	c5 01       	movw	r24, r10
    9fde:	a7 01       	movw	r20, r14
    9fe0:	b8 01       	movw	r22, r16
    9fe2:	0e 94 51 67 	call	0xcea2	; 0xcea2 <_Z12float2stringf>
    9fe6:	ab e5       	ldi	r26, 0x5B	; 91
    9fe8:	ca 2e       	mov	r12, r26
    9fea:	d1 2c       	mov	r13, r1
    9fec:	cc 0e       	add	r12, r28
    9fee:	dd 1e       	adc	r13, r29
    9ff0:	c6 01       	movw	r24, r12
    9ff2:	b4 01       	movw	r22, r8
    9ff4:	a5 01       	movw	r20, r10
    9ff6:	0e 94 4c 4d 	call	0x9a98	; 0x9a98 <_Zpl6StringRKS_>
    9ffa:	c3 01       	movw	r24, r6
    9ffc:	88 96       	adiw	r24, 0x28	; 40
    9ffe:	b6 01       	movw	r22, r12
    a000:	0e 94 24 08 	call	0x1048	; 0x1048 <_ZN6StringpLERKS_>
    a004:	c6 01       	movw	r24, r12
    a006:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    a00a:	c5 01       	movw	r24, r10
    a00c:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    a010:	c4 01       	movw	r24, r8
    a012:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
				mov.set_freq (parametro, value);
    a016:	81 ee       	ldi	r24, 0xE1	; 225
    a018:	90 e1       	ldi	r25, 0x10	; 16
    a01a:	60 91 b3 14 	lds	r22, 0x14B3
    a01e:	2e 2d       	mov	r18, r14
    a020:	3f 2d       	mov	r19, r15
    a022:	40 2f       	mov	r20, r16
    a024:	51 2f       	mov	r21, r17
    a026:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <_ZN10Movimiento8set_freqEhf>
    a02a:	a0 c0       	rjmp	.+320    	; 0xa16c <_ZN13RemoteControl11osciladoresEh+0x6b0>
				break;
			case PHASE: 
				value /= 5;
    a02c:	c6 01       	movw	r24, r12
    a02e:	b5 01       	movw	r22, r10
    a030:	20 e0       	ldi	r18, 0x00	; 0
    a032:	30 e0       	ldi	r19, 0x00	; 0
    a034:	40 ea       	ldi	r20, 0xA0	; 160
    a036:	50 e4       	ldi	r21, 0x40	; 64
    a038:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
				value += osc.phase;
    a03c:	f8 01       	movw	r30, r16
    a03e:	20 85       	ldd	r18, Z+8	; 0x08
    a040:	31 85       	ldd	r19, Z+9	; 0x09
    a042:	42 85       	ldd	r20, Z+10	; 0x0a
    a044:	53 85       	ldd	r21, Z+11	; 0x0b
    a046:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    a04a:	7b 01       	movw	r14, r22
    a04c:	8c 01       	movw	r16, r24
				texto1 += ("phs " + float2string (value)); 
    a04e:	f7 e6       	ldi	r31, 0x67	; 103
    a050:	8f 2e       	mov	r8, r31
    a052:	91 2c       	mov	r9, r1
    a054:	8c 0e       	add	r8, r28
    a056:	9d 1e       	adc	r9, r29
    a058:	c4 01       	movw	r24, r8
    a05a:	65 ea       	ldi	r22, 0xA5	; 165
    a05c:	72 e0       	ldi	r23, 0x02	; 2
    a05e:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    a062:	e1 e6       	ldi	r30, 0x61	; 97
    a064:	ae 2e       	mov	r10, r30
    a066:	b1 2c       	mov	r11, r1
    a068:	ac 0e       	add	r10, r28
    a06a:	bd 1e       	adc	r11, r29
    a06c:	c5 01       	movw	r24, r10
    a06e:	a7 01       	movw	r20, r14
    a070:	b8 01       	movw	r22, r16
    a072:	0e 94 51 67 	call	0xcea2	; 0xcea2 <_Z12float2stringf>
    a076:	7d e6       	ldi	r23, 0x6D	; 109
    a078:	c7 2e       	mov	r12, r23
    a07a:	d1 2c       	mov	r13, r1
    a07c:	cc 0e       	add	r12, r28
    a07e:	dd 1e       	adc	r13, r29
    a080:	c6 01       	movw	r24, r12
    a082:	b4 01       	movw	r22, r8
    a084:	a5 01       	movw	r20, r10
    a086:	0e 94 4c 4d 	call	0x9a98	; 0x9a98 <_Zpl6StringRKS_>
    a08a:	c3 01       	movw	r24, r6
    a08c:	88 96       	adiw	r24, 0x28	; 40
    a08e:	b6 01       	movw	r22, r12
    a090:	0e 94 24 08 	call	0x1048	; 0x1048 <_ZN6StringpLERKS_>
    a094:	c6 01       	movw	r24, r12
    a096:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    a09a:	c5 01       	movw	r24, r10
    a09c:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    a0a0:	c4 01       	movw	r24, r8
    a0a2:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
				mov.set_phase (parametro, value);
    a0a6:	81 ee       	ldi	r24, 0xE1	; 225
    a0a8:	90 e1       	ldi	r25, 0x10	; 16
    a0aa:	60 91 b3 14 	lds	r22, 0x14B3
    a0ae:	2e 2d       	mov	r18, r14
    a0b0:	3f 2d       	mov	r19, r15
    a0b2:	40 2f       	mov	r20, r16
    a0b4:	51 2f       	mov	r21, r17
    a0b6:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <_ZN10Movimiento9set_phaseEhf>
    a0ba:	58 c0       	rjmp	.+176    	; 0xa16c <_ZN13RemoteControl11osciladoresEh+0x6b0>
				break;
			case BROWN: 
				bool brown = sign2bin (increment);
    a0bc:	88 2d       	mov	r24, r8
    a0be:	99 27       	eor	r25, r25
    a0c0:	87 fd       	sbrc	r24, 7
    a0c2:	90 95       	com	r25
    a0c4:	0e 94 41 0a 	call	0x1482	; 0x1482 <_Z8sign2bini>
    a0c8:	b8 2e       	mov	r11, r24
				texto1 += ("brw " + String (brown, BIN)); 
    a0ca:	69 e7       	ldi	r22, 0x79	; 121
    a0cc:	c6 2e       	mov	r12, r22
    a0ce:	d1 2c       	mov	r13, r1
    a0d0:	cc 0e       	add	r12, r28
    a0d2:	dd 1e       	adc	r13, r29
    a0d4:	c6 01       	movw	r24, r12
    a0d6:	6a ea       	ldi	r22, 0xAA	; 170
    a0d8:	72 e0       	ldi	r23, 0x02	; 2
    a0da:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    a0de:	53 e7       	ldi	r21, 0x73	; 115
    a0e0:	e5 2e       	mov	r14, r21
    a0e2:	f1 2c       	mov	r15, r1
    a0e4:	ec 0e       	add	r14, r28
    a0e6:	fd 1e       	adc	r15, r29
    a0e8:	c7 01       	movw	r24, r14
    a0ea:	6b 2d       	mov	r22, r11
    a0ec:	70 e0       	ldi	r23, 0x00	; 0
    a0ee:	42 e0       	ldi	r20, 0x02	; 2
    a0f0:	50 e0       	ldi	r21, 0x00	; 0
    a0f2:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_ZN6StringC1Eii>
    a0f6:	8e 01       	movw	r16, r28
    a0f8:	01 58       	subi	r16, 0x81	; 129
    a0fa:	1f 4f       	sbci	r17, 0xFF	; 255
    a0fc:	c8 01       	movw	r24, r16
    a0fe:	b6 01       	movw	r22, r12
    a100:	a7 01       	movw	r20, r14
    a102:	0e 94 4c 4d 	call	0x9a98	; 0x9a98 <_Zpl6StringRKS_>
    a106:	c3 01       	movw	r24, r6
    a108:	88 96       	adiw	r24, 0x28	; 40
    a10a:	b8 01       	movw	r22, r16
    a10c:	0e 94 24 08 	call	0x1048	; 0x1048 <_ZN6StringpLERKS_>
    a110:	c8 01       	movw	r24, r16
    a112:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    a116:	c7 01       	movw	r24, r14
    a118:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    a11c:	c6 01       	movw	r24, r12
    a11e:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
				mov.set_brown (parametro, brown);
    a122:	81 ee       	ldi	r24, 0xE1	; 225
    a124:	90 e1       	ldi	r25, 0x10	; 16
    a126:	60 91 b3 14 	lds	r22, 0x14B3
    a12a:	4b 2d       	mov	r20, r11
    a12c:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <_ZN10Movimiento9set_brownEhb>
    a130:	1d c0       	rjmp	.+58     	; 0xa16c <_ZN13RemoteControl11osciladoresEh+0x6b0>
			break;
			
	}
	
	if (increment != 0) {
		float value = increment * inc;
    a132:	68 2d       	mov	r22, r8
    a134:	77 27       	eor	r23, r23
    a136:	67 fd       	sbrc	r22, 7
    a138:	70 95       	com	r23
    a13a:	87 2f       	mov	r24, r23
    a13c:	97 2f       	mov	r25, r23
    a13e:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    a142:	f3 01       	movw	r30, r6
    a144:	21 a1       	ldd	r18, Z+33	; 0x21
    a146:	32 a1       	ldd	r19, Z+34	; 0x22
    a148:	43 a1       	ldd	r20, Z+35	; 0x23
    a14a:	54 a1       	ldd	r21, Z+36	; 0x24
    a14c:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    a150:	5b 01       	movw	r10, r22
    a152:	6c 01       	movw	r12, r24
		switch (modo) {
    a154:	f3 01       	movw	r30, r6
    a156:	86 a1       	ldd	r24, Z+38	; 0x26
    a158:	88 30       	cpi	r24, 0x08	; 8
    a15a:	09 f4       	brne	.+2      	; 0xa15e <_ZN13RemoteControl11osciladoresEh+0x6a2>
    a15c:	5a ce       	rjmp	.-844    	; 0x9e12 <_ZN13RemoteControl11osciladoresEh+0x356>
    a15e:	89 30       	cpi	r24, 0x09	; 9
    a160:	09 f4       	brne	.+2      	; 0xa164 <_ZN13RemoteControl11osciladoresEh+0x6a8>
    a162:	75 ce       	rjmp	.-790    	; 0x9e4e <_ZN13RemoteControl11osciladoresEh+0x392>
    a164:	87 30       	cpi	r24, 0x07	; 7
    a166:	09 f0       	breq	.+2      	; 0xa16a <_ZN13RemoteControl11osciladoresEh+0x6ae>
    a168:	94 ce       	rjmp	.-728    	; 0x9e92 <_ZN13RemoteControl11osciladoresEh+0x3d6>
    a16a:	42 ce       	rjmp	.-892    	; 0x9df0 <_ZN13RemoteControl11osciladoresEh+0x334>
				mov.set_brown (parametro, brown);
				break;
		}
	}

}
    a16c:	cf 56       	subi	r28, 0x6F	; 111
    a16e:	df 4f       	sbci	r29, 0xFF	; 255
    a170:	0f b6       	in	r0, 0x3f	; 63
    a172:	f8 94       	cli
    a174:	de bf       	out	0x3e, r29	; 62
    a176:	0f be       	out	0x3f, r0	; 63
    a178:	cd bf       	out	0x3d, r28	; 61
    a17a:	cf 91       	pop	r28
    a17c:	df 91       	pop	r29
    a17e:	1f 91       	pop	r17
    a180:	0f 91       	pop	r16
    a182:	ff 90       	pop	r15
    a184:	ef 90       	pop	r14
    a186:	df 90       	pop	r13
    a188:	cf 90       	pop	r12
    a18a:	bf 90       	pop	r11
    a18c:	af 90       	pop	r10
    a18e:	9f 90       	pop	r9
    a190:	8f 90       	pop	r8
    a192:	7f 90       	pop	r7
    a194:	6f 90       	pop	r6
    a196:	08 95       	ret

0000a198 <_ZN13RemoteControl13editar_centroEh>:
			retardo = true;
			break;
	}
}

void RemoteControl::editar_centro (byte comando) {
    a198:	af 92       	push	r10
    a19a:	bf 92       	push	r11
    a19c:	cf 92       	push	r12
    a19e:	df 92       	push	r13
    a1a0:	ef 92       	push	r14
    a1a2:	ff 92       	push	r15
    a1a4:	0f 93       	push	r16
    a1a6:	1f 93       	push	r17
    a1a8:	df 93       	push	r29
    a1aa:	cf 93       	push	r28
    a1ac:	cd b7       	in	r28, 0x3d	; 61
    a1ae:	de b7       	in	r29, 0x3e	; 62
    a1b0:	c0 59       	subi	r28, 0x90	; 144
    a1b2:	d0 40       	sbci	r29, 0x00	; 0
    a1b4:	0f b6       	in	r0, 0x3f	; 63
    a1b6:	f8 94       	cli
    a1b8:	de bf       	out	0x3e, r29	; 62
    a1ba:	0f be       	out	0x3f, r0	; 63
    a1bc:	cd bf       	out	0x3d, r28	; 61
    a1be:	5c 01       	movw	r10, r24
	
	switch (comando) {
    a1c0:	6e 34       	cpi	r22, 0x4E	; 78
    a1c2:	09 f4       	brne	.+2      	; 0xa1c6 <_ZN13RemoteControl13editar_centroEh+0x2e>
    a1c4:	50 c1       	rjmp	.+672    	; 0xa466 <_ZN13RemoteControl13editar_centroEh+0x2ce>
    a1c6:	6f 34       	cpi	r22, 0x4F	; 79
    a1c8:	80 f4       	brcc	.+32     	; 0xa1ea <_ZN13RemoteControl13editar_centroEh+0x52>
    a1ca:	63 31       	cpi	r22, 0x13	; 19
    a1cc:	09 f4       	brne	.+2      	; 0xa1d0 <_ZN13RemoteControl13editar_centroEh+0x38>
    a1ce:	0f c1       	rjmp	.+542    	; 0xa3ee <_ZN13RemoteControl13editar_centroEh+0x256>
    a1d0:	64 31       	cpi	r22, 0x14	; 20
    a1d2:	20 f4       	brcc	.+8      	; 0xa1dc <_ZN13RemoteControl13editar_centroEh+0x44>
    a1d4:	60 31       	cpi	r22, 0x10	; 16
    a1d6:	09 f0       	breq	.+2      	; 0xa1da <_ZN13RemoteControl13editar_centroEh+0x42>
    a1d8:	53 c2       	rjmp	.+1190   	; 0xa680 <_ZN13RemoteControl13editar_centroEh+0x4e8>
    a1da:	45 c1       	rjmp	.+650    	; 0xa466 <_ZN13RemoteControl13editar_centroEh+0x2ce>
    a1dc:	6a 31       	cpi	r22, 0x1A	; 26
    a1de:	09 f4       	brne	.+2      	; 0xa1e2 <_ZN13RemoteControl13editar_centroEh+0x4a>
    a1e0:	7e c1       	rjmp	.+764    	; 0xa4de <_ZN13RemoteControl13editar_centroEh+0x346>
    a1e2:	6e 31       	cpi	r22, 0x1E	; 30
    a1e4:	09 f0       	breq	.+2      	; 0xa1e8 <_ZN13RemoteControl13editar_centroEh+0x50>
    a1e6:	4c c2       	rjmp	.+1176   	; 0xa680 <_ZN13RemoteControl13editar_centroEh+0x4e8>
    a1e8:	d8 c1       	rjmp	.+944    	; 0xa59a <_ZN13RemoteControl13editar_centroEh+0x402>
    a1ea:	6d 35       	cpi	r22, 0x5D	; 93
    a1ec:	09 f4       	brne	.+2      	; 0xa1f0 <_ZN13RemoteControl13editar_centroEh+0x58>
    a1ee:	c3 c0       	rjmp	.+390    	; 0xa376 <_ZN13RemoteControl13editar_centroEh+0x1de>
    a1f0:	6e 35       	cpi	r22, 0x5E	; 94
    a1f2:	38 f4       	brcc	.+14     	; 0xa202 <_ZN13RemoteControl13editar_centroEh+0x6a>
    a1f4:	6f 34       	cpi	r22, 0x4F	; 79
    a1f6:	09 f4       	brne	.+2      	; 0xa1fa <_ZN13RemoteControl13editar_centroEh+0x62>
    a1f8:	fa c0       	rjmp	.+500    	; 0xa3ee <_ZN13RemoteControl13editar_centroEh+0x256>
    a1fa:	6c 35       	cpi	r22, 0x5C	; 92
    a1fc:	09 f0       	breq	.+2      	; 0xa200 <_ZN13RemoteControl13editar_centroEh+0x68>
    a1fe:	40 c2       	rjmp	.+1152   	; 0xa680 <_ZN13RemoteControl13editar_centroEh+0x4e8>
    a200:	07 c0       	rjmp	.+14     	; 0xa210 <_ZN13RemoteControl13editar_centroEh+0x78>
    a202:	6e 35       	cpi	r22, 0x5E	; 94
    a204:	09 f4       	brne	.+2      	; 0xa208 <_ZN13RemoteControl13editar_centroEh+0x70>
    a206:	7b c0       	rjmp	.+246    	; 0xa2fe <_ZN13RemoteControl13editar_centroEh+0x166>
    a208:	6f 35       	cpi	r22, 0x5F	; 95
    a20a:	09 f0       	breq	.+2      	; 0xa20e <_ZN13RemoteControl13editar_centroEh+0x76>
    a20c:	39 c2       	rjmp	.+1138   	; 0xa680 <_ZN13RemoteControl13editar_centroEh+0x4e8>
    a20e:	3b c0       	rjmp	.+118    	; 0xa286 <_ZN13RemoteControl13editar_centroEh+0xee>
		case RC_UP:
			if (pantalla.isBusy()) {break;}
    a210:	80 ec       	ldi	r24, 0xC0	; 192
    a212:	96 e0       	ldi	r25, 0x06	; 6
    a214:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    a218:	88 23       	and	r24, r24
    a21a:	09 f0       	breq	.+2      	; 0xa21e <_ZN13RemoteControl13editar_centroEh+0x86>
    a21c:	31 c2       	rjmp	.+1122   	; 0xa680 <_ZN13RemoteControl13editar_centroEh+0x4e8>
			mov.bd.centro_ref.z += step;
    a21e:	60 91 86 11 	lds	r22, 0x1186
    a222:	70 91 87 11 	lds	r23, 0x1187
    a226:	80 91 88 11 	lds	r24, 0x1188
    a22a:	90 91 89 11 	lds	r25, 0x1189
    a22e:	f5 01       	movw	r30, r10
    a230:	21 89       	ldd	r18, Z+17	; 0x11
    a232:	32 89       	ldd	r19, Z+18	; 0x12
    a234:	43 89       	ldd	r20, Z+19	; 0x13
    a236:	54 89       	ldd	r21, Z+20	; 0x14
    a238:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    a23c:	60 93 86 11 	sts	0x1186, r22
    a240:	70 93 87 11 	sts	0x1187, r23
    a244:	80 93 88 11 	sts	0x1188, r24
    a248:	90 93 89 11 	sts	0x1189, r25
			texto1 = "Z = " + float2string (mov.bd.centro_ref.z);
    a24c:	17 e0       	ldi	r17, 0x07	; 7
    a24e:	c1 2e       	mov	r12, r17
    a250:	d1 2c       	mov	r13, r1
    a252:	cc 0e       	add	r12, r28
    a254:	dd 1e       	adc	r13, r29
    a256:	c6 01       	movw	r24, r12
    a258:	6f ea       	ldi	r22, 0xAF	; 175
    a25a:	72 e0       	ldi	r23, 0x02	; 2
    a25c:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    a260:	40 91 86 11 	lds	r20, 0x1186
    a264:	50 91 87 11 	lds	r21, 0x1187
    a268:	60 91 88 11 	lds	r22, 0x1188
    a26c:	70 91 89 11 	lds	r23, 0x1189
    a270:	7e 01       	movw	r14, r28
    a272:	08 94       	sec
    a274:	e1 1c       	adc	r14, r1
    a276:	f1 1c       	adc	r15, r1
    a278:	c7 01       	movw	r24, r14
    a27a:	0e 94 51 67 	call	0xcea2	; 0xcea2 <_Z12float2stringf>
    a27e:	8e 01       	movw	r16, r28
    a280:	03 5f       	subi	r16, 0xF3	; 243
    a282:	1f 4f       	sbci	r17, 0xFF	; 255
    a284:	e7 c1       	rjmp	.+974    	; 0xa654 <_ZN13RemoteControl13editar_centroEh+0x4bc>
			retardo = true;
			break;
		
		case RC_DOWN:
			if (pantalla.isBusy()) {break;}
    a286:	80 ec       	ldi	r24, 0xC0	; 192
    a288:	96 e0       	ldi	r25, 0x06	; 6
    a28a:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    a28e:	88 23       	and	r24, r24
    a290:	09 f0       	breq	.+2      	; 0xa294 <_ZN13RemoteControl13editar_centroEh+0xfc>
    a292:	f6 c1       	rjmp	.+1004   	; 0xa680 <_ZN13RemoteControl13editar_centroEh+0x4e8>
			mov.bd.centro_ref.z -= step;
    a294:	60 91 86 11 	lds	r22, 0x1186
    a298:	70 91 87 11 	lds	r23, 0x1187
    a29c:	80 91 88 11 	lds	r24, 0x1188
    a2a0:	90 91 89 11 	lds	r25, 0x1189
    a2a4:	f5 01       	movw	r30, r10
    a2a6:	21 89       	ldd	r18, Z+17	; 0x11
    a2a8:	32 89       	ldd	r19, Z+18	; 0x12
    a2aa:	43 89       	ldd	r20, Z+19	; 0x13
    a2ac:	54 89       	ldd	r21, Z+20	; 0x14
    a2ae:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    a2b2:	60 93 86 11 	sts	0x1186, r22
    a2b6:	70 93 87 11 	sts	0x1187, r23
    a2ba:	80 93 88 11 	sts	0x1188, r24
    a2be:	90 93 89 11 	sts	0x1189, r25
			texto1 = "Z = " + float2string (mov.bd.centro_ref.z);
    a2c2:	b9 e1       	ldi	r27, 0x19	; 25
    a2c4:	cb 2e       	mov	r12, r27
    a2c6:	d1 2c       	mov	r13, r1
    a2c8:	cc 0e       	add	r12, r28
    a2ca:	dd 1e       	adc	r13, r29
    a2cc:	c6 01       	movw	r24, r12
    a2ce:	6f ea       	ldi	r22, 0xAF	; 175
    a2d0:	72 e0       	ldi	r23, 0x02	; 2
    a2d2:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    a2d6:	a3 e1       	ldi	r26, 0x13	; 19
    a2d8:	ea 2e       	mov	r14, r26
    a2da:	f1 2c       	mov	r15, r1
    a2dc:	ec 0e       	add	r14, r28
    a2de:	fd 1e       	adc	r15, r29
    a2e0:	40 91 86 11 	lds	r20, 0x1186
    a2e4:	50 91 87 11 	lds	r21, 0x1187
    a2e8:	60 91 88 11 	lds	r22, 0x1188
    a2ec:	70 91 89 11 	lds	r23, 0x1189
    a2f0:	c7 01       	movw	r24, r14
    a2f2:	0e 94 51 67 	call	0xcea2	; 0xcea2 <_Z12float2stringf>
    a2f6:	8e 01       	movw	r16, r28
    a2f8:	01 5e       	subi	r16, 0xE1	; 225
    a2fa:	1f 4f       	sbci	r17, 0xFF	; 255
    a2fc:	ab c1       	rjmp	.+854    	; 0xa654 <_ZN13RemoteControl13editar_centroEh+0x4bc>
			retardo = true;
			break;
		
		case RC_RIGHT:
			if (pantalla.isBusy()) {break;}
    a2fe:	80 ec       	ldi	r24, 0xC0	; 192
    a300:	96 e0       	ldi	r25, 0x06	; 6
    a302:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    a306:	88 23       	and	r24, r24
    a308:	09 f0       	breq	.+2      	; 0xa30c <_ZN13RemoteControl13editar_centroEh+0x174>
    a30a:	ba c1       	rjmp	.+884    	; 0xa680 <_ZN13RemoteControl13editar_centroEh+0x4e8>
			mov.bd.centro_ref.x += step;
    a30c:	60 91 7e 11 	lds	r22, 0x117E
    a310:	70 91 7f 11 	lds	r23, 0x117F
    a314:	80 91 80 11 	lds	r24, 0x1180
    a318:	90 91 81 11 	lds	r25, 0x1181
    a31c:	f5 01       	movw	r30, r10
    a31e:	21 89       	ldd	r18, Z+17	; 0x11
    a320:	32 89       	ldd	r19, Z+18	; 0x12
    a322:	43 89       	ldd	r20, Z+19	; 0x13
    a324:	54 89       	ldd	r21, Z+20	; 0x14
    a326:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    a32a:	60 93 7e 11 	sts	0x117E, r22
    a32e:	70 93 7f 11 	sts	0x117F, r23
    a332:	80 93 80 11 	sts	0x1180, r24
    a336:	90 93 81 11 	sts	0x1181, r25
			texto1 = "X = " + float2string (mov.bd.centro_ref.x);
    a33a:	fb e2       	ldi	r31, 0x2B	; 43
    a33c:	cf 2e       	mov	r12, r31
    a33e:	d1 2c       	mov	r13, r1
    a340:	cc 0e       	add	r12, r28
    a342:	dd 1e       	adc	r13, r29
    a344:	c6 01       	movw	r24, r12
    a346:	64 eb       	ldi	r22, 0xB4	; 180
    a348:	72 e0       	ldi	r23, 0x02	; 2
    a34a:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    a34e:	e5 e2       	ldi	r30, 0x25	; 37
    a350:	ee 2e       	mov	r14, r30
    a352:	f1 2c       	mov	r15, r1
    a354:	ec 0e       	add	r14, r28
    a356:	fd 1e       	adc	r15, r29
    a358:	40 91 7e 11 	lds	r20, 0x117E
    a35c:	50 91 7f 11 	lds	r21, 0x117F
    a360:	60 91 80 11 	lds	r22, 0x1180
    a364:	70 91 81 11 	lds	r23, 0x1181
    a368:	c7 01       	movw	r24, r14
    a36a:	0e 94 51 67 	call	0xcea2	; 0xcea2 <_Z12float2stringf>
    a36e:	8e 01       	movw	r16, r28
    a370:	0f 5c       	subi	r16, 0xCF	; 207
    a372:	1f 4f       	sbci	r17, 0xFF	; 255
    a374:	6f c1       	rjmp	.+734    	; 0xa654 <_ZN13RemoteControl13editar_centroEh+0x4bc>
			retardo = true;
			break;
	
		case RC_LEFT:
			if (pantalla.isBusy()) {break;}
    a376:	80 ec       	ldi	r24, 0xC0	; 192
    a378:	96 e0       	ldi	r25, 0x06	; 6
    a37a:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    a37e:	88 23       	and	r24, r24
    a380:	09 f0       	breq	.+2      	; 0xa384 <_ZN13RemoteControl13editar_centroEh+0x1ec>
    a382:	7e c1       	rjmp	.+764    	; 0xa680 <_ZN13RemoteControl13editar_centroEh+0x4e8>
			mov.bd.centro_ref.x -= step;
    a384:	60 91 7e 11 	lds	r22, 0x117E
    a388:	70 91 7f 11 	lds	r23, 0x117F
    a38c:	80 91 80 11 	lds	r24, 0x1180
    a390:	90 91 81 11 	lds	r25, 0x1181
    a394:	f5 01       	movw	r30, r10
    a396:	21 89       	ldd	r18, Z+17	; 0x11
    a398:	32 89       	ldd	r19, Z+18	; 0x12
    a39a:	43 89       	ldd	r20, Z+19	; 0x13
    a39c:	54 89       	ldd	r21, Z+20	; 0x14
    a39e:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    a3a2:	60 93 7e 11 	sts	0x117E, r22
    a3a6:	70 93 7f 11 	sts	0x117F, r23
    a3aa:	80 93 80 11 	sts	0x1180, r24
    a3ae:	90 93 81 11 	sts	0x1181, r25
			texto1 = "X = " + float2string (mov.bd.centro_ref.x);
    a3b2:	7d e3       	ldi	r23, 0x3D	; 61
    a3b4:	c7 2e       	mov	r12, r23
    a3b6:	d1 2c       	mov	r13, r1
    a3b8:	cc 0e       	add	r12, r28
    a3ba:	dd 1e       	adc	r13, r29
    a3bc:	c6 01       	movw	r24, r12
    a3be:	64 eb       	ldi	r22, 0xB4	; 180
    a3c0:	72 e0       	ldi	r23, 0x02	; 2
    a3c2:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    a3c6:	67 e3       	ldi	r22, 0x37	; 55
    a3c8:	e6 2e       	mov	r14, r22
    a3ca:	f1 2c       	mov	r15, r1
    a3cc:	ec 0e       	add	r14, r28
    a3ce:	fd 1e       	adc	r15, r29
    a3d0:	40 91 7e 11 	lds	r20, 0x117E
    a3d4:	50 91 7f 11 	lds	r21, 0x117F
    a3d8:	60 91 80 11 	lds	r22, 0x1180
    a3dc:	70 91 81 11 	lds	r23, 0x1181
    a3e0:	c7 01       	movw	r24, r14
    a3e2:	0e 94 51 67 	call	0xcea2	; 0xcea2 <_Z12float2stringf>
    a3e6:	8e 01       	movw	r16, r28
    a3e8:	0d 5b       	subi	r16, 0xBD	; 189
    a3ea:	1f 4f       	sbci	r17, 0xFF	; 255
    a3ec:	33 c1       	rjmp	.+614    	; 0xa654 <_ZN13RemoteControl13editar_centroEh+0x4bc>
			retardo = true;
			break;

		case RC_CCTTX: case RC_MTS:
			if (pantalla.isBusy()) {break;}
    a3ee:	80 ec       	ldi	r24, 0xC0	; 192
    a3f0:	96 e0       	ldi	r25, 0x06	; 6
    a3f2:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    a3f6:	88 23       	and	r24, r24
    a3f8:	09 f0       	breq	.+2      	; 0xa3fc <_ZN13RemoteControl13editar_centroEh+0x264>
    a3fa:	42 c1       	rjmp	.+644    	; 0xa680 <_ZN13RemoteControl13editar_centroEh+0x4e8>
			mov.bd.centro_ref.y -= step;
    a3fc:	60 91 82 11 	lds	r22, 0x1182
    a400:	70 91 83 11 	lds	r23, 0x1183
    a404:	80 91 84 11 	lds	r24, 0x1184
    a408:	90 91 85 11 	lds	r25, 0x1185
    a40c:	f5 01       	movw	r30, r10
    a40e:	21 89       	ldd	r18, Z+17	; 0x11
    a410:	32 89       	ldd	r19, Z+18	; 0x12
    a412:	43 89       	ldd	r20, Z+19	; 0x13
    a414:	54 89       	ldd	r21, Z+20	; 0x14
    a416:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    a41a:	60 93 82 11 	sts	0x1182, r22
    a41e:	70 93 83 11 	sts	0x1183, r23
    a422:	80 93 84 11 	sts	0x1184, r24
    a426:	90 93 85 11 	sts	0x1185, r25
			texto1 = "Y = " + float2string (mov.bd.centro_ref.y);
    a42a:	5f e4       	ldi	r21, 0x4F	; 79
    a42c:	c5 2e       	mov	r12, r21
    a42e:	d1 2c       	mov	r13, r1
    a430:	cc 0e       	add	r12, r28
    a432:	dd 1e       	adc	r13, r29
    a434:	c6 01       	movw	r24, r12
    a436:	69 eb       	ldi	r22, 0xB9	; 185
    a438:	72 e0       	ldi	r23, 0x02	; 2
    a43a:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    a43e:	49 e4       	ldi	r20, 0x49	; 73
    a440:	e4 2e       	mov	r14, r20
    a442:	f1 2c       	mov	r15, r1
    a444:	ec 0e       	add	r14, r28
    a446:	fd 1e       	adc	r15, r29
    a448:	40 91 82 11 	lds	r20, 0x1182
    a44c:	50 91 83 11 	lds	r21, 0x1183
    a450:	60 91 84 11 	lds	r22, 0x1184
    a454:	70 91 85 11 	lds	r23, 0x1185
    a458:	c7 01       	movw	r24, r14
    a45a:	0e 94 51 67 	call	0xcea2	; 0xcea2 <_Z12float2stringf>
    a45e:	8e 01       	movw	r16, r28
    a460:	0b 5a       	subi	r16, 0xAB	; 171
    a462:	1f 4f       	sbci	r17, 0xFF	; 255
    a464:	f7 c0       	rjmp	.+494    	; 0xa654 <_ZN13RemoteControl13editar_centroEh+0x4bc>
			retardo = true;
			break;
			
		case RC_EXIT: case RC_MENU:
			if (pantalla.isBusy()) {break;}
    a466:	80 ec       	ldi	r24, 0xC0	; 192
    a468:	96 e0       	ldi	r25, 0x06	; 6
    a46a:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    a46e:	88 23       	and	r24, r24
    a470:	09 f0       	breq	.+2      	; 0xa474 <_ZN13RemoteControl13editar_centroEh+0x2dc>
    a472:	06 c1       	rjmp	.+524    	; 0xa680 <_ZN13RemoteControl13editar_centroEh+0x4e8>
			mov.bd.centro_ref.y += step;
    a474:	60 91 82 11 	lds	r22, 0x1182
    a478:	70 91 83 11 	lds	r23, 0x1183
    a47c:	80 91 84 11 	lds	r24, 0x1184
    a480:	90 91 85 11 	lds	r25, 0x1185
    a484:	f5 01       	movw	r30, r10
    a486:	21 89       	ldd	r18, Z+17	; 0x11
    a488:	32 89       	ldd	r19, Z+18	; 0x12
    a48a:	43 89       	ldd	r20, Z+19	; 0x13
    a48c:	54 89       	ldd	r21, Z+20	; 0x14
    a48e:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    a492:	60 93 82 11 	sts	0x1182, r22
    a496:	70 93 83 11 	sts	0x1183, r23
    a49a:	80 93 84 11 	sts	0x1184, r24
    a49e:	90 93 85 11 	sts	0x1185, r25
			texto1 = "Y = " + float2string (mov.bd.centro_ref.y);
    a4a2:	31 e6       	ldi	r19, 0x61	; 97
    a4a4:	c3 2e       	mov	r12, r19
    a4a6:	d1 2c       	mov	r13, r1
    a4a8:	cc 0e       	add	r12, r28
    a4aa:	dd 1e       	adc	r13, r29
    a4ac:	c6 01       	movw	r24, r12
    a4ae:	69 eb       	ldi	r22, 0xB9	; 185
    a4b0:	72 e0       	ldi	r23, 0x02	; 2
    a4b2:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    a4b6:	2b e5       	ldi	r18, 0x5B	; 91
    a4b8:	e2 2e       	mov	r14, r18
    a4ba:	f1 2c       	mov	r15, r1
    a4bc:	ec 0e       	add	r14, r28
    a4be:	fd 1e       	adc	r15, r29
    a4c0:	40 91 82 11 	lds	r20, 0x1182
    a4c4:	50 91 83 11 	lds	r21, 0x1183
    a4c8:	60 91 84 11 	lds	r22, 0x1184
    a4cc:	70 91 85 11 	lds	r23, 0x1185
    a4d0:	c7 01       	movw	r24, r14
    a4d2:	0e 94 51 67 	call	0xcea2	; 0xcea2 <_Z12float2stringf>
    a4d6:	8e 01       	movw	r16, r28
    a4d8:	09 59       	subi	r16, 0x99	; 153
    a4da:	1f 4f       	sbci	r17, 0xFF	; 255
    a4dc:	bb c0       	rjmp	.+374    	; 0xa654 <_ZN13RemoteControl13editar_centroEh+0x4bc>
			retardo = true;
			break;
			
		// esto también se repite
		case RC_CH_UP:
			if (pantalla.isBusy()) {break;}
    a4de:	80 ec       	ldi	r24, 0xC0	; 192
    a4e0:	96 e0       	ldi	r25, 0x06	; 6
    a4e2:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    a4e6:	88 23       	and	r24, r24
    a4e8:	09 f0       	breq	.+2      	; 0xa4ec <_ZN13RemoteControl13editar_centroEh+0x354>
    a4ea:	ca c0       	rjmp	.+404    	; 0xa680 <_ZN13RemoteControl13editar_centroEh+0x4e8>
			if (!isMoving) {step = constrain (step+inc, .5, 5);}
    a4ec:	f5 01       	movw	r30, r10
    a4ee:	85 a1       	ldd	r24, Z+37	; 0x25
    a4f0:	88 23       	and	r24, r24
    a4f2:	c1 f5       	brne	.+112    	; 0xa564 <_ZN13RemoteControl13editar_centroEh+0x3cc>
    a4f4:	61 89       	ldd	r22, Z+17	; 0x11
    a4f6:	72 89       	ldd	r23, Z+18	; 0x12
    a4f8:	83 89       	ldd	r24, Z+19	; 0x13
    a4fa:	94 89       	ldd	r25, Z+20	; 0x14
    a4fc:	21 a1       	ldd	r18, Z+33	; 0x21
    a4fe:	32 a1       	ldd	r19, Z+34	; 0x22
    a500:	43 a1       	ldd	r20, Z+35	; 0x23
    a502:	54 a1       	ldd	r21, Z+36	; 0x24
    a504:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    a508:	7b 01       	movw	r14, r22
    a50a:	8c 01       	movw	r16, r24
    a50c:	20 e0       	ldi	r18, 0x00	; 0
    a50e:	30 e0       	ldi	r19, 0x00	; 0
    a510:	40 e0       	ldi	r20, 0x00	; 0
    a512:	5f e3       	ldi	r21, 0x3F	; 63
    a514:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    a518:	88 23       	and	r24, r24
    a51a:	5c f4       	brge	.+22     	; 0xa532 <_ZN13RemoteControl13editar_centroEh+0x39a>
    a51c:	0f 2e       	mov	r0, r31
    a51e:	f0 e0       	ldi	r31, 0x00	; 0
    a520:	ef 2e       	mov	r14, r31
    a522:	f0 e0       	ldi	r31, 0x00	; 0
    a524:	ff 2e       	mov	r15, r31
    a526:	f0 e0       	ldi	r31, 0x00	; 0
    a528:	0f 2f       	mov	r16, r31
    a52a:	ff e3       	ldi	r31, 0x3F	; 63
    a52c:	1f 2f       	mov	r17, r31
    a52e:	f0 2d       	mov	r31, r0
    a530:	14 c0       	rjmp	.+40     	; 0xa55a <_ZN13RemoteControl13editar_centroEh+0x3c2>
    a532:	c8 01       	movw	r24, r16
    a534:	b7 01       	movw	r22, r14
    a536:	20 e0       	ldi	r18, 0x00	; 0
    a538:	30 e0       	ldi	r19, 0x00	; 0
    a53a:	40 ea       	ldi	r20, 0xA0	; 160
    a53c:	50 e4       	ldi	r21, 0x40	; 64
    a53e:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <__gesf2>
    a542:	18 16       	cp	r1, r24
    a544:	54 f4       	brge	.+20     	; 0xa55a <_ZN13RemoteControl13editar_centroEh+0x3c2>
    a546:	0f 2e       	mov	r0, r31
    a548:	f0 e0       	ldi	r31, 0x00	; 0
    a54a:	ef 2e       	mov	r14, r31
    a54c:	f0 e0       	ldi	r31, 0x00	; 0
    a54e:	ff 2e       	mov	r15, r31
    a550:	f0 ea       	ldi	r31, 0xA0	; 160
    a552:	0f 2f       	mov	r16, r31
    a554:	f0 e4       	ldi	r31, 0x40	; 64
    a556:	1f 2f       	mov	r17, r31
    a558:	f0 2d       	mov	r31, r0
    a55a:	f5 01       	movw	r30, r10
    a55c:	e1 8a       	std	Z+17, r14	; 0x11
    a55e:	f2 8a       	std	Z+18, r15	; 0x12
    a560:	03 8b       	std	Z+19, r16	; 0x13
    a562:	14 8b       	std	Z+20, r17	; 0x14
			texto1 = "Step " + float2string (step);
    a564:	93 e7       	ldi	r25, 0x73	; 115
    a566:	c9 2e       	mov	r12, r25
    a568:	d1 2c       	mov	r13, r1
    a56a:	cc 0e       	add	r12, r28
    a56c:	dd 1e       	adc	r13, r29
    a56e:	c6 01       	movw	r24, r12
    a570:	6e eb       	ldi	r22, 0xBE	; 190
    a572:	72 e0       	ldi	r23, 0x02	; 2
    a574:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    a578:	8d e6       	ldi	r24, 0x6D	; 109
    a57a:	e8 2e       	mov	r14, r24
    a57c:	f1 2c       	mov	r15, r1
    a57e:	ec 0e       	add	r14, r28
    a580:	fd 1e       	adc	r15, r29
    a582:	f5 01       	movw	r30, r10
    a584:	41 89       	ldd	r20, Z+17	; 0x11
    a586:	52 89       	ldd	r21, Z+18	; 0x12
    a588:	63 89       	ldd	r22, Z+19	; 0x13
    a58a:	74 89       	ldd	r23, Z+20	; 0x14
    a58c:	c7 01       	movw	r24, r14
    a58e:	0e 94 51 67 	call	0xcea2	; 0xcea2 <_Z12float2stringf>
    a592:	8e 01       	movw	r16, r28
    a594:	07 58       	subi	r16, 0x87	; 135
    a596:	1f 4f       	sbci	r17, 0xFF	; 255
    a598:	5d c0       	rjmp	.+186    	; 0xa654 <_ZN13RemoteControl13editar_centroEh+0x4bc>
			retardo = true;
			break;
			
		case RC_CH_DN:
			if (pantalla.isBusy()) {break;}
    a59a:	80 ec       	ldi	r24, 0xC0	; 192
    a59c:	96 e0       	ldi	r25, 0x06	; 6
    a59e:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    a5a2:	88 23       	and	r24, r24
    a5a4:	09 f0       	breq	.+2      	; 0xa5a8 <_ZN13RemoteControl13editar_centroEh+0x410>
    a5a6:	6c c0       	rjmp	.+216    	; 0xa680 <_ZN13RemoteControl13editar_centroEh+0x4e8>
			if (!isMoving) {step = constrain (step-inc, .5, 5);}
    a5a8:	f5 01       	movw	r30, r10
    a5aa:	85 a1       	ldd	r24, Z+37	; 0x25
    a5ac:	88 23       	and	r24, r24
    a5ae:	c1 f5       	brne	.+112    	; 0xa620 <_ZN13RemoteControl13editar_centroEh+0x488>
    a5b0:	61 89       	ldd	r22, Z+17	; 0x11
    a5b2:	72 89       	ldd	r23, Z+18	; 0x12
    a5b4:	83 89       	ldd	r24, Z+19	; 0x13
    a5b6:	94 89       	ldd	r25, Z+20	; 0x14
    a5b8:	21 a1       	ldd	r18, Z+33	; 0x21
    a5ba:	32 a1       	ldd	r19, Z+34	; 0x22
    a5bc:	43 a1       	ldd	r20, Z+35	; 0x23
    a5be:	54 a1       	ldd	r21, Z+36	; 0x24
    a5c0:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    a5c4:	7b 01       	movw	r14, r22
    a5c6:	8c 01       	movw	r16, r24
    a5c8:	20 e0       	ldi	r18, 0x00	; 0
    a5ca:	30 e0       	ldi	r19, 0x00	; 0
    a5cc:	40 e0       	ldi	r20, 0x00	; 0
    a5ce:	5f e3       	ldi	r21, 0x3F	; 63
    a5d0:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    a5d4:	88 23       	and	r24, r24
    a5d6:	5c f4       	brge	.+22     	; 0xa5ee <_ZN13RemoteControl13editar_centroEh+0x456>
    a5d8:	0f 2e       	mov	r0, r31
    a5da:	f0 e0       	ldi	r31, 0x00	; 0
    a5dc:	ef 2e       	mov	r14, r31
    a5de:	f0 e0       	ldi	r31, 0x00	; 0
    a5e0:	ff 2e       	mov	r15, r31
    a5e2:	f0 e0       	ldi	r31, 0x00	; 0
    a5e4:	0f 2f       	mov	r16, r31
    a5e6:	ff e3       	ldi	r31, 0x3F	; 63
    a5e8:	1f 2f       	mov	r17, r31
    a5ea:	f0 2d       	mov	r31, r0
    a5ec:	14 c0       	rjmp	.+40     	; 0xa616 <_ZN13RemoteControl13editar_centroEh+0x47e>
    a5ee:	c8 01       	movw	r24, r16
    a5f0:	b7 01       	movw	r22, r14
    a5f2:	20 e0       	ldi	r18, 0x00	; 0
    a5f4:	30 e0       	ldi	r19, 0x00	; 0
    a5f6:	40 ea       	ldi	r20, 0xA0	; 160
    a5f8:	50 e4       	ldi	r21, 0x40	; 64
    a5fa:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <__gesf2>
    a5fe:	18 16       	cp	r1, r24
    a600:	54 f4       	brge	.+20     	; 0xa616 <_ZN13RemoteControl13editar_centroEh+0x47e>
    a602:	0f 2e       	mov	r0, r31
    a604:	f0 e0       	ldi	r31, 0x00	; 0
    a606:	ef 2e       	mov	r14, r31
    a608:	f0 e0       	ldi	r31, 0x00	; 0
    a60a:	ff 2e       	mov	r15, r31
    a60c:	f0 ea       	ldi	r31, 0xA0	; 160
    a60e:	0f 2f       	mov	r16, r31
    a610:	f0 e4       	ldi	r31, 0x40	; 64
    a612:	1f 2f       	mov	r17, r31
    a614:	f0 2d       	mov	r31, r0
    a616:	f5 01       	movw	r30, r10
    a618:	e1 8a       	std	Z+17, r14	; 0x11
    a61a:	f2 8a       	std	Z+18, r15	; 0x12
    a61c:	03 8b       	std	Z+19, r16	; 0x13
    a61e:	14 8b       	std	Z+20, r17	; 0x14
			texto1 = "Step " + float2string (step);
    a620:	05 e8       	ldi	r16, 0x85	; 133
    a622:	c0 2e       	mov	r12, r16
    a624:	d1 2c       	mov	r13, r1
    a626:	cc 0e       	add	r12, r28
    a628:	dd 1e       	adc	r13, r29
    a62a:	c6 01       	movw	r24, r12
    a62c:	6e eb       	ldi	r22, 0xBE	; 190
    a62e:	72 e0       	ldi	r23, 0x02	; 2
    a630:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    a634:	1f e7       	ldi	r17, 0x7F	; 127
    a636:	e1 2e       	mov	r14, r17
    a638:	f1 2c       	mov	r15, r1
    a63a:	ec 0e       	add	r14, r28
    a63c:	fd 1e       	adc	r15, r29
    a63e:	f5 01       	movw	r30, r10
    a640:	41 89       	ldd	r20, Z+17	; 0x11
    a642:	52 89       	ldd	r21, Z+18	; 0x12
    a644:	63 89       	ldd	r22, Z+19	; 0x13
    a646:	74 89       	ldd	r23, Z+20	; 0x14
    a648:	c7 01       	movw	r24, r14
    a64a:	0e 94 51 67 	call	0xcea2	; 0xcea2 <_Z12float2stringf>
    a64e:	8e 01       	movw	r16, r28
    a650:	05 57       	subi	r16, 0x75	; 117
    a652:	1f 4f       	sbci	r17, 0xFF	; 255
    a654:	c8 01       	movw	r24, r16
    a656:	b6 01       	movw	r22, r12
    a658:	a7 01       	movw	r20, r14
    a65a:	0e 94 4c 4d 	call	0x9a98	; 0x9a98 <_Zpl6StringRKS_>
    a65e:	c5 01       	movw	r24, r10
    a660:	88 96       	adiw	r24, 0x28	; 40
    a662:	b8 01       	movw	r22, r16
    a664:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    a668:	c8 01       	movw	r24, r16
    a66a:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    a66e:	c7 01       	movw	r24, r14
    a670:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    a674:	c6 01       	movw	r24, r12
    a676:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			retardo = true;
    a67a:	81 e0       	ldi	r24, 0x01	; 1
    a67c:	f5 01       	movw	r30, r10
    a67e:	86 ab       	std	Z+54, r24	; 0x36
			break;
	}
}
    a680:	c0 57       	subi	r28, 0x70	; 112
    a682:	df 4f       	sbci	r29, 0xFF	; 255
    a684:	0f b6       	in	r0, 0x3f	; 63
    a686:	f8 94       	cli
    a688:	de bf       	out	0x3e, r29	; 62
    a68a:	0f be       	out	0x3f, r0	; 63
    a68c:	cd bf       	out	0x3d, r28	; 61
    a68e:	cf 91       	pop	r28
    a690:	df 91       	pop	r29
    a692:	1f 91       	pop	r17
    a694:	0f 91       	pop	r16
    a696:	ff 90       	pop	r15
    a698:	ef 90       	pop	r14
    a69a:	df 90       	pop	r13
    a69c:	cf 90       	pop	r12
    a69e:	bf 90       	pop	r11
    a6a0:	af 90       	pop	r10
    a6a2:	08 95       	ret

0000a6a4 <_ZN13RemoteControl10editar_posEh>:

void RemoteControl::editar_pos (byte comando) {
    a6a4:	6f 92       	push	r6
    a6a6:	7f 92       	push	r7
    a6a8:	8f 92       	push	r8
    a6aa:	9f 92       	push	r9
    a6ac:	af 92       	push	r10
    a6ae:	bf 92       	push	r11
    a6b0:	cf 92       	push	r12
    a6b2:	df 92       	push	r13
    a6b4:	ef 92       	push	r14
    a6b6:	ff 92       	push	r15
    a6b8:	0f 93       	push	r16
    a6ba:	1f 93       	push	r17
    a6bc:	df 93       	push	r29
    a6be:	cf 93       	push	r28
    a6c0:	cd b7       	in	r28, 0x3d	; 61
    a6c2:	de b7       	in	r29, 0x3e	; 62
    a6c4:	cc 56       	subi	r28, 0x6C	; 108
    a6c6:	d0 40       	sbci	r29, 0x00	; 0
    a6c8:	0f b6       	in	r0, 0x3f	; 63
    a6ca:	f8 94       	cli
    a6cc:	de bf       	out	0x3e, r29	; 62
    a6ce:	0f be       	out	0x3f, r0	; 63
    a6d0:	cd bf       	out	0x3d, r28	; 61
    a6d2:	3c 01       	movw	r6, r24
	#define EXTREMOS 0
	#define MEDIOS 1
	
	static byte edit_pos_modo = EXTREMOS;
	
	switch (comando) {
    a6d4:	6e 34       	cpi	r22, 0x4E	; 78
    a6d6:	09 f4       	brne	.+2      	; 0xa6da <_ZN13RemoteControl10editar_posEh+0x36>
    a6d8:	01 c1       	rjmp	.+514    	; 0xa8dc <_ZN13RemoteControl10editar_posEh+0x238>
    a6da:	6f 34       	cpi	r22, 0x4F	; 79
    a6dc:	80 f4       	brcc	.+32     	; 0xa6fe <_ZN13RemoteControl10editar_posEh+0x5a>
    a6de:	63 31       	cpi	r22, 0x13	; 19
    a6e0:	09 f4       	brne	.+2      	; 0xa6e4 <_ZN13RemoteControl10editar_posEh+0x40>
    a6e2:	e8 c0       	rjmp	.+464    	; 0xa8b4 <_ZN13RemoteControl10editar_posEh+0x210>
    a6e4:	64 31       	cpi	r22, 0x14	; 20
    a6e6:	20 f4       	brcc	.+8      	; 0xa6f0 <_ZN13RemoteControl10editar_posEh+0x4c>
    a6e8:	60 31       	cpi	r22, 0x10	; 16
    a6ea:	09 f0       	breq	.+2      	; 0xa6ee <_ZN13RemoteControl10editar_posEh+0x4a>
    a6ec:	72 c2       	rjmp	.+1252   	; 0xabd2 <_ZN13RemoteControl10editar_posEh+0x52e>
    a6ee:	cf c0       	rjmp	.+414    	; 0xa88e <_ZN13RemoteControl10editar_posEh+0x1ea>
    a6f0:	6a 31       	cpi	r22, 0x1A	; 26
    a6f2:	09 f4       	brne	.+2      	; 0xa6f6 <_ZN13RemoteControl10editar_posEh+0x52>
    a6f4:	9d c1       	rjmp	.+826    	; 0xaa30 <_ZN13RemoteControl10editar_posEh+0x38c>
    a6f6:	6e 31       	cpi	r22, 0x1E	; 30
    a6f8:	09 f0       	breq	.+2      	; 0xa6fc <_ZN13RemoteControl10editar_posEh+0x58>
    a6fa:	6b c2       	rjmp	.+1238   	; 0xabd2 <_ZN13RemoteControl10editar_posEh+0x52e>
    a6fc:	f7 c1       	rjmp	.+1006   	; 0xaaec <_ZN13RemoteControl10editar_posEh+0x448>
    a6fe:	6d 35       	cpi	r22, 0x5D	; 93
    a700:	09 f4       	brne	.+2      	; 0xa704 <_ZN13RemoteControl10editar_posEh+0x60>
    a702:	88 c0       	rjmp	.+272    	; 0xa814 <_ZN13RemoteControl10editar_posEh+0x170>
    a704:	6e 35       	cpi	r22, 0x5E	; 94
    a706:	38 f4       	brcc	.+14     	; 0xa716 <_ZN13RemoteControl10editar_posEh+0x72>
    a708:	6f 34       	cpi	r22, 0x4F	; 79
    a70a:	09 f4       	brne	.+2      	; 0xa70e <_ZN13RemoteControl10editar_posEh+0x6a>
    a70c:	26 c1       	rjmp	.+588    	; 0xa95a <_ZN13RemoteControl10editar_posEh+0x2b6>
    a70e:	6c 35       	cpi	r22, 0x5C	; 92
    a710:	09 f0       	breq	.+2      	; 0xa714 <_ZN13RemoteControl10editar_posEh+0x70>
    a712:	5f c2       	rjmp	.+1214   	; 0xabd2 <_ZN13RemoteControl10editar_posEh+0x52e>
    a714:	07 c0       	rjmp	.+14     	; 0xa724 <_ZN13RemoteControl10editar_posEh+0x80>
    a716:	6e 35       	cpi	r22, 0x5E	; 94
    a718:	09 f4       	brne	.+2      	; 0xa71c <_ZN13RemoteControl10editar_posEh+0x78>
    a71a:	54 c0       	rjmp	.+168    	; 0xa7c4 <_ZN13RemoteControl10editar_posEh+0x120>
    a71c:	6f 35       	cpi	r22, 0x5F	; 95
    a71e:	09 f0       	breq	.+2      	; 0xa722 <_ZN13RemoteControl10editar_posEh+0x7e>
    a720:	58 c2       	rjmp	.+1200   	; 0xabd2 <_ZN13RemoteControl10editar_posEh+0x52e>
    a722:	1f c0       	rjmp	.+62     	; 0xa762 <_ZN13RemoteControl10editar_posEh+0xbe>
		case RC_UP:
			texto1 = "|";
    a724:	8e 01       	movw	r16, r28
    a726:	0f 5f       	subi	r16, 0xFF	; 255
    a728:	1f 4f       	sbci	r17, 0xFF	; 255
    a72a:	c8 01       	movw	r24, r16
    a72c:	64 ec       	ldi	r22, 0xC4	; 196
    a72e:	72 e0       	ldi	r23, 0x02	; 2
    a730:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    a734:	c3 01       	movw	r24, r6
    a736:	88 96       	adiw	r24, 0x28	; 40
    a738:	b8 01       	movw	r22, r16
    a73a:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    a73e:	c8 01       	movw	r24, r16
    a740:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			if (edit_pos_modo==EXTREMOS) {
    a744:	80 91 b4 14 	lds	r24, 0x14B4
    a748:	88 23       	and	r24, r24
    a74a:	09 f0       	breq	.+2      	; 0xa74e <_ZN13RemoteControl10editar_posEh+0xaa>
    a74c:	42 c2       	rjmp	.+1156   	; 0xabd2 <_ZN13RemoteControl10editar_posEh+0x52e>
				edit_position (mov.get_pos_ref(), 0, 0, step, 0);
    a74e:	81 ee       	ldi	r24, 0xE1	; 225
    a750:	90 e1       	ldi	r25, 0x10	; 16
    a752:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN10Movimiento11get_pos_refEv>
    a756:	f3 01       	movw	r30, r6
    a758:	c1 88       	ldd	r12, Z+17	; 0x11
    a75a:	d2 88       	ldd	r13, Z+18	; 0x12
    a75c:	e3 88       	ldd	r14, Z+19	; 0x13
    a75e:	f4 88       	ldd	r15, Z+20	; 0x14
    a760:	22 c0       	rjmp	.+68     	; 0xa7a6 <_ZN13RemoteControl10editar_posEh+0x102>
				mov.goto_pos_ref();
			}
			break;
		
		case RC_DOWN:
			texto1 = "^";
    a762:	8e 01       	movw	r16, r28
    a764:	09 5f       	subi	r16, 0xF9	; 249
    a766:	1f 4f       	sbci	r17, 0xFF	; 255
    a768:	c8 01       	movw	r24, r16
    a76a:	66 ec       	ldi	r22, 0xC6	; 198
    a76c:	72 e0       	ldi	r23, 0x02	; 2
    a76e:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    a772:	c3 01       	movw	r24, r6
    a774:	88 96       	adiw	r24, 0x28	; 40
    a776:	b8 01       	movw	r22, r16
    a778:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    a77c:	c8 01       	movw	r24, r16
    a77e:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			if (edit_pos_modo==EXTREMOS) {
    a782:	80 91 b4 14 	lds	r24, 0x14B4
    a786:	88 23       	and	r24, r24
    a788:	09 f0       	breq	.+2      	; 0xa78c <_ZN13RemoteControl10editar_posEh+0xe8>
    a78a:	23 c2       	rjmp	.+1094   	; 0xabd2 <_ZN13RemoteControl10editar_posEh+0x52e>
				edit_position (mov.get_pos_ref(), 0, 0, -step, 0);
    a78c:	81 ee       	ldi	r24, 0xE1	; 225
    a78e:	90 e1       	ldi	r25, 0x10	; 16
    a790:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN10Movimiento11get_pos_refEv>
    a794:	f3 01       	movw	r30, r6
    a796:	c1 88       	ldd	r12, Z+17	; 0x11
    a798:	d2 88       	ldd	r13, Z+18	; 0x12
    a79a:	e3 88       	ldd	r14, Z+19	; 0x13
    a79c:	f4 88       	ldd	r15, Z+20	; 0x14
    a79e:	f7 fa       	bst	r15, 7
    a7a0:	f0 94       	com	r15
    a7a2:	f7 f8       	bld	r15, 7
    a7a4:	f0 94       	com	r15
    a7a6:	40 e0       	ldi	r20, 0x00	; 0
    a7a8:	50 e0       	ldi	r21, 0x00	; 0
    a7aa:	60 e0       	ldi	r22, 0x00	; 0
    a7ac:	70 e0       	ldi	r23, 0x00	; 0
    a7ae:	8a 01       	movw	r16, r20
    a7b0:	9b 01       	movw	r18, r22
    a7b2:	4a 01       	movw	r8, r20
    a7b4:	5b 01       	movw	r10, r22
    a7b6:	0e 94 dd 6e 	call	0xddba	; 0xddba <_Z13edit_positionP7COORD3Dffff>
				mov.goto_pos_ref();
    a7ba:	81 ee       	ldi	r24, 0xE1	; 225
    a7bc:	90 e1       	ldi	r25, 0x10	; 16
    a7be:	0e 94 13 22 	call	0x4426	; 0x4426 <_ZN10Movimiento12goto_pos_refEv>
    a7c2:	07 c2       	rjmp	.+1038   	; 0xabd2 <_ZN13RemoteControl10editar_posEh+0x52e>
			}
			break;
		
		case RC_RIGHT:
			texto1 = "<";
    a7c4:	8e 01       	movw	r16, r28
    a7c6:	03 5f       	subi	r16, 0xF3	; 243
    a7c8:	1f 4f       	sbci	r17, 0xFF	; 255
    a7ca:	c8 01       	movw	r24, r16
    a7cc:	68 ec       	ldi	r22, 0xC8	; 200
    a7ce:	72 e0       	ldi	r23, 0x02	; 2
    a7d0:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    a7d4:	c3 01       	movw	r24, r6
    a7d6:	88 96       	adiw	r24, 0x28	; 40
    a7d8:	b8 01       	movw	r22, r16
    a7da:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    a7de:	c8 01       	movw	r24, r16
    a7e0:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			if (edit_pos_modo==EXTREMOS) {
    a7e4:	80 91 b4 14 	lds	r24, 0x14B4
    a7e8:	88 23       	and	r24, r24
    a7ea:	51 f4       	brne	.+20     	; 0xa800 <_ZN13RemoteControl10editar_posEh+0x15c>
				edit_position (mov.get_pos_ref(), 0, step, 0, 0);
    a7ec:	81 ee       	ldi	r24, 0xE1	; 225
    a7ee:	90 e1       	ldi	r25, 0x10	; 16
    a7f0:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN10Movimiento11get_pos_refEv>
    a7f4:	f3 01       	movw	r30, r6
    a7f6:	01 89       	ldd	r16, Z+17	; 0x11
    a7f8:	12 89       	ldd	r17, Z+18	; 0x12
    a7fa:	23 89       	ldd	r18, Z+19	; 0x13
    a7fc:	34 89       	ldd	r19, Z+20	; 0x14
    a7fe:	28 c0       	rjmp	.+80     	; 0xa850 <_ZN13RemoteControl10editar_posEh+0x1ac>
			} else {
				edit_position (mov.get_pos_ref(), 0, 0, 0, step);
    a800:	81 ee       	ldi	r24, 0xE1	; 225
    a802:	90 e1       	ldi	r25, 0x10	; 16
    a804:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN10Movimiento11get_pos_refEv>
    a808:	f3 01       	movw	r30, r6
    a80a:	81 88       	ldd	r8, Z+17	; 0x11
    a80c:	92 88       	ldd	r9, Z+18	; 0x12
    a80e:	a3 88       	ldd	r10, Z+19	; 0x13
    a810:	b4 88       	ldd	r11, Z+20	; 0x14
    a812:	34 c0       	rjmp	.+104    	; 0xa87c <_ZN13RemoteControl10editar_posEh+0x1d8>
			}
			mov.goto_pos_ref();
			break;
	
		case RC_LEFT:
			texto1 = ">";
    a814:	8e 01       	movw	r16, r28
    a816:	0d 5e       	subi	r16, 0xED	; 237
    a818:	1f 4f       	sbci	r17, 0xFF	; 255
    a81a:	c8 01       	movw	r24, r16
    a81c:	6a ec       	ldi	r22, 0xCA	; 202
    a81e:	72 e0       	ldi	r23, 0x02	; 2
    a820:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    a824:	c3 01       	movw	r24, r6
    a826:	88 96       	adiw	r24, 0x28	; 40
    a828:	b8 01       	movw	r22, r16
    a82a:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    a82e:	c8 01       	movw	r24, r16
    a830:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			if (edit_pos_modo==EXTREMOS) {
    a834:	80 91 b4 14 	lds	r24, 0x14B4
    a838:	88 23       	and	r24, r24
    a83a:	99 f4       	brne	.+38     	; 0xa862 <_ZN13RemoteControl10editar_posEh+0x1be>
				edit_position (mov.get_pos_ref(), 0, -step, 0, 0);
    a83c:	81 ee       	ldi	r24, 0xE1	; 225
    a83e:	90 e1       	ldi	r25, 0x10	; 16
    a840:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN10Movimiento11get_pos_refEv>
    a844:	f3 01       	movw	r30, r6
    a846:	01 89       	ldd	r16, Z+17	; 0x11
    a848:	12 89       	ldd	r17, Z+18	; 0x12
    a84a:	23 89       	ldd	r18, Z+19	; 0x13
    a84c:	34 89       	ldd	r19, Z+20	; 0x14
    a84e:	30 58       	subi	r19, 0x80	; 128
    a850:	40 e0       	ldi	r20, 0x00	; 0
    a852:	50 e0       	ldi	r21, 0x00	; 0
    a854:	60 e0       	ldi	r22, 0x00	; 0
    a856:	70 e0       	ldi	r23, 0x00	; 0
    a858:	6a 01       	movw	r12, r20
    a85a:	7b 01       	movw	r14, r22
    a85c:	4a 01       	movw	r8, r20
    a85e:	5b 01       	movw	r10, r22
    a860:	aa cf       	rjmp	.-172    	; 0xa7b6 <_ZN13RemoteControl10editar_posEh+0x112>
			} else {
				edit_position (mov.get_pos_ref(), 0, 0, 0, -step);
    a862:	81 ee       	ldi	r24, 0xE1	; 225
    a864:	90 e1       	ldi	r25, 0x10	; 16
    a866:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN10Movimiento11get_pos_refEv>
    a86a:	f3 01       	movw	r30, r6
    a86c:	81 88       	ldd	r8, Z+17	; 0x11
    a86e:	92 88       	ldd	r9, Z+18	; 0x12
    a870:	a3 88       	ldd	r10, Z+19	; 0x13
    a872:	b4 88       	ldd	r11, Z+20	; 0x14
    a874:	b7 fa       	bst	r11, 7
    a876:	b0 94       	com	r11
    a878:	b7 f8       	bld	r11, 7
    a87a:	b0 94       	com	r11
    a87c:	40 e0       	ldi	r20, 0x00	; 0
    a87e:	50 e0       	ldi	r21, 0x00	; 0
    a880:	60 e0       	ldi	r22, 0x00	; 0
    a882:	70 e0       	ldi	r23, 0x00	; 0
    a884:	8a 01       	movw	r16, r20
    a886:	9b 01       	movw	r18, r22
    a888:	6a 01       	movw	r12, r20
    a88a:	7b 01       	movw	r14, r22
    a88c:	94 cf       	rjmp	.-216    	; 0xa7b6 <_ZN13RemoteControl10editar_posEh+0x112>
			}
			mov.goto_pos_ref();
			break;

		case RC_MENU: 
			texto1 = "EXTREMOS";
    a88e:	8e 01       	movw	r16, r28
    a890:	07 5e       	subi	r16, 0xE7	; 231
    a892:	1f 4f       	sbci	r17, 0xFF	; 255
    a894:	c8 01       	movw	r24, r16
    a896:	6c ec       	ldi	r22, 0xCC	; 204
    a898:	72 e0       	ldi	r23, 0x02	; 2
    a89a:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    a89e:	c3 01       	movw	r24, r6
    a8a0:	88 96       	adiw	r24, 0x28	; 40
    a8a2:	b8 01       	movw	r22, r16
    a8a4:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    a8a8:	c8 01       	movw	r24, r16
    a8aa:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			edit_pos_modo = EXTREMOS; 
    a8ae:	10 92 b4 14 	sts	0x14B4, r1
    a8b2:	8f c1       	rjmp	.+798    	; 0xabd2 <_ZN13RemoteControl10editar_posEh+0x52e>
			break;
			
		case RC_MTS:
			texto1 = "MEDIOS";
    a8b4:	8e 01       	movw	r16, r28
    a8b6:	01 5e       	subi	r16, 0xE1	; 225
    a8b8:	1f 4f       	sbci	r17, 0xFF	; 255
    a8ba:	c8 01       	movw	r24, r16
    a8bc:	65 ed       	ldi	r22, 0xD5	; 213
    a8be:	72 e0       	ldi	r23, 0x02	; 2
    a8c0:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    a8c4:	c3 01       	movw	r24, r6
    a8c6:	88 96       	adiw	r24, 0x28	; 40
    a8c8:	b8 01       	movw	r22, r16
    a8ca:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    a8ce:	c8 01       	movw	r24, r16
    a8d0:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			edit_pos_modo = MEDIOS;  
    a8d4:	81 e0       	ldi	r24, 0x01	; 1
    a8d6:	80 93 b4 14 	sts	0x14B4, r24
    a8da:	7b c1       	rjmp	.+758    	; 0xabd2 <_ZN13RemoteControl10editar_posEh+0x52e>
			break;
		
		case RC_EXIT:
			texto1 = "h-";
    a8dc:	8e 01       	movw	r16, r28
    a8de:	0b 5d       	subi	r16, 0xDB	; 219
    a8e0:	1f 4f       	sbci	r17, 0xFF	; 255
    a8e2:	c8 01       	movw	r24, r16
    a8e4:	6c ed       	ldi	r22, 0xDC	; 220
    a8e6:	72 e0       	ldi	r23, 0x02	; 2
    a8e8:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    a8ec:	c3 01       	movw	r24, r6
    a8ee:	88 96       	adiw	r24, 0x28	; 40
    a8f0:	b8 01       	movw	r22, r16
    a8f2:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    a8f6:	c8 01       	movw	r24, r16
    a8f8:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			edit_position (mov.get_pos_ref(), step, 0, 0, 0);
    a8fc:	81 ee       	ldi	r24, 0xE1	; 225
    a8fe:	90 e1       	ldi	r25, 0x10	; 16
    a900:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN10Movimiento11get_pos_refEv>
    a904:	f3 01       	movw	r30, r6
    a906:	41 89       	ldd	r20, Z+17	; 0x11
    a908:	52 89       	ldd	r21, Z+18	; 0x12
    a90a:	63 89       	ldd	r22, Z+19	; 0x13
    a90c:	74 89       	ldd	r23, Z+20	; 0x14
    a90e:	00 e0       	ldi	r16, 0x00	; 0
    a910:	10 e0       	ldi	r17, 0x00	; 0
    a912:	20 e0       	ldi	r18, 0x00	; 0
    a914:	30 e0       	ldi	r19, 0x00	; 0
    a916:	68 01       	movw	r12, r16
    a918:	79 01       	movw	r14, r18
    a91a:	48 01       	movw	r8, r16
    a91c:	59 01       	movw	r10, r18
    a91e:	0e 94 dd 6e 	call	0xddba	; 0xddba <_Z13edit_positionP7COORD3Dffff>
			mov.translation ((COORD3D) {0, step, 0}, step/(velocidad*TICK));  // sustituir la fórmula de velocidad por un número concreto
    a922:	f3 01       	movw	r30, r6
    a924:	e1 88       	ldd	r14, Z+17	; 0x11
    a926:	f2 88       	ldd	r15, Z+18	; 0x12
    a928:	03 89       	ldd	r16, Z+19	; 0x13
    a92a:	14 89       	ldd	r17, Z+20	; 0x14
    a92c:	45 e5       	ldi	r20, 0x55	; 85
    a92e:	a4 2e       	mov	r10, r20
    a930:	b1 2c       	mov	r11, r1
    a932:	ac 0e       	add	r10, r28
    a934:	bd 1e       	adc	r11, r29
    a936:	80 e0       	ldi	r24, 0x00	; 0
    a938:	90 e0       	ldi	r25, 0x00	; 0
    a93a:	a0 e0       	ldi	r26, 0x00	; 0
    a93c:	b0 e0       	ldi	r27, 0x00	; 0
    a93e:	f5 01       	movw	r30, r10
    a940:	80 83       	st	Z, r24
    a942:	91 83       	std	Z+1, r25	; 0x01
    a944:	a2 83       	std	Z+2, r26	; 0x02
    a946:	b3 83       	std	Z+3, r27	; 0x03
    a948:	e4 82       	std	Z+4, r14	; 0x04
    a94a:	f5 82       	std	Z+5, r15	; 0x05
    a94c:	06 83       	std	Z+6, r16	; 0x06
    a94e:	17 83       	std	Z+7, r17	; 0x07
    a950:	80 87       	std	Z+8, r24	; 0x08
    a952:	91 87       	std	Z+9, r25	; 0x09
    a954:	a2 87       	std	Z+10, r26	; 0x0a
    a956:	b3 87       	std	Z+11, r27	; 0x0b
    a958:	42 c0       	rjmp	.+132    	; 0xa9de <_ZN13RemoteControl10editar_posEh+0x33a>
			break;
			
		case RC_CCTTX:
			texto1 = "h+";
    a95a:	8e 01       	movw	r16, r28
    a95c:	05 5d       	subi	r16, 0xD5	; 213
    a95e:	1f 4f       	sbci	r17, 0xFF	; 255
    a960:	c8 01       	movw	r24, r16
    a962:	6f ed       	ldi	r22, 0xDF	; 223
    a964:	72 e0       	ldi	r23, 0x02	; 2
    a966:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    a96a:	c3 01       	movw	r24, r6
    a96c:	88 96       	adiw	r24, 0x28	; 40
    a96e:	b8 01       	movw	r22, r16
    a970:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    a974:	c8 01       	movw	r24, r16
    a976:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			edit_position (mov.get_pos_ref(), -step, 0, 0, 0);  
    a97a:	81 ee       	ldi	r24, 0xE1	; 225
    a97c:	90 e1       	ldi	r25, 0x10	; 16
    a97e:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN10Movimiento11get_pos_refEv>
    a982:	f3 01       	movw	r30, r6
    a984:	41 89       	ldd	r20, Z+17	; 0x11
    a986:	52 89       	ldd	r21, Z+18	; 0x12
    a988:	63 89       	ldd	r22, Z+19	; 0x13
    a98a:	74 89       	ldd	r23, Z+20	; 0x14
    a98c:	70 58       	subi	r23, 0x80	; 128
    a98e:	00 e0       	ldi	r16, 0x00	; 0
    a990:	10 e0       	ldi	r17, 0x00	; 0
    a992:	20 e0       	ldi	r18, 0x00	; 0
    a994:	30 e0       	ldi	r19, 0x00	; 0
    a996:	68 01       	movw	r12, r16
    a998:	79 01       	movw	r14, r18
    a99a:	48 01       	movw	r8, r16
    a99c:	59 01       	movw	r10, r18
    a99e:	0e 94 dd 6e 	call	0xddba	; 0xddba <_Z13edit_positionP7COORD3Dffff>
			mov.translation ((COORD3D) {0, -step, 0}, step/(velocidad*TICK)); 
    a9a2:	f3 01       	movw	r30, r6
    a9a4:	e1 88       	ldd	r14, Z+17	; 0x11
    a9a6:	f2 88       	ldd	r15, Z+18	; 0x12
    a9a8:	03 89       	ldd	r16, Z+19	; 0x13
    a9aa:	14 89       	ldd	r17, Z+20	; 0x14
    a9ac:	31 e6       	ldi	r19, 0x61	; 97
    a9ae:	a3 2e       	mov	r10, r19
    a9b0:	b1 2c       	mov	r11, r1
    a9b2:	ac 0e       	add	r10, r28
    a9b4:	bd 1e       	adc	r11, r29
    a9b6:	20 e0       	ldi	r18, 0x00	; 0
    a9b8:	30 e0       	ldi	r19, 0x00	; 0
    a9ba:	40 e0       	ldi	r20, 0x00	; 0
    a9bc:	50 e0       	ldi	r21, 0x00	; 0
    a9be:	f5 01       	movw	r30, r10
    a9c0:	20 83       	st	Z, r18
    a9c2:	31 83       	std	Z+1, r19	; 0x01
    a9c4:	42 83       	std	Z+2, r20	; 0x02
    a9c6:	53 83       	std	Z+3, r21	; 0x03
    a9c8:	d8 01       	movw	r26, r16
    a9ca:	c7 01       	movw	r24, r14
    a9cc:	b0 58       	subi	r27, 0x80	; 128
    a9ce:	84 83       	std	Z+4, r24	; 0x04
    a9d0:	95 83       	std	Z+5, r25	; 0x05
    a9d2:	a6 83       	std	Z+6, r26	; 0x06
    a9d4:	b7 83       	std	Z+7, r27	; 0x07
    a9d6:	20 87       	std	Z+8, r18	; 0x08
    a9d8:	31 87       	std	Z+9, r19	; 0x09
    a9da:	42 87       	std	Z+10, r20	; 0x0a
    a9dc:	53 87       	std	Z+11, r21	; 0x0b
    a9de:	f3 01       	movw	r30, r6
    a9e0:	60 81       	ld	r22, Z
    a9e2:	71 81       	ldd	r23, Z+1	; 0x01
    a9e4:	82 81       	ldd	r24, Z+2	; 0x02
    a9e6:	93 81       	ldd	r25, Z+3	; 0x03
    a9e8:	2f e6       	ldi	r18, 0x6F	; 111
    a9ea:	32 e1       	ldi	r19, 0x12	; 18
    a9ec:	43 e8       	ldi	r20, 0x83	; 131
    a9ee:	5b e3       	ldi	r21, 0x3B	; 59
    a9f0:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    a9f4:	9b 01       	movw	r18, r22
    a9f6:	ac 01       	movw	r20, r24
    a9f8:	c8 01       	movw	r24, r16
    a9fa:	b7 01       	movw	r22, r14
    a9fc:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    aa00:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <__fixsfsi>
    aa04:	3b 01       	movw	r6, r22
    aa06:	4c 01       	movw	r8, r24
    aa08:	81 ee       	ldi	r24, 0xE1	; 225
    aa0a:	90 e1       	ldi	r25, 0x10	; 16
    aa0c:	f5 01       	movw	r30, r10
    aa0e:	c0 80       	ld	r12, Z
    aa10:	d1 80       	ldd	r13, Z+1	; 0x01
    aa12:	e2 80       	ldd	r14, Z+2	; 0x02
    aa14:	f3 80       	ldd	r15, Z+3	; 0x03
    aa16:	04 81       	ldd	r16, Z+4	; 0x04
    aa18:	15 81       	ldd	r17, Z+5	; 0x05
    aa1a:	26 81       	ldd	r18, Z+6	; 0x06
    aa1c:	37 81       	ldd	r19, Z+7	; 0x07
    aa1e:	40 85       	ldd	r20, Z+8	; 0x08
    aa20:	51 85       	ldd	r21, Z+9	; 0x09
    aa22:	62 85       	ldd	r22, Z+10	; 0x0a
    aa24:	73 85       	ldd	r23, Z+11	; 0x0b
    aa26:	53 01       	movw	r10, r6
    aa28:	88 24       	eor	r8, r8
    aa2a:	0e 94 6f 27 	call	0x4ede	; 0x4ede <_ZN10Movimiento11translationE7COORD3Dih>
    aa2e:	d1 c0       	rjmp	.+418    	; 0xabd2 <_ZN13RemoteControl10editar_posEh+0x52e>
			break;
	
		// esto también se repite
		case RC_CH_UP:
			if (pantalla.isBusy()) {break;}
    aa30:	80 ec       	ldi	r24, 0xC0	; 192
    aa32:	96 e0       	ldi	r25, 0x06	; 6
    aa34:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    aa38:	88 23       	and	r24, r24
    aa3a:	09 f0       	breq	.+2      	; 0xaa3e <_ZN13RemoteControl10editar_posEh+0x39a>
    aa3c:	ca c0       	rjmp	.+404    	; 0xabd2 <_ZN13RemoteControl10editar_posEh+0x52e>
			if (!isMoving) {step = constrain (step+inc, .5, 5);}
    aa3e:	f3 01       	movw	r30, r6
    aa40:	85 a1       	ldd	r24, Z+37	; 0x25
    aa42:	88 23       	and	r24, r24
    aa44:	c1 f5       	brne	.+112    	; 0xaab6 <_ZN13RemoteControl10editar_posEh+0x412>
    aa46:	61 89       	ldd	r22, Z+17	; 0x11
    aa48:	72 89       	ldd	r23, Z+18	; 0x12
    aa4a:	83 89       	ldd	r24, Z+19	; 0x13
    aa4c:	94 89       	ldd	r25, Z+20	; 0x14
    aa4e:	21 a1       	ldd	r18, Z+33	; 0x21
    aa50:	32 a1       	ldd	r19, Z+34	; 0x22
    aa52:	43 a1       	ldd	r20, Z+35	; 0x23
    aa54:	54 a1       	ldd	r21, Z+36	; 0x24
    aa56:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    aa5a:	7b 01       	movw	r14, r22
    aa5c:	8c 01       	movw	r16, r24
    aa5e:	20 e0       	ldi	r18, 0x00	; 0
    aa60:	30 e0       	ldi	r19, 0x00	; 0
    aa62:	40 e0       	ldi	r20, 0x00	; 0
    aa64:	5f e3       	ldi	r21, 0x3F	; 63
    aa66:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    aa6a:	88 23       	and	r24, r24
    aa6c:	5c f4       	brge	.+22     	; 0xaa84 <_ZN13RemoteControl10editar_posEh+0x3e0>
    aa6e:	0f 2e       	mov	r0, r31
    aa70:	f0 e0       	ldi	r31, 0x00	; 0
    aa72:	ef 2e       	mov	r14, r31
    aa74:	f0 e0       	ldi	r31, 0x00	; 0
    aa76:	ff 2e       	mov	r15, r31
    aa78:	f0 e0       	ldi	r31, 0x00	; 0
    aa7a:	0f 2f       	mov	r16, r31
    aa7c:	ff e3       	ldi	r31, 0x3F	; 63
    aa7e:	1f 2f       	mov	r17, r31
    aa80:	f0 2d       	mov	r31, r0
    aa82:	14 c0       	rjmp	.+40     	; 0xaaac <_ZN13RemoteControl10editar_posEh+0x408>
    aa84:	c8 01       	movw	r24, r16
    aa86:	b7 01       	movw	r22, r14
    aa88:	20 e0       	ldi	r18, 0x00	; 0
    aa8a:	30 e0       	ldi	r19, 0x00	; 0
    aa8c:	40 ea       	ldi	r20, 0xA0	; 160
    aa8e:	50 e4       	ldi	r21, 0x40	; 64
    aa90:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <__gesf2>
    aa94:	18 16       	cp	r1, r24
    aa96:	54 f4       	brge	.+20     	; 0xaaac <_ZN13RemoteControl10editar_posEh+0x408>
    aa98:	0f 2e       	mov	r0, r31
    aa9a:	f0 e0       	ldi	r31, 0x00	; 0
    aa9c:	ef 2e       	mov	r14, r31
    aa9e:	f0 e0       	ldi	r31, 0x00	; 0
    aaa0:	ff 2e       	mov	r15, r31
    aaa2:	f0 ea       	ldi	r31, 0xA0	; 160
    aaa4:	0f 2f       	mov	r16, r31
    aaa6:	f0 e4       	ldi	r31, 0x40	; 64
    aaa8:	1f 2f       	mov	r17, r31
    aaaa:	f0 2d       	mov	r31, r0
    aaac:	f3 01       	movw	r30, r6
    aaae:	e1 8a       	std	Z+17, r14	; 0x11
    aab0:	f2 8a       	std	Z+18, r15	; 0x12
    aab2:	03 8b       	std	Z+19, r16	; 0x13
    aab4:	14 8b       	std	Z+20, r17	; 0x14
			texto1 = "Step " + float2string (step);
    aab6:	27 e3       	ldi	r18, 0x37	; 55
    aab8:	c2 2e       	mov	r12, r18
    aaba:	d1 2c       	mov	r13, r1
    aabc:	cc 0e       	add	r12, r28
    aabe:	dd 1e       	adc	r13, r29
    aac0:	c6 01       	movw	r24, r12
    aac2:	6e eb       	ldi	r22, 0xBE	; 190
    aac4:	72 e0       	ldi	r23, 0x02	; 2
    aac6:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    aaca:	91 e3       	ldi	r25, 0x31	; 49
    aacc:	e9 2e       	mov	r14, r25
    aace:	f1 2c       	mov	r15, r1
    aad0:	ec 0e       	add	r14, r28
    aad2:	fd 1e       	adc	r15, r29
    aad4:	f3 01       	movw	r30, r6
    aad6:	41 89       	ldd	r20, Z+17	; 0x11
    aad8:	52 89       	ldd	r21, Z+18	; 0x12
    aada:	63 89       	ldd	r22, Z+19	; 0x13
    aadc:	74 89       	ldd	r23, Z+20	; 0x14
    aade:	c7 01       	movw	r24, r14
    aae0:	0e 94 51 67 	call	0xcea2	; 0xcea2 <_Z12float2stringf>
    aae4:	8e 01       	movw	r16, r28
    aae6:	03 5c       	subi	r16, 0xC3	; 195
    aae8:	1f 4f       	sbci	r17, 0xFF	; 255
    aaea:	5d c0       	rjmp	.+186    	; 0xaba6 <_ZN13RemoteControl10editar_posEh+0x502>
			retardo = true;
			break;
			
		case RC_CH_DN:
			if (pantalla.isBusy()) {break;}
    aaec:	80 ec       	ldi	r24, 0xC0	; 192
    aaee:	96 e0       	ldi	r25, 0x06	; 6
    aaf0:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    aaf4:	88 23       	and	r24, r24
    aaf6:	09 f0       	breq	.+2      	; 0xaafa <_ZN13RemoteControl10editar_posEh+0x456>
    aaf8:	6c c0       	rjmp	.+216    	; 0xabd2 <_ZN13RemoteControl10editar_posEh+0x52e>
			if (!isMoving) {step = constrain (step-inc, .5, 5);}
    aafa:	f3 01       	movw	r30, r6
    aafc:	85 a1       	ldd	r24, Z+37	; 0x25
    aafe:	88 23       	and	r24, r24
    ab00:	c1 f5       	brne	.+112    	; 0xab72 <_ZN13RemoteControl10editar_posEh+0x4ce>
    ab02:	61 89       	ldd	r22, Z+17	; 0x11
    ab04:	72 89       	ldd	r23, Z+18	; 0x12
    ab06:	83 89       	ldd	r24, Z+19	; 0x13
    ab08:	94 89       	ldd	r25, Z+20	; 0x14
    ab0a:	21 a1       	ldd	r18, Z+33	; 0x21
    ab0c:	32 a1       	ldd	r19, Z+34	; 0x22
    ab0e:	43 a1       	ldd	r20, Z+35	; 0x23
    ab10:	54 a1       	ldd	r21, Z+36	; 0x24
    ab12:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    ab16:	7b 01       	movw	r14, r22
    ab18:	8c 01       	movw	r16, r24
    ab1a:	20 e0       	ldi	r18, 0x00	; 0
    ab1c:	30 e0       	ldi	r19, 0x00	; 0
    ab1e:	40 e0       	ldi	r20, 0x00	; 0
    ab20:	5f e3       	ldi	r21, 0x3F	; 63
    ab22:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    ab26:	88 23       	and	r24, r24
    ab28:	5c f4       	brge	.+22     	; 0xab40 <_ZN13RemoteControl10editar_posEh+0x49c>
    ab2a:	0f 2e       	mov	r0, r31
    ab2c:	f0 e0       	ldi	r31, 0x00	; 0
    ab2e:	ef 2e       	mov	r14, r31
    ab30:	f0 e0       	ldi	r31, 0x00	; 0
    ab32:	ff 2e       	mov	r15, r31
    ab34:	f0 e0       	ldi	r31, 0x00	; 0
    ab36:	0f 2f       	mov	r16, r31
    ab38:	ff e3       	ldi	r31, 0x3F	; 63
    ab3a:	1f 2f       	mov	r17, r31
    ab3c:	f0 2d       	mov	r31, r0
    ab3e:	14 c0       	rjmp	.+40     	; 0xab68 <_ZN13RemoteControl10editar_posEh+0x4c4>
    ab40:	c8 01       	movw	r24, r16
    ab42:	b7 01       	movw	r22, r14
    ab44:	20 e0       	ldi	r18, 0x00	; 0
    ab46:	30 e0       	ldi	r19, 0x00	; 0
    ab48:	40 ea       	ldi	r20, 0xA0	; 160
    ab4a:	50 e4       	ldi	r21, 0x40	; 64
    ab4c:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <__gesf2>
    ab50:	18 16       	cp	r1, r24
    ab52:	54 f4       	brge	.+20     	; 0xab68 <_ZN13RemoteControl10editar_posEh+0x4c4>
    ab54:	0f 2e       	mov	r0, r31
    ab56:	f0 e0       	ldi	r31, 0x00	; 0
    ab58:	ef 2e       	mov	r14, r31
    ab5a:	f0 e0       	ldi	r31, 0x00	; 0
    ab5c:	ff 2e       	mov	r15, r31
    ab5e:	f0 ea       	ldi	r31, 0xA0	; 160
    ab60:	0f 2f       	mov	r16, r31
    ab62:	f0 e4       	ldi	r31, 0x40	; 64
    ab64:	1f 2f       	mov	r17, r31
    ab66:	f0 2d       	mov	r31, r0
    ab68:	f3 01       	movw	r30, r6
    ab6a:	e1 8a       	std	Z+17, r14	; 0x11
    ab6c:	f2 8a       	std	Z+18, r15	; 0x12
    ab6e:	03 8b       	std	Z+19, r16	; 0x13
    ab70:	14 8b       	std	Z+20, r17	; 0x14
			texto1 = "Step " + float2string (step);
    ab72:	89 e4       	ldi	r24, 0x49	; 73
    ab74:	c8 2e       	mov	r12, r24
    ab76:	d1 2c       	mov	r13, r1
    ab78:	cc 0e       	add	r12, r28
    ab7a:	dd 1e       	adc	r13, r29
    ab7c:	c6 01       	movw	r24, r12
    ab7e:	6e eb       	ldi	r22, 0xBE	; 190
    ab80:	72 e0       	ldi	r23, 0x02	; 2
    ab82:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    ab86:	03 e4       	ldi	r16, 0x43	; 67
    ab88:	e0 2e       	mov	r14, r16
    ab8a:	f1 2c       	mov	r15, r1
    ab8c:	ec 0e       	add	r14, r28
    ab8e:	fd 1e       	adc	r15, r29
    ab90:	f3 01       	movw	r30, r6
    ab92:	41 89       	ldd	r20, Z+17	; 0x11
    ab94:	52 89       	ldd	r21, Z+18	; 0x12
    ab96:	63 89       	ldd	r22, Z+19	; 0x13
    ab98:	74 89       	ldd	r23, Z+20	; 0x14
    ab9a:	c7 01       	movw	r24, r14
    ab9c:	0e 94 51 67 	call	0xcea2	; 0xcea2 <_Z12float2stringf>
    aba0:	8e 01       	movw	r16, r28
    aba2:	01 5b       	subi	r16, 0xB1	; 177
    aba4:	1f 4f       	sbci	r17, 0xFF	; 255
    aba6:	c8 01       	movw	r24, r16
    aba8:	b6 01       	movw	r22, r12
    abaa:	a7 01       	movw	r20, r14
    abac:	0e 94 4c 4d 	call	0x9a98	; 0x9a98 <_Zpl6StringRKS_>
    abb0:	c3 01       	movw	r24, r6
    abb2:	88 96       	adiw	r24, 0x28	; 40
    abb4:	b8 01       	movw	r22, r16
    abb6:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    abba:	c8 01       	movw	r24, r16
    abbc:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    abc0:	c7 01       	movw	r24, r14
    abc2:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    abc6:	c6 01       	movw	r24, r12
    abc8:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			retardo = true;
    abcc:	81 e0       	ldi	r24, 0x01	; 1
    abce:	f3 01       	movw	r30, r6
    abd0:	86 ab       	std	Z+54, r24	; 0x36
			break;
			
	}
	
}
    abd2:	c4 59       	subi	r28, 0x94	; 148
    abd4:	df 4f       	sbci	r29, 0xFF	; 255
    abd6:	0f b6       	in	r0, 0x3f	; 63
    abd8:	f8 94       	cli
    abda:	de bf       	out	0x3e, r29	; 62
    abdc:	0f be       	out	0x3f, r0	; 63
    abde:	cd bf       	out	0x3d, r28	; 61
    abe0:	cf 91       	pop	r28
    abe2:	df 91       	pop	r29
    abe4:	1f 91       	pop	r17
    abe6:	0f 91       	pop	r16
    abe8:	ff 90       	pop	r15
    abea:	ef 90       	pop	r14
    abec:	df 90       	pop	r13
    abee:	cf 90       	pop	r12
    abf0:	bf 90       	pop	r11
    abf2:	af 90       	pop	r10
    abf4:	9f 90       	pop	r9
    abf6:	8f 90       	pop	r8
    abf8:	7f 90       	pop	r7
    abfa:	6f 90       	pop	r6
    abfc:	08 95       	ret

0000abfe <_ZN13RemoteControl10rotacionesEh>:
			break;
	}

}

void RemoteControl::rotaciones (byte comando) {
    abfe:	2f 92       	push	r2
    ac00:	3f 92       	push	r3
    ac02:	4f 92       	push	r4
    ac04:	5f 92       	push	r5
    ac06:	6f 92       	push	r6
    ac08:	7f 92       	push	r7
    ac0a:	8f 92       	push	r8
    ac0c:	9f 92       	push	r9
    ac0e:	af 92       	push	r10
    ac10:	bf 92       	push	r11
    ac12:	cf 92       	push	r12
    ac14:	df 92       	push	r13
    ac16:	ef 92       	push	r14
    ac18:	ff 92       	push	r15
    ac1a:	0f 93       	push	r16
    ac1c:	1f 93       	push	r17
    ac1e:	df 93       	push	r29
    ac20:	cf 93       	push	r28
    ac22:	cd b7       	in	r28, 0x3d	; 61
    ac24:	de b7       	in	r29, 0x3e	; 62
    ac26:	c2 57       	subi	r28, 0x72	; 114
    ac28:	d0 40       	sbci	r29, 0x00	; 0
    ac2a:	0f b6       	in	r0, 0x3f	; 63
    ac2c:	f8 94       	cli
    ac2e:	de bf       	out	0x3e, r29	; 62
    ac30:	0f be       	out	0x3f, r0	; 63
    ac32:	cd bf       	out	0x3d, r28	; 61
    ac34:	1c 01       	movw	r2, r24
	
	switch (comando) {
    ac36:	60 35       	cpi	r22, 0x50	; 80
    ac38:	c8 f4       	brcc	.+50     	; 0xac6c <_ZN13RemoteControl10rotacionesEh+0x6e>
    ac3a:	6e 34       	cpi	r22, 0x4E	; 78
    ac3c:	08 f0       	brcs	.+2      	; 0xac40 <_ZN13RemoteControl10rotacionesEh+0x42>
    ac3e:	fd c0       	rjmp	.+506    	; 0xae3a <_ZN13RemoteControl10rotacionesEh+0x23c>
    ac40:	6a 31       	cpi	r22, 0x1A	; 26
    ac42:	09 f4       	brne	.+2      	; 0xac46 <_ZN13RemoteControl10rotacionesEh+0x48>
    ac44:	04 c2       	rjmp	.+1032   	; 0xb04e <_ZN13RemoteControl10rotacionesEh+0x450>
    ac46:	6b 31       	cpi	r22, 0x1B	; 27
    ac48:	38 f4       	brcc	.+14     	; 0xac58 <_ZN13RemoteControl10rotacionesEh+0x5a>
    ac4a:	60 31       	cpi	r22, 0x10	; 16
    ac4c:	09 f4       	brne	.+2      	; 0xac50 <_ZN13RemoteControl10rotacionesEh+0x52>
    ac4e:	d9 c0       	rjmp	.+434    	; 0xae02 <_ZN13RemoteControl10rotacionesEh+0x204>
    ac50:	63 31       	cpi	r22, 0x13	; 19
    ac52:	09 f0       	breq	.+2      	; 0xac56 <_ZN13RemoteControl10rotacionesEh+0x58>
    ac54:	cd c2       	rjmp	.+1434   	; 0xb1f0 <_ZN13RemoteControl10rotacionesEh+0x5f2>
    ac56:	d5 c0       	rjmp	.+426    	; 0xae02 <_ZN13RemoteControl10rotacionesEh+0x204>
    ac58:	6e 31       	cpi	r22, 0x1E	; 30
    ac5a:	09 f4       	brne	.+2      	; 0xac5e <_ZN13RemoteControl10rotacionesEh+0x60>
    ac5c:	56 c2       	rjmp	.+1196   	; 0xb10a <_ZN13RemoteControl10rotacionesEh+0x50c>
    ac5e:	6f 31       	cpi	r22, 0x1F	; 31
    ac60:	09 f4       	brne	.+2      	; 0xac64 <_ZN13RemoteControl10rotacionesEh+0x66>
    ac62:	9a c1       	rjmp	.+820    	; 0xaf98 <_ZN13RemoteControl10rotacionesEh+0x39a>
    ac64:	6b 31       	cpi	r22, 0x1B	; 27
    ac66:	09 f0       	breq	.+2      	; 0xac6a <_ZN13RemoteControl10rotacionesEh+0x6c>
    ac68:	c3 c2       	rjmp	.+1414   	; 0xb1f0 <_ZN13RemoteControl10rotacionesEh+0x5f2>
    ac6a:	3b c1       	rjmp	.+630    	; 0xaee2 <_ZN13RemoteControl10rotacionesEh+0x2e4>
    ac6c:	6d 35       	cpi	r22, 0x5D	; 93
    ac6e:	09 f4       	brne	.+2      	; 0xac72 <_ZN13RemoteControl10rotacionesEh+0x74>
    ac70:	8b c0       	rjmp	.+278    	; 0xad88 <_ZN13RemoteControl10rotacionesEh+0x18a>
    ac72:	6e 35       	cpi	r22, 0x5E	; 94
    ac74:	38 f4       	brcc	.+14     	; 0xac84 <_ZN13RemoteControl10rotacionesEh+0x86>
    ac76:	63 35       	cpi	r22, 0x53	; 83
    ac78:	09 f4       	brne	.+2      	; 0xac7c <_ZN13RemoteControl10rotacionesEh+0x7e>
    ac7a:	1e c1       	rjmp	.+572    	; 0xaeb8 <_ZN13RemoteControl10rotacionesEh+0x2ba>
    ac7c:	6c 35       	cpi	r22, 0x5C	; 92
    ac7e:	09 f0       	breq	.+2      	; 0xac82 <_ZN13RemoteControl10rotacionesEh+0x84>
    ac80:	b7 c2       	rjmp	.+1390   	; 0xb1f0 <_ZN13RemoteControl10rotacionesEh+0x5f2>
    ac82:	07 c0       	rjmp	.+14     	; 0xac92 <_ZN13RemoteControl10rotacionesEh+0x94>
    ac84:	6e 35       	cpi	r22, 0x5E	; 94
    ac86:	09 f4       	brne	.+2      	; 0xac8a <_ZN13RemoteControl10rotacionesEh+0x8c>
    ac88:	63 c0       	rjmp	.+198    	; 0xad50 <_ZN13RemoteControl10rotacionesEh+0x152>
    ac8a:	6f 35       	cpi	r22, 0x5F	; 95
    ac8c:	09 f0       	breq	.+2      	; 0xac90 <_ZN13RemoteControl10rotacionesEh+0x92>
    ac8e:	b0 c2       	rjmp	.+1376   	; 0xb1f0 <_ZN13RemoteControl10rotacionesEh+0x5f2>
    ac90:	1c c0       	rjmp	.+56     	; 0xacca <_ZN13RemoteControl10rotacionesEh+0xcc>
		case RC_UP:
			texto1 = "|";
    ac92:	8e 01       	movw	r16, r28
    ac94:	0f 5f       	subi	r16, 0xFF	; 255
    ac96:	1f 4f       	sbci	r17, 0xFF	; 255
    ac98:	c8 01       	movw	r24, r16
    ac9a:	64 ec       	ldi	r22, 0xC4	; 196
    ac9c:	72 e0       	ldi	r23, 0x02	; 2
    ac9e:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    aca2:	c1 01       	movw	r24, r2
    aca4:	88 96       	adiw	r24, 0x28	; 40
    aca6:	b8 01       	movw	r22, r16
    aca8:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    acac:	c8 01       	movw	r24, r16
    acae:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			mov.rotation (-step/15, 0, 0, step/(velocidad*TICK));  // radio = 15
    acb2:	f1 01       	movw	r30, r2
    acb4:	e1 88       	ldd	r14, Z+17	; 0x11
    acb6:	f2 88       	ldd	r15, Z+18	; 0x12
    acb8:	03 89       	ldd	r16, Z+19	; 0x13
    acba:	14 89       	ldd	r17, Z+20	; 0x14
    acbc:	c8 01       	movw	r24, r16
    acbe:	b7 01       	movw	r22, r14
    acc0:	20 e0       	ldi	r18, 0x00	; 0
    acc2:	30 e0       	ldi	r19, 0x00	; 0
    acc4:	40 e7       	ldi	r20, 0x70	; 112
    acc6:	51 ec       	ldi	r21, 0xC1	; 193
    acc8:	1b c0       	rjmp	.+54     	; 0xad00 <_ZN13RemoteControl10rotacionesEh+0x102>
			break;
		
		case RC_DOWN:
			texto1 = "^";
    acca:	8e 01       	movw	r16, r28
    accc:	09 5f       	subi	r16, 0xF9	; 249
    acce:	1f 4f       	sbci	r17, 0xFF	; 255
    acd0:	c8 01       	movw	r24, r16
    acd2:	66 ec       	ldi	r22, 0xC6	; 198
    acd4:	72 e0       	ldi	r23, 0x02	; 2
    acd6:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    acda:	c1 01       	movw	r24, r2
    acdc:	88 96       	adiw	r24, 0x28	; 40
    acde:	b8 01       	movw	r22, r16
    ace0:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    ace4:	c8 01       	movw	r24, r16
    ace6:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			mov.rotation (step/15, 0, 0, step/(velocidad*TICK));  // radio = 15
    acea:	f1 01       	movw	r30, r2
    acec:	e1 88       	ldd	r14, Z+17	; 0x11
    acee:	f2 88       	ldd	r15, Z+18	; 0x12
    acf0:	03 89       	ldd	r16, Z+19	; 0x13
    acf2:	14 89       	ldd	r17, Z+20	; 0x14
    acf4:	c8 01       	movw	r24, r16
    acf6:	b7 01       	movw	r22, r14
    acf8:	20 e0       	ldi	r18, 0x00	; 0
    acfa:	30 e0       	ldi	r19, 0x00	; 0
    acfc:	40 e7       	ldi	r20, 0x70	; 112
    acfe:	51 e4       	ldi	r21, 0x41	; 65
    ad00:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    ad04:	2b 01       	movw	r4, r22
    ad06:	3c 01       	movw	r6, r24
    ad08:	f1 01       	movw	r30, r2
    ad0a:	60 81       	ld	r22, Z
    ad0c:	71 81       	ldd	r23, Z+1	; 0x01
    ad0e:	82 81       	ldd	r24, Z+2	; 0x02
    ad10:	93 81       	ldd	r25, Z+3	; 0x03
    ad12:	2f e6       	ldi	r18, 0x6F	; 111
    ad14:	32 e1       	ldi	r19, 0x12	; 18
    ad16:	43 e8       	ldi	r20, 0x83	; 131
    ad18:	5b e3       	ldi	r21, 0x3B	; 59
    ad1a:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    ad1e:	9b 01       	movw	r18, r22
    ad20:	ac 01       	movw	r20, r24
    ad22:	c8 01       	movw	r24, r16
    ad24:	b7 01       	movw	r22, r14
    ad26:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    ad2a:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <__fixsfsi>
    ad2e:	4b 01       	movw	r8, r22
    ad30:	5c 01       	movw	r10, r24
    ad32:	81 ee       	ldi	r24, 0xE1	; 225
    ad34:	90 e1       	ldi	r25, 0x10	; 16
    ad36:	b3 01       	movw	r22, r6
    ad38:	a2 01       	movw	r20, r4
    ad3a:	00 e0       	ldi	r16, 0x00	; 0
    ad3c:	10 e0       	ldi	r17, 0x00	; 0
    ad3e:	20 e0       	ldi	r18, 0x00	; 0
    ad40:	30 e0       	ldi	r19, 0x00	; 0
    ad42:	68 01       	movw	r12, r16
    ad44:	79 01       	movw	r14, r18
    ad46:	54 01       	movw	r10, r8
    ad48:	88 24       	eor	r8, r8
    ad4a:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <_ZN10Movimiento8rotationEfffih>
    ad4e:	50 c2       	rjmp	.+1184   	; 0xb1f0 <_ZN13RemoteControl10rotacionesEh+0x5f2>
			break;
		
		case RC_RIGHT:
			texto1 = "<";
    ad50:	8e 01       	movw	r16, r28
    ad52:	03 5f       	subi	r16, 0xF3	; 243
    ad54:	1f 4f       	sbci	r17, 0xFF	; 255
    ad56:	c8 01       	movw	r24, r16
    ad58:	68 ec       	ldi	r22, 0xC8	; 200
    ad5a:	72 e0       	ldi	r23, 0x02	; 2
    ad5c:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    ad60:	c1 01       	movw	r24, r2
    ad62:	88 96       	adiw	r24, 0x28	; 40
    ad64:	b8 01       	movw	r22, r16
    ad66:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    ad6a:	c8 01       	movw	r24, r16
    ad6c:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			mov.rotation (0, 0, step/15, step/(velocidad*TICK));  // radio = 15
    ad70:	f1 01       	movw	r30, r2
    ad72:	81 88       	ldd	r8, Z+17	; 0x11
    ad74:	92 88       	ldd	r9, Z+18	; 0x12
    ad76:	a3 88       	ldd	r10, Z+19	; 0x13
    ad78:	b4 88       	ldd	r11, Z+20	; 0x14
    ad7a:	c5 01       	movw	r24, r10
    ad7c:	b4 01       	movw	r22, r8
    ad7e:	20 e0       	ldi	r18, 0x00	; 0
    ad80:	30 e0       	ldi	r19, 0x00	; 0
    ad82:	40 e7       	ldi	r20, 0x70	; 112
    ad84:	51 e4       	ldi	r21, 0x41	; 65
    ad86:	1b c0       	rjmp	.+54     	; 0xadbe <_ZN13RemoteControl10rotacionesEh+0x1c0>
			break;
	
		case RC_LEFT:
			texto1 = ">";
    ad88:	8e 01       	movw	r16, r28
    ad8a:	0d 5e       	subi	r16, 0xED	; 237
    ad8c:	1f 4f       	sbci	r17, 0xFF	; 255
    ad8e:	c8 01       	movw	r24, r16
    ad90:	6a ec       	ldi	r22, 0xCA	; 202
    ad92:	72 e0       	ldi	r23, 0x02	; 2
    ad94:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    ad98:	c1 01       	movw	r24, r2
    ad9a:	88 96       	adiw	r24, 0x28	; 40
    ad9c:	b8 01       	movw	r22, r16
    ad9e:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    ada2:	c8 01       	movw	r24, r16
    ada4:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			mov.rotation (0, 0, -step/15, step/(velocidad*TICK));  // radio = 15
    ada8:	f1 01       	movw	r30, r2
    adaa:	81 88       	ldd	r8, Z+17	; 0x11
    adac:	92 88       	ldd	r9, Z+18	; 0x12
    adae:	a3 88       	ldd	r10, Z+19	; 0x13
    adb0:	b4 88       	ldd	r11, Z+20	; 0x14
    adb2:	c5 01       	movw	r24, r10
    adb4:	b4 01       	movw	r22, r8
    adb6:	20 e0       	ldi	r18, 0x00	; 0
    adb8:	30 e0       	ldi	r19, 0x00	; 0
    adba:	40 e7       	ldi	r20, 0x70	; 112
    adbc:	51 ec       	ldi	r21, 0xC1	; 193
    adbe:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    adc2:	6b 01       	movw	r12, r22
    adc4:	7c 01       	movw	r14, r24
    adc6:	f1 01       	movw	r30, r2
    adc8:	60 81       	ld	r22, Z
    adca:	71 81       	ldd	r23, Z+1	; 0x01
    adcc:	82 81       	ldd	r24, Z+2	; 0x02
    adce:	93 81       	ldd	r25, Z+3	; 0x03
    add0:	2f e6       	ldi	r18, 0x6F	; 111
    add2:	32 e1       	ldi	r19, 0x12	; 18
    add4:	43 e8       	ldi	r20, 0x83	; 131
    add6:	5b e3       	ldi	r21, 0x3B	; 59
    add8:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    addc:	9b 01       	movw	r18, r22
    adde:	ac 01       	movw	r20, r24
    ade0:	c5 01       	movw	r24, r10
    ade2:	b4 01       	movw	r22, r8
    ade4:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    ade8:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <__fixsfsi>
    adec:	4b 01       	movw	r8, r22
    adee:	5c 01       	movw	r10, r24
    adf0:	81 ee       	ldi	r24, 0xE1	; 225
    adf2:	90 e1       	ldi	r25, 0x10	; 16
    adf4:	40 e0       	ldi	r20, 0x00	; 0
    adf6:	50 e0       	ldi	r21, 0x00	; 0
    adf8:	60 e0       	ldi	r22, 0x00	; 0
    adfa:	70 e0       	ldi	r23, 0x00	; 0
    adfc:	8a 01       	movw	r16, r20
    adfe:	9b 01       	movw	r18, r22
    ae00:	a2 cf       	rjmp	.-188    	; 0xad46 <_ZN13RemoteControl10rotacionesEh+0x148>
			break;

		case RC_MENU: case RC_MTS:
			texto1 = "h-";
    ae02:	8e 01       	movw	r16, r28
    ae04:	07 5e       	subi	r16, 0xE7	; 231
    ae06:	1f 4f       	sbci	r17, 0xFF	; 255
    ae08:	c8 01       	movw	r24, r16
    ae0a:	6c ed       	ldi	r22, 0xDC	; 220
    ae0c:	72 e0       	ldi	r23, 0x02	; 2
    ae0e:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    ae12:	c1 01       	movw	r24, r2
    ae14:	88 96       	adiw	r24, 0x28	; 40
    ae16:	b8 01       	movw	r22, r16
    ae18:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    ae1c:	c8 01       	movw	r24, r16
    ae1e:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			mov.rotation (0, step/15, 0, step/(velocidad*TICK));  // radio = 15
    ae22:	f1 01       	movw	r30, r2
    ae24:	e1 88       	ldd	r14, Z+17	; 0x11
    ae26:	f2 88       	ldd	r15, Z+18	; 0x12
    ae28:	03 89       	ldd	r16, Z+19	; 0x13
    ae2a:	14 89       	ldd	r17, Z+20	; 0x14
    ae2c:	c8 01       	movw	r24, r16
    ae2e:	b7 01       	movw	r22, r14
    ae30:	20 e0       	ldi	r18, 0x00	; 0
    ae32:	30 e0       	ldi	r19, 0x00	; 0
    ae34:	40 e7       	ldi	r20, 0x70	; 112
    ae36:	51 e4       	ldi	r21, 0x41	; 65
    ae38:	1b c0       	rjmp	.+54     	; 0xae70 <_ZN13RemoteControl10rotacionesEh+0x272>
			break;
			
		case RC_EXIT: case RC_CCTTX:
			texto1 = "h+";
    ae3a:	8e 01       	movw	r16, r28
    ae3c:	01 5e       	subi	r16, 0xE1	; 225
    ae3e:	1f 4f       	sbci	r17, 0xFF	; 255
    ae40:	c8 01       	movw	r24, r16
    ae42:	6f ed       	ldi	r22, 0xDF	; 223
    ae44:	72 e0       	ldi	r23, 0x02	; 2
    ae46:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    ae4a:	c1 01       	movw	r24, r2
    ae4c:	88 96       	adiw	r24, 0x28	; 40
    ae4e:	b8 01       	movw	r22, r16
    ae50:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    ae54:	c8 01       	movw	r24, r16
    ae56:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			mov.rotation (0, -step/15, 0, step/(velocidad*TICK));  // radio = 15
    ae5a:	f1 01       	movw	r30, r2
    ae5c:	e1 88       	ldd	r14, Z+17	; 0x11
    ae5e:	f2 88       	ldd	r15, Z+18	; 0x12
    ae60:	03 89       	ldd	r16, Z+19	; 0x13
    ae62:	14 89       	ldd	r17, Z+20	; 0x14
    ae64:	c8 01       	movw	r24, r16
    ae66:	b7 01       	movw	r22, r14
    ae68:	20 e0       	ldi	r18, 0x00	; 0
    ae6a:	30 e0       	ldi	r19, 0x00	; 0
    ae6c:	40 e7       	ldi	r20, 0x70	; 112
    ae6e:	51 ec       	ldi	r21, 0xC1	; 193
    ae70:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    ae74:	2b 01       	movw	r4, r22
    ae76:	3c 01       	movw	r6, r24
    ae78:	f1 01       	movw	r30, r2
    ae7a:	60 81       	ld	r22, Z
    ae7c:	71 81       	ldd	r23, Z+1	; 0x01
    ae7e:	82 81       	ldd	r24, Z+2	; 0x02
    ae80:	93 81       	ldd	r25, Z+3	; 0x03
    ae82:	2f e6       	ldi	r18, 0x6F	; 111
    ae84:	32 e1       	ldi	r19, 0x12	; 18
    ae86:	43 e8       	ldi	r20, 0x83	; 131
    ae88:	5b e3       	ldi	r21, 0x3B	; 59
    ae8a:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    ae8e:	9b 01       	movw	r18, r22
    ae90:	ac 01       	movw	r20, r24
    ae92:	c8 01       	movw	r24, r16
    ae94:	b7 01       	movw	r22, r14
    ae96:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    ae9a:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <__fixsfsi>
    ae9e:	4b 01       	movw	r8, r22
    aea0:	5c 01       	movw	r10, r24
    aea2:	81 ee       	ldi	r24, 0xE1	; 225
    aea4:	90 e1       	ldi	r25, 0x10	; 16
    aea6:	40 e0       	ldi	r20, 0x00	; 0
    aea8:	50 e0       	ldi	r21, 0x00	; 0
    aeaa:	60 e0       	ldi	r22, 0x00	; 0
    aeac:	70 e0       	ldi	r23, 0x00	; 0
    aeae:	93 01       	movw	r18, r6
    aeb0:	82 01       	movw	r16, r4
    aeb2:	6a 01       	movw	r12, r20
    aeb4:	7b 01       	movw	r14, r22
    aeb6:	47 cf       	rjmp	.-370    	; 0xad46 <_ZN13RemoteControl10rotacionesEh+0x148>
			break;
			
		// de acá al final es exactamente lo mismo que "traslaciones"... lo de arriba es bastante parecido también
		case RC_ENTER1:
			texto1 = "STORE";
    aeb8:	8e 01       	movw	r16, r28
    aeba:	0b 5d       	subi	r16, 0xDB	; 219
    aebc:	1f 4f       	sbci	r17, 0xFF	; 255
    aebe:	c8 01       	movw	r24, r16
    aec0:	62 ee       	ldi	r22, 0xE2	; 226
    aec2:	72 e0       	ldi	r23, 0x02	; 2
    aec4:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    aec8:	c1 01       	movw	r24, r2
    aeca:	88 96       	adiw	r24, 0x28	; 40
    aecc:	b8 01       	movw	r22, r16
    aece:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    aed2:	c8 01       	movw	r24, r16
    aed4:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			mov.actual_pos_ref ();
    aed8:	81 ee       	ldi	r24, 0xE1	; 225
    aeda:	90 e1       	ldi	r25, 0x10	; 16
    aedc:	0e 94 fe 21 	call	0x43fc	; 0x43fc <_ZN10Movimiento14actual_pos_refEv>
    aee0:	87 c1       	rjmp	.+782    	; 0xb1f0 <_ZN13RemoteControl10rotacionesEh+0x5f2>
			break;
			
		case RC_VOL_UP:
			if (pantalla.isBusy()) {break;}
    aee2:	80 ec       	ldi	r24, 0xC0	; 192
    aee4:	96 e0       	ldi	r25, 0x06	; 6
    aee6:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    aeea:	88 23       	and	r24, r24
    aeec:	09 f0       	breq	.+2      	; 0xaef0 <_ZN13RemoteControl10rotacionesEh+0x2f2>
    aeee:	80 c1       	rjmp	.+768    	; 0xb1f0 <_ZN13RemoteControl10rotacionesEh+0x5f2>
			velocidad = constrain (velocidad+inc, 1, 50);
    aef0:	f1 01       	movw	r30, r2
    aef2:	60 81       	ld	r22, Z
    aef4:	71 81       	ldd	r23, Z+1	; 0x01
    aef6:	82 81       	ldd	r24, Z+2	; 0x02
    aef8:	93 81       	ldd	r25, Z+3	; 0x03
    aefa:	21 a1       	ldd	r18, Z+33	; 0x21
    aefc:	32 a1       	ldd	r19, Z+34	; 0x22
    aefe:	43 a1       	ldd	r20, Z+35	; 0x23
    af00:	54 a1       	ldd	r21, Z+36	; 0x24
    af02:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    af06:	7b 01       	movw	r14, r22
    af08:	8c 01       	movw	r16, r24
    af0a:	20 e0       	ldi	r18, 0x00	; 0
    af0c:	30 e0       	ldi	r19, 0x00	; 0
    af0e:	40 e8       	ldi	r20, 0x80	; 128
    af10:	5f e3       	ldi	r21, 0x3F	; 63
    af12:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    af16:	88 23       	and	r24, r24
    af18:	5c f4       	brge	.+22     	; 0xaf30 <_ZN13RemoteControl10rotacionesEh+0x332>
    af1a:	0f 2e       	mov	r0, r31
    af1c:	f0 e0       	ldi	r31, 0x00	; 0
    af1e:	ef 2e       	mov	r14, r31
    af20:	f0 e0       	ldi	r31, 0x00	; 0
    af22:	ff 2e       	mov	r15, r31
    af24:	f0 e8       	ldi	r31, 0x80	; 128
    af26:	0f 2f       	mov	r16, r31
    af28:	ff e3       	ldi	r31, 0x3F	; 63
    af2a:	1f 2f       	mov	r17, r31
    af2c:	f0 2d       	mov	r31, r0
    af2e:	14 c0       	rjmp	.+40     	; 0xaf58 <_ZN13RemoteControl10rotacionesEh+0x35a>
    af30:	c8 01       	movw	r24, r16
    af32:	b7 01       	movw	r22, r14
    af34:	20 e0       	ldi	r18, 0x00	; 0
    af36:	30 e0       	ldi	r19, 0x00	; 0
    af38:	48 e4       	ldi	r20, 0x48	; 72
    af3a:	52 e4       	ldi	r21, 0x42	; 66
    af3c:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <__gesf2>
    af40:	18 16       	cp	r1, r24
    af42:	54 f4       	brge	.+20     	; 0xaf58 <_ZN13RemoteControl10rotacionesEh+0x35a>
    af44:	0f 2e       	mov	r0, r31
    af46:	f0 e0       	ldi	r31, 0x00	; 0
    af48:	ef 2e       	mov	r14, r31
    af4a:	f0 e0       	ldi	r31, 0x00	; 0
    af4c:	ff 2e       	mov	r15, r31
    af4e:	f8 e4       	ldi	r31, 0x48	; 72
    af50:	0f 2f       	mov	r16, r31
    af52:	f2 e4       	ldi	r31, 0x42	; 66
    af54:	1f 2f       	mov	r17, r31
    af56:	f0 2d       	mov	r31, r0
    af58:	f1 01       	movw	r30, r2
    af5a:	e0 82       	st	Z, r14
    af5c:	f1 82       	std	Z+1, r15	; 0x01
    af5e:	02 83       	std	Z+2, r16	; 0x02
    af60:	13 83       	std	Z+3, r17	; 0x03
			texto1 = "Vel " + float2string (velocidad);
    af62:	11 e3       	ldi	r17, 0x31	; 49
    af64:	c1 2e       	mov	r12, r17
    af66:	d1 2c       	mov	r13, r1
    af68:	cc 0e       	add	r12, r28
    af6a:	dd 1e       	adc	r13, r29
    af6c:	c6 01       	movw	r24, r12
    af6e:	68 ee       	ldi	r22, 0xE8	; 232
    af70:	72 e0       	ldi	r23, 0x02	; 2
    af72:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    af76:	bb e2       	ldi	r27, 0x2B	; 43
    af78:	eb 2e       	mov	r14, r27
    af7a:	f1 2c       	mov	r15, r1
    af7c:	ec 0e       	add	r14, r28
    af7e:	fd 1e       	adc	r15, r29
    af80:	f1 01       	movw	r30, r2
    af82:	40 81       	ld	r20, Z
    af84:	51 81       	ldd	r21, Z+1	; 0x01
    af86:	62 81       	ldd	r22, Z+2	; 0x02
    af88:	73 81       	ldd	r23, Z+3	; 0x03
    af8a:	c7 01       	movw	r24, r14
    af8c:	0e 94 51 67 	call	0xcea2	; 0xcea2 <_Z12float2stringf>
    af90:	8e 01       	movw	r16, r28
    af92:	09 5c       	subi	r16, 0xC9	; 201
    af94:	1f 4f       	sbci	r17, 0xFF	; 255
    af96:	16 c1       	rjmp	.+556    	; 0xb1c4 <_ZN13RemoteControl10rotacionesEh+0x5c6>
			retardo = true;
			break;
			
		case RC_VOL_DN:
			if (pantalla.isBusy()) {break;}
    af98:	80 ec       	ldi	r24, 0xC0	; 192
    af9a:	96 e0       	ldi	r25, 0x06	; 6
    af9c:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    afa0:	88 23       	and	r24, r24
    afa2:	09 f0       	breq	.+2      	; 0xafa6 <_ZN13RemoteControl10rotacionesEh+0x3a8>
    afa4:	25 c1       	rjmp	.+586    	; 0xb1f0 <_ZN13RemoteControl10rotacionesEh+0x5f2>
			velocidad = constrain (velocidad-inc, 1, 50);
    afa6:	f1 01       	movw	r30, r2
    afa8:	60 81       	ld	r22, Z
    afaa:	71 81       	ldd	r23, Z+1	; 0x01
    afac:	82 81       	ldd	r24, Z+2	; 0x02
    afae:	93 81       	ldd	r25, Z+3	; 0x03
    afb0:	21 a1       	ldd	r18, Z+33	; 0x21
    afb2:	32 a1       	ldd	r19, Z+34	; 0x22
    afb4:	43 a1       	ldd	r20, Z+35	; 0x23
    afb6:	54 a1       	ldd	r21, Z+36	; 0x24
    afb8:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    afbc:	7b 01       	movw	r14, r22
    afbe:	8c 01       	movw	r16, r24
    afc0:	20 e0       	ldi	r18, 0x00	; 0
    afc2:	30 e0       	ldi	r19, 0x00	; 0
    afc4:	40 e8       	ldi	r20, 0x80	; 128
    afc6:	5f e3       	ldi	r21, 0x3F	; 63
    afc8:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    afcc:	88 23       	and	r24, r24
    afce:	5c f4       	brge	.+22     	; 0xafe6 <_ZN13RemoteControl10rotacionesEh+0x3e8>
    afd0:	0f 2e       	mov	r0, r31
    afd2:	f0 e0       	ldi	r31, 0x00	; 0
    afd4:	ef 2e       	mov	r14, r31
    afd6:	f0 e0       	ldi	r31, 0x00	; 0
    afd8:	ff 2e       	mov	r15, r31
    afda:	f0 e8       	ldi	r31, 0x80	; 128
    afdc:	0f 2f       	mov	r16, r31
    afde:	ff e3       	ldi	r31, 0x3F	; 63
    afe0:	1f 2f       	mov	r17, r31
    afe2:	f0 2d       	mov	r31, r0
    afe4:	14 c0       	rjmp	.+40     	; 0xb00e <_ZN13RemoteControl10rotacionesEh+0x410>
    afe6:	c8 01       	movw	r24, r16
    afe8:	b7 01       	movw	r22, r14
    afea:	20 e0       	ldi	r18, 0x00	; 0
    afec:	30 e0       	ldi	r19, 0x00	; 0
    afee:	48 e4       	ldi	r20, 0x48	; 72
    aff0:	52 e4       	ldi	r21, 0x42	; 66
    aff2:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <__gesf2>
    aff6:	18 16       	cp	r1, r24
    aff8:	54 f4       	brge	.+20     	; 0xb00e <_ZN13RemoteControl10rotacionesEh+0x410>
    affa:	0f 2e       	mov	r0, r31
    affc:	f0 e0       	ldi	r31, 0x00	; 0
    affe:	ef 2e       	mov	r14, r31
    b000:	f0 e0       	ldi	r31, 0x00	; 0
    b002:	ff 2e       	mov	r15, r31
    b004:	f8 e4       	ldi	r31, 0x48	; 72
    b006:	0f 2f       	mov	r16, r31
    b008:	f2 e4       	ldi	r31, 0x42	; 66
    b00a:	1f 2f       	mov	r17, r31
    b00c:	f0 2d       	mov	r31, r0
    b00e:	f1 01       	movw	r30, r2
    b010:	e0 82       	st	Z, r14
    b012:	f1 82       	std	Z+1, r15	; 0x01
    b014:	02 83       	std	Z+2, r16	; 0x02
    b016:	13 83       	std	Z+3, r17	; 0x03
			texto1 = "Vel " + float2string (velocidad);
    b018:	a3 e4       	ldi	r26, 0x43	; 67
    b01a:	ca 2e       	mov	r12, r26
    b01c:	d1 2c       	mov	r13, r1
    b01e:	cc 0e       	add	r12, r28
    b020:	dd 1e       	adc	r13, r29
    b022:	c6 01       	movw	r24, r12
    b024:	68 ee       	ldi	r22, 0xE8	; 232
    b026:	72 e0       	ldi	r23, 0x02	; 2
    b028:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    b02c:	fd e3       	ldi	r31, 0x3D	; 61
    b02e:	ef 2e       	mov	r14, r31
    b030:	f1 2c       	mov	r15, r1
    b032:	ec 0e       	add	r14, r28
    b034:	fd 1e       	adc	r15, r29
    b036:	f1 01       	movw	r30, r2
    b038:	40 81       	ld	r20, Z
    b03a:	51 81       	ldd	r21, Z+1	; 0x01
    b03c:	62 81       	ldd	r22, Z+2	; 0x02
    b03e:	73 81       	ldd	r23, Z+3	; 0x03
    b040:	c7 01       	movw	r24, r14
    b042:	0e 94 51 67 	call	0xcea2	; 0xcea2 <_Z12float2stringf>
    b046:	8e 01       	movw	r16, r28
    b048:	07 5b       	subi	r16, 0xB7	; 183
    b04a:	1f 4f       	sbci	r17, 0xFF	; 255
    b04c:	bb c0       	rjmp	.+374    	; 0xb1c4 <_ZN13RemoteControl10rotacionesEh+0x5c6>
			retardo = true;
			break;
			
		case RC_CH_UP:
			if (pantalla.isBusy()) {break;}
    b04e:	80 ec       	ldi	r24, 0xC0	; 192
    b050:	96 e0       	ldi	r25, 0x06	; 6
    b052:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    b056:	88 23       	and	r24, r24
    b058:	09 f0       	breq	.+2      	; 0xb05c <_ZN13RemoteControl10rotacionesEh+0x45e>
    b05a:	ca c0       	rjmp	.+404    	; 0xb1f0 <_ZN13RemoteControl10rotacionesEh+0x5f2>
			if (!isMoving) {step = constrain (step+inc, .5, 5);}
    b05c:	f1 01       	movw	r30, r2
    b05e:	85 a1       	ldd	r24, Z+37	; 0x25
    b060:	88 23       	and	r24, r24
    b062:	c1 f5       	brne	.+112    	; 0xb0d4 <_ZN13RemoteControl10rotacionesEh+0x4d6>
    b064:	61 89       	ldd	r22, Z+17	; 0x11
    b066:	72 89       	ldd	r23, Z+18	; 0x12
    b068:	83 89       	ldd	r24, Z+19	; 0x13
    b06a:	94 89       	ldd	r25, Z+20	; 0x14
    b06c:	21 a1       	ldd	r18, Z+33	; 0x21
    b06e:	32 a1       	ldd	r19, Z+34	; 0x22
    b070:	43 a1       	ldd	r20, Z+35	; 0x23
    b072:	54 a1       	ldd	r21, Z+36	; 0x24
    b074:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    b078:	7b 01       	movw	r14, r22
    b07a:	8c 01       	movw	r16, r24
    b07c:	20 e0       	ldi	r18, 0x00	; 0
    b07e:	30 e0       	ldi	r19, 0x00	; 0
    b080:	40 e0       	ldi	r20, 0x00	; 0
    b082:	5f e3       	ldi	r21, 0x3F	; 63
    b084:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    b088:	88 23       	and	r24, r24
    b08a:	5c f4       	brge	.+22     	; 0xb0a2 <_ZN13RemoteControl10rotacionesEh+0x4a4>
    b08c:	0f 2e       	mov	r0, r31
    b08e:	f0 e0       	ldi	r31, 0x00	; 0
    b090:	ef 2e       	mov	r14, r31
    b092:	f0 e0       	ldi	r31, 0x00	; 0
    b094:	ff 2e       	mov	r15, r31
    b096:	f0 e0       	ldi	r31, 0x00	; 0
    b098:	0f 2f       	mov	r16, r31
    b09a:	ff e3       	ldi	r31, 0x3F	; 63
    b09c:	1f 2f       	mov	r17, r31
    b09e:	f0 2d       	mov	r31, r0
    b0a0:	14 c0       	rjmp	.+40     	; 0xb0ca <_ZN13RemoteControl10rotacionesEh+0x4cc>
    b0a2:	c8 01       	movw	r24, r16
    b0a4:	b7 01       	movw	r22, r14
    b0a6:	20 e0       	ldi	r18, 0x00	; 0
    b0a8:	30 e0       	ldi	r19, 0x00	; 0
    b0aa:	40 ea       	ldi	r20, 0xA0	; 160
    b0ac:	50 e4       	ldi	r21, 0x40	; 64
    b0ae:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <__gesf2>
    b0b2:	18 16       	cp	r1, r24
    b0b4:	54 f4       	brge	.+20     	; 0xb0ca <_ZN13RemoteControl10rotacionesEh+0x4cc>
    b0b6:	0f 2e       	mov	r0, r31
    b0b8:	f0 e0       	ldi	r31, 0x00	; 0
    b0ba:	ef 2e       	mov	r14, r31
    b0bc:	f0 e0       	ldi	r31, 0x00	; 0
    b0be:	ff 2e       	mov	r15, r31
    b0c0:	f0 ea       	ldi	r31, 0xA0	; 160
    b0c2:	0f 2f       	mov	r16, r31
    b0c4:	f0 e4       	ldi	r31, 0x40	; 64
    b0c6:	1f 2f       	mov	r17, r31
    b0c8:	f0 2d       	mov	r31, r0
    b0ca:	f1 01       	movw	r30, r2
    b0cc:	e1 8a       	std	Z+17, r14	; 0x11
    b0ce:	f2 8a       	std	Z+18, r15	; 0x12
    b0d0:	03 8b       	std	Z+19, r16	; 0x13
    b0d2:	14 8b       	std	Z+20, r17	; 0x14
			texto1 = "Step " + float2string (step);
    b0d4:	e5 e5       	ldi	r30, 0x55	; 85
    b0d6:	ce 2e       	mov	r12, r30
    b0d8:	d1 2c       	mov	r13, r1
    b0da:	cc 0e       	add	r12, r28
    b0dc:	dd 1e       	adc	r13, r29
    b0de:	c6 01       	movw	r24, r12
    b0e0:	6e eb       	ldi	r22, 0xBE	; 190
    b0e2:	72 e0       	ldi	r23, 0x02	; 2
    b0e4:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    b0e8:	7f e4       	ldi	r23, 0x4F	; 79
    b0ea:	e7 2e       	mov	r14, r23
    b0ec:	f1 2c       	mov	r15, r1
    b0ee:	ec 0e       	add	r14, r28
    b0f0:	fd 1e       	adc	r15, r29
    b0f2:	f1 01       	movw	r30, r2
    b0f4:	41 89       	ldd	r20, Z+17	; 0x11
    b0f6:	52 89       	ldd	r21, Z+18	; 0x12
    b0f8:	63 89       	ldd	r22, Z+19	; 0x13
    b0fa:	74 89       	ldd	r23, Z+20	; 0x14
    b0fc:	c7 01       	movw	r24, r14
    b0fe:	0e 94 51 67 	call	0xcea2	; 0xcea2 <_Z12float2stringf>
    b102:	8e 01       	movw	r16, r28
    b104:	05 5a       	subi	r16, 0xA5	; 165
    b106:	1f 4f       	sbci	r17, 0xFF	; 255
    b108:	5d c0       	rjmp	.+186    	; 0xb1c4 <_ZN13RemoteControl10rotacionesEh+0x5c6>
			retardo = true;
			break;
			
		case RC_CH_DN:
			if (pantalla.isBusy()) {break;}
    b10a:	80 ec       	ldi	r24, 0xC0	; 192
    b10c:	96 e0       	ldi	r25, 0x06	; 6
    b10e:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    b112:	88 23       	and	r24, r24
    b114:	09 f0       	breq	.+2      	; 0xb118 <_ZN13RemoteControl10rotacionesEh+0x51a>
    b116:	6c c0       	rjmp	.+216    	; 0xb1f0 <_ZN13RemoteControl10rotacionesEh+0x5f2>
			if (!isMoving) {step = constrain (step-inc, .5, 5);}
    b118:	f1 01       	movw	r30, r2
    b11a:	85 a1       	ldd	r24, Z+37	; 0x25
    b11c:	88 23       	and	r24, r24
    b11e:	c1 f5       	brne	.+112    	; 0xb190 <_ZN13RemoteControl10rotacionesEh+0x592>
    b120:	61 89       	ldd	r22, Z+17	; 0x11
    b122:	72 89       	ldd	r23, Z+18	; 0x12
    b124:	83 89       	ldd	r24, Z+19	; 0x13
    b126:	94 89       	ldd	r25, Z+20	; 0x14
    b128:	21 a1       	ldd	r18, Z+33	; 0x21
    b12a:	32 a1       	ldd	r19, Z+34	; 0x22
    b12c:	43 a1       	ldd	r20, Z+35	; 0x23
    b12e:	54 a1       	ldd	r21, Z+36	; 0x24
    b130:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    b134:	7b 01       	movw	r14, r22
    b136:	8c 01       	movw	r16, r24
    b138:	20 e0       	ldi	r18, 0x00	; 0
    b13a:	30 e0       	ldi	r19, 0x00	; 0
    b13c:	40 e0       	ldi	r20, 0x00	; 0
    b13e:	5f e3       	ldi	r21, 0x3F	; 63
    b140:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    b144:	88 23       	and	r24, r24
    b146:	5c f4       	brge	.+22     	; 0xb15e <_ZN13RemoteControl10rotacionesEh+0x560>
    b148:	0f 2e       	mov	r0, r31
    b14a:	f0 e0       	ldi	r31, 0x00	; 0
    b14c:	ef 2e       	mov	r14, r31
    b14e:	f0 e0       	ldi	r31, 0x00	; 0
    b150:	ff 2e       	mov	r15, r31
    b152:	f0 e0       	ldi	r31, 0x00	; 0
    b154:	0f 2f       	mov	r16, r31
    b156:	ff e3       	ldi	r31, 0x3F	; 63
    b158:	1f 2f       	mov	r17, r31
    b15a:	f0 2d       	mov	r31, r0
    b15c:	14 c0       	rjmp	.+40     	; 0xb186 <_ZN13RemoteControl10rotacionesEh+0x588>
    b15e:	c8 01       	movw	r24, r16
    b160:	b7 01       	movw	r22, r14
    b162:	20 e0       	ldi	r18, 0x00	; 0
    b164:	30 e0       	ldi	r19, 0x00	; 0
    b166:	40 ea       	ldi	r20, 0xA0	; 160
    b168:	50 e4       	ldi	r21, 0x40	; 64
    b16a:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <__gesf2>
    b16e:	18 16       	cp	r1, r24
    b170:	54 f4       	brge	.+20     	; 0xb186 <_ZN13RemoteControl10rotacionesEh+0x588>
    b172:	0f 2e       	mov	r0, r31
    b174:	f0 e0       	ldi	r31, 0x00	; 0
    b176:	ef 2e       	mov	r14, r31
    b178:	f0 e0       	ldi	r31, 0x00	; 0
    b17a:	ff 2e       	mov	r15, r31
    b17c:	f0 ea       	ldi	r31, 0xA0	; 160
    b17e:	0f 2f       	mov	r16, r31
    b180:	f0 e4       	ldi	r31, 0x40	; 64
    b182:	1f 2f       	mov	r17, r31
    b184:	f0 2d       	mov	r31, r0
    b186:	f1 01       	movw	r30, r2
    b188:	e1 8a       	std	Z+17, r14	; 0x11
    b18a:	f2 8a       	std	Z+18, r15	; 0x12
    b18c:	03 8b       	std	Z+19, r16	; 0x13
    b18e:	14 8b       	std	Z+20, r17	; 0x14
			texto1 = "Step " + float2string (step);
    b190:	67 e6       	ldi	r22, 0x67	; 103
    b192:	c6 2e       	mov	r12, r22
    b194:	d1 2c       	mov	r13, r1
    b196:	cc 0e       	add	r12, r28
    b198:	dd 1e       	adc	r13, r29
    b19a:	c6 01       	movw	r24, r12
    b19c:	6e eb       	ldi	r22, 0xBE	; 190
    b19e:	72 e0       	ldi	r23, 0x02	; 2
    b1a0:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    b1a4:	51 e6       	ldi	r21, 0x61	; 97
    b1a6:	e5 2e       	mov	r14, r21
    b1a8:	f1 2c       	mov	r15, r1
    b1aa:	ec 0e       	add	r14, r28
    b1ac:	fd 1e       	adc	r15, r29
    b1ae:	f1 01       	movw	r30, r2
    b1b0:	41 89       	ldd	r20, Z+17	; 0x11
    b1b2:	52 89       	ldd	r21, Z+18	; 0x12
    b1b4:	63 89       	ldd	r22, Z+19	; 0x13
    b1b6:	74 89       	ldd	r23, Z+20	; 0x14
    b1b8:	c7 01       	movw	r24, r14
    b1ba:	0e 94 51 67 	call	0xcea2	; 0xcea2 <_Z12float2stringf>
    b1be:	8e 01       	movw	r16, r28
    b1c0:	03 59       	subi	r16, 0x93	; 147
    b1c2:	1f 4f       	sbci	r17, 0xFF	; 255
    b1c4:	c8 01       	movw	r24, r16
    b1c6:	b6 01       	movw	r22, r12
    b1c8:	a7 01       	movw	r20, r14
    b1ca:	0e 94 4c 4d 	call	0x9a98	; 0x9a98 <_Zpl6StringRKS_>
    b1ce:	c1 01       	movw	r24, r2
    b1d0:	88 96       	adiw	r24, 0x28	; 40
    b1d2:	b8 01       	movw	r22, r16
    b1d4:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    b1d8:	c8 01       	movw	r24, r16
    b1da:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    b1de:	c7 01       	movw	r24, r14
    b1e0:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    b1e4:	c6 01       	movw	r24, r12
    b1e6:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			retardo = true;
    b1ea:	81 e0       	ldi	r24, 0x01	; 1
    b1ec:	f1 01       	movw	r30, r2
    b1ee:	86 ab       	std	Z+54, r24	; 0x36
			break;
	}
}
    b1f0:	ce 58       	subi	r28, 0x8E	; 142
    b1f2:	df 4f       	sbci	r29, 0xFF	; 255
    b1f4:	0f b6       	in	r0, 0x3f	; 63
    b1f6:	f8 94       	cli
    b1f8:	de bf       	out	0x3e, r29	; 62
    b1fa:	0f be       	out	0x3f, r0	; 63
    b1fc:	cd bf       	out	0x3d, r28	; 61
    b1fe:	cf 91       	pop	r28
    b200:	df 91       	pop	r29
    b202:	1f 91       	pop	r17
    b204:	0f 91       	pop	r16
    b206:	ff 90       	pop	r15
    b208:	ef 90       	pop	r14
    b20a:	df 90       	pop	r13
    b20c:	cf 90       	pop	r12
    b20e:	bf 90       	pop	r11
    b210:	af 90       	pop	r10
    b212:	9f 90       	pop	r9
    b214:	8f 90       	pop	r8
    b216:	7f 90       	pop	r7
    b218:	6f 90       	pop	r6
    b21a:	5f 90       	pop	r5
    b21c:	4f 90       	pop	r4
    b21e:	3f 90       	pop	r3
    b220:	2f 90       	pop	r2
    b222:	08 95       	ret

0000b224 <_ZN13RemoteControl12traslacionesEh>:
			break;
	}

}

void RemoteControl::traslaciones (byte comando) {
    b224:	6f 92       	push	r6
    b226:	7f 92       	push	r7
    b228:	8f 92       	push	r8
    b22a:	9f 92       	push	r9
    b22c:	af 92       	push	r10
    b22e:	bf 92       	push	r11
    b230:	cf 92       	push	r12
    b232:	df 92       	push	r13
    b234:	ef 92       	push	r14
    b236:	ff 92       	push	r15
    b238:	0f 93       	push	r16
    b23a:	1f 93       	push	r17
    b23c:	df 93       	push	r29
    b23e:	cf 93       	push	r28
    b240:	cd b7       	in	r28, 0x3d	; 61
    b242:	de b7       	in	r29, 0x3e	; 62
    b244:	ca 5b       	subi	r28, 0xBA	; 186
    b246:	d0 40       	sbci	r29, 0x00	; 0
    b248:	0f b6       	in	r0, 0x3f	; 63
    b24a:	f8 94       	cli
    b24c:	de bf       	out	0x3e, r29	; 62
    b24e:	0f be       	out	0x3f, r0	; 63
    b250:	cd bf       	out	0x3d, r28	; 61
    b252:	4c 01       	movw	r8, r24
	
	switch (comando) {
    b254:	6e 34       	cpi	r22, 0x4E	; 78
    b256:	09 f4       	brne	.+2      	; 0xb25a <_ZN13RemoteControl12traslacionesEh+0x36>
    b258:	2a c1       	rjmp	.+596    	; 0xb4ae <_ZN13RemoteControl12traslacionesEh+0x28a>
    b25a:	6f 34       	cpi	r22, 0x4F	; 79
    b25c:	b0 f4       	brcc	.+44     	; 0xb28a <_ZN13RemoteControl12traslacionesEh+0x66>
    b25e:	6a 31       	cpi	r22, 0x1A	; 26
    b260:	09 f4       	brne	.+2      	; 0xb264 <_ZN13RemoteControl12traslacionesEh+0x40>
    b262:	18 c2       	rjmp	.+1072   	; 0xb694 <_ZN13RemoteControl12traslacionesEh+0x470>
    b264:	6b 31       	cpi	r22, 0x1B	; 27
    b266:	38 f4       	brcc	.+14     	; 0xb276 <_ZN13RemoteControl12traslacionesEh+0x52>
    b268:	60 31       	cpi	r22, 0x10	; 16
    b26a:	09 f4       	brne	.+2      	; 0xb26e <_ZN13RemoteControl12traslacionesEh+0x4a>
    b26c:	20 c1       	rjmp	.+576    	; 0xb4ae <_ZN13RemoteControl12traslacionesEh+0x28a>
    b26e:	63 31       	cpi	r22, 0x13	; 19
    b270:	09 f0       	breq	.+2      	; 0xb274 <_ZN13RemoteControl12traslacionesEh+0x50>
    b272:	e1 c2       	rjmp	.+1474   	; 0xb836 <_ZN13RemoteControl12traslacionesEh+0x612>
    b274:	ed c0       	rjmp	.+474    	; 0xb450 <_ZN13RemoteControl12traslacionesEh+0x22c>
    b276:	6e 31       	cpi	r22, 0x1E	; 30
    b278:	09 f4       	brne	.+2      	; 0xb27c <_ZN13RemoteControl12traslacionesEh+0x58>
    b27a:	6a c2       	rjmp	.+1236   	; 0xb750 <_ZN13RemoteControl12traslacionesEh+0x52c>
    b27c:	6f 31       	cpi	r22, 0x1F	; 31
    b27e:	09 f4       	brne	.+2      	; 0xb282 <_ZN13RemoteControl12traslacionesEh+0x5e>
    b280:	ae c1       	rjmp	.+860    	; 0xb5de <_ZN13RemoteControl12traslacionesEh+0x3ba>
    b282:	6b 31       	cpi	r22, 0x1B	; 27
    b284:	09 f0       	breq	.+2      	; 0xb288 <_ZN13RemoteControl12traslacionesEh+0x64>
    b286:	d7 c2       	rjmp	.+1454   	; 0xb836 <_ZN13RemoteControl12traslacionesEh+0x612>
    b288:	4f c1       	rjmp	.+670    	; 0xb528 <_ZN13RemoteControl12traslacionesEh+0x304>
    b28a:	6c 35       	cpi	r22, 0x5C	; 92
    b28c:	99 f0       	breq	.+38     	; 0xb2b4 <_ZN13RemoteControl12traslacionesEh+0x90>
    b28e:	6d 35       	cpi	r22, 0x5D	; 93
    b290:	38 f4       	brcc	.+14     	; 0xb2a0 <_ZN13RemoteControl12traslacionesEh+0x7c>
    b292:	6f 34       	cpi	r22, 0x4F	; 79
    b294:	09 f4       	brne	.+2      	; 0xb298 <_ZN13RemoteControl12traslacionesEh+0x74>
    b296:	dc c0       	rjmp	.+440    	; 0xb450 <_ZN13RemoteControl12traslacionesEh+0x22c>
    b298:	63 35       	cpi	r22, 0x53	; 83
    b29a:	09 f0       	breq	.+2      	; 0xb29e <_ZN13RemoteControl12traslacionesEh+0x7a>
    b29c:	cc c2       	rjmp	.+1432   	; 0xb836 <_ZN13RemoteControl12traslacionesEh+0x612>
    b29e:	2f c1       	rjmp	.+606    	; 0xb4fe <_ZN13RemoteControl12traslacionesEh+0x2da>
    b2a0:	6e 35       	cpi	r22, 0x5E	; 94
    b2a2:	09 f4       	brne	.+2      	; 0xb2a6 <_ZN13RemoteControl12traslacionesEh+0x82>
    b2a4:	8a c0       	rjmp	.+276    	; 0xb3ba <_ZN13RemoteControl12traslacionesEh+0x196>
    b2a6:	6e 35       	cpi	r22, 0x5E	; 94
    b2a8:	08 f4       	brcc	.+2      	; 0xb2ac <_ZN13RemoteControl12traslacionesEh+0x88>
    b2aa:	a7 c0       	rjmp	.+334    	; 0xb3fa <_ZN13RemoteControl12traslacionesEh+0x1d6>
    b2ac:	6f 35       	cpi	r22, 0x5F	; 95
    b2ae:	09 f0       	breq	.+2      	; 0xb2b2 <_ZN13RemoteControl12traslacionesEh+0x8e>
    b2b0:	c2 c2       	rjmp	.+1412   	; 0xb836 <_ZN13RemoteControl12traslacionesEh+0x612>
    b2b2:	2c c0       	rjmp	.+88     	; 0xb30c <_ZN13RemoteControl12traslacionesEh+0xe8>
		case RC_UP:
			texto1 = "|";
    b2b4:	8e 01       	movw	r16, r28
    b2b6:	0f 5f       	subi	r16, 0xFF	; 255
    b2b8:	1f 4f       	sbci	r17, 0xFF	; 255
    b2ba:	c8 01       	movw	r24, r16
    b2bc:	64 ec       	ldi	r22, 0xC4	; 196
    b2be:	72 e0       	ldi	r23, 0x02	; 2
    b2c0:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    b2c4:	c4 01       	movw	r24, r8
    b2c6:	88 96       	adiw	r24, 0x28	; 40
    b2c8:	b8 01       	movw	r22, r16
    b2ca:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    b2ce:	c8 01       	movw	r24, r16
    b2d0:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			mov.translation ((COORD3D) {0, 0, step}, step/(velocidad*TICK));
    b2d4:	f4 01       	movw	r30, r8
    b2d6:	e1 88       	ldd	r14, Z+17	; 0x11
    b2d8:	f2 88       	ldd	r15, Z+18	; 0x12
    b2da:	03 89       	ldd	r16, Z+19	; 0x13
    b2dc:	14 89       	ldd	r17, Z+20	; 0x14
    b2de:	83 e7       	ldi	r24, 0x73	; 115
    b2e0:	a8 2e       	mov	r10, r24
    b2e2:	b1 2c       	mov	r11, r1
    b2e4:	ac 0e       	add	r10, r28
    b2e6:	bd 1e       	adc	r11, r29
    b2e8:	80 e0       	ldi	r24, 0x00	; 0
    b2ea:	90 e0       	ldi	r25, 0x00	; 0
    b2ec:	a0 e0       	ldi	r26, 0x00	; 0
    b2ee:	b0 e0       	ldi	r27, 0x00	; 0
    b2f0:	f5 01       	movw	r30, r10
    b2f2:	80 83       	st	Z, r24
    b2f4:	91 83       	std	Z+1, r25	; 0x01
    b2f6:	a2 83       	std	Z+2, r26	; 0x02
    b2f8:	b3 83       	std	Z+3, r27	; 0x03
    b2fa:	84 83       	std	Z+4, r24	; 0x04
    b2fc:	95 83       	std	Z+5, r25	; 0x05
    b2fe:	a6 83       	std	Z+6, r26	; 0x06
    b300:	b7 83       	std	Z+7, r27	; 0x07
    b302:	e0 86       	std	Z+8, r14	; 0x08
    b304:	f1 86       	std	Z+9, r15	; 0x09
    b306:	02 87       	std	Z+10, r16	; 0x0a
    b308:	13 87       	std	Z+11, r17	; 0x0b
    b30a:	2e c0       	rjmp	.+92     	; 0xb368 <_ZN13RemoteControl12traslacionesEh+0x144>
			break;
		
		case RC_DOWN:
			texto1 = "^";
    b30c:	8e 01       	movw	r16, r28
    b30e:	09 5f       	subi	r16, 0xF9	; 249
    b310:	1f 4f       	sbci	r17, 0xFF	; 255
    b312:	c8 01       	movw	r24, r16
    b314:	66 ec       	ldi	r22, 0xC6	; 198
    b316:	72 e0       	ldi	r23, 0x02	; 2
    b318:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    b31c:	c4 01       	movw	r24, r8
    b31e:	88 96       	adiw	r24, 0x28	; 40
    b320:	b8 01       	movw	r22, r16
    b322:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    b326:	c8 01       	movw	r24, r16
    b328:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			mov.translation ((COORD3D) {0, 0, -step}, step/(velocidad*TICK));
    b32c:	f4 01       	movw	r30, r8
    b32e:	e1 88       	ldd	r14, Z+17	; 0x11
    b330:	f2 88       	ldd	r15, Z+18	; 0x12
    b332:	03 89       	ldd	r16, Z+19	; 0x13
    b334:	14 89       	ldd	r17, Z+20	; 0x14
    b336:	bf e7       	ldi	r27, 0x7F	; 127
    b338:	ab 2e       	mov	r10, r27
    b33a:	b1 2c       	mov	r11, r1
    b33c:	ac 0e       	add	r10, r28
    b33e:	bd 1e       	adc	r11, r29
    b340:	80 e0       	ldi	r24, 0x00	; 0
    b342:	90 e0       	ldi	r25, 0x00	; 0
    b344:	a0 e0       	ldi	r26, 0x00	; 0
    b346:	b0 e0       	ldi	r27, 0x00	; 0
    b348:	f5 01       	movw	r30, r10
    b34a:	80 83       	st	Z, r24
    b34c:	91 83       	std	Z+1, r25	; 0x01
    b34e:	a2 83       	std	Z+2, r26	; 0x02
    b350:	b3 83       	std	Z+3, r27	; 0x03
    b352:	84 83       	std	Z+4, r24	; 0x04
    b354:	95 83       	std	Z+5, r25	; 0x05
    b356:	a6 83       	std	Z+6, r26	; 0x06
    b358:	b7 83       	std	Z+7, r27	; 0x07
    b35a:	d8 01       	movw	r26, r16
    b35c:	c7 01       	movw	r24, r14
    b35e:	b0 58       	subi	r27, 0x80	; 128
    b360:	80 87       	std	Z+8, r24	; 0x08
    b362:	91 87       	std	Z+9, r25	; 0x09
    b364:	a2 87       	std	Z+10, r26	; 0x0a
    b366:	b3 87       	std	Z+11, r27	; 0x0b
    b368:	f4 01       	movw	r30, r8
    b36a:	60 81       	ld	r22, Z
    b36c:	71 81       	ldd	r23, Z+1	; 0x01
    b36e:	82 81       	ldd	r24, Z+2	; 0x02
    b370:	93 81       	ldd	r25, Z+3	; 0x03
    b372:	2f e6       	ldi	r18, 0x6F	; 111
    b374:	32 e1       	ldi	r19, 0x12	; 18
    b376:	43 e8       	ldi	r20, 0x83	; 131
    b378:	5b e3       	ldi	r21, 0x3B	; 59
    b37a:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    b37e:	9b 01       	movw	r18, r22
    b380:	ac 01       	movw	r20, r24
    b382:	c8 01       	movw	r24, r16
    b384:	b7 01       	movw	r22, r14
    b386:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    b38a:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <__fixsfsi>
    b38e:	3b 01       	movw	r6, r22
    b390:	4c 01       	movw	r8, r24
    b392:	81 ee       	ldi	r24, 0xE1	; 225
    b394:	90 e1       	ldi	r25, 0x10	; 16
    b396:	f5 01       	movw	r30, r10
    b398:	c0 80       	ld	r12, Z
    b39a:	d1 80       	ldd	r13, Z+1	; 0x01
    b39c:	e2 80       	ldd	r14, Z+2	; 0x02
    b39e:	f3 80       	ldd	r15, Z+3	; 0x03
    b3a0:	04 81       	ldd	r16, Z+4	; 0x04
    b3a2:	15 81       	ldd	r17, Z+5	; 0x05
    b3a4:	26 81       	ldd	r18, Z+6	; 0x06
    b3a6:	37 81       	ldd	r19, Z+7	; 0x07
    b3a8:	40 85       	ldd	r20, Z+8	; 0x08
    b3aa:	51 85       	ldd	r21, Z+9	; 0x09
    b3ac:	62 85       	ldd	r22, Z+10	; 0x0a
    b3ae:	73 85       	ldd	r23, Z+11	; 0x0b
    b3b0:	53 01       	movw	r10, r6
    b3b2:	88 24       	eor	r8, r8
    b3b4:	0e 94 6f 27 	call	0x4ede	; 0x4ede <_ZN10Movimiento11translationE7COORD3Dih>
    b3b8:	3e c2       	rjmp	.+1148   	; 0xb836 <_ZN13RemoteControl12traslacionesEh+0x612>
			break;
		
		case RC_RIGHT:
			texto1 = "<";
    b3ba:	8e 01       	movw	r16, r28
    b3bc:	03 5f       	subi	r16, 0xF3	; 243
    b3be:	1f 4f       	sbci	r17, 0xFF	; 255
    b3c0:	c8 01       	movw	r24, r16
    b3c2:	68 ec       	ldi	r22, 0xC8	; 200
    b3c4:	72 e0       	ldi	r23, 0x02	; 2
    b3c6:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    b3ca:	c4 01       	movw	r24, r8
    b3cc:	88 96       	adiw	r24, 0x28	; 40
    b3ce:	b8 01       	movw	r22, r16
    b3d0:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    b3d4:	c8 01       	movw	r24, r16
    b3d6:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			mov.translation ((COORD3D) {step, 0, 0}, step/(velocidad*TICK));
    b3da:	f4 01       	movw	r30, r8
    b3dc:	e1 88       	ldd	r14, Z+17	; 0x11
    b3de:	f2 88       	ldd	r15, Z+18	; 0x12
    b3e0:	03 89       	ldd	r16, Z+19	; 0x13
    b3e2:	14 89       	ldd	r17, Z+20	; 0x14
    b3e4:	ab e8       	ldi	r26, 0x8B	; 139
    b3e6:	aa 2e       	mov	r10, r26
    b3e8:	b1 2c       	mov	r11, r1
    b3ea:	ac 0e       	add	r10, r28
    b3ec:	bd 1e       	adc	r11, r29
    b3ee:	f5 01       	movw	r30, r10
    b3f0:	e0 82       	st	Z, r14
    b3f2:	f1 82       	std	Z+1, r15	; 0x01
    b3f4:	02 83       	std	Z+2, r16	; 0x02
    b3f6:	13 83       	std	Z+3, r17	; 0x03
    b3f8:	22 c0       	rjmp	.+68     	; 0xb43e <_ZN13RemoteControl12traslacionesEh+0x21a>
			break;
	
		case RC_LEFT:
			texto1 = ">";
    b3fa:	8e 01       	movw	r16, r28
    b3fc:	0d 5e       	subi	r16, 0xED	; 237
    b3fe:	1f 4f       	sbci	r17, 0xFF	; 255
    b400:	c8 01       	movw	r24, r16
    b402:	6a ec       	ldi	r22, 0xCA	; 202
    b404:	72 e0       	ldi	r23, 0x02	; 2
    b406:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    b40a:	c4 01       	movw	r24, r8
    b40c:	88 96       	adiw	r24, 0x28	; 40
    b40e:	b8 01       	movw	r22, r16
    b410:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    b414:	c8 01       	movw	r24, r16
    b416:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			mov.translation ((COORD3D) {-step, 0, 0}, step/(velocidad*TICK));
    b41a:	f4 01       	movw	r30, r8
    b41c:	e1 88       	ldd	r14, Z+17	; 0x11
    b41e:	f2 88       	ldd	r15, Z+18	; 0x12
    b420:	03 89       	ldd	r16, Z+19	; 0x13
    b422:	14 89       	ldd	r17, Z+20	; 0x14
    b424:	f7 e9       	ldi	r31, 0x97	; 151
    b426:	af 2e       	mov	r10, r31
    b428:	b1 2c       	mov	r11, r1
    b42a:	ac 0e       	add	r10, r28
    b42c:	bd 1e       	adc	r11, r29
    b42e:	d8 01       	movw	r26, r16
    b430:	c7 01       	movw	r24, r14
    b432:	b0 58       	subi	r27, 0x80	; 128
    b434:	f5 01       	movw	r30, r10
    b436:	80 83       	st	Z, r24
    b438:	91 83       	std	Z+1, r25	; 0x01
    b43a:	a2 83       	std	Z+2, r26	; 0x02
    b43c:	b3 83       	std	Z+3, r27	; 0x03
    b43e:	80 e0       	ldi	r24, 0x00	; 0
    b440:	90 e0       	ldi	r25, 0x00	; 0
    b442:	a0 e0       	ldi	r26, 0x00	; 0
    b444:	b0 e0       	ldi	r27, 0x00	; 0
    b446:	84 83       	std	Z+4, r24	; 0x04
    b448:	95 83       	std	Z+5, r25	; 0x05
    b44a:	a6 83       	std	Z+6, r26	; 0x06
    b44c:	b7 83       	std	Z+7, r27	; 0x07
    b44e:	88 cf       	rjmp	.-240    	; 0xb360 <_ZN13RemoteControl12traslacionesEh+0x13c>
			break;

		case RC_CCTTX: case RC_MTS:
			texto1 = "h-";
    b450:	8e 01       	movw	r16, r28
    b452:	07 5e       	subi	r16, 0xE7	; 231
    b454:	1f 4f       	sbci	r17, 0xFF	; 255
    b456:	c8 01       	movw	r24, r16
    b458:	6c ed       	ldi	r22, 0xDC	; 220
    b45a:	72 e0       	ldi	r23, 0x02	; 2
    b45c:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    b460:	c4 01       	movw	r24, r8
    b462:	88 96       	adiw	r24, 0x28	; 40
    b464:	b8 01       	movw	r22, r16
    b466:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    b46a:	c8 01       	movw	r24, r16
    b46c:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			mov.translation ((COORD3D) {0, -step, 0}, step/(velocidad*TICK));
    b470:	f4 01       	movw	r30, r8
    b472:	e1 88       	ldd	r14, Z+17	; 0x11
    b474:	f2 88       	ldd	r15, Z+18	; 0x12
    b476:	03 89       	ldd	r16, Z+19	; 0x13
    b478:	14 89       	ldd	r17, Z+20	; 0x14
    b47a:	e3 ea       	ldi	r30, 0xA3	; 163
    b47c:	ae 2e       	mov	r10, r30
    b47e:	b1 2c       	mov	r11, r1
    b480:	ac 0e       	add	r10, r28
    b482:	bd 1e       	adc	r11, r29
    b484:	20 e0       	ldi	r18, 0x00	; 0
    b486:	30 e0       	ldi	r19, 0x00	; 0
    b488:	40 e0       	ldi	r20, 0x00	; 0
    b48a:	50 e0       	ldi	r21, 0x00	; 0
    b48c:	f5 01       	movw	r30, r10
    b48e:	20 83       	st	Z, r18
    b490:	31 83       	std	Z+1, r19	; 0x01
    b492:	42 83       	std	Z+2, r20	; 0x02
    b494:	53 83       	std	Z+3, r21	; 0x03
    b496:	d8 01       	movw	r26, r16
    b498:	c7 01       	movw	r24, r14
    b49a:	b0 58       	subi	r27, 0x80	; 128
    b49c:	84 83       	std	Z+4, r24	; 0x04
    b49e:	95 83       	std	Z+5, r25	; 0x05
    b4a0:	a6 83       	std	Z+6, r26	; 0x06
    b4a2:	b7 83       	std	Z+7, r27	; 0x07
    b4a4:	20 87       	std	Z+8, r18	; 0x08
    b4a6:	31 87       	std	Z+9, r19	; 0x09
    b4a8:	42 87       	std	Z+10, r20	; 0x0a
    b4aa:	53 87       	std	Z+11, r21	; 0x0b
    b4ac:	5d cf       	rjmp	.-326    	; 0xb368 <_ZN13RemoteControl12traslacionesEh+0x144>
			break;
			
		case RC_EXIT: case RC_MENU:
			texto1 = "h+";
    b4ae:	8e 01       	movw	r16, r28
    b4b0:	01 5e       	subi	r16, 0xE1	; 225
    b4b2:	1f 4f       	sbci	r17, 0xFF	; 255
    b4b4:	c8 01       	movw	r24, r16
    b4b6:	6f ed       	ldi	r22, 0xDF	; 223
    b4b8:	72 e0       	ldi	r23, 0x02	; 2
    b4ba:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    b4be:	c4 01       	movw	r24, r8
    b4c0:	88 96       	adiw	r24, 0x28	; 40
    b4c2:	b8 01       	movw	r22, r16
    b4c4:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    b4c8:	c8 01       	movw	r24, r16
    b4ca:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			mov.translation ((COORD3D) {0, step, 0}, step/(velocidad*TICK));     // step/velocidad*TICK hay que precalcularlo
    b4ce:	f4 01       	movw	r30, r8
    b4d0:	e1 88       	ldd	r14, Z+17	; 0x11
    b4d2:	f2 88       	ldd	r15, Z+18	; 0x12
    b4d4:	03 89       	ldd	r16, Z+19	; 0x13
    b4d6:	14 89       	ldd	r17, Z+20	; 0x14
    b4d8:	7f ea       	ldi	r23, 0xAF	; 175
    b4da:	a7 2e       	mov	r10, r23
    b4dc:	b1 2c       	mov	r11, r1
    b4de:	ac 0e       	add	r10, r28
    b4e0:	bd 1e       	adc	r11, r29
    b4e2:	80 e0       	ldi	r24, 0x00	; 0
    b4e4:	90 e0       	ldi	r25, 0x00	; 0
    b4e6:	a0 e0       	ldi	r26, 0x00	; 0
    b4e8:	b0 e0       	ldi	r27, 0x00	; 0
    b4ea:	f5 01       	movw	r30, r10
    b4ec:	80 83       	st	Z, r24
    b4ee:	91 83       	std	Z+1, r25	; 0x01
    b4f0:	a2 83       	std	Z+2, r26	; 0x02
    b4f2:	b3 83       	std	Z+3, r27	; 0x03
    b4f4:	e4 82       	std	Z+4, r14	; 0x04
    b4f6:	f5 82       	std	Z+5, r15	; 0x05
    b4f8:	06 83       	std	Z+6, r16	; 0x06
    b4fa:	17 83       	std	Z+7, r17	; 0x07
    b4fc:	31 cf       	rjmp	.-414    	; 0xb360 <_ZN13RemoteControl12traslacionesEh+0x13c>
			break;
			
		case RC_ENTER1:
			texto1 = "STORE";
    b4fe:	8e 01       	movw	r16, r28
    b500:	0b 5d       	subi	r16, 0xDB	; 219
    b502:	1f 4f       	sbci	r17, 0xFF	; 255
    b504:	c8 01       	movw	r24, r16
    b506:	62 ee       	ldi	r22, 0xE2	; 226
    b508:	72 e0       	ldi	r23, 0x02	; 2
    b50a:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    b50e:	c4 01       	movw	r24, r8
    b510:	88 96       	adiw	r24, 0x28	; 40
    b512:	b8 01       	movw	r22, r16
    b514:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    b518:	c8 01       	movw	r24, r16
    b51a:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			mov.actual_pos_ref ();
    b51e:	81 ee       	ldi	r24, 0xE1	; 225
    b520:	90 e1       	ldi	r25, 0x10	; 16
    b522:	0e 94 fe 21 	call	0x43fc	; 0x43fc <_ZN10Movimiento14actual_pos_refEv>
    b526:	87 c1       	rjmp	.+782    	; 0xb836 <_ZN13RemoteControl12traslacionesEh+0x612>
			break;
			
		case RC_VOL_UP:
			if (pantalla.isBusy()) {break;}
    b528:	80 ec       	ldi	r24, 0xC0	; 192
    b52a:	96 e0       	ldi	r25, 0x06	; 6
    b52c:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    b530:	88 23       	and	r24, r24
    b532:	09 f0       	breq	.+2      	; 0xb536 <_ZN13RemoteControl12traslacionesEh+0x312>
    b534:	80 c1       	rjmp	.+768    	; 0xb836 <_ZN13RemoteControl12traslacionesEh+0x612>
			velocidad = constrain (velocidad+inc, 1, 50);
    b536:	f4 01       	movw	r30, r8
    b538:	60 81       	ld	r22, Z
    b53a:	71 81       	ldd	r23, Z+1	; 0x01
    b53c:	82 81       	ldd	r24, Z+2	; 0x02
    b53e:	93 81       	ldd	r25, Z+3	; 0x03
    b540:	21 a1       	ldd	r18, Z+33	; 0x21
    b542:	32 a1       	ldd	r19, Z+34	; 0x22
    b544:	43 a1       	ldd	r20, Z+35	; 0x23
    b546:	54 a1       	ldd	r21, Z+36	; 0x24
    b548:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    b54c:	7b 01       	movw	r14, r22
    b54e:	8c 01       	movw	r16, r24
    b550:	20 e0       	ldi	r18, 0x00	; 0
    b552:	30 e0       	ldi	r19, 0x00	; 0
    b554:	40 e8       	ldi	r20, 0x80	; 128
    b556:	5f e3       	ldi	r21, 0x3F	; 63
    b558:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    b55c:	88 23       	and	r24, r24
    b55e:	5c f4       	brge	.+22     	; 0xb576 <_ZN13RemoteControl12traslacionesEh+0x352>
    b560:	0f 2e       	mov	r0, r31
    b562:	f0 e0       	ldi	r31, 0x00	; 0
    b564:	ef 2e       	mov	r14, r31
    b566:	f0 e0       	ldi	r31, 0x00	; 0
    b568:	ff 2e       	mov	r15, r31
    b56a:	f0 e8       	ldi	r31, 0x80	; 128
    b56c:	0f 2f       	mov	r16, r31
    b56e:	ff e3       	ldi	r31, 0x3F	; 63
    b570:	1f 2f       	mov	r17, r31
    b572:	f0 2d       	mov	r31, r0
    b574:	14 c0       	rjmp	.+40     	; 0xb59e <_ZN13RemoteControl12traslacionesEh+0x37a>
    b576:	c8 01       	movw	r24, r16
    b578:	b7 01       	movw	r22, r14
    b57a:	20 e0       	ldi	r18, 0x00	; 0
    b57c:	30 e0       	ldi	r19, 0x00	; 0
    b57e:	48 e4       	ldi	r20, 0x48	; 72
    b580:	52 e4       	ldi	r21, 0x42	; 66
    b582:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <__gesf2>
    b586:	18 16       	cp	r1, r24
    b588:	54 f4       	brge	.+20     	; 0xb59e <_ZN13RemoteControl12traslacionesEh+0x37a>
    b58a:	0f 2e       	mov	r0, r31
    b58c:	f0 e0       	ldi	r31, 0x00	; 0
    b58e:	ef 2e       	mov	r14, r31
    b590:	f0 e0       	ldi	r31, 0x00	; 0
    b592:	ff 2e       	mov	r15, r31
    b594:	f8 e4       	ldi	r31, 0x48	; 72
    b596:	0f 2f       	mov	r16, r31
    b598:	f2 e4       	ldi	r31, 0x42	; 66
    b59a:	1f 2f       	mov	r17, r31
    b59c:	f0 2d       	mov	r31, r0
    b59e:	f4 01       	movw	r30, r8
    b5a0:	e0 82       	st	Z, r14
    b5a2:	f1 82       	std	Z+1, r15	; 0x01
    b5a4:	02 83       	std	Z+2, r16	; 0x02
    b5a6:	13 83       	std	Z+3, r17	; 0x03
			texto1 = "Vel " + float2string (velocidad);
    b5a8:	61 e3       	ldi	r22, 0x31	; 49
    b5aa:	c6 2e       	mov	r12, r22
    b5ac:	d1 2c       	mov	r13, r1
    b5ae:	cc 0e       	add	r12, r28
    b5b0:	dd 1e       	adc	r13, r29
    b5b2:	c6 01       	movw	r24, r12
    b5b4:	68 ee       	ldi	r22, 0xE8	; 232
    b5b6:	72 e0       	ldi	r23, 0x02	; 2
    b5b8:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    b5bc:	5b e2       	ldi	r21, 0x2B	; 43
    b5be:	e5 2e       	mov	r14, r21
    b5c0:	f1 2c       	mov	r15, r1
    b5c2:	ec 0e       	add	r14, r28
    b5c4:	fd 1e       	adc	r15, r29
    b5c6:	f4 01       	movw	r30, r8
    b5c8:	40 81       	ld	r20, Z
    b5ca:	51 81       	ldd	r21, Z+1	; 0x01
    b5cc:	62 81       	ldd	r22, Z+2	; 0x02
    b5ce:	73 81       	ldd	r23, Z+3	; 0x03
    b5d0:	c7 01       	movw	r24, r14
    b5d2:	0e 94 51 67 	call	0xcea2	; 0xcea2 <_Z12float2stringf>
    b5d6:	8e 01       	movw	r16, r28
    b5d8:	09 5c       	subi	r16, 0xC9	; 201
    b5da:	1f 4f       	sbci	r17, 0xFF	; 255
    b5dc:	16 c1       	rjmp	.+556    	; 0xb80a <_ZN13RemoteControl12traslacionesEh+0x5e6>
			retardo = true;
			break;
			
		case RC_VOL_DN:
			if (pantalla.isBusy()) {break;}
    b5de:	80 ec       	ldi	r24, 0xC0	; 192
    b5e0:	96 e0       	ldi	r25, 0x06	; 6
    b5e2:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    b5e6:	88 23       	and	r24, r24
    b5e8:	09 f0       	breq	.+2      	; 0xb5ec <_ZN13RemoteControl12traslacionesEh+0x3c8>
    b5ea:	25 c1       	rjmp	.+586    	; 0xb836 <_ZN13RemoteControl12traslacionesEh+0x612>
			velocidad = constrain (velocidad-inc, 1, 50);
    b5ec:	f4 01       	movw	r30, r8
    b5ee:	60 81       	ld	r22, Z
    b5f0:	71 81       	ldd	r23, Z+1	; 0x01
    b5f2:	82 81       	ldd	r24, Z+2	; 0x02
    b5f4:	93 81       	ldd	r25, Z+3	; 0x03
    b5f6:	21 a1       	ldd	r18, Z+33	; 0x21
    b5f8:	32 a1       	ldd	r19, Z+34	; 0x22
    b5fa:	43 a1       	ldd	r20, Z+35	; 0x23
    b5fc:	54 a1       	ldd	r21, Z+36	; 0x24
    b5fe:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    b602:	7b 01       	movw	r14, r22
    b604:	8c 01       	movw	r16, r24
    b606:	20 e0       	ldi	r18, 0x00	; 0
    b608:	30 e0       	ldi	r19, 0x00	; 0
    b60a:	40 e8       	ldi	r20, 0x80	; 128
    b60c:	5f e3       	ldi	r21, 0x3F	; 63
    b60e:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    b612:	88 23       	and	r24, r24
    b614:	5c f4       	brge	.+22     	; 0xb62c <_ZN13RemoteControl12traslacionesEh+0x408>
    b616:	0f 2e       	mov	r0, r31
    b618:	f0 e0       	ldi	r31, 0x00	; 0
    b61a:	ef 2e       	mov	r14, r31
    b61c:	f0 e0       	ldi	r31, 0x00	; 0
    b61e:	ff 2e       	mov	r15, r31
    b620:	f0 e8       	ldi	r31, 0x80	; 128
    b622:	0f 2f       	mov	r16, r31
    b624:	ff e3       	ldi	r31, 0x3F	; 63
    b626:	1f 2f       	mov	r17, r31
    b628:	f0 2d       	mov	r31, r0
    b62a:	14 c0       	rjmp	.+40     	; 0xb654 <_ZN13RemoteControl12traslacionesEh+0x430>
    b62c:	c8 01       	movw	r24, r16
    b62e:	b7 01       	movw	r22, r14
    b630:	20 e0       	ldi	r18, 0x00	; 0
    b632:	30 e0       	ldi	r19, 0x00	; 0
    b634:	48 e4       	ldi	r20, 0x48	; 72
    b636:	52 e4       	ldi	r21, 0x42	; 66
    b638:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <__gesf2>
    b63c:	18 16       	cp	r1, r24
    b63e:	54 f4       	brge	.+20     	; 0xb654 <_ZN13RemoteControl12traslacionesEh+0x430>
    b640:	0f 2e       	mov	r0, r31
    b642:	f0 e0       	ldi	r31, 0x00	; 0
    b644:	ef 2e       	mov	r14, r31
    b646:	f0 e0       	ldi	r31, 0x00	; 0
    b648:	ff 2e       	mov	r15, r31
    b64a:	f8 e4       	ldi	r31, 0x48	; 72
    b64c:	0f 2f       	mov	r16, r31
    b64e:	f2 e4       	ldi	r31, 0x42	; 66
    b650:	1f 2f       	mov	r17, r31
    b652:	f0 2d       	mov	r31, r0
    b654:	f4 01       	movw	r30, r8
    b656:	e0 82       	st	Z, r14
    b658:	f1 82       	std	Z+1, r15	; 0x01
    b65a:	02 83       	std	Z+2, r16	; 0x02
    b65c:	13 83       	std	Z+3, r17	; 0x03
			texto1 = "Vel " + float2string (velocidad);
    b65e:	43 e4       	ldi	r20, 0x43	; 67
    b660:	c4 2e       	mov	r12, r20
    b662:	d1 2c       	mov	r13, r1
    b664:	cc 0e       	add	r12, r28
    b666:	dd 1e       	adc	r13, r29
    b668:	c6 01       	movw	r24, r12
    b66a:	68 ee       	ldi	r22, 0xE8	; 232
    b66c:	72 e0       	ldi	r23, 0x02	; 2
    b66e:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    b672:	3d e3       	ldi	r19, 0x3D	; 61
    b674:	e3 2e       	mov	r14, r19
    b676:	f1 2c       	mov	r15, r1
    b678:	ec 0e       	add	r14, r28
    b67a:	fd 1e       	adc	r15, r29
    b67c:	f4 01       	movw	r30, r8
    b67e:	40 81       	ld	r20, Z
    b680:	51 81       	ldd	r21, Z+1	; 0x01
    b682:	62 81       	ldd	r22, Z+2	; 0x02
    b684:	73 81       	ldd	r23, Z+3	; 0x03
    b686:	c7 01       	movw	r24, r14
    b688:	0e 94 51 67 	call	0xcea2	; 0xcea2 <_Z12float2stringf>
    b68c:	8e 01       	movw	r16, r28
    b68e:	07 5b       	subi	r16, 0xB7	; 183
    b690:	1f 4f       	sbci	r17, 0xFF	; 255
    b692:	bb c0       	rjmp	.+374    	; 0xb80a <_ZN13RemoteControl12traslacionesEh+0x5e6>
			retardo = true;
			break;
			
		case RC_CH_UP:
			if (pantalla.isBusy()) {break;}
    b694:	80 ec       	ldi	r24, 0xC0	; 192
    b696:	96 e0       	ldi	r25, 0x06	; 6
    b698:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    b69c:	88 23       	and	r24, r24
    b69e:	09 f0       	breq	.+2      	; 0xb6a2 <_ZN13RemoteControl12traslacionesEh+0x47e>
    b6a0:	ca c0       	rjmp	.+404    	; 0xb836 <_ZN13RemoteControl12traslacionesEh+0x612>
			if (!isMoving) {step = constrain (step+inc, .5, 5);}
    b6a2:	f4 01       	movw	r30, r8
    b6a4:	85 a1       	ldd	r24, Z+37	; 0x25
    b6a6:	88 23       	and	r24, r24
    b6a8:	c1 f5       	brne	.+112    	; 0xb71a <_ZN13RemoteControl12traslacionesEh+0x4f6>
    b6aa:	61 89       	ldd	r22, Z+17	; 0x11
    b6ac:	72 89       	ldd	r23, Z+18	; 0x12
    b6ae:	83 89       	ldd	r24, Z+19	; 0x13
    b6b0:	94 89       	ldd	r25, Z+20	; 0x14
    b6b2:	21 a1       	ldd	r18, Z+33	; 0x21
    b6b4:	32 a1       	ldd	r19, Z+34	; 0x22
    b6b6:	43 a1       	ldd	r20, Z+35	; 0x23
    b6b8:	54 a1       	ldd	r21, Z+36	; 0x24
    b6ba:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    b6be:	7b 01       	movw	r14, r22
    b6c0:	8c 01       	movw	r16, r24
    b6c2:	20 e0       	ldi	r18, 0x00	; 0
    b6c4:	30 e0       	ldi	r19, 0x00	; 0
    b6c6:	40 e0       	ldi	r20, 0x00	; 0
    b6c8:	5f e3       	ldi	r21, 0x3F	; 63
    b6ca:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    b6ce:	88 23       	and	r24, r24
    b6d0:	5c f4       	brge	.+22     	; 0xb6e8 <_ZN13RemoteControl12traslacionesEh+0x4c4>
    b6d2:	0f 2e       	mov	r0, r31
    b6d4:	f0 e0       	ldi	r31, 0x00	; 0
    b6d6:	ef 2e       	mov	r14, r31
    b6d8:	f0 e0       	ldi	r31, 0x00	; 0
    b6da:	ff 2e       	mov	r15, r31
    b6dc:	f0 e0       	ldi	r31, 0x00	; 0
    b6de:	0f 2f       	mov	r16, r31
    b6e0:	ff e3       	ldi	r31, 0x3F	; 63
    b6e2:	1f 2f       	mov	r17, r31
    b6e4:	f0 2d       	mov	r31, r0
    b6e6:	14 c0       	rjmp	.+40     	; 0xb710 <_ZN13RemoteControl12traslacionesEh+0x4ec>
    b6e8:	c8 01       	movw	r24, r16
    b6ea:	b7 01       	movw	r22, r14
    b6ec:	20 e0       	ldi	r18, 0x00	; 0
    b6ee:	30 e0       	ldi	r19, 0x00	; 0
    b6f0:	40 ea       	ldi	r20, 0xA0	; 160
    b6f2:	50 e4       	ldi	r21, 0x40	; 64
    b6f4:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <__gesf2>
    b6f8:	18 16       	cp	r1, r24
    b6fa:	54 f4       	brge	.+20     	; 0xb710 <_ZN13RemoteControl12traslacionesEh+0x4ec>
    b6fc:	0f 2e       	mov	r0, r31
    b6fe:	f0 e0       	ldi	r31, 0x00	; 0
    b700:	ef 2e       	mov	r14, r31
    b702:	f0 e0       	ldi	r31, 0x00	; 0
    b704:	ff 2e       	mov	r15, r31
    b706:	f0 ea       	ldi	r31, 0xA0	; 160
    b708:	0f 2f       	mov	r16, r31
    b70a:	f0 e4       	ldi	r31, 0x40	; 64
    b70c:	1f 2f       	mov	r17, r31
    b70e:	f0 2d       	mov	r31, r0
    b710:	f4 01       	movw	r30, r8
    b712:	e1 8a       	std	Z+17, r14	; 0x11
    b714:	f2 8a       	std	Z+18, r15	; 0x12
    b716:	03 8b       	std	Z+19, r16	; 0x13
    b718:	14 8b       	std	Z+20, r17	; 0x14
			texto1 = "Step " + float2string (step);
    b71a:	25 e5       	ldi	r18, 0x55	; 85
    b71c:	c2 2e       	mov	r12, r18
    b71e:	d1 2c       	mov	r13, r1
    b720:	cc 0e       	add	r12, r28
    b722:	dd 1e       	adc	r13, r29
    b724:	c6 01       	movw	r24, r12
    b726:	6e eb       	ldi	r22, 0xBE	; 190
    b728:	72 e0       	ldi	r23, 0x02	; 2
    b72a:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    b72e:	9f e4       	ldi	r25, 0x4F	; 79
    b730:	e9 2e       	mov	r14, r25
    b732:	f1 2c       	mov	r15, r1
    b734:	ec 0e       	add	r14, r28
    b736:	fd 1e       	adc	r15, r29
    b738:	f4 01       	movw	r30, r8
    b73a:	41 89       	ldd	r20, Z+17	; 0x11
    b73c:	52 89       	ldd	r21, Z+18	; 0x12
    b73e:	63 89       	ldd	r22, Z+19	; 0x13
    b740:	74 89       	ldd	r23, Z+20	; 0x14
    b742:	c7 01       	movw	r24, r14
    b744:	0e 94 51 67 	call	0xcea2	; 0xcea2 <_Z12float2stringf>
    b748:	8e 01       	movw	r16, r28
    b74a:	05 5a       	subi	r16, 0xA5	; 165
    b74c:	1f 4f       	sbci	r17, 0xFF	; 255
    b74e:	5d c0       	rjmp	.+186    	; 0xb80a <_ZN13RemoteControl12traslacionesEh+0x5e6>
			retardo = true;
			break;
			
		case RC_CH_DN:
			if (pantalla.isBusy()) {break;}
    b750:	80 ec       	ldi	r24, 0xC0	; 192
    b752:	96 e0       	ldi	r25, 0x06	; 6
    b754:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    b758:	88 23       	and	r24, r24
    b75a:	09 f0       	breq	.+2      	; 0xb75e <_ZN13RemoteControl12traslacionesEh+0x53a>
    b75c:	6c c0       	rjmp	.+216    	; 0xb836 <_ZN13RemoteControl12traslacionesEh+0x612>
			if (!isMoving) {step = constrain (step-inc, .5, 5);}
    b75e:	f4 01       	movw	r30, r8
    b760:	85 a1       	ldd	r24, Z+37	; 0x25
    b762:	88 23       	and	r24, r24
    b764:	c1 f5       	brne	.+112    	; 0xb7d6 <_ZN13RemoteControl12traslacionesEh+0x5b2>
    b766:	61 89       	ldd	r22, Z+17	; 0x11
    b768:	72 89       	ldd	r23, Z+18	; 0x12
    b76a:	83 89       	ldd	r24, Z+19	; 0x13
    b76c:	94 89       	ldd	r25, Z+20	; 0x14
    b76e:	21 a1       	ldd	r18, Z+33	; 0x21
    b770:	32 a1       	ldd	r19, Z+34	; 0x22
    b772:	43 a1       	ldd	r20, Z+35	; 0x23
    b774:	54 a1       	ldd	r21, Z+36	; 0x24
    b776:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    b77a:	7b 01       	movw	r14, r22
    b77c:	8c 01       	movw	r16, r24
    b77e:	20 e0       	ldi	r18, 0x00	; 0
    b780:	30 e0       	ldi	r19, 0x00	; 0
    b782:	40 e0       	ldi	r20, 0x00	; 0
    b784:	5f e3       	ldi	r21, 0x3F	; 63
    b786:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    b78a:	88 23       	and	r24, r24
    b78c:	5c f4       	brge	.+22     	; 0xb7a4 <_ZN13RemoteControl12traslacionesEh+0x580>
    b78e:	0f 2e       	mov	r0, r31
    b790:	f0 e0       	ldi	r31, 0x00	; 0
    b792:	ef 2e       	mov	r14, r31
    b794:	f0 e0       	ldi	r31, 0x00	; 0
    b796:	ff 2e       	mov	r15, r31
    b798:	f0 e0       	ldi	r31, 0x00	; 0
    b79a:	0f 2f       	mov	r16, r31
    b79c:	ff e3       	ldi	r31, 0x3F	; 63
    b79e:	1f 2f       	mov	r17, r31
    b7a0:	f0 2d       	mov	r31, r0
    b7a2:	14 c0       	rjmp	.+40     	; 0xb7cc <_ZN13RemoteControl12traslacionesEh+0x5a8>
    b7a4:	c8 01       	movw	r24, r16
    b7a6:	b7 01       	movw	r22, r14
    b7a8:	20 e0       	ldi	r18, 0x00	; 0
    b7aa:	30 e0       	ldi	r19, 0x00	; 0
    b7ac:	40 ea       	ldi	r20, 0xA0	; 160
    b7ae:	50 e4       	ldi	r21, 0x40	; 64
    b7b0:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <__gesf2>
    b7b4:	18 16       	cp	r1, r24
    b7b6:	54 f4       	brge	.+20     	; 0xb7cc <_ZN13RemoteControl12traslacionesEh+0x5a8>
    b7b8:	0f 2e       	mov	r0, r31
    b7ba:	f0 e0       	ldi	r31, 0x00	; 0
    b7bc:	ef 2e       	mov	r14, r31
    b7be:	f0 e0       	ldi	r31, 0x00	; 0
    b7c0:	ff 2e       	mov	r15, r31
    b7c2:	f0 ea       	ldi	r31, 0xA0	; 160
    b7c4:	0f 2f       	mov	r16, r31
    b7c6:	f0 e4       	ldi	r31, 0x40	; 64
    b7c8:	1f 2f       	mov	r17, r31
    b7ca:	f0 2d       	mov	r31, r0
    b7cc:	f4 01       	movw	r30, r8
    b7ce:	e1 8a       	std	Z+17, r14	; 0x11
    b7d0:	f2 8a       	std	Z+18, r15	; 0x12
    b7d2:	03 8b       	std	Z+19, r16	; 0x13
    b7d4:	14 8b       	std	Z+20, r17	; 0x14
			texto1 = "Step " + float2string (step);
    b7d6:	87 e6       	ldi	r24, 0x67	; 103
    b7d8:	c8 2e       	mov	r12, r24
    b7da:	d1 2c       	mov	r13, r1
    b7dc:	cc 0e       	add	r12, r28
    b7de:	dd 1e       	adc	r13, r29
    b7e0:	c6 01       	movw	r24, r12
    b7e2:	6e eb       	ldi	r22, 0xBE	; 190
    b7e4:	72 e0       	ldi	r23, 0x02	; 2
    b7e6:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    b7ea:	01 e6       	ldi	r16, 0x61	; 97
    b7ec:	e0 2e       	mov	r14, r16
    b7ee:	f1 2c       	mov	r15, r1
    b7f0:	ec 0e       	add	r14, r28
    b7f2:	fd 1e       	adc	r15, r29
    b7f4:	f4 01       	movw	r30, r8
    b7f6:	41 89       	ldd	r20, Z+17	; 0x11
    b7f8:	52 89       	ldd	r21, Z+18	; 0x12
    b7fa:	63 89       	ldd	r22, Z+19	; 0x13
    b7fc:	74 89       	ldd	r23, Z+20	; 0x14
    b7fe:	c7 01       	movw	r24, r14
    b800:	0e 94 51 67 	call	0xcea2	; 0xcea2 <_Z12float2stringf>
    b804:	8e 01       	movw	r16, r28
    b806:	03 59       	subi	r16, 0x93	; 147
    b808:	1f 4f       	sbci	r17, 0xFF	; 255
    b80a:	c8 01       	movw	r24, r16
    b80c:	b6 01       	movw	r22, r12
    b80e:	a7 01       	movw	r20, r14
    b810:	0e 94 4c 4d 	call	0x9a98	; 0x9a98 <_Zpl6StringRKS_>
    b814:	c4 01       	movw	r24, r8
    b816:	88 96       	adiw	r24, 0x28	; 40
    b818:	b8 01       	movw	r22, r16
    b81a:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    b81e:	c8 01       	movw	r24, r16
    b820:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    b824:	c7 01       	movw	r24, r14
    b826:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    b82a:	c6 01       	movw	r24, r12
    b82c:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			retardo = true;
    b830:	81 e0       	ldi	r24, 0x01	; 1
    b832:	f4 01       	movw	r30, r8
    b834:	86 ab       	std	Z+54, r24	; 0x36
			break;
	}

}
    b836:	c6 54       	subi	r28, 0x46	; 70
    b838:	df 4f       	sbci	r29, 0xFF	; 255
    b83a:	0f b6       	in	r0, 0x3f	; 63
    b83c:	f8 94       	cli
    b83e:	de bf       	out	0x3e, r29	; 62
    b840:	0f be       	out	0x3f, r0	; 63
    b842:	cd bf       	out	0x3d, r28	; 61
    b844:	cf 91       	pop	r28
    b846:	df 91       	pop	r29
    b848:	1f 91       	pop	r17
    b84a:	0f 91       	pop	r16
    b84c:	ff 90       	pop	r15
    b84e:	ef 90       	pop	r14
    b850:	df 90       	pop	r13
    b852:	cf 90       	pop	r12
    b854:	bf 90       	pop	r11
    b856:	af 90       	pop	r10
    b858:	9f 90       	pop	r9
    b85a:	8f 90       	pop	r8
    b85c:	7f 90       	pop	r7
    b85e:	6f 90       	pop	r6
    b860:	08 95       	ret

0000b862 <_ZN13RemoteControl9caminatasEh>:
	
	displayText ();
	
}

void RemoteControl::caminatas (byte comando) {
    b862:	5f 92       	push	r5
    b864:	6f 92       	push	r6
    b866:	7f 92       	push	r7
    b868:	8f 92       	push	r8
    b86a:	9f 92       	push	r9
    b86c:	af 92       	push	r10
    b86e:	bf 92       	push	r11
    b870:	cf 92       	push	r12
    b872:	df 92       	push	r13
    b874:	ef 92       	push	r14
    b876:	ff 92       	push	r15
    b878:	0f 93       	push	r16
    b87a:	1f 93       	push	r17
    b87c:	df 93       	push	r29
    b87e:	cf 93       	push	r28
    b880:	cd b7       	in	r28, 0x3d	; 61
    b882:	de b7       	in	r29, 0x3e	; 62
    b884:	c2 5c       	subi	r28, 0xC2	; 194
    b886:	d0 40       	sbci	r29, 0x00	; 0
    b888:	0f b6       	in	r0, 0x3f	; 63
    b88a:	f8 94       	cli
    b88c:	de bf       	out	0x3e, r29	; 62
    b88e:	0f be       	out	0x3f, r0	; 63
    b890:	cd bf       	out	0x3d, r28	; 61
    b892:	3c 01       	movw	r6, r24
    b894:	56 2e       	mov	r5, r22
	
	// todo esto está programado como el orto, hay que reorganizarlo
	// por ejemplo este "anguloso"... talvez las otras variables también deban estar acá
	static float anguloso = 0;
	
	if (anguloso != 0) {
    b896:	c0 90 b5 14 	lds	r12, 0x14B5
    b89a:	d0 90 b6 14 	lds	r13, 0x14B6
    b89e:	e0 90 b7 14 	lds	r14, 0x14B7
    b8a2:	f0 90 b8 14 	lds	r15, 0x14B8
    b8a6:	c7 01       	movw	r24, r14
    b8a8:	b6 01       	movw	r22, r12
    b8aa:	20 e0       	ldi	r18, 0x00	; 0
    b8ac:	30 e0       	ldi	r19, 0x00	; 0
    b8ae:	40 e0       	ldi	r20, 0x00	; 0
    b8b0:	50 e0       	ldi	r21, 0x00	; 0
    b8b2:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    b8b6:	88 23       	and	r24, r24
    b8b8:	b9 f1       	breq	.+110    	; 0xb928 <_ZN13RemoteControl9caminatasEh+0xc6>
		COORD2D matrix [2];
		getRotationMatrix (matrix, anguloso);
    b8ba:	8e 01       	movw	r16, r28
    b8bc:	0d 54       	subi	r16, 0x4D	; 77
    b8be:	1f 4f       	sbci	r17, 0xFF	; 255
    b8c0:	c8 01       	movw	r24, r16
    b8c2:	b7 01       	movw	r22, r14
    b8c4:	a6 01       	movw	r20, r12
    b8c6:	0e 94 ae 77 	call	0xef5c	; 0xef5c <_Z17getRotationMatrixP7COORD2Df>
		centro_caminata = applyMatrix (centro_caminata, matrix);
    b8ca:	d3 01       	movw	r26, r6
    b8cc:	59 96       	adiw	r26, 0x19	; 25
    b8ce:	2c 91       	ld	r18, X
    b8d0:	59 97       	sbiw	r26, 0x19	; 25
    b8d2:	5a 96       	adiw	r26, 0x1a	; 26
    b8d4:	3c 91       	ld	r19, X
    b8d6:	5a 97       	sbiw	r26, 0x1a	; 26
    b8d8:	5b 96       	adiw	r26, 0x1b	; 27
    b8da:	4c 91       	ld	r20, X
    b8dc:	5b 97       	sbiw	r26, 0x1b	; 27
    b8de:	5c 96       	adiw	r26, 0x1c	; 28
    b8e0:	5c 91       	ld	r21, X
    b8e2:	5c 97       	sbiw	r26, 0x1c	; 28
    b8e4:	5d 96       	adiw	r26, 0x1d	; 29
    b8e6:	6c 91       	ld	r22, X
    b8e8:	5d 97       	sbiw	r26, 0x1d	; 29
    b8ea:	5e 96       	adiw	r26, 0x1e	; 30
    b8ec:	7c 91       	ld	r23, X
    b8ee:	5e 97       	sbiw	r26, 0x1e	; 30
    b8f0:	5f 96       	adiw	r26, 0x1f	; 31
    b8f2:	8c 91       	ld	r24, X
    b8f4:	5f 97       	sbiw	r26, 0x1f	; 31
    b8f6:	90 96       	adiw	r26, 0x20	; 32
    b8f8:	9c 91       	ld	r25, X
    b8fa:	0e 94 e7 6c 	call	0xd9ce	; 0xd9ce <_Z11applyMatrix7COORD2DPS_>
    b8fe:	f3 01       	movw	r30, r6
    b900:	21 8f       	std	Z+25, r18	; 0x19
    b902:	32 8f       	std	Z+26, r19	; 0x1a
    b904:	43 8f       	std	Z+27, r20	; 0x1b
    b906:	54 8f       	std	Z+28, r21	; 0x1c
    b908:	65 8f       	std	Z+29, r22	; 0x1d
    b90a:	76 8f       	std	Z+30, r23	; 0x1e
    b90c:	87 8f       	std	Z+31, r24	; 0x1f
    b90e:	90 a3       	std	Z+32, r25	; 0x20
		anguloso = 0;
    b910:	80 e0       	ldi	r24, 0x00	; 0
    b912:	90 e0       	ldi	r25, 0x00	; 0
    b914:	a0 e0       	ldi	r26, 0x00	; 0
    b916:	b0 e0       	ldi	r27, 0x00	; 0
    b918:	80 93 b5 14 	sts	0x14B5, r24
    b91c:	90 93 b6 14 	sts	0x14B6, r25
    b920:	a0 93 b7 14 	sts	0x14B7, r26
    b924:	b0 93 b8 14 	sts	0x14B8, r27
	}
	
	// switch de seteo
	switch (comando) {
    b928:	ff e1       	ldi	r31, 0x1F	; 31
    b92a:	5f 16       	cp	r5, r31
    b92c:	09 f4       	brne	.+2      	; 0xb930 <_ZN13RemoteControl9caminatasEh+0xce>
    b92e:	00 c3       	rjmp	.+1536   	; 0xbf30 <_ZN13RemoteControl9caminatasEh+0x6ce>
    b930:	f5 15       	cp	r31, r5
    b932:	d8 f0       	brcs	.+54     	; 0xb96a <_ZN13RemoteControl9caminatasEh+0x108>
    b934:	83 e1       	ldi	r24, 0x13	; 19
    b936:	58 16       	cp	r5, r24
    b938:	09 f4       	brne	.+2      	; 0xb93c <_ZN13RemoteControl9caminatasEh+0xda>
    b93a:	c9 c1       	rjmp	.+914    	; 0xbcce <_ZN13RemoteControl9caminatasEh+0x46c>
    b93c:	85 15       	cp	r24, r5
    b93e:	40 f0       	brcs	.+16     	; 0xb950 <_ZN13RemoteControl9caminatasEh+0xee>
    b940:	95 e0       	ldi	r25, 0x05	; 5
    b942:	59 16       	cp	r5, r25
    b944:	81 f1       	breq	.+96     	; 0xb9a6 <_ZN13RemoteControl9caminatasEh+0x144>
    b946:	a0 e1       	ldi	r26, 0x10	; 16
    b948:	5a 16       	cp	r5, r26
    b94a:	09 f0       	breq	.+2      	; 0xb94e <_ZN13RemoteControl9caminatasEh+0xec>
    b94c:	b3 c4       	rjmp	.+2406   	; 0xc2b4 <_ZN13RemoteControl9caminatasEh+0xa52>
    b94e:	4d c1       	rjmp	.+666    	; 0xbbea <_ZN13RemoteControl9caminatasEh+0x388>
    b950:	bb e1       	ldi	r27, 0x1B	; 27
    b952:	5b 16       	cp	r5, r27
    b954:	09 f4       	brne	.+2      	; 0xb958 <_ZN13RemoteControl9caminatasEh+0xf6>
    b956:	6c c2       	rjmp	.+1240   	; 0xbe30 <_ZN13RemoteControl9caminatasEh+0x5ce>
    b958:	ee e1       	ldi	r30, 0x1E	; 30
    b95a:	5e 16       	cp	r5, r30
    b95c:	09 f4       	brne	.+2      	; 0xb960 <_ZN13RemoteControl9caminatasEh+0xfe>
    b95e:	f5 c3       	rjmp	.+2026   	; 0xc14a <_ZN13RemoteControl9caminatasEh+0x8e8>
    b960:	fa e1       	ldi	r31, 0x1A	; 26
    b962:	5f 16       	cp	r5, r31
    b964:	09 f0       	breq	.+2      	; 0xb968 <_ZN13RemoteControl9caminatasEh+0x106>
    b966:	a6 c4       	rjmp	.+2380   	; 0xc2b4 <_ZN13RemoteControl9caminatasEh+0xa52>
    b968:	61 c3       	rjmp	.+1730   	; 0xc02c <_ZN13RemoteControl9caminatasEh+0x7ca>
    b96a:	8c e5       	ldi	r24, 0x5C	; 92
    b96c:	58 16       	cp	r5, r24
    b96e:	49 f1       	breq	.+82     	; 0xb9c2 <_ZN13RemoteControl9caminatasEh+0x160>
    b970:	85 15       	cp	r24, r5
    b972:	68 f0       	brcs	.+26     	; 0xb98e <_ZN13RemoteControl9caminatasEh+0x12c>
    b974:	9f e4       	ldi	r25, 0x4F	; 79
    b976:	59 16       	cp	r5, r25
    b978:	09 f4       	brne	.+2      	; 0xb97c <_ZN13RemoteControl9caminatasEh+0x11a>
    b97a:	dd c1       	rjmp	.+954    	; 0xbd36 <_ZN13RemoteControl9caminatasEh+0x4d4>
    b97c:	a3 e5       	ldi	r26, 0x53	; 83
    b97e:	5a 16       	cp	r5, r26
    b980:	09 f4       	brne	.+2      	; 0xb984 <_ZN13RemoteControl9caminatasEh+0x122>
    b982:	3e c2       	rjmp	.+1148   	; 0xbe00 <_ZN13RemoteControl9caminatasEh+0x59e>
    b984:	be e4       	ldi	r27, 0x4E	; 78
    b986:	5b 16       	cp	r5, r27
    b988:	09 f0       	breq	.+2      	; 0xb98c <_ZN13RemoteControl9caminatasEh+0x12a>
    b98a:	94 c4       	rjmp	.+2344   	; 0xc2b4 <_ZN13RemoteControl9caminatasEh+0xa52>
    b98c:	43 c1       	rjmp	.+646    	; 0xbc14 <_ZN13RemoteControl9caminatasEh+0x3b2>
    b98e:	ee e5       	ldi	r30, 0x5E	; 94
    b990:	5e 16       	cp	r5, r30
    b992:	09 f4       	brne	.+2      	; 0xb996 <_ZN13RemoteControl9caminatasEh+0x134>
    b994:	a7 c0       	rjmp	.+334    	; 0xbae4 <_ZN13RemoteControl9caminatasEh+0x282>
    b996:	5e 16       	cp	r5, r30
    b998:	08 f4       	brcc	.+2      	; 0xb99c <_ZN13RemoteControl9caminatasEh+0x13a>
    b99a:	49 c0       	rjmp	.+146    	; 0xba2e <_ZN13RemoteControl9caminatasEh+0x1cc>
    b99c:	ff e5       	ldi	r31, 0x5F	; 95
    b99e:	5f 16       	cp	r5, r31
    b9a0:	09 f0       	breq	.+2      	; 0xb9a4 <_ZN13RemoteControl9caminatasEh+0x142>
    b9a2:	88 c4       	rjmp	.+2320   	; 0xc2b4 <_ZN13RemoteControl9caminatasEh+0xa52>
    b9a4:	28 c0       	rjmp	.+80     	; 0xb9f6 <_ZN13RemoteControl9caminatasEh+0x194>
		/// mega provisorio
		///////////////////////////
		case 5:
			mov.salto (velocidad, HALF_PI);
    b9a6:	d3 01       	movw	r26, r6
    b9a8:	4d 91       	ld	r20, X+
    b9aa:	5d 91       	ld	r21, X+
    b9ac:	6d 91       	ld	r22, X+
    b9ae:	7c 91       	ld	r23, X
    b9b0:	81 ee       	ldi	r24, 0xE1	; 225
    b9b2:	90 e1       	ldi	r25, 0x10	; 16
    b9b4:	0b ed       	ldi	r16, 0xDB	; 219
    b9b6:	1f e0       	ldi	r17, 0x0F	; 15
    b9b8:	29 ec       	ldi	r18, 0xC9	; 201
    b9ba:	3f e3       	ldi	r19, 0x3F	; 63
    b9bc:	0e 94 ba 23 	call	0x4774	; 0x4774 <_ZN10Movimiento5saltoEff>
    b9c0:	c8 c4       	rjmp	.+2448   	; 0xc352 <_ZN13RemoteControl9caminatasEh+0xaf0>
			break;
		///////////////////////////	
		/// termina mega provisorio
		case RC_UP:
			texto1 = "UP";
    b9c2:	8e 01       	movw	r16, r28
    b9c4:	0f 5f       	subi	r16, 0xFF	; 255
    b9c6:	1f 4f       	sbci	r17, 0xFF	; 255
    b9c8:	c8 01       	movw	r24, r16
    b9ca:	6d ee       	ldi	r22, 0xED	; 237
    b9cc:	72 e0       	ldi	r23, 0x02	; 2
    b9ce:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    b9d2:	c3 01       	movw	r24, r6
    b9d4:	88 96       	adiw	r24, 0x28	; 40
    b9d6:	b8 01       	movw	r22, r16
    b9d8:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    b9dc:	c8 01       	movw	r24, r16
    b9de:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			angulo = angulo_offset + HALF_PI;     
    b9e2:	f3 01       	movw	r30, r6
    b9e4:	61 85       	ldd	r22, Z+9	; 0x09
    b9e6:	72 85       	ldd	r23, Z+10	; 0x0a
    b9e8:	83 85       	ldd	r24, Z+11	; 0x0b
    b9ea:	94 85       	ldd	r25, Z+12	; 0x0c
    b9ec:	2b ed       	ldi	r18, 0xDB	; 219
    b9ee:	3f e0       	ldi	r19, 0x0F	; 15
    b9f0:	49 ec       	ldi	r20, 0xC9	; 201
    b9f2:	5f e3       	ldi	r21, 0x3F	; 63
    b9f4:	38 c0       	rjmp	.+112    	; 0xba66 <_ZN13RemoteControl9caminatasEh+0x204>
			break;
		
		case RC_DOWN:
			texto1 = "DN";
    b9f6:	8e 01       	movw	r16, r28
    b9f8:	09 5f       	subi	r16, 0xF9	; 249
    b9fa:	1f 4f       	sbci	r17, 0xFF	; 255
    b9fc:	c8 01       	movw	r24, r16
    b9fe:	60 ef       	ldi	r22, 0xF0	; 240
    ba00:	72 e0       	ldi	r23, 0x02	; 2
    ba02:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    ba06:	c3 01       	movw	r24, r6
    ba08:	88 96       	adiw	r24, 0x28	; 40
    ba0a:	b8 01       	movw	r22, r16
    ba0c:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    ba10:	c8 01       	movw	r24, r16
    ba12:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			angulo = angulo_offset - HALF_PI;
    ba16:	f3 01       	movw	r30, r6
    ba18:	61 85       	ldd	r22, Z+9	; 0x09
    ba1a:	72 85       	ldd	r23, Z+10	; 0x0a
    ba1c:	83 85       	ldd	r24, Z+11	; 0x0b
    ba1e:	94 85       	ldd	r25, Z+12	; 0x0c
    ba20:	2b ed       	ldi	r18, 0xDB	; 219
    ba22:	3f e0       	ldi	r19, 0x0F	; 15
    ba24:	49 ec       	ldi	r20, 0xC9	; 201
    ba26:	5f e3       	ldi	r21, 0x3F	; 63
    ba28:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    ba2c:	1e c0       	rjmp	.+60     	; 0xba6a <_ZN13RemoteControl9caminatasEh+0x208>
			break;
		
		case RC_LEFT:
			texto1 = "LEFT";
    ba2e:	8e 01       	movw	r16, r28
    ba30:	03 5f       	subi	r16, 0xF3	; 243
    ba32:	1f 4f       	sbci	r17, 0xFF	; 255
    ba34:	c8 01       	movw	r24, r16
    ba36:	63 ef       	ldi	r22, 0xF3	; 243
    ba38:	72 e0       	ldi	r23, 0x02	; 2
    ba3a:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    ba3e:	c3 01       	movw	r24, r6
    ba40:	88 96       	adiw	r24, 0x28	; 40
    ba42:	b8 01       	movw	r22, r16
    ba44:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    ba48:	c8 01       	movw	r24, r16
    ba4a:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			if (modo == CAMINATAS1) {
    ba4e:	f3 01       	movw	r30, r6
    ba50:	86 a1       	ldd	r24, Z+38	; 0x26
    ba52:	81 30       	cpi	r24, 0x01	; 1
    ba54:	91 f4       	brne	.+36     	; 0xba7a <_ZN13RemoteControl9caminatasEh+0x218>
				angulo = angulo_offset + PI;
    ba56:	61 85       	ldd	r22, Z+9	; 0x09
    ba58:	72 85       	ldd	r23, Z+10	; 0x0a
    ba5a:	83 85       	ldd	r24, Z+11	; 0x0b
    ba5c:	94 85       	ldd	r25, Z+12	; 0x0c
    ba5e:	2b ed       	ldi	r18, 0xDB	; 219
    ba60:	3f e0       	ldi	r19, 0x0F	; 15
    ba62:	49 e4       	ldi	r20, 0x49	; 73
    ba64:	50 e4       	ldi	r21, 0x40	; 64
    ba66:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    ba6a:	d3 01       	movw	r26, r6
    ba6c:	15 96       	adiw	r26, 0x05	; 5
    ba6e:	6d 93       	st	X+, r22
    ba70:	7d 93       	st	X+, r23
    ba72:	8d 93       	st	X+, r24
    ba74:	9c 93       	st	X, r25
    ba76:	18 97       	sbiw	r26, 0x08	; 8
    ba78:	22 c4       	rjmp	.+2116   	; 0xc2be <_ZN13RemoteControl9caminatasEh+0xa5c>
			} else {
				anguloso = 0;
    ba7a:	80 e0       	ldi	r24, 0x00	; 0
    ba7c:	90 e0       	ldi	r25, 0x00	; 0
    ba7e:	a0 e0       	ldi	r26, 0x00	; 0
    ba80:	b0 e0       	ldi	r27, 0x00	; 0
    ba82:	80 93 b5 14 	sts	0x14B5, r24
    ba86:	90 93 b6 14 	sts	0x14B6, r25
    ba8a:	a0 93 b7 14 	sts	0x14B7, r26
    ba8e:	b0 93 b8 14 	sts	0x14B8, r27
				mov.mon_angulo = &anguloso;       // aca el ángulo offset se usaría para rotar el centro      
    ba92:	85 eb       	ldi	r24, 0xB5	; 181
    ba94:	94 e1       	ldi	r25, 0x14	; 20
    ba96:	90 93 e2 10 	sts	0x10E2, r25
    ba9a:	80 93 e1 10 	sts	0x10E1, r24
				mov.curva (velocidad, desplazamiento, (COORD2D) {0, 0} , CCW, marcha, largo_pasos);
    ba9e:	f3 01       	movw	r30, r6
    baa0:	40 81       	ld	r20, Z
    baa2:	51 81       	ldd	r21, Z+1	; 0x01
    baa4:	62 81       	ldd	r22, Z+2	; 0x02
    baa6:	73 81       	ldd	r23, Z+3	; 0x03
    baa8:	e5 88       	ldd	r14, Z+21	; 0x15
    baaa:	f6 88       	ldd	r15, Z+22	; 0x16
    baac:	07 89       	ldd	r16, Z+23	; 0x17
    baae:	10 8d       	ldd	r17, Z+24	; 0x18
    bab0:	de 01       	movw	r26, r28
    bab2:	ad 55       	subi	r26, 0x5D	; 93
    bab4:	bf 4f       	sbci	r27, 0xFF	; 255
    bab6:	e7 e8       	ldi	r30, 0x87	; 135
    bab8:	f5 e0       	ldi	r31, 0x05	; 5
    baba:	88 e0       	ldi	r24, 0x08	; 8
    babc:	01 90       	ld	r0, Z+
    babe:	0d 92       	st	X+, r0
    bac0:	81 50       	subi	r24, 0x01	; 1
    bac2:	e1 f7       	brne	.-8      	; 0xbabc <_ZN13RemoteControl9caminatasEh+0x25a>
    bac4:	00 d0       	rcall	.+0      	; 0xbac6 <_ZN13RemoteControl9caminatasEh+0x264>
    bac6:	00 d0       	rcall	.+0      	; 0xbac8 <_ZN13RemoteControl9caminatasEh+0x266>
    bac8:	00 d0       	rcall	.+0      	; 0xbaca <_ZN13RemoteControl9caminatasEh+0x268>
    baca:	2d b7       	in	r18, 0x3d	; 61
    bacc:	3e b7       	in	r19, 0x3e	; 62
    bace:	2f 5f       	subi	r18, 0xFF	; 255
    bad0:	3f 4f       	sbci	r19, 0xFF	; 255
    bad2:	fe 01       	movw	r30, r28
    bad4:	ed 55       	subi	r30, 0x5D	; 93
    bad6:	ff 4f       	sbci	r31, 0xFF	; 255
    bad8:	81 e0       	ldi	r24, 0x01	; 1
    bada:	ad b7       	in	r26, 0x3d	; 61
    badc:	be b7       	in	r27, 0x3e	; 62
    bade:	11 96       	adiw	r26, 0x01	; 1
    bae0:	8c 93       	st	X, r24
    bae2:	58 c0       	rjmp	.+176    	; 0xbb94 <_ZN13RemoteControl9caminatasEh+0x332>
			}
			break;
	
		case RC_RIGHT:
			texto1 = "RIGHT";
    bae4:	8e 01       	movw	r16, r28
    bae6:	0d 5e       	subi	r16, 0xED	; 237
    bae8:	1f 4f       	sbci	r17, 0xFF	; 255
    baea:	c8 01       	movw	r24, r16
    baec:	68 ef       	ldi	r22, 0xF8	; 248
    baee:	72 e0       	ldi	r23, 0x02	; 2
    baf0:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    baf4:	c3 01       	movw	r24, r6
    baf6:	88 96       	adiw	r24, 0x28	; 40
    baf8:	b8 01       	movw	r22, r16
    bafa:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    bafe:	c8 01       	movw	r24, r16
    bb00:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			if (modo == CAMINATAS1) {
    bb04:	d3 01       	movw	r26, r6
    bb06:	96 96       	adiw	r26, 0x26	; 38
    bb08:	8c 91       	ld	r24, X
    bb0a:	96 97       	sbiw	r26, 0x26	; 38
    bb0c:	81 30       	cpi	r24, 0x01	; 1
    bb0e:	61 f4       	brne	.+24     	; 0xbb28 <_ZN13RemoteControl9caminatasEh+0x2c6>
				angulo = angulo_offset;
    bb10:	19 96       	adiw	r26, 0x09	; 9
    bb12:	8d 91       	ld	r24, X+
    bb14:	9d 91       	ld	r25, X+
    bb16:	0d 90       	ld	r0, X+
    bb18:	bc 91       	ld	r27, X
    bb1a:	a0 2d       	mov	r26, r0
    bb1c:	f3 01       	movw	r30, r6
    bb1e:	85 83       	std	Z+5, r24	; 0x05
    bb20:	96 83       	std	Z+6, r25	; 0x06
    bb22:	a7 83       	std	Z+7, r26	; 0x07
    bb24:	b0 87       	std	Z+8, r27	; 0x08
    bb26:	cb c3       	rjmp	.+1942   	; 0xc2be <_ZN13RemoteControl9caminatasEh+0xa5c>
			} else {
				anguloso = 0;
    bb28:	80 e0       	ldi	r24, 0x00	; 0
    bb2a:	90 e0       	ldi	r25, 0x00	; 0
    bb2c:	a0 e0       	ldi	r26, 0x00	; 0
    bb2e:	b0 e0       	ldi	r27, 0x00	; 0
    bb30:	80 93 b5 14 	sts	0x14B5, r24
    bb34:	90 93 b6 14 	sts	0x14B6, r25
    bb38:	a0 93 b7 14 	sts	0x14B7, r26
    bb3c:	b0 93 b8 14 	sts	0x14B8, r27
				mov.mon_angulo = &anguloso;       // aca el ángulo offset se usaría para rotar el centro 
    bb40:	85 eb       	ldi	r24, 0xB5	; 181
    bb42:	94 e1       	ldi	r25, 0x14	; 20
    bb44:	90 93 e2 10 	sts	0x10E2, r25
    bb48:	80 93 e1 10 	sts	0x10E1, r24
				mov.curva (velocidad, desplazamiento, (COORD2D) {0, 0} , CW, marcha, largo_pasos);
    bb4c:	d3 01       	movw	r26, r6
    bb4e:	4d 91       	ld	r20, X+
    bb50:	5d 91       	ld	r21, X+
    bb52:	6d 91       	ld	r22, X+
    bb54:	7c 91       	ld	r23, X
    bb56:	13 97       	sbiw	r26, 0x03	; 3
    bb58:	55 96       	adiw	r26, 0x15	; 21
    bb5a:	ed 90       	ld	r14, X+
    bb5c:	fd 90       	ld	r15, X+
    bb5e:	0d 91       	ld	r16, X+
    bb60:	1c 91       	ld	r17, X
    bb62:	58 97       	sbiw	r26, 0x18	; 24
    bb64:	de 01       	movw	r26, r28
    bb66:	a5 55       	subi	r26, 0x55	; 85
    bb68:	bf 4f       	sbci	r27, 0xFF	; 255
    bb6a:	ef e7       	ldi	r30, 0x7F	; 127
    bb6c:	f5 e0       	ldi	r31, 0x05	; 5
    bb6e:	88 e0       	ldi	r24, 0x08	; 8
    bb70:	01 90       	ld	r0, Z+
    bb72:	0d 92       	st	X+, r0
    bb74:	81 50       	subi	r24, 0x01	; 1
    bb76:	e1 f7       	brne	.-8      	; 0xbb70 <_ZN13RemoteControl9caminatasEh+0x30e>
    bb78:	00 d0       	rcall	.+0      	; 0xbb7a <_ZN13RemoteControl9caminatasEh+0x318>
    bb7a:	00 d0       	rcall	.+0      	; 0xbb7c <_ZN13RemoteControl9caminatasEh+0x31a>
    bb7c:	00 d0       	rcall	.+0      	; 0xbb7e <_ZN13RemoteControl9caminatasEh+0x31c>
    bb7e:	2d b7       	in	r18, 0x3d	; 61
    bb80:	3e b7       	in	r19, 0x3e	; 62
    bb82:	2f 5f       	subi	r18, 0xFF	; 255
    bb84:	3f 4f       	sbci	r19, 0xFF	; 255
    bb86:	fe 01       	movw	r30, r28
    bb88:	e5 55       	subi	r30, 0x55	; 85
    bb8a:	ff 4f       	sbci	r31, 0xFF	; 255
    bb8c:	ad b7       	in	r26, 0x3d	; 61
    bb8e:	be b7       	in	r27, 0x3e	; 62
    bb90:	11 96       	adiw	r26, 0x01	; 1
    bb92:	1c 92       	st	X, r1
    bb94:	d3 01       	movw	r26, r6
    bb96:	14 96       	adiw	r26, 0x04	; 4
    bb98:	8c 91       	ld	r24, X
    bb9a:	d9 01       	movw	r26, r18
    bb9c:	11 96       	adiw	r26, 0x01	; 1
    bb9e:	8c 93       	st	X, r24
    bba0:	d3 01       	movw	r26, r6
    bba2:	1d 96       	adiw	r26, 0x0d	; 13
    bba4:	ad 90       	ld	r10, X+
    bba6:	bd 90       	ld	r11, X+
    bba8:	cd 90       	ld	r12, X+
    bbaa:	dc 90       	ld	r13, X
    bbac:	50 97       	sbiw	r26, 0x10	; 16
    bbae:	d9 01       	movw	r26, r18
    bbb0:	12 96       	adiw	r26, 0x02	; 2
    bbb2:	ad 92       	st	X+, r10
    bbb4:	bd 92       	st	X+, r11
    bbb6:	cd 92       	st	X+, r12
    bbb8:	dc 92       	st	X, r13
    bbba:	15 97       	sbiw	r26, 0x05	; 5
    bbbc:	81 ee       	ldi	r24, 0xE1	; 225
    bbbe:	90 e1       	ldi	r25, 0x10	; 16
    bbc0:	98 01       	movw	r18, r16
    bbc2:	87 01       	movw	r16, r14
    bbc4:	80 80       	ld	r8, Z
    bbc6:	91 80       	ldd	r9, Z+1	; 0x01
    bbc8:	a2 80       	ldd	r10, Z+2	; 0x02
    bbca:	b3 80       	ldd	r11, Z+3	; 0x03
    bbcc:	c4 80       	ldd	r12, Z+4	; 0x04
    bbce:	d5 80       	ldd	r13, Z+5	; 0x05
    bbd0:	e6 80       	ldd	r14, Z+6	; 0x06
    bbd2:	f7 80       	ldd	r15, Z+7	; 0x07
    bbd4:	0e 94 1e 45 	call	0x8a3c	; 0x8a3c <_ZN10Movimiento5curvaEff7COORD2Dbhf>
    bbd8:	ed b7       	in	r30, 0x3d	; 61
    bbda:	fe b7       	in	r31, 0x3e	; 62
    bbdc:	36 96       	adiw	r30, 0x06	; 6
    bbde:	0f b6       	in	r0, 0x3f	; 63
    bbe0:	f8 94       	cli
    bbe2:	fe bf       	out	0x3e, r31	; 62
    bbe4:	0f be       	out	0x3f, r0	; 63
    bbe6:	ed bf       	out	0x3d, r30	; 61
    bbe8:	6a c3       	rjmp	.+1748   	; 0xc2be <_ZN13RemoteControl9caminatasEh+0xa5c>
			}
			break;

		case RC_MENU:
			texto1 = "MENU";
    bbea:	8e 01       	movw	r16, r28
    bbec:	07 5e       	subi	r16, 0xE7	; 231
    bbee:	1f 4f       	sbci	r17, 0xFF	; 255
    bbf0:	c8 01       	movw	r24, r16
    bbf2:	6e ef       	ldi	r22, 0xFE	; 254
    bbf4:	72 e0       	ldi	r23, 0x02	; 2
    bbf6:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    bbfa:	c3 01       	movw	r24, r6
    bbfc:	88 96       	adiw	r24, 0x28	; 40
    bbfe:	b8 01       	movw	r22, r16
    bc00:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    bc04:	c8 01       	movw	r24, r16
    bc06:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			mov.mon_angulo = NULL;
    bc0a:	10 92 e2 10 	sts	0x10E2, r1
    bc0e:	10 92 e1 10 	sts	0x10E1, r1
    bc12:	79 c0       	rjmp	.+242    	; 0xbd06 <_ZN13RemoteControl9caminatasEh+0x4a4>
			mov.curva (velocidad, desplazamiento, centro_caminata, CCW, marcha, largo_pasos);
			break;
			
		case RC_EXIT:
			texto1 = "EXIT";
    bc14:	8e 01       	movw	r16, r28
    bc16:	01 5e       	subi	r16, 0xE1	; 225
    bc18:	1f 4f       	sbci	r17, 0xFF	; 255
    bc1a:	c8 01       	movw	r24, r16
    bc1c:	63 e0       	ldi	r22, 0x03	; 3
    bc1e:	73 e0       	ldi	r23, 0x03	; 3
    bc20:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    bc24:	c3 01       	movw	r24, r6
    bc26:	88 96       	adiw	r24, 0x28	; 40
    bc28:	b8 01       	movw	r22, r16
    bc2a:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    bc2e:	c8 01       	movw	r24, r16
    bc30:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			mov.mon_angulo = NULL;
    bc34:	10 92 e2 10 	sts	0x10E2, r1
    bc38:	10 92 e1 10 	sts	0x10E1, r1
			mov.curva (velocidad, desplazamiento, centro_caminata, CW, marcha, largo_pasos);
    bc3c:	00 d0       	rcall	.+0      	; 0xbc3e <_ZN13RemoteControl9caminatasEh+0x3dc>
    bc3e:	00 d0       	rcall	.+0      	; 0xbc40 <_ZN13RemoteControl9caminatasEh+0x3de>
    bc40:	00 d0       	rcall	.+0      	; 0xbc42 <_ZN13RemoteControl9caminatasEh+0x3e0>
    bc42:	ed b7       	in	r30, 0x3d	; 61
    bc44:	fe b7       	in	r31, 0x3e	; 62
    bc46:	31 96       	adiw	r30, 0x01	; 1
    bc48:	d3 01       	movw	r26, r6
    bc4a:	4d 91       	ld	r20, X+
    bc4c:	5d 91       	ld	r21, X+
    bc4e:	6d 91       	ld	r22, X+
    bc50:	7c 91       	ld	r23, X
    bc52:	13 97       	sbiw	r26, 0x03	; 3
    bc54:	55 96       	adiw	r26, 0x15	; 21
    bc56:	0d 91       	ld	r16, X+
    bc58:	1d 91       	ld	r17, X+
    bc5a:	2d 91       	ld	r18, X+
    bc5c:	3c 91       	ld	r19, X
    bc5e:	58 97       	sbiw	r26, 0x18	; 24
    bc60:	ad b7       	in	r26, 0x3d	; 61
    bc62:	be b7       	in	r27, 0x3e	; 62
    bc64:	11 96       	adiw	r26, 0x01	; 1
    bc66:	1c 92       	st	X, r1
    bc68:	d3 01       	movw	r26, r6
    bc6a:	14 96       	adiw	r26, 0x04	; 4
    bc6c:	8c 91       	ld	r24, X
    bc6e:	14 97       	sbiw	r26, 0x04	; 4
    bc70:	81 83       	std	Z+1, r24	; 0x01
    bc72:	1d 96       	adiw	r26, 0x0d	; 13
    bc74:	cd 90       	ld	r12, X+
    bc76:	dd 90       	ld	r13, X+
    bc78:	ed 90       	ld	r14, X+
    bc7a:	fc 90       	ld	r15, X
    bc7c:	50 97       	sbiw	r26, 0x10	; 16
    bc7e:	c2 82       	std	Z+2, r12	; 0x02
    bc80:	d3 82       	std	Z+3, r13	; 0x03
    bc82:	e4 82       	std	Z+4, r14	; 0x04
    bc84:	f5 82       	std	Z+5, r15	; 0x05
    bc86:	81 ee       	ldi	r24, 0xE1	; 225
    bc88:	90 e1       	ldi	r25, 0x10	; 16
    bc8a:	59 96       	adiw	r26, 0x19	; 25
    bc8c:	8c 90       	ld	r8, X
    bc8e:	59 97       	sbiw	r26, 0x19	; 25
    bc90:	5a 96       	adiw	r26, 0x1a	; 26
    bc92:	9c 90       	ld	r9, X
    bc94:	5a 97       	sbiw	r26, 0x1a	; 26
    bc96:	5b 96       	adiw	r26, 0x1b	; 27
    bc98:	ac 90       	ld	r10, X
    bc9a:	5b 97       	sbiw	r26, 0x1b	; 27
    bc9c:	5c 96       	adiw	r26, 0x1c	; 28
    bc9e:	bc 90       	ld	r11, X
    bca0:	5c 97       	sbiw	r26, 0x1c	; 28
    bca2:	5d 96       	adiw	r26, 0x1d	; 29
    bca4:	cc 90       	ld	r12, X
    bca6:	5d 97       	sbiw	r26, 0x1d	; 29
    bca8:	5e 96       	adiw	r26, 0x1e	; 30
    bcaa:	dc 90       	ld	r13, X
    bcac:	5e 97       	sbiw	r26, 0x1e	; 30
    bcae:	5f 96       	adiw	r26, 0x1f	; 31
    bcb0:	ec 90       	ld	r14, X
    bcb2:	5f 97       	sbiw	r26, 0x1f	; 31
    bcb4:	90 96       	adiw	r26, 0x20	; 32
    bcb6:	fc 90       	ld	r15, X
    bcb8:	0e 94 1e 45 	call	0x8a3c	; 0x8a3c <_ZN10Movimiento5curvaEff7COORD2Dbhf>
    bcbc:	ed b7       	in	r30, 0x3d	; 61
    bcbe:	fe b7       	in	r31, 0x3e	; 62
    bcc0:	36 96       	adiw	r30, 0x06	; 6
    bcc2:	0f b6       	in	r0, 0x3f	; 63
    bcc4:	f8 94       	cli
    bcc6:	fe bf       	out	0x3e, r31	; 62
    bcc8:	0f be       	out	0x3f, r0	; 63
    bcca:	ed bf       	out	0x3d, r30	; 61
    bccc:	42 c3       	rjmp	.+1668   	; 0xc352 <_ZN13RemoteControl9caminatasEh+0xaf0>
			break;
			
		case RC_MTS:
			texto1 = "MTS";
    bcce:	8e 01       	movw	r16, r28
    bcd0:	0b 5d       	subi	r16, 0xDB	; 219
    bcd2:	1f 4f       	sbci	r17, 0xFF	; 255
    bcd4:	c8 01       	movw	r24, r16
    bcd6:	68 e0       	ldi	r22, 0x08	; 8
    bcd8:	73 e0       	ldi	r23, 0x03	; 3
    bcda:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    bcde:	c3 01       	movw	r24, r6
    bce0:	88 96       	adiw	r24, 0x28	; 40
    bce2:	b8 01       	movw	r22, r16
    bce4:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    bce8:	c8 01       	movw	r24, r16
    bcea:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			mov.mon_angulo = &angulo_offset;
    bcee:	89 e0       	ldi	r24, 0x09	; 9
    bcf0:	90 e0       	ldi	r25, 0x00	; 0
    bcf2:	68 0e       	add	r6, r24
    bcf4:	79 1e       	adc	r7, r25
    bcf6:	70 92 e2 10 	sts	0x10E2, r7
    bcfa:	60 92 e1 10 	sts	0x10E1, r6
    bcfe:	a7 ef       	ldi	r26, 0xF7	; 247
    bd00:	bf ef       	ldi	r27, 0xFF	; 255
    bd02:	6a 0e       	add	r6, r26
    bd04:	7b 1e       	adc	r7, r27
			mov.curva (velocidad, desplazamiento, centro_caminata, CCW, marcha, largo_pasos);
    bd06:	00 d0       	rcall	.+0      	; 0xbd08 <_ZN13RemoteControl9caminatasEh+0x4a6>
    bd08:	00 d0       	rcall	.+0      	; 0xbd0a <_ZN13RemoteControl9caminatasEh+0x4a8>
    bd0a:	00 d0       	rcall	.+0      	; 0xbd0c <_ZN13RemoteControl9caminatasEh+0x4aa>
    bd0c:	ed b7       	in	r30, 0x3d	; 61
    bd0e:	fe b7       	in	r31, 0x3e	; 62
    bd10:	31 96       	adiw	r30, 0x01	; 1
    bd12:	d3 01       	movw	r26, r6
    bd14:	4d 91       	ld	r20, X+
    bd16:	5d 91       	ld	r21, X+
    bd18:	6d 91       	ld	r22, X+
    bd1a:	7c 91       	ld	r23, X
    bd1c:	13 97       	sbiw	r26, 0x03	; 3
    bd1e:	55 96       	adiw	r26, 0x15	; 21
    bd20:	0d 91       	ld	r16, X+
    bd22:	1d 91       	ld	r17, X+
    bd24:	2d 91       	ld	r18, X+
    bd26:	3c 91       	ld	r19, X
    bd28:	58 97       	sbiw	r26, 0x18	; 24
    bd2a:	81 e0       	ldi	r24, 0x01	; 1
    bd2c:	ad b7       	in	r26, 0x3d	; 61
    bd2e:	be b7       	in	r27, 0x3e	; 62
    bd30:	11 96       	adiw	r26, 0x01	; 1
    bd32:	8c 93       	st	X, r24
    bd34:	99 cf       	rjmp	.-206    	; 0xbc68 <_ZN13RemoteControl9caminatasEh+0x406>
			break;
			
		case RC_CCTTX:
			mov.mon_angulo = &angulo_offset;
    bd36:	89 e0       	ldi	r24, 0x09	; 9
    bd38:	90 e0       	ldi	r25, 0x00	; 0
    bd3a:	68 0e       	add	r6, r24
    bd3c:	79 1e       	adc	r7, r25
    bd3e:	70 92 e2 10 	sts	0x10E2, r7
    bd42:	60 92 e1 10 	sts	0x10E1, r6
    bd46:	a7 ef       	ldi	r26, 0xF7	; 247
    bd48:	bf ef       	ldi	r27, 0xFF	; 255
    bd4a:	6a 0e       	add	r6, r26
    bd4c:	7b 1e       	adc	r7, r27
			mov.curva (velocidad, desplazamiento, centro_caminata, CW, marcha, largo_pasos);
    bd4e:	00 d0       	rcall	.+0      	; 0xbd50 <_ZN13RemoteControl9caminatasEh+0x4ee>
    bd50:	00 d0       	rcall	.+0      	; 0xbd52 <_ZN13RemoteControl9caminatasEh+0x4f0>
    bd52:	00 d0       	rcall	.+0      	; 0xbd54 <_ZN13RemoteControl9caminatasEh+0x4f2>
    bd54:	ed b7       	in	r30, 0x3d	; 61
    bd56:	fe b7       	in	r31, 0x3e	; 62
    bd58:	31 96       	adiw	r30, 0x01	; 1
    bd5a:	d3 01       	movw	r26, r6
    bd5c:	4d 91       	ld	r20, X+
    bd5e:	5d 91       	ld	r21, X+
    bd60:	6d 91       	ld	r22, X+
    bd62:	7c 91       	ld	r23, X
    bd64:	13 97       	sbiw	r26, 0x03	; 3
    bd66:	55 96       	adiw	r26, 0x15	; 21
    bd68:	0d 91       	ld	r16, X+
    bd6a:	1d 91       	ld	r17, X+
    bd6c:	2d 91       	ld	r18, X+
    bd6e:	3c 91       	ld	r19, X
    bd70:	58 97       	sbiw	r26, 0x18	; 24
    bd72:	ad b7       	in	r26, 0x3d	; 61
    bd74:	be b7       	in	r27, 0x3e	; 62
    bd76:	11 96       	adiw	r26, 0x01	; 1
    bd78:	1c 92       	st	X, r1
    bd7a:	d3 01       	movw	r26, r6
    bd7c:	14 96       	adiw	r26, 0x04	; 4
    bd7e:	8c 91       	ld	r24, X
    bd80:	14 97       	sbiw	r26, 0x04	; 4
    bd82:	81 83       	std	Z+1, r24	; 0x01
    bd84:	1d 96       	adiw	r26, 0x0d	; 13
    bd86:	cd 90       	ld	r12, X+
    bd88:	dd 90       	ld	r13, X+
    bd8a:	ed 90       	ld	r14, X+
    bd8c:	fc 90       	ld	r15, X
    bd8e:	50 97       	sbiw	r26, 0x10	; 16
    bd90:	c2 82       	std	Z+2, r12	; 0x02
    bd92:	d3 82       	std	Z+3, r13	; 0x03
    bd94:	e4 82       	std	Z+4, r14	; 0x04
    bd96:	f5 82       	std	Z+5, r15	; 0x05
    bd98:	81 ee       	ldi	r24, 0xE1	; 225
    bd9a:	90 e1       	ldi	r25, 0x10	; 16
    bd9c:	59 96       	adiw	r26, 0x19	; 25
    bd9e:	8c 90       	ld	r8, X
    bda0:	59 97       	sbiw	r26, 0x19	; 25
    bda2:	5a 96       	adiw	r26, 0x1a	; 26
    bda4:	9c 90       	ld	r9, X
    bda6:	5a 97       	sbiw	r26, 0x1a	; 26
    bda8:	5b 96       	adiw	r26, 0x1b	; 27
    bdaa:	ac 90       	ld	r10, X
    bdac:	5b 97       	sbiw	r26, 0x1b	; 27
    bdae:	5c 96       	adiw	r26, 0x1c	; 28
    bdb0:	bc 90       	ld	r11, X
    bdb2:	5c 97       	sbiw	r26, 0x1c	; 28
    bdb4:	5d 96       	adiw	r26, 0x1d	; 29
    bdb6:	cc 90       	ld	r12, X
    bdb8:	5d 97       	sbiw	r26, 0x1d	; 29
    bdba:	5e 96       	adiw	r26, 0x1e	; 30
    bdbc:	dc 90       	ld	r13, X
    bdbe:	5e 97       	sbiw	r26, 0x1e	; 30
    bdc0:	5f 96       	adiw	r26, 0x1f	; 31
    bdc2:	ec 90       	ld	r14, X
    bdc4:	5f 97       	sbiw	r26, 0x1f	; 31
    bdc6:	90 96       	adiw	r26, 0x20	; 32
    bdc8:	fc 90       	ld	r15, X
    bdca:	0e 94 1e 45 	call	0x8a3c	; 0x8a3c <_ZN10Movimiento5curvaEff7COORD2Dbhf>
			texto1 = "CC_TTX";
    bdce:	ed b7       	in	r30, 0x3d	; 61
    bdd0:	fe b7       	in	r31, 0x3e	; 62
    bdd2:	36 96       	adiw	r30, 0x06	; 6
    bdd4:	0f b6       	in	r0, 0x3f	; 63
    bdd6:	f8 94       	cli
    bdd8:	fe bf       	out	0x3e, r31	; 62
    bdda:	0f be       	out	0x3f, r0	; 63
    bddc:	ed bf       	out	0x3d, r30	; 61
    bdde:	8e 01       	movw	r16, r28
    bde0:	05 5d       	subi	r16, 0xD5	; 213
    bde2:	1f 4f       	sbci	r17, 0xFF	; 255
    bde4:	c8 01       	movw	r24, r16
    bde6:	6c e0       	ldi	r22, 0x0C	; 12
    bde8:	73 e0       	ldi	r23, 0x03	; 3
    bdea:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    bdee:	c3 01       	movw	r24, r6
    bdf0:	88 96       	adiw	r24, 0x28	; 40
    bdf2:	b8 01       	movw	r22, r16
    bdf4:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    bdf8:	c8 01       	movw	r24, r16
    bdfa:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    bdfe:	a9 c2       	rjmp	.+1362   	; 0xc352 <_ZN13RemoteControl9caminatasEh+0xaf0>
			break;
			
		case RC_ENTER1:
			texto1 = "STOP";
    be00:	8e 01       	movw	r16, r28
    be02:	0f 5c       	subi	r16, 0xCF	; 207
    be04:	1f 4f       	sbci	r17, 0xFF	; 255
    be06:	c8 01       	movw	r24, r16
    be08:	67 e7       	ldi	r22, 0x77	; 119
    be0a:	72 e0       	ldi	r23, 0x02	; 2
    be0c:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    be10:	c3 01       	movw	r24, r6
    be12:	88 96       	adiw	r24, 0x28	; 40
    be14:	b8 01       	movw	r22, r16
    be16:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    be1a:	c8 01       	movw	r24, r16
    be1c:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			mov.stop();
    be20:	81 ee       	ldi	r24, 0xE1	; 225
    be22:	90 e1       	ldi	r25, 0x10	; 16
    be24:	0e 94 68 28 	call	0x50d0	; 0x50d0 <_ZN10Movimiento4stopEv>
			isMoving = false;
    be28:	d3 01       	movw	r26, r6
    be2a:	95 96       	adiw	r26, 0x25	; 37
    be2c:	1c 92       	st	X, r1
    be2e:	91 c2       	rjmp	.+1314   	; 0xc352 <_ZN13RemoteControl9caminatasEh+0xaf0>
			break;
			
		case RC_VOL_UP:
			if (pantalla.isBusy()) {break;}
    be30:	80 ec       	ldi	r24, 0xC0	; 192
    be32:	96 e0       	ldi	r25, 0x06	; 6
    be34:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    be38:	88 23       	and	r24, r24
    be3a:	09 f0       	breq	.+2      	; 0xbe3e <_ZN13RemoteControl9caminatasEh+0x5dc>
    be3c:	3b c2       	rjmp	.+1142   	; 0xc2b4 <_ZN13RemoteControl9caminatasEh+0xa52>
			velocidad = constrain (velocidad+inc, 1, 50);
    be3e:	f3 01       	movw	r30, r6
    be40:	60 81       	ld	r22, Z
    be42:	71 81       	ldd	r23, Z+1	; 0x01
    be44:	82 81       	ldd	r24, Z+2	; 0x02
    be46:	93 81       	ldd	r25, Z+3	; 0x03
    be48:	21 a1       	ldd	r18, Z+33	; 0x21
    be4a:	32 a1       	ldd	r19, Z+34	; 0x22
    be4c:	43 a1       	ldd	r20, Z+35	; 0x23
    be4e:	54 a1       	ldd	r21, Z+36	; 0x24
    be50:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    be54:	7b 01       	movw	r14, r22
    be56:	8c 01       	movw	r16, r24
    be58:	20 e0       	ldi	r18, 0x00	; 0
    be5a:	30 e0       	ldi	r19, 0x00	; 0
    be5c:	40 e8       	ldi	r20, 0x80	; 128
    be5e:	5f e3       	ldi	r21, 0x3F	; 63
    be60:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    be64:	88 23       	and	r24, r24
    be66:	5c f4       	brge	.+22     	; 0xbe7e <_ZN13RemoteControl9caminatasEh+0x61c>
    be68:	0f 2e       	mov	r0, r31
    be6a:	f0 e0       	ldi	r31, 0x00	; 0
    be6c:	ef 2e       	mov	r14, r31
    be6e:	f0 e0       	ldi	r31, 0x00	; 0
    be70:	ff 2e       	mov	r15, r31
    be72:	f0 e8       	ldi	r31, 0x80	; 128
    be74:	0f 2f       	mov	r16, r31
    be76:	ff e3       	ldi	r31, 0x3F	; 63
    be78:	1f 2f       	mov	r17, r31
    be7a:	f0 2d       	mov	r31, r0
    be7c:	14 c0       	rjmp	.+40     	; 0xbea6 <_ZN13RemoteControl9caminatasEh+0x644>
    be7e:	c8 01       	movw	r24, r16
    be80:	b7 01       	movw	r22, r14
    be82:	20 e0       	ldi	r18, 0x00	; 0
    be84:	30 e0       	ldi	r19, 0x00	; 0
    be86:	48 e4       	ldi	r20, 0x48	; 72
    be88:	52 e4       	ldi	r21, 0x42	; 66
    be8a:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <__gesf2>
    be8e:	18 16       	cp	r1, r24
    be90:	54 f4       	brge	.+20     	; 0xbea6 <_ZN13RemoteControl9caminatasEh+0x644>
    be92:	0f 2e       	mov	r0, r31
    be94:	f0 e0       	ldi	r31, 0x00	; 0
    be96:	ef 2e       	mov	r14, r31
    be98:	f0 e0       	ldi	r31, 0x00	; 0
    be9a:	ff 2e       	mov	r15, r31
    be9c:	f8 e4       	ldi	r31, 0x48	; 72
    be9e:	0f 2f       	mov	r16, r31
    bea0:	f2 e4       	ldi	r31, 0x42	; 66
    bea2:	1f 2f       	mov	r17, r31
    bea4:	f0 2d       	mov	r31, r0
    bea6:	d3 01       	movw	r26, r6
    bea8:	ed 92       	st	X+, r14
    beaa:	fd 92       	st	X+, r15
    beac:	0d 93       	st	X+, r16
    beae:	1c 93       	st	X, r17
    beb0:	13 97       	sbiw	r26, 0x03	; 3
			texto1 = "Vel " + float2string (velocidad);
    beb2:	ad e3       	ldi	r26, 0x3D	; 61
    beb4:	ca 2e       	mov	r12, r26
    beb6:	d1 2c       	mov	r13, r1
    beb8:	cc 0e       	add	r12, r28
    beba:	dd 1e       	adc	r13, r29
    bebc:	c6 01       	movw	r24, r12
    bebe:	68 ee       	ldi	r22, 0xE8	; 232
    bec0:	72 e0       	ldi	r23, 0x02	; 2
    bec2:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    bec6:	f7 e3       	ldi	r31, 0x37	; 55
    bec8:	ef 2e       	mov	r14, r31
    beca:	f1 2c       	mov	r15, r1
    becc:	ec 0e       	add	r14, r28
    bece:	fd 1e       	adc	r15, r29
    bed0:	f3 01       	movw	r30, r6
    bed2:	40 81       	ld	r20, Z
    bed4:	51 81       	ldd	r21, Z+1	; 0x01
    bed6:	62 81       	ldd	r22, Z+2	; 0x02
    bed8:	73 81       	ldd	r23, Z+3	; 0x03
    beda:	c7 01       	movw	r24, r14
    bedc:	0e 94 51 67 	call	0xcea2	; 0xcea2 <_Z12float2stringf>
    bee0:	8e 01       	movw	r16, r28
    bee2:	0d 5b       	subi	r16, 0xBD	; 189
    bee4:	1f 4f       	sbci	r17, 0xFF	; 255
    bee6:	c8 01       	movw	r24, r16
    bee8:	b6 01       	movw	r22, r12
    beea:	a7 01       	movw	r20, r14
    beec:	0e 94 4c 4d 	call	0x9a98	; 0x9a98 <_Zpl6StringRKS_>
    bef0:	c3 01       	movw	r24, r6
    bef2:	88 96       	adiw	r24, 0x28	; 40
    bef4:	b8 01       	movw	r22, r16
    bef6:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    befa:	c8 01       	movw	r24, r16
    befc:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    bf00:	c7 01       	movw	r24, r14
    bf02:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    bf06:	c6 01       	movw	r24, r12
    bf08:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			if (isMoving) {mov.set_vel (velocidad);}
    bf0c:	d3 01       	movw	r26, r6
    bf0e:	95 96       	adiw	r26, 0x25	; 37
    bf10:	8c 91       	ld	r24, X
    bf12:	95 97       	sbiw	r26, 0x25	; 37
    bf14:	88 23       	and	r24, r24
    bf16:	41 f0       	breq	.+16     	; 0xbf28 <_ZN13RemoteControl9caminatasEh+0x6c6>
    bf18:	4d 91       	ld	r20, X+
    bf1a:	5d 91       	ld	r21, X+
    bf1c:	6d 91       	ld	r22, X+
    bf1e:	7c 91       	ld	r23, X
    bf20:	81 ee       	ldi	r24, 0xE1	; 225
    bf22:	90 e1       	ldi	r25, 0x10	; 16
    bf24:	0e 94 72 43 	call	0x86e4	; 0x86e4 <_ZN10Movimiento7set_velEf>
			retardo = true;
    bf28:	81 e0       	ldi	r24, 0x01	; 1
    bf2a:	f3 01       	movw	r30, r6
    bf2c:	86 ab       	std	Z+54, r24	; 0x36
    bf2e:	11 c2       	rjmp	.+1058   	; 0xc352 <_ZN13RemoteControl9caminatasEh+0xaf0>
			break;
			
		case RC_VOL_DN:
			if (pantalla.isBusy()) {break;}
    bf30:	80 ec       	ldi	r24, 0xC0	; 192
    bf32:	96 e0       	ldi	r25, 0x06	; 6
    bf34:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    bf38:	88 23       	and	r24, r24
    bf3a:	09 f0       	breq	.+2      	; 0xbf3e <_ZN13RemoteControl9caminatasEh+0x6dc>
    bf3c:	bb c1       	rjmp	.+886    	; 0xc2b4 <_ZN13RemoteControl9caminatasEh+0xa52>
			velocidad = constrain (velocidad-inc, 1, 50);
    bf3e:	d3 01       	movw	r26, r6
    bf40:	6d 91       	ld	r22, X+
    bf42:	7d 91       	ld	r23, X+
    bf44:	8d 91       	ld	r24, X+
    bf46:	9c 91       	ld	r25, X
    bf48:	13 97       	sbiw	r26, 0x03	; 3
    bf4a:	91 96       	adiw	r26, 0x21	; 33
    bf4c:	2d 91       	ld	r18, X+
    bf4e:	3d 91       	ld	r19, X+
    bf50:	4d 91       	ld	r20, X+
    bf52:	5c 91       	ld	r21, X
    bf54:	94 97       	sbiw	r26, 0x24	; 36
    bf56:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    bf5a:	7b 01       	movw	r14, r22
    bf5c:	8c 01       	movw	r16, r24
    bf5e:	20 e0       	ldi	r18, 0x00	; 0
    bf60:	30 e0       	ldi	r19, 0x00	; 0
    bf62:	40 e8       	ldi	r20, 0x80	; 128
    bf64:	5f e3       	ldi	r21, 0x3F	; 63
    bf66:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    bf6a:	88 23       	and	r24, r24
    bf6c:	5c f4       	brge	.+22     	; 0xbf84 <_ZN13RemoteControl9caminatasEh+0x722>
    bf6e:	0f 2e       	mov	r0, r31
    bf70:	f0 e0       	ldi	r31, 0x00	; 0
    bf72:	ef 2e       	mov	r14, r31
    bf74:	f0 e0       	ldi	r31, 0x00	; 0
    bf76:	ff 2e       	mov	r15, r31
    bf78:	f0 e8       	ldi	r31, 0x80	; 128
    bf7a:	0f 2f       	mov	r16, r31
    bf7c:	ff e3       	ldi	r31, 0x3F	; 63
    bf7e:	1f 2f       	mov	r17, r31
    bf80:	f0 2d       	mov	r31, r0
    bf82:	14 c0       	rjmp	.+40     	; 0xbfac <_ZN13RemoteControl9caminatasEh+0x74a>
    bf84:	c8 01       	movw	r24, r16
    bf86:	b7 01       	movw	r22, r14
    bf88:	20 e0       	ldi	r18, 0x00	; 0
    bf8a:	30 e0       	ldi	r19, 0x00	; 0
    bf8c:	48 e4       	ldi	r20, 0x48	; 72
    bf8e:	52 e4       	ldi	r21, 0x42	; 66
    bf90:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <__gesf2>
    bf94:	18 16       	cp	r1, r24
    bf96:	54 f4       	brge	.+20     	; 0xbfac <_ZN13RemoteControl9caminatasEh+0x74a>
    bf98:	0f 2e       	mov	r0, r31
    bf9a:	f0 e0       	ldi	r31, 0x00	; 0
    bf9c:	ef 2e       	mov	r14, r31
    bf9e:	f0 e0       	ldi	r31, 0x00	; 0
    bfa0:	ff 2e       	mov	r15, r31
    bfa2:	f8 e4       	ldi	r31, 0x48	; 72
    bfa4:	0f 2f       	mov	r16, r31
    bfa6:	f2 e4       	ldi	r31, 0x42	; 66
    bfa8:	1f 2f       	mov	r17, r31
    bfaa:	f0 2d       	mov	r31, r0
    bfac:	f3 01       	movw	r30, r6
    bfae:	e0 82       	st	Z, r14
    bfb0:	f1 82       	std	Z+1, r15	; 0x01
    bfb2:	02 83       	std	Z+2, r16	; 0x02
    bfb4:	13 83       	std	Z+3, r17	; 0x03
			texto1 = "Vel " + float2string (velocidad);
    bfb6:	ef e4       	ldi	r30, 0x4F	; 79
    bfb8:	ce 2e       	mov	r12, r30
    bfba:	d1 2c       	mov	r13, r1
    bfbc:	cc 0e       	add	r12, r28
    bfbe:	dd 1e       	adc	r13, r29
    bfc0:	c6 01       	movw	r24, r12
    bfc2:	68 ee       	ldi	r22, 0xE8	; 232
    bfc4:	72 e0       	ldi	r23, 0x02	; 2
    bfc6:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    bfca:	79 e4       	ldi	r23, 0x49	; 73
    bfcc:	e7 2e       	mov	r14, r23
    bfce:	f1 2c       	mov	r15, r1
    bfd0:	ec 0e       	add	r14, r28
    bfd2:	fd 1e       	adc	r15, r29
    bfd4:	d3 01       	movw	r26, r6
    bfd6:	4d 91       	ld	r20, X+
    bfd8:	5d 91       	ld	r21, X+
    bfda:	6d 91       	ld	r22, X+
    bfdc:	7c 91       	ld	r23, X
    bfde:	c7 01       	movw	r24, r14
    bfe0:	0e 94 51 67 	call	0xcea2	; 0xcea2 <_Z12float2stringf>
    bfe4:	8e 01       	movw	r16, r28
    bfe6:	0b 5a       	subi	r16, 0xAB	; 171
    bfe8:	1f 4f       	sbci	r17, 0xFF	; 255
    bfea:	c8 01       	movw	r24, r16
    bfec:	b6 01       	movw	r22, r12
    bfee:	a7 01       	movw	r20, r14
    bff0:	0e 94 4c 4d 	call	0x9a98	; 0x9a98 <_Zpl6StringRKS_>
    bff4:	c3 01       	movw	r24, r6
    bff6:	88 96       	adiw	r24, 0x28	; 40
    bff8:	b8 01       	movw	r22, r16
    bffa:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    bffe:	c8 01       	movw	r24, r16
    c000:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    c004:	c7 01       	movw	r24, r14
    c006:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    c00a:	c6 01       	movw	r24, r12
    c00c:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			if (isMoving) {mov.set_vel (velocidad);}
    c010:	f3 01       	movw	r30, r6
    c012:	85 a1       	ldd	r24, Z+37	; 0x25
    c014:	88 23       	and	r24, r24
    c016:	09 f4       	brne	.+2      	; 0xc01a <_ZN13RemoteControl9caminatasEh+0x7b8>
    c018:	48 c1       	rjmp	.+656    	; 0xc2aa <_ZN13RemoteControl9caminatasEh+0xa48>
    c01a:	40 81       	ld	r20, Z
    c01c:	51 81       	ldd	r21, Z+1	; 0x01
    c01e:	62 81       	ldd	r22, Z+2	; 0x02
    c020:	73 81       	ldd	r23, Z+3	; 0x03
    c022:	81 ee       	ldi	r24, 0xE1	; 225
    c024:	90 e1       	ldi	r25, 0x10	; 16
    c026:	0e 94 72 43 	call	0x86e4	; 0x86e4 <_ZN10Movimiento7set_velEf>
    c02a:	3f c1       	rjmp	.+638    	; 0xc2aa <_ZN13RemoteControl9caminatasEh+0xa48>
			retardo = true;
			break;
			
		case RC_CH_UP:
			if (pantalla.isBusy()) {break;}
    c02c:	80 ec       	ldi	r24, 0xC0	; 192
    c02e:	96 e0       	ldi	r25, 0x06	; 6
    c030:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    c034:	88 23       	and	r24, r24
    c036:	09 f0       	breq	.+2      	; 0xc03a <_ZN13RemoteControl9caminatasEh+0x7d8>
    c038:	3d c1       	rjmp	.+634    	; 0xc2b4 <_ZN13RemoteControl9caminatasEh+0xa52>
			if (!isMoving) {
    c03a:	f3 01       	movw	r30, r6
    c03c:	85 a1       	ldd	r24, Z+37	; 0x25
    c03e:	88 23       	and	r24, r24
    c040:	09 f0       	breq	.+2      	; 0xc044 <_ZN13RemoteControl9caminatasEh+0x7e2>
    c042:	65 c0       	rjmp	.+202    	; 0xc10e <_ZN13RemoteControl9caminatasEh+0x8ac>
				largo_pasos = constrain (largo_pasos+inc, 0, 20);
    c044:	65 85       	ldd	r22, Z+13	; 0x0d
    c046:	76 85       	ldd	r23, Z+14	; 0x0e
    c048:	87 85       	ldd	r24, Z+15	; 0x0f
    c04a:	90 89       	ldd	r25, Z+16	; 0x10
    c04c:	21 a1       	ldd	r18, Z+33	; 0x21
    c04e:	32 a1       	ldd	r19, Z+34	; 0x22
    c050:	43 a1       	ldd	r20, Z+35	; 0x23
    c052:	54 a1       	ldd	r21, Z+36	; 0x24
    c054:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    c058:	7b 01       	movw	r14, r22
    c05a:	8c 01       	movw	r16, r24
    c05c:	20 e0       	ldi	r18, 0x00	; 0
    c05e:	30 e0       	ldi	r19, 0x00	; 0
    c060:	40 e0       	ldi	r20, 0x00	; 0
    c062:	50 e0       	ldi	r21, 0x00	; 0
    c064:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    c068:	88 23       	and	r24, r24
    c06a:	5c f4       	brge	.+22     	; 0xc082 <_ZN13RemoteControl9caminatasEh+0x820>
    c06c:	0f 2e       	mov	r0, r31
    c06e:	f0 e0       	ldi	r31, 0x00	; 0
    c070:	ef 2e       	mov	r14, r31
    c072:	f0 e0       	ldi	r31, 0x00	; 0
    c074:	ff 2e       	mov	r15, r31
    c076:	f0 e0       	ldi	r31, 0x00	; 0
    c078:	0f 2f       	mov	r16, r31
    c07a:	f0 e0       	ldi	r31, 0x00	; 0
    c07c:	1f 2f       	mov	r17, r31
    c07e:	f0 2d       	mov	r31, r0
    c080:	14 c0       	rjmp	.+40     	; 0xc0aa <_ZN13RemoteControl9caminatasEh+0x848>
    c082:	c8 01       	movw	r24, r16
    c084:	b7 01       	movw	r22, r14
    c086:	20 e0       	ldi	r18, 0x00	; 0
    c088:	30 e0       	ldi	r19, 0x00	; 0
    c08a:	40 ea       	ldi	r20, 0xA0	; 160
    c08c:	51 e4       	ldi	r21, 0x41	; 65
    c08e:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <__gesf2>
    c092:	18 16       	cp	r1, r24
    c094:	54 f4       	brge	.+20     	; 0xc0aa <_ZN13RemoteControl9caminatasEh+0x848>
    c096:	0f 2e       	mov	r0, r31
    c098:	f0 e0       	ldi	r31, 0x00	; 0
    c09a:	ef 2e       	mov	r14, r31
    c09c:	f0 e0       	ldi	r31, 0x00	; 0
    c09e:	ff 2e       	mov	r15, r31
    c0a0:	f0 ea       	ldi	r31, 0xA0	; 160
    c0a2:	0f 2f       	mov	r16, r31
    c0a4:	f1 e4       	ldi	r31, 0x41	; 65
    c0a6:	1f 2f       	mov	r17, r31
    c0a8:	f0 2d       	mov	r31, r0
    c0aa:	d3 01       	movw	r26, r6
    c0ac:	1d 96       	adiw	r26, 0x0d	; 13
    c0ae:	ed 92       	st	X+, r14
    c0b0:	fd 92       	st	X+, r15
    c0b2:	0d 93       	st	X+, r16
    c0b4:	1c 93       	st	X, r17
    c0b6:	50 97       	sbiw	r26, 0x10	; 16
				texto1 = "Paso "; 
    c0b8:	68 e2       	ldi	r22, 0x28	; 40
    c0ba:	a6 2e       	mov	r10, r22
    c0bc:	b1 2c       	mov	r11, r1
    c0be:	a6 0c       	add	r10, r6
    c0c0:	b7 1c       	adc	r11, r7
    c0c2:	8e 01       	movw	r16, r28
    c0c4:	05 5a       	subi	r16, 0xA5	; 165
    c0c6:	1f 4f       	sbci	r17, 0xFF	; 255
    c0c8:	c8 01       	movw	r24, r16
    c0ca:	63 e1       	ldi	r22, 0x13	; 19
    c0cc:	73 e0       	ldi	r23, 0x03	; 3
    c0ce:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    c0d2:	c5 01       	movw	r24, r10
    c0d4:	b8 01       	movw	r22, r16
    c0d6:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    c0da:	c8 01       	movw	r24, r16
    c0dc:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
				if (largo_pasos == 0) {texto1 += "AUTO";} else {texto1 += float2string (largo_pasos);}
    c0e0:	f3 01       	movw	r30, r6
    c0e2:	c5 84       	ldd	r12, Z+13	; 0x0d
    c0e4:	d6 84       	ldd	r13, Z+14	; 0x0e
    c0e6:	e7 84       	ldd	r14, Z+15	; 0x0f
    c0e8:	f0 88       	ldd	r15, Z+16	; 0x10
    c0ea:	c7 01       	movw	r24, r14
    c0ec:	b6 01       	movw	r22, r12
    c0ee:	20 e0       	ldi	r18, 0x00	; 0
    c0f0:	30 e0       	ldi	r19, 0x00	; 0
    c0f2:	40 e0       	ldi	r20, 0x00	; 0
    c0f4:	50 e0       	ldi	r21, 0x00	; 0
    c0f6:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    c0fa:	88 23       	and	r24, r24
    c0fc:	21 f4       	brne	.+8      	; 0xc106 <_ZN13RemoteControl9caminatasEh+0x8a4>
    c0fe:	8e 01       	movw	r16, r28
    c100:	0f 59       	subi	r16, 0x9F	; 159
    c102:	1f 4f       	sbci	r17, 0xFF	; 255
    c104:	8e c0       	rjmp	.+284    	; 0xc222 <_ZN13RemoteControl9caminatasEh+0x9c0>
    c106:	8e 01       	movw	r16, r28
    c108:	09 59       	subi	r16, 0x99	; 153
    c10a:	1f 4f       	sbci	r17, 0xFF	; 255
    c10c:	93 c0       	rjmp	.+294    	; 0xc234 <_ZN13RemoteControl9caminatasEh+0x9d2>
			} else {
				texto1 = "Escala " + String (mov.dec_escala(), DEC);
    c10e:	53 e7       	ldi	r21, 0x73	; 115
    c110:	c5 2e       	mov	r12, r21
    c112:	d1 2c       	mov	r13, r1
    c114:	cc 0e       	add	r12, r28
    c116:	dd 1e       	adc	r13, r29
    c118:	c6 01       	movw	r24, r12
    c11a:	6e e1       	ldi	r22, 0x1E	; 30
    c11c:	73 e0       	ldi	r23, 0x03	; 3
    c11e:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    c122:	81 ee       	ldi	r24, 0xE1	; 225
    c124:	90 e1       	ldi	r25, 0x10	; 16
    c126:	0e 94 0f 29 	call	0x521e	; 0x521e <_ZN10Movimiento10dec_escalaEv>
    c12a:	68 2f       	mov	r22, r24
    c12c:	4d e6       	ldi	r20, 0x6D	; 109
    c12e:	e4 2e       	mov	r14, r20
    c130:	f1 2c       	mov	r15, r1
    c132:	ec 0e       	add	r14, r28
    c134:	fd 1e       	adc	r15, r29
    c136:	c7 01       	movw	r24, r14
    c138:	70 e0       	ldi	r23, 0x00	; 0
    c13a:	4a e0       	ldi	r20, 0x0A	; 10
    c13c:	50 e0       	ldi	r21, 0x00	; 0
    c13e:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_ZN6StringC1Eii>
    c142:	8e 01       	movw	r16, r28
    c144:	07 58       	subi	r16, 0x87	; 135
    c146:	1f 4f       	sbci	r17, 0xFF	; 255
    c148:	9d c0       	rjmp	.+314    	; 0xc284 <_ZN13RemoteControl9caminatasEh+0xa22>
			}
			retardo = true;
			break;
			
		case RC_CH_DN:
			if (pantalla.isBusy()) {break;}
    c14a:	80 ec       	ldi	r24, 0xC0	; 192
    c14c:	96 e0       	ldi	r25, 0x06	; 6
    c14e:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    c152:	88 23       	and	r24, r24
    c154:	09 f0       	breq	.+2      	; 0xc158 <_ZN13RemoteControl9caminatasEh+0x8f6>
    c156:	ae c0       	rjmp	.+348    	; 0xc2b4 <_ZN13RemoteControl9caminatasEh+0xa52>
			if (!isMoving) {
    c158:	f3 01       	movw	r30, r6
    c15a:	85 a1       	ldd	r24, Z+37	; 0x25
    c15c:	88 23       	and	r24, r24
    c15e:	09 f0       	breq	.+2      	; 0xc162 <_ZN13RemoteControl9caminatasEh+0x900>
    c160:	74 c0       	rjmp	.+232    	; 0xc24a <_ZN13RemoteControl9caminatasEh+0x9e8>
				largo_pasos = constrain (largo_pasos-inc, 0, 20);
    c162:	65 85       	ldd	r22, Z+13	; 0x0d
    c164:	76 85       	ldd	r23, Z+14	; 0x0e
    c166:	87 85       	ldd	r24, Z+15	; 0x0f
    c168:	90 89       	ldd	r25, Z+16	; 0x10
    c16a:	21 a1       	ldd	r18, Z+33	; 0x21
    c16c:	32 a1       	ldd	r19, Z+34	; 0x22
    c16e:	43 a1       	ldd	r20, Z+35	; 0x23
    c170:	54 a1       	ldd	r21, Z+36	; 0x24
    c172:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    c176:	7b 01       	movw	r14, r22
    c178:	8c 01       	movw	r16, r24
    c17a:	20 e0       	ldi	r18, 0x00	; 0
    c17c:	30 e0       	ldi	r19, 0x00	; 0
    c17e:	40 e0       	ldi	r20, 0x00	; 0
    c180:	50 e0       	ldi	r21, 0x00	; 0
    c182:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    c186:	88 23       	and	r24, r24
    c188:	5c f4       	brge	.+22     	; 0xc1a0 <_ZN13RemoteControl9caminatasEh+0x93e>
    c18a:	0f 2e       	mov	r0, r31
    c18c:	f0 e0       	ldi	r31, 0x00	; 0
    c18e:	ef 2e       	mov	r14, r31
    c190:	f0 e0       	ldi	r31, 0x00	; 0
    c192:	ff 2e       	mov	r15, r31
    c194:	f0 e0       	ldi	r31, 0x00	; 0
    c196:	0f 2f       	mov	r16, r31
    c198:	f0 e0       	ldi	r31, 0x00	; 0
    c19a:	1f 2f       	mov	r17, r31
    c19c:	f0 2d       	mov	r31, r0
    c19e:	14 c0       	rjmp	.+40     	; 0xc1c8 <_ZN13RemoteControl9caminatasEh+0x966>
    c1a0:	c8 01       	movw	r24, r16
    c1a2:	b7 01       	movw	r22, r14
    c1a4:	20 e0       	ldi	r18, 0x00	; 0
    c1a6:	30 e0       	ldi	r19, 0x00	; 0
    c1a8:	40 ea       	ldi	r20, 0xA0	; 160
    c1aa:	51 e4       	ldi	r21, 0x41	; 65
    c1ac:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <__gesf2>
    c1b0:	18 16       	cp	r1, r24
    c1b2:	54 f4       	brge	.+20     	; 0xc1c8 <_ZN13RemoteControl9caminatasEh+0x966>
    c1b4:	0f 2e       	mov	r0, r31
    c1b6:	f0 e0       	ldi	r31, 0x00	; 0
    c1b8:	ef 2e       	mov	r14, r31
    c1ba:	f0 e0       	ldi	r31, 0x00	; 0
    c1bc:	ff 2e       	mov	r15, r31
    c1be:	f0 ea       	ldi	r31, 0xA0	; 160
    c1c0:	0f 2f       	mov	r16, r31
    c1c2:	f1 e4       	ldi	r31, 0x41	; 65
    c1c4:	1f 2f       	mov	r17, r31
    c1c6:	f0 2d       	mov	r31, r0
    c1c8:	d3 01       	movw	r26, r6
    c1ca:	1d 96       	adiw	r26, 0x0d	; 13
    c1cc:	ed 92       	st	X+, r14
    c1ce:	fd 92       	st	X+, r15
    c1d0:	0d 93       	st	X+, r16
    c1d2:	1c 93       	st	X, r17
    c1d4:	50 97       	sbiw	r26, 0x10	; 16
				texto1 = "Paso "; 
    c1d6:	38 e2       	ldi	r19, 0x28	; 40
    c1d8:	a3 2e       	mov	r10, r19
    c1da:	b1 2c       	mov	r11, r1
    c1dc:	a6 0c       	add	r10, r6
    c1de:	b7 1c       	adc	r11, r7
    c1e0:	8e 01       	movw	r16, r28
    c1e2:	01 58       	subi	r16, 0x81	; 129
    c1e4:	1f 4f       	sbci	r17, 0xFF	; 255
    c1e6:	c8 01       	movw	r24, r16
    c1e8:	63 e1       	ldi	r22, 0x13	; 19
    c1ea:	73 e0       	ldi	r23, 0x03	; 3
    c1ec:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    c1f0:	c5 01       	movw	r24, r10
    c1f2:	b8 01       	movw	r22, r16
    c1f4:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    c1f8:	c8 01       	movw	r24, r16
    c1fa:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
				if (largo_pasos == 0) {texto1 += "AUTO";} else {texto1 += float2string (largo_pasos);}
    c1fe:	f3 01       	movw	r30, r6
    c200:	c5 84       	ldd	r12, Z+13	; 0x0d
    c202:	d6 84       	ldd	r13, Z+14	; 0x0e
    c204:	e7 84       	ldd	r14, Z+15	; 0x0f
    c206:	f0 88       	ldd	r15, Z+16	; 0x10
    c208:	c7 01       	movw	r24, r14
    c20a:	b6 01       	movw	r22, r12
    c20c:	20 e0       	ldi	r18, 0x00	; 0
    c20e:	30 e0       	ldi	r19, 0x00	; 0
    c210:	40 e0       	ldi	r20, 0x00	; 0
    c212:	50 e0       	ldi	r21, 0x00	; 0
    c214:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    c218:	88 23       	and	r24, r24
    c21a:	49 f4       	brne	.+18     	; 0xc22e <_ZN13RemoteControl9caminatasEh+0x9cc>
    c21c:	8e 01       	movw	r16, r28
    c21e:	0b 57       	subi	r16, 0x7B	; 123
    c220:	1f 4f       	sbci	r17, 0xFF	; 255
    c222:	c8 01       	movw	r24, r16
    c224:	69 e1       	ldi	r22, 0x19	; 25
    c226:	73 e0       	ldi	r23, 0x03	; 3
    c228:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    c22c:	08 c0       	rjmp	.+16     	; 0xc23e <_ZN13RemoteControl9caminatasEh+0x9dc>
    c22e:	8e 01       	movw	r16, r28
    c230:	05 57       	subi	r16, 0x75	; 117
    c232:	1f 4f       	sbci	r17, 0xFF	; 255
    c234:	c8 01       	movw	r24, r16
    c236:	b7 01       	movw	r22, r14
    c238:	a6 01       	movw	r20, r12
    c23a:	0e 94 51 67 	call	0xcea2	; 0xcea2 <_Z12float2stringf>
    c23e:	c5 01       	movw	r24, r10
    c240:	b8 01       	movw	r22, r16
    c242:	0e 94 24 08 	call	0x1048	; 0x1048 <_ZN6StringpLERKS_>
    c246:	c8 01       	movw	r24, r16
    c248:	2e c0       	rjmp	.+92     	; 0xc2a6 <_ZN13RemoteControl9caminatasEh+0xa44>
			} else {
				texto1 = "Escala " + String (mov.inc_escala(), DEC);
    c24a:	27 e9       	ldi	r18, 0x97	; 151
    c24c:	c2 2e       	mov	r12, r18
    c24e:	d1 2c       	mov	r13, r1
    c250:	cc 0e       	add	r12, r28
    c252:	dd 1e       	adc	r13, r29
    c254:	c6 01       	movw	r24, r12
    c256:	6e e1       	ldi	r22, 0x1E	; 30
    c258:	73 e0       	ldi	r23, 0x03	; 3
    c25a:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    c25e:	81 ee       	ldi	r24, 0xE1	; 225
    c260:	90 e1       	ldi	r25, 0x10	; 16
    c262:	0e 94 d3 28 	call	0x51a6	; 0x51a6 <_ZN10Movimiento10inc_escalaEv>
    c266:	68 2f       	mov	r22, r24
    c268:	91 e9       	ldi	r25, 0x91	; 145
    c26a:	e9 2e       	mov	r14, r25
    c26c:	f1 2c       	mov	r15, r1
    c26e:	ec 0e       	add	r14, r28
    c270:	fd 1e       	adc	r15, r29
    c272:	c7 01       	movw	r24, r14
    c274:	70 e0       	ldi	r23, 0x00	; 0
    c276:	4a e0       	ldi	r20, 0x0A	; 10
    c278:	50 e0       	ldi	r21, 0x00	; 0
    c27a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_ZN6StringC1Eii>
    c27e:	8e 01       	movw	r16, r28
    c280:	03 56       	subi	r16, 0x63	; 99
    c282:	1f 4f       	sbci	r17, 0xFF	; 255
    c284:	c8 01       	movw	r24, r16
    c286:	b6 01       	movw	r22, r12
    c288:	a7 01       	movw	r20, r14
    c28a:	0e 94 4c 4d 	call	0x9a98	; 0x9a98 <_Zpl6StringRKS_>
    c28e:	c3 01       	movw	r24, r6
    c290:	88 96       	adiw	r24, 0x28	; 40
    c292:	b8 01       	movw	r22, r16
    c294:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    c298:	c8 01       	movw	r24, r16
    c29a:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    c29e:	c7 01       	movw	r24, r14
    c2a0:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    c2a4:	c6 01       	movw	r24, r12
    c2a6:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			}
			retardo = true;
    c2aa:	81 e0       	ldi	r24, 0x01	; 1
    c2ac:	d3 01       	movw	r26, r6
    c2ae:	d6 96       	adiw	r26, 0x36	; 54
    c2b0:	8c 93       	st	X, r24
    c2b2:	4f c0       	rjmp	.+158    	; 0xc352 <_ZN13RemoteControl9caminatasEh+0xaf0>
			break;
	}
	
	// switch de ejecución (y puede haber más; talvez la variable swicheada en segunda instancia no sea "comando")
	switch (comando) {
    c2b4:	85 2d       	mov	r24, r5
    c2b6:	8c 55       	subi	r24, 0x5C	; 92
    c2b8:	84 30       	cpi	r24, 0x04	; 4
    c2ba:	08 f0       	brcs	.+2      	; 0xc2be <_ZN13RemoteControl9caminatasEh+0xa5c>
    c2bc:	4a c0       	rjmp	.+148    	; 0xc352 <_ZN13RemoteControl9caminatasEh+0xaf0>
		case RC_UP: case RC_DOWN: case RC_LEFT: case RC_RIGHT:
			if (modo == CAMINATAS1) {mov.mon_desplazamiento = NULL;}
    c2be:	f3 01       	movw	r30, r6
    c2c0:	86 a1       	ldd	r24, Z+38	; 0x26
    c2c2:	81 30       	cpi	r24, 0x01	; 1
    c2c4:	29 f4       	brne	.+10     	; 0xc2d0 <_ZN13RemoteControl9caminatasEh+0xa6e>
    c2c6:	10 92 e4 10 	sts	0x10E4, r1
    c2ca:	10 92 e3 10 	sts	0x10E3, r1
    c2ce:	13 c0       	rjmp	.+38     	; 0xc2f6 <_ZN13RemoteControl9caminatasEh+0xa94>
			else if (modo == CAMINATAS2) {
    c2d0:	82 30       	cpi	r24, 0x02	; 2
    c2d2:	89 f4       	brne	.+34     	; 0xc2f6 <_ZN13RemoteControl9caminatasEh+0xa94>
				if (comando == RC_LEFT || comando == RC_RIGHT) {break;}    // la lógica hay que reformularla toda 
    c2d4:	f3 ea       	ldi	r31, 0xA3	; 163
    c2d6:	5f 0e       	add	r5, r31
    c2d8:	81 e0       	ldi	r24, 0x01	; 1
    c2da:	85 15       	cp	r24, r5
    c2dc:	d0 f5       	brcc	.+116    	; 0xc352 <_ZN13RemoteControl9caminatasEh+0xaf0>
				mov.mon_desplazamiento = &centro_caminata;
    c2de:	a9 e1       	ldi	r26, 0x19	; 25
    c2e0:	b0 e0       	ldi	r27, 0x00	; 0
    c2e2:	6a 0e       	add	r6, r26
    c2e4:	7b 1e       	adc	r7, r27
    c2e6:	70 92 e4 10 	sts	0x10E4, r7
    c2ea:	60 92 e3 10 	sts	0x10E3, r6
    c2ee:	e7 ee       	ldi	r30, 0xE7	; 231
    c2f0:	ff ef       	ldi	r31, 0xFF	; 255
    c2f2:	6e 0e       	add	r6, r30
    c2f4:	7f 1e       	adc	r7, r31
			}
		  mov.recta (velocidad, desplazamiento, angulo, marcha, largo_pasos);
    c2f6:	00 d0       	rcall	.+0      	; 0xc2f8 <_ZN13RemoteControl9caminatasEh+0xa96>
    c2f8:	00 d0       	rcall	.+0      	; 0xc2fa <_ZN13RemoteControl9caminatasEh+0xa98>
    c2fa:	d3 01       	movw	r26, r6
    c2fc:	4d 91       	ld	r20, X+
    c2fe:	5d 91       	ld	r21, X+
    c300:	6d 91       	ld	r22, X+
    c302:	7c 91       	ld	r23, X
    c304:	13 97       	sbiw	r26, 0x03	; 3
    c306:	55 96       	adiw	r26, 0x15	; 21
    c308:	0d 91       	ld	r16, X+
    c30a:	1d 91       	ld	r17, X+
    c30c:	2d 91       	ld	r18, X+
    c30e:	3c 91       	ld	r19, X
    c310:	58 97       	sbiw	r26, 0x18	; 24
    c312:	15 96       	adiw	r26, 0x05	; 5
    c314:	cd 90       	ld	r12, X+
    c316:	dd 90       	ld	r13, X+
    c318:	ed 90       	ld	r14, X+
    c31a:	fc 90       	ld	r15, X
    c31c:	18 97       	sbiw	r26, 0x08	; 8
    c31e:	1d 96       	adiw	r26, 0x0d	; 13
    c320:	8d 91       	ld	r24, X+
    c322:	9d 91       	ld	r25, X+
    c324:	0d 90       	ld	r0, X+
    c326:	bc 91       	ld	r27, X
    c328:	a0 2d       	mov	r26, r0
    c32a:	ed b7       	in	r30, 0x3d	; 61
    c32c:	fe b7       	in	r31, 0x3e	; 62
    c32e:	81 83       	std	Z+1, r24	; 0x01
    c330:	92 83       	std	Z+2, r25	; 0x02
    c332:	a3 83       	std	Z+3, r26	; 0x03
    c334:	b4 83       	std	Z+4, r27	; 0x04
    c336:	81 ee       	ldi	r24, 0xE1	; 225
    c338:	90 e1       	ldi	r25, 0x10	; 16
    c33a:	d3 01       	movw	r26, r6
    c33c:	14 96       	adiw	r26, 0x04	; 4
    c33e:	ac 90       	ld	r10, X
    c340:	0e 94 b2 44 	call	0x8964	; 0x8964 <_ZN10Movimiento5rectaEfffhf>
			isMoving = true;
    c344:	81 e0       	ldi	r24, 0x01	; 1
    c346:	f3 01       	movw	r30, r6
    c348:	85 a3       	std	Z+37, r24	; 0x25
    c34a:	0f 90       	pop	r0
    c34c:	0f 90       	pop	r0
    c34e:	0f 90       	pop	r0
    c350:	0f 90       	pop	r0
			break;
	}

}
    c352:	ce 53       	subi	r28, 0x3E	; 62
    c354:	df 4f       	sbci	r29, 0xFF	; 255
    c356:	0f b6       	in	r0, 0x3f	; 63
    c358:	f8 94       	cli
    c35a:	de bf       	out	0x3e, r29	; 62
    c35c:	0f be       	out	0x3f, r0	; 63
    c35e:	cd bf       	out	0x3d, r28	; 61
    c360:	cf 91       	pop	r28
    c362:	df 91       	pop	r29
    c364:	1f 91       	pop	r17
    c366:	0f 91       	pop	r16
    c368:	ff 90       	pop	r15
    c36a:	ef 90       	pop	r14
    c36c:	df 90       	pop	r13
    c36e:	cf 90       	pop	r12
    c370:	bf 90       	pop	r11
    c372:	af 90       	pop	r10
    c374:	9f 90       	pop	r9
    c376:	8f 90       	pop	r8
    c378:	7f 90       	pop	r7
    c37a:	6f 90       	pop	r6
    c37c:	5f 90       	pop	r5
    c37e:	08 95       	ret

0000c380 <_ZN13RemoteControl16procesar_comandoEh>:
	retardo = false;
	step = .5;
	pagina = 0;
}	

void RemoteControl::procesar_comando (byte comando) {
    c380:	4f 92       	push	r4
    c382:	5f 92       	push	r5
    c384:	6f 92       	push	r6
    c386:	7f 92       	push	r7
    c388:	8f 92       	push	r8
    c38a:	9f 92       	push	r9
    c38c:	af 92       	push	r10
    c38e:	bf 92       	push	r11
    c390:	cf 92       	push	r12
    c392:	df 92       	push	r13
    c394:	ef 92       	push	r14
    c396:	ff 92       	push	r15
    c398:	0f 93       	push	r16
    c39a:	1f 93       	push	r17
    c39c:	df 93       	push	r29
    c39e:	cf 93       	push	r28
    c3a0:	cd b7       	in	r28, 0x3d	; 61
    c3a2:	de b7       	in	r29, 0x3e	; 62
    c3a4:	c6 5c       	subi	r28, 0xC6	; 198
    c3a6:	d0 40       	sbci	r29, 0x00	; 0
    c3a8:	0f b6       	in	r0, 0x3f	; 63
    c3aa:	f8 94       	cli
    c3ac:	de bf       	out	0x3e, r29	; 62
    c3ae:	0f be       	out	0x3f, r0	; 63
    c3b0:	cd bf       	out	0x3d, r28	; 61
    c3b2:	2c 01       	movw	r4, r24
    c3b4:	f6 2e       	mov	r15, r22
	
	// acá se procesan las teclas generales, o que tienen una función única
	// las otras son procesadas por la rutina específica de cada modo
	
	texto1 = "def";
    c3b6:	28 e2       	ldi	r18, 0x28	; 40
    c3b8:	a2 2e       	mov	r10, r18
    c3ba:	b1 2c       	mov	r11, r1
    c3bc:	a8 0e       	add	r10, r24
    c3be:	b9 1e       	adc	r11, r25
    c3c0:	8e 01       	movw	r16, r28
    c3c2:	0f 5f       	subi	r16, 0xFF	; 255
    c3c4:	1f 4f       	sbci	r17, 0xFF	; 255
    c3c6:	c8 01       	movw	r24, r16
    c3c8:	66 e2       	ldi	r22, 0x26	; 38
    c3ca:	73 e0       	ldi	r23, 0x03	; 3
    c3cc:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    c3d0:	c5 01       	movw	r24, r10
    c3d2:	b8 01       	movw	r22, r16
    c3d4:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    c3d8:	c8 01       	movw	r24, r16
    c3da:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
	
	switch (comando) {
    c3de:	8d e4       	ldi	r24, 0x4D	; 77
    c3e0:	f8 16       	cp	r15, r24
    c3e2:	09 f4       	brne	.+2      	; 0xc3e6 <_ZN13RemoteControl16procesar_comandoEh+0x66>
    c3e4:	0d c2       	rjmp	.+1050   	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c3e6:	8f 15       	cp	r24, r15
    c3e8:	c8 f0       	brcs	.+50     	; 0xc41c <_ZN13RemoteControl16procesar_comandoEh+0x9c>
    c3ea:	e8 e1       	ldi	r30, 0x18	; 24
    c3ec:	ef 15       	cp	r30, r15
    c3ee:	80 f0       	brcs	.+32     	; 0xc410 <_ZN13RemoteControl16procesar_comandoEh+0x90>
    c3f0:	f6 e1       	ldi	r31, 0x16	; 22
    c3f2:	ff 16       	cp	r15, r31
    c3f4:	08 f0       	brcs	.+2      	; 0xc3f8 <_ZN13RemoteControl16procesar_comandoEh+0x78>
    c3f6:	04 c2       	rjmp	.+1032   	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c3f8:	82 e1       	ldi	r24, 0x12	; 18
    c3fa:	f8 16       	cp	r15, r24
    c3fc:	79 f1       	breq	.+94     	; 0xc45c <_ZN13RemoteControl16procesar_comandoEh+0xdc>
    c3fe:	e4 e1       	ldi	r30, 0x14	; 20
    c400:	fe 16       	cp	r15, r30
    c402:	09 f4       	brne	.+2      	; 0xc406 <_ZN13RemoteControl16procesar_comandoEh+0x86>
    c404:	fd c1       	rjmp	.+1018   	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c406:	fc e0       	ldi	r31, 0x0C	; 12
    c408:	ff 16       	cp	r15, r31
    c40a:	09 f0       	breq	.+2      	; 0xc40e <_ZN13RemoteControl16procesar_comandoEh+0x8e>
    c40c:	d8 c0       	rjmp	.+432    	; 0xc5be <_ZN13RemoteControl16procesar_comandoEh+0x23e>
    c40e:	f8 c1       	rjmp	.+1008   	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c410:	8f 2d       	mov	r24, r15
    c412:	88 54       	subi	r24, 0x48	; 72
    c414:	82 30       	cpi	r24, 0x02	; 2
    c416:	08 f0       	brcs	.+2      	; 0xc41a <_ZN13RemoteControl16procesar_comandoEh+0x9a>
    c418:	d2 c0       	rjmp	.+420    	; 0xc5be <_ZN13RemoteControl16procesar_comandoEh+0x23e>
    c41a:	f2 c1       	rjmp	.+996    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c41c:	84 e5       	ldi	r24, 0x54	; 84
    c41e:	f8 16       	cp	r15, r24
    c420:	09 f4       	brne	.+2      	; 0xc424 <_ZN13RemoteControl16procesar_comandoEh+0xa4>
    c422:	67 c0       	rjmp	.+206    	; 0xc4f2 <_ZN13RemoteControl16procesar_comandoEh+0x172>
    c424:	8f 15       	cp	r24, r15
    c426:	68 f0       	brcs	.+26     	; 0xc442 <_ZN13RemoteControl16procesar_comandoEh+0xc2>
    c428:	e1 e5       	ldi	r30, 0x51	; 81
    c42a:	fe 16       	cp	r15, r30
    c42c:	09 f4       	brne	.+2      	; 0xc430 <_ZN13RemoteControl16procesar_comandoEh+0xb0>
    c42e:	e8 c1       	rjmp	.+976    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c430:	f2 e5       	ldi	r31, 0x52	; 82
    c432:	ff 16       	cp	r15, r31
    c434:	09 f4       	brne	.+2      	; 0xc438 <_ZN13RemoteControl16procesar_comandoEh+0xb8>
    c436:	4b c0       	rjmp	.+150    	; 0xc4ce <_ZN13RemoteControl16procesar_comandoEh+0x14e>
    c438:	80 e5       	ldi	r24, 0x50	; 80
    c43a:	f8 16       	cp	r15, r24
    c43c:	09 f0       	breq	.+2      	; 0xc440 <_ZN13RemoteControl16procesar_comandoEh+0xc0>
    c43e:	bf c0       	rjmp	.+382    	; 0xc5be <_ZN13RemoteControl16procesar_comandoEh+0x23e>
    c440:	39 c0       	rjmp	.+114    	; 0xc4b4 <_ZN13RemoteControl16procesar_comandoEh+0x134>
    c442:	e9 e5       	ldi	r30, 0x59	; 89
    c444:	fe 16       	cp	r15, r30
    c446:	09 f4       	brne	.+2      	; 0xc44a <_ZN13RemoteControl16procesar_comandoEh+0xca>
    c448:	db c1       	rjmp	.+950    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c44a:	fb e5       	ldi	r31, 0x5B	; 91
    c44c:	ff 16       	cp	r15, r31
    c44e:	09 f4       	brne	.+2      	; 0xc452 <_ZN13RemoteControl16procesar_comandoEh+0xd2>
    c450:	d7 c1       	rjmp	.+942    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c452:	86 e5       	ldi	r24, 0x56	; 86
    c454:	f8 16       	cp	r15, r24
    c456:	09 f0       	breq	.+2      	; 0xc45a <_ZN13RemoteControl16procesar_comandoEh+0xda>
    c458:	b2 c0       	rjmp	.+356    	; 0xc5be <_ZN13RemoteControl16procesar_comandoEh+0x23e>
    c45a:	75 c0       	rjmp	.+234    	; 0xc546 <_ZN13RemoteControl16procesar_comandoEh+0x1c6>
		case RC_POWER: 
			if (isMoving || pantalla.isBusy()) {break;}
    c45c:	f2 01       	movw	r30, r4
    c45e:	85 a1       	ldd	r24, Z+37	; 0x25
    c460:	88 23       	and	r24, r24
    c462:	09 f0       	breq	.+2      	; 0xc466 <_ZN13RemoteControl16procesar_comandoEh+0xe6>
    c464:	cd c1       	rjmp	.+922    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c466:	80 ec       	ldi	r24, 0xC0	; 192
    c468:	96 e0       	ldi	r25, 0x06	; 6
    c46a:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    c46e:	88 23       	and	r24, r24
    c470:	09 f0       	breq	.+2      	; 0xc474 <_ZN13RemoteControl16procesar_comandoEh+0xf4>
    c472:	c6 c1       	rjmp	.+908    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c474:	e0 c1       	rjmp	.+960    	; 0xc836 <_ZN13RemoteControl16procesar_comandoEh+0x4b6>
			if (modo == REMOTE_OFF) {
				color1 = RGB(0, 2, 3);
    c476:	8b e0       	ldi	r24, 0x0B	; 11
    c478:	f2 01       	movw	r30, r4
    c47a:	84 ab       	std	Z+52, r24	; 0x34
				texto1 = "REMOTE ON";
    c47c:	8e 01       	movw	r16, r28
    c47e:	09 5f       	subi	r16, 0xF9	; 249
    c480:	1f 4f       	sbci	r17, 0xFF	; 255
    c482:	c8 01       	movw	r24, r16
    c484:	6a e2       	ldi	r22, 0x2A	; 42
    c486:	73 e0       	ldi	r23, 0x03	; 3
    c488:	52 c2       	rjmp	.+1188   	; 0xc92e <_ZN13RemoteControl16procesar_comandoEh+0x5ae>
				modo = CAMINATAS1;
			} else {
				color1 = RGB(2, 3, 2);
    c48a:	8e e2       	ldi	r24, 0x2E	; 46
    c48c:	f2 01       	movw	r30, r4
    c48e:	84 ab       	std	Z+52, r24	; 0x34
				texto1 = "REMOTE OFF";
    c490:	8e 01       	movw	r16, r28
    c492:	03 5f       	subi	r16, 0xF3	; 243
    c494:	1f 4f       	sbci	r17, 0xFF	; 255
    c496:	c8 01       	movw	r24, r16
    c498:	64 e3       	ldi	r22, 0x34	; 52
    c49a:	73 e0       	ldi	r23, 0x03	; 3
    c49c:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    c4a0:	c5 01       	movw	r24, r10
    c4a2:	b8 01       	movw	r22, r16
    c4a4:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    c4a8:	c8 01       	movw	r24, r16
    c4aa:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
				modo = REMOTE_OFF;
    c4ae:	f2 01       	movw	r30, r4
    c4b0:	16 a2       	std	Z+38, r1	; 0x26
    c4b2:	a6 c1       	rjmp	.+844    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
			}
			break;
		case RC_SUSPEND:                                // una de estas tiene que resetear incluso la velocidad, paso, etc. (para facilitar la edicion)
			if (isMoving || pantalla.isBusy()) {break;}
    c4b4:	f2 01       	movw	r30, r4
    c4b6:	85 a1       	ldd	r24, Z+37	; 0x25
    c4b8:	88 23       	and	r24, r24
    c4ba:	09 f0       	breq	.+2      	; 0xc4be <_ZN13RemoteControl16procesar_comandoEh+0x13e>
    c4bc:	a1 c1       	rjmp	.+834    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c4be:	80 ec       	ldi	r24, 0xC0	; 192
    c4c0:	96 e0       	ldi	r25, 0x06	; 6
    c4c2:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    c4c6:	88 23       	and	r24, r24
    c4c8:	09 f0       	breq	.+2      	; 0xc4cc <_ZN13RemoteControl16procesar_comandoEh+0x14c>
    c4ca:	9a c1       	rjmp	.+820    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c4cc:	ba c1       	rjmp	.+884    	; 0xc842 <_ZN13RemoteControl16procesar_comandoEh+0x4c2>
			mov.goto_pos_ref (DEFAULT_POSITION);
			break;
		case RC_SLEEP: 
			break;
		case RC_HOME: 
			if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
    c4ce:	f2 01       	movw	r30, r4
    c4d0:	85 a1       	ldd	r24, Z+37	; 0x25
    c4d2:	88 23       	and	r24, r24
    c4d4:	09 f0       	breq	.+2      	; 0xc4d8 <_ZN13RemoteControl16procesar_comandoEh+0x158>
    c4d6:	94 c1       	rjmp	.+808    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c4d8:	80 ec       	ldi	r24, 0xC0	; 192
    c4da:	96 e0       	ldi	r25, 0x06	; 6
    c4dc:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    c4e0:	88 23       	and	r24, r24
    c4e2:	09 f0       	breq	.+2      	; 0xc4e6 <_ZN13RemoteControl16procesar_comandoEh+0x166>
    c4e4:	8d c1       	rjmp	.+794    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c4e6:	f2 01       	movw	r30, r4
    c4e8:	86 a1       	ldd	r24, Z+38	; 0x26
    c4ea:	88 23       	and	r24, r24
    c4ec:	09 f4       	brne	.+2      	; 0xc4f0 <_ZN13RemoteControl16procesar_comandoEh+0x170>
    c4ee:	88 c1       	rjmp	.+784    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c4f0:	f3 c1       	rjmp	.+998    	; 0xc8d8 <_ZN13RemoteControl16procesar_comandoEh+0x558>
			centro_caminata = (COORD2D) {0, 0};
			texto1 = "home";
			mov.goto_pos_ref ();
			break;
		case RC_DVD1: 
			pagina = constrain (pagina+1, 0, 10);              // este '10' hay que hacer un #define MAX_PAGINA
    c4f2:	f2 01       	movw	r30, r4
    c4f4:	87 a1       	ldd	r24, Z+39	; 0x27
    c4f6:	8f 3f       	cpi	r24, 0xFF	; 255
    c4f8:	14 f4       	brge	.+4      	; 0xc4fe <_ZN13RemoteControl16procesar_comandoEh+0x17e>
    c4fa:	80 e0       	ldi	r24, 0x00	; 0
    c4fc:	05 c0       	rjmp	.+10     	; 0xc508 <_ZN13RemoteControl16procesar_comandoEh+0x188>
    c4fe:	8a 30       	cpi	r24, 0x0A	; 10
    c500:	14 f0       	brlt	.+4      	; 0xc506 <_ZN13RemoteControl16procesar_comandoEh+0x186>
    c502:	8a e0       	ldi	r24, 0x0A	; 10
    c504:	01 c0       	rjmp	.+2      	; 0xc508 <_ZN13RemoteControl16procesar_comandoEh+0x188>
    c506:	8f 5f       	subi	r24, 0xFF	; 255
    c508:	f2 01       	movw	r30, r4
    c50a:	87 a3       	std	Z+39, r24	; 0x27
			texto1 = "Pagina " + String (pagina, DEC);
    c50c:	95 e2       	ldi	r25, 0x25	; 37
    c50e:	c9 2e       	mov	r12, r25
    c510:	d1 2c       	mov	r13, r1
    c512:	cc 0e       	add	r12, r28
    c514:	dd 1e       	adc	r13, r29
    c516:	c6 01       	movw	r24, r12
    c518:	6f e3       	ldi	r22, 0x3F	; 63
    c51a:	73 e0       	ldi	r23, 0x03	; 3
    c51c:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    c520:	8f e1       	ldi	r24, 0x1F	; 31
    c522:	e8 2e       	mov	r14, r24
    c524:	f1 2c       	mov	r15, r1
    c526:	ec 0e       	add	r14, r28
    c528:	fd 1e       	adc	r15, r29
    c52a:	f2 01       	movw	r30, r4
    c52c:	67 a1       	ldd	r22, Z+39	; 0x27
    c52e:	77 27       	eor	r23, r23
    c530:	67 fd       	sbrc	r22, 7
    c532:	70 95       	com	r23
    c534:	c7 01       	movw	r24, r14
    c536:	4a e0       	ldi	r20, 0x0A	; 10
    c538:	50 e0       	ldi	r21, 0x00	; 0
    c53a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_ZN6StringC1Eii>
    c53e:	8e 01       	movw	r16, r28
    c540:	05 5d       	subi	r16, 0xD5	; 213
    c542:	1f 4f       	sbci	r17, 0xFF	; 255
    c544:	29 c0       	rjmp	.+82     	; 0xc598 <_ZN13RemoteControl16procesar_comandoEh+0x218>
			break;
		case RC_FM: 
			pagina = constrain (pagina-1, 0, 10);              // este '10' hay que hacer un #define MAX_PAGINA
    c546:	f2 01       	movw	r30, r4
    c548:	87 a1       	ldd	r24, Z+39	; 0x27
    c54a:	18 16       	cp	r1, r24
    c54c:	14 f0       	brlt	.+4      	; 0xc552 <_ZN13RemoteControl16procesar_comandoEh+0x1d2>
    c54e:	80 e0       	ldi	r24, 0x00	; 0
    c550:	05 c0       	rjmp	.+10     	; 0xc55c <_ZN13RemoteControl16procesar_comandoEh+0x1dc>
    c552:	8c 30       	cpi	r24, 0x0C	; 12
    c554:	14 f0       	brlt	.+4      	; 0xc55a <_ZN13RemoteControl16procesar_comandoEh+0x1da>
    c556:	8a e0       	ldi	r24, 0x0A	; 10
    c558:	01 c0       	rjmp	.+2      	; 0xc55c <_ZN13RemoteControl16procesar_comandoEh+0x1dc>
    c55a:	81 50       	subi	r24, 0x01	; 1
    c55c:	f2 01       	movw	r30, r4
    c55e:	87 a3       	std	Z+39, r24	; 0x27
			texto1 = "Pagina " + String (pagina, DEC);
    c560:	07 e3       	ldi	r16, 0x37	; 55
    c562:	c0 2e       	mov	r12, r16
    c564:	d1 2c       	mov	r13, r1
    c566:	cc 0e       	add	r12, r28
    c568:	dd 1e       	adc	r13, r29
    c56a:	c6 01       	movw	r24, r12
    c56c:	6f e3       	ldi	r22, 0x3F	; 63
    c56e:	73 e0       	ldi	r23, 0x03	; 3
    c570:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    c574:	11 e3       	ldi	r17, 0x31	; 49
    c576:	e1 2e       	mov	r14, r17
    c578:	f1 2c       	mov	r15, r1
    c57a:	ec 0e       	add	r14, r28
    c57c:	fd 1e       	adc	r15, r29
    c57e:	f2 01       	movw	r30, r4
    c580:	67 a1       	ldd	r22, Z+39	; 0x27
    c582:	77 27       	eor	r23, r23
    c584:	67 fd       	sbrc	r22, 7
    c586:	70 95       	com	r23
    c588:	c7 01       	movw	r24, r14
    c58a:	4a e0       	ldi	r20, 0x0A	; 10
    c58c:	50 e0       	ldi	r21, 0x00	; 0
    c58e:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_ZN6StringC1Eii>
    c592:	8e 01       	movw	r16, r28
    c594:	03 5c       	subi	r16, 0xC3	; 195
    c596:	1f 4f       	sbci	r17, 0xFF	; 255
    c598:	c8 01       	movw	r24, r16
    c59a:	b6 01       	movw	r22, r12
    c59c:	a7 01       	movw	r20, r14
    c59e:	0e 94 4c 4d 	call	0x9a98	; 0x9a98 <_Zpl6StringRKS_>
    c5a2:	c5 01       	movw	r24, r10
    c5a4:	b8 01       	movw	r22, r16
    c5a6:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    c5aa:	c8 01       	movw	r24, r16
    c5ac:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    c5b0:	c7 01       	movw	r24, r14
    c5b2:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    c5b6:	c6 01       	movw	r24, r12
    c5b8:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    c5bc:	21 c1       	rjmp	.+578    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
		case RC_PREV: break;
		case RC_STOP: break;
		case RC_NEXT: break;
		default:
			// botones de modo
			if (comando>=RC_TV && comando<=RC_APPLICATION) {
    c5be:	8f 2d       	mov	r24, r15
    c5c0:	80 54       	subi	r24, 0x40	; 64
    c5c2:	88 30       	cpi	r24, 0x08	; 8
    c5c4:	08 f0       	brcs	.+2      	; 0xc5c8 <_ZN13RemoteControl16procesar_comandoEh+0x248>
    c5c6:	ed c0       	rjmp	.+474    	; 0xc7a2 <_ZN13RemoteControl16procesar_comandoEh+0x422>
				switch (comando + 100*pagina) {
    c5c8:	f2 01       	movw	r30, r4
    c5ca:	97 a1       	ldd	r25, Z+39	; 0x27
    c5cc:	84 e6       	ldi	r24, 0x64	; 100
    c5ce:	98 02       	muls	r25, r24
    c5d0:	c0 01       	movw	r24, r0
    c5d2:	11 24       	eor	r1, r1
    c5d4:	8f 0d       	add	r24, r15
    c5d6:	91 1d       	adc	r25, r1
    c5d8:	84 34       	cpi	r24, 0x44	; 68
    c5da:	91 05       	cpc	r25, r1
    c5dc:	09 f4       	brne	.+2      	; 0xc5e0 <_ZN13RemoteControl16procesar_comandoEh+0x260>
    c5de:	78 c0       	rjmp	.+240    	; 0xc6d0 <_ZN13RemoteControl16procesar_comandoEh+0x350>
    c5e0:	85 34       	cpi	r24, 0x45	; 69
    c5e2:	91 05       	cpc	r25, r1
    c5e4:	a4 f4       	brge	.+40     	; 0xc60e <_ZN13RemoteControl16procesar_comandoEh+0x28e>
    c5e6:	81 34       	cpi	r24, 0x41	; 65
    c5e8:	91 05       	cpc	r25, r1
    c5ea:	e1 f1       	breq	.+120    	; 0xc664 <_ZN13RemoteControl16procesar_comandoEh+0x2e4>
    c5ec:	82 34       	cpi	r24, 0x42	; 66
    c5ee:	91 05       	cpc	r25, r1
    c5f0:	2c f4       	brge	.+10     	; 0xc5fc <_ZN13RemoteControl16procesar_comandoEh+0x27c>
    c5f2:	80 34       	cpi	r24, 0x40	; 64
    c5f4:	91 05       	cpc	r25, r1
    c5f6:	09 f0       	breq	.+2      	; 0xc5fa <_ZN13RemoteControl16procesar_comandoEh+0x27a>
    c5f8:	03 c1       	rjmp	.+518    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c5fa:	22 c0       	rjmp	.+68     	; 0xc640 <_ZN13RemoteControl16procesar_comandoEh+0x2c0>
    c5fc:	82 34       	cpi	r24, 0x42	; 66
    c5fe:	91 05       	cpc	r25, r1
    c600:	09 f4       	brne	.+2      	; 0xc604 <_ZN13RemoteControl16procesar_comandoEh+0x284>
    c602:	42 c0       	rjmp	.+132    	; 0xc688 <_ZN13RemoteControl16procesar_comandoEh+0x308>
    c604:	83 34       	cpi	r24, 0x43	; 67
    c606:	91 05       	cpc	r25, r1
    c608:	09 f0       	breq	.+2      	; 0xc60c <_ZN13RemoteControl16procesar_comandoEh+0x28c>
    c60a:	fa c0       	rjmp	.+500    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c60c:	4f c0       	rjmp	.+158    	; 0xc6ac <_ZN13RemoteControl16procesar_comandoEh+0x32c>
    c60e:	87 34       	cpi	r24, 0x47	; 71
    c610:	91 05       	cpc	r25, r1
    c612:	09 f4       	brne	.+2      	; 0xc616 <_ZN13RemoteControl16procesar_comandoEh+0x296>
    c614:	93 c0       	rjmp	.+294    	; 0xc73c <_ZN13RemoteControl16procesar_comandoEh+0x3bc>
    c616:	88 34       	cpi	r24, 0x48	; 72
    c618:	91 05       	cpc	r25, r1
    c61a:	4c f4       	brge	.+18     	; 0xc62e <_ZN13RemoteControl16procesar_comandoEh+0x2ae>
    c61c:	85 34       	cpi	r24, 0x45	; 69
    c61e:	91 05       	cpc	r25, r1
    c620:	09 f4       	brne	.+2      	; 0xc624 <_ZN13RemoteControl16procesar_comandoEh+0x2a4>
    c622:	68 c0       	rjmp	.+208    	; 0xc6f4 <_ZN13RemoteControl16procesar_comandoEh+0x374>
    c624:	86 34       	cpi	r24, 0x46	; 70
    c626:	91 05       	cpc	r25, r1
    c628:	09 f0       	breq	.+2      	; 0xc62c <_ZN13RemoteControl16procesar_comandoEh+0x2ac>
    c62a:	ea c0       	rjmp	.+468    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c62c:	75 c0       	rjmp	.+234    	; 0xc718 <_ZN13RemoteControl16procesar_comandoEh+0x398>
    c62e:	84 3a       	cpi	r24, 0xA4	; 164
    c630:	91 05       	cpc	r25, r1
    c632:	09 f4       	brne	.+2      	; 0xc636 <_ZN13RemoteControl16procesar_comandoEh+0x2b6>
    c634:	95 c0       	rjmp	.+298    	; 0xc760 <_ZN13RemoteControl16procesar_comandoEh+0x3e0>
    c636:	85 3a       	cpi	r24, 0xA5	; 165
    c638:	91 05       	cpc	r25, r1
    c63a:	09 f0       	breq	.+2      	; 0xc63e <_ZN13RemoteControl16procesar_comandoEh+0x2be>
    c63c:	e1 c0       	rjmp	.+450    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c63e:	a2 c0       	rjmp	.+324    	; 0xc784 <_ZN13RemoteControl16procesar_comandoEh+0x404>
					case RC_TV: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
    c640:	f2 01       	movw	r30, r4
    c642:	85 a1       	ldd	r24, Z+37	; 0x25
    c644:	88 23       	and	r24, r24
    c646:	09 f0       	breq	.+2      	; 0xc64a <_ZN13RemoteControl16procesar_comandoEh+0x2ca>
    c648:	db c0       	rjmp	.+438    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c64a:	80 ec       	ldi	r24, 0xC0	; 192
    c64c:	96 e0       	ldi	r25, 0x06	; 6
    c64e:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    c652:	88 23       	and	r24, r24
    c654:	09 f0       	breq	.+2      	; 0xc658 <_ZN13RemoteControl16procesar_comandoEh+0x2d8>
    c656:	d4 c0       	rjmp	.+424    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c658:	f2 01       	movw	r30, r4
    c65a:	86 a1       	ldd	r24, Z+38	; 0x26
    c65c:	88 23       	and	r24, r24
    c65e:	09 f4       	brne	.+2      	; 0xc662 <_ZN13RemoteControl16procesar_comandoEh+0x2e2>
    c660:	cf c0       	rjmp	.+414    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c662:	5c c1       	rjmp	.+696    	; 0xc91c <_ZN13RemoteControl16procesar_comandoEh+0x59c>
						color1 = RGB(0, 2, 3);
						texto1 = "caminatas 1";
						modo = CAMINATAS1;
						break;
					case RC_FMRADIO: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
    c664:	f2 01       	movw	r30, r4
    c666:	85 a1       	ldd	r24, Z+37	; 0x25
    c668:	88 23       	and	r24, r24
    c66a:	09 f0       	breq	.+2      	; 0xc66e <_ZN13RemoteControl16procesar_comandoEh+0x2ee>
    c66c:	c9 c0       	rjmp	.+402    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c66e:	80 ec       	ldi	r24, 0xC0	; 192
    c670:	96 e0       	ldi	r25, 0x06	; 6
    c672:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    c676:	88 23       	and	r24, r24
    c678:	09 f0       	breq	.+2      	; 0xc67c <_ZN13RemoteControl16procesar_comandoEh+0x2fc>
    c67a:	c2 c0       	rjmp	.+388    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c67c:	f2 01       	movw	r30, r4
    c67e:	86 a1       	ldd	r24, Z+38	; 0x26
    c680:	88 23       	and	r24, r24
    c682:	09 f4       	brne	.+2      	; 0xc686 <_ZN13RemoteControl16procesar_comandoEh+0x306>
    c684:	bd c0       	rjmp	.+378    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c686:	5e c1       	rjmp	.+700    	; 0xc944 <_ZN13RemoteControl16procesar_comandoEh+0x5c4>
						color1 = RGB(1, 3, 1);
						texto1 = "caminatas 2";
						modo = CAMINATAS2;
						break;
					case RC_MUSIC: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
    c688:	f2 01       	movw	r30, r4
    c68a:	85 a1       	ldd	r24, Z+37	; 0x25
    c68c:	88 23       	and	r24, r24
    c68e:	09 f0       	breq	.+2      	; 0xc692 <_ZN13RemoteControl16procesar_comandoEh+0x312>
    c690:	b7 c0       	rjmp	.+366    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c692:	80 ec       	ldi	r24, 0xC0	; 192
    c694:	96 e0       	ldi	r25, 0x06	; 6
    c696:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    c69a:	88 23       	and	r24, r24
    c69c:	09 f0       	breq	.+2      	; 0xc6a0 <_ZN13RemoteControl16procesar_comandoEh+0x320>
    c69e:	b0 c0       	rjmp	.+352    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c6a0:	f2 01       	movw	r30, r4
    c6a2:	86 a1       	ldd	r24, Z+38	; 0x26
    c6a4:	88 23       	and	r24, r24
    c6a6:	09 f4       	brne	.+2      	; 0xc6aa <_ZN13RemoteControl16procesar_comandoEh+0x32a>
    c6a8:	ab c0       	rjmp	.+342    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c6aa:	60 c1       	rjmp	.+704    	; 0xc96c <_ZN13RemoteControl16procesar_comandoEh+0x5ec>
						color1 = RGB(0, 3, 1);
						texto1 = "traslaciones";
						modo = TRASLACIONES;
						break;
					case RC_PICTURES: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
    c6ac:	f2 01       	movw	r30, r4
    c6ae:	85 a1       	ldd	r24, Z+37	; 0x25
    c6b0:	88 23       	and	r24, r24
    c6b2:	09 f0       	breq	.+2      	; 0xc6b6 <_ZN13RemoteControl16procesar_comandoEh+0x336>
    c6b4:	a5 c0       	rjmp	.+330    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c6b6:	80 ec       	ldi	r24, 0xC0	; 192
    c6b8:	96 e0       	ldi	r25, 0x06	; 6
    c6ba:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    c6be:	88 23       	and	r24, r24
    c6c0:	09 f0       	breq	.+2      	; 0xc6c4 <_ZN13RemoteControl16procesar_comandoEh+0x344>
    c6c2:	9e c0       	rjmp	.+316    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c6c4:	f2 01       	movw	r30, r4
    c6c6:	86 a1       	ldd	r24, Z+38	; 0x26
    c6c8:	88 23       	and	r24, r24
    c6ca:	09 f4       	brne	.+2      	; 0xc6ce <_ZN13RemoteControl16procesar_comandoEh+0x34e>
    c6cc:	99 c0       	rjmp	.+306    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c6ce:	62 c1       	rjmp	.+708    	; 0xc994 <_ZN13RemoteControl16procesar_comandoEh+0x614>
						color1 = RGB(2, 2, 0);
						texto1 = "rotaciones";
						modo = ROTACIONES;
						break;
					case RC_VIDEOCLIP: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
    c6d0:	f2 01       	movw	r30, r4
    c6d2:	85 a1       	ldd	r24, Z+37	; 0x25
    c6d4:	88 23       	and	r24, r24
    c6d6:	09 f0       	breq	.+2      	; 0xc6da <_ZN13RemoteControl16procesar_comandoEh+0x35a>
    c6d8:	93 c0       	rjmp	.+294    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c6da:	80 ec       	ldi	r24, 0xC0	; 192
    c6dc:	96 e0       	ldi	r25, 0x06	; 6
    c6de:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    c6e2:	88 23       	and	r24, r24
    c6e4:	09 f0       	breq	.+2      	; 0xc6e8 <_ZN13RemoteControl16procesar_comandoEh+0x368>
    c6e6:	8c c0       	rjmp	.+280    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c6e8:	f2 01       	movw	r30, r4
    c6ea:	86 a1       	ldd	r24, Z+38	; 0x26
    c6ec:	88 23       	and	r24, r24
    c6ee:	09 f4       	brne	.+2      	; 0xc6f2 <_ZN13RemoteControl16procesar_comandoEh+0x372>
    c6f0:	87 c0       	rjmp	.+270    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c6f2:	64 c1       	rjmp	.+712    	; 0xc9bc <_ZN13RemoteControl16procesar_comandoEh+0x63c>
						color1 = RGB(2, 1, 3);
						texto1 = "editar centro";
						modo = EDITAR_CENTRO;
						break;
					case RC_DVD2: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
    c6f4:	f2 01       	movw	r30, r4
    c6f6:	85 a1       	ldd	r24, Z+37	; 0x25
    c6f8:	88 23       	and	r24, r24
    c6fa:	09 f0       	breq	.+2      	; 0xc6fe <_ZN13RemoteControl16procesar_comandoEh+0x37e>
    c6fc:	81 c0       	rjmp	.+258    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c6fe:	80 ec       	ldi	r24, 0xC0	; 192
    c700:	96 e0       	ldi	r25, 0x06	; 6
    c702:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    c706:	88 23       	and	r24, r24
    c708:	09 f0       	breq	.+2      	; 0xc70c <_ZN13RemoteControl16procesar_comandoEh+0x38c>
    c70a:	7a c0       	rjmp	.+244    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c70c:	f2 01       	movw	r30, r4
    c70e:	86 a1       	ldd	r24, Z+38	; 0x26
    c710:	88 23       	and	r24, r24
    c712:	09 f4       	brne	.+2      	; 0xc716 <_ZN13RemoteControl16procesar_comandoEh+0x396>
    c714:	75 c0       	rjmp	.+234    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c716:	66 c1       	rjmp	.+716    	; 0xc9e4 <_ZN13RemoteControl16procesar_comandoEh+0x664>
						texto1 = "editar posicion";
						modo = EDITAR_POS;
						mov.goto_pos_ref ();
						break;
					case RC_GAMEZONE: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
    c718:	f2 01       	movw	r30, r4
    c71a:	85 a1       	ldd	r24, Z+37	; 0x25
    c71c:	88 23       	and	r24, r24
    c71e:	09 f0       	breq	.+2      	; 0xc722 <_ZN13RemoteControl16procesar_comandoEh+0x3a2>
    c720:	6f c0       	rjmp	.+222    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c722:	80 ec       	ldi	r24, 0xC0	; 192
    c724:	96 e0       	ldi	r25, 0x06	; 6
    c726:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    c72a:	88 23       	and	r24, r24
    c72c:	09 f0       	breq	.+2      	; 0xc730 <_ZN13RemoteControl16procesar_comandoEh+0x3b0>
    c72e:	68 c0       	rjmp	.+208    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c730:	f2 01       	movw	r30, r4
    c732:	86 a1       	ldd	r24, Z+38	; 0x26
    c734:	88 23       	and	r24, r24
    c736:	09 f4       	brne	.+2      	; 0xc73a <_ZN13RemoteControl16procesar_comandoEh+0x3ba>
    c738:	63 c0       	rjmp	.+198    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c73a:	6e c1       	rjmp	.+732    	; 0xca18 <_ZN13RemoteControl16procesar_comandoEh+0x698>
						color1 = RGB(2, 1, 2);
						texto1 = "osc. traslacion";
						modo = OSCILADORES1;
						break;
					case RC_APPLICATION: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
    c73c:	f2 01       	movw	r30, r4
    c73e:	85 a1       	ldd	r24, Z+37	; 0x25
    c740:	88 23       	and	r24, r24
    c742:	09 f0       	breq	.+2      	; 0xc746 <_ZN13RemoteControl16procesar_comandoEh+0x3c6>
    c744:	5d c0       	rjmp	.+186    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c746:	80 ec       	ldi	r24, 0xC0	; 192
    c748:	96 e0       	ldi	r25, 0x06	; 6
    c74a:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    c74e:	88 23       	and	r24, r24
    c750:	09 f0       	breq	.+2      	; 0xc754 <_ZN13RemoteControl16procesar_comandoEh+0x3d4>
    c752:	56 c0       	rjmp	.+172    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c754:	f2 01       	movw	r30, r4
    c756:	86 a1       	ldd	r24, Z+38	; 0x26
    c758:	88 23       	and	r24, r24
    c75a:	09 f4       	brne	.+2      	; 0xc75e <_ZN13RemoteControl16procesar_comandoEh+0x3de>
    c75c:	51 c0       	rjmp	.+162    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c75e:	70 c1       	rjmp	.+736    	; 0xca40 <_ZN13RemoteControl16procesar_comandoEh+0x6c0>
						color1 = RGB(1, 0, 3);
						texto1 = "osc. rotacion";
						modo = OSCILADORES3;
						break;
					case RC_TV+100: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
    c760:	f2 01       	movw	r30, r4
    c762:	85 a1       	ldd	r24, Z+37	; 0x25
    c764:	88 23       	and	r24, r24
    c766:	09 f0       	breq	.+2      	; 0xc76a <_ZN13RemoteControl16procesar_comandoEh+0x3ea>
    c768:	4b c0       	rjmp	.+150    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c76a:	80 ec       	ldi	r24, 0xC0	; 192
    c76c:	96 e0       	ldi	r25, 0x06	; 6
    c76e:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    c772:	88 23       	and	r24, r24
    c774:	09 f0       	breq	.+2      	; 0xc778 <_ZN13RemoteControl16procesar_comandoEh+0x3f8>
    c776:	44 c0       	rjmp	.+136    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c778:	f2 01       	movw	r30, r4
    c77a:	86 a1       	ldd	r24, Z+38	; 0x26
    c77c:	88 23       	and	r24, r24
    c77e:	09 f4       	brne	.+2      	; 0xc782 <_ZN13RemoteControl16procesar_comandoEh+0x402>
    c780:	3f c0       	rjmp	.+126    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c782:	72 c1       	rjmp	.+740    	; 0xca68 <_ZN13RemoteControl16procesar_comandoEh+0x6e8>
						color1 = RGB(2, 2, 0);
						texto1 = "osc. centro";
						modo = OSCILADORES2;
						break;
					case RC_FMRADIO+100: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
    c784:	f2 01       	movw	r30, r4
    c786:	85 a1       	ldd	r24, Z+37	; 0x25
    c788:	88 23       	and	r24, r24
    c78a:	d1 f5       	brne	.+116    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c78c:	80 ec       	ldi	r24, 0xC0	; 192
    c78e:	96 e0       	ldi	r25, 0x06	; 6
    c790:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN7Display6isBusyEv>
    c794:	88 23       	and	r24, r24
    c796:	a1 f5       	brne	.+104    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c798:	f2 01       	movw	r30, r4
    c79a:	86 a1       	ldd	r24, Z+38	; 0x26
    c79c:	88 23       	and	r24, r24
    c79e:	81 f1       	breq	.+96     	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c7a0:	79 c1       	rjmp	.+754    	; 0xca94 <_ZN13RemoteControl16procesar_comandoEh+0x714>
						texto1 = "conductas";
						modo = CONDUCTAS;
						break;
				}
			} else {
				switch (modo) {
    c7a2:	f2 01       	movw	r30, r4
    c7a4:	86 a1       	ldd	r24, Z+38	; 0x26
    c7a6:	84 30       	cpi	r24, 0x04	; 4
    c7a8:	c1 f0       	breq	.+48     	; 0xc7da <_ZN13RemoteControl16procesar_comandoEh+0x45a>
    c7aa:	85 30       	cpi	r24, 0x05	; 5
    c7ac:	28 f4       	brcc	.+10     	; 0xc7b8 <_ZN13RemoteControl16procesar_comandoEh+0x438>
    c7ae:	81 30       	cpi	r24, 0x01	; 1
    c7b0:	38 f1       	brcs	.+78     	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c7b2:	83 30       	cpi	r24, 0x03	; 3
    c7b4:	40 f0       	brcs	.+16     	; 0xc7c6 <_ZN13RemoteControl16procesar_comandoEh+0x446>
    c7b6:	0c c0       	rjmp	.+24     	; 0xc7d0 <_ZN13RemoteControl16procesar_comandoEh+0x450>
    c7b8:	86 30       	cpi	r24, 0x06	; 6
    c7ba:	c9 f0       	breq	.+50     	; 0xc7ee <_ZN13RemoteControl16procesar_comandoEh+0x46e>
    c7bc:	86 30       	cpi	r24, 0x06	; 6
    c7be:	90 f0       	brcs	.+36     	; 0xc7e4 <_ZN13RemoteControl16procesar_comandoEh+0x464>
    c7c0:	8a 30       	cpi	r24, 0x0A	; 10
    c7c2:	f0 f4       	brcc	.+60     	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
    c7c4:	19 c0       	rjmp	.+50     	; 0xc7f8 <_ZN13RemoteControl16procesar_comandoEh+0x478>
					case CAMINATAS1: case CAMINATAS2: caminatas (comando); break;
    c7c6:	c2 01       	movw	r24, r4
    c7c8:	6f 2d       	mov	r22, r15
    c7ca:	0e 94 31 5c 	call	0xb862	; 0xb862 <_ZN13RemoteControl9caminatasEh>
    c7ce:	18 c0       	rjmp	.+48     	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
					case TRASLACIONES: traslaciones (comando); break;
    c7d0:	c2 01       	movw	r24, r4
    c7d2:	6f 2d       	mov	r22, r15
    c7d4:	0e 94 12 59 	call	0xb224	; 0xb224 <_ZN13RemoteControl12traslacionesEh>
    c7d8:	13 c0       	rjmp	.+38     	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
					case ROTACIONES: rotaciones (comando); break;
    c7da:	c2 01       	movw	r24, r4
    c7dc:	6f 2d       	mov	r22, r15
    c7de:	0e 94 ff 55 	call	0xabfe	; 0xabfe <_ZN13RemoteControl10rotacionesEh>
    c7e2:	0e c0       	rjmp	.+28     	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
					case EDITAR_CENTRO: editar_centro (comando); break;
    c7e4:	c2 01       	movw	r24, r4
    c7e6:	6f 2d       	mov	r22, r15
    c7e8:	0e 94 cc 50 	call	0xa198	; 0xa198 <_ZN13RemoteControl13editar_centroEh>
    c7ec:	09 c0       	rjmp	.+18     	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
					case EDITAR_POS: editar_pos (comando); break;
    c7ee:	c2 01       	movw	r24, r4
    c7f0:	6f 2d       	mov	r22, r15
    c7f2:	0e 94 52 53 	call	0xa6a4	; 0xa6a4 <_ZN13RemoteControl10editar_posEh>
    c7f6:	04 c0       	rjmp	.+8      	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
					case OSCILADORES1: case OSCILADORES2: case OSCILADORES3: osciladores (comando); break;
    c7f8:	c2 01       	movw	r24, r4
    c7fa:	6f 2d       	mov	r22, r15
    c7fc:	0e 94 5e 4d 	call	0x9abc	; 0x9abc <_ZN13RemoteControl11osciladoresEh>
					case CONDUCTAS: conductas (comando); break;
				}
			}
	}
	
	displayText ();
    c800:	c2 01       	movw	r24, r4
    c802:	0e 94 a9 4c 	call	0x9952	; 0x9952 <_ZN13RemoteControl11displayTextEv>
	
}
    c806:	ca 53       	subi	r28, 0x3A	; 58
    c808:	df 4f       	sbci	r29, 0xFF	; 255
    c80a:	0f b6       	in	r0, 0x3f	; 63
    c80c:	f8 94       	cli
    c80e:	de bf       	out	0x3e, r29	; 62
    c810:	0f be       	out	0x3f, r0	; 63
    c812:	cd bf       	out	0x3d, r28	; 61
    c814:	cf 91       	pop	r28
    c816:	df 91       	pop	r29
    c818:	1f 91       	pop	r17
    c81a:	0f 91       	pop	r16
    c81c:	ff 90       	pop	r15
    c81e:	ef 90       	pop	r14
    c820:	df 90       	pop	r13
    c822:	cf 90       	pop	r12
    c824:	bf 90       	pop	r11
    c826:	af 90       	pop	r10
    c828:	9f 90       	pop	r9
    c82a:	8f 90       	pop	r8
    c82c:	7f 90       	pop	r7
    c82e:	6f 90       	pop	r6
    c830:	5f 90       	pop	r5
    c832:	4f 90       	pop	r4
    c834:	08 95       	ret
	texto1 = "def";
	
	switch (comando) {
		case RC_POWER: 
			if (isMoving || pantalla.isBusy()) {break;}
			if (modo == REMOTE_OFF) {
    c836:	f2 01       	movw	r30, r4
    c838:	86 a1       	ldd	r24, Z+38	; 0x26
    c83a:	88 23       	and	r24, r24
    c83c:	09 f4       	brne	.+2      	; 0xc840 <_ZN13RemoteControl16procesar_comandoEh+0x4c0>
    c83e:	1b ce       	rjmp	.-970    	; 0xc476 <_ZN13RemoteControl16procesar_comandoEh+0xf6>
    c840:	24 ce       	rjmp	.-952    	; 0xc48a <_ZN13RemoteControl16procesar_comandoEh+0x10a>
				modo = REMOTE_OFF;
			}
			break;
		case RC_SUSPEND:                                // una de estas tiene que resetear incluso la velocidad, paso, etc. (para facilitar la edicion)
			if (isMoving || pantalla.isBusy()) {break;}
			angulo_offset = 0;
    c842:	80 e0       	ldi	r24, 0x00	; 0
    c844:	90 e0       	ldi	r25, 0x00	; 0
    c846:	a0 e0       	ldi	r26, 0x00	; 0
    c848:	b0 e0       	ldi	r27, 0x00	; 0
    c84a:	f2 01       	movw	r30, r4
    c84c:	81 87       	std	Z+9, r24	; 0x09
    c84e:	92 87       	std	Z+10, r25	; 0x0a
    c850:	a3 87       	std	Z+11, r26	; 0x0b
    c852:	b4 87       	std	Z+12, r27	; 0x0c
			centro_caminata = (COORD2D) {0, 0};
    c854:	d2 01       	movw	r26, r4
    c856:	59 96       	adiw	r26, 0x19	; 25
    c858:	e7 e9       	ldi	r30, 0x97	; 151
    c85a:	f5 e0       	ldi	r31, 0x05	; 5
    c85c:	88 e0       	ldi	r24, 0x08	; 8
    c85e:	01 90       	ld	r0, Z+
    c860:	0d 92       	st	X+, r0
    c862:	81 50       	subi	r24, 0x01	; 1
    c864:	e1 f7       	brne	.-8      	; 0xc85e <_ZN13RemoteControl16procesar_comandoEh+0x4de>
			texto1 = "suspend";
    c866:	8e 01       	movw	r16, r28
    c868:	0d 5e       	subi	r16, 0xED	; 237
    c86a:	1f 4f       	sbci	r17, 0xFF	; 255
    c86c:	c8 01       	movw	r24, r16
    c86e:	67 e4       	ldi	r22, 0x47	; 71
    c870:	73 e0       	ldi	r23, 0x03	; 3
    c872:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    c876:	c5 01       	movw	r24, r10
    c878:	b8 01       	movw	r22, r16
    c87a:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    c87e:	c8 01       	movw	r24, r16
    c880:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
			mov.goto_pos_ref (DEFAULT_POSITION);
    c884:	bf e7       	ldi	r27, 0x7F	; 127
    c886:	6b 2e       	mov	r6, r27
    c888:	71 2c       	mov	r7, r1
    c88a:	6c 0e       	add	r6, r28
    c88c:	7d 1e       	adc	r7, r29
    c88e:	c3 01       	movw	r24, r6
    c890:	43 e3       	ldi	r20, 0x33	; 51
    c892:	53 e3       	ldi	r21, 0x33	; 51
    c894:	6b ef       	ldi	r22, 0xFB	; 251
    c896:	70 e4       	ldi	r23, 0x40	; 64
    c898:	03 e3       	ldi	r16, 0x33	; 51
    c89a:	13 e3       	ldi	r17, 0x33	; 51
    c89c:	23 ef       	ldi	r18, 0xF3	; 243
    c89e:	31 e4       	ldi	r19, 0x41	; 65
    c8a0:	0f 2e       	mov	r0, r31
    c8a2:	f0 e0       	ldi	r31, 0x00	; 0
    c8a4:	cf 2e       	mov	r12, r31
    c8a6:	f0 e0       	ldi	r31, 0x00	; 0
    c8a8:	df 2e       	mov	r13, r31
    c8aa:	f0 e1       	ldi	r31, 0x10	; 16
    c8ac:	ef 2e       	mov	r14, r31
    c8ae:	f2 e4       	ldi	r31, 0x42	; 66
    c8b0:	ff 2e       	mov	r15, r31
    c8b2:	f0 2d       	mov	r31, r0
    c8b4:	0f 2e       	mov	r0, r31
    c8b6:	fd ec       	ldi	r31, 0xCD	; 205
    c8b8:	8f 2e       	mov	r8, r31
    c8ba:	fc ec       	ldi	r31, 0xCC	; 204
    c8bc:	9f 2e       	mov	r9, r31
    c8be:	fe e0       	ldi	r31, 0x0E	; 14
    c8c0:	af 2e       	mov	r10, r31
    c8c2:	f2 e4       	ldi	r31, 0x42	; 66
    c8c4:	bf 2e       	mov	r11, r31
    c8c6:	f0 2d       	mov	r31, r0
    c8c8:	0e 94 4d 76 	call	0xec9a	; 0xec9a <_Z8hexagonoffff>
    c8cc:	81 ee       	ldi	r24, 0xE1	; 225
    c8ce:	90 e1       	ldi	r25, 0x10	; 16
    c8d0:	b3 01       	movw	r22, r6
    c8d2:	0e 94 89 22 	call	0x4512	; 0x4512 <_ZN10Movimiento12goto_pos_refEP7COORD3D>
    c8d6:	94 cf       	rjmp	.-216    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
			break;
		case RC_SLEEP: 
			break;
		case RC_HOME: 
			if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
			angulo_offset = 0;
    c8d8:	80 e0       	ldi	r24, 0x00	; 0
    c8da:	90 e0       	ldi	r25, 0x00	; 0
    c8dc:	a0 e0       	ldi	r26, 0x00	; 0
    c8de:	b0 e0       	ldi	r27, 0x00	; 0
    c8e0:	f2 01       	movw	r30, r4
    c8e2:	81 87       	std	Z+9, r24	; 0x09
    c8e4:	92 87       	std	Z+10, r25	; 0x0a
    c8e6:	a3 87       	std	Z+11, r26	; 0x0b
    c8e8:	b4 87       	std	Z+12, r27	; 0x0c
			centro_caminata = (COORD2D) {0, 0};
    c8ea:	d2 01       	movw	r26, r4
    c8ec:	59 96       	adiw	r26, 0x19	; 25
    c8ee:	ef e8       	ldi	r30, 0x8F	; 143
    c8f0:	f5 e0       	ldi	r31, 0x05	; 5
    c8f2:	88 e0       	ldi	r24, 0x08	; 8
    c8f4:	01 90       	ld	r0, Z+
    c8f6:	0d 92       	st	X+, r0
    c8f8:	81 50       	subi	r24, 0x01	; 1
    c8fa:	e1 f7       	brne	.-8      	; 0xc8f4 <_ZN13RemoteControl16procesar_comandoEh+0x574>
			texto1 = "home";
    c8fc:	8e 01       	movw	r16, r28
    c8fe:	07 5e       	subi	r16, 0xE7	; 231
    c900:	1f 4f       	sbci	r17, 0xFF	; 255
    c902:	c8 01       	movw	r24, r16
    c904:	6f e4       	ldi	r22, 0x4F	; 79
    c906:	73 e0       	ldi	r23, 0x03	; 3
    c908:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    c90c:	c5 01       	movw	r24, r10
    c90e:	b8 01       	movw	r22, r16
    c910:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    c914:	c8 01       	movw	r24, r16
    c916:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    c91a:	79 c0       	rjmp	.+242    	; 0xca0e <_ZN13RemoteControl16procesar_comandoEh+0x68e>
			// botones de modo
			if (comando>=RC_TV && comando<=RC_APPLICATION) {
				switch (comando + 100*pagina) {
					case RC_TV: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
						color1 = RGB(0, 2, 3);
    c91c:	8b e0       	ldi	r24, 0x0B	; 11
    c91e:	f2 01       	movw	r30, r4
    c920:	84 ab       	std	Z+52, r24	; 0x34
						texto1 = "caminatas 1";
    c922:	8e 01       	movw	r16, r28
    c924:	0d 5b       	subi	r16, 0xBD	; 189
    c926:	1f 4f       	sbci	r17, 0xFF	; 255
    c928:	c8 01       	movw	r24, r16
    c92a:	64 e5       	ldi	r22, 0x54	; 84
    c92c:	73 e0       	ldi	r23, 0x03	; 3
    c92e:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    c932:	c5 01       	movw	r24, r10
    c934:	b8 01       	movw	r22, r16
    c936:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    c93a:	c8 01       	movw	r24, r16
    c93c:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
						modo = CAMINATAS1;
    c940:	81 e0       	ldi	r24, 0x01	; 1
    c942:	a5 c0       	rjmp	.+330    	; 0xca8e <_ZN13RemoteControl16procesar_comandoEh+0x70e>
						break;
					case RC_FMRADIO: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
						color1 = RGB(1, 3, 1);
    c944:	8d e1       	ldi	r24, 0x1D	; 29
    c946:	f2 01       	movw	r30, r4
    c948:	84 ab       	std	Z+52, r24	; 0x34
						texto1 = "caminatas 2";
    c94a:	8e 01       	movw	r16, r28
    c94c:	07 5b       	subi	r16, 0xB7	; 183
    c94e:	1f 4f       	sbci	r17, 0xFF	; 255
    c950:	c8 01       	movw	r24, r16
    c952:	60 e6       	ldi	r22, 0x60	; 96
    c954:	73 e0       	ldi	r23, 0x03	; 3
    c956:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    c95a:	c5 01       	movw	r24, r10
    c95c:	b8 01       	movw	r22, r16
    c95e:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    c962:	c8 01       	movw	r24, r16
    c964:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
						modo = CAMINATAS2;
    c968:	82 e0       	ldi	r24, 0x02	; 2
    c96a:	91 c0       	rjmp	.+290    	; 0xca8e <_ZN13RemoteControl16procesar_comandoEh+0x70e>
						break;
					case RC_MUSIC: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
						color1 = RGB(0, 3, 1);
    c96c:	8d e0       	ldi	r24, 0x0D	; 13
    c96e:	f2 01       	movw	r30, r4
    c970:	84 ab       	std	Z+52, r24	; 0x34
						texto1 = "traslaciones";
    c972:	8e 01       	movw	r16, r28
    c974:	01 5b       	subi	r16, 0xB1	; 177
    c976:	1f 4f       	sbci	r17, 0xFF	; 255
    c978:	c8 01       	movw	r24, r16
    c97a:	6c e6       	ldi	r22, 0x6C	; 108
    c97c:	73 e0       	ldi	r23, 0x03	; 3
    c97e:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    c982:	c5 01       	movw	r24, r10
    c984:	b8 01       	movw	r22, r16
    c986:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    c98a:	c8 01       	movw	r24, r16
    c98c:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
						modo = TRASLACIONES;
    c990:	83 e0       	ldi	r24, 0x03	; 3
    c992:	7d c0       	rjmp	.+250    	; 0xca8e <_ZN13RemoteControl16procesar_comandoEh+0x70e>
						break;
					case RC_PICTURES: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
						color1 = RGB(2, 2, 0);
    c994:	88 e2       	ldi	r24, 0x28	; 40
    c996:	f2 01       	movw	r30, r4
    c998:	84 ab       	std	Z+52, r24	; 0x34
						texto1 = "rotaciones";
    c99a:	8e 01       	movw	r16, r28
    c99c:	0b 5a       	subi	r16, 0xAB	; 171
    c99e:	1f 4f       	sbci	r17, 0xFF	; 255
    c9a0:	c8 01       	movw	r24, r16
    c9a2:	69 e7       	ldi	r22, 0x79	; 121
    c9a4:	73 e0       	ldi	r23, 0x03	; 3
    c9a6:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    c9aa:	c5 01       	movw	r24, r10
    c9ac:	b8 01       	movw	r22, r16
    c9ae:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    c9b2:	c8 01       	movw	r24, r16
    c9b4:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
						modo = ROTACIONES;
    c9b8:	84 e0       	ldi	r24, 0x04	; 4
    c9ba:	69 c0       	rjmp	.+210    	; 0xca8e <_ZN13RemoteControl16procesar_comandoEh+0x70e>
						break;
					case RC_VIDEOCLIP: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
						color1 = RGB(2, 1, 3);
    c9bc:	87 e2       	ldi	r24, 0x27	; 39
    c9be:	f2 01       	movw	r30, r4
    c9c0:	84 ab       	std	Z+52, r24	; 0x34
						texto1 = "editar centro";
    c9c2:	8e 01       	movw	r16, r28
    c9c4:	05 5a       	subi	r16, 0xA5	; 165
    c9c6:	1f 4f       	sbci	r17, 0xFF	; 255
    c9c8:	c8 01       	movw	r24, r16
    c9ca:	64 e8       	ldi	r22, 0x84	; 132
    c9cc:	73 e0       	ldi	r23, 0x03	; 3
    c9ce:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    c9d2:	c5 01       	movw	r24, r10
    c9d4:	b8 01       	movw	r22, r16
    c9d6:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    c9da:	c8 01       	movw	r24, r16
    c9dc:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
						modo = EDITAR_CENTRO;
    c9e0:	85 e0       	ldi	r24, 0x05	; 5
    c9e2:	55 c0       	rjmp	.+170    	; 0xca8e <_ZN13RemoteControl16procesar_comandoEh+0x70e>
						break;
					case RC_DVD2: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
						color1 = RGB(1, 3, 3);
    c9e4:	8f e1       	ldi	r24, 0x1F	; 31
    c9e6:	f2 01       	movw	r30, r4
    c9e8:	84 ab       	std	Z+52, r24	; 0x34
						texto1 = "editar posicion";
    c9ea:	8e 01       	movw	r16, r28
    c9ec:	0f 59       	subi	r16, 0x9F	; 159
    c9ee:	1f 4f       	sbci	r17, 0xFF	; 255
    c9f0:	c8 01       	movw	r24, r16
    c9f2:	62 e9       	ldi	r22, 0x92	; 146
    c9f4:	73 e0       	ldi	r23, 0x03	; 3
    c9f6:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    c9fa:	c5 01       	movw	r24, r10
    c9fc:	b8 01       	movw	r22, r16
    c9fe:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    ca02:	c8 01       	movw	r24, r16
    ca04:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
						modo = EDITAR_POS;
    ca08:	86 e0       	ldi	r24, 0x06	; 6
    ca0a:	f2 01       	movw	r30, r4
    ca0c:	86 a3       	std	Z+38, r24	; 0x26
						mov.goto_pos_ref ();
    ca0e:	81 ee       	ldi	r24, 0xE1	; 225
    ca10:	90 e1       	ldi	r25, 0x10	; 16
    ca12:	0e 94 13 22 	call	0x4426	; 0x4426 <_ZN10Movimiento12goto_pos_refEv>
    ca16:	f4 ce       	rjmp	.-536    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
						break;
					case RC_GAMEZONE: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
						color1 = RGB(2, 1, 2);
    ca18:	86 e2       	ldi	r24, 0x26	; 38
    ca1a:	f2 01       	movw	r30, r4
    ca1c:	84 ab       	std	Z+52, r24	; 0x34
						texto1 = "osc. traslacion";
    ca1e:	8e 01       	movw	r16, r28
    ca20:	09 59       	subi	r16, 0x99	; 153
    ca22:	1f 4f       	sbci	r17, 0xFF	; 255
    ca24:	c8 01       	movw	r24, r16
    ca26:	62 ea       	ldi	r22, 0xA2	; 162
    ca28:	73 e0       	ldi	r23, 0x03	; 3
    ca2a:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    ca2e:	c5 01       	movw	r24, r10
    ca30:	b8 01       	movw	r22, r16
    ca32:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    ca36:	c8 01       	movw	r24, r16
    ca38:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
						modo = OSCILADORES1;
    ca3c:	87 e0       	ldi	r24, 0x07	; 7
    ca3e:	27 c0       	rjmp	.+78     	; 0xca8e <_ZN13RemoteControl16procesar_comandoEh+0x70e>
						break;
					case RC_APPLICATION: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
						color1 = RGB(1, 0, 3);
    ca40:	83 e1       	ldi	r24, 0x13	; 19
    ca42:	f2 01       	movw	r30, r4
    ca44:	84 ab       	std	Z+52, r24	; 0x34
						texto1 = "osc. rotacion";
    ca46:	8e 01       	movw	r16, r28
    ca48:	03 59       	subi	r16, 0x93	; 147
    ca4a:	1f 4f       	sbci	r17, 0xFF	; 255
    ca4c:	c8 01       	movw	r24, r16
    ca4e:	62 eb       	ldi	r22, 0xB2	; 178
    ca50:	73 e0       	ldi	r23, 0x03	; 3
    ca52:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    ca56:	c5 01       	movw	r24, r10
    ca58:	b8 01       	movw	r22, r16
    ca5a:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    ca5e:	c8 01       	movw	r24, r16
    ca60:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
						modo = OSCILADORES3;
    ca64:	89 e0       	ldi	r24, 0x09	; 9
    ca66:	13 c0       	rjmp	.+38     	; 0xca8e <_ZN13RemoteControl16procesar_comandoEh+0x70e>
						break;
					case RC_TV+100: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
						color1 = RGB(2, 2, 0);
    ca68:	88 e2       	ldi	r24, 0x28	; 40
    ca6a:	f2 01       	movw	r30, r4
    ca6c:	84 ab       	std	Z+52, r24	; 0x34
						texto1 = "osc. centro";
    ca6e:	8e 01       	movw	r16, r28
    ca70:	0d 58       	subi	r16, 0x8D	; 141
    ca72:	1f 4f       	sbci	r17, 0xFF	; 255
    ca74:	c8 01       	movw	r24, r16
    ca76:	60 ec       	ldi	r22, 0xC0	; 192
    ca78:	73 e0       	ldi	r23, 0x03	; 3
    ca7a:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    ca7e:	c5 01       	movw	r24, r10
    ca80:	b8 01       	movw	r22, r16
    ca82:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    ca86:	c8 01       	movw	r24, r16
    ca88:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
						modo = OSCILADORES2;
    ca8c:	88 e0       	ldi	r24, 0x08	; 8
    ca8e:	f2 01       	movw	r30, r4
    ca90:	86 a3       	std	Z+38, r24	; 0x26
    ca92:	b6 ce       	rjmp	.-660    	; 0xc800 <_ZN13RemoteControl16procesar_comandoEh+0x480>
						break;
					case RC_FMRADIO+100: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
						color1 = RGB(1, 2, 1);
    ca94:	89 e1       	ldi	r24, 0x19	; 25
    ca96:	f2 01       	movw	r30, r4
    ca98:	84 ab       	std	Z+52, r24	; 0x34
						texto1 = "conductas";
    ca9a:	8e 01       	movw	r16, r28
    ca9c:	07 58       	subi	r16, 0x87	; 135
    ca9e:	1f 4f       	sbci	r17, 0xFF	; 255
    caa0:	c8 01       	movw	r24, r16
    caa2:	6c ec       	ldi	r22, 0xCC	; 204
    caa4:	73 e0       	ldi	r23, 0x03	; 3
    caa6:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    caaa:	c5 01       	movw	r24, r10
    caac:	b8 01       	movw	r22, r16
    caae:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    cab2:	c8 01       	movw	r24, r16
    cab4:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
						modo = CONDUCTAS;
    cab8:	8a e0       	ldi	r24, 0x0A	; 10
    caba:	e9 cf       	rjmp	.-46     	; 0xca8e <_ZN13RemoteControl16procesar_comandoEh+0x70e>

0000cabc <_ZN10SerialcommC1Ev>:
    cabc:	08 95       	ret

0000cabe <_ZN10Serialcomm8send_msgEhhPh>:
		(*callback) (instruccion, largo, data);        // ..lo ejecuta                       
		cont = 0;                               // y resetea cont, lo que produce un "running status" 
	}
}

void Serialcomm::send_msg (byte instruccion_, byte largo_, byte* data_) {
    cabe:	ef 92       	push	r14
    cac0:	ff 92       	push	r15
    cac2:	0f 93       	push	r16
    cac4:	1f 93       	push	r17
    cac6:	cf 93       	push	r28
    cac8:	df 93       	push	r29
    caca:	ec 01       	movw	r28, r24
    cacc:	04 2f       	mov	r16, r20
    cace:	79 01       	movw	r14, r18
  byte head = sync + instruccion_ + (mask+1)*largo_;
    cad0:	9a 85       	ldd	r25, Y+10	; 0x0a
    cad2:	96 0f       	add	r25, r22
    cad4:	8b 85       	ldd	r24, Y+11	; 0x0b
    cad6:	8f 5f       	subi	r24, 0xFF	; 255
    cad8:	84 9f       	mul	r24, r20
    cada:	10 2d       	mov	r17, r0
    cadc:	11 24       	eor	r1, r1
    cade:	19 0f       	add	r17, r25
  if (head != last || largo_ == 0) {                   // el running status no es válido para mensajes de que son sólo head (largo=0)
    cae0:	89 85       	ldd	r24, Y+9	; 0x09
    cae2:	18 17       	cp	r17, r24
    cae4:	11 f4       	brne	.+4      	; 0xcaea <_ZN10Serialcomm8send_msgEhhPh+0x2c>
    cae6:	44 23       	and	r20, r20
    cae8:	51 f4       	brne	.+20     	; 0xcafe <_ZN10Serialcomm8send_msgEhhPh+0x40>
    port->write (head);                                // byte de cabecera (la instrucción no incluye el largo)
    caea:	e8 81       	ld	r30, Y
    caec:	f9 81       	ldd	r31, Y+1	; 0x01
    caee:	a0 81       	ld	r26, Z
    caf0:	b1 81       	ldd	r27, Z+1	; 0x01
    caf2:	2d 91       	ld	r18, X+
    caf4:	3c 91       	ld	r19, X
    caf6:	cf 01       	movw	r24, r30
    caf8:	61 2f       	mov	r22, r17
    cafa:	f9 01       	movw	r30, r18
    cafc:	09 95       	icall
  }
  port->write (data_, largo_);
    cafe:	e8 81       	ld	r30, Y
    cb00:	f9 81       	ldd	r31, Y+1	; 0x01
    cb02:	a0 81       	ld	r26, Z
    cb04:	b1 81       	ldd	r27, Z+1	; 0x01
    cb06:	14 96       	adiw	r26, 0x04	; 4
    cb08:	2d 91       	ld	r18, X+
    cb0a:	3c 91       	ld	r19, X
    cb0c:	15 97       	sbiw	r26, 0x05	; 5
    cb0e:	cf 01       	movw	r24, r30
    cb10:	b7 01       	movw	r22, r14
    cb12:	40 2f       	mov	r20, r16
    cb14:	50 e0       	ldi	r21, 0x00	; 0
    cb16:	f9 01       	movw	r30, r18
    cb18:	09 95       	icall
  last = head;
    cb1a:	19 87       	std	Y+9, r17	; 0x09
}
    cb1c:	df 91       	pop	r29
    cb1e:	cf 91       	pop	r28
    cb20:	1f 91       	pop	r17
    cb22:	0f 91       	pop	r16
    cb24:	ff 90       	pop	r15
    cb26:	ef 90       	pop	r14
    cb28:	08 95       	ret

0000cb2a <_ZN10Serialcomm12process_byteEh>:

void Serialcomm::process_byte (byte b) {
    cb2a:	dc 01       	movw	r26, r24
  if (b >= sync) {                                // ...si es un HEAD...
    cb2c:	1a 96       	adiw	r26, 0x0a	; 10
    cb2e:	2c 91       	ld	r18, X
    cb30:	1a 97       	sbiw	r26, 0x0a	; 10
    cb32:	62 17       	cp	r22, r18
    cb34:	d8 f0       	brcs	.+54     	; 0xcb6c <_ZN10Serialcomm12process_byteEh+0x42>
    instruccion = (b-sync)&mask;                     // hay [mask+1] tipos de mensajes (para cada largo) 
    cb36:	86 2f       	mov	r24, r22
    cb38:	82 1b       	sub	r24, r18
    cb3a:	1b 96       	adiw	r26, 0x0b	; 11
    cb3c:	9c 91       	ld	r25, X
    cb3e:	1b 97       	sbiw	r26, 0x0b	; 11
    cb40:	89 23       	and	r24, r25
    cb42:	15 96       	adiw	r26, 0x05	; 5
    cb44:	8c 93       	st	X, r24
    cb46:	15 97       	sbiw	r26, 0x05	; 5
    largo = (b-sync)>>shift;                        // el largo de la data puede ser hasta [shift] bytes
    cb48:	86 2f       	mov	r24, r22
    cb4a:	90 e0       	ldi	r25, 0x00	; 0
    cb4c:	82 1b       	sub	r24, r18
    cb4e:	91 09       	sbc	r25, r1
    cb50:	1c 96       	adiw	r26, 0x0c	; 12
    cb52:	0c 90       	ld	r0, X
    cb54:	1c 97       	sbiw	r26, 0x0c	; 12
    cb56:	02 c0       	rjmp	.+4      	; 0xcb5c <_ZN10Serialcomm12process_byteEh+0x32>
    cb58:	95 95       	asr	r25
    cb5a:	87 95       	ror	r24
    cb5c:	0a 94       	dec	r0
    cb5e:	e2 f7       	brpl	.-8      	; 0xcb58 <_ZN10Serialcomm12process_byteEh+0x2e>
    cb60:	14 96       	adiw	r26, 0x04	; 4
    cb62:	8c 93       	st	X, r24
    cb64:	14 97       	sbiw	r26, 0x04	; 4
    cont = 0;                                    // inicializa el índice del buffer                            
    cb66:	16 96       	adiw	r26, 0x06	; 6
    cb68:	1c 92       	st	X, r1
    cb6a:	08 95       	ret
  } else {                                       // ...de lo contrario (si es un DATA)...
    if (cont < largo) {data[cont++] = b;}             // va llenando el buffer
    cb6c:	16 96       	adiw	r26, 0x06	; 6
    cb6e:	9c 91       	ld	r25, X
    cb70:	16 97       	sbiw	r26, 0x06	; 6
    cb72:	14 96       	adiw	r26, 0x04	; 4
    cb74:	8c 91       	ld	r24, X
    cb76:	14 97       	sbiw	r26, 0x04	; 4
    cb78:	98 17       	cp	r25, r24
    cb7a:	50 f4       	brcc	.+20     	; 0xcb90 <_ZN10Serialcomm12process_byteEh+0x66>
    cb7c:	17 96       	adiw	r26, 0x07	; 7
    cb7e:	ed 91       	ld	r30, X+
    cb80:	fc 91       	ld	r31, X
    cb82:	18 97       	sbiw	r26, 0x08	; 8
    cb84:	e9 0f       	add	r30, r25
    cb86:	f1 1d       	adc	r31, r1
    cb88:	60 83       	st	Z, r22
    cb8a:	9f 5f       	subi	r25, 0xFF	; 255
    cb8c:	16 96       	adiw	r26, 0x06	; 6
    cb8e:	9c 93       	st	X, r25
    cb90:	08 95       	ret

0000cb92 <_ZN10Serialcomm11leer_serialEh>:
	memcpy (data_, data, largo_);
	cont = 0;
	return (instruccion == instruccion_ && largo == largo_);
} 

void Serialcomm::leer_serial (byte b) {      // y esta es la 3a. versión, para llamar directo desde el ISP serial, bypasseando la HardwareSerial de Arduino.
    cb92:	cf 93       	push	r28
    cb94:	df 93       	push	r29
    cb96:	ec 01       	movw	r28, r24
	process_byte (b);                           // ..lo interpreta, etc.
    cb98:	0e 94 95 65 	call	0xcb2a	; 0xcb2a <_ZN10Serialcomm12process_byteEh>
	if (cont == largo) {                        // cuando termina el cuerpo del mensaje..
    cb9c:	6e 81       	ldd	r22, Y+6	; 0x06
    cb9e:	8c 81       	ldd	r24, Y+4	; 0x04
    cba0:	68 17       	cp	r22, r24
    cba2:	39 f4       	brne	.+14     	; 0xcbb2 <_ZN10Serialcomm11leer_serialEh+0x20>
		(*callback) (instruccion, largo, data);        // ..lo ejecuta                       
    cba4:	4f 81       	ldd	r20, Y+7	; 0x07
    cba6:	58 85       	ldd	r21, Y+8	; 0x08
    cba8:	ea 81       	ldd	r30, Y+2	; 0x02
    cbaa:	fb 81       	ldd	r31, Y+3	; 0x03
    cbac:	8d 81       	ldd	r24, Y+5	; 0x05
    cbae:	09 95       	icall
		cont = 0;                               // y resetea cont, lo que produce un "running status" 
    cbb0:	1e 82       	std	Y+6, r1	; 0x06
	}
}
    cbb2:	df 91       	pop	r29
    cbb4:	cf 91       	pop	r28
    cbb6:	08 95       	ret

0000cbb8 <_ZN10Serialcomm14send_2byte_msgEhj>:
  } else {                                       // ...de lo contrario (si es un DATA)...
    if (cont < largo) {data[cont++] = b;}             // va llenando el buffer
  }
}

void Serialcomm::send_2byte_msg (byte instruccion_, unsigned int value) {
    cbb8:	df 93       	push	r29
    cbba:	cf 93       	push	r28
    cbbc:	00 d0       	rcall	.+0      	; 0xcbbe <_ZN10Serialcomm14send_2byte_msgEhj+0x6>
    cbbe:	cd b7       	in	r28, 0x3d	; 61
    cbc0:	de b7       	in	r29, 0x3e	; 62
  send_msg (instruccion_, 2, (byte[]) {value>>7, value&127});               // los valores de 2 bytes son arbitrariamente limitados a 14 bits
    cbc2:	9a 01       	movw	r18, r20
    cbc4:	22 0f       	add	r18, r18
    cbc6:	23 2f       	mov	r18, r19
    cbc8:	22 1f       	adc	r18, r18
    cbca:	33 0b       	sbc	r19, r19
    cbcc:	31 95       	neg	r19
    cbce:	29 83       	std	Y+1, r18	; 0x01
    cbd0:	4f 77       	andi	r20, 0x7F	; 127
    cbd2:	4a 83       	std	Y+2, r20	; 0x02
    cbd4:	42 e0       	ldi	r20, 0x02	; 2
    cbd6:	9e 01       	movw	r18, r28
    cbd8:	2f 5f       	subi	r18, 0xFF	; 255
    cbda:	3f 4f       	sbci	r19, 0xFF	; 255
    cbdc:	0e 94 5f 65 	call	0xcabe	; 0xcabe <_ZN10Serialcomm8send_msgEhhPh>
    cbe0:	0f 90       	pop	r0
    cbe2:	0f 90       	pop	r0
    cbe4:	cf 91       	pop	r28
    cbe6:	df 91       	pop	r29
    cbe8:	08 95       	ret

0000cbea <_ZN10Serialcomm11leer_serialEv>:
  data = (byte*) malloc (1<<bits_largo); 
  last = 0;
  callback = callback_;
}

void Serialcomm::leer_serial () {                   // esta es la "máquina de estados" que recibe y decodifica los mensajes Seriales 
    cbea:	cf 93       	push	r28
    cbec:	df 93       	push	r29
    cbee:	ec 01       	movw	r28, r24
    cbf0:	08 c0       	rjmp	.+16     	; 0xcc02 <_ZN10Serialcomm11leer_serialEv+0x18>
	/* al cambiar el "if" por "while" tiene el efecto de
	vaciar el buffer cada vez que se invoca a esta rutina */ 
	while (port->available() > 0) {                   // si hay al menos 1 byte en el Serial... 
		leer_serial (port->read());                     // ...lo lee y llama a la máquina de estados
    cbf2:	88 81       	ld	r24, Y
    cbf4:	99 81       	ldd	r25, Y+1	; 0x01
    cbf6:	0e 94 a9 04 	call	0x952	; 0x952 <_ZN14HardwareSerial4readEv>
    cbfa:	68 2f       	mov	r22, r24
    cbfc:	ce 01       	movw	r24, r28
    cbfe:	0e 94 c9 65 	call	0xcb92	; 0xcb92 <_ZN10Serialcomm11leer_serialEh>
}

void Serialcomm::leer_serial () {                   // esta es la "máquina de estados" que recibe y decodifica los mensajes Seriales 
	/* al cambiar el "if" por "while" tiene el efecto de
	vaciar el buffer cada vez que se invoca a esta rutina */ 
	while (port->available() > 0) {                   // si hay al menos 1 byte en el Serial... 
    cc02:	88 81       	ld	r24, Y
    cc04:	99 81       	ldd	r25, Y+1	; 0x01
    cc06:	0e 94 98 04 	call	0x930	; 0x930 <_ZN14HardwareSerial9availableEv>
    cc0a:	18 16       	cp	r1, r24
    cc0c:	19 06       	cpc	r1, r25
    cc0e:	8c f3       	brlt	.-30     	; 0xcbf2 <_ZN10Serialcomm11leer_serialEv+0x8>
		leer_serial (port->read());                     // ...lo lee y llama a la máquina de estados
	}
}
    cc10:	df 91       	pop	r29
    cc12:	cf 91       	pop	r28
    cc14:	08 95       	ret

0000cc16 <_ZN10SerialcommC1EP14HardwareSeriallhhPFvhhPhE>:

#define TIMEOUT 3000

Serialcomm::Serialcomm () { }   // construtor por defeto

Serialcomm::Serialcomm (HardwareSerial* port_, long baud, byte bits_instruccion, byte bits_largo, void (*callback_) (byte, byte, byte*)) {
    cc16:	af 92       	push	r10
    cc18:	bf 92       	push	r11
    cc1a:	cf 92       	push	r12
    cc1c:	df 92       	push	r13
    cc1e:	ef 92       	push	r14
    cc20:	ff 92       	push	r15
    cc22:	0f 93       	push	r16
    cc24:	5c 01       	movw	r10, r24
    cc26:	cb 01       	movw	r24, r22
  port = port_;
    cc28:	f5 01       	movw	r30, r10
    cc2a:	71 83       	std	Z+1, r23	; 0x01
    cc2c:	60 83       	st	Z, r22
  port->begin (baud);
    cc2e:	ba 01       	movw	r22, r20
    cc30:	a9 01       	movw	r20, r18
    cc32:	0e 94 3b 04 	call	0x876	; 0x876 <_ZN14HardwareSerial5beginEl>
  sync = 256 - 1<<(bits_instruccion+bits_largo);
    cc36:	20 2f       	mov	r18, r16
    cc38:	30 e0       	ldi	r19, 0x00	; 0
    cc3a:	ff 24       	eor	r15, r15
    cc3c:	a7 01       	movw	r20, r14
    cc3e:	42 0f       	add	r20, r18
    cc40:	53 1f       	adc	r21, r19
    cc42:	8f ef       	ldi	r24, 0xFF	; 255
    cc44:	90 e0       	ldi	r25, 0x00	; 0
    cc46:	02 c0       	rjmp	.+4      	; 0xcc4c <_ZN10SerialcommC1EP14HardwareSeriallhhPFvhhPhE+0x36>
    cc48:	88 0f       	add	r24, r24
    cc4a:	99 1f       	adc	r25, r25
    cc4c:	4a 95       	dec	r20
    cc4e:	e2 f7       	brpl	.-8      	; 0xcc48 <_ZN10SerialcommC1EP14HardwareSeriallhhPFvhhPhE+0x32>
    cc50:	f5 01       	movw	r30, r10
    cc52:	82 87       	std	Z+10, r24	; 0x0a
  mask = (1<<bits_instruccion) - 1;
    cc54:	81 e0       	ldi	r24, 0x01	; 1
    cc56:	90 e0       	ldi	r25, 0x00	; 0
    cc58:	ac 01       	movw	r20, r24
    cc5a:	00 2e       	mov	r0, r16
    cc5c:	02 c0       	rjmp	.+4      	; 0xcc62 <_ZN10SerialcommC1EP14HardwareSeriallhhPFvhhPhE+0x4c>
    cc5e:	44 0f       	add	r20, r20
    cc60:	55 1f       	adc	r21, r21
    cc62:	0a 94       	dec	r0
    cc64:	e2 f7       	brpl	.-8      	; 0xcc5e <_ZN10SerialcommC1EP14HardwareSeriallhhPFvhhPhE+0x48>
    cc66:	9a 01       	movw	r18, r20
    cc68:	21 50       	subi	r18, 0x01	; 1
    cc6a:	23 87       	std	Z+11, r18	; 0x0b
  shift = bits_instruccion;
    cc6c:	04 87       	std	Z+12, r16	; 0x0c
  data = (byte*) malloc (1<<bits_largo); 
    cc6e:	02 c0       	rjmp	.+4      	; 0xcc74 <_ZN10SerialcommC1EP14HardwareSeriallhhPFvhhPhE+0x5e>
    cc70:	88 0f       	add	r24, r24
    cc72:	99 1f       	adc	r25, r25
    cc74:	ea 94       	dec	r14
    cc76:	e2 f7       	brpl	.-8      	; 0xcc70 <_ZN10SerialcommC1EP14HardwareSeriallhhPFvhhPhE+0x5a>
    cc78:	0e 94 20 79 	call	0xf240	; 0xf240 <malloc>
    cc7c:	f5 01       	movw	r30, r10
    cc7e:	87 83       	std	Z+7, r24	; 0x07
    cc80:	90 87       	std	Z+8, r25	; 0x08
  last = 0;
    cc82:	11 86       	std	Z+9, r1	; 0x09
  callback = callback_;
    cc84:	d3 82       	std	Z+3, r13	; 0x03
    cc86:	c2 82       	std	Z+2, r12	; 0x02
}
    cc88:	0f 91       	pop	r16
    cc8a:	ff 90       	pop	r15
    cc8c:	ef 90       	pop	r14
    cc8e:	df 90       	pop	r13
    cc90:	cf 90       	pop	r12
    cc92:	bf 90       	pop	r11
    cc94:	af 90       	pop	r10
    cc96:	08 95       	ret

0000cc98 <_Z4signi>:
#include "Print.h"

char sign (int numero) {                       // numero/abs(numero)
  char signo = 0;
  if (numero > 0) {signo = 1;}
  if (numero < 0) {signo = -1;}
    cc98:	97 ff       	sbrs	r25, 7
    cc9a:	02 c0       	rjmp	.+4      	; 0xcca0 <_Z4signi+0x8>
    cc9c:	2f ef       	ldi	r18, 0xFF	; 255
    cc9e:	05 c0       	rjmp	.+10     	; 0xccaa <_Z4signi+0x12>
    cca0:	20 e0       	ldi	r18, 0x00	; 0
    cca2:	18 16       	cp	r1, r24
    cca4:	19 06       	cpc	r1, r25
    cca6:	0c f4       	brge	.+2      	; 0xccaa <_Z4signi+0x12>
    cca8:	21 e0       	ldi	r18, 0x01	; 1
  return signo;
}
    ccaa:	82 2f       	mov	r24, r18
    ccac:	08 95       	ret

0000ccae <_Z6randomf>:
  if(seed != 0){
    srand (seed);
  }
}

float random(float howbig)
    ccae:	ef 92       	push	r14
    ccb0:	ff 92       	push	r15
    ccb2:	0f 93       	push	r16
    ccb4:	1f 93       	push	r17
    ccb6:	7b 01       	movw	r14, r22
    ccb8:	8c 01       	movw	r16, r24
{
  if (howbig == 0){
    ccba:	20 e0       	ldi	r18, 0x00	; 0
    ccbc:	30 e0       	ldi	r19, 0x00	; 0
    ccbe:	40 e0       	ldi	r20, 0x00	; 0
    ccc0:	50 e0       	ldi	r21, 0x00	; 0
    ccc2:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    ccc6:	88 23       	and	r24, r24
    ccc8:	29 f4       	brne	.+10     	; 0xccd4 <_Z6randomf+0x26>
    ccca:	e0 e0       	ldi	r30, 0x00	; 0
    cccc:	70 e0       	ldi	r23, 0x00	; 0
    ccce:	80 e0       	ldi	r24, 0x00	; 0
    ccd0:	60 e0       	ldi	r22, 0x00	; 0
    ccd2:	18 c0       	rjmp	.+48     	; 0xcd04 <_Z6randomf+0x56>
    return 0;
  }
  return howbig*rand()/RAND_MAX;
    ccd4:	0e 94 80 7a 	call	0xf500	; 0xf500 <rand>
    ccd8:	aa 27       	eor	r26, r26
    ccda:	97 fd       	sbrc	r25, 7
    ccdc:	a0 95       	com	r26
    ccde:	ba 2f       	mov	r27, r26
    cce0:	bc 01       	movw	r22, r24
    cce2:	cd 01       	movw	r24, r26
    cce4:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    cce8:	9b 01       	movw	r18, r22
    ccea:	ac 01       	movw	r20, r24
    ccec:	c8 01       	movw	r24, r16
    ccee:	b7 01       	movw	r22, r14
    ccf0:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    ccf4:	20 e0       	ldi	r18, 0x00	; 0
    ccf6:	3e ef       	ldi	r19, 0xFE	; 254
    ccf8:	4f ef       	ldi	r20, 0xFF	; 255
    ccfa:	56 e4       	ldi	r21, 0x46	; 70
    ccfc:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    cd00:	e6 2f       	mov	r30, r22
    cd02:	69 2f       	mov	r22, r25
}
    cd04:	2e 2f       	mov	r18, r30
    cd06:	37 2f       	mov	r19, r23
    cd08:	48 2f       	mov	r20, r24
    cd0a:	56 2f       	mov	r21, r22
    cd0c:	b9 01       	movw	r22, r18
    cd0e:	ca 01       	movw	r24, r20
    cd10:	1f 91       	pop	r17
    cd12:	0f 91       	pop	r16
    cd14:	ff 90       	pop	r15
    cd16:	ef 90       	pop	r14
    cd18:	08 95       	ret

0000cd1a <_Z6randomff>:

float random(float howsmall, float howbig)
    cd1a:	af 92       	push	r10
    cd1c:	bf 92       	push	r11
    cd1e:	cf 92       	push	r12
    cd20:	df 92       	push	r13
    cd22:	ef 92       	push	r14
    cd24:	ff 92       	push	r15
    cd26:	0f 93       	push	r16
    cd28:	1f 93       	push	r17
    cd2a:	7b 01       	movw	r14, r22
    cd2c:	8c 01       	movw	r16, r24
    cd2e:	59 01       	movw	r10, r18
    cd30:	6a 01       	movw	r12, r20
{
  if(howsmall >= howbig){
    cd32:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <__gesf2>
    cd36:	87 ff       	sbrs	r24, 7
    cd38:	10 c0       	rjmp	.+32     	; 0xcd5a <_Z6randomff+0x40>
    return howsmall;
  }
  float diff = howbig - howsmall;
  return random(diff) + howsmall;
    cd3a:	c6 01       	movw	r24, r12
    cd3c:	b5 01       	movw	r22, r10
    cd3e:	a8 01       	movw	r20, r16
    cd40:	97 01       	movw	r18, r14
    cd42:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    cd46:	0e 94 57 66 	call	0xccae	; 0xccae <_Z6randomf>
    cd4a:	9b 01       	movw	r18, r22
    cd4c:	ac 01       	movw	r20, r24
    cd4e:	c8 01       	movw	r24, r16
    cd50:	b7 01       	movw	r22, r14
    cd52:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    cd56:	7b 01       	movw	r14, r22
    cd58:	8c 01       	movw	r16, r24
}
    cd5a:	b7 01       	movw	r22, r14
    cd5c:	c8 01       	movw	r24, r16
    cd5e:	1f 91       	pop	r17
    cd60:	0f 91       	pop	r16
    cd62:	ff 90       	pop	r15
    cd64:	ef 90       	pop	r14
    cd66:	df 90       	pop	r13
    cd68:	cf 90       	pop	r12
    cd6a:	bf 90       	pop	r11
    cd6c:	af 90       	pop	r10
    cd6e:	08 95       	ret

0000cd70 <_Z14brownian_noisePffff>:
  if (numero > 0) {signo = 1;}
  if (numero < 0) {signo = -1;}
  return signo;
}

void brownian_noise (float *ptr, float center, float amp, float damper) {          // suma un valor aleatorio a la variable
    cd70:	2f 92       	push	r2
    cd72:	3f 92       	push	r3
    cd74:	4f 92       	push	r4
    cd76:	5f 92       	push	r5
    cd78:	6f 92       	push	r6
    cd7a:	7f 92       	push	r7
    cd7c:	8f 92       	push	r8
    cd7e:	9f 92       	push	r9
    cd80:	af 92       	push	r10
    cd82:	bf 92       	push	r11
    cd84:	cf 92       	push	r12
    cd86:	df 92       	push	r13
    cd88:	ef 92       	push	r14
    cd8a:	ff 92       	push	r15
    cd8c:	0f 93       	push	r16
    cd8e:	1f 93       	push	r17
    cd90:	df 93       	push	r29
    cd92:	cf 93       	push	r28
    cd94:	cd b7       	in	r28, 0x3d	; 61
    cd96:	de b7       	in	r29, 0x3e	; 62
    cd98:	28 97       	sbiw	r28, 0x08	; 8
    cd9a:	0f b6       	in	r0, 0x3f	; 63
    cd9c:	f8 94       	cli
    cd9e:	de bf       	out	0x3e, r29	; 62
    cda0:	0f be       	out	0x3f, r0	; 63
    cda2:	cd bf       	out	0x3d, r28	; 61
    cda4:	1c 01       	movw	r2, r24
    cda6:	4d 83       	std	Y+5, r20	; 0x05
    cda8:	5e 83       	std	Y+6, r21	; 0x06
    cdaa:	6f 83       	std	Y+7, r22	; 0x07
    cdac:	78 87       	std	Y+8, r23	; 0x08
    cdae:	48 01       	movw	r8, r16
    cdb0:	59 01       	movw	r10, r18
  *ptr += amp*damper*random(-1,1) + damper*(center - *ptr);
    cdb2:	60 e0       	ldi	r22, 0x00	; 0
    cdb4:	70 e0       	ldi	r23, 0x00	; 0
    cdb6:	80 e8       	ldi	r24, 0x80	; 128
    cdb8:	9f eb       	ldi	r25, 0xBF	; 191
    cdba:	20 e0       	ldi	r18, 0x00	; 0
    cdbc:	30 e0       	ldi	r19, 0x00	; 0
    cdbe:	40 e8       	ldi	r20, 0x80	; 128
    cdc0:	5f e3       	ldi	r21, 0x3F	; 63
    cdc2:	0e 94 8d 66 	call	0xcd1a	; 0xcd1a <_Z6randomff>
    cdc6:	2b 01       	movw	r4, r22
    cdc8:	3c 01       	movw	r6, r24
    cdca:	d1 01       	movw	r26, r2
    cdcc:	8d 91       	ld	r24, X+
    cdce:	9d 91       	ld	r25, X+
    cdd0:	0d 90       	ld	r0, X+
    cdd2:	bc 91       	ld	r27, X
    cdd4:	a0 2d       	mov	r26, r0
    cdd6:	89 83       	std	Y+1, r24	; 0x01
    cdd8:	9a 83       	std	Y+2, r25	; 0x02
    cdda:	ab 83       	std	Y+3, r26	; 0x03
    cddc:	bc 83       	std	Y+4, r27	; 0x04
    cdde:	c5 01       	movw	r24, r10
    cde0:	b4 01       	movw	r22, r8
    cde2:	a7 01       	movw	r20, r14
    cde4:	96 01       	movw	r18, r12
    cde6:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    cdea:	a3 01       	movw	r20, r6
    cdec:	92 01       	movw	r18, r4
    cdee:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    cdf2:	4b 01       	movw	r8, r22
    cdf4:	5c 01       	movw	r10, r24
    cdf6:	6d 81       	ldd	r22, Y+5	; 0x05
    cdf8:	7e 81       	ldd	r23, Y+6	; 0x06
    cdfa:	8f 81       	ldd	r24, Y+7	; 0x07
    cdfc:	98 85       	ldd	r25, Y+8	; 0x08
    cdfe:	29 81       	ldd	r18, Y+1	; 0x01
    ce00:	3a 81       	ldd	r19, Y+2	; 0x02
    ce02:	4b 81       	ldd	r20, Y+3	; 0x03
    ce04:	5c 81       	ldd	r21, Y+4	; 0x04
    ce06:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    ce0a:	9b 01       	movw	r18, r22
    ce0c:	ac 01       	movw	r20, r24
    ce0e:	c7 01       	movw	r24, r14
    ce10:	b6 01       	movw	r22, r12
    ce12:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    ce16:	9b 01       	movw	r18, r22
    ce18:	ac 01       	movw	r20, r24
    ce1a:	c5 01       	movw	r24, r10
    ce1c:	b4 01       	movw	r22, r8
    ce1e:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    ce22:	9b 01       	movw	r18, r22
    ce24:	ac 01       	movw	r20, r24
    ce26:	69 81       	ldd	r22, Y+1	; 0x01
    ce28:	7a 81       	ldd	r23, Y+2	; 0x02
    ce2a:	8b 81       	ldd	r24, Y+3	; 0x03
    ce2c:	9c 81       	ldd	r25, Y+4	; 0x04
    ce2e:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    ce32:	f1 01       	movw	r30, r2
    ce34:	60 83       	st	Z, r22
    ce36:	71 83       	std	Z+1, r23	; 0x01
    ce38:	82 83       	std	Z+2, r24	; 0x02
    ce3a:	93 83       	std	Z+3, r25	; 0x03
}
    ce3c:	28 96       	adiw	r28, 0x08	; 8
    ce3e:	0f b6       	in	r0, 0x3f	; 63
    ce40:	f8 94       	cli
    ce42:	de bf       	out	0x3e, r29	; 62
    ce44:	0f be       	out	0x3f, r0	; 63
    ce46:	cd bf       	out	0x3d, r28	; 61
    ce48:	cf 91       	pop	r28
    ce4a:	df 91       	pop	r29
    ce4c:	1f 91       	pop	r17
    ce4e:	0f 91       	pop	r16
    ce50:	ff 90       	pop	r15
    ce52:	ef 90       	pop	r14
    ce54:	df 90       	pop	r13
    ce56:	cf 90       	pop	r12
    ce58:	bf 90       	pop	r11
    ce5a:	af 90       	pop	r10
    ce5c:	9f 90       	pop	r9
    ce5e:	8f 90       	pop	r8
    ce60:	7f 90       	pop	r7
    ce62:	6f 90       	pop	r6
    ce64:	5f 90       	pop	r5
    ce66:	4f 90       	pop	r4
    ce68:	3f 90       	pop	r3
    ce6a:	2f 90       	pop	r2
    ce6c:	08 95       	ret

0000ce6e <_Z10randomSeedj>:

/////////////// importadas de "WMath.h" (en realidad de Wiring) //////////////////////

void randomSeed(unsigned int seed)
{
  if(seed != 0){
    ce6e:	00 97       	sbiw	r24, 0x00	; 0
    ce70:	11 f0       	breq	.+4      	; 0xce76 <_Z10randomSeedj+0x8>
    srand (seed);
    ce72:	0e 94 85 7a 	call	0xf50a	; 0xf50a <srand>
    ce76:	08 95       	ret

0000ce78 <_Z10log_randomf>:
	String signo;
	if (number<0 && number>-1) {signo = "-";}
	return signo + String (parte_entera, DEC) + "," + String (abs(decimos), DEC) + String (abs(centesimos), DEC);
}

float log_random (float curvature) {              // curvature=1, random normal; curvature>1, valores próximos a 0; curvature<1, valores próximos a 1                      
    ce78:	ef 92       	push	r14
    ce7a:	ff 92       	push	r15
    ce7c:	0f 93       	push	r16
    ce7e:	1f 93       	push	r17
    ce80:	7b 01       	movw	r14, r22
    ce82:	8c 01       	movw	r16, r24
  return pow(random(1), curvature); 
    ce84:	60 e0       	ldi	r22, 0x00	; 0
    ce86:	70 e0       	ldi	r23, 0x00	; 0
    ce88:	80 e8       	ldi	r24, 0x80	; 128
    ce8a:	9f e3       	ldi	r25, 0x3F	; 63
    ce8c:	0e 94 57 66 	call	0xccae	; 0xccae <_Z6randomf>
    ce90:	a8 01       	movw	r20, r16
    ce92:	97 01       	movw	r18, r14
    ce94:	0e 94 13 80 	call	0x10026	; 0x10026 <pow>
}
    ce98:	1f 91       	pop	r17
    ce9a:	0f 91       	pop	r16
    ce9c:	ff 90       	pop	r15
    ce9e:	ef 90       	pop	r14
    cea0:	08 95       	ret

0000cea2 <_Z12float2stringf>:

float sigmoide (double x) {
	return 1.0 / (1+exp(-x));
}

String float2string (float number) {                          // esto se usa para el display, más que nada
    cea2:	2f 92       	push	r2
    cea4:	3f 92       	push	r3
    cea6:	4f 92       	push	r4
    cea8:	5f 92       	push	r5
    ceaa:	6f 92       	push	r6
    ceac:	7f 92       	push	r7
    ceae:	8f 92       	push	r8
    ceb0:	9f 92       	push	r9
    ceb2:	af 92       	push	r10
    ceb4:	bf 92       	push	r11
    ceb6:	cf 92       	push	r12
    ceb8:	df 92       	push	r13
    ceba:	ef 92       	push	r14
    cebc:	ff 92       	push	r15
    cebe:	0f 93       	push	r16
    cec0:	1f 93       	push	r17
    cec2:	df 93       	push	r29
    cec4:	cf 93       	push	r28
    cec6:	cd b7       	in	r28, 0x3d	; 61
    cec8:	de b7       	in	r29, 0x3e	; 62
    ceca:	ec 97       	sbiw	r28, 0x3c	; 60
    cecc:	0f b6       	in	r0, 0x3f	; 63
    cece:	f8 94       	cli
    ced0:	de bf       	out	0x3e, r29	; 62
    ced2:	0f be       	out	0x3f, r0	; 63
    ced4:	cd bf       	out	0x3d, r28	; 61
    ced6:	38 2e       	mov	r3, r24
    ced8:	29 2e       	mov	r2, r25
    ceda:	4a 01       	movw	r8, r20
    cedc:	5b 01       	movw	r10, r22
	int parte_entera = number;
    cede:	cb 01       	movw	r24, r22
    cee0:	ba 01       	movw	r22, r20
    cee2:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <__fixsfsi>
    cee6:	3b 01       	movw	r6, r22
	int decimos = number*10 - parte_entera*10;
    cee8:	c5 01       	movw	r24, r10
    ceea:	b4 01       	movw	r22, r8
    ceec:	20 e0       	ldi	r18, 0x00	; 0
    ceee:	30 e0       	ldi	r19, 0x00	; 0
    cef0:	40 e2       	ldi	r20, 0x20	; 32
    cef2:	51 e4       	ldi	r21, 0x41	; 65
    cef4:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    cef8:	7b 01       	movw	r14, r22
    cefa:	8c 01       	movw	r16, r24
    cefc:	b3 01       	movw	r22, r6
    cefe:	66 0f       	add	r22, r22
    cf00:	77 1f       	adc	r23, r23
    cf02:	93 01       	movw	r18, r6
    cf04:	e3 e0       	ldi	r30, 0x03	; 3
    cf06:	22 0f       	add	r18, r18
    cf08:	33 1f       	adc	r19, r19
    cf0a:	ea 95       	dec	r30
    cf0c:	e1 f7       	brne	.-8      	; 0xcf06 <_Z12float2stringf+0x64>
    cf0e:	62 0f       	add	r22, r18
    cf10:	73 1f       	adc	r23, r19
    cf12:	88 27       	eor	r24, r24
    cf14:	77 fd       	sbrc	r23, 7
    cf16:	80 95       	com	r24
    cf18:	98 2f       	mov	r25, r24
    cf1a:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    cf1e:	9b 01       	movw	r18, r22
    cf20:	ac 01       	movw	r20, r24
    cf22:	c8 01       	movw	r24, r16
    cf24:	b7 01       	movw	r22, r14
    cf26:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    cf2a:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <__fixsfsi>
    cf2e:	56 2e       	mov	r5, r22
    cf30:	47 2e       	mov	r4, r23
	int centesimos = number*100 - parte_entera*100 - decimos*10;
	String signo;
    cf32:	7e 01       	movw	r14, r28
    cf34:	08 94       	sec
    cf36:	e1 1c       	adc	r14, r1
    cf38:	f1 1c       	adc	r15, r1
    cf3a:	c7 01       	movw	r24, r14
    cf3c:	66 ed       	ldi	r22, 0xD6	; 214
    cf3e:	73 e0       	ldi	r23, 0x03	; 3
    cf40:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
	if (number<0 && number>-1) {signo = "-";}
    cf44:	c5 01       	movw	r24, r10
    cf46:	b4 01       	movw	r22, r8
    cf48:	20 e0       	ldi	r18, 0x00	; 0
    cf4a:	30 e0       	ldi	r19, 0x00	; 0
    cf4c:	40 e0       	ldi	r20, 0x00	; 0
    cf4e:	50 e0       	ldi	r21, 0x00	; 0
    cf50:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    cf54:	88 23       	and	r24, r24
    cf56:	cc f4       	brge	.+50     	; 0xcf8a <_Z12float2stringf+0xe8>
    cf58:	c5 01       	movw	r24, r10
    cf5a:	b4 01       	movw	r22, r8
    cf5c:	20 e0       	ldi	r18, 0x00	; 0
    cf5e:	30 e0       	ldi	r19, 0x00	; 0
    cf60:	40 e8       	ldi	r20, 0x80	; 128
    cf62:	5f eb       	ldi	r21, 0xBF	; 191
    cf64:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <__gesf2>
    cf68:	18 16       	cp	r1, r24
    cf6a:	7c f4       	brge	.+30     	; 0xcf8a <_Z12float2stringf+0xe8>
    cf6c:	8e 01       	movw	r16, r28
    cf6e:	09 5f       	subi	r16, 0xF9	; 249
    cf70:	1f 4f       	sbci	r17, 0xFF	; 255
    cf72:	c8 01       	movw	r24, r16
    cf74:	67 ed       	ldi	r22, 0xD7	; 215
    cf76:	73 e0       	ldi	r23, 0x03	; 3
    cf78:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    cf7c:	c7 01       	movw	r24, r14
    cf7e:	b8 01       	movw	r22, r16
    cf80:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN6StringaSERKS_>
    cf84:	c8 01       	movw	r24, r16
    cf86:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
	return signo + String (parte_entera, DEC) + "," + String (abs(decimos), DEC) + String (abs(centesimos), DEC);
    cf8a:	63 e1       	ldi	r22, 0x13	; 19
    cf8c:	c6 2e       	mov	r12, r22
    cf8e:	d1 2c       	mov	r13, r1
    cf90:	cc 0e       	add	r12, r28
    cf92:	dd 1e       	adc	r13, r29
    cf94:	c6 01       	movw	r24, r12
    cf96:	be 01       	movw	r22, r28
    cf98:	6f 5f       	subi	r22, 0xFF	; 255
    cf9a:	7f 4f       	sbci	r23, 0xFF	; 255
    cf9c:	0e 94 a0 08 	call	0x1140	; 0x1140 <_ZN6StringC1ERKS_>
    cfa0:	8e 01       	movw	r16, r28
    cfa2:	03 5f       	subi	r16, 0xF3	; 243
    cfa4:	1f 4f       	sbci	r17, 0xFF	; 255
    cfa6:	c8 01       	movw	r24, r16
    cfa8:	b3 01       	movw	r22, r6
    cfaa:	4a e0       	ldi	r20, 0x0A	; 10
    cfac:	50 e0       	ldi	r21, 0x00	; 0
    cfae:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_ZN6StringC1Eii>
    cfb2:	59 e1       	ldi	r21, 0x19	; 25
    cfb4:	e5 2e       	mov	r14, r21
    cfb6:	f1 2c       	mov	r15, r1
    cfb8:	ec 0e       	add	r14, r28
    cfba:	fd 1e       	adc	r15, r29
    cfbc:	c7 01       	movw	r24, r14
    cfbe:	b6 01       	movw	r22, r12
    cfc0:	a8 01       	movw	r20, r16
    cfc2:	0e 94 4c 4d 	call	0x9a98	; 0x9a98 <_Zpl6StringRKS_>
    cfc6:	8e 01       	movw	r16, r28
    cfc8:	01 5e       	subi	r16, 0xE1	; 225
    cfca:	1f 4f       	sbci	r17, 0xFF	; 255
    cfcc:	c8 01       	movw	r24, r16
    cfce:	69 ed       	ldi	r22, 0xD9	; 217
    cfd0:	73 e0       	ldi	r23, 0x03	; 3
    cfd2:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN6StringC1EPKc>
    cfd6:	ce 01       	movw	r24, r28
    cfd8:	85 96       	adiw	r24, 0x25	; 37
    cfda:	b7 01       	movw	r22, r14
    cfdc:	a8 01       	movw	r20, r16
    cfde:	0e 94 4c 4d 	call	0x9a98	; 0x9a98 <_Zpl6StringRKS_>
    cfe2:	25 2d       	mov	r18, r5
    cfe4:	34 2d       	mov	r19, r4
    cfe6:	c9 01       	movw	r24, r18
    cfe8:	bc 01       	movw	r22, r24
    cfea:	97 ff       	sbrs	r25, 7
    cfec:	03 c0       	rjmp	.+6      	; 0xcff4 <_Z12float2stringf+0x152>
    cfee:	70 95       	com	r23
    cff0:	61 95       	neg	r22
    cff2:	7f 4f       	sbci	r23, 0xFF	; 255
    cff4:	ce 01       	movw	r24, r28
    cff6:	8b 96       	adiw	r24, 0x2b	; 43
    cff8:	4a e0       	ldi	r20, 0x0A	; 10
    cffa:	50 e0       	ldi	r21, 0x00	; 0
    cffc:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_ZN6StringC1Eii>
    d000:	ce 01       	movw	r24, r28
    d002:	c1 96       	adiw	r24, 0x31	; 49
    d004:	be 01       	movw	r22, r28
    d006:	6b 5d       	subi	r22, 0xDB	; 219
    d008:	7f 4f       	sbci	r23, 0xFF	; 255
    d00a:	ae 01       	movw	r20, r28
    d00c:	45 5d       	subi	r20, 0xD5	; 213
    d00e:	5f 4f       	sbci	r21, 0xFF	; 255
    d010:	0e 94 4c 4d 	call	0x9a98	; 0x9a98 <_Zpl6StringRKS_>
    d014:	c5 01       	movw	r24, r10
    d016:	b4 01       	movw	r22, r8
    d018:	20 e0       	ldi	r18, 0x00	; 0
    d01a:	30 e0       	ldi	r19, 0x00	; 0
    d01c:	48 ec       	ldi	r20, 0xC8	; 200
    d01e:	52 e4       	ldi	r21, 0x42	; 66
    d020:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    d024:	7b 01       	movw	r14, r22
    d026:	8c 01       	movw	r16, r24
    d028:	84 e6       	ldi	r24, 0x64	; 100
    d02a:	90 e0       	ldi	r25, 0x00	; 0
    d02c:	68 9e       	mul	r6, r24
    d02e:	b0 01       	movw	r22, r0
    d030:	69 9e       	mul	r6, r25
    d032:	70 0d       	add	r23, r0
    d034:	78 9e       	mul	r7, r24
    d036:	70 0d       	add	r23, r0
    d038:	11 24       	eor	r1, r1
    d03a:	88 27       	eor	r24, r24
    d03c:	77 fd       	sbrc	r23, 7
    d03e:	80 95       	com	r24
    d040:	98 2f       	mov	r25, r24
    d042:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    d046:	9b 01       	movw	r18, r22
    d048:	ac 01       	movw	r20, r24
    d04a:	c8 01       	movw	r24, r16
    d04c:	b7 01       	movw	r22, r14
    d04e:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    d052:	7b 01       	movw	r14, r22
    d054:	8c 01       	movw	r16, r24
    d056:	25 2d       	mov	r18, r5
    d058:	34 2d       	mov	r19, r4
    d05a:	b9 01       	movw	r22, r18
    d05c:	43 e0       	ldi	r20, 0x03	; 3
    d05e:	66 0f       	add	r22, r22
    d060:	77 1f       	adc	r23, r23
    d062:	4a 95       	dec	r20
    d064:	e1 f7       	brne	.-8      	; 0xd05e <_Z12float2stringf+0x1bc>
    d066:	22 0f       	add	r18, r18
    d068:	33 1f       	adc	r19, r19
    d06a:	62 0f       	add	r22, r18
    d06c:	73 1f       	adc	r23, r19
    d06e:	88 27       	eor	r24, r24
    d070:	77 fd       	sbrc	r23, 7
    d072:	80 95       	com	r24
    d074:	98 2f       	mov	r25, r24
    d076:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    d07a:	9b 01       	movw	r18, r22
    d07c:	ac 01       	movw	r20, r24
    d07e:	c8 01       	movw	r24, r16
    d080:	b7 01       	movw	r22, r14
    d082:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    d086:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <__fixsfsi>
    d08a:	77 ff       	sbrs	r23, 7
    d08c:	03 c0       	rjmp	.+6      	; 0xd094 <_Z12float2stringf+0x1f2>
    d08e:	70 95       	com	r23
    d090:	61 95       	neg	r22
    d092:	7f 4f       	sbci	r23, 0xFF	; 255
    d094:	ce 01       	movw	r24, r28
    d096:	c7 96       	adiw	r24, 0x37	; 55
    d098:	4a e0       	ldi	r20, 0x0A	; 10
    d09a:	50 e0       	ldi	r21, 0x00	; 0
    d09c:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_ZN6StringC1Eii>
    d0a0:	81 e3       	ldi	r24, 0x31	; 49
    d0a2:	e8 2e       	mov	r14, r24
    d0a4:	f1 2c       	mov	r15, r1
    d0a6:	ec 0e       	add	r14, r28
    d0a8:	fd 1e       	adc	r15, r29
    d0aa:	8e 01       	movw	r16, r28
    d0ac:	09 5c       	subi	r16, 0xC9	; 201
    d0ae:	1f 4f       	sbci	r17, 0xFF	; 255
    d0b0:	83 2d       	mov	r24, r3
    d0b2:	92 2d       	mov	r25, r2
    d0b4:	b7 01       	movw	r22, r14
    d0b6:	a8 01       	movw	r20, r16
    d0b8:	0e 94 4c 4d 	call	0x9a98	; 0x9a98 <_Zpl6StringRKS_>
    d0bc:	c8 01       	movw	r24, r16
    d0be:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    d0c2:	c7 01       	movw	r24, r14
    d0c4:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    d0c8:	ce 01       	movw	r24, r28
    d0ca:	8b 96       	adiw	r24, 0x2b	; 43
    d0cc:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    d0d0:	ce 01       	movw	r24, r28
    d0d2:	85 96       	adiw	r24, 0x25	; 37
    d0d4:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    d0d8:	ce 01       	movw	r24, r28
    d0da:	4f 96       	adiw	r24, 0x1f	; 31
    d0dc:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    d0e0:	ce 01       	movw	r24, r28
    d0e2:	49 96       	adiw	r24, 0x19	; 25
    d0e4:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    d0e8:	ce 01       	movw	r24, r28
    d0ea:	0d 96       	adiw	r24, 0x0d	; 13
    d0ec:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    d0f0:	ce 01       	movw	r24, r28
    d0f2:	43 96       	adiw	r24, 0x13	; 19
    d0f4:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
    d0f8:	ce 01       	movw	r24, r28
    d0fa:	01 96       	adiw	r24, 0x01	; 1
    d0fc:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6StringD1Ev>
}
    d100:	83 2d       	mov	r24, r3
    d102:	92 2d       	mov	r25, r2
    d104:	ec 96       	adiw	r28, 0x3c	; 60
    d106:	0f b6       	in	r0, 0x3f	; 63
    d108:	f8 94       	cli
    d10a:	de bf       	out	0x3e, r29	; 62
    d10c:	0f be       	out	0x3f, r0	; 63
    d10e:	cd bf       	out	0x3d, r28	; 61
    d110:	cf 91       	pop	r28
    d112:	df 91       	pop	r29
    d114:	1f 91       	pop	r17
    d116:	0f 91       	pop	r16
    d118:	ff 90       	pop	r15
    d11a:	ef 90       	pop	r14
    d11c:	df 90       	pop	r13
    d11e:	cf 90       	pop	r12
    d120:	bf 90       	pop	r11
    d122:	af 90       	pop	r10
    d124:	9f 90       	pop	r9
    d126:	8f 90       	pop	r8
    d128:	7f 90       	pop	r7
    d12a:	6f 90       	pop	r6
    d12c:	5f 90       	pop	r5
    d12e:	4f 90       	pop	r4
    d130:	3f 90       	pop	r3
    d132:	2f 90       	pop	r2
    d134:	08 95       	ret

0000d136 <_Z8sigmoided>:
void brownian_noise (float *ptr, float center, float amp, float damper) {          // suma un valor aleatorio a la variable
  *ptr += amp*damper*random(-1,1) + damper*(center - *ptr);
}

float sigmoide (double x) {
	return 1.0 / (1+exp(-x));
    d136:	90 58       	subi	r25, 0x80	; 128
    d138:	0e 94 0e 7d 	call	0xfa1c	; 0xfa1c <exp>
    d13c:	20 e0       	ldi	r18, 0x00	; 0
    d13e:	30 e0       	ldi	r19, 0x00	; 0
    d140:	40 e8       	ldi	r20, 0x80	; 128
    d142:	5f e3       	ldi	r21, 0x3F	; 63
    d144:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    d148:	9b 01       	movw	r18, r22
    d14a:	ac 01       	movw	r20, r24
    d14c:	60 e0       	ldi	r22, 0x00	; 0
    d14e:	70 e0       	ldi	r23, 0x00	; 0
    d150:	80 e8       	ldi	r24, 0x80	; 128
    d152:	9f e3       	ldi	r25, 0x3F	; 63
    d154:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
}
    d158:	08 95       	ret

0000d15a <_Z6bezierffff>:

/***********************************************
** rutinas puramente geométricas (abstractas) **
***********************************************/

float bezier (float p0, float p1, float p2, float t) {
    d15a:	2f 92       	push	r2
    d15c:	3f 92       	push	r3
    d15e:	4f 92       	push	r4
    d160:	5f 92       	push	r5
    d162:	6f 92       	push	r6
    d164:	7f 92       	push	r7
    d166:	8f 92       	push	r8
    d168:	9f 92       	push	r9
    d16a:	af 92       	push	r10
    d16c:	bf 92       	push	r11
    d16e:	cf 92       	push	r12
    d170:	df 92       	push	r13
    d172:	ef 92       	push	r14
    d174:	ff 92       	push	r15
    d176:	0f 93       	push	r16
    d178:	1f 93       	push	r17
    d17a:	df 93       	push	r29
    d17c:	cf 93       	push	r28
    d17e:	00 d0       	rcall	.+0      	; 0xd180 <_Z6bezierffff+0x26>
    d180:	00 d0       	rcall	.+0      	; 0xd182 <_Z6bezierffff+0x28>
    d182:	cd b7       	in	r28, 0x3d	; 61
    d184:	de b7       	in	r29, 0x3e	; 62
    d186:	1b 01       	movw	r2, r22
    d188:	2c 01       	movw	r4, r24
    d18a:	29 83       	std	Y+1, r18	; 0x01
    d18c:	3a 83       	std	Y+2, r19	; 0x02
    d18e:	4b 83       	std	Y+3, r20	; 0x03
    d190:	5c 83       	std	Y+4, r21	; 0x04
  return sq(1-t)*p0 + 2*t*(1-t)*p1 + sq(t)*p2;
    d192:	60 e0       	ldi	r22, 0x00	; 0
    d194:	70 e0       	ldi	r23, 0x00	; 0
    d196:	80 e8       	ldi	r24, 0x80	; 128
    d198:	9f e3       	ldi	r25, 0x3F	; 63
    d19a:	a6 01       	movw	r20, r12
    d19c:	95 01       	movw	r18, r10
    d19e:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    d1a2:	3b 01       	movw	r6, r22
    d1a4:	4c 01       	movw	r8, r24
    d1a6:	a4 01       	movw	r20, r8
    d1a8:	93 01       	movw	r18, r6
    d1aa:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    d1ae:	a2 01       	movw	r20, r4
    d1b0:	91 01       	movw	r18, r2
    d1b2:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    d1b6:	1b 01       	movw	r2, r22
    d1b8:	2c 01       	movw	r4, r24
    d1ba:	c6 01       	movw	r24, r12
    d1bc:	b5 01       	movw	r22, r10
    d1be:	a6 01       	movw	r20, r12
    d1c0:	95 01       	movw	r18, r10
    d1c2:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    d1c6:	a4 01       	movw	r20, r8
    d1c8:	93 01       	movw	r18, r6
    d1ca:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    d1ce:	29 81       	ldd	r18, Y+1	; 0x01
    d1d0:	3a 81       	ldd	r19, Y+2	; 0x02
    d1d2:	4b 81       	ldd	r20, Y+3	; 0x03
    d1d4:	5c 81       	ldd	r21, Y+4	; 0x04
    d1d6:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    d1da:	9b 01       	movw	r18, r22
    d1dc:	ac 01       	movw	r20, r24
    d1de:	c2 01       	movw	r24, r4
    d1e0:	b1 01       	movw	r22, r2
    d1e2:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    d1e6:	3b 01       	movw	r6, r22
    d1e8:	4c 01       	movw	r8, r24
    d1ea:	c6 01       	movw	r24, r12
    d1ec:	b5 01       	movw	r22, r10
    d1ee:	a6 01       	movw	r20, r12
    d1f0:	95 01       	movw	r18, r10
    d1f2:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    d1f6:	a8 01       	movw	r20, r16
    d1f8:	97 01       	movw	r18, r14
    d1fa:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    d1fe:	9b 01       	movw	r18, r22
    d200:	ac 01       	movw	r20, r24
    d202:	c4 01       	movw	r24, r8
    d204:	b3 01       	movw	r22, r6
    d206:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
}
    d20a:	0f 90       	pop	r0
    d20c:	0f 90       	pop	r0
    d20e:	0f 90       	pop	r0
    d210:	0f 90       	pop	r0
    d212:	cf 91       	pop	r28
    d214:	df 91       	pop	r29
    d216:	1f 91       	pop	r17
    d218:	0f 91       	pop	r16
    d21a:	ff 90       	pop	r15
    d21c:	ef 90       	pop	r14
    d21e:	df 90       	pop	r13
    d220:	cf 90       	pop	r12
    d222:	bf 90       	pop	r11
    d224:	af 90       	pop	r10
    d226:	9f 90       	pop	r9
    d228:	8f 90       	pop	r8
    d22a:	7f 90       	pop	r7
    d22c:	6f 90       	pop	r6
    d22e:	5f 90       	pop	r5
    d230:	4f 90       	pop	r4
    d232:	3f 90       	pop	r3
    d234:	2f 90       	pop	r2
    d236:	08 95       	ret

0000d238 <_Z4suma7COORD3DS_>:

COORD3D suma (COORD3D punto1, COORD3D punto2) {
    d238:	8f 92       	push	r8
    d23a:	9f 92       	push	r9
    d23c:	af 92       	push	r10
    d23e:	bf 92       	push	r11
    d240:	cf 92       	push	r12
    d242:	df 92       	push	r13
    d244:	ef 92       	push	r14
    d246:	ff 92       	push	r15
    d248:	0f 93       	push	r16
    d24a:	1f 93       	push	r17
    d24c:	df 93       	push	r29
    d24e:	cf 93       	push	r28
    d250:	cd b7       	in	r28, 0x3d	; 61
    d252:	de b7       	in	r29, 0x3e	; 62
    d254:	2c 97       	sbiw	r28, 0x0c	; 12
    d256:	0f b6       	in	r0, 0x3f	; 63
    d258:	f8 94       	cli
    d25a:	de bf       	out	0x3e, r29	; 62
    d25c:	0f be       	out	0x3f, r0	; 63
    d25e:	cd bf       	out	0x3d, r28	; 61
    d260:	4c 01       	movw	r8, r24
    d262:	c9 82       	std	Y+1, r12	; 0x01
    d264:	da 82       	std	Y+2, r13	; 0x02
    d266:	eb 82       	std	Y+3, r14	; 0x03
    d268:	fc 82       	std	Y+4, r15	; 0x04
    d26a:	0d 83       	std	Y+5, r16	; 0x05
    d26c:	1e 83       	std	Y+6, r17	; 0x06
    d26e:	2f 83       	std	Y+7, r18	; 0x07
    d270:	38 87       	std	Y+8, r19	; 0x08
    d272:	49 87       	std	Y+9, r20	; 0x09
    d274:	5a 87       	std	Y+10, r21	; 0x0a
    d276:	6b 87       	std	Y+11, r22	; 0x0b
    d278:	7c 87       	std	Y+12, r23	; 0x0c
  return (COORD3D) {punto1.x + punto2.x, punto1.y + punto2.y, punto1.z + punto2.z}; 
    d27a:	6d 81       	ldd	r22, Y+5	; 0x05
    d27c:	7e 81       	ldd	r23, Y+6	; 0x06
    d27e:	8f 81       	ldd	r24, Y+7	; 0x07
    d280:	98 85       	ldd	r25, Y+8	; 0x08
    d282:	2f 8d       	ldd	r18, Y+31	; 0x1f
    d284:	38 a1       	ldd	r19, Y+32	; 0x20
    d286:	49 a1       	ldd	r20, Y+33	; 0x21
    d288:	5a a1       	ldd	r21, Y+34	; 0x22
    d28a:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    d28e:	7b 01       	movw	r14, r22
    d290:	8c 01       	movw	r16, r24
    d292:	69 85       	ldd	r22, Y+9	; 0x09
    d294:	7a 85       	ldd	r23, Y+10	; 0x0a
    d296:	8b 85       	ldd	r24, Y+11	; 0x0b
    d298:	9c 85       	ldd	r25, Y+12	; 0x0c
    d29a:	2b a1       	ldd	r18, Y+35	; 0x23
    d29c:	3c a1       	ldd	r19, Y+36	; 0x24
    d29e:	4d a1       	ldd	r20, Y+37	; 0x25
    d2a0:	5e a1       	ldd	r21, Y+38	; 0x26
    d2a2:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    d2a6:	5b 01       	movw	r10, r22
    d2a8:	6c 01       	movw	r12, r24
    d2aa:	69 81       	ldd	r22, Y+1	; 0x01
    d2ac:	7a 81       	ldd	r23, Y+2	; 0x02
    d2ae:	8b 81       	ldd	r24, Y+3	; 0x03
    d2b0:	9c 81       	ldd	r25, Y+4	; 0x04
    d2b2:	2b 8d       	ldd	r18, Y+27	; 0x1b
    d2b4:	3c 8d       	ldd	r19, Y+28	; 0x1c
    d2b6:	4d 8d       	ldd	r20, Y+29	; 0x1d
    d2b8:	5e 8d       	ldd	r21, Y+30	; 0x1e
    d2ba:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    d2be:	f4 01       	movw	r30, r8
    d2c0:	60 83       	st	Z, r22
    d2c2:	71 83       	std	Z+1, r23	; 0x01
    d2c4:	82 83       	std	Z+2, r24	; 0x02
    d2c6:	93 83       	std	Z+3, r25	; 0x03
    d2c8:	c7 01       	movw	r24, r14
    d2ca:	d8 01       	movw	r26, r16
    d2cc:	84 83       	std	Z+4, r24	; 0x04
    d2ce:	95 83       	std	Z+5, r25	; 0x05
    d2d0:	a6 83       	std	Z+6, r26	; 0x06
    d2d2:	b7 83       	std	Z+7, r27	; 0x07
    d2d4:	c5 01       	movw	r24, r10
    d2d6:	d6 01       	movw	r26, r12
    d2d8:	80 87       	std	Z+8, r24	; 0x08
    d2da:	91 87       	std	Z+9, r25	; 0x09
    d2dc:	a2 87       	std	Z+10, r26	; 0x0a
    d2de:	b3 87       	std	Z+11, r27	; 0x0b
}
    d2e0:	c4 01       	movw	r24, r8
    d2e2:	2c 96       	adiw	r28, 0x0c	; 12
    d2e4:	0f b6       	in	r0, 0x3f	; 63
    d2e6:	f8 94       	cli
    d2e8:	de bf       	out	0x3e, r29	; 62
    d2ea:	0f be       	out	0x3f, r0	; 63
    d2ec:	cd bf       	out	0x3d, r28	; 61
    d2ee:	cf 91       	pop	r28
    d2f0:	df 91       	pop	r29
    d2f2:	1f 91       	pop	r17
    d2f4:	0f 91       	pop	r16
    d2f6:	ff 90       	pop	r15
    d2f8:	ef 90       	pop	r14
    d2fa:	df 90       	pop	r13
    d2fc:	cf 90       	pop	r12
    d2fe:	bf 90       	pop	r11
    d300:	af 90       	pop	r10
    d302:	9f 90       	pop	r9
    d304:	8f 90       	pop	r8
    d306:	08 95       	ret

0000d308 <_Z4suma7COORD2DS_>:

COORD2D suma (COORD2D punto1, COORD2D punto2) {
    d308:	af 92       	push	r10
    d30a:	bf 92       	push	r11
    d30c:	cf 92       	push	r12
    d30e:	df 92       	push	r13
    d310:	ef 92       	push	r14
    d312:	ff 92       	push	r15
    d314:	0f 93       	push	r16
    d316:	1f 93       	push	r17
    d318:	df 93       	push	r29
    d31a:	cf 93       	push	r28
    d31c:	cd b7       	in	r28, 0x3d	; 61
    d31e:	de b7       	in	r29, 0x3e	; 62
    d320:	68 97       	sbiw	r28, 0x18	; 24
    d322:	0f b6       	in	r0, 0x3f	; 63
    d324:	f8 94       	cli
    d326:	de bf       	out	0x3e, r29	; 62
    d328:	0f be       	out	0x3f, r0	; 63
    d32a:	cd bf       	out	0x3d, r28	; 61
    d32c:	29 87       	std	Y+9, r18	; 0x09
    d32e:	3a 87       	std	Y+10, r19	; 0x0a
    d330:	4b 87       	std	Y+11, r20	; 0x0b
    d332:	5c 87       	std	Y+12, r21	; 0x0c
    d334:	6d 87       	std	Y+13, r22	; 0x0d
    d336:	7e 87       	std	Y+14, r23	; 0x0e
    d338:	8f 87       	std	Y+15, r24	; 0x0f
    d33a:	98 8b       	std	Y+16, r25	; 0x10
    d33c:	a9 8a       	std	Y+17, r10	; 0x11
    d33e:	ba 8a       	std	Y+18, r11	; 0x12
    d340:	cb 8a       	std	Y+19, r12	; 0x13
    d342:	dc 8a       	std	Y+20, r13	; 0x14
    d344:	ed 8a       	std	Y+21, r14	; 0x15
    d346:	fe 8a       	std	Y+22, r15	; 0x16
    d348:	0f 8b       	std	Y+23, r16	; 0x17
    d34a:	18 8f       	std	Y+24, r17	; 0x18
  return (COORD2D) {punto1.x + punto2.x, punto1.z + punto2.z}; 
    d34c:	6d 85       	ldd	r22, Y+13	; 0x0d
    d34e:	7e 85       	ldd	r23, Y+14	; 0x0e
    d350:	8f 85       	ldd	r24, Y+15	; 0x0f
    d352:	98 89       	ldd	r25, Y+16	; 0x10
    d354:	2d 89       	ldd	r18, Y+21	; 0x15
    d356:	3e 89       	ldd	r19, Y+22	; 0x16
    d358:	4f 89       	ldd	r20, Y+23	; 0x17
    d35a:	58 8d       	ldd	r21, Y+24	; 0x18
    d35c:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    d360:	7b 01       	movw	r14, r22
    d362:	8c 01       	movw	r16, r24
    d364:	69 85       	ldd	r22, Y+9	; 0x09
    d366:	7a 85       	ldd	r23, Y+10	; 0x0a
    d368:	8b 85       	ldd	r24, Y+11	; 0x0b
    d36a:	9c 85       	ldd	r25, Y+12	; 0x0c
    d36c:	29 89       	ldd	r18, Y+17	; 0x11
    d36e:	3a 89       	ldd	r19, Y+18	; 0x12
    d370:	4b 89       	ldd	r20, Y+19	; 0x13
    d372:	5c 89       	ldd	r21, Y+20	; 0x14
    d374:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    d378:	69 83       	std	Y+1, r22	; 0x01
    d37a:	7a 83       	std	Y+2, r23	; 0x02
    d37c:	8b 83       	std	Y+3, r24	; 0x03
    d37e:	9c 83       	std	Y+4, r25	; 0x04
    d380:	c7 01       	movw	r24, r14
    d382:	d8 01       	movw	r26, r16
    d384:	8d 83       	std	Y+5, r24	; 0x05
    d386:	9e 83       	std	Y+6, r25	; 0x06
    d388:	af 83       	std	Y+7, r26	; 0x07
    d38a:	b8 87       	std	Y+8, r27	; 0x08
    d38c:	29 81       	ldd	r18, Y+1	; 0x01
    d38e:	3a 81       	ldd	r19, Y+2	; 0x02
    d390:	4b 81       	ldd	r20, Y+3	; 0x03
    d392:	5c 81       	ldd	r21, Y+4	; 0x04
    d394:	6d 81       	ldd	r22, Y+5	; 0x05
    d396:	7e 81       	ldd	r23, Y+6	; 0x06
}
    d398:	8f 81       	ldd	r24, Y+7	; 0x07
    d39a:	98 85       	ldd	r25, Y+8	; 0x08
    d39c:	68 96       	adiw	r28, 0x18	; 24
    d39e:	0f b6       	in	r0, 0x3f	; 63
    d3a0:	f8 94       	cli
    d3a2:	de bf       	out	0x3e, r29	; 62
    d3a4:	0f be       	out	0x3f, r0	; 63
    d3a6:	cd bf       	out	0x3d, r28	; 61
    d3a8:	cf 91       	pop	r28
    d3aa:	df 91       	pop	r29
    d3ac:	1f 91       	pop	r17
    d3ae:	0f 91       	pop	r16
    d3b0:	ff 90       	pop	r15
    d3b2:	ef 90       	pop	r14
    d3b4:	df 90       	pop	r13
    d3b6:	cf 90       	pop	r12
    d3b8:	bf 90       	pop	r11
    d3ba:	af 90       	pop	r10
    d3bc:	08 95       	ret

0000d3be <_Z5resta7COORD3DS_>:

COORD3D resta (COORD3D punto1, COORD3D punto2) {
    d3be:	8f 92       	push	r8
    d3c0:	9f 92       	push	r9
    d3c2:	af 92       	push	r10
    d3c4:	bf 92       	push	r11
    d3c6:	cf 92       	push	r12
    d3c8:	df 92       	push	r13
    d3ca:	ef 92       	push	r14
    d3cc:	ff 92       	push	r15
    d3ce:	0f 93       	push	r16
    d3d0:	1f 93       	push	r17
    d3d2:	df 93       	push	r29
    d3d4:	cf 93       	push	r28
    d3d6:	cd b7       	in	r28, 0x3d	; 61
    d3d8:	de b7       	in	r29, 0x3e	; 62
    d3da:	2c 97       	sbiw	r28, 0x0c	; 12
    d3dc:	0f b6       	in	r0, 0x3f	; 63
    d3de:	f8 94       	cli
    d3e0:	de bf       	out	0x3e, r29	; 62
    d3e2:	0f be       	out	0x3f, r0	; 63
    d3e4:	cd bf       	out	0x3d, r28	; 61
    d3e6:	4c 01       	movw	r8, r24
    d3e8:	c9 82       	std	Y+1, r12	; 0x01
    d3ea:	da 82       	std	Y+2, r13	; 0x02
    d3ec:	eb 82       	std	Y+3, r14	; 0x03
    d3ee:	fc 82       	std	Y+4, r15	; 0x04
    d3f0:	0d 83       	std	Y+5, r16	; 0x05
    d3f2:	1e 83       	std	Y+6, r17	; 0x06
    d3f4:	2f 83       	std	Y+7, r18	; 0x07
    d3f6:	38 87       	std	Y+8, r19	; 0x08
    d3f8:	49 87       	std	Y+9, r20	; 0x09
    d3fa:	5a 87       	std	Y+10, r21	; 0x0a
    d3fc:	6b 87       	std	Y+11, r22	; 0x0b
    d3fe:	7c 87       	std	Y+12, r23	; 0x0c
  return (COORD3D) {punto1.x - punto2.x, punto1.y - punto2.y, punto1.z - punto2.z}; 
    d400:	6d 81       	ldd	r22, Y+5	; 0x05
    d402:	7e 81       	ldd	r23, Y+6	; 0x06
    d404:	8f 81       	ldd	r24, Y+7	; 0x07
    d406:	98 85       	ldd	r25, Y+8	; 0x08
    d408:	2f 8d       	ldd	r18, Y+31	; 0x1f
    d40a:	38 a1       	ldd	r19, Y+32	; 0x20
    d40c:	49 a1       	ldd	r20, Y+33	; 0x21
    d40e:	5a a1       	ldd	r21, Y+34	; 0x22
    d410:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    d414:	7b 01       	movw	r14, r22
    d416:	8c 01       	movw	r16, r24
    d418:	69 85       	ldd	r22, Y+9	; 0x09
    d41a:	7a 85       	ldd	r23, Y+10	; 0x0a
    d41c:	8b 85       	ldd	r24, Y+11	; 0x0b
    d41e:	9c 85       	ldd	r25, Y+12	; 0x0c
    d420:	2b a1       	ldd	r18, Y+35	; 0x23
    d422:	3c a1       	ldd	r19, Y+36	; 0x24
    d424:	4d a1       	ldd	r20, Y+37	; 0x25
    d426:	5e a1       	ldd	r21, Y+38	; 0x26
    d428:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    d42c:	5b 01       	movw	r10, r22
    d42e:	6c 01       	movw	r12, r24
    d430:	69 81       	ldd	r22, Y+1	; 0x01
    d432:	7a 81       	ldd	r23, Y+2	; 0x02
    d434:	8b 81       	ldd	r24, Y+3	; 0x03
    d436:	9c 81       	ldd	r25, Y+4	; 0x04
    d438:	2b 8d       	ldd	r18, Y+27	; 0x1b
    d43a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    d43c:	4d 8d       	ldd	r20, Y+29	; 0x1d
    d43e:	5e 8d       	ldd	r21, Y+30	; 0x1e
    d440:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    d444:	f4 01       	movw	r30, r8
    d446:	60 83       	st	Z, r22
    d448:	71 83       	std	Z+1, r23	; 0x01
    d44a:	82 83       	std	Z+2, r24	; 0x02
    d44c:	93 83       	std	Z+3, r25	; 0x03
    d44e:	c7 01       	movw	r24, r14
    d450:	d8 01       	movw	r26, r16
    d452:	84 83       	std	Z+4, r24	; 0x04
    d454:	95 83       	std	Z+5, r25	; 0x05
    d456:	a6 83       	std	Z+6, r26	; 0x06
    d458:	b7 83       	std	Z+7, r27	; 0x07
    d45a:	c5 01       	movw	r24, r10
    d45c:	d6 01       	movw	r26, r12
    d45e:	80 87       	std	Z+8, r24	; 0x08
    d460:	91 87       	std	Z+9, r25	; 0x09
    d462:	a2 87       	std	Z+10, r26	; 0x0a
    d464:	b3 87       	std	Z+11, r27	; 0x0b
}
    d466:	c4 01       	movw	r24, r8
    d468:	2c 96       	adiw	r28, 0x0c	; 12
    d46a:	0f b6       	in	r0, 0x3f	; 63
    d46c:	f8 94       	cli
    d46e:	de bf       	out	0x3e, r29	; 62
    d470:	0f be       	out	0x3f, r0	; 63
    d472:	cd bf       	out	0x3d, r28	; 61
    d474:	cf 91       	pop	r28
    d476:	df 91       	pop	r29
    d478:	1f 91       	pop	r17
    d47a:	0f 91       	pop	r16
    d47c:	ff 90       	pop	r15
    d47e:	ef 90       	pop	r14
    d480:	df 90       	pop	r13
    d482:	cf 90       	pop	r12
    d484:	bf 90       	pop	r11
    d486:	af 90       	pop	r10
    d488:	9f 90       	pop	r9
    d48a:	8f 90       	pop	r8
    d48c:	08 95       	ret

0000d48e <_Z5resta7COORD2DS_>:

COORD2D resta (COORD2D punto1, COORD2D punto2) {
    d48e:	af 92       	push	r10
    d490:	bf 92       	push	r11
    d492:	cf 92       	push	r12
    d494:	df 92       	push	r13
    d496:	ef 92       	push	r14
    d498:	ff 92       	push	r15
    d49a:	0f 93       	push	r16
    d49c:	1f 93       	push	r17
    d49e:	df 93       	push	r29
    d4a0:	cf 93       	push	r28
    d4a2:	cd b7       	in	r28, 0x3d	; 61
    d4a4:	de b7       	in	r29, 0x3e	; 62
    d4a6:	68 97       	sbiw	r28, 0x18	; 24
    d4a8:	0f b6       	in	r0, 0x3f	; 63
    d4aa:	f8 94       	cli
    d4ac:	de bf       	out	0x3e, r29	; 62
    d4ae:	0f be       	out	0x3f, r0	; 63
    d4b0:	cd bf       	out	0x3d, r28	; 61
    d4b2:	29 87       	std	Y+9, r18	; 0x09
    d4b4:	3a 87       	std	Y+10, r19	; 0x0a
    d4b6:	4b 87       	std	Y+11, r20	; 0x0b
    d4b8:	5c 87       	std	Y+12, r21	; 0x0c
    d4ba:	6d 87       	std	Y+13, r22	; 0x0d
    d4bc:	7e 87       	std	Y+14, r23	; 0x0e
    d4be:	8f 87       	std	Y+15, r24	; 0x0f
    d4c0:	98 8b       	std	Y+16, r25	; 0x10
    d4c2:	a9 8a       	std	Y+17, r10	; 0x11
    d4c4:	ba 8a       	std	Y+18, r11	; 0x12
    d4c6:	cb 8a       	std	Y+19, r12	; 0x13
    d4c8:	dc 8a       	std	Y+20, r13	; 0x14
    d4ca:	ed 8a       	std	Y+21, r14	; 0x15
    d4cc:	fe 8a       	std	Y+22, r15	; 0x16
    d4ce:	0f 8b       	std	Y+23, r16	; 0x17
    d4d0:	18 8f       	std	Y+24, r17	; 0x18
  return (COORD2D) {punto1.x - punto2.x, punto1.z - punto2.z}; 
    d4d2:	6d 85       	ldd	r22, Y+13	; 0x0d
    d4d4:	7e 85       	ldd	r23, Y+14	; 0x0e
    d4d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    d4d8:	98 89       	ldd	r25, Y+16	; 0x10
    d4da:	2d 89       	ldd	r18, Y+21	; 0x15
    d4dc:	3e 89       	ldd	r19, Y+22	; 0x16
    d4de:	4f 89       	ldd	r20, Y+23	; 0x17
    d4e0:	58 8d       	ldd	r21, Y+24	; 0x18
    d4e2:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    d4e6:	7b 01       	movw	r14, r22
    d4e8:	8c 01       	movw	r16, r24
    d4ea:	69 85       	ldd	r22, Y+9	; 0x09
    d4ec:	7a 85       	ldd	r23, Y+10	; 0x0a
    d4ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    d4f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    d4f2:	29 89       	ldd	r18, Y+17	; 0x11
    d4f4:	3a 89       	ldd	r19, Y+18	; 0x12
    d4f6:	4b 89       	ldd	r20, Y+19	; 0x13
    d4f8:	5c 89       	ldd	r21, Y+20	; 0x14
    d4fa:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    d4fe:	69 83       	std	Y+1, r22	; 0x01
    d500:	7a 83       	std	Y+2, r23	; 0x02
    d502:	8b 83       	std	Y+3, r24	; 0x03
    d504:	9c 83       	std	Y+4, r25	; 0x04
    d506:	c7 01       	movw	r24, r14
    d508:	d8 01       	movw	r26, r16
    d50a:	8d 83       	std	Y+5, r24	; 0x05
    d50c:	9e 83       	std	Y+6, r25	; 0x06
    d50e:	af 83       	std	Y+7, r26	; 0x07
    d510:	b8 87       	std	Y+8, r27	; 0x08
    d512:	29 81       	ldd	r18, Y+1	; 0x01
    d514:	3a 81       	ldd	r19, Y+2	; 0x02
    d516:	4b 81       	ldd	r20, Y+3	; 0x03
    d518:	5c 81       	ldd	r21, Y+4	; 0x04
    d51a:	6d 81       	ldd	r22, Y+5	; 0x05
    d51c:	7e 81       	ldd	r23, Y+6	; 0x06
}
    d51e:	8f 81       	ldd	r24, Y+7	; 0x07
    d520:	98 85       	ldd	r25, Y+8	; 0x08
    d522:	68 96       	adiw	r28, 0x18	; 24
    d524:	0f b6       	in	r0, 0x3f	; 63
    d526:	f8 94       	cli
    d528:	de bf       	out	0x3e, r29	; 62
    d52a:	0f be       	out	0x3f, r0	; 63
    d52c:	cd bf       	out	0x3d, r28	; 61
    d52e:	cf 91       	pop	r28
    d530:	df 91       	pop	r29
    d532:	1f 91       	pop	r17
    d534:	0f 91       	pop	r16
    d536:	ff 90       	pop	r15
    d538:	ef 90       	pop	r14
    d53a:	df 90       	pop	r13
    d53c:	cf 90       	pop	r12
    d53e:	bf 90       	pop	r11
    d540:	af 90       	pop	r10
    d542:	08 95       	ret

0000d544 <_Z8producto7COORD3Df>:

COORD3D producto (COORD3D vector, float numero) {
    d544:	2f 92       	push	r2
    d546:	3f 92       	push	r3
    d548:	4f 92       	push	r4
    d54a:	5f 92       	push	r5
    d54c:	6f 92       	push	r6
    d54e:	7f 92       	push	r7
    d550:	8f 92       	push	r8
    d552:	9f 92       	push	r9
    d554:	af 92       	push	r10
    d556:	bf 92       	push	r11
    d558:	cf 92       	push	r12
    d55a:	df 92       	push	r13
    d55c:	ef 92       	push	r14
    d55e:	ff 92       	push	r15
    d560:	0f 93       	push	r16
    d562:	1f 93       	push	r17
    d564:	df 93       	push	r29
    d566:	cf 93       	push	r28
    d568:	cd b7       	in	r28, 0x3d	; 61
    d56a:	de b7       	in	r29, 0x3e	; 62
    d56c:	2c 97       	sbiw	r28, 0x0c	; 12
    d56e:	0f b6       	in	r0, 0x3f	; 63
    d570:	f8 94       	cli
    d572:	de bf       	out	0x3e, r29	; 62
    d574:	0f be       	out	0x3f, r0	; 63
    d576:	cd bf       	out	0x3d, r28	; 61
    d578:	1c 01       	movw	r2, r24
    d57a:	c9 82       	std	Y+1, r12	; 0x01
    d57c:	da 82       	std	Y+2, r13	; 0x02
    d57e:	eb 82       	std	Y+3, r14	; 0x03
    d580:	fc 82       	std	Y+4, r15	; 0x04
    d582:	0d 83       	std	Y+5, r16	; 0x05
    d584:	1e 83       	std	Y+6, r17	; 0x06
    d586:	2f 83       	std	Y+7, r18	; 0x07
    d588:	38 87       	std	Y+8, r19	; 0x08
    d58a:	49 87       	std	Y+9, r20	; 0x09
    d58c:	5a 87       	std	Y+10, r21	; 0x0a
    d58e:	6b 87       	std	Y+11, r22	; 0x0b
    d590:	7c 87       	std	Y+12, r23	; 0x0c
  return (COORD3D) {numero*vector.x, numero*vector.y, numero*vector.z}; 
    d592:	c5 01       	movw	r24, r10
    d594:	b4 01       	movw	r22, r8
    d596:	2d 81       	ldd	r18, Y+5	; 0x05
    d598:	3e 81       	ldd	r19, Y+6	; 0x06
    d59a:	4f 81       	ldd	r20, Y+7	; 0x07
    d59c:	58 85       	ldd	r21, Y+8	; 0x08
    d59e:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    d5a2:	7b 01       	movw	r14, r22
    d5a4:	8c 01       	movw	r16, r24
    d5a6:	c5 01       	movw	r24, r10
    d5a8:	b4 01       	movw	r22, r8
    d5aa:	29 85       	ldd	r18, Y+9	; 0x09
    d5ac:	3a 85       	ldd	r19, Y+10	; 0x0a
    d5ae:	4b 85       	ldd	r20, Y+11	; 0x0b
    d5b0:	5c 85       	ldd	r21, Y+12	; 0x0c
    d5b2:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    d5b6:	2b 01       	movw	r4, r22
    d5b8:	3c 01       	movw	r6, r24
    d5ba:	c5 01       	movw	r24, r10
    d5bc:	b4 01       	movw	r22, r8
    d5be:	29 81       	ldd	r18, Y+1	; 0x01
    d5c0:	3a 81       	ldd	r19, Y+2	; 0x02
    d5c2:	4b 81       	ldd	r20, Y+3	; 0x03
    d5c4:	5c 81       	ldd	r21, Y+4	; 0x04
    d5c6:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    d5ca:	f1 01       	movw	r30, r2
    d5cc:	60 83       	st	Z, r22
    d5ce:	71 83       	std	Z+1, r23	; 0x01
    d5d0:	82 83       	std	Z+2, r24	; 0x02
    d5d2:	93 83       	std	Z+3, r25	; 0x03
    d5d4:	c7 01       	movw	r24, r14
    d5d6:	d8 01       	movw	r26, r16
    d5d8:	84 83       	std	Z+4, r24	; 0x04
    d5da:	95 83       	std	Z+5, r25	; 0x05
    d5dc:	a6 83       	std	Z+6, r26	; 0x06
    d5de:	b7 83       	std	Z+7, r27	; 0x07
    d5e0:	c2 01       	movw	r24, r4
    d5e2:	d3 01       	movw	r26, r6
    d5e4:	80 87       	std	Z+8, r24	; 0x08
    d5e6:	91 87       	std	Z+9, r25	; 0x09
    d5e8:	a2 87       	std	Z+10, r26	; 0x0a
    d5ea:	b3 87       	std	Z+11, r27	; 0x0b
}
    d5ec:	c1 01       	movw	r24, r2
    d5ee:	2c 96       	adiw	r28, 0x0c	; 12
    d5f0:	0f b6       	in	r0, 0x3f	; 63
    d5f2:	f8 94       	cli
    d5f4:	de bf       	out	0x3e, r29	; 62
    d5f6:	0f be       	out	0x3f, r0	; 63
    d5f8:	cd bf       	out	0x3d, r28	; 61
    d5fa:	cf 91       	pop	r28
    d5fc:	df 91       	pop	r29
    d5fe:	1f 91       	pop	r17
    d600:	0f 91       	pop	r16
    d602:	ff 90       	pop	r15
    d604:	ef 90       	pop	r14
    d606:	df 90       	pop	r13
    d608:	cf 90       	pop	r12
    d60a:	bf 90       	pop	r11
    d60c:	af 90       	pop	r10
    d60e:	9f 90       	pop	r9
    d610:	8f 90       	pop	r8
    d612:	7f 90       	pop	r7
    d614:	6f 90       	pop	r6
    d616:	5f 90       	pop	r5
    d618:	4f 90       	pop	r4
    d61a:	3f 90       	pop	r3
    d61c:	2f 90       	pop	r2
    d61e:	08 95       	ret

0000d620 <_Z8producto7COORD2Df>:

COORD2D producto (COORD2D vector, float numero) {
    d620:	af 92       	push	r10
    d622:	bf 92       	push	r11
    d624:	cf 92       	push	r12
    d626:	df 92       	push	r13
    d628:	ef 92       	push	r14
    d62a:	ff 92       	push	r15
    d62c:	0f 93       	push	r16
    d62e:	1f 93       	push	r17
    d630:	df 93       	push	r29
    d632:	cf 93       	push	r28
    d634:	cd b7       	in	r28, 0x3d	; 61
    d636:	de b7       	in	r29, 0x3e	; 62
    d638:	60 97       	sbiw	r28, 0x10	; 16
    d63a:	0f b6       	in	r0, 0x3f	; 63
    d63c:	f8 94       	cli
    d63e:	de bf       	out	0x3e, r29	; 62
    d640:	0f be       	out	0x3f, r0	; 63
    d642:	cd bf       	out	0x3d, r28	; 61
    d644:	29 87       	std	Y+9, r18	; 0x09
    d646:	3a 87       	std	Y+10, r19	; 0x0a
    d648:	4b 87       	std	Y+11, r20	; 0x0b
    d64a:	5c 87       	std	Y+12, r21	; 0x0c
    d64c:	6d 87       	std	Y+13, r22	; 0x0d
    d64e:	7e 87       	std	Y+14, r23	; 0x0e
    d650:	8f 87       	std	Y+15, r24	; 0x0f
    d652:	98 8b       	std	Y+16, r25	; 0x10
  return (COORD2D) {numero*vector.x, numero*vector.z}; 
    d654:	c8 01       	movw	r24, r16
    d656:	b7 01       	movw	r22, r14
    d658:	2d 85       	ldd	r18, Y+13	; 0x0d
    d65a:	3e 85       	ldd	r19, Y+14	; 0x0e
    d65c:	4f 85       	ldd	r20, Y+15	; 0x0f
    d65e:	58 89       	ldd	r21, Y+16	; 0x10
    d660:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    d664:	5b 01       	movw	r10, r22
    d666:	6c 01       	movw	r12, r24
    d668:	c8 01       	movw	r24, r16
    d66a:	b7 01       	movw	r22, r14
    d66c:	29 85       	ldd	r18, Y+9	; 0x09
    d66e:	3a 85       	ldd	r19, Y+10	; 0x0a
    d670:	4b 85       	ldd	r20, Y+11	; 0x0b
    d672:	5c 85       	ldd	r21, Y+12	; 0x0c
    d674:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    d678:	69 83       	std	Y+1, r22	; 0x01
    d67a:	7a 83       	std	Y+2, r23	; 0x02
    d67c:	8b 83       	std	Y+3, r24	; 0x03
    d67e:	9c 83       	std	Y+4, r25	; 0x04
    d680:	c5 01       	movw	r24, r10
    d682:	d6 01       	movw	r26, r12
    d684:	8d 83       	std	Y+5, r24	; 0x05
    d686:	9e 83       	std	Y+6, r25	; 0x06
    d688:	af 83       	std	Y+7, r26	; 0x07
    d68a:	b8 87       	std	Y+8, r27	; 0x08
    d68c:	29 81       	ldd	r18, Y+1	; 0x01
    d68e:	3a 81       	ldd	r19, Y+2	; 0x02
    d690:	4b 81       	ldd	r20, Y+3	; 0x03
    d692:	5c 81       	ldd	r21, Y+4	; 0x04
    d694:	6d 81       	ldd	r22, Y+5	; 0x05
    d696:	7e 81       	ldd	r23, Y+6	; 0x06
}
    d698:	8f 81       	ldd	r24, Y+7	; 0x07
    d69a:	98 85       	ldd	r25, Y+8	; 0x08
    d69c:	60 96       	adiw	r28, 0x10	; 16
    d69e:	0f b6       	in	r0, 0x3f	; 63
    d6a0:	f8 94       	cli
    d6a2:	de bf       	out	0x3e, r29	; 62
    d6a4:	0f be       	out	0x3f, r0	; 63
    d6a6:	cd bf       	out	0x3d, r28	; 61
    d6a8:	cf 91       	pop	r28
    d6aa:	df 91       	pop	r29
    d6ac:	1f 91       	pop	r17
    d6ae:	0f 91       	pop	r16
    d6b0:	ff 90       	pop	r15
    d6b2:	ef 90       	pop	r14
    d6b4:	df 90       	pop	r13
    d6b6:	cf 90       	pop	r12
    d6b8:	bf 90       	pop	r11
    d6ba:	af 90       	pop	r10
    d6bc:	08 95       	ret

0000d6be <_Z6xz2xyz7COORD2D>:

COORD3D xz2xyz (COORD2D vector) {
    d6be:	0f 93       	push	r16
    d6c0:	1f 93       	push	r17
    d6c2:	df 93       	push	r29
    d6c4:	cf 93       	push	r28
    d6c6:	cd b7       	in	r28, 0x3d	; 61
    d6c8:	de b7       	in	r29, 0x3e	; 62
    d6ca:	28 97       	sbiw	r28, 0x08	; 8
    d6cc:	0f b6       	in	r0, 0x3f	; 63
    d6ce:	f8 94       	cli
    d6d0:	de bf       	out	0x3e, r29	; 62
    d6d2:	0f be       	out	0x3f, r0	; 63
    d6d4:	cd bf       	out	0x3d, r28	; 61
    d6d6:	fc 01       	movw	r30, r24
    d6d8:	09 83       	std	Y+1, r16	; 0x01
    d6da:	1a 83       	std	Y+2, r17	; 0x02
    d6dc:	2b 83       	std	Y+3, r18	; 0x03
    d6de:	3c 83       	std	Y+4, r19	; 0x04
    d6e0:	4d 83       	std	Y+5, r20	; 0x05
    d6e2:	5e 83       	std	Y+6, r21	; 0x06
    d6e4:	6f 83       	std	Y+7, r22	; 0x07
    d6e6:	78 87       	std	Y+8, r23	; 0x08
    d6e8:	2d 81       	ldd	r18, Y+5	; 0x05
    d6ea:	3e 81       	ldd	r19, Y+6	; 0x06
    d6ec:	4f 81       	ldd	r20, Y+7	; 0x07
    d6ee:	58 85       	ldd	r21, Y+8	; 0x08
  return (COORD3D) {vector.x, 0, vector.z}; 
    d6f0:	89 81       	ldd	r24, Y+1	; 0x01
    d6f2:	9a 81       	ldd	r25, Y+2	; 0x02
    d6f4:	ab 81       	ldd	r26, Y+3	; 0x03
    d6f6:	bc 81       	ldd	r27, Y+4	; 0x04
    d6f8:	80 83       	st	Z, r24
    d6fa:	91 83       	std	Z+1, r25	; 0x01
    d6fc:	a2 83       	std	Z+2, r26	; 0x02
    d6fe:	b3 83       	std	Z+3, r27	; 0x03
    d700:	80 e0       	ldi	r24, 0x00	; 0
    d702:	90 e0       	ldi	r25, 0x00	; 0
    d704:	a0 e0       	ldi	r26, 0x00	; 0
    d706:	b0 e0       	ldi	r27, 0x00	; 0
    d708:	84 83       	std	Z+4, r24	; 0x04
    d70a:	95 83       	std	Z+5, r25	; 0x05
    d70c:	a6 83       	std	Z+6, r26	; 0x06
    d70e:	b7 83       	std	Z+7, r27	; 0x07
    d710:	20 87       	std	Z+8, r18	; 0x08
    d712:	31 87       	std	Z+9, r19	; 0x09
    d714:	42 87       	std	Z+10, r20	; 0x0a
    d716:	53 87       	std	Z+11, r21	; 0x0b
}
    d718:	cf 01       	movw	r24, r30
    d71a:	28 96       	adiw	r28, 0x08	; 8
    d71c:	0f b6       	in	r0, 0x3f	; 63
    d71e:	f8 94       	cli
    d720:	de bf       	out	0x3e, r29	; 62
    d722:	0f be       	out	0x3f, r0	; 63
    d724:	cd bf       	out	0x3d, r28	; 61
    d726:	cf 91       	pop	r28
    d728:	df 91       	pop	r29
    d72a:	1f 91       	pop	r17
    d72c:	0f 91       	pop	r16
    d72e:	08 95       	ret

0000d730 <_Z6xyz2xz7COORD3D>:

COORD2D xyz2xz (COORD3D vector) {
    d730:	ef 92       	push	r14
    d732:	ff 92       	push	r15
    d734:	0f 93       	push	r16
    d736:	1f 93       	push	r17
    d738:	df 93       	push	r29
    d73a:	cf 93       	push	r28
    d73c:	cd b7       	in	r28, 0x3d	; 61
    d73e:	de b7       	in	r29, 0x3e	; 62
    d740:	64 97       	sbiw	r28, 0x14	; 20
    d742:	0f b6       	in	r0, 0x3f	; 63
    d744:	f8 94       	cli
    d746:	de bf       	out	0x3e, r29	; 62
    d748:	0f be       	out	0x3f, r0	; 63
    d74a:	cd bf       	out	0x3d, r28	; 61
    d74c:	e9 86       	std	Y+9, r14	; 0x09
    d74e:	fa 86       	std	Y+10, r15	; 0x0a
    d750:	0b 87       	std	Y+11, r16	; 0x0b
    d752:	1c 87       	std	Y+12, r17	; 0x0c
    d754:	69 8b       	std	Y+17, r22	; 0x11
    d756:	7a 8b       	std	Y+18, r23	; 0x12
    d758:	8b 8b       	std	Y+19, r24	; 0x13
    d75a:	9c 8b       	std	Y+20, r25	; 0x14
    d75c:	29 89       	ldd	r18, Y+17	; 0x11
    d75e:	3a 89       	ldd	r19, Y+18	; 0x12
    d760:	4b 89       	ldd	r20, Y+19	; 0x13
    d762:	5c 89       	ldd	r21, Y+20	; 0x14
  return (COORD2D) {vector.x, vector.z}; 
    d764:	89 85       	ldd	r24, Y+9	; 0x09
    d766:	9a 85       	ldd	r25, Y+10	; 0x0a
    d768:	ab 85       	ldd	r26, Y+11	; 0x0b
    d76a:	bc 85       	ldd	r27, Y+12	; 0x0c
    d76c:	89 83       	std	Y+1, r24	; 0x01
    d76e:	9a 83       	std	Y+2, r25	; 0x02
    d770:	ab 83       	std	Y+3, r26	; 0x03
    d772:	bc 83       	std	Y+4, r27	; 0x04
    d774:	2d 83       	std	Y+5, r18	; 0x05
    d776:	3e 83       	std	Y+6, r19	; 0x06
    d778:	4f 83       	std	Y+7, r20	; 0x07
    d77a:	58 87       	std	Y+8, r21	; 0x08
    d77c:	29 81       	ldd	r18, Y+1	; 0x01
    d77e:	3a 81       	ldd	r19, Y+2	; 0x02
    d780:	4b 81       	ldd	r20, Y+3	; 0x03
    d782:	5c 81       	ldd	r21, Y+4	; 0x04
    d784:	6d 81       	ldd	r22, Y+5	; 0x05
    d786:	7e 81       	ldd	r23, Y+6	; 0x06
}
    d788:	8f 81       	ldd	r24, Y+7	; 0x07
    d78a:	98 85       	ldd	r25, Y+8	; 0x08
    d78c:	64 96       	adiw	r28, 0x14	; 20
    d78e:	0f b6       	in	r0, 0x3f	; 63
    d790:	f8 94       	cli
    d792:	de bf       	out	0x3e, r29	; 62
    d794:	0f be       	out	0x3f, r0	; 63
    d796:	cd bf       	out	0x3d, r28	; 61
    d798:	cf 91       	pop	r28
    d79a:	df 91       	pop	r29
    d79c:	1f 91       	pop	r17
    d79e:	0f 91       	pop	r16
    d7a0:	ff 90       	pop	r15
    d7a2:	ef 90       	pop	r14
    d7a4:	08 95       	ret

0000d7a6 <_Z11applyMatrix7COORD3DPS_>:

float sumaproducto (COORD3D vector1, COORD3D vector2) {
	return vector1.x*vector2.x + vector1.y*vector2.y + vector1.z*vector2.z;
}

COORD3D applyMatrix (COORD3D P, COORD3D * matrix) {
    d7a6:	2f 92       	push	r2
    d7a8:	3f 92       	push	r3
    d7aa:	4f 92       	push	r4
    d7ac:	5f 92       	push	r5
    d7ae:	6f 92       	push	r6
    d7b0:	7f 92       	push	r7
    d7b2:	8f 92       	push	r8
    d7b4:	9f 92       	push	r9
    d7b6:	af 92       	push	r10
    d7b8:	bf 92       	push	r11
    d7ba:	cf 92       	push	r12
    d7bc:	df 92       	push	r13
    d7be:	ef 92       	push	r14
    d7c0:	ff 92       	push	r15
    d7c2:	0f 93       	push	r16
    d7c4:	1f 93       	push	r17
    d7c6:	df 93       	push	r29
    d7c8:	cf 93       	push	r28
    d7ca:	cd b7       	in	r28, 0x3d	; 61
    d7cc:	de b7       	in	r29, 0x3e	; 62
    d7ce:	68 97       	sbiw	r28, 0x18	; 24
    d7d0:	0f b6       	in	r0, 0x3f	; 63
    d7d2:	f8 94       	cli
    d7d4:	de bf       	out	0x3e, r29	; 62
    d7d6:	0f be       	out	0x3f, r0	; 63
    d7d8:	cd bf       	out	0x3d, r28	; 61
    d7da:	1c 01       	movw	r2, r24
    d7dc:	c9 82       	std	Y+1, r12	; 0x01
    d7de:	da 82       	std	Y+2, r13	; 0x02
    d7e0:	eb 82       	std	Y+3, r14	; 0x03
    d7e2:	fc 82       	std	Y+4, r15	; 0x04
    d7e4:	0d 83       	std	Y+5, r16	; 0x05
    d7e6:	1e 83       	std	Y+6, r17	; 0x06
    d7e8:	2f 83       	std	Y+7, r18	; 0x07
    d7ea:	38 87       	std	Y+8, r19	; 0x08
    d7ec:	49 87       	std	Y+9, r20	; 0x09
    d7ee:	5a 87       	std	Y+10, r21	; 0x0a
    d7f0:	6b 87       	std	Y+11, r22	; 0x0b
    d7f2:	7c 87       	std	Y+12, r23	; 0x0c
    d7f4:	25 01       	movw	r4, r10
    d7f6:	89 81       	ldd	r24, Y+1	; 0x01
    d7f8:	9a 81       	ldd	r25, Y+2	; 0x02
    d7fa:	ab 81       	ldd	r26, Y+3	; 0x03
    d7fc:	bc 81       	ldd	r27, Y+4	; 0x04
    d7fe:	8d 8b       	std	Y+21, r24	; 0x15
    d800:	9e 8b       	std	Y+22, r25	; 0x16
    d802:	af 8b       	std	Y+23, r26	; 0x17
    d804:	b8 8f       	std	Y+24, r27	; 0x18
    d806:	8d 81       	ldd	r24, Y+5	; 0x05
    d808:	9e 81       	ldd	r25, Y+6	; 0x06
    d80a:	af 81       	ldd	r26, Y+7	; 0x07
    d80c:	b8 85       	ldd	r27, Y+8	; 0x08
    d80e:	89 8b       	std	Y+17, r24	; 0x11
    d810:	9a 8b       	std	Y+18, r25	; 0x12
    d812:	ab 8b       	std	Y+19, r26	; 0x13
    d814:	bc 8b       	std	Y+20, r27	; 0x14
    d816:	89 85       	ldd	r24, Y+9	; 0x09
    d818:	9a 85       	ldd	r25, Y+10	; 0x0a
    d81a:	ab 85       	ldd	r26, Y+11	; 0x0b
    d81c:	bc 85       	ldd	r27, Y+12	; 0x0c
    d81e:	8d 87       	std	Y+13, r24	; 0x0d
    d820:	9e 87       	std	Y+14, r25	; 0x0e
    d822:	af 87       	std	Y+15, r26	; 0x0f
    d824:	b8 8b       	std	Y+16, r27	; 0x10
  float x = P.x*matrix[0].x + P.y*matrix[1].x + P.z*matrix[2].x;    
    d826:	9c e0       	ldi	r25, 0x0C	; 12
    d828:	c9 2e       	mov	r12, r25
    d82a:	d1 2c       	mov	r13, r1
    d82c:	ca 0c       	add	r12, r10
    d82e:	db 1c       	adc	r13, r11
    d830:	88 e1       	ldi	r24, 0x18	; 24
    d832:	a8 2e       	mov	r10, r24
    d834:	b1 2c       	mov	r11, r1
    d836:	a4 0c       	add	r10, r4
    d838:	b5 1c       	adc	r11, r5
  float y = P.x*matrix[0].y + P.y*matrix[1].y + P.z*matrix[2].y;  
    d83a:	6d 89       	ldd	r22, Y+21	; 0x15
    d83c:	7e 89       	ldd	r23, Y+22	; 0x16
    d83e:	8f 89       	ldd	r24, Y+23	; 0x17
    d840:	98 8d       	ldd	r25, Y+24	; 0x18
    d842:	d2 01       	movw	r26, r4
    d844:	14 96       	adiw	r26, 0x04	; 4
    d846:	2d 91       	ld	r18, X+
    d848:	3d 91       	ld	r19, X+
    d84a:	4d 91       	ld	r20, X+
    d84c:	5c 91       	ld	r21, X
    d84e:	17 97       	sbiw	r26, 0x07	; 7
    d850:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    d854:	7b 01       	movw	r14, r22
    d856:	8c 01       	movw	r16, r24
    d858:	69 89       	ldd	r22, Y+17	; 0x11
    d85a:	7a 89       	ldd	r23, Y+18	; 0x12
    d85c:	8b 89       	ldd	r24, Y+19	; 0x13
    d85e:	9c 89       	ldd	r25, Y+20	; 0x14
    d860:	f6 01       	movw	r30, r12
    d862:	24 81       	ldd	r18, Z+4	; 0x04
    d864:	35 81       	ldd	r19, Z+5	; 0x05
    d866:	46 81       	ldd	r20, Z+6	; 0x06
    d868:	57 81       	ldd	r21, Z+7	; 0x07
    d86a:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    d86e:	9b 01       	movw	r18, r22
    d870:	ac 01       	movw	r20, r24
    d872:	c8 01       	movw	r24, r16
    d874:	b7 01       	movw	r22, r14
    d876:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    d87a:	7b 01       	movw	r14, r22
    d87c:	8c 01       	movw	r16, r24
    d87e:	6d 85       	ldd	r22, Y+13	; 0x0d
    d880:	7e 85       	ldd	r23, Y+14	; 0x0e
    d882:	8f 85       	ldd	r24, Y+15	; 0x0f
    d884:	98 89       	ldd	r25, Y+16	; 0x10
    d886:	d5 01       	movw	r26, r10
    d888:	14 96       	adiw	r26, 0x04	; 4
    d88a:	2d 91       	ld	r18, X+
    d88c:	3d 91       	ld	r19, X+
    d88e:	4d 91       	ld	r20, X+
    d890:	5c 91       	ld	r21, X
    d892:	17 97       	sbiw	r26, 0x07	; 7
    d894:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    d898:	9b 01       	movw	r18, r22
    d89a:	ac 01       	movw	r20, r24
    d89c:	c8 01       	movw	r24, r16
    d89e:	b7 01       	movw	r22, r14
    d8a0:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    d8a4:	3b 01       	movw	r6, r22
    d8a6:	4c 01       	movw	r8, r24
  float z = P.x*matrix[0].z + P.y*matrix[1].z + P.z*matrix[2].z;  
    d8a8:	6d 89       	ldd	r22, Y+21	; 0x15
    d8aa:	7e 89       	ldd	r23, Y+22	; 0x16
    d8ac:	8f 89       	ldd	r24, Y+23	; 0x17
    d8ae:	98 8d       	ldd	r25, Y+24	; 0x18
    d8b0:	f2 01       	movw	r30, r4
    d8b2:	20 85       	ldd	r18, Z+8	; 0x08
    d8b4:	31 85       	ldd	r19, Z+9	; 0x09
    d8b6:	42 85       	ldd	r20, Z+10	; 0x0a
    d8b8:	53 85       	ldd	r21, Z+11	; 0x0b
    d8ba:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    d8be:	7b 01       	movw	r14, r22
    d8c0:	8c 01       	movw	r16, r24
    d8c2:	69 89       	ldd	r22, Y+17	; 0x11
    d8c4:	7a 89       	ldd	r23, Y+18	; 0x12
    d8c6:	8b 89       	ldd	r24, Y+19	; 0x13
    d8c8:	9c 89       	ldd	r25, Y+20	; 0x14
    d8ca:	d6 01       	movw	r26, r12
    d8cc:	18 96       	adiw	r26, 0x08	; 8
    d8ce:	2d 91       	ld	r18, X+
    d8d0:	3d 91       	ld	r19, X+
    d8d2:	4d 91       	ld	r20, X+
    d8d4:	5c 91       	ld	r21, X
    d8d6:	1b 97       	sbiw	r26, 0x0b	; 11
    d8d8:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    d8dc:	9b 01       	movw	r18, r22
    d8de:	ac 01       	movw	r20, r24
    d8e0:	c8 01       	movw	r24, r16
    d8e2:	b7 01       	movw	r22, r14
    d8e4:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    d8e8:	7b 01       	movw	r14, r22
    d8ea:	8c 01       	movw	r16, r24
    d8ec:	6d 85       	ldd	r22, Y+13	; 0x0d
    d8ee:	7e 85       	ldd	r23, Y+14	; 0x0e
    d8f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    d8f2:	98 89       	ldd	r25, Y+16	; 0x10
    d8f4:	f5 01       	movw	r30, r10
    d8f6:	20 85       	ldd	r18, Z+8	; 0x08
    d8f8:	31 85       	ldd	r19, Z+9	; 0x09
    d8fa:	42 85       	ldd	r20, Z+10	; 0x0a
    d8fc:	53 85       	ldd	r21, Z+11	; 0x0b
    d8fe:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    d902:	9b 01       	movw	r18, r22
    d904:	ac 01       	movw	r20, r24
    d906:	c8 01       	movw	r24, r16
    d908:	b7 01       	movw	r22, r14
    d90a:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    d90e:	5b 01       	movw	r10, r22
    d910:	6c 01       	movw	r12, r24
  return (COORD3D) {x, y, z};
    d912:	6d 89       	ldd	r22, Y+21	; 0x15
    d914:	7e 89       	ldd	r23, Y+22	; 0x16
    d916:	8f 89       	ldd	r24, Y+23	; 0x17
    d918:	98 8d       	ldd	r25, Y+24	; 0x18
    d91a:	d2 01       	movw	r26, r4
    d91c:	2d 91       	ld	r18, X+
    d91e:	3d 91       	ld	r19, X+
    d920:	4d 91       	ld	r20, X+
    d922:	5c 91       	ld	r21, X
    d924:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    d928:	7b 01       	movw	r14, r22
    d92a:	8c 01       	movw	r16, r24
    d92c:	69 89       	ldd	r22, Y+17	; 0x11
    d92e:	7a 89       	ldd	r23, Y+18	; 0x12
    d930:	8b 89       	ldd	r24, Y+19	; 0x13
    d932:	9c 89       	ldd	r25, Y+20	; 0x14
    d934:	f2 01       	movw	r30, r4
    d936:	24 85       	ldd	r18, Z+12	; 0x0c
    d938:	35 85       	ldd	r19, Z+13	; 0x0d
    d93a:	46 85       	ldd	r20, Z+14	; 0x0e
    d93c:	57 85       	ldd	r21, Z+15	; 0x0f
    d93e:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    d942:	9b 01       	movw	r18, r22
    d944:	ac 01       	movw	r20, r24
    d946:	c8 01       	movw	r24, r16
    d948:	b7 01       	movw	r22, r14
    d94a:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    d94e:	7b 01       	movw	r14, r22
    d950:	8c 01       	movw	r16, r24
    d952:	6d 85       	ldd	r22, Y+13	; 0x0d
    d954:	7e 85       	ldd	r23, Y+14	; 0x0e
    d956:	8f 85       	ldd	r24, Y+15	; 0x0f
    d958:	98 89       	ldd	r25, Y+16	; 0x10
    d95a:	d2 01       	movw	r26, r4
    d95c:	58 96       	adiw	r26, 0x18	; 24
    d95e:	2d 91       	ld	r18, X+
    d960:	3d 91       	ld	r19, X+
    d962:	4d 91       	ld	r20, X+
    d964:	5c 91       	ld	r21, X
    d966:	5b 97       	sbiw	r26, 0x1b	; 27
    d968:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    d96c:	9b 01       	movw	r18, r22
    d96e:	ac 01       	movw	r20, r24
    d970:	c8 01       	movw	r24, r16
    d972:	b7 01       	movw	r22, r14
    d974:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    d978:	f1 01       	movw	r30, r2
    d97a:	60 83       	st	Z, r22
    d97c:	71 83       	std	Z+1, r23	; 0x01
    d97e:	82 83       	std	Z+2, r24	; 0x02
    d980:	93 83       	std	Z+3, r25	; 0x03
    d982:	c3 01       	movw	r24, r6
    d984:	d4 01       	movw	r26, r8
    d986:	84 83       	std	Z+4, r24	; 0x04
    d988:	95 83       	std	Z+5, r25	; 0x05
    d98a:	a6 83       	std	Z+6, r26	; 0x06
    d98c:	b7 83       	std	Z+7, r27	; 0x07
    d98e:	c5 01       	movw	r24, r10
    d990:	d6 01       	movw	r26, r12
    d992:	80 87       	std	Z+8, r24	; 0x08
    d994:	91 87       	std	Z+9, r25	; 0x09
    d996:	a2 87       	std	Z+10, r26	; 0x0a
    d998:	b3 87       	std	Z+11, r27	; 0x0b
}
    d99a:	c1 01       	movw	r24, r2
    d99c:	68 96       	adiw	r28, 0x18	; 24
    d99e:	0f b6       	in	r0, 0x3f	; 63
    d9a0:	f8 94       	cli
    d9a2:	de bf       	out	0x3e, r29	; 62
    d9a4:	0f be       	out	0x3f, r0	; 63
    d9a6:	cd bf       	out	0x3d, r28	; 61
    d9a8:	cf 91       	pop	r28
    d9aa:	df 91       	pop	r29
    d9ac:	1f 91       	pop	r17
    d9ae:	0f 91       	pop	r16
    d9b0:	ff 90       	pop	r15
    d9b2:	ef 90       	pop	r14
    d9b4:	df 90       	pop	r13
    d9b6:	cf 90       	pop	r12
    d9b8:	bf 90       	pop	r11
    d9ba:	af 90       	pop	r10
    d9bc:	9f 90       	pop	r9
    d9be:	8f 90       	pop	r8
    d9c0:	7f 90       	pop	r7
    d9c2:	6f 90       	pop	r6
    d9c4:	5f 90       	pop	r5
    d9c6:	4f 90       	pop	r4
    d9c8:	3f 90       	pop	r3
    d9ca:	2f 90       	pop	r2
    d9cc:	08 95       	ret

0000d9ce <_Z11applyMatrix7COORD2DPS_>:

COORD2D applyMatrix (COORD2D P, COORD2D * matrix) {
    d9ce:	4f 92       	push	r4
    d9d0:	5f 92       	push	r5
    d9d2:	6f 92       	push	r6
    d9d4:	7f 92       	push	r7
    d9d6:	8f 92       	push	r8
    d9d8:	9f 92       	push	r9
    d9da:	af 92       	push	r10
    d9dc:	bf 92       	push	r11
    d9de:	cf 92       	push	r12
    d9e0:	df 92       	push	r13
    d9e2:	ef 92       	push	r14
    d9e4:	ff 92       	push	r15
    d9e6:	0f 93       	push	r16
    d9e8:	1f 93       	push	r17
    d9ea:	df 93       	push	r29
    d9ec:	cf 93       	push	r28
    d9ee:	cd b7       	in	r28, 0x3d	; 61
    d9f0:	de b7       	in	r29, 0x3e	; 62
    d9f2:	60 97       	sbiw	r28, 0x10	; 16
    d9f4:	0f b6       	in	r0, 0x3f	; 63
    d9f6:	f8 94       	cli
    d9f8:	de bf       	out	0x3e, r29	; 62
    d9fa:	0f be       	out	0x3f, r0	; 63
    d9fc:	cd bf       	out	0x3d, r28	; 61
    d9fe:	29 87       	std	Y+9, r18	; 0x09
    da00:	3a 87       	std	Y+10, r19	; 0x0a
    da02:	4b 87       	std	Y+11, r20	; 0x0b
    da04:	5c 87       	std	Y+12, r21	; 0x0c
    da06:	6d 87       	std	Y+13, r22	; 0x0d
    da08:	7e 87       	std	Y+14, r23	; 0x0e
    da0a:	8f 87       	std	Y+15, r24	; 0x0f
    da0c:	98 8b       	std	Y+16, r25	; 0x10
    da0e:	89 84       	ldd	r8, Y+9	; 0x09
    da10:	9a 84       	ldd	r9, Y+10	; 0x0a
    da12:	ab 84       	ldd	r10, Y+11	; 0x0b
    da14:	bc 84       	ldd	r11, Y+12	; 0x0c
    da16:	4d 84       	ldd	r4, Y+13	; 0x0d
    da18:	5e 84       	ldd	r5, Y+14	; 0x0e
    da1a:	6f 84       	ldd	r6, Y+15	; 0x0f
    da1c:	78 88       	ldd	r7, Y+16	; 0x10
  float x = P.x*matrix[0].x + P.z*matrix[1].x;    
  float z = P.x*matrix[0].z + P.z*matrix[1].z;  
    da1e:	c5 01       	movw	r24, r10
    da20:	b4 01       	movw	r22, r8
    da22:	f8 01       	movw	r30, r16
    da24:	24 81       	ldd	r18, Z+4	; 0x04
    da26:	35 81       	ldd	r19, Z+5	; 0x05
    da28:	46 81       	ldd	r20, Z+6	; 0x06
    da2a:	57 81       	ldd	r21, Z+7	; 0x07
    da2c:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    da30:	6b 01       	movw	r12, r22
    da32:	7c 01       	movw	r14, r24
    da34:	c3 01       	movw	r24, r6
    da36:	b2 01       	movw	r22, r4
  float z = P.x*matrix[0].z + P.y*matrix[1].z + P.z*matrix[2].z;  
  return (COORD3D) {x, y, z};
}

COORD2D applyMatrix (COORD2D P, COORD2D * matrix) {
  float x = P.x*matrix[0].x + P.z*matrix[1].x;    
    da38:	08 5f       	subi	r16, 0xF8	; 248
    da3a:	1f 4f       	sbci	r17, 0xFF	; 255
  float z = P.x*matrix[0].z + P.z*matrix[1].z;  
    da3c:	f8 01       	movw	r30, r16
    da3e:	24 81       	ldd	r18, Z+4	; 0x04
    da40:	35 81       	ldd	r19, Z+5	; 0x05
    da42:	46 81       	ldd	r20, Z+6	; 0x06
    da44:	57 81       	ldd	r21, Z+7	; 0x07
    da46:	08 50       	subi	r16, 0x08	; 8
    da48:	10 40       	sbci	r17, 0x00	; 0
    da4a:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    da4e:	9b 01       	movw	r18, r22
    da50:	ac 01       	movw	r20, r24
    da52:	c7 01       	movw	r24, r14
    da54:	b6 01       	movw	r22, r12
    da56:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    da5a:	6b 01       	movw	r12, r22
    da5c:	7c 01       	movw	r14, r24
  return (COORD2D) {x, z};
    da5e:	c5 01       	movw	r24, r10
    da60:	b4 01       	movw	r22, r8
    da62:	f8 01       	movw	r30, r16
    da64:	20 81       	ld	r18, Z
    da66:	31 81       	ldd	r19, Z+1	; 0x01
    da68:	42 81       	ldd	r20, Z+2	; 0x02
    da6a:	53 81       	ldd	r21, Z+3	; 0x03
    da6c:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    da70:	4b 01       	movw	r8, r22
    da72:	5c 01       	movw	r10, r24
    da74:	c3 01       	movw	r24, r6
    da76:	b2 01       	movw	r22, r4
    da78:	f8 01       	movw	r30, r16
    da7a:	20 85       	ldd	r18, Z+8	; 0x08
    da7c:	31 85       	ldd	r19, Z+9	; 0x09
    da7e:	42 85       	ldd	r20, Z+10	; 0x0a
    da80:	53 85       	ldd	r21, Z+11	; 0x0b
    da82:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    da86:	9b 01       	movw	r18, r22
    da88:	ac 01       	movw	r20, r24
    da8a:	c5 01       	movw	r24, r10
    da8c:	b4 01       	movw	r22, r8
    da8e:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    da92:	69 83       	std	Y+1, r22	; 0x01
    da94:	7a 83       	std	Y+2, r23	; 0x02
    da96:	8b 83       	std	Y+3, r24	; 0x03
    da98:	9c 83       	std	Y+4, r25	; 0x04
    da9a:	c6 01       	movw	r24, r12
    da9c:	d7 01       	movw	r26, r14
    da9e:	8d 83       	std	Y+5, r24	; 0x05
    daa0:	9e 83       	std	Y+6, r25	; 0x06
    daa2:	af 83       	std	Y+7, r26	; 0x07
    daa4:	b8 87       	std	Y+8, r27	; 0x08
    daa6:	29 81       	ldd	r18, Y+1	; 0x01
    daa8:	3a 81       	ldd	r19, Y+2	; 0x02
    daaa:	4b 81       	ldd	r20, Y+3	; 0x03
    daac:	5c 81       	ldd	r21, Y+4	; 0x04
    daae:	6d 81       	ldd	r22, Y+5	; 0x05
    dab0:	7e 81       	ldd	r23, Y+6	; 0x06
}
    dab2:	8f 81       	ldd	r24, Y+7	; 0x07
    dab4:	98 85       	ldd	r25, Y+8	; 0x08
    dab6:	60 96       	adiw	r28, 0x10	; 16
    dab8:	0f b6       	in	r0, 0x3f	; 63
    daba:	f8 94       	cli
    dabc:	de bf       	out	0x3e, r29	; 62
    dabe:	0f be       	out	0x3f, r0	; 63
    dac0:	cd bf       	out	0x3d, r28	; 61
    dac2:	cf 91       	pop	r28
    dac4:	df 91       	pop	r29
    dac6:	1f 91       	pop	r17
    dac8:	0f 91       	pop	r16
    daca:	ff 90       	pop	r15
    dacc:	ef 90       	pop	r14
    dace:	df 90       	pop	r13
    dad0:	cf 90       	pop	r12
    dad2:	bf 90       	pop	r11
    dad4:	af 90       	pop	r10
    dad6:	9f 90       	pop	r9
    dad8:	8f 90       	pop	r8
    dada:	7f 90       	pop	r7
    dadc:	6f 90       	pop	r6
    dade:	5f 90       	pop	r5
    dae0:	4f 90       	pop	r4
    dae2:	08 95       	ret

0000dae4 <_Z9sumasignaP7COORD3DS_>:
	producto.y = vector1.z*vector2.x - vector1.x*vector2.z;
	producto.z = vector1.x*vector2.y - vector1.y*vector2.x;
	return producto;
}

void sumasigna (COORD3D *punto, COORD3D vector) {
    dae4:	6f 92       	push	r6
    dae6:	7f 92       	push	r7
    dae8:	8f 92       	push	r8
    daea:	9f 92       	push	r9
    daec:	af 92       	push	r10
    daee:	bf 92       	push	r11
    daf0:	cf 92       	push	r12
    daf2:	df 92       	push	r13
    daf4:	ef 92       	push	r14
    daf6:	ff 92       	push	r15
    daf8:	0f 93       	push	r16
    dafa:	1f 93       	push	r17
    dafc:	df 93       	push	r29
    dafe:	cf 93       	push	r28
    db00:	cd b7       	in	r28, 0x3d	; 61
    db02:	de b7       	in	r29, 0x3e	; 62
    db04:	2c 97       	sbiw	r28, 0x0c	; 12
    db06:	0f b6       	in	r0, 0x3f	; 63
    db08:	f8 94       	cli
    db0a:	de bf       	out	0x3e, r29	; 62
    db0c:	0f be       	out	0x3f, r0	; 63
    db0e:	cd bf       	out	0x3d, r28	; 61
    db10:	5c 01       	movw	r10, r24
    db12:	c9 82       	std	Y+1, r12	; 0x01
    db14:	da 82       	std	Y+2, r13	; 0x02
    db16:	eb 82       	std	Y+3, r14	; 0x03
    db18:	fc 82       	std	Y+4, r15	; 0x04
    db1a:	0d 83       	std	Y+5, r16	; 0x05
    db1c:	1e 83       	std	Y+6, r17	; 0x06
    db1e:	2f 83       	std	Y+7, r18	; 0x07
    db20:	38 87       	std	Y+8, r19	; 0x08
    db22:	49 87       	std	Y+9, r20	; 0x09
    db24:	5a 87       	std	Y+10, r21	; 0x0a
    db26:	6b 87       	std	Y+11, r22	; 0x0b
    db28:	7c 87       	std	Y+12, r23	; 0x0c
    db2a:	ed 80       	ldd	r14, Y+5	; 0x05
    db2c:	fe 80       	ldd	r15, Y+6	; 0x06
    db2e:	0f 81       	ldd	r16, Y+7	; 0x07
    db30:	18 85       	ldd	r17, Y+8	; 0x08
    db32:	69 84       	ldd	r6, Y+9	; 0x09
    db34:	7a 84       	ldd	r7, Y+10	; 0x0a
    db36:	8b 84       	ldd	r8, Y+11	; 0x0b
    db38:	9c 84       	ldd	r9, Y+12	; 0x0c
  (*punto).x += vector.x;
    db3a:	fc 01       	movw	r30, r24
    db3c:	60 81       	ld	r22, Z
    db3e:	71 81       	ldd	r23, Z+1	; 0x01
    db40:	82 81       	ldd	r24, Z+2	; 0x02
    db42:	93 81       	ldd	r25, Z+3	; 0x03
    db44:	29 81       	ldd	r18, Y+1	; 0x01
    db46:	3a 81       	ldd	r19, Y+2	; 0x02
    db48:	4b 81       	ldd	r20, Y+3	; 0x03
    db4a:	5c 81       	ldd	r21, Y+4	; 0x04
    db4c:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    db50:	f5 01       	movw	r30, r10
    db52:	60 83       	st	Z, r22
    db54:	71 83       	std	Z+1, r23	; 0x01
    db56:	82 83       	std	Z+2, r24	; 0x02
    db58:	93 83       	std	Z+3, r25	; 0x03
  (*punto).y += vector.y;
    db5a:	64 81       	ldd	r22, Z+4	; 0x04
    db5c:	75 81       	ldd	r23, Z+5	; 0x05
    db5e:	86 81       	ldd	r24, Z+6	; 0x06
    db60:	97 81       	ldd	r25, Z+7	; 0x07
    db62:	a8 01       	movw	r20, r16
    db64:	97 01       	movw	r18, r14
    db66:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    db6a:	f5 01       	movw	r30, r10
    db6c:	64 83       	std	Z+4, r22	; 0x04
    db6e:	75 83       	std	Z+5, r23	; 0x05
    db70:	86 83       	std	Z+6, r24	; 0x06
    db72:	97 83       	std	Z+7, r25	; 0x07
  (*punto).z += vector.z; 
    db74:	60 85       	ldd	r22, Z+8	; 0x08
    db76:	71 85       	ldd	r23, Z+9	; 0x09
    db78:	82 85       	ldd	r24, Z+10	; 0x0a
    db7a:	93 85       	ldd	r25, Z+11	; 0x0b
    db7c:	a4 01       	movw	r20, r8
    db7e:	93 01       	movw	r18, r6
    db80:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    db84:	f5 01       	movw	r30, r10
    db86:	60 87       	std	Z+8, r22	; 0x08
    db88:	71 87       	std	Z+9, r23	; 0x09
    db8a:	82 87       	std	Z+10, r24	; 0x0a
    db8c:	93 87       	std	Z+11, r25	; 0x0b
}
    db8e:	2c 96       	adiw	r28, 0x0c	; 12
    db90:	0f b6       	in	r0, 0x3f	; 63
    db92:	f8 94       	cli
    db94:	de bf       	out	0x3e, r29	; 62
    db96:	0f be       	out	0x3f, r0	; 63
    db98:	cd bf       	out	0x3d, r28	; 61
    db9a:	cf 91       	pop	r28
    db9c:	df 91       	pop	r29
    db9e:	1f 91       	pop	r17
    dba0:	0f 91       	pop	r16
    dba2:	ff 90       	pop	r15
    dba4:	ef 90       	pop	r14
    dba6:	df 90       	pop	r13
    dba8:	cf 90       	pop	r12
    dbaa:	bf 90       	pop	r11
    dbac:	af 90       	pop	r10
    dbae:	9f 90       	pop	r9
    dbb0:	8f 90       	pop	r8
    dbb2:	7f 90       	pop	r7
    dbb4:	6f 90       	pop	r6
    dbb6:	08 95       	ret

0000dbb8 <_Z9sumasignaP7COORD2DS_>:

void sumasigna (COORD2D *punto, COORD2D vector) {
    dbb8:	cf 92       	push	r12
    dbba:	df 92       	push	r13
    dbbc:	ef 92       	push	r14
    dbbe:	ff 92       	push	r15
    dbc0:	0f 93       	push	r16
    dbc2:	1f 93       	push	r17
    dbc4:	df 93       	push	r29
    dbc6:	cf 93       	push	r28
    dbc8:	cd b7       	in	r28, 0x3d	; 61
    dbca:	de b7       	in	r29, 0x3e	; 62
    dbcc:	28 97       	sbiw	r28, 0x08	; 8
    dbce:	0f b6       	in	r0, 0x3f	; 63
    dbd0:	f8 94       	cli
    dbd2:	de bf       	out	0x3e, r29	; 62
    dbd4:	0f be       	out	0x3f, r0	; 63
    dbd6:	cd bf       	out	0x3d, r28	; 61
    dbd8:	6c 01       	movw	r12, r24
    dbda:	09 83       	std	Y+1, r16	; 0x01
    dbdc:	1a 83       	std	Y+2, r17	; 0x02
    dbde:	2b 83       	std	Y+3, r18	; 0x03
    dbe0:	3c 83       	std	Y+4, r19	; 0x04
    dbe2:	4d 83       	std	Y+5, r20	; 0x05
    dbe4:	5e 83       	std	Y+6, r21	; 0x06
    dbe6:	6f 83       	std	Y+7, r22	; 0x07
    dbe8:	78 87       	std	Y+8, r23	; 0x08
    dbea:	ed 80       	ldd	r14, Y+5	; 0x05
    dbec:	fe 80       	ldd	r15, Y+6	; 0x06
    dbee:	0f 81       	ldd	r16, Y+7	; 0x07
    dbf0:	18 85       	ldd	r17, Y+8	; 0x08
  (*punto).x += vector.x;
    dbf2:	fc 01       	movw	r30, r24
    dbf4:	60 81       	ld	r22, Z
    dbf6:	71 81       	ldd	r23, Z+1	; 0x01
    dbf8:	82 81       	ldd	r24, Z+2	; 0x02
    dbfa:	93 81       	ldd	r25, Z+3	; 0x03
    dbfc:	29 81       	ldd	r18, Y+1	; 0x01
    dbfe:	3a 81       	ldd	r19, Y+2	; 0x02
    dc00:	4b 81       	ldd	r20, Y+3	; 0x03
    dc02:	5c 81       	ldd	r21, Y+4	; 0x04
    dc04:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    dc08:	f6 01       	movw	r30, r12
    dc0a:	60 83       	st	Z, r22
    dc0c:	71 83       	std	Z+1, r23	; 0x01
    dc0e:	82 83       	std	Z+2, r24	; 0x02
    dc10:	93 83       	std	Z+3, r25	; 0x03
  (*punto).z += vector.z; 
    dc12:	64 81       	ldd	r22, Z+4	; 0x04
    dc14:	75 81       	ldd	r23, Z+5	; 0x05
    dc16:	86 81       	ldd	r24, Z+6	; 0x06
    dc18:	97 81       	ldd	r25, Z+7	; 0x07
    dc1a:	a8 01       	movw	r20, r16
    dc1c:	97 01       	movw	r18, r14
    dc1e:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    dc22:	f6 01       	movw	r30, r12
    dc24:	64 83       	std	Z+4, r22	; 0x04
    dc26:	75 83       	std	Z+5, r23	; 0x05
    dc28:	86 83       	std	Z+6, r24	; 0x06
    dc2a:	97 83       	std	Z+7, r25	; 0x07
}
    dc2c:	28 96       	adiw	r28, 0x08	; 8
    dc2e:	0f b6       	in	r0, 0x3f	; 63
    dc30:	f8 94       	cli
    dc32:	de bf       	out	0x3e, r29	; 62
    dc34:	0f be       	out	0x3f, r0	; 63
    dc36:	cd bf       	out	0x3d, r28	; 61
    dc38:	cf 91       	pop	r28
    dc3a:	df 91       	pop	r29
    dc3c:	1f 91       	pop	r17
    dc3e:	0f 91       	pop	r16
    dc40:	ff 90       	pop	r15
    dc42:	ef 90       	pop	r14
    dc44:	df 90       	pop	r13
    dc46:	cf 90       	pop	r12
    dc48:	08 95       	ret

0000dc4a <_Z10patas2patah>:
	abs2rel (puntos);    // nota: hubiera sido más eficiente hacer un memcpy, pero acá la velocidad no es crítica
	abs2rel (plano);
}

// devuelve la primer pata activada de un código binario
byte patas2pata (byte patas) {
    dc4a:	20 e0       	ldi	r18, 0x00	; 0
    dc4c:	30 e0       	ldi	r19, 0x00	; 0
  byte pata;
  for (pata=0; pata<6; pata++) {
    if ((patas>>pata)&1) {break;}
    dc4e:	68 2f       	mov	r22, r24
    dc50:	70 e0       	ldi	r23, 0x00	; 0
	abs2rel (puntos);    // nota: hubiera sido más eficiente hacer un memcpy, pero acá la velocidad no es crítica
	abs2rel (plano);
}

// devuelve la primer pata activada de un código binario
byte patas2pata (byte patas) {
    dc52:	42 2f       	mov	r20, r18
  byte pata;
  for (pata=0; pata<6; pata++) {
    if ((patas>>pata)&1) {break;}
    dc54:	cb 01       	movw	r24, r22
    dc56:	02 2e       	mov	r0, r18
    dc58:	02 c0       	rjmp	.+4      	; 0xdc5e <_Z10patas2patah+0x14>
    dc5a:	95 95       	asr	r25
    dc5c:	87 95       	ror	r24
    dc5e:	0a 94       	dec	r0
    dc60:	e2 f7       	brpl	.-8      	; 0xdc5a <_Z10patas2patah+0x10>
    dc62:	80 fd       	sbrc	r24, 0
    dc64:	06 c0       	rjmp	.+12     	; 0xdc72 <_Z10patas2patah+0x28>
    dc66:	4f 5f       	subi	r20, 0xFF	; 255
    dc68:	2f 5f       	subi	r18, 0xFF	; 255
    dc6a:	3f 4f       	sbci	r19, 0xFF	; 255
}

// devuelve la primer pata activada de un código binario
byte patas2pata (byte patas) {
  byte pata;
  for (pata=0; pata<6; pata++) {
    dc6c:	26 30       	cpi	r18, 0x06	; 6
    dc6e:	31 05       	cpc	r19, r1
    dc70:	81 f7       	brne	.-32     	; 0xdc52 <_Z10patas2patah+0x8>
    if ((patas>>pata)&1) {break;}
  }
  return pata;
}
    dc72:	84 2f       	mov	r24, r20
    dc74:	08 95       	ret

0000dc76 <_Z8traslateP7COORD3DS_>:
  }
  return posicion;
} 

// traslada una posición con un vector de traslación
POSICION traslate (COORD3D *pos_ref, COORD3D traslacion) {
    dc76:	2f 92       	push	r2
    dc78:	3f 92       	push	r3
    dc7a:	4f 92       	push	r4
    dc7c:	5f 92       	push	r5
    dc7e:	6f 92       	push	r6
    dc80:	7f 92       	push	r7
    dc82:	8f 92       	push	r8
    dc84:	9f 92       	push	r9
    dc86:	af 92       	push	r10
    dc88:	bf 92       	push	r11
    dc8a:	cf 92       	push	r12
    dc8c:	df 92       	push	r13
    dc8e:	ef 92       	push	r14
    dc90:	ff 92       	push	r15
    dc92:	0f 93       	push	r16
    dc94:	1f 93       	push	r17
    dc96:	df 93       	push	r29
    dc98:	cf 93       	push	r28
    dc9a:	cd b7       	in	r28, 0x3d	; 61
    dc9c:	de b7       	in	r29, 0x3e	; 62
    dc9e:	68 97       	sbiw	r28, 0x18	; 24
    dca0:	0f b6       	in	r0, 0x3f	; 63
    dca2:	f8 94       	cli
    dca4:	de bf       	out	0x3e, r29	; 62
    dca6:	0f be       	out	0x3f, r0	; 63
    dca8:	cd bf       	out	0x3d, r28	; 61
    dcaa:	2c 01       	movw	r4, r24
    dcac:	a9 82       	std	Y+1, r10	; 0x01
    dcae:	ba 82       	std	Y+2, r11	; 0x02
    dcb0:	cb 82       	std	Y+3, r12	; 0x03
    dcb2:	dc 82       	std	Y+4, r13	; 0x04
    dcb4:	ed 82       	std	Y+5, r14	; 0x05
    dcb6:	fe 82       	std	Y+6, r15	; 0x06
    dcb8:	0f 83       	std	Y+7, r16	; 0x07
    dcba:	18 87       	std	Y+8, r17	; 0x08
    dcbc:	29 87       	std	Y+9, r18	; 0x09
    dcbe:	3a 87       	std	Y+10, r19	; 0x0a
    dcc0:	4b 87       	std	Y+11, r20	; 0x0b
    dcc2:	5c 87       	std	Y+12, r21	; 0x0c
    dcc4:	89 85       	ldd	r24, Y+9	; 0x09
    dcc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    dcc8:	ab 85       	ldd	r26, Y+11	; 0x0b
    dcca:	bc 85       	ldd	r27, Y+12	; 0x0c
    dccc:	8d 8b       	std	Y+21, r24	; 0x15
    dcce:	9e 8b       	std	Y+22, r25	; 0x16
    dcd0:	af 8b       	std	Y+23, r26	; 0x17
    dcd2:	b8 8f       	std	Y+24, r27	; 0x18
    dcd4:	8d 81       	ldd	r24, Y+5	; 0x05
    dcd6:	9e 81       	ldd	r25, Y+6	; 0x06
    dcd8:	af 81       	ldd	r26, Y+7	; 0x07
    dcda:	b8 85       	ldd	r27, Y+8	; 0x08
    dcdc:	89 8b       	std	Y+17, r24	; 0x11
    dcde:	9a 8b       	std	Y+18, r25	; 0x12
    dce0:	ab 8b       	std	Y+19, r26	; 0x13
    dce2:	bc 8b       	std	Y+20, r27	; 0x14
    dce4:	89 81       	ldd	r24, Y+1	; 0x01
    dce6:	9a 81       	ldd	r25, Y+2	; 0x02
    dce8:	ab 81       	ldd	r26, Y+3	; 0x03
    dcea:	bc 81       	ldd	r27, Y+4	; 0x04
    dcec:	8d 87       	std	Y+13, r24	; 0x0d
    dcee:	9e 87       	std	Y+14, r25	; 0x0e
    dcf0:	af 87       	std	Y+15, r26	; 0x0f
    dcf2:	b8 8b       	std	Y+16, r27	; 0x10
    dcf4:	3b 01       	movw	r6, r22
    dcf6:	42 01       	movw	r8, r4
  POSICION posicion;
  for (byte pata=0; pata<6; pata++) {
    dcf8:	28 e4       	ldi	r18, 0x48	; 72
    dcfa:	22 2e       	mov	r2, r18
    dcfc:	31 2c       	mov	r3, r1
    dcfe:	24 0c       	add	r2, r4
    dd00:	35 1c       	adc	r3, r5
float bezier (float p0, float p1, float p2, float t) {
  return sq(1-t)*p0 + 2*t*(1-t)*p1 + sq(t)*p2;
}

COORD3D suma (COORD3D punto1, COORD3D punto2) {
  return (COORD3D) {punto1.x + punto2.x, punto1.y + punto2.y, punto1.z + punto2.z}; 
    dd02:	6d 85       	ldd	r22, Y+13	; 0x0d
    dd04:	7e 85       	ldd	r23, Y+14	; 0x0e
    dd06:	8f 85       	ldd	r24, Y+15	; 0x0f
    dd08:	98 89       	ldd	r25, Y+16	; 0x10
    dd0a:	d3 01       	movw	r26, r6
    dd0c:	2d 91       	ld	r18, X+
    dd0e:	3d 91       	ld	r19, X+
    dd10:	4d 91       	ld	r20, X+
    dd12:	5c 91       	ld	r21, X
    dd14:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    dd18:	5b 01       	movw	r10, r22
    dd1a:	6c 01       	movw	r12, r24
    dd1c:	69 89       	ldd	r22, Y+17	; 0x11
    dd1e:	7a 89       	ldd	r23, Y+18	; 0x12
    dd20:	8b 89       	ldd	r24, Y+19	; 0x13
    dd22:	9c 89       	ldd	r25, Y+20	; 0x14
    dd24:	f3 01       	movw	r30, r6
    dd26:	24 81       	ldd	r18, Z+4	; 0x04
    dd28:	35 81       	ldd	r19, Z+5	; 0x05
    dd2a:	46 81       	ldd	r20, Z+6	; 0x06
    dd2c:	57 81       	ldd	r21, Z+7	; 0x07
    dd2e:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    dd32:	7b 01       	movw	r14, r22
    dd34:	8c 01       	movw	r16, r24

// traslada una posición con un vector de traslación
POSICION traslate (COORD3D *pos_ref, COORD3D traslacion) {
  POSICION posicion;
  for (byte pata=0; pata<6; pata++) {
    posicion.patas[pata] = suma (pos_ref[pata], traslacion);
    dd36:	d3 01       	movw	r26, r6
    dd38:	18 96       	adiw	r26, 0x08	; 8
    dd3a:	6d 91       	ld	r22, X+
    dd3c:	7d 91       	ld	r23, X+
    dd3e:	8d 91       	ld	r24, X+
    dd40:	9c 91       	ld	r25, X
    dd42:	1b 97       	sbiw	r26, 0x0b	; 11
    dd44:	2d 89       	ldd	r18, Y+21	; 0x15
    dd46:	3e 89       	ldd	r19, Y+22	; 0x16
    dd48:	4f 89       	ldd	r20, Y+23	; 0x17
    dd4a:	58 8d       	ldd	r21, Y+24	; 0x18
    dd4c:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    dd50:	f4 01       	movw	r30, r8
    dd52:	60 87       	std	Z+8, r22	; 0x08
    dd54:	71 87       	std	Z+9, r23	; 0x09
    dd56:	82 87       	std	Z+10, r24	; 0x0a
    dd58:	93 87       	std	Z+11, r25	; 0x0b
    dd5a:	c7 01       	movw	r24, r14
    dd5c:	d8 01       	movw	r26, r16
    dd5e:	84 83       	std	Z+4, r24	; 0x04
    dd60:	95 83       	std	Z+5, r25	; 0x05
    dd62:	a6 83       	std	Z+6, r26	; 0x06
    dd64:	b7 83       	std	Z+7, r27	; 0x07
    dd66:	c5 01       	movw	r24, r10
    dd68:	d6 01       	movw	r26, r12
    dd6a:	80 83       	st	Z, r24
    dd6c:	91 83       	std	Z+1, r25	; 0x01
    dd6e:	a2 83       	std	Z+2, r26	; 0x02
    dd70:	b3 83       	std	Z+3, r27	; 0x03
    dd72:	8c e0       	ldi	r24, 0x0C	; 12
    dd74:	90 e0       	ldi	r25, 0x00	; 0
    dd76:	68 0e       	add	r6, r24
    dd78:	79 1e       	adc	r7, r25
    dd7a:	88 0e       	add	r8, r24
    dd7c:	99 1e       	adc	r9, r25
} 

// traslada una posición con un vector de traslación
POSICION traslate (COORD3D *pos_ref, COORD3D traslacion) {
  POSICION posicion;
  for (byte pata=0; pata<6; pata++) {
    dd7e:	82 14       	cp	r8, r2
    dd80:	93 04       	cpc	r9, r3
    dd82:	09 f0       	breq	.+2      	; 0xdd86 <_Z8traslateP7COORD3DS_+0x110>
    dd84:	be cf       	rjmp	.-132    	; 0xdd02 <_Z8traslateP7COORD3DS_+0x8c>
    posicion.patas[pata] = suma (pos_ref[pata], traslacion);
  }
  return posicion;
}
    dd86:	c2 01       	movw	r24, r4
    dd88:	68 96       	adiw	r28, 0x18	; 24
    dd8a:	0f b6       	in	r0, 0x3f	; 63
    dd8c:	f8 94       	cli
    dd8e:	de bf       	out	0x3e, r29	; 62
    dd90:	0f be       	out	0x3f, r0	; 63
    dd92:	cd bf       	out	0x3d, r28	; 61
    dd94:	cf 91       	pop	r28
    dd96:	df 91       	pop	r29
    dd98:	1f 91       	pop	r17
    dd9a:	0f 91       	pop	r16
    dd9c:	ff 90       	pop	r15
    dd9e:	ef 90       	pop	r14
    dda0:	df 90       	pop	r13
    dda2:	cf 90       	pop	r12
    dda4:	bf 90       	pop	r11
    dda6:	af 90       	pop	r10
    dda8:	9f 90       	pop	r9
    ddaa:	8f 90       	pop	r8
    ddac:	7f 90       	pop	r7
    ddae:	6f 90       	pop	r6
    ddb0:	5f 90       	pop	r5
    ddb2:	4f 90       	pop	r4
    ddb4:	3f 90       	pop	r3
    ddb6:	2f 90       	pop	r2
    ddb8:	08 95       	ret

0000ddba <_Z13edit_positionP7COORD3Dffff>:

// actualiza la posición hexagonal de referencia
void edit_position (COORD3D *pos_ref, float altura_inc, float ancho_inc, float largo_inc, float ancho_central_inc) {
    ddba:	2f 92       	push	r2
    ddbc:	3f 92       	push	r3
    ddbe:	4f 92       	push	r4
    ddc0:	5f 92       	push	r5
    ddc2:	6f 92       	push	r6
    ddc4:	7f 92       	push	r7
    ddc6:	8f 92       	push	r8
    ddc8:	9f 92       	push	r9
    ddca:	af 92       	push	r10
    ddcc:	bf 92       	push	r11
    ddce:	cf 92       	push	r12
    ddd0:	df 92       	push	r13
    ddd2:	ef 92       	push	r14
    ddd4:	ff 92       	push	r15
    ddd6:	0f 93       	push	r16
    ddd8:	1f 93       	push	r17
    ddda:	df 93       	push	r29
    dddc:	cf 93       	push	r28
    ddde:	00 d0       	rcall	.+0      	; 0xdde0 <_Z13edit_positionP7COORD3Dffff+0x26>
    dde0:	00 d0       	rcall	.+0      	; 0xdde2 <_Z13edit_positionP7COORD3Dffff+0x28>
    dde2:	cd b7       	in	r28, 0x3d	; 61
    dde4:	de b7       	in	r29, 0x3e	; 62
    dde6:	09 83       	std	Y+1, r16	; 0x01
    dde8:	1a 83       	std	Y+2, r17	; 0x02
    ddea:	2b 83       	std	Y+3, r18	; 0x03
    ddec:	3c 83       	std	Y+4, r19	; 0x04
    ddee:	16 01       	movw	r2, r12
    ddf0:	27 01       	movw	r4, r14
    ddf2:	34 01       	movw	r6, r8
    ddf4:	45 01       	movw	r8, r10
    ddf6:	8c 01       	movw	r16, r24
    ddf8:	ff 24       	eor	r15, r15
	return producto;
}

void sumasigna (COORD3D *punto, COORD3D vector) {
  (*punto).x += vector.x;
  (*punto).y += vector.y;
    ddfa:	5a 01       	movw	r10, r20
    ddfc:	6b 01       	movw	r12, r22
    ddfe:	d7 fa       	bst	r13, 7
    de00:	d0 94       	com	r13
    de02:	d7 f8       	bld	r13, 7
    de04:	d0 94       	com	r13
void edit_position (COORD3D *pos_ref, float altura_inc, float ancho_inc, float largo_inc, float ancho_central_inc) {
	COORD3D vector;
	for (byte pata=0; pata<6; pata++) {
		vector.z = (1-(pata%3))*largo_inc;
		vector.y = -altura_inc;
		if (pata==1 || pata==4) {vector.x = ancho_central_inc*bin2sign(pata>2);} else {vector.x = ancho_inc*bin2sign(pata>2);}
    de06:	81 e0       	ldi	r24, 0x01	; 1
    de08:	f8 16       	cp	r15, r24
    de0a:	19 f0       	breq	.+6      	; 0xde12 <_Z13edit_positionP7COORD3Dffff+0x58>
    de0c:	94 e0       	ldi	r25, 0x04	; 4
    de0e:	f9 16       	cp	r15, r25
    de10:	a9 f4       	brne	.+42     	; 0xde3c <_Z13edit_positionP7COORD3Dffff+0x82>
    de12:	80 e0       	ldi	r24, 0x00	; 0
    de14:	e2 e0       	ldi	r30, 0x02	; 2
    de16:	ef 15       	cp	r30, r15
    de18:	08 f4       	brcc	.+2      	; 0xde1c <_Z13edit_positionP7COORD3Dffff+0x62>
    de1a:	81 e0       	ldi	r24, 0x01	; 1
    de1c:	0e 94 48 0a 	call	0x1490	; 0x1490 <_Z8bin2signb>
    de20:	99 27       	eor	r25, r25
    de22:	87 fd       	sbrc	r24, 7
    de24:	90 95       	com	r25
    de26:	a9 2f       	mov	r26, r25
    de28:	b9 2f       	mov	r27, r25
    de2a:	bc 01       	movw	r22, r24
    de2c:	cd 01       	movw	r24, r26
    de2e:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    de32:	9b 01       	movw	r18, r22
    de34:	ac 01       	movw	r20, r24
    de36:	c4 01       	movw	r24, r8
    de38:	b3 01       	movw	r22, r6
    de3a:	16 c0       	rjmp	.+44     	; 0xde68 <_Z13edit_positionP7COORD3Dffff+0xae>
    de3c:	80 e0       	ldi	r24, 0x00	; 0
    de3e:	f2 e0       	ldi	r31, 0x02	; 2
    de40:	ff 15       	cp	r31, r15
    de42:	08 f4       	brcc	.+2      	; 0xde46 <_Z13edit_positionP7COORD3Dffff+0x8c>
    de44:	81 e0       	ldi	r24, 0x01	; 1
    de46:	0e 94 48 0a 	call	0x1490	; 0x1490 <_Z8bin2signb>
    de4a:	99 27       	eor	r25, r25
    de4c:	87 fd       	sbrc	r24, 7
    de4e:	90 95       	com	r25
    de50:	a9 2f       	mov	r26, r25
    de52:	b9 2f       	mov	r27, r25
    de54:	bc 01       	movw	r22, r24
    de56:	cd 01       	movw	r24, r26
    de58:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    de5c:	9b 01       	movw	r18, r22
    de5e:	ac 01       	movw	r20, r24
    de60:	69 81       	ldd	r22, Y+1	; 0x01
    de62:	7a 81       	ldd	r23, Y+2	; 0x02
    de64:	8b 81       	ldd	r24, Y+3	; 0x03
    de66:	9c 81       	ldd	r25, Y+4	; 0x04
    de68:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    de6c:	9b 01       	movw	r18, r22
    de6e:	ac 01       	movw	r20, r24
	producto.z = vector1.x*vector2.y - vector1.y*vector2.x;
	return producto;
}

void sumasigna (COORD3D *punto, COORD3D vector) {
  (*punto).x += vector.x;
    de70:	f8 01       	movw	r30, r16
    de72:	60 81       	ld	r22, Z
    de74:	71 81       	ldd	r23, Z+1	; 0x01
    de76:	82 81       	ldd	r24, Z+2	; 0x02
    de78:	93 81       	ldd	r25, Z+3	; 0x03
    de7a:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    de7e:	f8 01       	movw	r30, r16
    de80:	60 83       	st	Z, r22
    de82:	71 83       	std	Z+1, r23	; 0x01
    de84:	82 83       	std	Z+2, r24	; 0x02
    de86:	93 83       	std	Z+3, r25	; 0x03
  (*punto).y += vector.y;
    de88:	64 81       	ldd	r22, Z+4	; 0x04
    de8a:	75 81       	ldd	r23, Z+5	; 0x05
    de8c:	86 81       	ldd	r24, Z+6	; 0x06
    de8e:	97 81       	ldd	r25, Z+7	; 0x07
    de90:	a6 01       	movw	r20, r12
    de92:	95 01       	movw	r18, r10
    de94:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    de98:	f8 01       	movw	r30, r16
    de9a:	64 83       	std	Z+4, r22	; 0x04
    de9c:	75 83       	std	Z+5, r23	; 0x05
    de9e:	86 83       	std	Z+6, r24	; 0x06
    dea0:	97 83       	std	Z+7, r25	; 0x07
  (*punto).z += vector.z; 
    dea2:	8f 2d       	mov	r24, r15
    dea4:	63 e0       	ldi	r22, 0x03	; 3
    dea6:	0e 94 ff 80 	call	0x101fe	; 0x101fe <__udivmodqi4>
    deaa:	61 e0       	ldi	r22, 0x01	; 1
    deac:	70 e0       	ldi	r23, 0x00	; 0
    deae:	69 1b       	sub	r22, r25
    deb0:	71 09       	sbc	r23, r1
    deb2:	88 27       	eor	r24, r24
    deb4:	77 fd       	sbrc	r23, 7
    deb6:	80 95       	com	r24
    deb8:	98 2f       	mov	r25, r24
    deba:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    debe:	a2 01       	movw	r20, r4
    dec0:	91 01       	movw	r18, r2
    dec2:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    dec6:	9b 01       	movw	r18, r22
    dec8:	ac 01       	movw	r20, r24
    deca:	f8 01       	movw	r30, r16
    decc:	60 85       	ldd	r22, Z+8	; 0x08
    dece:	71 85       	ldd	r23, Z+9	; 0x09
    ded0:	82 85       	ldd	r24, Z+10	; 0x0a
    ded2:	93 85       	ldd	r25, Z+11	; 0x0b
    ded4:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    ded8:	f8 01       	movw	r30, r16
    deda:	60 87       	std	Z+8, r22	; 0x08
    dedc:	71 87       	std	Z+9, r23	; 0x09
    dede:	82 87       	std	Z+10, r24	; 0x0a
    dee0:	93 87       	std	Z+11, r25	; 0x0b
}

// actualiza la posición hexagonal de referencia
void edit_position (COORD3D *pos_ref, float altura_inc, float ancho_inc, float largo_inc, float ancho_central_inc) {
	COORD3D vector;
	for (byte pata=0; pata<6; pata++) {
    dee2:	f3 94       	inc	r15
    dee4:	04 5f       	subi	r16, 0xF4	; 244
    dee6:	1f 4f       	sbci	r17, 0xFF	; 255
    dee8:	f6 e0       	ldi	r31, 0x06	; 6
    deea:	ff 16       	cp	r15, r31
    deec:	09 f0       	breq	.+2      	; 0xdef0 <_Z13edit_positionP7COORD3Dffff+0x136>
    deee:	8b cf       	rjmp	.-234    	; 0xde06 <_Z13edit_positionP7COORD3Dffff+0x4c>
		vector.z = (1-(pata%3))*largo_inc;
		vector.y = -altura_inc;
		if (pata==1 || pata==4) {vector.x = ancho_central_inc*bin2sign(pata>2);} else {vector.x = ancho_inc*bin2sign(pata>2);}
		sumasigna (&pos_ref[pata], vector);
	} 
    def0:	0f 90       	pop	r0
    def2:	0f 90       	pop	r0
    def4:	0f 90       	pop	r0
    def6:	0f 90       	pop	r0
    def8:	cf 91       	pop	r28
    defa:	df 91       	pop	r29
    defc:	1f 91       	pop	r17
    defe:	0f 91       	pop	r16
    df00:	ff 90       	pop	r15
    df02:	ef 90       	pop	r14
    df04:	df 90       	pop	r13
    df06:	cf 90       	pop	r12
    df08:	bf 90       	pop	r11
    df0a:	af 90       	pop	r10
    df0c:	9f 90       	pop	r9
    df0e:	8f 90       	pop	r8
    df10:	7f 90       	pop	r7
    df12:	6f 90       	pop	r6
    df14:	5f 90       	pop	r5
    df16:	4f 90       	pop	r4
    df18:	3f 90       	pop	r3
    df1a:	2f 90       	pop	r2
    df1c:	08 95       	ret

0000df1e <_Z9getOffseth>:
/*********************************************************
** rutinas vinculadas a la geometría concreta del robot **
*********************************************************/

// devuelve el origen de la pata con respecto al centro del robot
COORD2D getOffset (byte pata) {
    df1e:	1f 93       	push	r17
    df20:	df 93       	push	r29
    df22:	cf 93       	push	r28
    df24:	cd b7       	in	r28, 0x3d	; 61
    df26:	de b7       	in	r29, 0x3e	; 62
    df28:	28 97       	sbiw	r28, 0x08	; 8
    df2a:	0f b6       	in	r0, 0x3f	; 63
    df2c:	f8 94       	cli
    df2e:	de bf       	out	0x3e, r29	; 62
    df30:	0f be       	out	0x3f, r0	; 63
    df32:	cd bf       	out	0x3d, r28	; 61
    df34:	18 2f       	mov	r17, r24
  return (COORD2D) {ORIGEN*bin2sign(pata>2), (1-(pata%3))*SEPARA};      // nota: las patas de la izquierda son de x negativo
    df36:	80 e0       	ldi	r24, 0x00	; 0
    df38:	13 30       	cpi	r17, 0x03	; 3
    df3a:	08 f0       	brcs	.+2      	; 0xdf3e <_Z9getOffseth+0x20>
    df3c:	81 e0       	ldi	r24, 0x01	; 1
    df3e:	0e 94 48 0a 	call	0x1490	; 0x1490 <_Z8bin2signb>
    df42:	99 27       	eor	r25, r25
    df44:	87 fd       	sbrc	r24, 7
    df46:	90 95       	com	r25
    df48:	a9 2f       	mov	r26, r25
    df4a:	b9 2f       	mov	r27, r25
    df4c:	bc 01       	movw	r22, r24
    df4e:	cd 01       	movw	r24, r26
    df50:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    df54:	23 e3       	ldi	r18, 0x33	; 51
    df56:	33 e3       	ldi	r19, 0x33	; 51
    df58:	43 e9       	ldi	r20, 0x93	; 147
    df5a:	50 e4       	ldi	r21, 0x40	; 64
    df5c:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    df60:	69 83       	std	Y+1, r22	; 0x01
    df62:	7a 83       	std	Y+2, r23	; 0x02
    df64:	8b 83       	std	Y+3, r24	; 0x03
    df66:	9c 83       	std	Y+4, r25	; 0x04
    df68:	81 2f       	mov	r24, r17
    df6a:	63 e0       	ldi	r22, 0x03	; 3
    df6c:	0e 94 ff 80 	call	0x101fe	; 0x101fe <__udivmodqi4>
    df70:	21 e0       	ldi	r18, 0x01	; 1
    df72:	30 e0       	ldi	r19, 0x00	; 0
    df74:	29 1b       	sub	r18, r25
    df76:	31 09       	sbc	r19, r1
    df78:	44 27       	eor	r20, r20
    df7a:	37 fd       	sbrc	r19, 7
    df7c:	40 95       	com	r20
    df7e:	54 2f       	mov	r21, r20
    df80:	ca 01       	movw	r24, r20
    df82:	b9 01       	movw	r22, r18
    df84:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    df88:	20 e0       	ldi	r18, 0x00	; 0
    df8a:	30 e0       	ldi	r19, 0x00	; 0
    df8c:	4c e0       	ldi	r20, 0x0C	; 12
    df8e:	51 e4       	ldi	r21, 0x41	; 65
    df90:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    df94:	6d 83       	std	Y+5, r22	; 0x05
    df96:	7e 83       	std	Y+6, r23	; 0x06
    df98:	8f 83       	std	Y+7, r24	; 0x07
    df9a:	98 87       	std	Y+8, r25	; 0x08
    df9c:	29 81       	ldd	r18, Y+1	; 0x01
    df9e:	3a 81       	ldd	r19, Y+2	; 0x02
    dfa0:	4b 81       	ldd	r20, Y+3	; 0x03
    dfa2:	5c 81       	ldd	r21, Y+4	; 0x04
    dfa4:	6d 81       	ldd	r22, Y+5	; 0x05
    dfa6:	7e 81       	ldd	r23, Y+6	; 0x06
}
    dfa8:	8f 81       	ldd	r24, Y+7	; 0x07
    dfaa:	98 85       	ldd	r25, Y+8	; 0x08
    dfac:	28 96       	adiw	r28, 0x08	; 8
    dfae:	0f b6       	in	r0, 0x3f	; 63
    dfb0:	f8 94       	cli
    dfb2:	de bf       	out	0x3e, r29	; 62
    dfb4:	0f be       	out	0x3f, r0	; 63
    dfb6:	cd bf       	out	0x3d, r28	; 61
    dfb8:	cf 91       	pop	r28
    dfba:	df 91       	pop	r29
    dfbc:	1f 91       	pop	r17
    dfbe:	08 95       	ret

0000dfc0 <_Z6rotateP7COORD3DS_S0_>:
  }  
  return posicion;
}

// rota una posición con un centro y una matriz de rotacion
POSICION rotate (COORD3D *pos_ref, COORD3D centro, COORD3D *matrix) {
    dfc0:	2f 92       	push	r2
    dfc2:	6f 92       	push	r6
    dfc4:	7f 92       	push	r7
    dfc6:	8f 92       	push	r8
    dfc8:	9f 92       	push	r9
    dfca:	af 92       	push	r10
    dfcc:	bf 92       	push	r11
    dfce:	cf 92       	push	r12
    dfd0:	df 92       	push	r13
    dfd2:	ef 92       	push	r14
    dfd4:	ff 92       	push	r15
    dfd6:	0f 93       	push	r16
    dfd8:	1f 93       	push	r17
    dfda:	df 93       	push	r29
    dfdc:	cf 93       	push	r28
    dfde:	cd b7       	in	r28, 0x3d	; 61
    dfe0:	de b7       	in	r29, 0x3e	; 62
    dfe2:	cc 54       	subi	r28, 0x4C	; 76
    dfe4:	d0 40       	sbci	r29, 0x00	; 0
    dfe6:	0f b6       	in	r0, 0x3f	; 63
    dfe8:	f8 94       	cli
    dfea:	de bf       	out	0x3e, r29	; 62
    dfec:	0f be       	out	0x3f, r0	; 63
    dfee:	cd bf       	out	0x3d, r28	; 61
    dff0:	2c 96       	adiw	r28, 0x0c	; 12
    dff2:	8f af       	std	Y+63, r24	; 0x3f
    dff4:	2c 97       	sbiw	r28, 0x0c	; 12
    dff6:	2d 96       	adiw	r28, 0x0d	; 13
    dff8:	9f af       	std	Y+63, r25	; 0x3f
    dffa:	2d 97       	sbiw	r28, 0x0d	; 13
    dffc:	a9 a2       	std	Y+33, r10	; 0x21
    dffe:	ba a2       	std	Y+34, r11	; 0x22
    e000:	cb a2       	std	Y+35, r12	; 0x23
    e002:	dc a2       	std	Y+36, r13	; 0x24
    e004:	ed a2       	std	Y+37, r14	; 0x25
    e006:	fe a2       	std	Y+38, r15	; 0x26
    e008:	0f a3       	std	Y+39, r16	; 0x27
    e00a:	18 a7       	std	Y+40, r17	; 0x28
    e00c:	29 a7       	std	Y+41, r18	; 0x29
    e00e:	3a a7       	std	Y+42, r19	; 0x2a
    e010:	4b a7       	std	Y+43, r20	; 0x2b
    e012:	5c a7       	std	Y+44, r21	; 0x2c
    e014:	2b 96       	adiw	r28, 0x0b	; 11
    e016:	9f ae       	std	Y+63, r9	; 0x3f
    e018:	8e ae       	std	Y+62, r8	; 0x3e
    e01a:	2b 97       	sbiw	r28, 0x0b	; 11
    e01c:	89 a5       	ldd	r24, Y+41	; 0x29
    e01e:	9a a5       	ldd	r25, Y+42	; 0x2a
    e020:	ab a5       	ldd	r26, Y+43	; 0x2b
    e022:	bc a5       	ldd	r27, Y+44	; 0x2c
    e024:	25 96       	adiw	r28, 0x05	; 5
    e026:	8c af       	std	Y+60, r24	; 0x3c
    e028:	9d af       	std	Y+61, r25	; 0x3d
    e02a:	ae af       	std	Y+62, r26	; 0x3e
    e02c:	bf af       	std	Y+63, r27	; 0x3f
    e02e:	25 97       	sbiw	r28, 0x05	; 5
    e030:	8d a1       	ldd	r24, Y+37	; 0x25
    e032:	9e a1       	ldd	r25, Y+38	; 0x26
    e034:	af a1       	ldd	r26, Y+39	; 0x27
    e036:	b8 a5       	ldd	r27, Y+40	; 0x28
    e038:	21 96       	adiw	r28, 0x01	; 1
    e03a:	8c af       	std	Y+60, r24	; 0x3c
    e03c:	9d af       	std	Y+61, r25	; 0x3d
    e03e:	ae af       	std	Y+62, r26	; 0x3e
    e040:	bf af       	std	Y+63, r27	; 0x3f
    e042:	21 97       	sbiw	r28, 0x01	; 1
    e044:	89 a1       	ldd	r24, Y+33	; 0x21
    e046:	9a a1       	ldd	r25, Y+34	; 0x22
    e048:	ab a1       	ldd	r26, Y+35	; 0x23
    e04a:	bc a1       	ldd	r27, Y+36	; 0x24
    e04c:	89 af       	std	Y+57, r24	; 0x39
    e04e:	9a af       	std	Y+58, r25	; 0x3a
    e050:	ab af       	std	Y+59, r26	; 0x3b
    e052:	bc af       	std	Y+60, r27	; 0x3c
    e054:	78 af       	std	Y+56, r23	; 0x38
    e056:	6f ab       	std	Y+55, r22	; 0x37
    e058:	2c 96       	adiw	r28, 0x0c	; 12
    e05a:	2f ad       	ldd	r18, Y+63	; 0x3f
    e05c:	2c 97       	sbiw	r28, 0x0c	; 12
    e05e:	2d 96       	adiw	r28, 0x0d	; 13
    e060:	3f ad       	ldd	r19, Y+63	; 0x3f
    e062:	2d 97       	sbiw	r28, 0x0d	; 13
    e064:	c9 01       	movw	r24, r18
    e066:	9e ab       	std	Y+54, r25	; 0x36
    e068:	8d ab       	std	Y+53, r24	; 0x35
    e06a:	22 24       	eor	r2, r2
  POSICION posicion;
  for (byte pata=0; pata<6; pata++) {
    COORD3D O = xz2xyz (getOffset(pata));
    e06c:	82 2d       	mov	r24, r2
    e06e:	0e 94 8f 6f 	call	0xdf1e	; 0xdf1e <_Z9getOffseth>
    e072:	2d a7       	std	Y+45, r18	; 0x2d
    e074:	3e a7       	std	Y+46, r19	; 0x2e
    e076:	4f a7       	std	Y+47, r20	; 0x2f
    e078:	58 ab       	std	Y+48, r21	; 0x30
    e07a:	69 ab       	std	Y+49, r22	; 0x31
    e07c:	7a ab       	std	Y+50, r23	; 0x32
    e07e:	8b ab       	std	Y+51, r24	; 0x33
    e080:	9c ab       	std	Y+52, r25	; 0x34
    e082:	de 01       	movw	r26, r28
    e084:	11 96       	adiw	r26, 0x01	; 1
    e086:	fe 01       	movw	r30, r28
    e088:	bd 96       	adiw	r30, 0x2d	; 45
    e08a:	88 e0       	ldi	r24, 0x08	; 8
    e08c:	01 90       	ld	r0, Z+
    e08e:	0d 92       	st	X+, r0
    e090:	81 50       	subi	r24, 0x01	; 1
    e092:	e1 f7       	brne	.-8      	; 0xe08c <_Z6rotateP7COORD3DS_S0_+0xcc>
    e094:	69 80       	ldd	r6, Y+1	; 0x01
    e096:	7a 80       	ldd	r7, Y+2	; 0x02
    e098:	8b 80       	ldd	r8, Y+3	; 0x03
    e09a:	9c 80       	ldd	r9, Y+4	; 0x04
    e09c:	8d 81       	ldd	r24, Y+5	; 0x05
    e09e:	9e 81       	ldd	r25, Y+6	; 0x06
    e0a0:	af 81       	ldd	r26, Y+7	; 0x07
    e0a2:	b8 85       	ldd	r27, Y+8	; 0x08
    e0a4:	29 96       	adiw	r28, 0x09	; 9
    e0a6:	8c af       	std	Y+60, r24	; 0x3c
    e0a8:	9d af       	std	Y+61, r25	; 0x3d
    e0aa:	ae af       	std	Y+62, r26	; 0x3e
    e0ac:	bf af       	std	Y+63, r27	; 0x3f
    e0ae:	29 97       	sbiw	r28, 0x09	; 9
COORD2D suma (COORD2D punto1, COORD2D punto2) {
  return (COORD2D) {punto1.x + punto2.x, punto1.z + punto2.z}; 
}

COORD3D resta (COORD3D punto1, COORD3D punto2) {
  return (COORD3D) {punto1.x - punto2.x, punto1.y - punto2.y, punto1.z - punto2.z}; 
    e0b0:	af a9       	ldd	r26, Y+55	; 0x37
    e0b2:	b8 ad       	ldd	r27, Y+56	; 0x38
    e0b4:	14 96       	adiw	r26, 0x04	; 4
    e0b6:	6d 91       	ld	r22, X+
    e0b8:	7d 91       	ld	r23, X+
    e0ba:	8d 91       	ld	r24, X+
    e0bc:	9c 91       	ld	r25, X
    e0be:	17 97       	sbiw	r26, 0x07	; 7
    e0c0:	20 e0       	ldi	r18, 0x00	; 0
    e0c2:	30 e0       	ldi	r19, 0x00	; 0
    e0c4:	40 e0       	ldi	r20, 0x00	; 0
    e0c6:	50 e0       	ldi	r21, 0x00	; 0
    e0c8:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    e0cc:	21 96       	adiw	r28, 0x01	; 1
    e0ce:	2c ad       	ldd	r18, Y+60	; 0x3c
    e0d0:	3d ad       	ldd	r19, Y+61	; 0x3d
    e0d2:	4e ad       	ldd	r20, Y+62	; 0x3e
    e0d4:	5f ad       	ldd	r21, Y+63	; 0x3f
    e0d6:	21 97       	sbiw	r28, 0x01	; 1
    e0d8:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    e0dc:	7b 01       	movw	r14, r22
    e0de:	8c 01       	movw	r16, r24
    e0e0:	29 96       	adiw	r28, 0x09	; 9
    e0e2:	6c ad       	ldd	r22, Y+60	; 0x3c
    e0e4:	7d ad       	ldd	r23, Y+61	; 0x3d
    e0e6:	8e ad       	ldd	r24, Y+62	; 0x3e
    e0e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    e0ea:	29 97       	sbiw	r28, 0x09	; 9
    e0ec:	ef a9       	ldd	r30, Y+55	; 0x37
    e0ee:	f8 ad       	ldd	r31, Y+56	; 0x38
    e0f0:	20 85       	ldd	r18, Z+8	; 0x08
    e0f2:	31 85       	ldd	r19, Z+9	; 0x09
    e0f4:	42 85       	ldd	r20, Z+10	; 0x0a
    e0f6:	53 85       	ldd	r21, Z+11	; 0x0b
    e0f8:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    e0fc:	25 96       	adiw	r28, 0x05	; 5
    e0fe:	2c ad       	ldd	r18, Y+60	; 0x3c
    e100:	3d ad       	ldd	r19, Y+61	; 0x3d
    e102:	4e ad       	ldd	r20, Y+62	; 0x3e
    e104:	5f ad       	ldd	r21, Y+63	; 0x3f
    e106:	25 97       	sbiw	r28, 0x05	; 5
    e108:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    e10c:	5b 01       	movw	r10, r22
    e10e:	6c 01       	movw	r12, r24
    e110:	c4 01       	movw	r24, r8
    e112:	b3 01       	movw	r22, r6
    e114:	af a9       	ldd	r26, Y+55	; 0x37
    e116:	b8 ad       	ldd	r27, Y+56	; 0x38
    e118:	2d 91       	ld	r18, X+
    e11a:	3d 91       	ld	r19, X+
    e11c:	4d 91       	ld	r20, X+
    e11e:	5c 91       	ld	r21, X
    e120:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    e124:	29 ad       	ldd	r18, Y+57	; 0x39
    e126:	3a ad       	ldd	r19, Y+58	; 0x3a
    e128:	4b ad       	ldd	r20, Y+59	; 0x3b
    e12a:	5c ad       	ldd	r21, Y+60	; 0x3c
    e12c:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    e130:	69 87       	std	Y+9, r22	; 0x09
    e132:	7a 87       	std	Y+10, r23	; 0x0a
    e134:	8b 87       	std	Y+11, r24	; 0x0b
    e136:	9c 87       	std	Y+12, r25	; 0x0c
    e138:	c7 01       	movw	r24, r14
    e13a:	d8 01       	movw	r26, r16
    e13c:	8d 87       	std	Y+13, r24	; 0x0d
    e13e:	9e 87       	std	Y+14, r25	; 0x0e
    e140:	af 87       	std	Y+15, r26	; 0x0f
    e142:	b8 8b       	std	Y+16, r27	; 0x10
    e144:	c5 01       	movw	r24, r10
    e146:	d6 01       	movw	r26, r12
    e148:	89 8b       	std	Y+17, r24	; 0x11
    e14a:	9a 8b       	std	Y+18, r25	; 0x12
    e14c:	ab 8b       	std	Y+19, r26	; 0x13
    e14e:	bc 8b       	std	Y+20, r27	; 0x14
// rota una posición con un centro y una matriz de rotacion
POSICION rotate (COORD3D *pos_ref, COORD3D centro, COORD3D *matrix) {
  POSICION posicion;
  for (byte pata=0; pata<6; pata++) {
    COORD3D O = xz2xyz (getOffset(pata));
    posicion.patas[pata] = resta (suma (applyMatrix (resta (suma (pos_ref[pata], O), centro), matrix), centro), O);
    e150:	ce 01       	movw	r24, r28
    e152:	45 96       	adiw	r24, 0x15	; 21
    e154:	c9 84       	ldd	r12, Y+9	; 0x09
    e156:	da 84       	ldd	r13, Y+10	; 0x0a
    e158:	eb 84       	ldd	r14, Y+11	; 0x0b
    e15a:	fc 84       	ldd	r15, Y+12	; 0x0c
    e15c:	0d 85       	ldd	r16, Y+13	; 0x0d
    e15e:	1e 85       	ldd	r17, Y+14	; 0x0e
    e160:	2f 85       	ldd	r18, Y+15	; 0x0f
    e162:	38 89       	ldd	r19, Y+16	; 0x10
    e164:	49 89       	ldd	r20, Y+17	; 0x11
    e166:	5a 89       	ldd	r21, Y+18	; 0x12
    e168:	6b 89       	ldd	r22, Y+19	; 0x13
    e16a:	7c 89       	ldd	r23, Y+20	; 0x14
    e16c:	2b 96       	adiw	r28, 0x0b	; 11
    e16e:	ae ac       	ldd	r10, Y+62	; 0x3e
    e170:	bf ac       	ldd	r11, Y+63	; 0x3f
    e172:	2b 97       	sbiw	r28, 0x0b	; 11
    e174:	0e 94 d3 6b 	call	0xd7a6	; 0xd7a6 <_Z11applyMatrix7COORD3DPS_>
float bezier (float p0, float p1, float p2, float t) {
  return sq(1-t)*p0 + 2*t*(1-t)*p1 + sq(t)*p2;
}

COORD3D suma (COORD3D punto1, COORD3D punto2) {
  return (COORD3D) {punto1.x + punto2.x, punto1.y + punto2.y, punto1.z + punto2.z}; 
    e178:	21 96       	adiw	r28, 0x01	; 1
    e17a:	6c ad       	ldd	r22, Y+60	; 0x3c
    e17c:	7d ad       	ldd	r23, Y+61	; 0x3d
    e17e:	8e ad       	ldd	r24, Y+62	; 0x3e
    e180:	9f ad       	ldd	r25, Y+63	; 0x3f
    e182:	21 97       	sbiw	r28, 0x01	; 1
    e184:	29 8d       	ldd	r18, Y+25	; 0x19
    e186:	3a 8d       	ldd	r19, Y+26	; 0x1a
    e188:	4b 8d       	ldd	r20, Y+27	; 0x1b
    e18a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    e18c:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    e190:	7b 01       	movw	r14, r22
    e192:	8c 01       	movw	r16, r24
COORD2D suma (COORD2D punto1, COORD2D punto2) {
  return (COORD2D) {punto1.x + punto2.x, punto1.z + punto2.z}; 
}

COORD3D resta (COORD3D punto1, COORD3D punto2) {
  return (COORD3D) {punto1.x - punto2.x, punto1.y - punto2.y, punto1.z - punto2.z}; 
    e194:	69 ad       	ldd	r22, Y+57	; 0x39
    e196:	7a ad       	ldd	r23, Y+58	; 0x3a
    e198:	8b ad       	ldd	r24, Y+59	; 0x3b
    e19a:	9c ad       	ldd	r25, Y+60	; 0x3c
    e19c:	2d 89       	ldd	r18, Y+21	; 0x15
    e19e:	3e 89       	ldd	r19, Y+22	; 0x16
    e1a0:	4f 89       	ldd	r20, Y+23	; 0x17
    e1a2:	58 8d       	ldd	r21, Y+24	; 0x18
    e1a4:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    e1a8:	a4 01       	movw	r20, r8
    e1aa:	93 01       	movw	r18, r6
    e1ac:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    e1b0:	5b 01       	movw	r10, r22
    e1b2:	6c 01       	movw	r12, r24
// rota una posición con un centro y una matriz de rotacion
POSICION rotate (COORD3D *pos_ref, COORD3D centro, COORD3D *matrix) {
  POSICION posicion;
  for (byte pata=0; pata<6; pata++) {
    COORD3D O = xz2xyz (getOffset(pata));
    posicion.patas[pata] = resta (suma (applyMatrix (resta (suma (pos_ref[pata], O), centro), matrix), centro), O);
    e1b4:	25 96       	adiw	r28, 0x05	; 5
    e1b6:	6c ad       	ldd	r22, Y+60	; 0x3c
    e1b8:	7d ad       	ldd	r23, Y+61	; 0x3d
    e1ba:	8e ad       	ldd	r24, Y+62	; 0x3e
    e1bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    e1be:	25 97       	sbiw	r28, 0x05	; 5
    e1c0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    e1c2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    e1c4:	4f 8d       	ldd	r20, Y+31	; 0x1f
    e1c6:	58 a1       	ldd	r21, Y+32	; 0x20
    e1c8:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    e1cc:	29 96       	adiw	r28, 0x09	; 9
    e1ce:	2c ad       	ldd	r18, Y+60	; 0x3c
    e1d0:	3d ad       	ldd	r19, Y+61	; 0x3d
    e1d2:	4e ad       	ldd	r20, Y+62	; 0x3e
    e1d4:	5f ad       	ldd	r21, Y+63	; 0x3f
    e1d6:	29 97       	sbiw	r28, 0x09	; 9
    e1d8:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    e1dc:	ed a9       	ldd	r30, Y+53	; 0x35
    e1de:	fe a9       	ldd	r31, Y+54	; 0x36
    e1e0:	60 87       	std	Z+8, r22	; 0x08
    e1e2:	71 87       	std	Z+9, r23	; 0x09
    e1e4:	82 87       	std	Z+10, r24	; 0x0a
    e1e6:	93 87       	std	Z+11, r25	; 0x0b
    e1e8:	c7 01       	movw	r24, r14
    e1ea:	d8 01       	movw	r26, r16
    e1ec:	84 83       	std	Z+4, r24	; 0x04
    e1ee:	95 83       	std	Z+5, r25	; 0x05
    e1f0:	a6 83       	std	Z+6, r26	; 0x06
    e1f2:	b7 83       	std	Z+7, r27	; 0x07
    e1f4:	c5 01       	movw	r24, r10
    e1f6:	d6 01       	movw	r26, r12
    e1f8:	80 83       	st	Z, r24
    e1fa:	91 83       	std	Z+1, r25	; 0x01
    e1fc:	a2 83       	std	Z+2, r26	; 0x02
    e1fe:	b3 83       	std	Z+3, r27	; 0x03
}

// rota una posición con un centro y una matriz de rotacion
POSICION rotate (COORD3D *pos_ref, COORD3D centro, COORD3D *matrix) {
  POSICION posicion;
  for (byte pata=0; pata<6; pata++) {
    e200:	23 94       	inc	r2
    e202:	8f a9       	ldd	r24, Y+55	; 0x37
    e204:	98 ad       	ldd	r25, Y+56	; 0x38
    e206:	0c 96       	adiw	r24, 0x0c	; 12
    e208:	98 af       	std	Y+56, r25	; 0x38
    e20a:	8f ab       	std	Y+55, r24	; 0x37
    e20c:	3c 96       	adiw	r30, 0x0c	; 12
    e20e:	fe ab       	std	Y+54, r31	; 0x36
    e210:	ed ab       	std	Y+53, r30	; 0x35
    e212:	96 e0       	ldi	r25, 0x06	; 6
    e214:	29 16       	cp	r2, r25
    e216:	09 f0       	breq	.+2      	; 0xe21a <_Z6rotateP7COORD3DS_S0_+0x25a>
    e218:	29 cf       	rjmp	.-430    	; 0xe06c <_Z6rotateP7COORD3DS_S0_+0xac>
    COORD3D O = xz2xyz (getOffset(pata));
    posicion.patas[pata] = resta (suma (applyMatrix (resta (suma (pos_ref[pata], O), centro), matrix), centro), O);
  }
  return posicion;
} 
    e21a:	2c 96       	adiw	r28, 0x0c	; 12
    e21c:	8f ad       	ldd	r24, Y+63	; 0x3f
    e21e:	2c 97       	sbiw	r28, 0x0c	; 12
    e220:	2d 96       	adiw	r28, 0x0d	; 13
    e222:	9f ad       	ldd	r25, Y+63	; 0x3f
    e224:	2d 97       	sbiw	r28, 0x0d	; 13
    e226:	c4 5b       	subi	r28, 0xB4	; 180
    e228:	df 4f       	sbci	r29, 0xFF	; 255
    e22a:	0f b6       	in	r0, 0x3f	; 63
    e22c:	f8 94       	cli
    e22e:	de bf       	out	0x3e, r29	; 62
    e230:	0f be       	out	0x3f, r0	; 63
    e232:	cd bf       	out	0x3d, r28	; 61
    e234:	cf 91       	pop	r28
    e236:	df 91       	pop	r29
    e238:	1f 91       	pop	r17
    e23a:	0f 91       	pop	r16
    e23c:	ff 90       	pop	r15
    e23e:	ef 90       	pop	r14
    e240:	df 90       	pop	r13
    e242:	cf 90       	pop	r12
    e244:	bf 90       	pop	r11
    e246:	af 90       	pop	r10
    e248:	9f 90       	pop	r9
    e24a:	8f 90       	pop	r8
    e24c:	7f 90       	pop	r7
    e24e:	6f 90       	pop	r6
    e250:	2f 90       	pop	r2
    e252:	08 95       	ret

0000e254 <_Z7abs2rel7COORD3Dh>:
		P[pata] = rel2abs (P[pata], pata);
	}
}

// transforma coordenadas absolutas (del robot) en relativas (de cada pata)
COORD3D abs2rel (COORD3D P, byte pata) {
    e254:	4f 92       	push	r4
    e256:	5f 92       	push	r5
    e258:	6f 92       	push	r6
    e25a:	7f 92       	push	r7
    e25c:	8f 92       	push	r8
    e25e:	9f 92       	push	r9
    e260:	af 92       	push	r10
    e262:	bf 92       	push	r11
    e264:	cf 92       	push	r12
    e266:	df 92       	push	r13
    e268:	ef 92       	push	r14
    e26a:	ff 92       	push	r15
    e26c:	0f 93       	push	r16
    e26e:	1f 93       	push	r17
    e270:	df 93       	push	r29
    e272:	cf 93       	push	r28
    e274:	cd b7       	in	r28, 0x3d	; 61
    e276:	de b7       	in	r29, 0x3e	; 62
    e278:	6c 97       	sbiw	r28, 0x1c	; 28
    e27a:	0f b6       	in	r0, 0x3f	; 63
    e27c:	f8 94       	cli
    e27e:	de bf       	out	0x3e, r29	; 62
    e280:	0f be       	out	0x3f, r0	; 63
    e282:	cd bf       	out	0x3d, r28	; 61
    e284:	4c 01       	movw	r8, r24
    e286:	c9 86       	std	Y+9, r12	; 0x09
    e288:	da 86       	std	Y+10, r13	; 0x0a
    e28a:	eb 86       	std	Y+11, r14	; 0x0b
    e28c:	fc 86       	std	Y+12, r15	; 0x0c
    e28e:	0d 87       	std	Y+13, r16	; 0x0d
    e290:	1e 87       	std	Y+14, r17	; 0x0e
    e292:	2f 87       	std	Y+15, r18	; 0x0f
    e294:	38 8b       	std	Y+16, r19	; 0x10
    e296:	49 8b       	std	Y+17, r20	; 0x11
    e298:	5a 8b       	std	Y+18, r21	; 0x12
    e29a:	6b 8b       	std	Y+19, r22	; 0x13
    e29c:	7c 8b       	std	Y+20, r23	; 0x14
    e29e:	8a 2d       	mov	r24, r10
    e2a0:	e9 88       	ldd	r14, Y+17	; 0x11
    e2a2:	fa 88       	ldd	r15, Y+18	; 0x12
    e2a4:	0b 89       	ldd	r16, Y+19	; 0x13
    e2a6:	1c 89       	ldd	r17, Y+20	; 0x14
    e2a8:	4d 84       	ldd	r4, Y+13	; 0x0d
    e2aa:	5e 84       	ldd	r5, Y+14	; 0x0e
    e2ac:	6f 84       	ldd	r6, Y+15	; 0x0f
    e2ae:	78 88       	ldd	r7, Y+16	; 0x10
    e2b0:	a9 84       	ldd	r10, Y+9	; 0x09
    e2b2:	ba 84       	ldd	r11, Y+10	; 0x0a
    e2b4:	cb 84       	ldd	r12, Y+11	; 0x0b
    e2b6:	dc 84       	ldd	r13, Y+12	; 0x0c
	return resta (P, xz2xyz (getOffset (pata)));
    e2b8:	0e 94 8f 6f 	call	0xdf1e	; 0xdf1e <_Z9getOffseth>
    e2bc:	2d 8b       	std	Y+21, r18	; 0x15
    e2be:	3e 8b       	std	Y+22, r19	; 0x16
    e2c0:	4f 8b       	std	Y+23, r20	; 0x17
    e2c2:	58 8f       	std	Y+24, r21	; 0x18
    e2c4:	69 8f       	std	Y+25, r22	; 0x19
    e2c6:	7a 8f       	std	Y+26, r23	; 0x1a
    e2c8:	8b 8f       	std	Y+27, r24	; 0x1b
    e2ca:	9c 8f       	std	Y+28, r25	; 0x1c
    e2cc:	de 01       	movw	r26, r28
    e2ce:	11 96       	adiw	r26, 0x01	; 1
    e2d0:	fe 01       	movw	r30, r28
    e2d2:	75 96       	adiw	r30, 0x15	; 21
    e2d4:	88 e0       	ldi	r24, 0x08	; 8
    e2d6:	01 90       	ld	r0, Z+
    e2d8:	0d 92       	st	X+, r0
    e2da:	81 50       	subi	r24, 0x01	; 1
    e2dc:	e1 f7       	brne	.-8      	; 0xe2d6 <_Z7abs2rel7COORD3Dh+0x82>
COORD2D suma (COORD2D punto1, COORD2D punto2) {
  return (COORD2D) {punto1.x + punto2.x, punto1.z + punto2.z}; 
}

COORD3D resta (COORD3D punto1, COORD3D punto2) {
  return (COORD3D) {punto1.x - punto2.x, punto1.y - punto2.y, punto1.z - punto2.z}; 
    e2de:	c8 01       	movw	r24, r16
    e2e0:	b7 01       	movw	r22, r14
    e2e2:	2d 81       	ldd	r18, Y+5	; 0x05
    e2e4:	3e 81       	ldd	r19, Y+6	; 0x06
    e2e6:	4f 81       	ldd	r20, Y+7	; 0x07
    e2e8:	58 85       	ldd	r21, Y+8	; 0x08
    e2ea:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    e2ee:	7b 01       	movw	r14, r22
    e2f0:	8c 01       	movw	r16, r24
    e2f2:	c6 01       	movw	r24, r12
    e2f4:	b5 01       	movw	r22, r10
    e2f6:	29 81       	ldd	r18, Y+1	; 0x01
    e2f8:	3a 81       	ldd	r19, Y+2	; 0x02
    e2fa:	4b 81       	ldd	r20, Y+3	; 0x03
    e2fc:	5c 81       	ldd	r21, Y+4	; 0x04
    e2fe:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    e302:	f4 01       	movw	r30, r8
    e304:	60 83       	st	Z, r22
    e306:	71 83       	std	Z+1, r23	; 0x01
    e308:	82 83       	std	Z+2, r24	; 0x02
    e30a:	93 83       	std	Z+3, r25	; 0x03
    e30c:	44 82       	std	Z+4, r4	; 0x04
    e30e:	55 82       	std	Z+5, r5	; 0x05
    e310:	66 82       	std	Z+6, r6	; 0x06
    e312:	77 82       	std	Z+7, r7	; 0x07
    e314:	c7 01       	movw	r24, r14
    e316:	d8 01       	movw	r26, r16
    e318:	80 87       	std	Z+8, r24	; 0x08
    e31a:	91 87       	std	Z+9, r25	; 0x09
    e31c:	a2 87       	std	Z+10, r26	; 0x0a
    e31e:	b3 87       	std	Z+11, r27	; 0x0b
}

// transforma coordenadas absolutas (del robot) en relativas (de cada pata)
COORD3D abs2rel (COORD3D P, byte pata) {
	return resta (P, xz2xyz (getOffset (pata)));
}
    e320:	c4 01       	movw	r24, r8
    e322:	6c 96       	adiw	r28, 0x1c	; 28
    e324:	0f b6       	in	r0, 0x3f	; 63
    e326:	f8 94       	cli
    e328:	de bf       	out	0x3e, r29	; 62
    e32a:	0f be       	out	0x3f, r0	; 63
    e32c:	cd bf       	out	0x3d, r28	; 61
    e32e:	cf 91       	pop	r28
    e330:	df 91       	pop	r29
    e332:	1f 91       	pop	r17
    e334:	0f 91       	pop	r16
    e336:	ff 90       	pop	r15
    e338:	ef 90       	pop	r14
    e33a:	df 90       	pop	r13
    e33c:	cf 90       	pop	r12
    e33e:	bf 90       	pop	r11
    e340:	af 90       	pop	r10
    e342:	9f 90       	pop	r9
    e344:	8f 90       	pop	r8
    e346:	7f 90       	pop	r7
    e348:	6f 90       	pop	r6
    e34a:	5f 90       	pop	r5
    e34c:	4f 90       	pop	r4
    e34e:	08 95       	ret

0000e350 <_Z7abs2relP7COORD3D>:
COORD2D abs2rel (COORD2D P, byte pata) {
	return resta (P, getOffset (pata));
}

// transforma toda una posición a coordenadas relativas
void abs2rel (COORD3D *P) {
    e350:	6f 92       	push	r6
    e352:	7f 92       	push	r7
    e354:	8f 92       	push	r8
    e356:	9f 92       	push	r9
    e358:	af 92       	push	r10
    e35a:	bf 92       	push	r11
    e35c:	cf 92       	push	r12
    e35e:	df 92       	push	r13
    e360:	ef 92       	push	r14
    e362:	ff 92       	push	r15
    e364:	0f 93       	push	r16
    e366:	1f 93       	push	r17
    e368:	df 93       	push	r29
    e36a:	cf 93       	push	r28
    e36c:	cd b7       	in	r28, 0x3d	; 61
    e36e:	de b7       	in	r29, 0x3e	; 62
    e370:	2c 97       	sbiw	r28, 0x0c	; 12
    e372:	0f b6       	in	r0, 0x3f	; 63
    e374:	f8 94       	cli
    e376:	de bf       	out	0x3e, r29	; 62
    e378:	0f be       	out	0x3f, r0	; 63
    e37a:	cd bf       	out	0x3d, r28	; 61
    e37c:	4c 01       	movw	r8, r24
    e37e:	bb 24       	eor	r11, r11
	for (byte pata=0; pata<6; pata++) {
		P[pata] = abs2rel (P[pata], pata);
    e380:	3e 01       	movw	r6, r28
    e382:	08 94       	sec
    e384:	61 1c       	adc	r6, r1
    e386:	71 1c       	adc	r7, r1
    e388:	c3 01       	movw	r24, r6
    e38a:	f4 01       	movw	r30, r8
    e38c:	c0 80       	ld	r12, Z
    e38e:	d1 80       	ldd	r13, Z+1	; 0x01
    e390:	e2 80       	ldd	r14, Z+2	; 0x02
    e392:	f3 80       	ldd	r15, Z+3	; 0x03
    e394:	04 81       	ldd	r16, Z+4	; 0x04
    e396:	15 81       	ldd	r17, Z+5	; 0x05
    e398:	26 81       	ldd	r18, Z+6	; 0x06
    e39a:	37 81       	ldd	r19, Z+7	; 0x07
    e39c:	40 85       	ldd	r20, Z+8	; 0x08
    e39e:	51 85       	ldd	r21, Z+9	; 0x09
    e3a0:	62 85       	ldd	r22, Z+10	; 0x0a
    e3a2:	73 85       	ldd	r23, Z+11	; 0x0b
    e3a4:	ab 2c       	mov	r10, r11
    e3a6:	0e 94 2a 71 	call	0xe254	; 0xe254 <_Z7abs2rel7COORD3Dh>
    e3aa:	d4 01       	movw	r26, r8
    e3ac:	f3 01       	movw	r30, r6
    e3ae:	8c e0       	ldi	r24, 0x0C	; 12
    e3b0:	01 90       	ld	r0, Z+
    e3b2:	0d 92       	st	X+, r0
    e3b4:	81 50       	subi	r24, 0x01	; 1
    e3b6:	e1 f7       	brne	.-8      	; 0xe3b0 <_Z7abs2relP7COORD3D+0x60>
	return resta (P, getOffset (pata));
}

// transforma toda una posición a coordenadas relativas
void abs2rel (COORD3D *P) {
	for (byte pata=0; pata<6; pata++) {
    e3b8:	b3 94       	inc	r11
    e3ba:	8c e0       	ldi	r24, 0x0C	; 12
    e3bc:	90 e0       	ldi	r25, 0x00	; 0
    e3be:	88 0e       	add	r8, r24
    e3c0:	99 1e       	adc	r9, r25
    e3c2:	96 e0       	ldi	r25, 0x06	; 6
    e3c4:	b9 16       	cp	r11, r25
    e3c6:	01 f7       	brne	.-64     	; 0xe388 <_Z7abs2relP7COORD3D+0x38>
		P[pata] = abs2rel (P[pata], pata);
	}
}
    e3c8:	2c 96       	adiw	r28, 0x0c	; 12
    e3ca:	0f b6       	in	r0, 0x3f	; 63
    e3cc:	f8 94       	cli
    e3ce:	de bf       	out	0x3e, r29	; 62
    e3d0:	0f be       	out	0x3f, r0	; 63
    e3d2:	cd bf       	out	0x3d, r28	; 61
    e3d4:	cf 91       	pop	r28
    e3d6:	df 91       	pop	r29
    e3d8:	1f 91       	pop	r17
    e3da:	0f 91       	pop	r16
    e3dc:	ff 90       	pop	r15
    e3de:	ef 90       	pop	r14
    e3e0:	df 90       	pop	r13
    e3e2:	cf 90       	pop	r12
    e3e4:	bf 90       	pop	r11
    e3e6:	af 90       	pop	r10
    e3e8:	9f 90       	pop	r9
    e3ea:	8f 90       	pop	r8
    e3ec:	7f 90       	pop	r7
    e3ee:	6f 90       	pop	r6
    e3f0:	08 95       	ret

0000e3f2 <_Z7rel2abs7COORD2Dh>:
COORD3D rel2abs (COORD3D P, byte pata) {
	return suma (P, xz2xyz (getOffset (pata)));
}

// transforma coordenadas relativas (de cada pata) en absolutas (del robot)
COORD2D rel2abs (COORD2D P, byte pata) {
    e3f2:	af 92       	push	r10
    e3f4:	bf 92       	push	r11
    e3f6:	cf 92       	push	r12
    e3f8:	df 92       	push	r13
    e3fa:	ef 92       	push	r14
    e3fc:	ff 92       	push	r15
    e3fe:	0f 93       	push	r16
    e400:	1f 93       	push	r17
    e402:	df 93       	push	r29
    e404:	cf 93       	push	r28
    e406:	cd b7       	in	r28, 0x3d	; 61
    e408:	de b7       	in	r29, 0x3e	; 62
    e40a:	a0 97       	sbiw	r28, 0x20	; 32
    e40c:	0f b6       	in	r0, 0x3f	; 63
    e40e:	f8 94       	cli
    e410:	de bf       	out	0x3e, r29	; 62
    e412:	0f be       	out	0x3f, r0	; 63
    e414:	cd bf       	out	0x3d, r28	; 61
    e416:	29 8b       	std	Y+17, r18	; 0x11
    e418:	3a 8b       	std	Y+18, r19	; 0x12
    e41a:	4b 8b       	std	Y+19, r20	; 0x13
    e41c:	5c 8b       	std	Y+20, r21	; 0x14
    e41e:	6d 8b       	std	Y+21, r22	; 0x15
    e420:	7e 8b       	std	Y+22, r23	; 0x16
    e422:	8f 8b       	std	Y+23, r24	; 0x17
    e424:	98 8f       	std	Y+24, r25	; 0x18
    e426:	80 2f       	mov	r24, r16
    e428:	ad 88       	ldd	r10, Y+21	; 0x15
    e42a:	be 88       	ldd	r11, Y+22	; 0x16
    e42c:	cf 88       	ldd	r12, Y+23	; 0x17
    e42e:	d8 8c       	ldd	r13, Y+24	; 0x18
    e430:	e9 88       	ldd	r14, Y+17	; 0x11
    e432:	fa 88       	ldd	r15, Y+18	; 0x12
    e434:	0b 89       	ldd	r16, Y+19	; 0x13
    e436:	1c 89       	ldd	r17, Y+20	; 0x14
	return suma (P, getOffset (pata));
    e438:	0e 94 8f 6f 	call	0xdf1e	; 0xdf1e <_Z9getOffseth>
    e43c:	29 8f       	std	Y+25, r18	; 0x19
    e43e:	3a 8f       	std	Y+26, r19	; 0x1a
    e440:	4b 8f       	std	Y+27, r20	; 0x1b
    e442:	5c 8f       	std	Y+28, r21	; 0x1c
    e444:	6d 8f       	std	Y+29, r22	; 0x1d
    e446:	7e 8f       	std	Y+30, r23	; 0x1e
    e448:	8f 8f       	std	Y+31, r24	; 0x1f
    e44a:	98 a3       	std	Y+32, r25	; 0x20
    e44c:	de 01       	movw	r26, r28
    e44e:	11 96       	adiw	r26, 0x01	; 1
    e450:	fe 01       	movw	r30, r28
    e452:	79 96       	adiw	r30, 0x19	; 25
    e454:	88 e0       	ldi	r24, 0x08	; 8
    e456:	01 90       	ld	r0, Z+
    e458:	0d 92       	st	X+, r0
    e45a:	81 50       	subi	r24, 0x01	; 1
    e45c:	e1 f7       	brne	.-8      	; 0xe456 <_Z7rel2abs7COORD2Dh+0x64>
COORD3D suma (COORD3D punto1, COORD3D punto2) {
  return (COORD3D) {punto1.x + punto2.x, punto1.y + punto2.y, punto1.z + punto2.z}; 
}

COORD2D suma (COORD2D punto1, COORD2D punto2) {
  return (COORD2D) {punto1.x + punto2.x, punto1.z + punto2.z}; 
    e45e:	c8 01       	movw	r24, r16
    e460:	b7 01       	movw	r22, r14
    e462:	29 81       	ldd	r18, Y+1	; 0x01
    e464:	3a 81       	ldd	r19, Y+2	; 0x02
    e466:	4b 81       	ldd	r20, Y+3	; 0x03
    e468:	5c 81       	ldd	r21, Y+4	; 0x04
    e46a:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    e46e:	7b 01       	movw	r14, r22
    e470:	8c 01       	movw	r16, r24
    e472:	c6 01       	movw	r24, r12
    e474:	b5 01       	movw	r22, r10
    e476:	2d 81       	ldd	r18, Y+5	; 0x05
    e478:	3e 81       	ldd	r19, Y+6	; 0x06
    e47a:	4f 81       	ldd	r20, Y+7	; 0x07
    e47c:	58 85       	ldd	r21, Y+8	; 0x08
    e47e:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    e482:	6d 87       	std	Y+13, r22	; 0x0d
    e484:	7e 87       	std	Y+14, r23	; 0x0e
    e486:	8f 87       	std	Y+15, r24	; 0x0f
    e488:	98 8b       	std	Y+16, r25	; 0x10
    e48a:	c7 01       	movw	r24, r14
    e48c:	d8 01       	movw	r26, r16
    e48e:	89 87       	std	Y+9, r24	; 0x09
    e490:	9a 87       	std	Y+10, r25	; 0x0a
    e492:	ab 87       	std	Y+11, r26	; 0x0b
    e494:	bc 87       	std	Y+12, r27	; 0x0c
    e496:	29 85       	ldd	r18, Y+9	; 0x09
    e498:	3a 85       	ldd	r19, Y+10	; 0x0a
    e49a:	4b 85       	ldd	r20, Y+11	; 0x0b
    e49c:	5c 85       	ldd	r21, Y+12	; 0x0c
    e49e:	6d 85       	ldd	r22, Y+13	; 0x0d
    e4a0:	7e 85       	ldd	r23, Y+14	; 0x0e
}

// transforma coordenadas relativas (de cada pata) en absolutas (del robot)
COORD2D rel2abs (COORD2D P, byte pata) {
	return suma (P, getOffset (pata));
}
    e4a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    e4a4:	98 89       	ldd	r25, Y+16	; 0x10
    e4a6:	a0 96       	adiw	r28, 0x20	; 32
    e4a8:	0f b6       	in	r0, 0x3f	; 63
    e4aa:	f8 94       	cli
    e4ac:	de bf       	out	0x3e, r29	; 62
    e4ae:	0f be       	out	0x3f, r0	; 63
    e4b0:	cd bf       	out	0x3d, r28	; 61
    e4b2:	cf 91       	pop	r28
    e4b4:	df 91       	pop	r29
    e4b6:	1f 91       	pop	r17
    e4b8:	0f 91       	pop	r16
    e4ba:	ff 90       	pop	r15
    e4bc:	ef 90       	pop	r14
    e4be:	df 90       	pop	r13
    e4c0:	cf 90       	pop	r12
    e4c2:	bf 90       	pop	r11
    e4c4:	af 90       	pop	r10
    e4c6:	08 95       	ret

0000e4c8 <_Z7rel2abs7COORD3Dh>:
COORD2D getOffset (byte pata) {
  return (COORD2D) {ORIGEN*bin2sign(pata>2), (1-(pata%3))*SEPARA};      // nota: las patas de la izquierda son de x negativo
}

// transforma coordenadas relativas (de cada pata) en absolutas (del robot)
COORD3D rel2abs (COORD3D P, byte pata) {
    e4c8:	4f 92       	push	r4
    e4ca:	5f 92       	push	r5
    e4cc:	6f 92       	push	r6
    e4ce:	7f 92       	push	r7
    e4d0:	8f 92       	push	r8
    e4d2:	9f 92       	push	r9
    e4d4:	af 92       	push	r10
    e4d6:	bf 92       	push	r11
    e4d8:	cf 92       	push	r12
    e4da:	df 92       	push	r13
    e4dc:	ef 92       	push	r14
    e4de:	ff 92       	push	r15
    e4e0:	0f 93       	push	r16
    e4e2:	1f 93       	push	r17
    e4e4:	df 93       	push	r29
    e4e6:	cf 93       	push	r28
    e4e8:	cd b7       	in	r28, 0x3d	; 61
    e4ea:	de b7       	in	r29, 0x3e	; 62
    e4ec:	6c 97       	sbiw	r28, 0x1c	; 28
    e4ee:	0f b6       	in	r0, 0x3f	; 63
    e4f0:	f8 94       	cli
    e4f2:	de bf       	out	0x3e, r29	; 62
    e4f4:	0f be       	out	0x3f, r0	; 63
    e4f6:	cd bf       	out	0x3d, r28	; 61
    e4f8:	4c 01       	movw	r8, r24
    e4fa:	c9 86       	std	Y+9, r12	; 0x09
    e4fc:	da 86       	std	Y+10, r13	; 0x0a
    e4fe:	eb 86       	std	Y+11, r14	; 0x0b
    e500:	fc 86       	std	Y+12, r15	; 0x0c
    e502:	0d 87       	std	Y+13, r16	; 0x0d
    e504:	1e 87       	std	Y+14, r17	; 0x0e
    e506:	2f 87       	std	Y+15, r18	; 0x0f
    e508:	38 8b       	std	Y+16, r19	; 0x10
    e50a:	49 8b       	std	Y+17, r20	; 0x11
    e50c:	5a 8b       	std	Y+18, r21	; 0x12
    e50e:	6b 8b       	std	Y+19, r22	; 0x13
    e510:	7c 8b       	std	Y+20, r23	; 0x14
    e512:	8a 2d       	mov	r24, r10
    e514:	e9 88       	ldd	r14, Y+17	; 0x11
    e516:	fa 88       	ldd	r15, Y+18	; 0x12
    e518:	0b 89       	ldd	r16, Y+19	; 0x13
    e51a:	1c 89       	ldd	r17, Y+20	; 0x14
    e51c:	4d 84       	ldd	r4, Y+13	; 0x0d
    e51e:	5e 84       	ldd	r5, Y+14	; 0x0e
    e520:	6f 84       	ldd	r6, Y+15	; 0x0f
    e522:	78 88       	ldd	r7, Y+16	; 0x10
    e524:	a9 84       	ldd	r10, Y+9	; 0x09
    e526:	ba 84       	ldd	r11, Y+10	; 0x0a
    e528:	cb 84       	ldd	r12, Y+11	; 0x0b
    e52a:	dc 84       	ldd	r13, Y+12	; 0x0c
	return suma (P, xz2xyz (getOffset (pata)));
    e52c:	0e 94 8f 6f 	call	0xdf1e	; 0xdf1e <_Z9getOffseth>
    e530:	2d 8b       	std	Y+21, r18	; 0x15
    e532:	3e 8b       	std	Y+22, r19	; 0x16
    e534:	4f 8b       	std	Y+23, r20	; 0x17
    e536:	58 8f       	std	Y+24, r21	; 0x18
    e538:	69 8f       	std	Y+25, r22	; 0x19
    e53a:	7a 8f       	std	Y+26, r23	; 0x1a
    e53c:	8b 8f       	std	Y+27, r24	; 0x1b
    e53e:	9c 8f       	std	Y+28, r25	; 0x1c
    e540:	de 01       	movw	r26, r28
    e542:	11 96       	adiw	r26, 0x01	; 1
    e544:	fe 01       	movw	r30, r28
    e546:	75 96       	adiw	r30, 0x15	; 21
    e548:	88 e0       	ldi	r24, 0x08	; 8
    e54a:	01 90       	ld	r0, Z+
    e54c:	0d 92       	st	X+, r0
    e54e:	81 50       	subi	r24, 0x01	; 1
    e550:	e1 f7       	brne	.-8      	; 0xe54a <_Z7rel2abs7COORD3Dh+0x82>
float bezier (float p0, float p1, float p2, float t) {
  return sq(1-t)*p0 + 2*t*(1-t)*p1 + sq(t)*p2;
}

COORD3D suma (COORD3D punto1, COORD3D punto2) {
  return (COORD3D) {punto1.x + punto2.x, punto1.y + punto2.y, punto1.z + punto2.z}; 
    e552:	c8 01       	movw	r24, r16
    e554:	b7 01       	movw	r22, r14
    e556:	2d 81       	ldd	r18, Y+5	; 0x05
    e558:	3e 81       	ldd	r19, Y+6	; 0x06
    e55a:	4f 81       	ldd	r20, Y+7	; 0x07
    e55c:	58 85       	ldd	r21, Y+8	; 0x08
    e55e:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    e562:	7b 01       	movw	r14, r22
    e564:	8c 01       	movw	r16, r24
    e566:	c6 01       	movw	r24, r12
    e568:	b5 01       	movw	r22, r10
    e56a:	29 81       	ldd	r18, Y+1	; 0x01
    e56c:	3a 81       	ldd	r19, Y+2	; 0x02
    e56e:	4b 81       	ldd	r20, Y+3	; 0x03
    e570:	5c 81       	ldd	r21, Y+4	; 0x04
    e572:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    e576:	f4 01       	movw	r30, r8
    e578:	60 83       	st	Z, r22
    e57a:	71 83       	std	Z+1, r23	; 0x01
    e57c:	82 83       	std	Z+2, r24	; 0x02
    e57e:	93 83       	std	Z+3, r25	; 0x03
    e580:	c3 01       	movw	r24, r6
    e582:	b2 01       	movw	r22, r4
    e584:	20 e0       	ldi	r18, 0x00	; 0
    e586:	30 e0       	ldi	r19, 0x00	; 0
    e588:	40 e0       	ldi	r20, 0x00	; 0
    e58a:	50 e0       	ldi	r21, 0x00	; 0
    e58c:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    e590:	f4 01       	movw	r30, r8
    e592:	64 83       	std	Z+4, r22	; 0x04
    e594:	75 83       	std	Z+5, r23	; 0x05
    e596:	86 83       	std	Z+6, r24	; 0x06
    e598:	97 83       	std	Z+7, r25	; 0x07
    e59a:	c7 01       	movw	r24, r14
    e59c:	d8 01       	movw	r26, r16
    e59e:	80 87       	std	Z+8, r24	; 0x08
    e5a0:	91 87       	std	Z+9, r25	; 0x09
    e5a2:	a2 87       	std	Z+10, r26	; 0x0a
    e5a4:	b3 87       	std	Z+11, r27	; 0x0b
}

// transforma coordenadas relativas (de cada pata) en absolutas (del robot)
COORD3D rel2abs (COORD3D P, byte pata) {
	return suma (P, xz2xyz (getOffset (pata)));
}
    e5a6:	c4 01       	movw	r24, r8
    e5a8:	6c 96       	adiw	r28, 0x1c	; 28
    e5aa:	0f b6       	in	r0, 0x3f	; 63
    e5ac:	f8 94       	cli
    e5ae:	de bf       	out	0x3e, r29	; 62
    e5b0:	0f be       	out	0x3f, r0	; 63
    e5b2:	cd bf       	out	0x3d, r28	; 61
    e5b4:	cf 91       	pop	r28
    e5b6:	df 91       	pop	r29
    e5b8:	1f 91       	pop	r17
    e5ba:	0f 91       	pop	r16
    e5bc:	ff 90       	pop	r15
    e5be:	ef 90       	pop	r14
    e5c0:	df 90       	pop	r13
    e5c2:	cf 90       	pop	r12
    e5c4:	bf 90       	pop	r11
    e5c6:	af 90       	pop	r10
    e5c8:	9f 90       	pop	r9
    e5ca:	8f 90       	pop	r8
    e5cc:	7f 90       	pop	r7
    e5ce:	6f 90       	pop	r6
    e5d0:	5f 90       	pop	r5
    e5d2:	4f 90       	pop	r4
    e5d4:	08 95       	ret

0000e5d6 <_Z8ec_planoP7COORD3DS0_Pf>:
		P[pata] = abs2rel (P[pata], pata);
	}
}

// devuelve la ecuación del *plano (el vector normal + el término independiente 'd')
void ec_plano (COORD3D *plano, COORD3D *normal, float *d) { 
    e5d6:	2f 92       	push	r2
    e5d8:	3f 92       	push	r3
    e5da:	4f 92       	push	r4
    e5dc:	5f 92       	push	r5
    e5de:	6f 92       	push	r6
    e5e0:	7f 92       	push	r7
    e5e2:	8f 92       	push	r8
    e5e4:	9f 92       	push	r9
    e5e6:	af 92       	push	r10
    e5e8:	bf 92       	push	r11
    e5ea:	cf 92       	push	r12
    e5ec:	df 92       	push	r13
    e5ee:	ef 92       	push	r14
    e5f0:	ff 92       	push	r15
    e5f2:	0f 93       	push	r16
    e5f4:	1f 93       	push	r17
    e5f6:	df 93       	push	r29
    e5f8:	cf 93       	push	r28
    e5fa:	cd b7       	in	r28, 0x3d	; 61
    e5fc:	de b7       	in	r29, 0x3e	; 62
    e5fe:	ca 54       	subi	r28, 0x4A	; 74
    e600:	d0 40       	sbci	r29, 0x00	; 0
    e602:	0f b6       	in	r0, 0x3f	; 63
    e604:	f8 94       	cli
    e606:	de bf       	out	0x3e, r29	; 62
    e608:	0f be       	out	0x3f, r0	; 63
    e60a:	cd bf       	out	0x3d, r28	; 61
    e60c:	4c 01       	movw	r8, r24
    e60e:	1b 01       	movw	r2, r22
    e610:	5a af       	std	Y+58, r21	; 0x3a
    e612:	49 af       	std	Y+57, r20	; 0x39
	COORD3D b = rel2abs (plano[4], 4);
    e614:	ce 01       	movw	r24, r28
    e616:	01 96       	adiw	r24, 0x01	; 1
    e618:	d4 01       	movw	r26, r8
    e61a:	d0 96       	adiw	r26, 0x30	; 48
    e61c:	cc 90       	ld	r12, X
    e61e:	d0 97       	sbiw	r26, 0x30	; 48
    e620:	d1 96       	adiw	r26, 0x31	; 49
    e622:	dc 90       	ld	r13, X
    e624:	d1 97       	sbiw	r26, 0x31	; 49
    e626:	d2 96       	adiw	r26, 0x32	; 50
    e628:	ec 90       	ld	r14, X
    e62a:	d2 97       	sbiw	r26, 0x32	; 50
    e62c:	d3 96       	adiw	r26, 0x33	; 51
    e62e:	fc 90       	ld	r15, X
    e630:	d3 97       	sbiw	r26, 0x33	; 51
    e632:	d4 96       	adiw	r26, 0x34	; 52
    e634:	0c 91       	ld	r16, X
    e636:	d4 97       	sbiw	r26, 0x34	; 52
    e638:	d5 96       	adiw	r26, 0x35	; 53
    e63a:	1c 91       	ld	r17, X
    e63c:	d5 97       	sbiw	r26, 0x35	; 53
    e63e:	d6 96       	adiw	r26, 0x36	; 54
    e640:	2c 91       	ld	r18, X
    e642:	d6 97       	sbiw	r26, 0x36	; 54
    e644:	d7 96       	adiw	r26, 0x37	; 55
    e646:	3c 91       	ld	r19, X
    e648:	d7 97       	sbiw	r26, 0x37	; 55
    e64a:	d8 96       	adiw	r26, 0x38	; 56
    e64c:	4c 91       	ld	r20, X
    e64e:	d8 97       	sbiw	r26, 0x38	; 56
    e650:	d9 96       	adiw	r26, 0x39	; 57
    e652:	5c 91       	ld	r21, X
    e654:	d9 97       	sbiw	r26, 0x39	; 57
    e656:	da 96       	adiw	r26, 0x3a	; 58
    e658:	6c 91       	ld	r22, X
    e65a:	da 97       	sbiw	r26, 0x3a	; 58
    e65c:	db 96       	adiw	r26, 0x3b	; 59
    e65e:	7c 91       	ld	r23, X
    e660:	f4 e0       	ldi	r31, 0x04	; 4
    e662:	af 2e       	mov	r10, r31
    e664:	0e 94 64 72 	call	0xe4c8	; 0xe4c8 <_Z7rel2abs7COORD3Dh>
	// el vector normal es el producto vectorial de los 2 vectores generadores ab y bc
	*normal = producto_vectorial (resta(rel2abs(plano[0],0), b), resta(rel2abs(plano[2],2), b)); 
    e668:	ce 01       	movw	r24, r28
    e66a:	0d 96       	adiw	r24, 0x0d	; 13
    e66c:	f4 01       	movw	r30, r8
    e66e:	c0 80       	ld	r12, Z
    e670:	d1 80       	ldd	r13, Z+1	; 0x01
    e672:	e2 80       	ldd	r14, Z+2	; 0x02
    e674:	f3 80       	ldd	r15, Z+3	; 0x03
    e676:	04 81       	ldd	r16, Z+4	; 0x04
    e678:	15 81       	ldd	r17, Z+5	; 0x05
    e67a:	26 81       	ldd	r18, Z+6	; 0x06
    e67c:	37 81       	ldd	r19, Z+7	; 0x07
    e67e:	40 85       	ldd	r20, Z+8	; 0x08
    e680:	51 85       	ldd	r21, Z+9	; 0x09
    e682:	62 85       	ldd	r22, Z+10	; 0x0a
    e684:	73 85       	ldd	r23, Z+11	; 0x0b
    e686:	aa 24       	eor	r10, r10
    e688:	0e 94 64 72 	call	0xe4c8	; 0xe4c8 <_Z7rel2abs7COORD3Dh>
    e68c:	49 80       	ldd	r4, Y+1	; 0x01
    e68e:	5a 80       	ldd	r5, Y+2	; 0x02
    e690:	6b 80       	ldd	r6, Y+3	; 0x03
    e692:	7c 80       	ldd	r7, Y+4	; 0x04
    e694:	8d 81       	ldd	r24, Y+5	; 0x05
    e696:	9e 81       	ldd	r25, Y+6	; 0x06
    e698:	af 81       	ldd	r26, Y+7	; 0x07
    e69a:	b8 85       	ldd	r27, Y+8	; 0x08
    e69c:	8d ab       	std	Y+53, r24	; 0x35
    e69e:	9e ab       	std	Y+54, r25	; 0x36
    e6a0:	af ab       	std	Y+55, r26	; 0x37
    e6a2:	b8 af       	std	Y+56, r27	; 0x38
    e6a4:	89 85       	ldd	r24, Y+9	; 0x09
    e6a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    e6a8:	ab 85       	ldd	r26, Y+11	; 0x0b
    e6aa:	bc 85       	ldd	r27, Y+12	; 0x0c
    e6ac:	89 ab       	std	Y+49, r24	; 0x31
    e6ae:	9a ab       	std	Y+50, r25	; 0x32
    e6b0:	ab ab       	std	Y+51, r26	; 0x33
    e6b2:	bc ab       	std	Y+52, r27	; 0x34
COORD2D suma (COORD2D punto1, COORD2D punto2) {
  return (COORD2D) {punto1.x + punto2.x, punto1.z + punto2.z}; 
}

COORD3D resta (COORD3D punto1, COORD3D punto2) {
  return (COORD3D) {punto1.x - punto2.x, punto1.y - punto2.y, punto1.z - punto2.z}; 
    e6b4:	6d 85       	ldd	r22, Y+13	; 0x0d
    e6b6:	7e 85       	ldd	r23, Y+14	; 0x0e
    e6b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    e6ba:	98 89       	ldd	r25, Y+16	; 0x10
    e6bc:	a3 01       	movw	r20, r6
    e6be:	92 01       	movw	r18, r4
    e6c0:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    e6c4:	6b af       	std	Y+59, r22	; 0x3b
    e6c6:	7c af       	std	Y+60, r23	; 0x3c
    e6c8:	8d af       	std	Y+61, r24	; 0x3d
    e6ca:	9e af       	std	Y+62, r25	; 0x3e
    e6cc:	69 89       	ldd	r22, Y+17	; 0x11
    e6ce:	7a 89       	ldd	r23, Y+18	; 0x12
    e6d0:	8b 89       	ldd	r24, Y+19	; 0x13
    e6d2:	9c 89       	ldd	r25, Y+20	; 0x14
    e6d4:	2d a9       	ldd	r18, Y+53	; 0x35
    e6d6:	3e a9       	ldd	r19, Y+54	; 0x36
    e6d8:	4f a9       	ldd	r20, Y+55	; 0x37
    e6da:	58 ad       	ldd	r21, Y+56	; 0x38
    e6dc:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    e6e0:	23 96       	adiw	r28, 0x03	; 3
    e6e2:	6c af       	std	Y+60, r22	; 0x3c
    e6e4:	7d af       	std	Y+61, r23	; 0x3d
    e6e6:	8e af       	std	Y+62, r24	; 0x3e
    e6e8:	9f af       	std	Y+63, r25	; 0x3f
    e6ea:	23 97       	sbiw	r28, 0x03	; 3
    e6ec:	6d 89       	ldd	r22, Y+21	; 0x15
    e6ee:	7e 89       	ldd	r23, Y+22	; 0x16
    e6f0:	8f 89       	ldd	r24, Y+23	; 0x17
    e6f2:	98 8d       	ldd	r25, Y+24	; 0x18
    e6f4:	29 a9       	ldd	r18, Y+49	; 0x31
    e6f6:	3a a9       	ldd	r19, Y+50	; 0x32
    e6f8:	4b a9       	ldd	r20, Y+51	; 0x33
    e6fa:	5c a9       	ldd	r21, Y+52	; 0x34
    e6fc:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    e700:	27 96       	adiw	r28, 0x07	; 7
    e702:	6c af       	std	Y+60, r22	; 0x3c
    e704:	7d af       	std	Y+61, r23	; 0x3d
    e706:	8e af       	std	Y+62, r24	; 0x3e
    e708:	9f af       	std	Y+63, r25	; 0x3f
    e70a:	27 97       	sbiw	r28, 0x07	; 7

// devuelve la ecuación del *plano (el vector normal + el término independiente 'd')
void ec_plano (COORD3D *plano, COORD3D *normal, float *d) { 
	COORD3D b = rel2abs (plano[4], 4);
	// el vector normal es el producto vectorial de los 2 vectores generadores ab y bc
	*normal = producto_vectorial (resta(rel2abs(plano[0],0), b), resta(rel2abs(plano[2],2), b)); 
    e70c:	ce 01       	movw	r24, r28
    e70e:	49 96       	adiw	r24, 0x19	; 25
    e710:	d4 01       	movw	r26, r8
    e712:	58 96       	adiw	r26, 0x18	; 24
    e714:	cc 90       	ld	r12, X
    e716:	58 97       	sbiw	r26, 0x18	; 24
    e718:	59 96       	adiw	r26, 0x19	; 25
    e71a:	dc 90       	ld	r13, X
    e71c:	59 97       	sbiw	r26, 0x19	; 25
    e71e:	5a 96       	adiw	r26, 0x1a	; 26
    e720:	ec 90       	ld	r14, X
    e722:	5a 97       	sbiw	r26, 0x1a	; 26
    e724:	5b 96       	adiw	r26, 0x1b	; 27
    e726:	fc 90       	ld	r15, X
    e728:	5b 97       	sbiw	r26, 0x1b	; 27
    e72a:	5c 96       	adiw	r26, 0x1c	; 28
    e72c:	0c 91       	ld	r16, X
    e72e:	5c 97       	sbiw	r26, 0x1c	; 28
    e730:	5d 96       	adiw	r26, 0x1d	; 29
    e732:	1c 91       	ld	r17, X
    e734:	5d 97       	sbiw	r26, 0x1d	; 29
    e736:	5e 96       	adiw	r26, 0x1e	; 30
    e738:	2c 91       	ld	r18, X
    e73a:	5e 97       	sbiw	r26, 0x1e	; 30
    e73c:	5f 96       	adiw	r26, 0x1f	; 31
    e73e:	3c 91       	ld	r19, X
    e740:	5f 97       	sbiw	r26, 0x1f	; 31
    e742:	90 96       	adiw	r26, 0x20	; 32
    e744:	4c 91       	ld	r20, X
    e746:	90 97       	sbiw	r26, 0x20	; 32
    e748:	91 96       	adiw	r26, 0x21	; 33
    e74a:	5c 91       	ld	r21, X
    e74c:	91 97       	sbiw	r26, 0x21	; 33
    e74e:	92 96       	adiw	r26, 0x22	; 34
    e750:	6c 91       	ld	r22, X
    e752:	92 97       	sbiw	r26, 0x22	; 34
    e754:	93 96       	adiw	r26, 0x23	; 35
    e756:	7c 91       	ld	r23, X
    e758:	e2 e0       	ldi	r30, 0x02	; 2
    e75a:	ae 2e       	mov	r10, r30
    e75c:	0e 94 64 72 	call	0xe4c8	; 0xe4c8 <_Z7rel2abs7COORD3Dh>
COORD2D suma (COORD2D punto1, COORD2D punto2) {
  return (COORD2D) {punto1.x + punto2.x, punto1.z + punto2.z}; 
}

COORD3D resta (COORD3D punto1, COORD3D punto2) {
  return (COORD3D) {punto1.x - punto2.x, punto1.y - punto2.y, punto1.z - punto2.z}; 
    e760:	69 8d       	ldd	r22, Y+25	; 0x19
    e762:	7a 8d       	ldd	r23, Y+26	; 0x1a
    e764:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e766:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e768:	a3 01       	movw	r20, r6
    e76a:	92 01       	movw	r18, r4
    e76c:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    e770:	5b 01       	movw	r10, r22
    e772:	6c 01       	movw	r12, r24
    e774:	6d 8d       	ldd	r22, Y+29	; 0x1d
    e776:	7e 8d       	ldd	r23, Y+30	; 0x1e
    e778:	8f 8d       	ldd	r24, Y+31	; 0x1f
    e77a:	98 a1       	ldd	r25, Y+32	; 0x20
    e77c:	2d a9       	ldd	r18, Y+53	; 0x35
    e77e:	3e a9       	ldd	r19, Y+54	; 0x36
    e780:	4f a9       	ldd	r20, Y+55	; 0x37
    e782:	58 ad       	ldd	r21, Y+56	; 0x38
    e784:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    e788:	2b 96       	adiw	r28, 0x0b	; 11
    e78a:	6c af       	std	Y+60, r22	; 0x3c
    e78c:	7d af       	std	Y+61, r23	; 0x3d
    e78e:	8e af       	std	Y+62, r24	; 0x3e
    e790:	9f af       	std	Y+63, r25	; 0x3f
    e792:	2b 97       	sbiw	r28, 0x0b	; 11
    e794:	69 a1       	ldd	r22, Y+33	; 0x21
    e796:	7a a1       	ldd	r23, Y+34	; 0x22
    e798:	8b a1       	ldd	r24, Y+35	; 0x23
    e79a:	9c a1       	ldd	r25, Y+36	; 0x24
    e79c:	29 a9       	ldd	r18, Y+49	; 0x31
    e79e:	3a a9       	ldd	r19, Y+50	; 0x32
    e7a0:	4b a9       	ldd	r20, Y+51	; 0x33
    e7a2:	5c a9       	ldd	r21, Y+52	; 0x34
    e7a4:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    e7a8:	2b 01       	movw	r4, r22
    e7aa:	3c 01       	movw	r6, r24

// devuelve la ecuación del *plano (el vector normal + el término independiente 'd')
void ec_plano (COORD3D *plano, COORD3D *normal, float *d) { 
	COORD3D b = rel2abs (plano[4], 4);
	// el vector normal es el producto vectorial de los 2 vectores generadores ab y bc
	*normal = producto_vectorial (resta(rel2abs(plano[0],0), b), resta(rel2abs(plano[2],2), b)); 
    e7ac:	6b ad       	ldd	r22, Y+59	; 0x3b
    e7ae:	7c ad       	ldd	r23, Y+60	; 0x3c
    e7b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    e7b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    e7b4:	2b 96       	adiw	r28, 0x0b	; 11
    e7b6:	2c ad       	ldd	r18, Y+60	; 0x3c
    e7b8:	3d ad       	ldd	r19, Y+61	; 0x3d
    e7ba:	4e ad       	ldd	r20, Y+62	; 0x3e
    e7bc:	5f ad       	ldd	r21, Y+63	; 0x3f
    e7be:	2b 97       	sbiw	r28, 0x0b	; 11
    e7c0:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    e7c4:	7b 01       	movw	r14, r22
    e7c6:	8c 01       	movw	r16, r24
    e7c8:	23 96       	adiw	r28, 0x03	; 3
    e7ca:	6c ad       	ldd	r22, Y+60	; 0x3c
    e7cc:	7d ad       	ldd	r23, Y+61	; 0x3d
    e7ce:	8e ad       	ldd	r24, Y+62	; 0x3e
    e7d0:	9f ad       	ldd	r25, Y+63	; 0x3f
    e7d2:	23 97       	sbiw	r28, 0x03	; 3
    e7d4:	a6 01       	movw	r20, r12
    e7d6:	95 01       	movw	r18, r10
    e7d8:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    e7dc:	9b 01       	movw	r18, r22
    e7de:	ac 01       	movw	r20, r24
    e7e0:	c8 01       	movw	r24, r16
    e7e2:	b7 01       	movw	r22, r14
    e7e4:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    e7e8:	f1 01       	movw	r30, r2
    e7ea:	60 87       	std	Z+8, r22	; 0x08
    e7ec:	71 87       	std	Z+9, r23	; 0x09
    e7ee:	82 87       	std	Z+10, r24	; 0x0a
    e7f0:	93 87       	std	Z+11, r25	; 0x0b
    e7f2:	27 96       	adiw	r28, 0x07	; 7
    e7f4:	6c ad       	ldd	r22, Y+60	; 0x3c
    e7f6:	7d ad       	ldd	r23, Y+61	; 0x3d
    e7f8:	8e ad       	ldd	r24, Y+62	; 0x3e
    e7fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    e7fc:	27 97       	sbiw	r28, 0x07	; 7
    e7fe:	a6 01       	movw	r20, r12
    e800:	95 01       	movw	r18, r10
    e802:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    e806:	7b 01       	movw	r14, r22
    e808:	8c 01       	movw	r16, r24
    e80a:	6b ad       	ldd	r22, Y+59	; 0x3b
    e80c:	7c ad       	ldd	r23, Y+60	; 0x3c
    e80e:	8d ad       	ldd	r24, Y+61	; 0x3d
    e810:	9e ad       	ldd	r25, Y+62	; 0x3e
    e812:	a3 01       	movw	r20, r6
    e814:	92 01       	movw	r18, r4
    e816:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    e81a:	9b 01       	movw	r18, r22
    e81c:	ac 01       	movw	r20, r24
    e81e:	c8 01       	movw	r24, r16
    e820:	b7 01       	movw	r22, r14
    e822:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    e826:	d1 01       	movw	r26, r2
    e828:	14 96       	adiw	r26, 0x04	; 4
    e82a:	6d 93       	st	X+, r22
    e82c:	7d 93       	st	X+, r23
    e82e:	8d 93       	st	X+, r24
    e830:	9c 93       	st	X, r25
    e832:	17 97       	sbiw	r26, 0x07	; 7
    e834:	23 96       	adiw	r28, 0x03	; 3
    e836:	6c ad       	ldd	r22, Y+60	; 0x3c
    e838:	7d ad       	ldd	r23, Y+61	; 0x3d
    e83a:	8e ad       	ldd	r24, Y+62	; 0x3e
    e83c:	9f ad       	ldd	r25, Y+63	; 0x3f
    e83e:	23 97       	sbiw	r28, 0x03	; 3
    e840:	a3 01       	movw	r20, r6
    e842:	92 01       	movw	r18, r4
    e844:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    e848:	7b 01       	movw	r14, r22
    e84a:	8c 01       	movw	r16, r24
    e84c:	27 96       	adiw	r28, 0x07	; 7
    e84e:	6c ad       	ldd	r22, Y+60	; 0x3c
    e850:	7d ad       	ldd	r23, Y+61	; 0x3d
    e852:	8e ad       	ldd	r24, Y+62	; 0x3e
    e854:	9f ad       	ldd	r25, Y+63	; 0x3f
    e856:	27 97       	sbiw	r28, 0x07	; 7
    e858:	2b 96       	adiw	r28, 0x0b	; 11
    e85a:	2c ad       	ldd	r18, Y+60	; 0x3c
    e85c:	3d ad       	ldd	r19, Y+61	; 0x3d
    e85e:	4e ad       	ldd	r20, Y+62	; 0x3e
    e860:	5f ad       	ldd	r21, Y+63	; 0x3f
    e862:	2b 97       	sbiw	r28, 0x0b	; 11
    e864:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    e868:	9b 01       	movw	r18, r22
    e86a:	ac 01       	movw	r20, r24
    e86c:	c8 01       	movw	r24, r16
    e86e:	b7 01       	movw	r22, r14
    e870:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    e874:	f1 01       	movw	r30, r2
    e876:	60 83       	st	Z, r22
    e878:	71 83       	std	Z+1, r23	; 0x01
    e87a:	82 83       	std	Z+2, r24	; 0x02
    e87c:	93 83       	std	Z+3, r25	; 0x03
	// d es el término independiente. La ecuación sería: ax + by + cz + d = 0
	*d = - sumaproducto (rel2abs(plano[1],1), *normal);
    e87e:	ce 01       	movw	r24, r28
    e880:	85 96       	adiw	r24, 0x25	; 37
    e882:	d4 01       	movw	r26, r8
    e884:	1c 96       	adiw	r26, 0x0c	; 12
    e886:	cc 90       	ld	r12, X
    e888:	1c 97       	sbiw	r26, 0x0c	; 12
    e88a:	1d 96       	adiw	r26, 0x0d	; 13
    e88c:	dc 90       	ld	r13, X
    e88e:	1d 97       	sbiw	r26, 0x0d	; 13
    e890:	1e 96       	adiw	r26, 0x0e	; 14
    e892:	ec 90       	ld	r14, X
    e894:	1e 97       	sbiw	r26, 0x0e	; 14
    e896:	1f 96       	adiw	r26, 0x0f	; 15
    e898:	fc 90       	ld	r15, X
    e89a:	1f 97       	sbiw	r26, 0x0f	; 15
    e89c:	50 96       	adiw	r26, 0x10	; 16
    e89e:	0c 91       	ld	r16, X
    e8a0:	50 97       	sbiw	r26, 0x10	; 16
    e8a2:	51 96       	adiw	r26, 0x11	; 17
    e8a4:	1c 91       	ld	r17, X
    e8a6:	51 97       	sbiw	r26, 0x11	; 17
    e8a8:	52 96       	adiw	r26, 0x12	; 18
    e8aa:	2c 91       	ld	r18, X
    e8ac:	52 97       	sbiw	r26, 0x12	; 18
    e8ae:	53 96       	adiw	r26, 0x13	; 19
    e8b0:	3c 91       	ld	r19, X
    e8b2:	53 97       	sbiw	r26, 0x13	; 19
    e8b4:	54 96       	adiw	r26, 0x14	; 20
    e8b6:	4c 91       	ld	r20, X
    e8b8:	54 97       	sbiw	r26, 0x14	; 20
    e8ba:	55 96       	adiw	r26, 0x15	; 21
    e8bc:	5c 91       	ld	r21, X
    e8be:	55 97       	sbiw	r26, 0x15	; 21
    e8c0:	56 96       	adiw	r26, 0x16	; 22
    e8c2:	6c 91       	ld	r22, X
    e8c4:	56 97       	sbiw	r26, 0x16	; 22
    e8c6:	57 96       	adiw	r26, 0x17	; 23
    e8c8:	7c 91       	ld	r23, X
    e8ca:	aa 24       	eor	r10, r10
    e8cc:	a3 94       	inc	r10
    e8ce:	0e 94 64 72 	call	0xe4c8	; 0xe4c8 <_Z7rel2abs7COORD3Dh>
    e8d2:	6d a1       	ldd	r22, Y+37	; 0x25
    e8d4:	7e a1       	ldd	r23, Y+38	; 0x26
    e8d6:	8f a1       	ldd	r24, Y+39	; 0x27
    e8d8:	98 a5       	ldd	r25, Y+40	; 0x28
    e8da:	f1 01       	movw	r30, r2
    e8dc:	20 81       	ld	r18, Z
    e8de:	31 81       	ldd	r19, Z+1	; 0x01
    e8e0:	42 81       	ldd	r20, Z+2	; 0x02
    e8e2:	53 81       	ldd	r21, Z+3	; 0x03
    e8e4:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    e8e8:	7b 01       	movw	r14, r22
    e8ea:	8c 01       	movw	r16, r24
    e8ec:	69 a5       	ldd	r22, Y+41	; 0x29
    e8ee:	7a a5       	ldd	r23, Y+42	; 0x2a
    e8f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    e8f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    e8f4:	d1 01       	movw	r26, r2
    e8f6:	14 96       	adiw	r26, 0x04	; 4
    e8f8:	2d 91       	ld	r18, X+
    e8fa:	3d 91       	ld	r19, X+
    e8fc:	4d 91       	ld	r20, X+
    e8fe:	5c 91       	ld	r21, X
    e900:	17 97       	sbiw	r26, 0x07	; 7
    e902:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    e906:	9b 01       	movw	r18, r22
    e908:	ac 01       	movw	r20, r24
    e90a:	c8 01       	movw	r24, r16
    e90c:	b7 01       	movw	r22, r14
    e90e:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    e912:	7b 01       	movw	r14, r22
    e914:	8c 01       	movw	r16, r24
    e916:	6d a5       	ldd	r22, Y+45	; 0x2d
    e918:	7e a5       	ldd	r23, Y+46	; 0x2e
    e91a:	8f a5       	ldd	r24, Y+47	; 0x2f
    e91c:	98 a9       	ldd	r25, Y+48	; 0x30
    e91e:	f1 01       	movw	r30, r2
    e920:	20 85       	ldd	r18, Z+8	; 0x08
    e922:	31 85       	ldd	r19, Z+9	; 0x09
    e924:	42 85       	ldd	r20, Z+10	; 0x0a
    e926:	53 85       	ldd	r21, Z+11	; 0x0b
    e928:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    e92c:	9b 01       	movw	r18, r22
    e92e:	ac 01       	movw	r20, r24
    e930:	c8 01       	movw	r24, r16
    e932:	b7 01       	movw	r22, r14
    e934:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    e938:	90 58       	subi	r25, 0x80	; 128
    e93a:	a9 ad       	ldd	r26, Y+57	; 0x39
    e93c:	ba ad       	ldd	r27, Y+58	; 0x3a
    e93e:	6d 93       	st	X+, r22
    e940:	7d 93       	st	X+, r23
    e942:	8d 93       	st	X+, r24
    e944:	9c 93       	st	X, r25
    e946:	13 97       	sbiw	r26, 0x03	; 3
}
    e948:	c6 5b       	subi	r28, 0xB6	; 182
    e94a:	df 4f       	sbci	r29, 0xFF	; 255
    e94c:	0f b6       	in	r0, 0x3f	; 63
    e94e:	f8 94       	cli
    e950:	de bf       	out	0x3e, r29	; 62
    e952:	0f be       	out	0x3f, r0	; 63
    e954:	cd bf       	out	0x3d, r28	; 61
    e956:	cf 91       	pop	r28
    e958:	df 91       	pop	r29
    e95a:	1f 91       	pop	r17
    e95c:	0f 91       	pop	r16
    e95e:	ff 90       	pop	r15
    e960:	ef 90       	pop	r14
    e962:	df 90       	pop	r13
    e964:	cf 90       	pop	r12
    e966:	bf 90       	pop	r11
    e968:	af 90       	pop	r10
    e96a:	9f 90       	pop	r9
    e96c:	8f 90       	pop	r8
    e96e:	7f 90       	pop	r7
    e970:	6f 90       	pop	r6
    e972:	5f 90       	pop	r5
    e974:	4f 90       	pop	r4
    e976:	3f 90       	pop	r3
    e978:	2f 90       	pop	r2
    e97a:	08 95       	ret

0000e97c <_Z7rel2absP7COORD3D>:
COORD2D rel2abs (COORD2D P, byte pata) {
	return suma (P, getOffset (pata));
}

// transforma toda una posición a coordenadas absolutas
void rel2abs (COORD3D *P) {
    e97c:	6f 92       	push	r6
    e97e:	7f 92       	push	r7
    e980:	8f 92       	push	r8
    e982:	9f 92       	push	r9
    e984:	af 92       	push	r10
    e986:	bf 92       	push	r11
    e988:	cf 92       	push	r12
    e98a:	df 92       	push	r13
    e98c:	ef 92       	push	r14
    e98e:	ff 92       	push	r15
    e990:	0f 93       	push	r16
    e992:	1f 93       	push	r17
    e994:	df 93       	push	r29
    e996:	cf 93       	push	r28
    e998:	cd b7       	in	r28, 0x3d	; 61
    e99a:	de b7       	in	r29, 0x3e	; 62
    e99c:	2c 97       	sbiw	r28, 0x0c	; 12
    e99e:	0f b6       	in	r0, 0x3f	; 63
    e9a0:	f8 94       	cli
    e9a2:	de bf       	out	0x3e, r29	; 62
    e9a4:	0f be       	out	0x3f, r0	; 63
    e9a6:	cd bf       	out	0x3d, r28	; 61
    e9a8:	4c 01       	movw	r8, r24
    e9aa:	bb 24       	eor	r11, r11
	for (byte pata=0; pata<6; pata++) {
		P[pata] = rel2abs (P[pata], pata);
    e9ac:	3e 01       	movw	r6, r28
    e9ae:	08 94       	sec
    e9b0:	61 1c       	adc	r6, r1
    e9b2:	71 1c       	adc	r7, r1
    e9b4:	c3 01       	movw	r24, r6
    e9b6:	f4 01       	movw	r30, r8
    e9b8:	c0 80       	ld	r12, Z
    e9ba:	d1 80       	ldd	r13, Z+1	; 0x01
    e9bc:	e2 80       	ldd	r14, Z+2	; 0x02
    e9be:	f3 80       	ldd	r15, Z+3	; 0x03
    e9c0:	04 81       	ldd	r16, Z+4	; 0x04
    e9c2:	15 81       	ldd	r17, Z+5	; 0x05
    e9c4:	26 81       	ldd	r18, Z+6	; 0x06
    e9c6:	37 81       	ldd	r19, Z+7	; 0x07
    e9c8:	40 85       	ldd	r20, Z+8	; 0x08
    e9ca:	51 85       	ldd	r21, Z+9	; 0x09
    e9cc:	62 85       	ldd	r22, Z+10	; 0x0a
    e9ce:	73 85       	ldd	r23, Z+11	; 0x0b
    e9d0:	ab 2c       	mov	r10, r11
    e9d2:	0e 94 64 72 	call	0xe4c8	; 0xe4c8 <_Z7rel2abs7COORD3Dh>
    e9d6:	d4 01       	movw	r26, r8
    e9d8:	f3 01       	movw	r30, r6
    e9da:	8c e0       	ldi	r24, 0x0C	; 12
    e9dc:	01 90       	ld	r0, Z+
    e9de:	0d 92       	st	X+, r0
    e9e0:	81 50       	subi	r24, 0x01	; 1
    e9e2:	e1 f7       	brne	.-8      	; 0xe9dc <_Z7rel2absP7COORD3D+0x60>
	return suma (P, getOffset (pata));
}

// transforma toda una posición a coordenadas absolutas
void rel2abs (COORD3D *P) {
	for (byte pata=0; pata<6; pata++) {
    e9e4:	b3 94       	inc	r11
    e9e6:	8c e0       	ldi	r24, 0x0C	; 12
    e9e8:	90 e0       	ldi	r25, 0x00	; 0
    e9ea:	88 0e       	add	r8, r24
    e9ec:	99 1e       	adc	r9, r25
    e9ee:	96 e0       	ldi	r25, 0x06	; 6
    e9f0:	b9 16       	cp	r11, r25
    e9f2:	01 f7       	brne	.-64     	; 0xe9b4 <_Z7rel2absP7COORD3D+0x38>
		P[pata] = rel2abs (P[pata], pata);
	}
}
    e9f4:	2c 96       	adiw	r28, 0x0c	; 12
    e9f6:	0f b6       	in	r0, 0x3f	; 63
    e9f8:	f8 94       	cli
    e9fa:	de bf       	out	0x3e, r29	; 62
    e9fc:	0f be       	out	0x3f, r0	; 63
    e9fe:	cd bf       	out	0x3d, r28	; 61
    ea00:	cf 91       	pop	r28
    ea02:	df 91       	pop	r29
    ea04:	1f 91       	pop	r17
    ea06:	0f 91       	pop	r16
    ea08:	ff 90       	pop	r15
    ea0a:	ef 90       	pop	r14
    ea0c:	df 90       	pop	r13
    ea0e:	cf 90       	pop	r12
    ea10:	bf 90       	pop	r11
    ea12:	af 90       	pop	r10
    ea14:	9f 90       	pop	r9
    ea16:	8f 90       	pop	r8
    ea18:	7f 90       	pop	r7
    ea1a:	6f 90       	pop	r6
    ea1c:	08 95       	ret

0000ea1e <_Z10proyeccionP7COORD3DS0_>:
	// d es el término independiente. La ecuación sería: ax + by + cz + d = 0
	*d = - sumaproducto (rel2abs(plano[1],1), *normal);
}

// calcula la proyección de los *puntos sobre el *plano. El resultado es devuelto en *plano
void proyeccion (COORD3D *plano, COORD3D *puntos) {
    ea1e:	2f 92       	push	r2
    ea20:	6f 92       	push	r6
    ea22:	7f 92       	push	r7
    ea24:	8f 92       	push	r8
    ea26:	9f 92       	push	r9
    ea28:	af 92       	push	r10
    ea2a:	bf 92       	push	r11
    ea2c:	cf 92       	push	r12
    ea2e:	df 92       	push	r13
    ea30:	ef 92       	push	r14
    ea32:	ff 92       	push	r15
    ea34:	0f 93       	push	r16
    ea36:	1f 93       	push	r17
    ea38:	df 93       	push	r29
    ea3a:	cf 93       	push	r28
    ea3c:	cd b7       	in	r28, 0x3d	; 61
    ea3e:	de b7       	in	r29, 0x3e	; 62
    ea40:	e0 97       	sbiw	r28, 0x30	; 48
    ea42:	0f b6       	in	r0, 0x3f	; 63
    ea44:	f8 94       	cli
    ea46:	de bf       	out	0x3e, r29	; 62
    ea48:	0f be       	out	0x3f, r0	; 63
    ea4a:	cd bf       	out	0x3d, r28	; 61
    ea4c:	8d a7       	std	Y+45, r24	; 0x2d
    ea4e:	9e a7       	std	Y+46, r25	; 0x2e
    ea50:	6f a7       	std	Y+47, r22	; 0x2f
    ea52:	78 ab       	std	Y+48, r23	; 0x30
	rel2abs (puntos);
    ea54:	cb 01       	movw	r24, r22
    ea56:	0e 94 be 74 	call	0xe97c	; 0xe97c <_Z7rel2absP7COORD3D>
	COORD3D normal;                 // vector normal al plano
	float d;                      // término independiente de la ecuación del plano
	// calcula la ecuación
	ec_plano (plano, &normal, &d);        
    ea5a:	8d a5       	ldd	r24, Y+45	; 0x2d
    ea5c:	9e a5       	ldd	r25, Y+46	; 0x2e
    ea5e:	be 01       	movw	r22, r28
    ea60:	6b 5f       	subi	r22, 0xFB	; 251
    ea62:	7f 4f       	sbci	r23, 0xFF	; 255
    ea64:	ae 01       	movw	r20, r28
    ea66:	4f 5f       	subi	r20, 0xFF	; 255
    ea68:	5f 4f       	sbci	r21, 0xFF	; 255
    ea6a:	0e 94 eb 72 	call	0xe5d6	; 0xe5d6 <_Z8ec_planoP7COORD3DS0_Pf>
	// precalcula a^2 + b^2 + c^2
	float sqabc = sumaproducto (normal, normal);
    ea6e:	2d 81       	ldd	r18, Y+5	; 0x05
    ea70:	3e 81       	ldd	r19, Y+6	; 0x06
    ea72:	4f 81       	ldd	r20, Y+7	; 0x07
    ea74:	58 85       	ldd	r21, Y+8	; 0x08
    ea76:	e9 84       	ldd	r14, Y+9	; 0x09
    ea78:	fa 84       	ldd	r15, Y+10	; 0x0a
    ea7a:	0b 85       	ldd	r16, Y+11	; 0x0b
    ea7c:	1c 85       	ldd	r17, Y+12	; 0x0c
    ea7e:	6d 84       	ldd	r6, Y+13	; 0x0d
    ea80:	7e 84       	ldd	r7, Y+14	; 0x0e
    ea82:	8f 84       	ldd	r8, Y+15	; 0x0f
    ea84:	98 88       	ldd	r9, Y+16	; 0x10
COORD2D xyz2xz (COORD3D vector) {
  return (COORD2D) {vector.x, vector.z}; 
}

float sumaproducto (COORD3D vector1, COORD3D vector2) {
	return vector1.x*vector2.x + vector1.y*vector2.y + vector1.z*vector2.z;
    ea86:	ca 01       	movw	r24, r20
    ea88:	b9 01       	movw	r22, r18
    ea8a:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    ea8e:	5b 01       	movw	r10, r22
    ea90:	6c 01       	movw	r12, r24
    ea92:	c8 01       	movw	r24, r16
    ea94:	b7 01       	movw	r22, r14
    ea96:	a8 01       	movw	r20, r16
    ea98:	97 01       	movw	r18, r14
    ea9a:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    ea9e:	9b 01       	movw	r18, r22
    eaa0:	ac 01       	movw	r20, r24
    eaa2:	c6 01       	movw	r24, r12
    eaa4:	b5 01       	movw	r22, r10
    eaa6:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    eaaa:	7b 01       	movw	r14, r22
    eaac:	8c 01       	movw	r16, r24
    eaae:	c4 01       	movw	r24, r8
    eab0:	b3 01       	movw	r22, r6
    eab2:	a4 01       	movw	r20, r8
    eab4:	93 01       	movw	r18, r6
    eab6:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    eaba:	9b 01       	movw	r18, r22
    eabc:	ac 01       	movw	r20, r24
    eabe:	c8 01       	movw	r24, r16
    eac0:	b7 01       	movw	r22, r14
    eac2:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    eac6:	6d a3       	std	Y+37, r22	; 0x25
    eac8:	7e a3       	std	Y+38, r23	; 0x26
    eaca:	8f a3       	std	Y+39, r24	; 0x27
    eacc:	98 a7       	std	Y+40, r25	; 0x28
	ec_plano (plano, &normal, &d);        
	// precalcula a^2 + b^2 + c^2
	float sqabc = sumaproducto (normal, normal);
	// itera en las patas, calcula la proyección y asigna a plano
	for (byte pata=0; pata<6; pata++) {
		float t = (sumaproducto (puntos[pata], normal) + d) / sqabc;
    eace:	89 81       	ldd	r24, Y+1	; 0x01
    ead0:	9a 81       	ldd	r25, Y+2	; 0x02
    ead2:	ab 81       	ldd	r26, Y+3	; 0x03
    ead4:	bc 81       	ldd	r27, Y+4	; 0x04
    ead6:	89 a7       	std	Y+41, r24	; 0x29
    ead8:	9a a7       	std	Y+42, r25	; 0x2a
    eada:	ab a7       	std	Y+43, r26	; 0x2b
    eadc:	bc a7       	std	Y+44, r27	; 0x2c
    eade:	2f a5       	ldd	r18, Y+47	; 0x2f
    eae0:	38 a9       	ldd	r19, Y+48	; 0x30
    eae2:	c9 01       	movw	r24, r18
    eae4:	9c 8b       	std	Y+20, r25	; 0x14
    eae6:	8b 8b       	std	Y+19, r24	; 0x13
    eae8:	2d a5       	ldd	r18, Y+45	; 0x2d
    eaea:	3e a5       	ldd	r19, Y+46	; 0x2e
    eaec:	c9 01       	movw	r24, r18
    eaee:	9a 8b       	std	Y+18, r25	; 0x12
    eaf0:	89 8b       	std	Y+17, r24	; 0x11
    eaf2:	22 24       	eor	r2, r2
    eaf4:	ab 89       	ldd	r26, Y+19	; 0x13
    eaf6:	bc 89       	ldd	r27, Y+20	; 0x14
    eaf8:	8d 91       	ld	r24, X+
    eafa:	9d 91       	ld	r25, X+
    eafc:	0d 90       	ld	r0, X+
    eafe:	bc 91       	ld	r27, X
    eb00:	a0 2d       	mov	r26, r0
    eb02:	89 a3       	std	Y+33, r24	; 0x21
    eb04:	9a a3       	std	Y+34, r25	; 0x22
    eb06:	ab a3       	std	Y+35, r26	; 0x23
    eb08:	bc a3       	std	Y+36, r27	; 0x24
    eb0a:	ab 89       	ldd	r26, Y+19	; 0x13
    eb0c:	bc 89       	ldd	r27, Y+20	; 0x14
    eb0e:	14 96       	adiw	r26, 0x04	; 4
    eb10:	8d 91       	ld	r24, X+
    eb12:	9d 91       	ld	r25, X+
    eb14:	0d 90       	ld	r0, X+
    eb16:	bc 91       	ld	r27, X
    eb18:	a0 2d       	mov	r26, r0
    eb1a:	8d 8f       	std	Y+29, r24	; 0x1d
    eb1c:	9e 8f       	std	Y+30, r25	; 0x1e
    eb1e:	af 8f       	std	Y+31, r26	; 0x1f
    eb20:	b8 a3       	std	Y+32, r27	; 0x20
    eb22:	eb 89       	ldd	r30, Y+19	; 0x13
    eb24:	fc 89       	ldd	r31, Y+20	; 0x14
    eb26:	60 84       	ldd	r6, Z+8	; 0x08
    eb28:	71 84       	ldd	r7, Z+9	; 0x09
    eb2a:	82 84       	ldd	r8, Z+10	; 0x0a
    eb2c:	93 84       	ldd	r9, Z+11	; 0x0b
    eb2e:	8d 81       	ldd	r24, Y+5	; 0x05
    eb30:	9e 81       	ldd	r25, Y+6	; 0x06
    eb32:	af 81       	ldd	r26, Y+7	; 0x07
    eb34:	b8 85       	ldd	r27, Y+8	; 0x08
    eb36:	89 8f       	std	Y+25, r24	; 0x19
    eb38:	9a 8f       	std	Y+26, r25	; 0x1a
    eb3a:	ab 8f       	std	Y+27, r26	; 0x1b
    eb3c:	bc 8f       	std	Y+28, r27	; 0x1c
    eb3e:	89 85       	ldd	r24, Y+9	; 0x09
    eb40:	9a 85       	ldd	r25, Y+10	; 0x0a
    eb42:	ab 85       	ldd	r26, Y+11	; 0x0b
    eb44:	bc 85       	ldd	r27, Y+12	; 0x0c
    eb46:	8d 8b       	std	Y+21, r24	; 0x15
    eb48:	9e 8b       	std	Y+22, r25	; 0x16
    eb4a:	af 8b       	std	Y+23, r26	; 0x17
    eb4c:	b8 8f       	std	Y+24, r27	; 0x18
    eb4e:	ad 84       	ldd	r10, Y+13	; 0x0d
    eb50:	be 84       	ldd	r11, Y+14	; 0x0e
    eb52:	cf 84       	ldd	r12, Y+15	; 0x0f
    eb54:	d8 88       	ldd	r13, Y+16	; 0x10
    eb56:	69 a1       	ldd	r22, Y+33	; 0x21
    eb58:	7a a1       	ldd	r23, Y+34	; 0x22
    eb5a:	8b a1       	ldd	r24, Y+35	; 0x23
    eb5c:	9c a1       	ldd	r25, Y+36	; 0x24
    eb5e:	29 8d       	ldd	r18, Y+25	; 0x19
    eb60:	3a 8d       	ldd	r19, Y+26	; 0x1a
    eb62:	4b 8d       	ldd	r20, Y+27	; 0x1b
    eb64:	5c 8d       	ldd	r21, Y+28	; 0x1c
    eb66:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    eb6a:	7b 01       	movw	r14, r22
    eb6c:	8c 01       	movw	r16, r24
    eb6e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    eb70:	7e 8d       	ldd	r23, Y+30	; 0x1e
    eb72:	8f 8d       	ldd	r24, Y+31	; 0x1f
    eb74:	98 a1       	ldd	r25, Y+32	; 0x20
    eb76:	2d 89       	ldd	r18, Y+21	; 0x15
    eb78:	3e 89       	ldd	r19, Y+22	; 0x16
    eb7a:	4f 89       	ldd	r20, Y+23	; 0x17
    eb7c:	58 8d       	ldd	r21, Y+24	; 0x18
    eb7e:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    eb82:	9b 01       	movw	r18, r22
    eb84:	ac 01       	movw	r20, r24
    eb86:	c8 01       	movw	r24, r16
    eb88:	b7 01       	movw	r22, r14
    eb8a:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    eb8e:	7b 01       	movw	r14, r22
    eb90:	8c 01       	movw	r16, r24
    eb92:	c4 01       	movw	r24, r8
    eb94:	b3 01       	movw	r22, r6
    eb96:	a6 01       	movw	r20, r12
    eb98:	95 01       	movw	r18, r10
    eb9a:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    eb9e:	9b 01       	movw	r18, r22
    eba0:	ac 01       	movw	r20, r24
    eba2:	c8 01       	movw	r24, r16
    eba4:	b7 01       	movw	r22, r14
    eba6:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    ebaa:	29 a5       	ldd	r18, Y+41	; 0x29
    ebac:	3a a5       	ldd	r19, Y+42	; 0x2a
    ebae:	4b a5       	ldd	r20, Y+43	; 0x2b
    ebb0:	5c a5       	ldd	r21, Y+44	; 0x2c
    ebb2:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    ebb6:	2d a1       	ldd	r18, Y+37	; 0x25
    ebb8:	3e a1       	ldd	r19, Y+38	; 0x26
    ebba:	4f a1       	ldd	r20, Y+39	; 0x27
    ebbc:	58 a5       	ldd	r21, Y+40	; 0x28
    ebbe:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divsf3>
    ebc2:	7b 01       	movw	r14, r22
    ebc4:	8c 01       	movw	r16, r24
		COORD3D V = producto (normal, t);
		plano [pata] = resta (puntos[pata], V);
    ebc6:	a6 01       	movw	r20, r12
    ebc8:	95 01       	movw	r18, r10
    ebca:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    ebce:	9b 01       	movw	r18, r22
    ebd0:	ac 01       	movw	r20, r24
    ebd2:	c4 01       	movw	r24, r8
    ebd4:	b3 01       	movw	r22, r6
    ebd6:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    ebda:	a9 89       	ldd	r26, Y+17	; 0x11
    ebdc:	ba 89       	ldd	r27, Y+18	; 0x12
    ebde:	18 96       	adiw	r26, 0x08	; 8
    ebe0:	6d 93       	st	X+, r22
    ebe2:	7d 93       	st	X+, r23
    ebe4:	8d 93       	st	X+, r24
    ebe6:	9c 93       	st	X, r25
    ebe8:	1b 97       	sbiw	r26, 0x0b	; 11
    ebea:	c8 01       	movw	r24, r16
    ebec:	b7 01       	movw	r22, r14
    ebee:	2d 89       	ldd	r18, Y+21	; 0x15
    ebf0:	3e 89       	ldd	r19, Y+22	; 0x16
    ebf2:	4f 89       	ldd	r20, Y+23	; 0x17
    ebf4:	58 8d       	ldd	r21, Y+24	; 0x18
    ebf6:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    ebfa:	9b 01       	movw	r18, r22
    ebfc:	ac 01       	movw	r20, r24
    ebfe:	6d 8d       	ldd	r22, Y+29	; 0x1d
    ec00:	7e 8d       	ldd	r23, Y+30	; 0x1e
    ec02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    ec04:	98 a1       	ldd	r25, Y+32	; 0x20
    ec06:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    ec0a:	e9 89       	ldd	r30, Y+17	; 0x11
    ec0c:	fa 89       	ldd	r31, Y+18	; 0x12
    ec0e:	64 83       	std	Z+4, r22	; 0x04
    ec10:	75 83       	std	Z+5, r23	; 0x05
    ec12:	86 83       	std	Z+6, r24	; 0x06
    ec14:	97 83       	std	Z+7, r25	; 0x07
    ec16:	c8 01       	movw	r24, r16
    ec18:	b7 01       	movw	r22, r14
    ec1a:	29 8d       	ldd	r18, Y+25	; 0x19
    ec1c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    ec1e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    ec20:	5c 8d       	ldd	r21, Y+28	; 0x1c
    ec22:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    ec26:	9b 01       	movw	r18, r22
    ec28:	ac 01       	movw	r20, r24
    ec2a:	69 a1       	ldd	r22, Y+33	; 0x21
    ec2c:	7a a1       	ldd	r23, Y+34	; 0x22
    ec2e:	8b a1       	ldd	r24, Y+35	; 0x23
    ec30:	9c a1       	ldd	r25, Y+36	; 0x24
    ec32:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    ec36:	a9 89       	ldd	r26, Y+17	; 0x11
    ec38:	ba 89       	ldd	r27, Y+18	; 0x12
    ec3a:	6d 93       	st	X+, r22
    ec3c:	7d 93       	st	X+, r23
    ec3e:	8d 93       	st	X+, r24
    ec40:	9c 93       	st	X, r25
    ec42:	13 97       	sbiw	r26, 0x03	; 3
	// calcula la ecuación
	ec_plano (plano, &normal, &d);        
	// precalcula a^2 + b^2 + c^2
	float sqabc = sumaproducto (normal, normal);
	// itera en las patas, calcula la proyección y asigna a plano
	for (byte pata=0; pata<6; pata++) {
    ec44:	23 94       	inc	r2
    ec46:	eb 89       	ldd	r30, Y+19	; 0x13
    ec48:	fc 89       	ldd	r31, Y+20	; 0x14
    ec4a:	3c 96       	adiw	r30, 0x0c	; 12
    ec4c:	fc 8b       	std	Y+20, r31	; 0x14
    ec4e:	eb 8b       	std	Y+19, r30	; 0x13
    ec50:	1c 96       	adiw	r26, 0x0c	; 12
    ec52:	ba 8b       	std	Y+18, r27	; 0x12
    ec54:	a9 8b       	std	Y+17, r26	; 0x11
    ec56:	f6 e0       	ldi	r31, 0x06	; 6
    ec58:	2f 16       	cp	r2, r31
    ec5a:	09 f0       	breq	.+2      	; 0xec5e <_Z10proyeccionP7COORD3DS0_+0x240>
    ec5c:	4b cf       	rjmp	.-362    	; 0xeaf4 <_Z10proyeccionP7COORD3DS0_+0xd6>
		float t = (sumaproducto (puntos[pata], normal) + d) / sqabc;
		COORD3D V = producto (normal, t);
		plano [pata] = resta (puntos[pata], V);
	}
	abs2rel (puntos);    // nota: hubiera sido más eficiente hacer un memcpy, pero acá la velocidad no es crítica
    ec5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    ec60:	98 a9       	ldd	r25, Y+48	; 0x30
    ec62:	0e 94 a8 71 	call	0xe350	; 0xe350 <_Z7abs2relP7COORD3D>
	abs2rel (plano);
    ec66:	8d a5       	ldd	r24, Y+45	; 0x2d
    ec68:	9e a5       	ldd	r25, Y+46	; 0x2e
    ec6a:	0e 94 a8 71 	call	0xe350	; 0xe350 <_Z7abs2relP7COORD3D>
}
    ec6e:	e0 96       	adiw	r28, 0x30	; 48
    ec70:	0f b6       	in	r0, 0x3f	; 63
    ec72:	f8 94       	cli
    ec74:	de bf       	out	0x3e, r29	; 62
    ec76:	0f be       	out	0x3f, r0	; 63
    ec78:	cd bf       	out	0x3d, r28	; 61
    ec7a:	cf 91       	pop	r28
    ec7c:	df 91       	pop	r29
    ec7e:	1f 91       	pop	r17
    ec80:	0f 91       	pop	r16
    ec82:	ff 90       	pop	r15
    ec84:	ef 90       	pop	r14
    ec86:	df 90       	pop	r13
    ec88:	cf 90       	pop	r12
    ec8a:	bf 90       	pop	r11
    ec8c:	af 90       	pop	r10
    ec8e:	9f 90       	pop	r9
    ec90:	8f 90       	pop	r8
    ec92:	7f 90       	pop	r7
    ec94:	6f 90       	pop	r6
    ec96:	2f 90       	pop	r2
    ec98:	08 95       	ret

0000ec9a <_Z8hexagonoffff>:
  }
  return pata;
}

// genera una posición hexagonal semi-regular
POSICION hexagono (float altura, float ancho, float largo, float ancho_central) {
    ec9a:	2f 92       	push	r2
    ec9c:	3f 92       	push	r3
    ec9e:	4f 92       	push	r4
    eca0:	5f 92       	push	r5
    eca2:	6f 92       	push	r6
    eca4:	7f 92       	push	r7
    eca6:	8f 92       	push	r8
    eca8:	9f 92       	push	r9
    ecaa:	af 92       	push	r10
    ecac:	bf 92       	push	r11
    ecae:	cf 92       	push	r12
    ecb0:	df 92       	push	r13
    ecb2:	ef 92       	push	r14
    ecb4:	ff 92       	push	r15
    ecb6:	0f 93       	push	r16
    ecb8:	1f 93       	push	r17
    ecba:	df 93       	push	r29
    ecbc:	cf 93       	push	r28
    ecbe:	cd b7       	in	r28, 0x3d	; 61
    ecc0:	de b7       	in	r29, 0x3e	; 62
    ecc2:	a9 97       	sbiw	r28, 0x29	; 41
    ecc4:	0f b6       	in	r0, 0x3f	; 63
    ecc6:	f8 94       	cli
    ecc8:	de bf       	out	0x3e, r29	; 62
    ecca:	0f be       	out	0x3f, r0	; 63
    eccc:	cd bf       	out	0x3d, r28	; 61
    ecce:	8c a3       	std	Y+36, r24	; 0x24
    ecd0:	9d a3       	std	Y+37, r25	; 0x25
    ecd2:	08 8f       	std	Y+24, r16	; 0x18
    ecd4:	19 8f       	std	Y+25, r17	; 0x19
    ecd6:	2a 8f       	std	Y+26, r18	; 0x1a
    ecd8:	3b 8f       	std	Y+27, r19	; 0x1b
    ecda:	cc 8e       	std	Y+28, r12	; 0x1c
    ecdc:	dd 8e       	std	Y+29, r13	; 0x1d
    ecde:	ee 8e       	std	Y+30, r14	; 0x1e
    ece0:	ff 8e       	std	Y+31, r15	; 0x1f
    ece2:	88 a2       	std	Y+32, r8	; 0x20
    ece4:	99 a2       	std	Y+33, r9	; 0x21
    ece6:	aa a2       	std	Y+34, r10	; 0x22
    ece8:	bb a2       	std	Y+35, r11	; 0x23
    ecea:	9a 8b       	std	Y+18, r25	; 0x12
    ecec:	89 8b       	std	Y+17, r24	; 0x11
    ecee:	1f 8a       	std	Y+23, r1	; 0x17
  POSICION posicion;
  for (byte pata=0; pata<6; pata++) {
    COORD2D P = getOffset (pata);
    posicion.patas[pata] = (COORD3D) {(ancho+(ancho_central-ancho)*(P.z==0))*sign(P.x)/2 - P.x, -altura, largo*sign(P.z)/2 - P.z};
    ecf0:	db 01       	movw	r26, r22
    ecf2:	ca 01       	movw	r24, r20
    ecf4:	b0 58       	subi	r27, 0x80	; 128
    ecf6:	8e a3       	std	Y+38, r24	; 0x26
    ecf8:	9f a3       	std	Y+39, r25	; 0x27
    ecfa:	a8 a7       	std	Y+40, r26	; 0x28
    ecfc:	b9 a7       	std	Y+41, r27	; 0x29

// genera una posición hexagonal semi-regular
POSICION hexagono (float altura, float ancho, float largo, float ancho_central) {
  POSICION posicion;
  for (byte pata=0; pata<6; pata++) {
    COORD2D P = getOffset (pata);
    ecfe:	8f 89       	ldd	r24, Y+23	; 0x17
    ed00:	0e 94 8f 6f 	call	0xdf1e	; 0xdf1e <_Z9getOffseth>
    ed04:	29 87       	std	Y+9, r18	; 0x09
    ed06:	3a 87       	std	Y+10, r19	; 0x0a
    ed08:	4b 87       	std	Y+11, r20	; 0x0b
    ed0a:	5c 87       	std	Y+12, r21	; 0x0c
    ed0c:	6d 87       	std	Y+13, r22	; 0x0d
    ed0e:	7e 87       	std	Y+14, r23	; 0x0e
    ed10:	8f 87       	std	Y+15, r24	; 0x0f
    ed12:	98 8b       	std	Y+16, r25	; 0x10
    ed14:	de 01       	movw	r26, r28
    ed16:	11 96       	adiw	r26, 0x01	; 1
    ed18:	fe 01       	movw	r30, r28
    ed1a:	39 96       	adiw	r30, 0x09	; 9
    ed1c:	88 e0       	ldi	r24, 0x08	; 8
    ed1e:	01 90       	ld	r0, Z+
    ed20:	0d 92       	st	X+, r0
    ed22:	81 50       	subi	r24, 0x01	; 1
    ed24:	e1 f7       	brne	.-8      	; 0xed1e <_Z8hexagonoffff+0x84>
    ed26:	89 81       	ldd	r24, Y+1	; 0x01
    ed28:	9a 81       	ldd	r25, Y+2	; 0x02
    ed2a:	ab 81       	ldd	r26, Y+3	; 0x03
    ed2c:	bc 81       	ldd	r27, Y+4	; 0x04
    ed2e:	8b 8b       	std	Y+19, r24	; 0x13
    ed30:	9c 8b       	std	Y+20, r25	; 0x14
    ed32:	ad 8b       	std	Y+21, r26	; 0x15
    ed34:	be 8b       	std	Y+22, r27	; 0x16
    ed36:	2d 80       	ldd	r2, Y+5	; 0x05
    ed38:	3e 80       	ldd	r3, Y+6	; 0x06
    ed3a:	4f 80       	ldd	r4, Y+7	; 0x07
    ed3c:	58 84       	ldd	r5, Y+8	; 0x08
    posicion.patas[pata] = (COORD3D) {(ancho+(ancho_central-ancho)*(P.z==0))*sign(P.x)/2 - P.x, -altura, largo*sign(P.z)/2 - P.z};
    ed3e:	c2 01       	movw	r24, r4
    ed40:	b1 01       	movw	r22, r2
    ed42:	20 e0       	ldi	r18, 0x00	; 0
    ed44:	30 e0       	ldi	r19, 0x00	; 0
    ed46:	40 e0       	ldi	r20, 0x00	; 0
    ed48:	50 e0       	ldi	r21, 0x00	; 0
    ed4a:	0e 94 9a 7c 	call	0xf934	; 0xf934 <__cmpsf2>
    ed4e:	88 23       	and	r24, r24
    ed50:	59 f0       	breq	.+22     	; 0xed68 <_Z8hexagonoffff+0xce>
    ed52:	0f 2e       	mov	r0, r31
    ed54:	f0 e0       	ldi	r31, 0x00	; 0
    ed56:	af 2e       	mov	r10, r31
    ed58:	f0 e0       	ldi	r31, 0x00	; 0
    ed5a:	bf 2e       	mov	r11, r31
    ed5c:	f0 e0       	ldi	r31, 0x00	; 0
    ed5e:	cf 2e       	mov	r12, r31
    ed60:	f0 e0       	ldi	r31, 0x00	; 0
    ed62:	df 2e       	mov	r13, r31
    ed64:	f0 2d       	mov	r31, r0
    ed66:	0a c0       	rjmp	.+20     	; 0xed7c <_Z8hexagonoffff+0xe2>
    ed68:	0f 2e       	mov	r0, r31
    ed6a:	f0 e0       	ldi	r31, 0x00	; 0
    ed6c:	af 2e       	mov	r10, r31
    ed6e:	f0 e0       	ldi	r31, 0x00	; 0
    ed70:	bf 2e       	mov	r11, r31
    ed72:	f0 e8       	ldi	r31, 0x80	; 128
    ed74:	cf 2e       	mov	r12, r31
    ed76:	ff e3       	ldi	r31, 0x3F	; 63
    ed78:	df 2e       	mov	r13, r31
    ed7a:	f0 2d       	mov	r31, r0
    ed7c:	6b 89       	ldd	r22, Y+19	; 0x13
    ed7e:	7c 89       	ldd	r23, Y+20	; 0x14
    ed80:	8d 89       	ldd	r24, Y+21	; 0x15
    ed82:	9e 89       	ldd	r25, Y+22	; 0x16
    ed84:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <__fixsfsi>
    ed88:	dc 01       	movw	r26, r24
    ed8a:	cb 01       	movw	r24, r22
    ed8c:	0e 94 4c 66 	call	0xcc98	; 0xcc98 <_Z4signi>
    ed90:	e8 2e       	mov	r14, r24
    ed92:	c2 01       	movw	r24, r4
    ed94:	b1 01       	movw	r22, r2
    ed96:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <__fixsfsi>
    ed9a:	dc 01       	movw	r26, r24
    ed9c:	cb 01       	movw	r24, r22
    ed9e:	0e 94 4c 66 	call	0xcc98	; 0xcc98 <_Z4signi>
    eda2:	68 2e       	mov	r6, r24
    eda4:	68 a1       	ldd	r22, Y+32	; 0x20
    eda6:	79 a1       	ldd	r23, Y+33	; 0x21
    eda8:	8a a1       	ldd	r24, Y+34	; 0x22
    edaa:	9b a1       	ldd	r25, Y+35	; 0x23
    edac:	28 8d       	ldd	r18, Y+24	; 0x18
    edae:	39 8d       	ldd	r19, Y+25	; 0x19
    edb0:	4a 8d       	ldd	r20, Y+26	; 0x1a
    edb2:	5b 8d       	ldd	r21, Y+27	; 0x1b
    edb4:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    edb8:	a6 01       	movw	r20, r12
    edba:	95 01       	movw	r18, r10
    edbc:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    edc0:	9b 01       	movw	r18, r22
    edc2:	ac 01       	movw	r20, r24
    edc4:	68 8d       	ldd	r22, Y+24	; 0x18
    edc6:	79 8d       	ldd	r23, Y+25	; 0x19
    edc8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    edca:	9b 8d       	ldd	r25, Y+27	; 0x1b
    edcc:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    edd0:	5b 01       	movw	r10, r22
    edd2:	6c 01       	movw	r12, r24
    edd4:	ff 24       	eor	r15, r15
    edd6:	e7 fc       	sbrc	r14, 7
    edd8:	f0 94       	com	r15
    edda:	0f 2d       	mov	r16, r15
    eddc:	1f 2d       	mov	r17, r15
    edde:	c8 01       	movw	r24, r16
    ede0:	b7 01       	movw	r22, r14
    ede2:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    ede6:	9b 01       	movw	r18, r22
    ede8:	ac 01       	movw	r20, r24
    edea:	c6 01       	movw	r24, r12
    edec:	b5 01       	movw	r22, r10
    edee:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    edf2:	20 e0       	ldi	r18, 0x00	; 0
    edf4:	30 e0       	ldi	r19, 0x00	; 0
    edf6:	40 e0       	ldi	r20, 0x00	; 0
    edf8:	5f e3       	ldi	r21, 0x3F	; 63
    edfa:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    edfe:	2b 89       	ldd	r18, Y+19	; 0x13
    ee00:	3c 89       	ldd	r19, Y+20	; 0x14
    ee02:	4d 89       	ldd	r20, Y+21	; 0x15
    ee04:	5e 89       	ldd	r21, Y+22	; 0x16
    ee06:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    ee0a:	a9 89       	ldd	r26, Y+17	; 0x11
    ee0c:	ba 89       	ldd	r27, Y+18	; 0x12
    ee0e:	6d 93       	st	X+, r22
    ee10:	7d 93       	st	X+, r23
    ee12:	8d 93       	st	X+, r24
    ee14:	9c 93       	st	X, r25
    ee16:	13 97       	sbiw	r26, 0x03	; 3
    ee18:	8e a1       	ldd	r24, Y+38	; 0x26
    ee1a:	9f a1       	ldd	r25, Y+39	; 0x27
    ee1c:	a8 a5       	ldd	r26, Y+40	; 0x28
    ee1e:	b9 a5       	ldd	r27, Y+41	; 0x29
    ee20:	e9 89       	ldd	r30, Y+17	; 0x11
    ee22:	fa 89       	ldd	r31, Y+18	; 0x12
    ee24:	84 83       	std	Z+4, r24	; 0x04
    ee26:	95 83       	std	Z+5, r25	; 0x05
    ee28:	a6 83       	std	Z+6, r26	; 0x06
    ee2a:	b7 83       	std	Z+7, r27	; 0x07
    ee2c:	77 24       	eor	r7, r7
    ee2e:	67 fc       	sbrc	r6, 7
    ee30:	70 94       	com	r7
    ee32:	87 2c       	mov	r8, r7
    ee34:	97 2c       	mov	r9, r7
    ee36:	c4 01       	movw	r24, r8
    ee38:	b3 01       	movw	r22, r6
    ee3a:	0e 94 6d 7d 	call	0xfada	; 0xfada <__floatsisf>
    ee3e:	9b 01       	movw	r18, r22
    ee40:	ac 01       	movw	r20, r24
    ee42:	6c 8d       	ldd	r22, Y+28	; 0x1c
    ee44:	7d 8d       	ldd	r23, Y+29	; 0x1d
    ee46:	8e 8d       	ldd	r24, Y+30	; 0x1e
    ee48:	9f 8d       	ldd	r25, Y+31	; 0x1f
    ee4a:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    ee4e:	20 e0       	ldi	r18, 0x00	; 0
    ee50:	30 e0       	ldi	r19, 0x00	; 0
    ee52:	40 e0       	ldi	r20, 0x00	; 0
    ee54:	5f e3       	ldi	r21, 0x3F	; 63
    ee56:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    ee5a:	a2 01       	movw	r20, r4
    ee5c:	91 01       	movw	r18, r2
    ee5e:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    ee62:	a9 89       	ldd	r26, Y+17	; 0x11
    ee64:	ba 89       	ldd	r27, Y+18	; 0x12
    ee66:	18 96       	adiw	r26, 0x08	; 8
    ee68:	6d 93       	st	X+, r22
    ee6a:	7d 93       	st	X+, r23
    ee6c:	8d 93       	st	X+, r24
    ee6e:	9c 93       	st	X, r25
    ee70:	1b 97       	sbiw	r26, 0x0b	; 11
}

// genera una posición hexagonal semi-regular
POSICION hexagono (float altura, float ancho, float largo, float ancho_central) {
  POSICION posicion;
  for (byte pata=0; pata<6; pata++) {
    ee72:	bf 89       	ldd	r27, Y+23	; 0x17
    ee74:	bf 5f       	subi	r27, 0xFF	; 255
    ee76:	bf 8b       	std	Y+23, r27	; 0x17
    ee78:	e9 89       	ldd	r30, Y+17	; 0x11
    ee7a:	fa 89       	ldd	r31, Y+18	; 0x12
    ee7c:	3c 96       	adiw	r30, 0x0c	; 12
    ee7e:	fa 8b       	std	Y+18, r31	; 0x12
    ee80:	e9 8b       	std	Y+17, r30	; 0x11
    ee82:	b6 30       	cpi	r27, 0x06	; 6
    ee84:	09 f0       	breq	.+2      	; 0xee88 <_Z8hexagonoffff+0x1ee>
    ee86:	3b cf       	rjmp	.-394    	; 0xecfe <_Z8hexagonoffff+0x64>
    COORD2D P = getOffset (pata);
    posicion.patas[pata] = (COORD3D) {(ancho+(ancho_central-ancho)*(P.z==0))*sign(P.x)/2 - P.x, -altura, largo*sign(P.z)/2 - P.z};
  }  
  return posicion;
}
    ee88:	8c a1       	ldd	r24, Y+36	; 0x24
    ee8a:	9d a1       	ldd	r25, Y+37	; 0x25
    ee8c:	a9 96       	adiw	r28, 0x29	; 41
    ee8e:	0f b6       	in	r0, 0x3f	; 63
    ee90:	f8 94       	cli
    ee92:	de bf       	out	0x3e, r29	; 62
    ee94:	0f be       	out	0x3f, r0	; 63
    ee96:	cd bf       	out	0x3d, r28	; 61
    ee98:	cf 91       	pop	r28
    ee9a:	df 91       	pop	r29
    ee9c:	1f 91       	pop	r17
    ee9e:	0f 91       	pop	r16
    eea0:	ff 90       	pop	r15
    eea2:	ef 90       	pop	r14
    eea4:	df 90       	pop	r13
    eea6:	cf 90       	pop	r12
    eea8:	bf 90       	pop	r11
    eeaa:	af 90       	pop	r10
    eeac:	9f 90       	pop	r9
    eeae:	8f 90       	pop	r8
    eeb0:	7f 90       	pop	r7
    eeb2:	6f 90       	pop	r6
    eeb4:	5f 90       	pop	r5
    eeb6:	4f 90       	pop	r4
    eeb8:	3f 90       	pop	r3
    eeba:	2f 90       	pop	r2
    eebc:	08 95       	ret

0000eebe <_Z9distancia7COORD2DS_>:
void sumasigna (COORD2D *punto, COORD2D vector) {
  (*punto).x += vector.x;
  (*punto).z += vector.z; 
}

float distancia (COORD2D a, COORD2D b) {
    eebe:	af 92       	push	r10
    eec0:	bf 92       	push	r11
    eec2:	cf 92       	push	r12
    eec4:	df 92       	push	r13
    eec6:	ef 92       	push	r14
    eec8:	ff 92       	push	r15
    eeca:	0f 93       	push	r16
    eecc:	1f 93       	push	r17
    eece:	df 93       	push	r29
    eed0:	cf 93       	push	r28
    eed2:	cd b7       	in	r28, 0x3d	; 61
    eed4:	de b7       	in	r29, 0x3e	; 62
    eed6:	60 97       	sbiw	r28, 0x10	; 16
    eed8:	0f b6       	in	r0, 0x3f	; 63
    eeda:	f8 94       	cli
    eedc:	de bf       	out	0x3e, r29	; 62
    eede:	0f be       	out	0x3f, r0	; 63
    eee0:	cd bf       	out	0x3d, r28	; 61
    eee2:	29 83       	std	Y+1, r18	; 0x01
    eee4:	3a 83       	std	Y+2, r19	; 0x02
    eee6:	4b 83       	std	Y+3, r20	; 0x03
    eee8:	5c 83       	std	Y+4, r21	; 0x04
    eeea:	6d 83       	std	Y+5, r22	; 0x05
    eeec:	7e 83       	std	Y+6, r23	; 0x06
    eeee:	8f 83       	std	Y+7, r24	; 0x07
    eef0:	98 87       	std	Y+8, r25	; 0x08
    eef2:	a9 86       	std	Y+9, r10	; 0x09
    eef4:	ba 86       	std	Y+10, r11	; 0x0a
    eef6:	cb 86       	std	Y+11, r12	; 0x0b
    eef8:	dc 86       	std	Y+12, r13	; 0x0c
    eefa:	ed 86       	std	Y+13, r14	; 0x0d
    eefc:	fe 86       	std	Y+14, r15	; 0x0e
    eefe:	0f 87       	std	Y+15, r16	; 0x0f
    ef00:	18 8b       	std	Y+16, r17	; 0x10
  return hypot (a.x - b.x, a.z - b.z);
    ef02:	69 81       	ldd	r22, Y+1	; 0x01
    ef04:	7a 81       	ldd	r23, Y+2	; 0x02
    ef06:	8b 81       	ldd	r24, Y+3	; 0x03
    ef08:	9c 81       	ldd	r25, Y+4	; 0x04
    ef0a:	29 85       	ldd	r18, Y+9	; 0x09
    ef0c:	3a 85       	ldd	r19, Y+10	; 0x0a
    ef0e:	4b 85       	ldd	r20, Y+11	; 0x0b
    ef10:	5c 85       	ldd	r21, Y+12	; 0x0c
    ef12:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    ef16:	7b 01       	movw	r14, r22
    ef18:	8c 01       	movw	r16, r24
    ef1a:	6d 81       	ldd	r22, Y+5	; 0x05
    ef1c:	7e 81       	ldd	r23, Y+6	; 0x06
    ef1e:	8f 81       	ldd	r24, Y+7	; 0x07
    ef20:	98 85       	ldd	r25, Y+8	; 0x08
    ef22:	2d 85       	ldd	r18, Y+13	; 0x0d
    ef24:	3e 85       	ldd	r19, Y+14	; 0x0e
    ef26:	4f 85       	ldd	r20, Y+15	; 0x0f
    ef28:	58 89       	ldd	r21, Y+16	; 0x10
    ef2a:	0e 94 d3 7b 	call	0xf7a6	; 0xf7a6 <__subsf3>
    ef2e:	9b 01       	movw	r18, r22
    ef30:	ac 01       	movw	r20, r24
    ef32:	c8 01       	movw	r24, r16
    ef34:	b7 01       	movw	r22, r14
    ef36:	0e 94 a3 7e 	call	0xfd46	; 0xfd46 <hypot>
}
    ef3a:	60 96       	adiw	r28, 0x10	; 16
    ef3c:	0f b6       	in	r0, 0x3f	; 63
    ef3e:	f8 94       	cli
    ef40:	de bf       	out	0x3e, r29	; 62
    ef42:	0f be       	out	0x3f, r0	; 63
    ef44:	cd bf       	out	0x3d, r28	; 61
    ef46:	cf 91       	pop	r28
    ef48:	df 91       	pop	r29
    ef4a:	1f 91       	pop	r17
    ef4c:	0f 91       	pop	r16
    ef4e:	ff 90       	pop	r15
    ef50:	ef 90       	pop	r14
    ef52:	df 90       	pop	r13
    ef54:	cf 90       	pop	r12
    ef56:	bf 90       	pop	r11
    ef58:	af 90       	pop	r10
    ef5a:	08 95       	ret

0000ef5c <_Z17getRotationMatrixP7COORD2Df>:
  matrix[0].x = cosy*cosz;  matrix[1].x = cosy*sinz; matrix[2].x = -siny;  
  matrix[0].y = -cosx*sinz+sinx*siny*cosz;  matrix[1].y = cosx*cosz+sinx*siny*sinz; matrix[2].y = sinx*cosy;
  matrix[0].z = sinx*sinz+cosx*siny*cosz;  matrix[1].z = -sinx*cosz+cosx*siny*sinz; matrix[2].z = cosx*cosy;
}

void getRotationMatrix (COORD2D * matrix, float angulo) {
    ef5c:	8f 92       	push	r8
    ef5e:	9f 92       	push	r9
    ef60:	af 92       	push	r10
    ef62:	bf 92       	push	r11
    ef64:	cf 92       	push	r12
    ef66:	df 92       	push	r13
    ef68:	ef 92       	push	r14
    ef6a:	ff 92       	push	r15
    ef6c:	0f 93       	push	r16
    ef6e:	1f 93       	push	r17
    ef70:	4c 01       	movw	r8, r24
    ef72:	7a 01       	movw	r14, r20
    ef74:	8b 01       	movw	r16, r22
  float seno = sin (angulo);
    ef76:	cb 01       	movw	r24, r22
    ef78:	ba 01       	movw	r22, r20
    ef7a:	0e 94 5f 80 	call	0x100be	; 0x100be <sin>
    ef7e:	5b 01       	movw	r10, r22
    ef80:	6c 01       	movw	r12, r24
  float coseno = cos (angulo);
    ef82:	c8 01       	movw	r24, r16
    ef84:	b7 01       	movw	r22, r14
    ef86:	0e 94 9e 7c 	call	0xf93c	; 0xf93c <cos>
  matrix[0].x = coseno;  matrix[1].x = -seno;
    ef8a:	f4 01       	movw	r30, r8
    ef8c:	60 83       	st	Z, r22
    ef8e:	71 83       	std	Z+1, r23	; 0x01
    ef90:	82 83       	std	Z+2, r24	; 0x02
    ef92:	93 83       	std	Z+3, r25	; 0x03
    ef94:	a6 01       	movw	r20, r12
    ef96:	95 01       	movw	r18, r10
    ef98:	50 58       	subi	r21, 0x80	; 128
    ef9a:	20 87       	std	Z+8, r18	; 0x08
    ef9c:	31 87       	std	Z+9, r19	; 0x09
    ef9e:	42 87       	std	Z+10, r20	; 0x0a
    efa0:	53 87       	std	Z+11, r21	; 0x0b
  matrix[0].z = seno;  matrix[1].z = coseno;  
    efa2:	a4 82       	std	Z+4, r10	; 0x04
    efa4:	b5 82       	std	Z+5, r11	; 0x05
    efa6:	c6 82       	std	Z+6, r12	; 0x06
    efa8:	d7 82       	std	Z+7, r13	; 0x07
    efaa:	64 87       	std	Z+12, r22	; 0x0c
    efac:	75 87       	std	Z+13, r23	; 0x0d
    efae:	86 87       	std	Z+14, r24	; 0x0e
    efb0:	97 87       	std	Z+15, r25	; 0x0f
}
    efb2:	1f 91       	pop	r17
    efb4:	0f 91       	pop	r16
    efb6:	ff 90       	pop	r15
    efb8:	ef 90       	pop	r14
    efba:	df 90       	pop	r13
    efbc:	cf 90       	pop	r12
    efbe:	bf 90       	pop	r11
    efc0:	af 90       	pop	r10
    efc2:	9f 90       	pop	r9
    efc4:	8f 90       	pop	r8
    efc6:	08 95       	ret

0000efc8 <_Z17getRotationMatrixP7COORD3Dfff>:
  float x = P.x*matrix[0].x + P.z*matrix[1].x;    
  float z = P.x*matrix[0].z + P.z*matrix[1].z;  
  return (COORD2D) {x, z};
}

void getRotationMatrix (COORD3D * matrix, float angulox, float anguloy, float anguloz) {
    efc8:	2f 92       	push	r2
    efca:	3f 92       	push	r3
    efcc:	4f 92       	push	r4
    efce:	5f 92       	push	r5
    efd0:	6f 92       	push	r6
    efd2:	7f 92       	push	r7
    efd4:	8f 92       	push	r8
    efd6:	9f 92       	push	r9
    efd8:	af 92       	push	r10
    efda:	bf 92       	push	r11
    efdc:	cf 92       	push	r12
    efde:	df 92       	push	r13
    efe0:	ef 92       	push	r14
    efe2:	ff 92       	push	r15
    efe4:	0f 93       	push	r16
    efe6:	1f 93       	push	r17
    efe8:	df 93       	push	r29
    efea:	cf 93       	push	r28
    efec:	cd b7       	in	r28, 0x3d	; 61
    efee:	de b7       	in	r29, 0x3e	; 62
    eff0:	66 97       	sbiw	r28, 0x16	; 22
    eff2:	0f b6       	in	r0, 0x3f	; 63
    eff4:	f8 94       	cli
    eff6:	de bf       	out	0x3e, r29	; 62
    eff8:	0f be       	out	0x3f, r0	; 63
    effa:	cd bf       	out	0x3d, r28	; 61
    effc:	9e 8b       	std	Y+22, r25	; 0x16
    effe:	8d 8b       	std	Y+21, r24	; 0x15
    f000:	4a 01       	movw	r8, r20
    f002:	5b 01       	movw	r10, r22
    f004:	28 01       	movw	r4, r16
    f006:	39 01       	movw	r6, r18
  float sinx = sin (angulox); float cosx = cos (angulox);  
    f008:	cb 01       	movw	r24, r22
    f00a:	ba 01       	movw	r22, r20
    f00c:	0e 94 5f 80 	call	0x100be	; 0x100be <sin>
    f010:	6d 87       	std	Y+13, r22	; 0x0d
    f012:	7e 87       	std	Y+14, r23	; 0x0e
    f014:	8f 87       	std	Y+15, r24	; 0x0f
    f016:	98 8b       	std	Y+16, r25	; 0x10
    f018:	c5 01       	movw	r24, r10
    f01a:	b4 01       	movw	r22, r8
    f01c:	0e 94 9e 7c 	call	0xf93c	; 0xf93c <cos>
    f020:	69 87       	std	Y+9, r22	; 0x09
    f022:	7a 87       	std	Y+10, r23	; 0x0a
    f024:	8b 87       	std	Y+11, r24	; 0x0b
    f026:	9c 87       	std	Y+12, r25	; 0x0c
  float siny = sin (anguloy); float cosy = cos (anguloy);  
    f028:	c3 01       	movw	r24, r6
    f02a:	b2 01       	movw	r22, r4
    f02c:	0e 94 5f 80 	call	0x100be	; 0x100be <sin>
    f030:	6d 83       	std	Y+5, r22	; 0x05
    f032:	7e 83       	std	Y+6, r23	; 0x06
    f034:	8f 83       	std	Y+7, r24	; 0x07
    f036:	98 87       	std	Y+8, r25	; 0x08
    f038:	c3 01       	movw	r24, r6
    f03a:	b2 01       	movw	r22, r4
    f03c:	0e 94 9e 7c 	call	0xf93c	; 0xf93c <cos>
    f040:	69 83       	std	Y+1, r22	; 0x01
    f042:	7a 83       	std	Y+2, r23	; 0x02
    f044:	8b 83       	std	Y+3, r24	; 0x03
    f046:	9c 83       	std	Y+4, r25	; 0x04
  float sinz = sin (anguloz); float cosz = cos (anguloz); 
    f048:	c7 01       	movw	r24, r14
    f04a:	b6 01       	movw	r22, r12
    f04c:	0e 94 5f 80 	call	0x100be	; 0x100be <sin>
    f050:	1b 01       	movw	r2, r22
    f052:	2c 01       	movw	r4, r24
    f054:	c7 01       	movw	r24, r14
    f056:	b6 01       	movw	r22, r12
    f058:	0e 94 9e 7c 	call	0xf93c	; 0xf93c <cos>
    f05c:	5b 01       	movw	r10, r22
    f05e:	6c 01       	movw	r12, r24
  matrix[0].x = cosy*cosz;  matrix[1].x = cosy*sinz; matrix[2].x = -siny;  
    f060:	69 81       	ldd	r22, Y+1	; 0x01
    f062:	7a 81       	ldd	r23, Y+2	; 0x02
    f064:	8b 81       	ldd	r24, Y+3	; 0x03
    f066:	9c 81       	ldd	r25, Y+4	; 0x04
    f068:	a6 01       	movw	r20, r12
    f06a:	95 01       	movw	r18, r10
    f06c:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    f070:	ed 89       	ldd	r30, Y+21	; 0x15
    f072:	fe 89       	ldd	r31, Y+22	; 0x16
    f074:	60 83       	st	Z, r22
    f076:	71 83       	std	Z+1, r23	; 0x01
    f078:	82 83       	std	Z+2, r24	; 0x02
    f07a:	93 83       	std	Z+3, r25	; 0x03
    f07c:	3c 96       	adiw	r30, 0x0c	; 12
    f07e:	fc 8b       	std	Y+20, r31	; 0x14
    f080:	eb 8b       	std	Y+19, r30	; 0x13
    f082:	69 81       	ldd	r22, Y+1	; 0x01
    f084:	7a 81       	ldd	r23, Y+2	; 0x02
    f086:	8b 81       	ldd	r24, Y+3	; 0x03
    f088:	9c 81       	ldd	r25, Y+4	; 0x04
    f08a:	a2 01       	movw	r20, r4
    f08c:	91 01       	movw	r18, r2
    f08e:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    f092:	ed 89       	ldd	r30, Y+21	; 0x15
    f094:	fe 89       	ldd	r31, Y+22	; 0x16
    f096:	64 87       	std	Z+12, r22	; 0x0c
    f098:	75 87       	std	Z+13, r23	; 0x0d
    f09a:	86 87       	std	Z+14, r24	; 0x0e
    f09c:	97 87       	std	Z+15, r25	; 0x0f
    f09e:	78 96       	adiw	r30, 0x18	; 24
    f0a0:	fa 8b       	std	Y+18, r31	; 0x12
    f0a2:	e9 8b       	std	Y+17, r30	; 0x11
    f0a4:	8d 81       	ldd	r24, Y+5	; 0x05
    f0a6:	9e 81       	ldd	r25, Y+6	; 0x06
    f0a8:	af 81       	ldd	r26, Y+7	; 0x07
    f0aa:	b8 85       	ldd	r27, Y+8	; 0x08
    f0ac:	b0 58       	subi	r27, 0x80	; 128
    f0ae:	ed 89       	ldd	r30, Y+21	; 0x15
    f0b0:	fe 89       	ldd	r31, Y+22	; 0x16
    f0b2:	80 8f       	std	Z+24, r24	; 0x18
    f0b4:	91 8f       	std	Z+25, r25	; 0x19
    f0b6:	a2 8f       	std	Z+26, r26	; 0x1a
    f0b8:	b3 8f       	std	Z+27, r27	; 0x1b
  matrix[0].y = -cosx*sinz+sinx*siny*cosz;  matrix[1].y = cosx*cosz+sinx*siny*sinz; matrix[2].y = sinx*cosy;
    f0ba:	6d 85       	ldd	r22, Y+13	; 0x0d
    f0bc:	7e 85       	ldd	r23, Y+14	; 0x0e
    f0be:	8f 85       	ldd	r24, Y+15	; 0x0f
    f0c0:	98 89       	ldd	r25, Y+16	; 0x10
    f0c2:	2d 81       	ldd	r18, Y+5	; 0x05
    f0c4:	3e 81       	ldd	r19, Y+6	; 0x06
    f0c6:	4f 81       	ldd	r20, Y+7	; 0x07
    f0c8:	58 85       	ldd	r21, Y+8	; 0x08
    f0ca:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    f0ce:	3b 01       	movw	r6, r22
    f0d0:	4c 01       	movw	r8, r24
    f0d2:	69 85       	ldd	r22, Y+9	; 0x09
    f0d4:	7a 85       	ldd	r23, Y+10	; 0x0a
    f0d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    f0d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    f0da:	90 58       	subi	r25, 0x80	; 128
    f0dc:	a2 01       	movw	r20, r4
    f0de:	91 01       	movw	r18, r2
    f0e0:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    f0e4:	7b 01       	movw	r14, r22
    f0e6:	8c 01       	movw	r16, r24
    f0e8:	c4 01       	movw	r24, r8
    f0ea:	b3 01       	movw	r22, r6
    f0ec:	a6 01       	movw	r20, r12
    f0ee:	95 01       	movw	r18, r10
    f0f0:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    f0f4:	9b 01       	movw	r18, r22
    f0f6:	ac 01       	movw	r20, r24
    f0f8:	c8 01       	movw	r24, r16
    f0fa:	b7 01       	movw	r22, r14
    f0fc:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    f100:	ed 89       	ldd	r30, Y+21	; 0x15
    f102:	fe 89       	ldd	r31, Y+22	; 0x16
    f104:	64 83       	std	Z+4, r22	; 0x04
    f106:	75 83       	std	Z+5, r23	; 0x05
    f108:	86 83       	std	Z+6, r24	; 0x06
    f10a:	97 83       	std	Z+7, r25	; 0x07
    f10c:	69 85       	ldd	r22, Y+9	; 0x09
    f10e:	7a 85       	ldd	r23, Y+10	; 0x0a
    f110:	8b 85       	ldd	r24, Y+11	; 0x0b
    f112:	9c 85       	ldd	r25, Y+12	; 0x0c
    f114:	a6 01       	movw	r20, r12
    f116:	95 01       	movw	r18, r10
    f118:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    f11c:	7b 01       	movw	r14, r22
    f11e:	8c 01       	movw	r16, r24
    f120:	c4 01       	movw	r24, r8
    f122:	b3 01       	movw	r22, r6
    f124:	a2 01       	movw	r20, r4
    f126:	91 01       	movw	r18, r2
    f128:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    f12c:	9b 01       	movw	r18, r22
    f12e:	ac 01       	movw	r20, r24
    f130:	c8 01       	movw	r24, r16
    f132:	b7 01       	movw	r22, r14
    f134:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    f138:	eb 89       	ldd	r30, Y+19	; 0x13
    f13a:	fc 89       	ldd	r31, Y+20	; 0x14
    f13c:	64 83       	std	Z+4, r22	; 0x04
    f13e:	75 83       	std	Z+5, r23	; 0x05
    f140:	86 83       	std	Z+6, r24	; 0x06
    f142:	97 83       	std	Z+7, r25	; 0x07
    f144:	6d 85       	ldd	r22, Y+13	; 0x0d
    f146:	7e 85       	ldd	r23, Y+14	; 0x0e
    f148:	8f 85       	ldd	r24, Y+15	; 0x0f
    f14a:	98 89       	ldd	r25, Y+16	; 0x10
    f14c:	29 81       	ldd	r18, Y+1	; 0x01
    f14e:	3a 81       	ldd	r19, Y+2	; 0x02
    f150:	4b 81       	ldd	r20, Y+3	; 0x03
    f152:	5c 81       	ldd	r21, Y+4	; 0x04
    f154:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    f158:	e9 89       	ldd	r30, Y+17	; 0x11
    f15a:	fa 89       	ldd	r31, Y+18	; 0x12
    f15c:	64 83       	std	Z+4, r22	; 0x04
    f15e:	75 83       	std	Z+5, r23	; 0x05
    f160:	86 83       	std	Z+6, r24	; 0x06
    f162:	97 83       	std	Z+7, r25	; 0x07
  matrix[0].z = sinx*sinz+cosx*siny*cosz;  matrix[1].z = -sinx*cosz+cosx*siny*sinz; matrix[2].z = cosx*cosy;
    f164:	69 85       	ldd	r22, Y+9	; 0x09
    f166:	7a 85       	ldd	r23, Y+10	; 0x0a
    f168:	8b 85       	ldd	r24, Y+11	; 0x0b
    f16a:	9c 85       	ldd	r25, Y+12	; 0x0c
    f16c:	2d 81       	ldd	r18, Y+5	; 0x05
    f16e:	3e 81       	ldd	r19, Y+6	; 0x06
    f170:	4f 81       	ldd	r20, Y+7	; 0x07
    f172:	58 85       	ldd	r21, Y+8	; 0x08
    f174:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    f178:	3b 01       	movw	r6, r22
    f17a:	4c 01       	movw	r8, r24
    f17c:	6d 85       	ldd	r22, Y+13	; 0x0d
    f17e:	7e 85       	ldd	r23, Y+14	; 0x0e
    f180:	8f 85       	ldd	r24, Y+15	; 0x0f
    f182:	98 89       	ldd	r25, Y+16	; 0x10
    f184:	a2 01       	movw	r20, r4
    f186:	91 01       	movw	r18, r2
    f188:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    f18c:	7b 01       	movw	r14, r22
    f18e:	8c 01       	movw	r16, r24
    f190:	c4 01       	movw	r24, r8
    f192:	b3 01       	movw	r22, r6
    f194:	a6 01       	movw	r20, r12
    f196:	95 01       	movw	r18, r10
    f198:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    f19c:	9b 01       	movw	r18, r22
    f19e:	ac 01       	movw	r20, r24
    f1a0:	c8 01       	movw	r24, r16
    f1a2:	b7 01       	movw	r22, r14
    f1a4:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    f1a8:	ed 89       	ldd	r30, Y+21	; 0x15
    f1aa:	fe 89       	ldd	r31, Y+22	; 0x16
    f1ac:	60 87       	std	Z+8, r22	; 0x08
    f1ae:	71 87       	std	Z+9, r23	; 0x09
    f1b0:	82 87       	std	Z+10, r24	; 0x0a
    f1b2:	93 87       	std	Z+11, r25	; 0x0b
    f1b4:	6d 85       	ldd	r22, Y+13	; 0x0d
    f1b6:	7e 85       	ldd	r23, Y+14	; 0x0e
    f1b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    f1ba:	98 89       	ldd	r25, Y+16	; 0x10
    f1bc:	90 58       	subi	r25, 0x80	; 128
    f1be:	a6 01       	movw	r20, r12
    f1c0:	95 01       	movw	r18, r10
    f1c2:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    f1c6:	7b 01       	movw	r14, r22
    f1c8:	8c 01       	movw	r16, r24
    f1ca:	c4 01       	movw	r24, r8
    f1cc:	b3 01       	movw	r22, r6
    f1ce:	a2 01       	movw	r20, r4
    f1d0:	91 01       	movw	r18, r2
    f1d2:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    f1d6:	9b 01       	movw	r18, r22
    f1d8:	ac 01       	movw	r20, r24
    f1da:	c8 01       	movw	r24, r16
    f1dc:	b7 01       	movw	r22, r14
    f1de:	0e 94 d4 7b 	call	0xf7a8	; 0xf7a8 <__addsf3>
    f1e2:	eb 89       	ldd	r30, Y+19	; 0x13
    f1e4:	fc 89       	ldd	r31, Y+20	; 0x14
    f1e6:	60 87       	std	Z+8, r22	; 0x08
    f1e8:	71 87       	std	Z+9, r23	; 0x09
    f1ea:	82 87       	std	Z+10, r24	; 0x0a
    f1ec:	93 87       	std	Z+11, r25	; 0x0b
    f1ee:	69 85       	ldd	r22, Y+9	; 0x09
    f1f0:	7a 85       	ldd	r23, Y+10	; 0x0a
    f1f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    f1f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    f1f6:	29 81       	ldd	r18, Y+1	; 0x01
    f1f8:	3a 81       	ldd	r19, Y+2	; 0x02
    f1fa:	4b 81       	ldd	r20, Y+3	; 0x03
    f1fc:	5c 81       	ldd	r21, Y+4	; 0x04
    f1fe:	0e 94 b0 7f 	call	0xff60	; 0xff60 <__mulsf3>
    f202:	e9 89       	ldd	r30, Y+17	; 0x11
    f204:	fa 89       	ldd	r31, Y+18	; 0x12
    f206:	60 87       	std	Z+8, r22	; 0x08
    f208:	71 87       	std	Z+9, r23	; 0x09
    f20a:	82 87       	std	Z+10, r24	; 0x0a
    f20c:	93 87       	std	Z+11, r25	; 0x0b
}
    f20e:	66 96       	adiw	r28, 0x16	; 22
    f210:	0f b6       	in	r0, 0x3f	; 63
    f212:	f8 94       	cli
    f214:	de bf       	out	0x3e, r29	; 62
    f216:	0f be       	out	0x3f, r0	; 63
    f218:	cd bf       	out	0x3d, r28	; 61
    f21a:	cf 91       	pop	r28
    f21c:	df 91       	pop	r29
    f21e:	1f 91       	pop	r17
    f220:	0f 91       	pop	r16
    f222:	ff 90       	pop	r15
    f224:	ef 90       	pop	r14
    f226:	df 90       	pop	r13
    f228:	cf 90       	pop	r12
    f22a:	bf 90       	pop	r11
    f22c:	af 90       	pop	r10
    f22e:	9f 90       	pop	r9
    f230:	8f 90       	pop	r8
    f232:	7f 90       	pop	r7
    f234:	6f 90       	pop	r6
    f236:	5f 90       	pop	r5
    f238:	4f 90       	pop	r4
    f23a:	3f 90       	pop	r3
    f23c:	2f 90       	pop	r2
    f23e:	08 95       	ret

0000f240 <malloc>:
    f240:	cf 93       	push	r28
    f242:	df 93       	push	r29
    f244:	bc 01       	movw	r22, r24
    f246:	82 30       	cpi	r24, 0x02	; 2
    f248:	91 05       	cpc	r25, r1
    f24a:	10 f4       	brcc	.+4      	; 0xf250 <malloc+0x10>
    f24c:	62 e0       	ldi	r22, 0x02	; 2
    f24e:	70 e0       	ldi	r23, 0x00	; 0
    f250:	a0 91 bb 14 	lds	r26, 0x14BB
    f254:	b0 91 bc 14 	lds	r27, 0x14BC
    f258:	ed 01       	movw	r28, r26
    f25a:	e0 e0       	ldi	r30, 0x00	; 0
    f25c:	f0 e0       	ldi	r31, 0x00	; 0
    f25e:	40 e0       	ldi	r20, 0x00	; 0
    f260:	50 e0       	ldi	r21, 0x00	; 0
    f262:	21 c0       	rjmp	.+66     	; 0xf2a6 <malloc+0x66>
    f264:	88 81       	ld	r24, Y
    f266:	99 81       	ldd	r25, Y+1	; 0x01
    f268:	86 17       	cp	r24, r22
    f26a:	97 07       	cpc	r25, r23
    f26c:	69 f4       	brne	.+26     	; 0xf288 <malloc+0x48>
    f26e:	8a 81       	ldd	r24, Y+2	; 0x02
    f270:	9b 81       	ldd	r25, Y+3	; 0x03
    f272:	30 97       	sbiw	r30, 0x00	; 0
    f274:	19 f0       	breq	.+6      	; 0xf27c <malloc+0x3c>
    f276:	93 83       	std	Z+3, r25	; 0x03
    f278:	82 83       	std	Z+2, r24	; 0x02
    f27a:	04 c0       	rjmp	.+8      	; 0xf284 <malloc+0x44>
    f27c:	90 93 bc 14 	sts	0x14BC, r25
    f280:	80 93 bb 14 	sts	0x14BB, r24
    f284:	fe 01       	movw	r30, r28
    f286:	34 c0       	rjmp	.+104    	; 0xf2f0 <malloc+0xb0>
    f288:	68 17       	cp	r22, r24
    f28a:	79 07       	cpc	r23, r25
    f28c:	38 f4       	brcc	.+14     	; 0xf29c <malloc+0x5c>
    f28e:	41 15       	cp	r20, r1
    f290:	51 05       	cpc	r21, r1
    f292:	19 f0       	breq	.+6      	; 0xf29a <malloc+0x5a>
    f294:	84 17       	cp	r24, r20
    f296:	95 07       	cpc	r25, r21
    f298:	08 f4       	brcc	.+2      	; 0xf29c <malloc+0x5c>
    f29a:	ac 01       	movw	r20, r24
    f29c:	fe 01       	movw	r30, r28
    f29e:	8a 81       	ldd	r24, Y+2	; 0x02
    f2a0:	9b 81       	ldd	r25, Y+3	; 0x03
    f2a2:	9c 01       	movw	r18, r24
    f2a4:	e9 01       	movw	r28, r18
    f2a6:	20 97       	sbiw	r28, 0x00	; 0
    f2a8:	e9 f6       	brne	.-70     	; 0xf264 <malloc+0x24>
    f2aa:	41 15       	cp	r20, r1
    f2ac:	51 05       	cpc	r21, r1
    f2ae:	a9 f1       	breq	.+106    	; 0xf31a <malloc+0xda>
    f2b0:	ca 01       	movw	r24, r20
    f2b2:	86 1b       	sub	r24, r22
    f2b4:	97 0b       	sbc	r25, r23
    f2b6:	04 97       	sbiw	r24, 0x04	; 4
    f2b8:	08 f4       	brcc	.+2      	; 0xf2bc <malloc+0x7c>
    f2ba:	ba 01       	movw	r22, r20
    f2bc:	e0 e0       	ldi	r30, 0x00	; 0
    f2be:	f0 e0       	ldi	r31, 0x00	; 0
    f2c0:	2a c0       	rjmp	.+84     	; 0xf316 <malloc+0xd6>
    f2c2:	8d 91       	ld	r24, X+
    f2c4:	9c 91       	ld	r25, X
    f2c6:	11 97       	sbiw	r26, 0x01	; 1
    f2c8:	84 17       	cp	r24, r20
    f2ca:	95 07       	cpc	r25, r21
    f2cc:	f9 f4       	brne	.+62     	; 0xf30c <malloc+0xcc>
    f2ce:	64 17       	cp	r22, r20
    f2d0:	75 07       	cpc	r23, r21
    f2d2:	81 f4       	brne	.+32     	; 0xf2f4 <malloc+0xb4>
    f2d4:	12 96       	adiw	r26, 0x02	; 2
    f2d6:	8d 91       	ld	r24, X+
    f2d8:	9c 91       	ld	r25, X
    f2da:	13 97       	sbiw	r26, 0x03	; 3
    f2dc:	30 97       	sbiw	r30, 0x00	; 0
    f2de:	19 f0       	breq	.+6      	; 0xf2e6 <malloc+0xa6>
    f2e0:	93 83       	std	Z+3, r25	; 0x03
    f2e2:	82 83       	std	Z+2, r24	; 0x02
    f2e4:	04 c0       	rjmp	.+8      	; 0xf2ee <malloc+0xae>
    f2e6:	90 93 bc 14 	sts	0x14BC, r25
    f2ea:	80 93 bb 14 	sts	0x14BB, r24
    f2ee:	fd 01       	movw	r30, r26
    f2f0:	32 96       	adiw	r30, 0x02	; 2
    f2f2:	4f c0       	rjmp	.+158    	; 0xf392 <malloc+0x152>
    f2f4:	ca 01       	movw	r24, r20
    f2f6:	86 1b       	sub	r24, r22
    f2f8:	97 0b       	sbc	r25, r23
    f2fa:	fd 01       	movw	r30, r26
    f2fc:	e8 0f       	add	r30, r24
    f2fe:	f9 1f       	adc	r31, r25
    f300:	61 93       	st	Z+, r22
    f302:	71 93       	st	Z+, r23
    f304:	02 97       	sbiw	r24, 0x02	; 2
    f306:	8d 93       	st	X+, r24
    f308:	9c 93       	st	X, r25
    f30a:	43 c0       	rjmp	.+134    	; 0xf392 <malloc+0x152>
    f30c:	fd 01       	movw	r30, r26
    f30e:	82 81       	ldd	r24, Z+2	; 0x02
    f310:	93 81       	ldd	r25, Z+3	; 0x03
    f312:	9c 01       	movw	r18, r24
    f314:	d9 01       	movw	r26, r18
    f316:	10 97       	sbiw	r26, 0x00	; 0
    f318:	a1 f6       	brne	.-88     	; 0xf2c2 <malloc+0x82>
    f31a:	80 91 b9 14 	lds	r24, 0x14B9
    f31e:	90 91 ba 14 	lds	r25, 0x14BA
    f322:	89 2b       	or	r24, r25
    f324:	41 f4       	brne	.+16     	; 0xf336 <malloc+0xf6>
    f326:	80 91 dd 03 	lds	r24, 0x03DD
    f32a:	90 91 de 03 	lds	r25, 0x03DE
    f32e:	90 93 ba 14 	sts	0x14BA, r25
    f332:	80 93 b9 14 	sts	0x14B9, r24
    f336:	40 91 df 03 	lds	r20, 0x03DF
    f33a:	50 91 e0 03 	lds	r21, 0x03E0
    f33e:	41 15       	cp	r20, r1
    f340:	51 05       	cpc	r21, r1
    f342:	41 f4       	brne	.+16     	; 0xf354 <malloc+0x114>
    f344:	4d b7       	in	r20, 0x3d	; 61
    f346:	5e b7       	in	r21, 0x3e	; 62
    f348:	80 91 db 03 	lds	r24, 0x03DB
    f34c:	90 91 dc 03 	lds	r25, 0x03DC
    f350:	48 1b       	sub	r20, r24
    f352:	59 0b       	sbc	r21, r25
    f354:	20 91 b9 14 	lds	r18, 0x14B9
    f358:	30 91 ba 14 	lds	r19, 0x14BA
    f35c:	24 17       	cp	r18, r20
    f35e:	35 07       	cpc	r19, r21
    f360:	b0 f4       	brcc	.+44     	; 0xf38e <malloc+0x14e>
    f362:	ca 01       	movw	r24, r20
    f364:	82 1b       	sub	r24, r18
    f366:	93 0b       	sbc	r25, r19
    f368:	86 17       	cp	r24, r22
    f36a:	97 07       	cpc	r25, r23
    f36c:	80 f0       	brcs	.+32     	; 0xf38e <malloc+0x14e>
    f36e:	ab 01       	movw	r20, r22
    f370:	4e 5f       	subi	r20, 0xFE	; 254
    f372:	5f 4f       	sbci	r21, 0xFF	; 255
    f374:	84 17       	cp	r24, r20
    f376:	95 07       	cpc	r25, r21
    f378:	50 f0       	brcs	.+20     	; 0xf38e <malloc+0x14e>
    f37a:	42 0f       	add	r20, r18
    f37c:	53 1f       	adc	r21, r19
    f37e:	50 93 ba 14 	sts	0x14BA, r21
    f382:	40 93 b9 14 	sts	0x14B9, r20
    f386:	f9 01       	movw	r30, r18
    f388:	61 93       	st	Z+, r22
    f38a:	71 93       	st	Z+, r23
    f38c:	02 c0       	rjmp	.+4      	; 0xf392 <malloc+0x152>
    f38e:	e0 e0       	ldi	r30, 0x00	; 0
    f390:	f0 e0       	ldi	r31, 0x00	; 0
    f392:	cf 01       	movw	r24, r30
    f394:	df 91       	pop	r29
    f396:	cf 91       	pop	r28
    f398:	08 95       	ret

0000f39a <free>:
    f39a:	cf 93       	push	r28
    f39c:	df 93       	push	r29
    f39e:	00 97       	sbiw	r24, 0x00	; 0
    f3a0:	09 f4       	brne	.+2      	; 0xf3a4 <free+0xa>
    f3a2:	50 c0       	rjmp	.+160    	; 0xf444 <free+0xaa>
    f3a4:	ec 01       	movw	r28, r24
    f3a6:	22 97       	sbiw	r28, 0x02	; 2
    f3a8:	1b 82       	std	Y+3, r1	; 0x03
    f3aa:	1a 82       	std	Y+2, r1	; 0x02
    f3ac:	a0 91 bb 14 	lds	r26, 0x14BB
    f3b0:	b0 91 bc 14 	lds	r27, 0x14BC
    f3b4:	10 97       	sbiw	r26, 0x00	; 0
    f3b6:	09 f1       	breq	.+66     	; 0xf3fa <free+0x60>
    f3b8:	40 e0       	ldi	r20, 0x00	; 0
    f3ba:	50 e0       	ldi	r21, 0x00	; 0
    f3bc:	ac 17       	cp	r26, r28
    f3be:	bd 07       	cpc	r27, r29
    f3c0:	08 f1       	brcs	.+66     	; 0xf404 <free+0x6a>
    f3c2:	bb 83       	std	Y+3, r27	; 0x03
    f3c4:	aa 83       	std	Y+2, r26	; 0x02
    f3c6:	fe 01       	movw	r30, r28
    f3c8:	21 91       	ld	r18, Z+
    f3ca:	31 91       	ld	r19, Z+
    f3cc:	e2 0f       	add	r30, r18
    f3ce:	f3 1f       	adc	r31, r19
    f3d0:	ae 17       	cp	r26, r30
    f3d2:	bf 07       	cpc	r27, r31
    f3d4:	79 f4       	brne	.+30     	; 0xf3f4 <free+0x5a>
    f3d6:	8d 91       	ld	r24, X+
    f3d8:	9c 91       	ld	r25, X
    f3da:	11 97       	sbiw	r26, 0x01	; 1
    f3dc:	28 0f       	add	r18, r24
    f3de:	39 1f       	adc	r19, r25
    f3e0:	2e 5f       	subi	r18, 0xFE	; 254
    f3e2:	3f 4f       	sbci	r19, 0xFF	; 255
    f3e4:	39 83       	std	Y+1, r19	; 0x01
    f3e6:	28 83       	st	Y, r18
    f3e8:	12 96       	adiw	r26, 0x02	; 2
    f3ea:	8d 91       	ld	r24, X+
    f3ec:	9c 91       	ld	r25, X
    f3ee:	13 97       	sbiw	r26, 0x03	; 3
    f3f0:	9b 83       	std	Y+3, r25	; 0x03
    f3f2:	8a 83       	std	Y+2, r24	; 0x02
    f3f4:	41 15       	cp	r20, r1
    f3f6:	51 05       	cpc	r21, r1
    f3f8:	71 f4       	brne	.+28     	; 0xf416 <free+0x7c>
    f3fa:	d0 93 bc 14 	sts	0x14BC, r29
    f3fe:	c0 93 bb 14 	sts	0x14BB, r28
    f402:	20 c0       	rjmp	.+64     	; 0xf444 <free+0xaa>
    f404:	12 96       	adiw	r26, 0x02	; 2
    f406:	8d 91       	ld	r24, X+
    f408:	9c 91       	ld	r25, X
    f40a:	13 97       	sbiw	r26, 0x03	; 3
    f40c:	ad 01       	movw	r20, r26
    f40e:	00 97       	sbiw	r24, 0x00	; 0
    f410:	11 f0       	breq	.+4      	; 0xf416 <free+0x7c>
    f412:	dc 01       	movw	r26, r24
    f414:	d3 cf       	rjmp	.-90     	; 0xf3bc <free+0x22>
    f416:	fa 01       	movw	r30, r20
    f418:	d3 83       	std	Z+3, r29	; 0x03
    f41a:	c2 83       	std	Z+2, r28	; 0x02
    f41c:	21 91       	ld	r18, Z+
    f41e:	31 91       	ld	r19, Z+
    f420:	e2 0f       	add	r30, r18
    f422:	f3 1f       	adc	r31, r19
    f424:	ce 17       	cp	r28, r30
    f426:	df 07       	cpc	r29, r31
    f428:	69 f4       	brne	.+26     	; 0xf444 <free+0xaa>
    f42a:	88 81       	ld	r24, Y
    f42c:	99 81       	ldd	r25, Y+1	; 0x01
    f42e:	28 0f       	add	r18, r24
    f430:	39 1f       	adc	r19, r25
    f432:	2e 5f       	subi	r18, 0xFE	; 254
    f434:	3f 4f       	sbci	r19, 0xFF	; 255
    f436:	fa 01       	movw	r30, r20
    f438:	31 83       	std	Z+1, r19	; 0x01
    f43a:	20 83       	st	Z, r18
    f43c:	8a 81       	ldd	r24, Y+2	; 0x02
    f43e:	9b 81       	ldd	r25, Y+3	; 0x03
    f440:	93 83       	std	Z+3, r25	; 0x03
    f442:	82 83       	std	Z+2, r24	; 0x02
    f444:	df 91       	pop	r29
    f446:	cf 91       	pop	r28
    f448:	08 95       	ret

0000f44a <do_rand>:
    f44a:	af 92       	push	r10
    f44c:	bf 92       	push	r11
    f44e:	cf 92       	push	r12
    f450:	df 92       	push	r13
    f452:	ef 92       	push	r14
    f454:	ff 92       	push	r15
    f456:	0f 93       	push	r16
    f458:	1f 93       	push	r17
    f45a:	cf 93       	push	r28
    f45c:	df 93       	push	r29
    f45e:	ec 01       	movw	r28, r24
    f460:	a8 80       	ld	r10, Y
    f462:	b9 80       	ldd	r11, Y+1	; 0x01
    f464:	ca 80       	ldd	r12, Y+2	; 0x02
    f466:	db 80       	ldd	r13, Y+3	; 0x03
    f468:	a1 14       	cp	r10, r1
    f46a:	b1 04       	cpc	r11, r1
    f46c:	c1 04       	cpc	r12, r1
    f46e:	d1 04       	cpc	r13, r1
    f470:	41 f4       	brne	.+16     	; 0xf482 <do_rand+0x38>
    f472:	84 e2       	ldi	r24, 0x24	; 36
    f474:	a8 2e       	mov	r10, r24
    f476:	89 ed       	ldi	r24, 0xD9	; 217
    f478:	b8 2e       	mov	r11, r24
    f47a:	8b e5       	ldi	r24, 0x5B	; 91
    f47c:	c8 2e       	mov	r12, r24
    f47e:	87 e0       	ldi	r24, 0x07	; 7
    f480:	d8 2e       	mov	r13, r24
    f482:	c6 01       	movw	r24, r12
    f484:	b5 01       	movw	r22, r10
    f486:	2d e1       	ldi	r18, 0x1D	; 29
    f488:	33 ef       	ldi	r19, 0xF3	; 243
    f48a:	41 e0       	ldi	r20, 0x01	; 1
    f48c:	50 e0       	ldi	r21, 0x00	; 0
    f48e:	0e 94 54 81 	call	0x102a8	; 0x102a8 <__divmodsi4>
    f492:	27 ea       	ldi	r18, 0xA7	; 167
    f494:	31 e4       	ldi	r19, 0x41	; 65
    f496:	40 e0       	ldi	r20, 0x00	; 0
    f498:	50 e0       	ldi	r21, 0x00	; 0
    f49a:	0e 94 e0 80 	call	0x101c0	; 0x101c0 <__mulsi3>
    f49e:	7b 01       	movw	r14, r22
    f4a0:	8c 01       	movw	r16, r24
    f4a2:	c6 01       	movw	r24, r12
    f4a4:	b5 01       	movw	r22, r10
    f4a6:	2d e1       	ldi	r18, 0x1D	; 29
    f4a8:	33 ef       	ldi	r19, 0xF3	; 243
    f4aa:	41 e0       	ldi	r20, 0x01	; 1
    f4ac:	50 e0       	ldi	r21, 0x00	; 0
    f4ae:	0e 94 54 81 	call	0x102a8	; 0x102a8 <__divmodsi4>
    f4b2:	ca 01       	movw	r24, r20
    f4b4:	b9 01       	movw	r22, r18
    f4b6:	2c ee       	ldi	r18, 0xEC	; 236
    f4b8:	34 ef       	ldi	r19, 0xF4	; 244
    f4ba:	4f ef       	ldi	r20, 0xFF	; 255
    f4bc:	5f ef       	ldi	r21, 0xFF	; 255
    f4be:	0e 94 e0 80 	call	0x101c0	; 0x101c0 <__mulsi3>
    f4c2:	6e 0d       	add	r22, r14
    f4c4:	7f 1d       	adc	r23, r15
    f4c6:	80 1f       	adc	r24, r16
    f4c8:	91 1f       	adc	r25, r17
    f4ca:	97 ff       	sbrs	r25, 7
    f4cc:	04 c0       	rjmp	.+8      	; 0xf4d6 <do_rand+0x8c>
    f4ce:	61 50       	subi	r22, 0x01	; 1
    f4d0:	70 40       	sbci	r23, 0x00	; 0
    f4d2:	80 40       	sbci	r24, 0x00	; 0
    f4d4:	90 48       	sbci	r25, 0x80	; 128
    f4d6:	68 83       	st	Y, r22
    f4d8:	79 83       	std	Y+1, r23	; 0x01
    f4da:	8a 83       	std	Y+2, r24	; 0x02
    f4dc:	9b 83       	std	Y+3, r25	; 0x03
    f4de:	9b 01       	movw	r18, r22
    f4e0:	3f 77       	andi	r19, 0x7F	; 127
    f4e2:	c9 01       	movw	r24, r18
    f4e4:	df 91       	pop	r29
    f4e6:	cf 91       	pop	r28
    f4e8:	1f 91       	pop	r17
    f4ea:	0f 91       	pop	r16
    f4ec:	ff 90       	pop	r15
    f4ee:	ef 90       	pop	r14
    f4f0:	df 90       	pop	r13
    f4f2:	cf 90       	pop	r12
    f4f4:	bf 90       	pop	r11
    f4f6:	af 90       	pop	r10
    f4f8:	08 95       	ret

0000f4fa <rand_r>:
    f4fa:	0e 94 25 7a 	call	0xf44a	; 0xf44a <do_rand>
    f4fe:	08 95       	ret

0000f500 <rand>:
    f500:	81 ee       	ldi	r24, 0xE1	; 225
    f502:	93 e0       	ldi	r25, 0x03	; 3
    f504:	0e 94 25 7a 	call	0xf44a	; 0xf44a <do_rand>
    f508:	08 95       	ret

0000f50a <srand>:
    f50a:	a0 e0       	ldi	r26, 0x00	; 0
    f50c:	b0 e0       	ldi	r27, 0x00	; 0
    f50e:	80 93 e1 03 	sts	0x03E1, r24
    f512:	90 93 e2 03 	sts	0x03E2, r25
    f516:	a0 93 e3 03 	sts	0x03E3, r26
    f51a:	b0 93 e4 03 	sts	0x03E4, r27
    f51e:	08 95       	ret

0000f520 <realloc>:
    f520:	8f 92       	push	r8
    f522:	9f 92       	push	r9
    f524:	af 92       	push	r10
    f526:	bf 92       	push	r11
    f528:	cf 92       	push	r12
    f52a:	df 92       	push	r13
    f52c:	ef 92       	push	r14
    f52e:	ff 92       	push	r15
    f530:	0f 93       	push	r16
    f532:	1f 93       	push	r17
    f534:	cf 93       	push	r28
    f536:	df 93       	push	r29
    f538:	8c 01       	movw	r16, r24
    f53a:	00 97       	sbiw	r24, 0x00	; 0
    f53c:	29 f4       	brne	.+10     	; 0xf548 <realloc+0x28>
    f53e:	cb 01       	movw	r24, r22
    f540:	0e 94 20 79 	call	0xf240	; 0xf240 <malloc>
    f544:	8c 01       	movw	r16, r24
    f546:	ba c0       	rjmp	.+372    	; 0xf6bc <realloc+0x19c>
    f548:	9e ef       	ldi	r25, 0xFE	; 254
    f54a:	e9 2e       	mov	r14, r25
    f54c:	9f ef       	ldi	r25, 0xFF	; 255
    f54e:	f9 2e       	mov	r15, r25
    f550:	e0 0e       	add	r14, r16
    f552:	f1 1e       	adc	r15, r17
    f554:	58 01       	movw	r10, r16
    f556:	a6 0e       	add	r10, r22
    f558:	b7 1e       	adc	r11, r23
    f55a:	ae 14       	cp	r10, r14
    f55c:	bf 04       	cpc	r11, r15
    f55e:	08 f4       	brcc	.+2      	; 0xf562 <realloc+0x42>
    f560:	ab c0       	rjmp	.+342    	; 0xf6b8 <realloc+0x198>
    f562:	8e ef       	ldi	r24, 0xFE	; 254
    f564:	88 2e       	mov	r8, r24
    f566:	8f ef       	ldi	r24, 0xFF	; 255
    f568:	98 2e       	mov	r9, r24
    f56a:	8a 0c       	add	r8, r10
    f56c:	9b 1c       	adc	r9, r11
    f56e:	e7 01       	movw	r28, r14
    f570:	48 81       	ld	r20, Y
    f572:	59 81       	ldd	r21, Y+1	; 0x01
    f574:	46 17       	cp	r20, r22
    f576:	57 07       	cpc	r21, r23
    f578:	b8 f0       	brcs	.+46     	; 0xf5a8 <realloc+0x88>
    f57a:	45 30       	cpi	r20, 0x05	; 5
    f57c:	51 05       	cpc	r21, r1
    f57e:	08 f4       	brcc	.+2      	; 0xf582 <realloc+0x62>
    f580:	9d c0       	rjmp	.+314    	; 0xf6bc <realloc+0x19c>
    f582:	ca 01       	movw	r24, r20
    f584:	04 97       	sbiw	r24, 0x04	; 4
    f586:	86 17       	cp	r24, r22
    f588:	97 07       	cpc	r25, r23
    f58a:	08 f4       	brcc	.+2      	; 0xf58e <realloc+0x6e>
    f58c:	97 c0       	rjmp	.+302    	; 0xf6bc <realloc+0x19c>
    f58e:	42 50       	subi	r20, 0x02	; 2
    f590:	50 40       	sbci	r21, 0x00	; 0
    f592:	46 1b       	sub	r20, r22
    f594:	57 0b       	sbc	r21, r23
    f596:	f4 01       	movw	r30, r8
    f598:	51 83       	std	Z+1, r21	; 0x01
    f59a:	40 83       	st	Z, r20
    f59c:	79 83       	std	Y+1, r23	; 0x01
    f59e:	68 83       	st	Y, r22
    f5a0:	c5 01       	movw	r24, r10
    f5a2:	0e 94 cd 79 	call	0xf39a	; 0xf39a <free>
    f5a6:	8a c0       	rjmp	.+276    	; 0xf6bc <realloc+0x19c>
    f5a8:	6b 01       	movw	r12, r22
    f5aa:	c4 1a       	sub	r12, r20
    f5ac:	d5 0a       	sbc	r13, r21
    f5ae:	e0 91 bb 14 	lds	r30, 0x14BB
    f5b2:	f0 91 bc 14 	lds	r31, 0x14BC
    f5b6:	a0 e0       	ldi	r26, 0x00	; 0
    f5b8:	b0 e0       	ldi	r27, 0x00	; 0
    f5ba:	c0 e0       	ldi	r28, 0x00	; 0
    f5bc:	d0 e0       	ldi	r29, 0x00	; 0
    f5be:	42 c0       	rjmp	.+132    	; 0xf644 <realloc+0x124>
    f5c0:	e8 15       	cp	r30, r8
    f5c2:	f9 05       	cpc	r31, r9
    f5c4:	a1 f5       	brne	.+104    	; 0xf62e <realloc+0x10e>
    f5c6:	20 81       	ld	r18, Z
    f5c8:	31 81       	ldd	r19, Z+1	; 0x01
    f5ca:	2c 15       	cp	r18, r12
    f5cc:	3d 05       	cpc	r19, r13
    f5ce:	78 f1       	brcs	.+94     	; 0xf62e <realloc+0x10e>
    f5d0:	c9 01       	movw	r24, r18
    f5d2:	02 96       	adiw	r24, 0x02	; 2
    f5d4:	8c 15       	cp	r24, r12
    f5d6:	9d 05       	cpc	r25, r13
    f5d8:	a8 f0       	brcs	.+42     	; 0xf604 <realloc+0xe4>
    f5da:	4e 5f       	subi	r20, 0xFE	; 254
    f5dc:	5f 4f       	sbci	r21, 0xFF	; 255
    f5de:	42 0f       	add	r20, r18
    f5e0:	53 1f       	adc	r21, r19
    f5e2:	e7 01       	movw	r28, r14
    f5e4:	59 83       	std	Y+1, r21	; 0x01
    f5e6:	48 83       	st	Y, r20
    f5e8:	22 81       	ldd	r18, Z+2	; 0x02
    f5ea:	33 81       	ldd	r19, Z+3	; 0x03
    f5ec:	10 97       	sbiw	r26, 0x00	; 0
    f5ee:	29 f0       	breq	.+10     	; 0xf5fa <realloc+0xda>
    f5f0:	13 96       	adiw	r26, 0x03	; 3
    f5f2:	3c 93       	st	X, r19
    f5f4:	2e 93       	st	-X, r18
    f5f6:	12 97       	sbiw	r26, 0x02	; 2
    f5f8:	61 c0       	rjmp	.+194    	; 0xf6bc <realloc+0x19c>
    f5fa:	30 93 bc 14 	sts	0x14BC, r19
    f5fe:	20 93 bb 14 	sts	0x14BB, r18
    f602:	5c c0       	rjmp	.+184    	; 0xf6bc <realloc+0x19c>
    f604:	22 50       	subi	r18, 0x02	; 2
    f606:	30 40       	sbci	r19, 0x00	; 0
    f608:	2c 19       	sub	r18, r12
    f60a:	3d 09       	sbc	r19, r13
    f60c:	31 83       	std	Z+1, r19	; 0x01
    f60e:	20 83       	st	Z, r18
    f610:	10 97       	sbiw	r26, 0x00	; 0
    f612:	29 f0       	breq	.+10     	; 0xf61e <realloc+0xfe>
    f614:	13 96       	adiw	r26, 0x03	; 3
    f616:	fc 93       	st	X, r31
    f618:	ee 93       	st	-X, r30
    f61a:	12 97       	sbiw	r26, 0x02	; 2
    f61c:	04 c0       	rjmp	.+8      	; 0xf626 <realloc+0x106>
    f61e:	f0 93 bc 14 	sts	0x14BC, r31
    f622:	e0 93 bb 14 	sts	0x14BB, r30
    f626:	f7 01       	movw	r30, r14
    f628:	71 83       	std	Z+1, r23	; 0x01
    f62a:	60 83       	st	Z, r22
    f62c:	47 c0       	rjmp	.+142    	; 0xf6bc <realloc+0x19c>
    f62e:	80 81       	ld	r24, Z
    f630:	91 81       	ldd	r25, Z+1	; 0x01
    f632:	c8 17       	cp	r28, r24
    f634:	d9 07       	cpc	r29, r25
    f636:	08 f4       	brcc	.+2      	; 0xf63a <realloc+0x11a>
    f638:	ec 01       	movw	r28, r24
    f63a:	df 01       	movw	r26, r30
    f63c:	82 81       	ldd	r24, Z+2	; 0x02
    f63e:	93 81       	ldd	r25, Z+3	; 0x03
    f640:	9c 01       	movw	r18, r24
    f642:	f9 01       	movw	r30, r18
    f644:	30 97       	sbiw	r30, 0x00	; 0
    f646:	09 f0       	breq	.+2      	; 0xf64a <realloc+0x12a>
    f648:	bb cf       	rjmp	.-138    	; 0xf5c0 <realloc+0xa0>
    f64a:	40 0f       	add	r20, r16
    f64c:	51 1f       	adc	r21, r17
    f64e:	80 91 b9 14 	lds	r24, 0x14B9
    f652:	90 91 ba 14 	lds	r25, 0x14BA
    f656:	84 17       	cp	r24, r20
    f658:	95 07       	cpc	r25, r21
    f65a:	e9 f4       	brne	.+58     	; 0xf696 <realloc+0x176>
    f65c:	c6 17       	cp	r28, r22
    f65e:	d7 07       	cpc	r29, r23
    f660:	d0 f4       	brcc	.+52     	; 0xf696 <realloc+0x176>
    f662:	20 91 df 03 	lds	r18, 0x03DF
    f666:	30 91 e0 03 	lds	r19, 0x03E0
    f66a:	21 15       	cp	r18, r1
    f66c:	31 05       	cpc	r19, r1
    f66e:	41 f4       	brne	.+16     	; 0xf680 <realloc+0x160>
    f670:	2d b7       	in	r18, 0x3d	; 61
    f672:	3e b7       	in	r19, 0x3e	; 62
    f674:	80 91 db 03 	lds	r24, 0x03DB
    f678:	90 91 dc 03 	lds	r25, 0x03DC
    f67c:	28 1b       	sub	r18, r24
    f67e:	39 0b       	sbc	r19, r25
    f680:	a2 16       	cp	r10, r18
    f682:	b3 06       	cpc	r11, r19
    f684:	c8 f4       	brcc	.+50     	; 0xf6b8 <realloc+0x198>
    f686:	b0 92 ba 14 	sts	0x14BA, r11
    f68a:	a0 92 b9 14 	sts	0x14B9, r10
    f68e:	e7 01       	movw	r28, r14
    f690:	79 83       	std	Y+1, r23	; 0x01
    f692:	68 83       	st	Y, r22
    f694:	13 c0       	rjmp	.+38     	; 0xf6bc <realloc+0x19c>
    f696:	cb 01       	movw	r24, r22
    f698:	0e 94 20 79 	call	0xf240	; 0xf240 <malloc>
    f69c:	ec 01       	movw	r28, r24
    f69e:	00 97       	sbiw	r24, 0x00	; 0
    f6a0:	59 f0       	breq	.+22     	; 0xf6b8 <realloc+0x198>
    f6a2:	f7 01       	movw	r30, r14
    f6a4:	40 81       	ld	r20, Z
    f6a6:	51 81       	ldd	r21, Z+1	; 0x01
    f6a8:	b8 01       	movw	r22, r16
    f6aa:	0e 94 6f 7b 	call	0xf6de	; 0xf6de <memcpy>
    f6ae:	c8 01       	movw	r24, r16
    f6b0:	0e 94 cd 79 	call	0xf39a	; 0xf39a <free>
    f6b4:	8e 01       	movw	r16, r28
    f6b6:	02 c0       	rjmp	.+4      	; 0xf6bc <realloc+0x19c>
    f6b8:	00 e0       	ldi	r16, 0x00	; 0
    f6ba:	10 e0       	ldi	r17, 0x00	; 0
    f6bc:	c8 01       	movw	r24, r16
    f6be:	df 91       	pop	r29
    f6c0:	cf 91       	pop	r28
    f6c2:	1f 91       	pop	r17
    f6c4:	0f 91       	pop	r16
    f6c6:	ff 90       	pop	r15
    f6c8:	ef 90       	pop	r14
    f6ca:	df 90       	pop	r13
    f6cc:	cf 90       	pop	r12
    f6ce:	bf 90       	pop	r11
    f6d0:	af 90       	pop	r10
    f6d2:	9f 90       	pop	r9
    f6d4:	8f 90       	pop	r8
    f6d6:	08 95       	ret

0000f6d8 <exit>:
    f6d8:	f8 94       	cli
    f6da:	0c 94 75 81 	jmp	0x102ea	; 0x102ea <__do_global_dtors>

0000f6de <memcpy>:
    f6de:	fb 01       	movw	r30, r22
    f6e0:	dc 01       	movw	r26, r24
    f6e2:	02 c0       	rjmp	.+4      	; 0xf6e8 <memcpy+0xa>
    f6e4:	01 90       	ld	r0, Z+
    f6e6:	0d 92       	st	X+, r0
    f6e8:	41 50       	subi	r20, 0x01	; 1
    f6ea:	50 40       	sbci	r21, 0x00	; 0
    f6ec:	d8 f7       	brcc	.-10     	; 0xf6e4 <memcpy+0x6>
    f6ee:	08 95       	ret

0000f6f0 <strcat>:
    f6f0:	fb 01       	movw	r30, r22
    f6f2:	dc 01       	movw	r26, r24
    f6f4:	0d 90       	ld	r0, X+
    f6f6:	00 20       	and	r0, r0
    f6f8:	e9 f7       	brne	.-6      	; 0xf6f4 <strcat+0x4>
    f6fa:	11 97       	sbiw	r26, 0x01	; 1
    f6fc:	01 90       	ld	r0, Z+
    f6fe:	0d 92       	st	X+, r0
    f700:	00 20       	and	r0, r0
    f702:	e1 f7       	brne	.-8      	; 0xf6fc <strcat+0xc>
    f704:	08 95       	ret

0000f706 <strcpy>:
    f706:	fb 01       	movw	r30, r22
    f708:	dc 01       	movw	r26, r24
    f70a:	01 90       	ld	r0, Z+
    f70c:	0d 92       	st	X+, r0
    f70e:	00 20       	and	r0, r0
    f710:	e1 f7       	brne	.-8      	; 0xf70a <strcpy+0x4>
    f712:	08 95       	ret

0000f714 <strstr>:
    f714:	fb 01       	movw	r30, r22
    f716:	51 91       	ld	r21, Z+
    f718:	55 23       	and	r21, r21
    f71a:	a9 f0       	breq	.+42     	; 0xf746 <strstr+0x32>
    f71c:	bf 01       	movw	r22, r30
    f71e:	dc 01       	movw	r26, r24
    f720:	4d 91       	ld	r20, X+
    f722:	45 17       	cp	r20, r21
    f724:	41 11       	cpse	r20, r1
    f726:	e1 f7       	brne	.-8      	; 0xf720 <strstr+0xc>
    f728:	59 f4       	brne	.+22     	; 0xf740 <strstr+0x2c>
    f72a:	cd 01       	movw	r24, r26
    f72c:	01 90       	ld	r0, Z+
    f72e:	00 20       	and	r0, r0
    f730:	49 f0       	breq	.+18     	; 0xf744 <strstr+0x30>
    f732:	4d 91       	ld	r20, X+
    f734:	40 15       	cp	r20, r0
    f736:	41 11       	cpse	r20, r1
    f738:	c9 f3       	breq	.-14     	; 0xf72c <strstr+0x18>
    f73a:	fb 01       	movw	r30, r22
    f73c:	41 11       	cpse	r20, r1
    f73e:	ef cf       	rjmp	.-34     	; 0xf71e <strstr+0xa>
    f740:	81 e0       	ldi	r24, 0x01	; 1
    f742:	90 e0       	ldi	r25, 0x00	; 0
    f744:	01 97       	sbiw	r24, 0x01	; 1
    f746:	08 95       	ret

0000f748 <itoa>:
    f748:	fb 01       	movw	r30, r22
    f74a:	9f 01       	movw	r18, r30
    f74c:	e8 94       	clt
    f74e:	42 30       	cpi	r20, 0x02	; 2
    f750:	c4 f0       	brlt	.+48     	; 0xf782 <itoa+0x3a>
    f752:	45 32       	cpi	r20, 0x25	; 37
    f754:	b4 f4       	brge	.+44     	; 0xf782 <itoa+0x3a>
    f756:	4a 30       	cpi	r20, 0x0A	; 10
    f758:	29 f4       	brne	.+10     	; 0xf764 <itoa+0x1c>
    f75a:	97 fb       	bst	r25, 7
    f75c:	1e f4       	brtc	.+6      	; 0xf764 <itoa+0x1c>
    f75e:	90 95       	com	r25
    f760:	81 95       	neg	r24
    f762:	9f 4f       	sbci	r25, 0xFF	; 255
    f764:	64 2f       	mov	r22, r20
    f766:	77 27       	eor	r23, r23
    f768:	0e 94 0b 81 	call	0x10216	; 0x10216 <__udivmodhi4>
    f76c:	80 5d       	subi	r24, 0xD0	; 208
    f76e:	8a 33       	cpi	r24, 0x3A	; 58
    f770:	0c f0       	brlt	.+2      	; 0xf774 <itoa+0x2c>
    f772:	89 5d       	subi	r24, 0xD9	; 217
    f774:	81 93       	st	Z+, r24
    f776:	cb 01       	movw	r24, r22
    f778:	00 97       	sbiw	r24, 0x00	; 0
    f77a:	a1 f7       	brne	.-24     	; 0xf764 <itoa+0x1c>
    f77c:	16 f4       	brtc	.+4      	; 0xf782 <itoa+0x3a>
    f77e:	5d e2       	ldi	r21, 0x2D	; 45
    f780:	51 93       	st	Z+, r21
    f782:	10 82       	st	Z, r1
    f784:	c9 01       	movw	r24, r18
    f786:	0c 94 aa 80 	jmp	0x10154	; 0x10154 <strrev>

0000f78a <acos>:
    f78a:	9f 93       	push	r25
    f78c:	9f 77       	andi	r25, 0x7F	; 127
    f78e:	e0 d1       	rcall	.+960    	; 0xfb50 <__fp_arccos>
    f790:	0f 90       	pop	r0
    f792:	00 20       	and	r0, r0
    f794:	3a f4       	brpl	.+14     	; 0xf7a4 <acos+0x1a>
    f796:	90 58       	subi	r25, 0x80	; 128
    f798:	a2 ea       	ldi	r26, 0xA2	; 162
    f79a:	2a ed       	ldi	r18, 0xDA	; 218
    f79c:	3f e0       	ldi	r19, 0x0F	; 15
    f79e:	49 e4       	ldi	r20, 0x49	; 73
    f7a0:	50 e4       	ldi	r21, 0x40	; 64
    f7a2:	13 d0       	rcall	.+38     	; 0xf7ca <__addsf3x>
    f7a4:	78 c2       	rjmp	.+1264   	; 0xfc96 <__fp_round>

0000f7a6 <__subsf3>:
    f7a6:	50 58       	subi	r21, 0x80	; 128

0000f7a8 <__addsf3>:
    f7a8:	bb 27       	eor	r27, r27
    f7aa:	aa 27       	eor	r26, r26
    f7ac:	0e d0       	rcall	.+28     	; 0xf7ca <__addsf3x>
    f7ae:	73 c2       	rjmp	.+1254   	; 0xfc96 <__fp_round>
    f7b0:	3c d2       	rcall	.+1144   	; 0xfc2a <__fp_pscA>
    f7b2:	30 f0       	brcs	.+12     	; 0xf7c0 <__addsf3+0x18>
    f7b4:	41 d2       	rcall	.+1154   	; 0xfc38 <__fp_pscB>
    f7b6:	20 f0       	brcs	.+8      	; 0xf7c0 <__addsf3+0x18>
    f7b8:	31 f4       	brne	.+12     	; 0xf7c6 <__addsf3+0x1e>
    f7ba:	9f 3f       	cpi	r25, 0xFF	; 255
    f7bc:	11 f4       	brne	.+4      	; 0xf7c2 <__addsf3+0x1a>
    f7be:	1e f4       	brtc	.+6      	; 0xf7c6 <__addsf3+0x1e>
    f7c0:	0c c2       	rjmp	.+1048   	; 0xfbda <__fp_nan>
    f7c2:	0e f4       	brtc	.+2      	; 0xf7c6 <__addsf3+0x1e>
    f7c4:	e0 95       	com	r30
    f7c6:	e7 fb       	bst	r30, 7
    f7c8:	02 c2       	rjmp	.+1028   	; 0xfbce <__fp_inf>

0000f7ca <__addsf3x>:
    f7ca:	e9 2f       	mov	r30, r25
    f7cc:	86 d2       	rcall	.+1292   	; 0xfcda <__fp_split3>
    f7ce:	80 f3       	brcs	.-32     	; 0xf7b0 <__addsf3+0x8>
    f7d0:	ba 17       	cp	r27, r26
    f7d2:	62 07       	cpc	r22, r18
    f7d4:	73 07       	cpc	r23, r19
    f7d6:	84 07       	cpc	r24, r20
    f7d8:	95 07       	cpc	r25, r21
    f7da:	18 f0       	brcs	.+6      	; 0xf7e2 <__addsf3x+0x18>
    f7dc:	71 f4       	brne	.+28     	; 0xf7fa <__addsf3x+0x30>
    f7de:	9e f5       	brtc	.+102    	; 0xf846 <__addsf3x+0x7c>
    f7e0:	9e c2       	rjmp	.+1340   	; 0xfd1e <__fp_zero>
    f7e2:	0e f4       	brtc	.+2      	; 0xf7e6 <__addsf3x+0x1c>
    f7e4:	e0 95       	com	r30
    f7e6:	0b 2e       	mov	r0, r27
    f7e8:	ba 2f       	mov	r27, r26
    f7ea:	a0 2d       	mov	r26, r0
    f7ec:	0b 01       	movw	r0, r22
    f7ee:	b9 01       	movw	r22, r18
    f7f0:	90 01       	movw	r18, r0
    f7f2:	0c 01       	movw	r0, r24
    f7f4:	ca 01       	movw	r24, r20
    f7f6:	a0 01       	movw	r20, r0
    f7f8:	11 24       	eor	r1, r1
    f7fa:	ff 27       	eor	r31, r31
    f7fc:	59 1b       	sub	r21, r25
    f7fe:	99 f0       	breq	.+38     	; 0xf826 <__addsf3x+0x5c>
    f800:	59 3f       	cpi	r21, 0xF9	; 249
    f802:	50 f4       	brcc	.+20     	; 0xf818 <__addsf3x+0x4e>
    f804:	50 3e       	cpi	r21, 0xE0	; 224
    f806:	68 f1       	brcs	.+90     	; 0xf862 <__addsf3x+0x98>
    f808:	1a 16       	cp	r1, r26
    f80a:	f0 40       	sbci	r31, 0x00	; 0
    f80c:	a2 2f       	mov	r26, r18
    f80e:	23 2f       	mov	r18, r19
    f810:	34 2f       	mov	r19, r20
    f812:	44 27       	eor	r20, r20
    f814:	58 5f       	subi	r21, 0xF8	; 248
    f816:	f3 cf       	rjmp	.-26     	; 0xf7fe <__addsf3x+0x34>
    f818:	46 95       	lsr	r20
    f81a:	37 95       	ror	r19
    f81c:	27 95       	ror	r18
    f81e:	a7 95       	ror	r26
    f820:	f0 40       	sbci	r31, 0x00	; 0
    f822:	53 95       	inc	r21
    f824:	c9 f7       	brne	.-14     	; 0xf818 <__addsf3x+0x4e>
    f826:	7e f4       	brtc	.+30     	; 0xf846 <__addsf3x+0x7c>
    f828:	1f 16       	cp	r1, r31
    f82a:	ba 0b       	sbc	r27, r26
    f82c:	62 0b       	sbc	r22, r18
    f82e:	73 0b       	sbc	r23, r19
    f830:	84 0b       	sbc	r24, r20
    f832:	ba f0       	brmi	.+46     	; 0xf862 <__addsf3x+0x98>
    f834:	91 50       	subi	r25, 0x01	; 1
    f836:	a1 f0       	breq	.+40     	; 0xf860 <__addsf3x+0x96>
    f838:	ff 0f       	add	r31, r31
    f83a:	bb 1f       	adc	r27, r27
    f83c:	66 1f       	adc	r22, r22
    f83e:	77 1f       	adc	r23, r23
    f840:	88 1f       	adc	r24, r24
    f842:	c2 f7       	brpl	.-16     	; 0xf834 <__addsf3x+0x6a>
    f844:	0e c0       	rjmp	.+28     	; 0xf862 <__addsf3x+0x98>
    f846:	ba 0f       	add	r27, r26
    f848:	62 1f       	adc	r22, r18
    f84a:	73 1f       	adc	r23, r19
    f84c:	84 1f       	adc	r24, r20
    f84e:	48 f4       	brcc	.+18     	; 0xf862 <__addsf3x+0x98>
    f850:	87 95       	ror	r24
    f852:	77 95       	ror	r23
    f854:	67 95       	ror	r22
    f856:	b7 95       	ror	r27
    f858:	f7 95       	ror	r31
    f85a:	9e 3f       	cpi	r25, 0xFE	; 254
    f85c:	08 f0       	brcs	.+2      	; 0xf860 <__addsf3x+0x96>
    f85e:	b3 cf       	rjmp	.-154    	; 0xf7c6 <__addsf3+0x1e>
    f860:	93 95       	inc	r25
    f862:	88 0f       	add	r24, r24
    f864:	08 f0       	brcs	.+2      	; 0xf868 <__addsf3x+0x9e>
    f866:	99 27       	eor	r25, r25
    f868:	ee 0f       	add	r30, r30
    f86a:	97 95       	ror	r25
    f86c:	87 95       	ror	r24
    f86e:	08 95       	ret
    f870:	dc d1       	rcall	.+952    	; 0xfc2a <__fp_pscA>
    f872:	58 f0       	brcs	.+22     	; 0xf88a <__addsf3x+0xc0>
    f874:	80 e8       	ldi	r24, 0x80	; 128
    f876:	91 e0       	ldi	r25, 0x01	; 1
    f878:	09 f4       	brne	.+2      	; 0xf87c <__addsf3x+0xb2>
    f87a:	9e ef       	ldi	r25, 0xFE	; 254
    f87c:	dd d1       	rcall	.+954    	; 0xfc38 <__fp_pscB>
    f87e:	28 f0       	brcs	.+10     	; 0xf88a <__addsf3x+0xc0>
    f880:	40 e8       	ldi	r20, 0x80	; 128
    f882:	51 e0       	ldi	r21, 0x01	; 1
    f884:	59 f4       	brne	.+22     	; 0xf89c <atan2+0xe>
    f886:	5e ef       	ldi	r21, 0xFE	; 254
    f888:	09 c0       	rjmp	.+18     	; 0xf89c <atan2+0xe>
    f88a:	a7 c1       	rjmp	.+846    	; 0xfbda <__fp_nan>
    f88c:	48 c2       	rjmp	.+1168   	; 0xfd1e <__fp_zero>

0000f88e <atan2>:
    f88e:	e9 2f       	mov	r30, r25
    f890:	e0 78       	andi	r30, 0x80	; 128
    f892:	23 d2       	rcall	.+1094   	; 0xfcda <__fp_split3>
    f894:	68 f3       	brcs	.-38     	; 0xf870 <__addsf3x+0xa6>
    f896:	09 2e       	mov	r0, r25
    f898:	05 2a       	or	r0, r21
    f89a:	c1 f3       	breq	.-16     	; 0xf88c <__addsf3x+0xc2>
    f89c:	26 17       	cp	r18, r22
    f89e:	37 07       	cpc	r19, r23
    f8a0:	48 07       	cpc	r20, r24
    f8a2:	59 07       	cpc	r21, r25
    f8a4:	38 f0       	brcs	.+14     	; 0xf8b4 <atan2+0x26>
    f8a6:	0e 2e       	mov	r0, r30
    f8a8:	07 f8       	bld	r0, 7
    f8aa:	e0 25       	eor	r30, r0
    f8ac:	69 f0       	breq	.+26     	; 0xf8c8 <atan2+0x3a>
    f8ae:	e0 25       	eor	r30, r0
    f8b0:	e0 64       	ori	r30, 0x40	; 64
    f8b2:	0a c0       	rjmp	.+20     	; 0xf8c8 <atan2+0x3a>
    f8b4:	ef 63       	ori	r30, 0x3F	; 63
    f8b6:	07 f8       	bld	r0, 7
    f8b8:	00 94       	com	r0
    f8ba:	07 fa       	bst	r0, 7
    f8bc:	db 01       	movw	r26, r22
    f8be:	b9 01       	movw	r22, r18
    f8c0:	9d 01       	movw	r18, r26
    f8c2:	dc 01       	movw	r26, r24
    f8c4:	ca 01       	movw	r24, r20
    f8c6:	ad 01       	movw	r20, r26
    f8c8:	ef 93       	push	r30
    f8ca:	4a d0       	rcall	.+148    	; 0xf960 <__divsf3_pse>
    f8cc:	e4 d1       	rcall	.+968    	; 0xfc96 <__fp_round>
    f8ce:	0a d0       	rcall	.+20     	; 0xf8e4 <atan>
    f8d0:	5f 91       	pop	r21
    f8d2:	55 23       	and	r21, r21
    f8d4:	31 f0       	breq	.+12     	; 0xf8e2 <atan2+0x54>
    f8d6:	2b ed       	ldi	r18, 0xDB	; 219
    f8d8:	3f e0       	ldi	r19, 0x0F	; 15
    f8da:	49 e4       	ldi	r20, 0x49	; 73
    f8dc:	50 fd       	sbrc	r21, 0
    f8de:	49 ec       	ldi	r20, 0xC9	; 201
    f8e0:	63 cf       	rjmp	.-314    	; 0xf7a8 <__addsf3>
    f8e2:	08 95       	ret

0000f8e4 <atan>:
    f8e4:	df 93       	push	r29
    f8e6:	dd 27       	eor	r29, r29
    f8e8:	b9 2f       	mov	r27, r25
    f8ea:	bf 77       	andi	r27, 0x7F	; 127
    f8ec:	40 e8       	ldi	r20, 0x80	; 128
    f8ee:	5f e3       	ldi	r21, 0x3F	; 63
    f8f0:	16 16       	cp	r1, r22
    f8f2:	17 06       	cpc	r1, r23
    f8f4:	48 07       	cpc	r20, r24
    f8f6:	5b 07       	cpc	r21, r27
    f8f8:	10 f4       	brcc	.+4      	; 0xf8fe <atan+0x1a>
    f8fa:	d9 2f       	mov	r29, r25
    f8fc:	7c d2       	rcall	.+1272   	; 0xfdf6 <inverse>
    f8fe:	9f 93       	push	r25
    f900:	8f 93       	push	r24
    f902:	7f 93       	push	r23
    f904:	6f 93       	push	r22
    f906:	23 d4       	rcall	.+2118   	; 0x1014e <square>
    f908:	ec e1       	ldi	r30, 0x1C	; 28
    f90a:	f3 e0       	ldi	r31, 0x03	; 3
    f90c:	69 d1       	rcall	.+722    	; 0xfbe0 <__fp_powser>
    f90e:	c3 d1       	rcall	.+902    	; 0xfc96 <__fp_round>
    f910:	2f 91       	pop	r18
    f912:	3f 91       	pop	r19
    f914:	4f 91       	pop	r20
    f916:	5f 91       	pop	r21
    f918:	2f d3       	rcall	.+1630   	; 0xff78 <__mulsf3x>
    f91a:	dd 23       	and	r29, r29
    f91c:	49 f0       	breq	.+18     	; 0xf930 <atan+0x4c>
    f91e:	90 58       	subi	r25, 0x80	; 128
    f920:	a2 ea       	ldi	r26, 0xA2	; 162
    f922:	2a ed       	ldi	r18, 0xDA	; 218
    f924:	3f e0       	ldi	r19, 0x0F	; 15
    f926:	49 ec       	ldi	r20, 0xC9	; 201
    f928:	5f e3       	ldi	r21, 0x3F	; 63
    f92a:	d0 78       	andi	r29, 0x80	; 128
    f92c:	5d 27       	eor	r21, r29
    f92e:	4d df       	rcall	.-358    	; 0xf7ca <__addsf3x>
    f930:	df 91       	pop	r29
    f932:	b1 c1       	rjmp	.+866    	; 0xfc96 <__fp_round>

0000f934 <__cmpsf2>:
    f934:	28 d1       	rcall	.+592    	; 0xfb86 <__fp_cmp>
    f936:	08 f4       	brcc	.+2      	; 0xf93a <__cmpsf2+0x6>
    f938:	81 e0       	ldi	r24, 0x01	; 1
    f93a:	08 95       	ret

0000f93c <cos>:
    f93c:	85 d1       	rcall	.+778    	; 0xfc48 <__fp_rempio2>
    f93e:	e3 95       	inc	r30
    f940:	bb c1       	rjmp	.+886    	; 0xfcb8 <__fp_sinus>

0000f942 <__divsf3>:
    f942:	0c d0       	rcall	.+24     	; 0xf95c <__divsf3x>
    f944:	a8 c1       	rjmp	.+848    	; 0xfc96 <__fp_round>
    f946:	78 d1       	rcall	.+752    	; 0xfc38 <__fp_pscB>
    f948:	40 f0       	brcs	.+16     	; 0xf95a <__divsf3+0x18>
    f94a:	6f d1       	rcall	.+734    	; 0xfc2a <__fp_pscA>
    f94c:	30 f0       	brcs	.+12     	; 0xf95a <__divsf3+0x18>
    f94e:	21 f4       	brne	.+8      	; 0xf958 <__divsf3+0x16>
    f950:	5f 3f       	cpi	r21, 0xFF	; 255
    f952:	19 f0       	breq	.+6      	; 0xf95a <__divsf3+0x18>
    f954:	3c c1       	rjmp	.+632    	; 0xfbce <__fp_inf>
    f956:	51 11       	cpse	r21, r1
    f958:	e3 c1       	rjmp	.+966    	; 0xfd20 <__fp_szero>
    f95a:	3f c1       	rjmp	.+638    	; 0xfbda <__fp_nan>

0000f95c <__divsf3x>:
    f95c:	be d1       	rcall	.+892    	; 0xfcda <__fp_split3>
    f95e:	98 f3       	brcs	.-26     	; 0xf946 <__divsf3+0x4>

0000f960 <__divsf3_pse>:
    f960:	99 23       	and	r25, r25
    f962:	c9 f3       	breq	.-14     	; 0xf956 <__divsf3+0x14>
    f964:	55 23       	and	r21, r21
    f966:	b1 f3       	breq	.-20     	; 0xf954 <__divsf3+0x12>
    f968:	95 1b       	sub	r25, r21
    f96a:	55 0b       	sbc	r21, r21
    f96c:	bb 27       	eor	r27, r27
    f96e:	aa 27       	eor	r26, r26
    f970:	62 17       	cp	r22, r18
    f972:	73 07       	cpc	r23, r19
    f974:	84 07       	cpc	r24, r20
    f976:	38 f0       	brcs	.+14     	; 0xf986 <__divsf3_pse+0x26>
    f978:	9f 5f       	subi	r25, 0xFF	; 255
    f97a:	5f 4f       	sbci	r21, 0xFF	; 255
    f97c:	22 0f       	add	r18, r18
    f97e:	33 1f       	adc	r19, r19
    f980:	44 1f       	adc	r20, r20
    f982:	aa 1f       	adc	r26, r26
    f984:	a9 f3       	breq	.-22     	; 0xf970 <__divsf3_pse+0x10>
    f986:	33 d0       	rcall	.+102    	; 0xf9ee <__divsf3_pse+0x8e>
    f988:	0e 2e       	mov	r0, r30
    f98a:	3a f0       	brmi	.+14     	; 0xf99a <__divsf3_pse+0x3a>
    f98c:	e0 e8       	ldi	r30, 0x80	; 128
    f98e:	30 d0       	rcall	.+96     	; 0xf9f0 <__divsf3_pse+0x90>
    f990:	91 50       	subi	r25, 0x01	; 1
    f992:	50 40       	sbci	r21, 0x00	; 0
    f994:	e6 95       	lsr	r30
    f996:	00 1c       	adc	r0, r0
    f998:	ca f7       	brpl	.-14     	; 0xf98c <__divsf3_pse+0x2c>
    f99a:	29 d0       	rcall	.+82     	; 0xf9ee <__divsf3_pse+0x8e>
    f99c:	fe 2f       	mov	r31, r30
    f99e:	27 d0       	rcall	.+78     	; 0xf9ee <__divsf3_pse+0x8e>
    f9a0:	66 0f       	add	r22, r22
    f9a2:	77 1f       	adc	r23, r23
    f9a4:	88 1f       	adc	r24, r24
    f9a6:	bb 1f       	adc	r27, r27
    f9a8:	26 17       	cp	r18, r22
    f9aa:	37 07       	cpc	r19, r23
    f9ac:	48 07       	cpc	r20, r24
    f9ae:	ab 07       	cpc	r26, r27
    f9b0:	b0 e8       	ldi	r27, 0x80	; 128
    f9b2:	09 f0       	breq	.+2      	; 0xf9b6 <__divsf3_pse+0x56>
    f9b4:	bb 0b       	sbc	r27, r27
    f9b6:	80 2d       	mov	r24, r0
    f9b8:	bf 01       	movw	r22, r30
    f9ba:	ff 27       	eor	r31, r31
    f9bc:	93 58       	subi	r25, 0x83	; 131
    f9be:	5f 4f       	sbci	r21, 0xFF	; 255
    f9c0:	2a f0       	brmi	.+10     	; 0xf9cc <__divsf3_pse+0x6c>
    f9c2:	9e 3f       	cpi	r25, 0xFE	; 254
    f9c4:	51 05       	cpc	r21, r1
    f9c6:	68 f0       	brcs	.+26     	; 0xf9e2 <__divsf3_pse+0x82>
    f9c8:	02 c1       	rjmp	.+516    	; 0xfbce <__fp_inf>
    f9ca:	aa c1       	rjmp	.+852    	; 0xfd20 <__fp_szero>
    f9cc:	5f 3f       	cpi	r21, 0xFF	; 255
    f9ce:	ec f3       	brlt	.-6      	; 0xf9ca <__divsf3_pse+0x6a>
    f9d0:	98 3e       	cpi	r25, 0xE8	; 232
    f9d2:	dc f3       	brlt	.-10     	; 0xf9ca <__divsf3_pse+0x6a>
    f9d4:	86 95       	lsr	r24
    f9d6:	77 95       	ror	r23
    f9d8:	67 95       	ror	r22
    f9da:	b7 95       	ror	r27
    f9dc:	f7 95       	ror	r31
    f9de:	9f 5f       	subi	r25, 0xFF	; 255
    f9e0:	c9 f7       	brne	.-14     	; 0xf9d4 <__divsf3_pse+0x74>
    f9e2:	88 0f       	add	r24, r24
    f9e4:	91 1d       	adc	r25, r1
    f9e6:	96 95       	lsr	r25
    f9e8:	87 95       	ror	r24
    f9ea:	97 f9       	bld	r25, 7
    f9ec:	08 95       	ret
    f9ee:	e1 e0       	ldi	r30, 0x01	; 1
    f9f0:	66 0f       	add	r22, r22
    f9f2:	77 1f       	adc	r23, r23
    f9f4:	88 1f       	adc	r24, r24
    f9f6:	bb 1f       	adc	r27, r27
    f9f8:	62 17       	cp	r22, r18
    f9fa:	73 07       	cpc	r23, r19
    f9fc:	84 07       	cpc	r24, r20
    f9fe:	ba 07       	cpc	r27, r26
    fa00:	20 f0       	brcs	.+8      	; 0xfa0a <__divsf3_pse+0xaa>
    fa02:	62 1b       	sub	r22, r18
    fa04:	73 0b       	sbc	r23, r19
    fa06:	84 0b       	sbc	r24, r20
    fa08:	ba 0b       	sbc	r27, r26
    fa0a:	ee 1f       	adc	r30, r30
    fa0c:	88 f7       	brcc	.-30     	; 0xf9f0 <__divsf3_pse+0x90>
    fa0e:	e0 95       	com	r30
    fa10:	08 95       	ret
    fa12:	19 f4       	brne	.+6      	; 0xfa1a <__divsf3_pse+0xba>
    fa14:	0e f0       	brts	.+2      	; 0xfa18 <__divsf3_pse+0xb8>
    fa16:	db c0       	rjmp	.+438    	; 0xfbce <__fp_inf>
    fa18:	82 c1       	rjmp	.+772    	; 0xfd1e <__fp_zero>
    fa1a:	df c0       	rjmp	.+446    	; 0xfbda <__fp_nan>

0000fa1c <exp>:
    fa1c:	66 d1       	rcall	.+716    	; 0xfcea <__fp_splitA>
    fa1e:	c8 f3       	brcs	.-14     	; 0xfa12 <__divsf3_pse+0xb2>
    fa20:	96 38       	cpi	r25, 0x86	; 134
    fa22:	c0 f7       	brcc	.-16     	; 0xfa14 <__divsf3_pse+0xb4>
    fa24:	07 f8       	bld	r0, 7
    fa26:	0f 92       	push	r0
    fa28:	e8 94       	clt
    fa2a:	2b e3       	ldi	r18, 0x3B	; 59
    fa2c:	3a ea       	ldi	r19, 0xAA	; 170
    fa2e:	48 eb       	ldi	r20, 0xB8	; 184
    fa30:	5f e7       	ldi	r21, 0x7F	; 127
    fa32:	a4 d2       	rcall	.+1352   	; 0xff7c <__mulsf3_pse>
    fa34:	0f 92       	push	r0
    fa36:	0f 92       	push	r0
    fa38:	0f 92       	push	r0
    fa3a:	4d b7       	in	r20, 0x3d	; 61
    fa3c:	5e b7       	in	r21, 0x3e	; 62
    fa3e:	0f 92       	push	r0
    fa40:	5c d2       	rcall	.+1208   	; 0xfefa <modf>
    fa42:	e9 e4       	ldi	r30, 0x49	; 73
    fa44:	f3 e0       	ldi	r31, 0x03	; 3
    fa46:	cc d0       	rcall	.+408    	; 0xfbe0 <__fp_powser>
    fa48:	4f 91       	pop	r20
    fa4a:	5f 91       	pop	r21
    fa4c:	ef 91       	pop	r30
    fa4e:	ff 91       	pop	r31
    fa50:	e5 95       	asr	r30
    fa52:	ee 1f       	adc	r30, r30
    fa54:	ff 1f       	adc	r31, r31
    fa56:	49 f0       	breq	.+18     	; 0xfa6a <exp+0x4e>
    fa58:	fe 57       	subi	r31, 0x7E	; 126
    fa5a:	e0 68       	ori	r30, 0x80	; 128
    fa5c:	44 27       	eor	r20, r20
    fa5e:	ee 0f       	add	r30, r30
    fa60:	44 1f       	adc	r20, r20
    fa62:	fa 95       	dec	r31
    fa64:	e1 f7       	brne	.-8      	; 0xfa5e <exp+0x42>
    fa66:	41 95       	neg	r20
    fa68:	55 0b       	sbc	r21, r21
    fa6a:	ce d1       	rcall	.+924    	; 0xfe08 <ldexp>
    fa6c:	0f 90       	pop	r0
    fa6e:	07 fe       	sbrs	r0, 7
    fa70:	c2 c1       	rjmp	.+900    	; 0xfdf6 <inverse>
    fa72:	08 95       	ret

0000fa74 <__fixsfsi>:
    fa74:	04 d0       	rcall	.+8      	; 0xfa7e <__fixunssfsi>
    fa76:	68 94       	set
    fa78:	b1 11       	cpse	r27, r1
    fa7a:	52 c1       	rjmp	.+676    	; 0xfd20 <__fp_szero>
    fa7c:	08 95       	ret

0000fa7e <__fixunssfsi>:
    fa7e:	35 d1       	rcall	.+618    	; 0xfcea <__fp_splitA>
    fa80:	88 f0       	brcs	.+34     	; 0xfaa4 <__fixunssfsi+0x26>
    fa82:	9f 57       	subi	r25, 0x7F	; 127
    fa84:	90 f0       	brcs	.+36     	; 0xfaaa <__fixunssfsi+0x2c>
    fa86:	b9 2f       	mov	r27, r25
    fa88:	99 27       	eor	r25, r25
    fa8a:	b7 51       	subi	r27, 0x17	; 23
    fa8c:	a0 f0       	brcs	.+40     	; 0xfab6 <__fixunssfsi+0x38>
    fa8e:	d1 f0       	breq	.+52     	; 0xfac4 <__fixunssfsi+0x46>
    fa90:	66 0f       	add	r22, r22
    fa92:	77 1f       	adc	r23, r23
    fa94:	88 1f       	adc	r24, r24
    fa96:	99 1f       	adc	r25, r25
    fa98:	1a f0       	brmi	.+6      	; 0xfaa0 <__fixunssfsi+0x22>
    fa9a:	ba 95       	dec	r27
    fa9c:	c9 f7       	brne	.-14     	; 0xfa90 <__fixunssfsi+0x12>
    fa9e:	12 c0       	rjmp	.+36     	; 0xfac4 <__fixunssfsi+0x46>
    faa0:	b1 30       	cpi	r27, 0x01	; 1
    faa2:	81 f0       	breq	.+32     	; 0xfac4 <__fixunssfsi+0x46>
    faa4:	3c d1       	rcall	.+632    	; 0xfd1e <__fp_zero>
    faa6:	b1 e0       	ldi	r27, 0x01	; 1
    faa8:	08 95       	ret
    faaa:	39 c1       	rjmp	.+626    	; 0xfd1e <__fp_zero>
    faac:	67 2f       	mov	r22, r23
    faae:	78 2f       	mov	r23, r24
    fab0:	88 27       	eor	r24, r24
    fab2:	b8 5f       	subi	r27, 0xF8	; 248
    fab4:	39 f0       	breq	.+14     	; 0xfac4 <__fixunssfsi+0x46>
    fab6:	b9 3f       	cpi	r27, 0xF9	; 249
    fab8:	cc f3       	brlt	.-14     	; 0xfaac <__fixunssfsi+0x2e>
    faba:	86 95       	lsr	r24
    fabc:	77 95       	ror	r23
    fabe:	67 95       	ror	r22
    fac0:	b3 95       	inc	r27
    fac2:	d9 f7       	brne	.-10     	; 0xfaba <__fixunssfsi+0x3c>
    fac4:	3e f4       	brtc	.+14     	; 0xfad4 <__fixunssfsi+0x56>
    fac6:	90 95       	com	r25
    fac8:	80 95       	com	r24
    faca:	70 95       	com	r23
    facc:	61 95       	neg	r22
    face:	7f 4f       	sbci	r23, 0xFF	; 255
    fad0:	8f 4f       	sbci	r24, 0xFF	; 255
    fad2:	9f 4f       	sbci	r25, 0xFF	; 255
    fad4:	08 95       	ret

0000fad6 <__floatunsisf>:
    fad6:	e8 94       	clt
    fad8:	09 c0       	rjmp	.+18     	; 0xfaec <__floatsisf+0x12>

0000fada <__floatsisf>:
    fada:	97 fb       	bst	r25, 7
    fadc:	3e f4       	brtc	.+14     	; 0xfaec <__floatsisf+0x12>
    fade:	90 95       	com	r25
    fae0:	80 95       	com	r24
    fae2:	70 95       	com	r23
    fae4:	61 95       	neg	r22
    fae6:	7f 4f       	sbci	r23, 0xFF	; 255
    fae8:	8f 4f       	sbci	r24, 0xFF	; 255
    faea:	9f 4f       	sbci	r25, 0xFF	; 255
    faec:	99 23       	and	r25, r25
    faee:	a9 f0       	breq	.+42     	; 0xfb1a <__floatsisf+0x40>
    faf0:	f9 2f       	mov	r31, r25
    faf2:	96 e9       	ldi	r25, 0x96	; 150
    faf4:	bb 27       	eor	r27, r27
    faf6:	93 95       	inc	r25
    faf8:	f6 95       	lsr	r31
    fafa:	87 95       	ror	r24
    fafc:	77 95       	ror	r23
    fafe:	67 95       	ror	r22
    fb00:	b7 95       	ror	r27
    fb02:	f1 11       	cpse	r31, r1
    fb04:	f8 cf       	rjmp	.-16     	; 0xfaf6 <__floatsisf+0x1c>
    fb06:	fa f4       	brpl	.+62     	; 0xfb46 <__floatsisf+0x6c>
    fb08:	bb 0f       	add	r27, r27
    fb0a:	11 f4       	brne	.+4      	; 0xfb10 <__floatsisf+0x36>
    fb0c:	60 ff       	sbrs	r22, 0
    fb0e:	1b c0       	rjmp	.+54     	; 0xfb46 <__floatsisf+0x6c>
    fb10:	6f 5f       	subi	r22, 0xFF	; 255
    fb12:	7f 4f       	sbci	r23, 0xFF	; 255
    fb14:	8f 4f       	sbci	r24, 0xFF	; 255
    fb16:	9f 4f       	sbci	r25, 0xFF	; 255
    fb18:	16 c0       	rjmp	.+44     	; 0xfb46 <__floatsisf+0x6c>
    fb1a:	88 23       	and	r24, r24
    fb1c:	11 f0       	breq	.+4      	; 0xfb22 <__floatsisf+0x48>
    fb1e:	96 e9       	ldi	r25, 0x96	; 150
    fb20:	11 c0       	rjmp	.+34     	; 0xfb44 <__floatsisf+0x6a>
    fb22:	77 23       	and	r23, r23
    fb24:	21 f0       	breq	.+8      	; 0xfb2e <__floatsisf+0x54>
    fb26:	9e e8       	ldi	r25, 0x8E	; 142
    fb28:	87 2f       	mov	r24, r23
    fb2a:	76 2f       	mov	r23, r22
    fb2c:	05 c0       	rjmp	.+10     	; 0xfb38 <__floatsisf+0x5e>
    fb2e:	66 23       	and	r22, r22
    fb30:	71 f0       	breq	.+28     	; 0xfb4e <__floatsisf+0x74>
    fb32:	96 e8       	ldi	r25, 0x86	; 134
    fb34:	86 2f       	mov	r24, r22
    fb36:	70 e0       	ldi	r23, 0x00	; 0
    fb38:	60 e0       	ldi	r22, 0x00	; 0
    fb3a:	2a f0       	brmi	.+10     	; 0xfb46 <__floatsisf+0x6c>
    fb3c:	9a 95       	dec	r25
    fb3e:	66 0f       	add	r22, r22
    fb40:	77 1f       	adc	r23, r23
    fb42:	88 1f       	adc	r24, r24
    fb44:	da f7       	brpl	.-10     	; 0xfb3c <__floatsisf+0x62>
    fb46:	88 0f       	add	r24, r24
    fb48:	96 95       	lsr	r25
    fb4a:	87 95       	ror	r24
    fb4c:	97 f9       	bld	r25, 7
    fb4e:	08 95       	ret

0000fb50 <__fp_arccos>:
    fb50:	df 93       	push	r29
    fb52:	cf 93       	push	r28
    fb54:	1f 93       	push	r17
    fb56:	0f 93       	push	r16
    fb58:	8b 01       	movw	r16, r22
    fb5a:	ec 01       	movw	r28, r24
    fb5c:	e1 e7       	ldi	r30, 0x71	; 113
    fb5e:	f3 e0       	ldi	r31, 0x03	; 3
    fb60:	3f d0       	rcall	.+126    	; 0xfbe0 <__fp_powser>
    fb62:	99 d0       	rcall	.+306    	; 0xfc96 <__fp_round>
    fb64:	98 01       	movw	r18, r16
    fb66:	ae 01       	movw	r20, r28
    fb68:	8b 01       	movw	r16, r22
    fb6a:	ec 01       	movw	r28, r24
    fb6c:	60 e0       	ldi	r22, 0x00	; 0
    fb6e:	70 e0       	ldi	r23, 0x00	; 0
    fb70:	80 e8       	ldi	r24, 0x80	; 128
    fb72:	9f e3       	ldi	r25, 0x3F	; 63
    fb74:	18 de       	rcall	.-976    	; 0xf7a6 <__subsf3>
    fb76:	ad d2       	rcall	.+1370   	; 0x100d2 <sqrt>
    fb78:	98 01       	movw	r18, r16
    fb7a:	ae 01       	movw	r20, r28
    fb7c:	0f 91       	pop	r16
    fb7e:	1f 91       	pop	r17
    fb80:	cf 91       	pop	r28
    fb82:	df 91       	pop	r29
    fb84:	f9 c1       	rjmp	.+1010   	; 0xff78 <__mulsf3x>

0000fb86 <__fp_cmp>:
    fb86:	99 0f       	add	r25, r25
    fb88:	00 08       	sbc	r0, r0
    fb8a:	55 0f       	add	r21, r21
    fb8c:	aa 0b       	sbc	r26, r26
    fb8e:	e0 e8       	ldi	r30, 0x80	; 128
    fb90:	fe ef       	ldi	r31, 0xFE	; 254
    fb92:	16 16       	cp	r1, r22
    fb94:	17 06       	cpc	r1, r23
    fb96:	e8 07       	cpc	r30, r24
    fb98:	f9 07       	cpc	r31, r25
    fb9a:	c0 f0       	brcs	.+48     	; 0xfbcc <__fp_cmp+0x46>
    fb9c:	12 16       	cp	r1, r18
    fb9e:	13 06       	cpc	r1, r19
    fba0:	e4 07       	cpc	r30, r20
    fba2:	f5 07       	cpc	r31, r21
    fba4:	98 f0       	brcs	.+38     	; 0xfbcc <__fp_cmp+0x46>
    fba6:	62 1b       	sub	r22, r18
    fba8:	73 0b       	sbc	r23, r19
    fbaa:	84 0b       	sbc	r24, r20
    fbac:	95 0b       	sbc	r25, r21
    fbae:	39 f4       	brne	.+14     	; 0xfbbe <__fp_cmp+0x38>
    fbb0:	0a 26       	eor	r0, r26
    fbb2:	61 f0       	breq	.+24     	; 0xfbcc <__fp_cmp+0x46>
    fbb4:	23 2b       	or	r18, r19
    fbb6:	24 2b       	or	r18, r20
    fbb8:	25 2b       	or	r18, r21
    fbba:	21 f4       	brne	.+8      	; 0xfbc4 <__fp_cmp+0x3e>
    fbbc:	08 95       	ret
    fbbe:	0a 26       	eor	r0, r26
    fbc0:	09 f4       	brne	.+2      	; 0xfbc4 <__fp_cmp+0x3e>
    fbc2:	a1 40       	sbci	r26, 0x01	; 1
    fbc4:	a6 95       	lsr	r26
    fbc6:	8f ef       	ldi	r24, 0xFF	; 255
    fbc8:	81 1d       	adc	r24, r1
    fbca:	81 1d       	adc	r24, r1
    fbcc:	08 95       	ret

0000fbce <__fp_inf>:
    fbce:	97 f9       	bld	r25, 7
    fbd0:	9f 67       	ori	r25, 0x7F	; 127
    fbd2:	80 e8       	ldi	r24, 0x80	; 128
    fbd4:	70 e0       	ldi	r23, 0x00	; 0
    fbd6:	60 e0       	ldi	r22, 0x00	; 0
    fbd8:	08 95       	ret

0000fbda <__fp_nan>:
    fbda:	9f ef       	ldi	r25, 0xFF	; 255
    fbdc:	80 ec       	ldi	r24, 0xC0	; 192
    fbde:	08 95       	ret

0000fbe0 <__fp_powser>:
    fbe0:	df 93       	push	r29
    fbe2:	cf 93       	push	r28
    fbe4:	1f 93       	push	r17
    fbe6:	0f 93       	push	r16
    fbe8:	ff 92       	push	r15
    fbea:	ef 92       	push	r14
    fbec:	df 92       	push	r13
    fbee:	7b 01       	movw	r14, r22
    fbf0:	8c 01       	movw	r16, r24
    fbf2:	68 94       	set
    fbf4:	05 c0       	rjmp	.+10     	; 0xfc00 <__fp_powser+0x20>
    fbf6:	da 2e       	mov	r13, r26
    fbf8:	ef 01       	movw	r28, r30
    fbfa:	be d1       	rcall	.+892    	; 0xff78 <__mulsf3x>
    fbfc:	fe 01       	movw	r30, r28
    fbfe:	e8 94       	clt
    fc00:	a5 91       	lpm	r26, Z+
    fc02:	25 91       	lpm	r18, Z+
    fc04:	35 91       	lpm	r19, Z+
    fc06:	45 91       	lpm	r20, Z+
    fc08:	55 91       	lpm	r21, Z+
    fc0a:	ae f3       	brts	.-22     	; 0xfbf6 <__fp_powser+0x16>
    fc0c:	ef 01       	movw	r28, r30
    fc0e:	dd dd       	rcall	.-1094   	; 0xf7ca <__addsf3x>
    fc10:	fe 01       	movw	r30, r28
    fc12:	97 01       	movw	r18, r14
    fc14:	a8 01       	movw	r20, r16
    fc16:	da 94       	dec	r13
    fc18:	79 f7       	brne	.-34     	; 0xfbf8 <__fp_powser+0x18>
    fc1a:	df 90       	pop	r13
    fc1c:	ef 90       	pop	r14
    fc1e:	ff 90       	pop	r15
    fc20:	0f 91       	pop	r16
    fc22:	1f 91       	pop	r17
    fc24:	cf 91       	pop	r28
    fc26:	df 91       	pop	r29
    fc28:	08 95       	ret

0000fc2a <__fp_pscA>:
    fc2a:	00 24       	eor	r0, r0
    fc2c:	0a 94       	dec	r0
    fc2e:	16 16       	cp	r1, r22
    fc30:	17 06       	cpc	r1, r23
    fc32:	18 06       	cpc	r1, r24
    fc34:	09 06       	cpc	r0, r25
    fc36:	08 95       	ret

0000fc38 <__fp_pscB>:
    fc38:	00 24       	eor	r0, r0
    fc3a:	0a 94       	dec	r0
    fc3c:	12 16       	cp	r1, r18
    fc3e:	13 06       	cpc	r1, r19
    fc40:	14 06       	cpc	r1, r20
    fc42:	05 06       	cpc	r0, r21
    fc44:	08 95       	ret
    fc46:	c9 cf       	rjmp	.-110    	; 0xfbda <__fp_nan>

0000fc48 <__fp_rempio2>:
    fc48:	50 d0       	rcall	.+160    	; 0xfcea <__fp_splitA>
    fc4a:	e8 f3       	brcs	.-6      	; 0xfc46 <__fp_pscB+0xe>
    fc4c:	e8 94       	clt
    fc4e:	e0 e0       	ldi	r30, 0x00	; 0
    fc50:	bb 27       	eor	r27, r27
    fc52:	9f 57       	subi	r25, 0x7F	; 127
    fc54:	f0 f0       	brcs	.+60     	; 0xfc92 <__fp_rempio2+0x4a>
    fc56:	2a ed       	ldi	r18, 0xDA	; 218
    fc58:	3f e0       	ldi	r19, 0x0F	; 15
    fc5a:	49 ec       	ldi	r20, 0xC9	; 201
    fc5c:	06 c0       	rjmp	.+12     	; 0xfc6a <__fp_rempio2+0x22>
    fc5e:	ee 0f       	add	r30, r30
    fc60:	bb 0f       	add	r27, r27
    fc62:	66 1f       	adc	r22, r22
    fc64:	77 1f       	adc	r23, r23
    fc66:	88 1f       	adc	r24, r24
    fc68:	28 f0       	brcs	.+10     	; 0xfc74 <__fp_rempio2+0x2c>
    fc6a:	b2 3a       	cpi	r27, 0xA2	; 162
    fc6c:	62 07       	cpc	r22, r18
    fc6e:	73 07       	cpc	r23, r19
    fc70:	84 07       	cpc	r24, r20
    fc72:	28 f0       	brcs	.+10     	; 0xfc7e <__fp_rempio2+0x36>
    fc74:	b2 5a       	subi	r27, 0xA2	; 162
    fc76:	62 0b       	sbc	r22, r18
    fc78:	73 0b       	sbc	r23, r19
    fc7a:	84 0b       	sbc	r24, r20
    fc7c:	e3 95       	inc	r30
    fc7e:	9a 95       	dec	r25
    fc80:	72 f7       	brpl	.-36     	; 0xfc5e <__fp_rempio2+0x16>
    fc82:	80 38       	cpi	r24, 0x80	; 128
    fc84:	30 f4       	brcc	.+12     	; 0xfc92 <__fp_rempio2+0x4a>
    fc86:	9a 95       	dec	r25
    fc88:	bb 0f       	add	r27, r27
    fc8a:	66 1f       	adc	r22, r22
    fc8c:	77 1f       	adc	r23, r23
    fc8e:	88 1f       	adc	r24, r24
    fc90:	d2 f7       	brpl	.-12     	; 0xfc86 <__fp_rempio2+0x3e>
    fc92:	90 48       	sbci	r25, 0x80	; 128
    fc94:	71 c2       	rjmp	.+1250   	; 0x10178 <__fp_mpack_finite>

0000fc96 <__fp_round>:
    fc96:	09 2e       	mov	r0, r25
    fc98:	03 94       	inc	r0
    fc9a:	00 0c       	add	r0, r0
    fc9c:	11 f4       	brne	.+4      	; 0xfca2 <__fp_round+0xc>
    fc9e:	88 23       	and	r24, r24
    fca0:	52 f0       	brmi	.+20     	; 0xfcb6 <__fp_round+0x20>
    fca2:	bb 0f       	add	r27, r27
    fca4:	40 f4       	brcc	.+16     	; 0xfcb6 <__fp_round+0x20>
    fca6:	bf 2b       	or	r27, r31
    fca8:	11 f4       	brne	.+4      	; 0xfcae <__fp_round+0x18>
    fcaa:	60 ff       	sbrs	r22, 0
    fcac:	04 c0       	rjmp	.+8      	; 0xfcb6 <__fp_round+0x20>
    fcae:	6f 5f       	subi	r22, 0xFF	; 255
    fcb0:	7f 4f       	sbci	r23, 0xFF	; 255
    fcb2:	8f 4f       	sbci	r24, 0xFF	; 255
    fcb4:	9f 4f       	sbci	r25, 0xFF	; 255
    fcb6:	08 95       	ret

0000fcb8 <__fp_sinus>:
    fcb8:	ef 93       	push	r30
    fcba:	e0 ff       	sbrs	r30, 0
    fcbc:	06 c0       	rjmp	.+12     	; 0xfcca <__fp_sinus+0x12>
    fcbe:	a2 ea       	ldi	r26, 0xA2	; 162
    fcc0:	2a ed       	ldi	r18, 0xDA	; 218
    fcc2:	3f e0       	ldi	r19, 0x0F	; 15
    fcc4:	49 ec       	ldi	r20, 0xC9	; 201
    fcc6:	5f eb       	ldi	r21, 0xBF	; 191
    fcc8:	80 dd       	rcall	.-1280   	; 0xf7ca <__addsf3x>
    fcca:	e5 df       	rcall	.-54     	; 0xfc96 <__fp_round>
    fccc:	0f 90       	pop	r0
    fcce:	03 94       	inc	r0
    fcd0:	01 fc       	sbrc	r0, 1
    fcd2:	90 58       	subi	r25, 0x80	; 128
    fcd4:	e9 e9       	ldi	r30, 0x99	; 153
    fcd6:	f3 e0       	ldi	r31, 0x03	; 3
    fcd8:	62 c2       	rjmp	.+1220   	; 0x1019e <__fp_powsodd>

0000fcda <__fp_split3>:
    fcda:	57 fd       	sbrc	r21, 7
    fcdc:	90 58       	subi	r25, 0x80	; 128
    fcde:	44 0f       	add	r20, r20
    fce0:	55 1f       	adc	r21, r21
    fce2:	59 f0       	breq	.+22     	; 0xfcfa <__fp_splitA+0x10>
    fce4:	5f 3f       	cpi	r21, 0xFF	; 255
    fce6:	71 f0       	breq	.+28     	; 0xfd04 <__fp_splitA+0x1a>
    fce8:	47 95       	ror	r20

0000fcea <__fp_splitA>:
    fcea:	88 0f       	add	r24, r24
    fcec:	97 fb       	bst	r25, 7
    fcee:	99 1f       	adc	r25, r25
    fcf0:	61 f0       	breq	.+24     	; 0xfd0a <__fp_splitA+0x20>
    fcf2:	9f 3f       	cpi	r25, 0xFF	; 255
    fcf4:	79 f0       	breq	.+30     	; 0xfd14 <__fp_splitA+0x2a>
    fcf6:	87 95       	ror	r24
    fcf8:	08 95       	ret
    fcfa:	12 16       	cp	r1, r18
    fcfc:	13 06       	cpc	r1, r19
    fcfe:	14 06       	cpc	r1, r20
    fd00:	55 1f       	adc	r21, r21
    fd02:	f2 cf       	rjmp	.-28     	; 0xfce8 <__fp_split3+0xe>
    fd04:	46 95       	lsr	r20
    fd06:	f1 df       	rcall	.-30     	; 0xfcea <__fp_splitA>
    fd08:	08 c0       	rjmp	.+16     	; 0xfd1a <__fp_splitA+0x30>
    fd0a:	16 16       	cp	r1, r22
    fd0c:	17 06       	cpc	r1, r23
    fd0e:	18 06       	cpc	r1, r24
    fd10:	99 1f       	adc	r25, r25
    fd12:	f1 cf       	rjmp	.-30     	; 0xfcf6 <__fp_splitA+0xc>
    fd14:	86 95       	lsr	r24
    fd16:	71 05       	cpc	r23, r1
    fd18:	61 05       	cpc	r22, r1
    fd1a:	08 94       	sec
    fd1c:	08 95       	ret

0000fd1e <__fp_zero>:
    fd1e:	e8 94       	clt

0000fd20 <__fp_szero>:
    fd20:	bb 27       	eor	r27, r27
    fd22:	66 27       	eor	r22, r22
    fd24:	77 27       	eor	r23, r23
    fd26:	cb 01       	movw	r24, r22
    fd28:	97 f9       	bld	r25, 7
    fd2a:	08 95       	ret

0000fd2c <__gesf2>:
    fd2c:	2c df       	rcall	.-424    	; 0xfb86 <__fp_cmp>
    fd2e:	08 f4       	brcc	.+2      	; 0xfd32 <__gesf2+0x6>
    fd30:	8f ef       	ldi	r24, 0xFF	; 255
    fd32:	08 95       	ret
    fd34:	7a df       	rcall	.-268    	; 0xfc2a <__fp_pscA>
    fd36:	19 f0       	breq	.+6      	; 0xfd3e <__gesf2+0x12>
    fd38:	7f df       	rcall	.-258    	; 0xfc38 <__fp_pscB>
    fd3a:	09 f0       	breq	.+2      	; 0xfd3e <__gesf2+0x12>
    fd3c:	4e cf       	rjmp	.-356    	; 0xfbda <__fp_nan>
    fd3e:	47 cf       	rjmp	.-370    	; 0xfbce <__fp_inf>
    fd40:	b9 01       	movw	r22, r18
    fd42:	ca 01       	movw	r24, r20
    fd44:	17 c2       	rjmp	.+1070   	; 0x10174 <__fp_mpack>

0000fd46 <hypot>:
    fd46:	9f 77       	andi	r25, 0x7F	; 127
    fd48:	5f 77       	andi	r21, 0x7F	; 127
    fd4a:	c7 df       	rcall	.-114    	; 0xfcda <__fp_split3>
    fd4c:	98 f3       	brcs	.-26     	; 0xfd34 <__gesf2+0x8>
    fd4e:	99 23       	and	r25, r25
    fd50:	b9 f3       	breq	.-18     	; 0xfd40 <__gesf2+0x14>
    fd52:	55 23       	and	r21, r21
    fd54:	b9 f3       	breq	.-18     	; 0xfd44 <__gesf2+0x18>
    fd56:	ff 27       	eor	r31, r31
    fd58:	95 17       	cp	r25, r21
    fd5a:	58 f4       	brcc	.+22     	; 0xfd72 <hypot+0x2c>
    fd5c:	e5 2f       	mov	r30, r21
    fd5e:	e9 1b       	sub	r30, r25
    fd60:	ed 30       	cpi	r30, 0x0D	; 13
    fd62:	70 f7       	brcc	.-36     	; 0xfd40 <__gesf2+0x14>
    fd64:	5e 3b       	cpi	r21, 0xBE	; 190
    fd66:	10 f0       	brcs	.+4      	; 0xfd6c <hypot+0x26>
    fd68:	f1 e4       	ldi	r31, 0x41	; 65
    fd6a:	1c c0       	rjmp	.+56     	; 0xfda4 <hypot+0x5e>
    fd6c:	90 34       	cpi	r25, 0x40	; 64
    fd6e:	e0 f4       	brcc	.+56     	; 0xfda8 <hypot+0x62>
    fd70:	0a c0       	rjmp	.+20     	; 0xfd86 <hypot+0x40>
    fd72:	e9 2f       	mov	r30, r25
    fd74:	e5 1b       	sub	r30, r21
    fd76:	ed 30       	cpi	r30, 0x0D	; 13
    fd78:	28 f7       	brcc	.-54     	; 0xfd44 <__gesf2+0x18>
    fd7a:	9e 3b       	cpi	r25, 0xBE	; 190
    fd7c:	10 f0       	brcs	.+4      	; 0xfd82 <hypot+0x3c>
    fd7e:	f1 e4       	ldi	r31, 0x41	; 65
    fd80:	11 c0       	rjmp	.+34     	; 0xfda4 <hypot+0x5e>
    fd82:	50 34       	cpi	r21, 0x40	; 64
    fd84:	88 f4       	brcc	.+34     	; 0xfda8 <hypot+0x62>
    fd86:	f9 ea       	ldi	r31, 0xA9	; 169
    fd88:	88 23       	and	r24, r24
    fd8a:	2a f0       	brmi	.+10     	; 0xfd96 <hypot+0x50>
    fd8c:	9a 95       	dec	r25
    fd8e:	66 0f       	add	r22, r22
    fd90:	77 1f       	adc	r23, r23
    fd92:	88 1f       	adc	r24, r24
    fd94:	da f7       	brpl	.-10     	; 0xfd8c <hypot+0x46>
    fd96:	44 23       	and	r20, r20
    fd98:	2a f0       	brmi	.+10     	; 0xfda4 <hypot+0x5e>
    fd9a:	5a 95       	dec	r21
    fd9c:	22 0f       	add	r18, r18
    fd9e:	33 1f       	adc	r19, r19
    fda0:	44 1f       	adc	r20, r20
    fda2:	da f7       	brpl	.-10     	; 0xfd9a <hypot+0x54>
    fda4:	9f 1b       	sub	r25, r31
    fda6:	5f 1b       	sub	r21, r31
    fda8:	ff 93       	push	r31
    fdaa:	1f 93       	push	r17
    fdac:	0f 93       	push	r16
    fdae:	ff 92       	push	r15
    fdb0:	ef 92       	push	r14
    fdb2:	79 01       	movw	r14, r18
    fdb4:	8a 01       	movw	r16, r20
    fdb6:	bb 27       	eor	r27, r27
    fdb8:	ab 2f       	mov	r26, r27
    fdba:	9b 01       	movw	r18, r22
    fdbc:	ac 01       	movw	r20, r24
    fdbe:	de d0       	rcall	.+444    	; 0xff7c <__mulsf3_pse>
    fdc0:	97 01       	movw	r18, r14
    fdc2:	a8 01       	movw	r20, r16
    fdc4:	bf 93       	push	r27
    fdc6:	7b 01       	movw	r14, r22
    fdc8:	8c 01       	movw	r16, r24
    fdca:	aa 27       	eor	r26, r26
    fdcc:	ba 2f       	mov	r27, r26
    fdce:	b9 01       	movw	r22, r18
    fdd0:	ca 01       	movw	r24, r20
    fdd2:	d4 d0       	rcall	.+424    	; 0xff7c <__mulsf3_pse>
    fdd4:	af 91       	pop	r26
    fdd6:	97 01       	movw	r18, r14
    fdd8:	a8 01       	movw	r20, r16
    fdda:	ef 90       	pop	r14
    fddc:	ff 90       	pop	r15
    fdde:	0f 91       	pop	r16
    fde0:	1f 91       	pop	r17
    fde2:	f3 dc       	rcall	.-1562   	; 0xf7ca <__addsf3x>
    fde4:	58 df       	rcall	.-336    	; 0xfc96 <__fp_round>
    fde6:	75 d1       	rcall	.+746    	; 0x100d2 <sqrt>
    fde8:	4f 91       	pop	r20
    fdea:	40 ff       	sbrs	r20, 0
    fdec:	08 95       	ret
    fdee:	55 27       	eor	r21, r21
    fdf0:	47 fd       	sbrc	r20, 7
    fdf2:	50 95       	com	r21
    fdf4:	09 c0       	rjmp	.+18     	; 0xfe08 <ldexp>

0000fdf6 <inverse>:
    fdf6:	9b 01       	movw	r18, r22
    fdf8:	ac 01       	movw	r20, r24
    fdfa:	60 e0       	ldi	r22, 0x00	; 0
    fdfc:	70 e0       	ldi	r23, 0x00	; 0
    fdfe:	80 e8       	ldi	r24, 0x80	; 128
    fe00:	9f e3       	ldi	r25, 0x3F	; 63
    fe02:	9f cd       	rjmp	.-1218   	; 0xf942 <__divsf3>
    fe04:	e4 ce       	rjmp	.-568    	; 0xfbce <__fp_inf>
    fe06:	b6 c1       	rjmp	.+876    	; 0x10174 <__fp_mpack>

0000fe08 <ldexp>:
    fe08:	70 df       	rcall	.-288    	; 0xfcea <__fp_splitA>
    fe0a:	e8 f3       	brcs	.-6      	; 0xfe06 <inverse+0x10>
    fe0c:	99 23       	and	r25, r25
    fe0e:	d9 f3       	breq	.-10     	; 0xfe06 <inverse+0x10>
    fe10:	94 0f       	add	r25, r20
    fe12:	51 1d       	adc	r21, r1
    fe14:	bb f3       	brvs	.-18     	; 0xfe04 <inverse+0xe>
    fe16:	91 50       	subi	r25, 0x01	; 1
    fe18:	50 40       	sbci	r21, 0x00	; 0
    fe1a:	94 f0       	brlt	.+36     	; 0xfe40 <ldexp+0x38>
    fe1c:	59 f0       	breq	.+22     	; 0xfe34 <ldexp+0x2c>
    fe1e:	88 23       	and	r24, r24
    fe20:	32 f0       	brmi	.+12     	; 0xfe2e <ldexp+0x26>
    fe22:	66 0f       	add	r22, r22
    fe24:	77 1f       	adc	r23, r23
    fe26:	88 1f       	adc	r24, r24
    fe28:	91 50       	subi	r25, 0x01	; 1
    fe2a:	50 40       	sbci	r21, 0x00	; 0
    fe2c:	c1 f7       	brne	.-16     	; 0xfe1e <ldexp+0x16>
    fe2e:	9e 3f       	cpi	r25, 0xFE	; 254
    fe30:	51 05       	cpc	r21, r1
    fe32:	44 f7       	brge	.-48     	; 0xfe04 <inverse+0xe>
    fe34:	88 0f       	add	r24, r24
    fe36:	91 1d       	adc	r25, r1
    fe38:	96 95       	lsr	r25
    fe3a:	87 95       	ror	r24
    fe3c:	97 f9       	bld	r25, 7
    fe3e:	08 95       	ret
    fe40:	5f 3f       	cpi	r21, 0xFF	; 255
    fe42:	ac f0       	brlt	.+42     	; 0xfe6e <ldexp+0x66>
    fe44:	98 3e       	cpi	r25, 0xE8	; 232
    fe46:	9c f0       	brlt	.+38     	; 0xfe6e <ldexp+0x66>
    fe48:	bb 27       	eor	r27, r27
    fe4a:	86 95       	lsr	r24
    fe4c:	77 95       	ror	r23
    fe4e:	67 95       	ror	r22
    fe50:	b7 95       	ror	r27
    fe52:	08 f4       	brcc	.+2      	; 0xfe56 <ldexp+0x4e>
    fe54:	b1 60       	ori	r27, 0x01	; 1
    fe56:	93 95       	inc	r25
    fe58:	c1 f7       	brne	.-16     	; 0xfe4a <ldexp+0x42>
    fe5a:	bb 0f       	add	r27, r27
    fe5c:	58 f7       	brcc	.-42     	; 0xfe34 <ldexp+0x2c>
    fe5e:	11 f4       	brne	.+4      	; 0xfe64 <ldexp+0x5c>
    fe60:	60 ff       	sbrs	r22, 0
    fe62:	e8 cf       	rjmp	.-48     	; 0xfe34 <ldexp+0x2c>
    fe64:	6f 5f       	subi	r22, 0xFF	; 255
    fe66:	7f 4f       	sbci	r23, 0xFF	; 255
    fe68:	8f 4f       	sbci	r24, 0xFF	; 255
    fe6a:	9f 4f       	sbci	r25, 0xFF	; 255
    fe6c:	e3 cf       	rjmp	.-58     	; 0xfe34 <ldexp+0x2c>
    fe6e:	58 cf       	rjmp	.-336    	; 0xfd20 <__fp_szero>
    fe70:	0e f0       	brts	.+2      	; 0xfe74 <ldexp+0x6c>
    fe72:	80 c1       	rjmp	.+768    	; 0x10174 <__fp_mpack>
    fe74:	b2 ce       	rjmp	.-668    	; 0xfbda <__fp_nan>
    fe76:	68 94       	set
    fe78:	aa ce       	rjmp	.-684    	; 0xfbce <__fp_inf>

0000fe7a <log>:
    fe7a:	37 df       	rcall	.-402    	; 0xfcea <__fp_splitA>
    fe7c:	c8 f3       	brcs	.-14     	; 0xfe70 <ldexp+0x68>
    fe7e:	99 23       	and	r25, r25
    fe80:	d1 f3       	breq	.-12     	; 0xfe76 <ldexp+0x6e>
    fe82:	c6 f3       	brts	.-16     	; 0xfe74 <ldexp+0x6c>
    fe84:	df 93       	push	r29
    fe86:	cf 93       	push	r28
    fe88:	1f 93       	push	r17
    fe8a:	0f 93       	push	r16
    fe8c:	ff 92       	push	r15
    fe8e:	c9 2f       	mov	r28, r25
    fe90:	dd 27       	eor	r29, r29
    fe92:	88 23       	and	r24, r24
    fe94:	2a f0       	brmi	.+10     	; 0xfea0 <log+0x26>
    fe96:	21 97       	sbiw	r28, 0x01	; 1
    fe98:	66 0f       	add	r22, r22
    fe9a:	77 1f       	adc	r23, r23
    fe9c:	88 1f       	adc	r24, r24
    fe9e:	da f7       	brpl	.-10     	; 0xfe96 <log+0x1c>
    fea0:	20 e0       	ldi	r18, 0x00	; 0
    fea2:	30 e0       	ldi	r19, 0x00	; 0
    fea4:	40 e8       	ldi	r20, 0x80	; 128
    fea6:	5f eb       	ldi	r21, 0xBF	; 191
    fea8:	9f e3       	ldi	r25, 0x3F	; 63
    feaa:	88 39       	cpi	r24, 0x98	; 152
    feac:	20 f0       	brcs	.+8      	; 0xfeb6 <log+0x3c>
    feae:	80 3e       	cpi	r24, 0xE0	; 224
    feb0:	30 f0       	brcs	.+12     	; 0xfebe <log+0x44>
    feb2:	21 96       	adiw	r28, 0x01	; 1
    feb4:	8f 77       	andi	r24, 0x7F	; 127
    feb6:	78 dc       	rcall	.-1808   	; 0xf7a8 <__addsf3>
    feb8:	e7 eb       	ldi	r30, 0xB7	; 183
    feba:	f3 e0       	ldi	r31, 0x03	; 3
    febc:	03 c0       	rjmp	.+6      	; 0xfec4 <log+0x4a>
    febe:	74 dc       	rcall	.-1816   	; 0xf7a8 <__addsf3>
    fec0:	e4 ee       	ldi	r30, 0xE4	; 228
    fec2:	f3 e0       	ldi	r31, 0x03	; 3
    fec4:	8d de       	rcall	.-742    	; 0xfbe0 <__fp_powser>
    fec6:	8b 01       	movw	r16, r22
    fec8:	be 01       	movw	r22, r28
    feca:	ec 01       	movw	r28, r24
    fecc:	fb 2e       	mov	r15, r27
    fece:	6f 57       	subi	r22, 0x7F	; 127
    fed0:	71 09       	sbc	r23, r1
    fed2:	75 95       	asr	r23
    fed4:	77 1f       	adc	r23, r23
    fed6:	88 0b       	sbc	r24, r24
    fed8:	99 0b       	sbc	r25, r25
    feda:	ff dd       	rcall	.-1026   	; 0xfada <__floatsisf>
    fedc:	28 e1       	ldi	r18, 0x18	; 24
    fede:	32 e7       	ldi	r19, 0x72	; 114
    fee0:	41 e3       	ldi	r20, 0x31	; 49
    fee2:	5f e3       	ldi	r21, 0x3F	; 63
    fee4:	49 d0       	rcall	.+146    	; 0xff78 <__mulsf3x>
    fee6:	af 2d       	mov	r26, r15
    fee8:	98 01       	movw	r18, r16
    feea:	ae 01       	movw	r20, r28
    feec:	ff 90       	pop	r15
    feee:	0f 91       	pop	r16
    fef0:	1f 91       	pop	r17
    fef2:	cf 91       	pop	r28
    fef4:	df 91       	pop	r29
    fef6:	69 dc       	rcall	.-1838   	; 0xf7ca <__addsf3x>
    fef8:	ce ce       	rjmp	.-612    	; 0xfc96 <__fp_round>

0000fefa <modf>:
    fefa:	fa 01       	movw	r30, r20
    fefc:	dc 01       	movw	r26, r24
    fefe:	aa 0f       	add	r26, r26
    ff00:	bb 1f       	adc	r27, r27
    ff02:	9b 01       	movw	r18, r22
    ff04:	ac 01       	movw	r20, r24
    ff06:	bf 57       	subi	r27, 0x7F	; 127
    ff08:	28 f4       	brcc	.+10     	; 0xff14 <modf+0x1a>
    ff0a:	22 27       	eor	r18, r18
    ff0c:	33 27       	eor	r19, r19
    ff0e:	44 27       	eor	r20, r20
    ff10:	50 78       	andi	r21, 0x80	; 128
    ff12:	1f c0       	rjmp	.+62     	; 0xff52 <modf+0x58>
    ff14:	b7 51       	subi	r27, 0x17	; 23
    ff16:	88 f4       	brcc	.+34     	; 0xff3a <modf+0x40>
    ff18:	ab 2f       	mov	r26, r27
    ff1a:	00 24       	eor	r0, r0
    ff1c:	46 95       	lsr	r20
    ff1e:	37 95       	ror	r19
    ff20:	27 95       	ror	r18
    ff22:	01 1c       	adc	r0, r1
    ff24:	a3 95       	inc	r26
    ff26:	d2 f3       	brmi	.-12     	; 0xff1c <modf+0x22>
    ff28:	00 20       	and	r0, r0
    ff2a:	69 f0       	breq	.+26     	; 0xff46 <modf+0x4c>
    ff2c:	22 0f       	add	r18, r18
    ff2e:	33 1f       	adc	r19, r19
    ff30:	44 1f       	adc	r20, r20
    ff32:	b3 95       	inc	r27
    ff34:	da f3       	brmi	.-10     	; 0xff2c <modf+0x32>
    ff36:	0d d0       	rcall	.+26     	; 0xff52 <modf+0x58>
    ff38:	36 cc       	rjmp	.-1940   	; 0xf7a6 <__subsf3>
    ff3a:	61 30       	cpi	r22, 0x01	; 1
    ff3c:	71 05       	cpc	r23, r1
    ff3e:	a0 e8       	ldi	r26, 0x80	; 128
    ff40:	8a 07       	cpc	r24, r26
    ff42:	b9 46       	sbci	r27, 0x69	; 105
    ff44:	30 f4       	brcc	.+12     	; 0xff52 <modf+0x58>
    ff46:	9b 01       	movw	r18, r22
    ff48:	ac 01       	movw	r20, r24
    ff4a:	66 27       	eor	r22, r22
    ff4c:	77 27       	eor	r23, r23
    ff4e:	88 27       	eor	r24, r24
    ff50:	90 78       	andi	r25, 0x80	; 128
    ff52:	30 96       	adiw	r30, 0x00	; 0
    ff54:	21 f0       	breq	.+8      	; 0xff5e <modf+0x64>
    ff56:	20 83       	st	Z, r18
    ff58:	31 83       	std	Z+1, r19	; 0x01
    ff5a:	42 83       	std	Z+2, r20	; 0x02
    ff5c:	53 83       	std	Z+3, r21	; 0x03
    ff5e:	08 95       	ret

0000ff60 <__mulsf3>:
    ff60:	0b d0       	rcall	.+22     	; 0xff78 <__mulsf3x>
    ff62:	99 ce       	rjmp	.-718    	; 0xfc96 <__fp_round>
    ff64:	62 de       	rcall	.-828    	; 0xfc2a <__fp_pscA>
    ff66:	28 f0       	brcs	.+10     	; 0xff72 <__mulsf3+0x12>
    ff68:	67 de       	rcall	.-818    	; 0xfc38 <__fp_pscB>
    ff6a:	18 f0       	brcs	.+6      	; 0xff72 <__mulsf3+0x12>
    ff6c:	95 23       	and	r25, r21
    ff6e:	09 f0       	breq	.+2      	; 0xff72 <__mulsf3+0x12>
    ff70:	2e ce       	rjmp	.-932    	; 0xfbce <__fp_inf>
    ff72:	33 ce       	rjmp	.-922    	; 0xfbda <__fp_nan>
    ff74:	11 24       	eor	r1, r1
    ff76:	d4 ce       	rjmp	.-600    	; 0xfd20 <__fp_szero>

0000ff78 <__mulsf3x>:
    ff78:	b0 de       	rcall	.-672    	; 0xfcda <__fp_split3>
    ff7a:	a0 f3       	brcs	.-24     	; 0xff64 <__mulsf3+0x4>

0000ff7c <__mulsf3_pse>:
    ff7c:	95 9f       	mul	r25, r21
    ff7e:	d1 f3       	breq	.-12     	; 0xff74 <__mulsf3+0x14>
    ff80:	95 0f       	add	r25, r21
    ff82:	50 e0       	ldi	r21, 0x00	; 0
    ff84:	55 1f       	adc	r21, r21
    ff86:	62 9f       	mul	r22, r18
    ff88:	f0 01       	movw	r30, r0
    ff8a:	72 9f       	mul	r23, r18
    ff8c:	bb 27       	eor	r27, r27
    ff8e:	f0 0d       	add	r31, r0
    ff90:	b1 1d       	adc	r27, r1
    ff92:	63 9f       	mul	r22, r19
    ff94:	aa 27       	eor	r26, r26
    ff96:	f0 0d       	add	r31, r0
    ff98:	b1 1d       	adc	r27, r1
    ff9a:	aa 1f       	adc	r26, r26
    ff9c:	64 9f       	mul	r22, r20
    ff9e:	66 27       	eor	r22, r22
    ffa0:	b0 0d       	add	r27, r0
    ffa2:	a1 1d       	adc	r26, r1
    ffa4:	66 1f       	adc	r22, r22
    ffa6:	82 9f       	mul	r24, r18
    ffa8:	22 27       	eor	r18, r18
    ffaa:	b0 0d       	add	r27, r0
    ffac:	a1 1d       	adc	r26, r1
    ffae:	62 1f       	adc	r22, r18
    ffb0:	73 9f       	mul	r23, r19
    ffb2:	b0 0d       	add	r27, r0
    ffb4:	a1 1d       	adc	r26, r1
    ffb6:	62 1f       	adc	r22, r18
    ffb8:	83 9f       	mul	r24, r19
    ffba:	a0 0d       	add	r26, r0
    ffbc:	61 1d       	adc	r22, r1
    ffbe:	22 1f       	adc	r18, r18
    ffc0:	74 9f       	mul	r23, r20
    ffc2:	33 27       	eor	r19, r19
    ffc4:	a0 0d       	add	r26, r0
    ffc6:	61 1d       	adc	r22, r1
    ffc8:	23 1f       	adc	r18, r19
    ffca:	84 9f       	mul	r24, r20
    ffcc:	60 0d       	add	r22, r0
    ffce:	21 1d       	adc	r18, r1
    ffd0:	82 2f       	mov	r24, r18
    ffd2:	76 2f       	mov	r23, r22
    ffd4:	6a 2f       	mov	r22, r26
    ffd6:	11 24       	eor	r1, r1
    ffd8:	9f 57       	subi	r25, 0x7F	; 127
    ffda:	50 40       	sbci	r21, 0x00	; 0
    ffdc:	8a f0       	brmi	.+34     	; 0x10000 <__mulsf3_pse+0x84>
    ffde:	e1 f0       	breq	.+56     	; 0x10018 <__mulsf3_pse+0x9c>
    ffe0:	88 23       	and	r24, r24
    ffe2:	4a f0       	brmi	.+18     	; 0xfff6 <__mulsf3_pse+0x7a>
    ffe4:	ee 0f       	add	r30, r30
    ffe6:	ff 1f       	adc	r31, r31
    ffe8:	bb 1f       	adc	r27, r27
    ffea:	66 1f       	adc	r22, r22
    ffec:	77 1f       	adc	r23, r23
    ffee:	88 1f       	adc	r24, r24
    fff0:	91 50       	subi	r25, 0x01	; 1
    fff2:	50 40       	sbci	r21, 0x00	; 0
    fff4:	a9 f7       	brne	.-22     	; 0xffe0 <__mulsf3_pse+0x64>
    fff6:	9e 3f       	cpi	r25, 0xFE	; 254
    fff8:	51 05       	cpc	r21, r1
    fffa:	70 f0       	brcs	.+28     	; 0x10018 <__mulsf3_pse+0x9c>
    fffc:	e8 cd       	rjmp	.-1072   	; 0xfbce <__fp_inf>
    fffe:	90 ce       	rjmp	.-736    	; 0xfd20 <__fp_szero>
   10000:	5f 3f       	cpi	r21, 0xFF	; 255
   10002:	ec f3       	brlt	.-6      	; 0xfffe <__mulsf3_pse+0x82>
   10004:	98 3e       	cpi	r25, 0xE8	; 232
   10006:	dc f3       	brlt	.-10     	; 0xfffe <__mulsf3_pse+0x82>
   10008:	86 95       	lsr	r24
   1000a:	77 95       	ror	r23
   1000c:	67 95       	ror	r22
   1000e:	b7 95       	ror	r27
   10010:	f7 95       	ror	r31
   10012:	e7 95       	ror	r30
   10014:	9f 5f       	subi	r25, 0xFF	; 255
   10016:	c1 f7       	brne	.-16     	; 0x10008 <__mulsf3_pse+0x8c>
   10018:	fe 2b       	or	r31, r30
   1001a:	88 0f       	add	r24, r24
   1001c:	91 1d       	adc	r25, r1
   1001e:	96 95       	lsr	r25
   10020:	87 95       	ror	r24
   10022:	97 f9       	bld	r25, 7
   10024:	08 95       	ret

00010026 <pow>:
   10026:	fa 01       	movw	r30, r20
   10028:	ee 0f       	add	r30, r30
   1002a:	ff 1f       	adc	r31, r31
   1002c:	30 96       	adiw	r30, 0x00	; 0
   1002e:	21 05       	cpc	r18, r1
   10030:	31 05       	cpc	r19, r1
   10032:	99 f1       	breq	.+102    	; 0x1009a <pow+0x74>
   10034:	61 15       	cp	r22, r1
   10036:	71 05       	cpc	r23, r1
   10038:	61 f4       	brne	.+24     	; 0x10052 <pow+0x2c>
   1003a:	80 38       	cpi	r24, 0x80	; 128
   1003c:	bf e3       	ldi	r27, 0x3F	; 63
   1003e:	9b 07       	cpc	r25, r27
   10040:	49 f1       	breq	.+82     	; 0x10094 <pow+0x6e>
   10042:	68 94       	set
   10044:	90 38       	cpi	r25, 0x80	; 128
   10046:	81 05       	cpc	r24, r1
   10048:	61 f0       	breq	.+24     	; 0x10062 <pow+0x3c>
   1004a:	80 38       	cpi	r24, 0x80	; 128
   1004c:	bf ef       	ldi	r27, 0xFF	; 255
   1004e:	9b 07       	cpc	r25, r27
   10050:	41 f0       	breq	.+16     	; 0x10062 <pow+0x3c>
   10052:	99 23       	and	r25, r25
   10054:	42 f5       	brpl	.+80     	; 0x100a6 <pow+0x80>
   10056:	ff 3f       	cpi	r31, 0xFF	; 255
   10058:	e1 05       	cpc	r30, r1
   1005a:	31 05       	cpc	r19, r1
   1005c:	21 05       	cpc	r18, r1
   1005e:	11 f1       	breq	.+68     	; 0x100a4 <pow+0x7e>
   10060:	e8 94       	clt
   10062:	08 94       	sec
   10064:	e7 95       	ror	r30
   10066:	d9 01       	movw	r26, r18
   10068:	aa 23       	and	r26, r26
   1006a:	29 f4       	brne	.+10     	; 0x10076 <pow+0x50>
   1006c:	ab 2f       	mov	r26, r27
   1006e:	be 2f       	mov	r27, r30
   10070:	f8 5f       	subi	r31, 0xF8	; 248
   10072:	d0 f3       	brcs	.-12     	; 0x10068 <pow+0x42>
   10074:	10 c0       	rjmp	.+32     	; 0x10096 <pow+0x70>
   10076:	ff 5f       	subi	r31, 0xFF	; 255
   10078:	70 f4       	brcc	.+28     	; 0x10096 <pow+0x70>
   1007a:	a6 95       	lsr	r26
   1007c:	e0 f7       	brcc	.-8      	; 0x10076 <pow+0x50>
   1007e:	f7 39       	cpi	r31, 0x97	; 151
   10080:	50 f0       	brcs	.+20     	; 0x10096 <pow+0x70>
   10082:	19 f0       	breq	.+6      	; 0x1008a <pow+0x64>
   10084:	ff 3a       	cpi	r31, 0xAF	; 175
   10086:	38 f4       	brcc	.+14     	; 0x10096 <pow+0x70>
   10088:	9f 77       	andi	r25, 0x7F	; 127
   1008a:	9f 93       	push	r25
   1008c:	0c d0       	rcall	.+24     	; 0x100a6 <pow+0x80>
   1008e:	0f 90       	pop	r0
   10090:	07 fc       	sbrc	r0, 7
   10092:	90 58       	subi	r25, 0x80	; 128
   10094:	08 95       	ret
   10096:	3e f0       	brts	.+14     	; 0x100a6 <pow+0x80>
   10098:	a0 cd       	rjmp	.-1216   	; 0xfbda <__fp_nan>
   1009a:	60 e0       	ldi	r22, 0x00	; 0
   1009c:	70 e0       	ldi	r23, 0x00	; 0
   1009e:	80 e8       	ldi	r24, 0x80	; 128
   100a0:	9f e3       	ldi	r25, 0x3F	; 63
   100a2:	08 95       	ret
   100a4:	4f e7       	ldi	r20, 0x7F	; 127
   100a6:	9f 77       	andi	r25, 0x7F	; 127
   100a8:	5f 93       	push	r21
   100aa:	4f 93       	push	r20
   100ac:	3f 93       	push	r19
   100ae:	2f 93       	push	r18
   100b0:	e4 de       	rcall	.-568    	; 0xfe7a <log>
   100b2:	2f 91       	pop	r18
   100b4:	3f 91       	pop	r19
   100b6:	4f 91       	pop	r20
   100b8:	5f 91       	pop	r21
   100ba:	52 df       	rcall	.-348    	; 0xff60 <__mulsf3>
   100bc:	af cc       	rjmp	.-1698   	; 0xfa1c <exp>

000100be <sin>:
   100be:	9f 93       	push	r25
   100c0:	c3 dd       	rcall	.-1146   	; 0xfc48 <__fp_rempio2>
   100c2:	0f 90       	pop	r0
   100c4:	07 fc       	sbrc	r0, 7
   100c6:	ee 5f       	subi	r30, 0xFE	; 254
   100c8:	f7 cd       	rjmp	.-1042   	; 0xfcb8 <__fp_sinus>
   100ca:	11 f4       	brne	.+4      	; 0x100d0 <sin+0x12>
   100cc:	0e f4       	brtc	.+2      	; 0x100d0 <sin+0x12>
   100ce:	85 cd       	rjmp	.-1270   	; 0xfbda <__fp_nan>
   100d0:	51 c0       	rjmp	.+162    	; 0x10174 <__fp_mpack>

000100d2 <sqrt>:
   100d2:	0b de       	rcall	.-1002   	; 0xfcea <__fp_splitA>
   100d4:	d0 f3       	brcs	.-12     	; 0x100ca <sin+0xc>
   100d6:	99 23       	and	r25, r25
   100d8:	d9 f3       	breq	.-10     	; 0x100d0 <sin+0x12>
   100da:	ce f3       	brts	.-14     	; 0x100ce <sin+0x10>
   100dc:	9f 57       	subi	r25, 0x7F	; 127
   100de:	55 0b       	sbc	r21, r21
   100e0:	87 ff       	sbrs	r24, 7
   100e2:	56 d0       	rcall	.+172    	; 0x10190 <__fp_norm2>
   100e4:	00 24       	eor	r0, r0
   100e6:	a0 e6       	ldi	r26, 0x60	; 96
   100e8:	40 ea       	ldi	r20, 0xA0	; 160
   100ea:	90 01       	movw	r18, r0
   100ec:	80 58       	subi	r24, 0x80	; 128
   100ee:	56 95       	lsr	r21
   100f0:	97 95       	ror	r25
   100f2:	28 f4       	brcc	.+10     	; 0x100fe <sqrt+0x2c>
   100f4:	80 5c       	subi	r24, 0xC0	; 192
   100f6:	66 0f       	add	r22, r22
   100f8:	77 1f       	adc	r23, r23
   100fa:	88 1f       	adc	r24, r24
   100fc:	20 f0       	brcs	.+8      	; 0x10106 <sqrt+0x34>
   100fe:	26 17       	cp	r18, r22
   10100:	37 07       	cpc	r19, r23
   10102:	48 07       	cpc	r20, r24
   10104:	30 f4       	brcc	.+12     	; 0x10112 <sqrt+0x40>
   10106:	62 1b       	sub	r22, r18
   10108:	73 0b       	sbc	r23, r19
   1010a:	84 0b       	sbc	r24, r20
   1010c:	20 29       	or	r18, r0
   1010e:	31 29       	or	r19, r1
   10110:	4a 2b       	or	r20, r26
   10112:	a6 95       	lsr	r26
   10114:	17 94       	ror	r1
   10116:	07 94       	ror	r0
   10118:	20 25       	eor	r18, r0
   1011a:	31 25       	eor	r19, r1
   1011c:	4a 27       	eor	r20, r26
   1011e:	58 f7       	brcc	.-42     	; 0x100f6 <sqrt+0x24>
   10120:	66 0f       	add	r22, r22
   10122:	77 1f       	adc	r23, r23
   10124:	88 1f       	adc	r24, r24
   10126:	20 f0       	brcs	.+8      	; 0x10130 <sqrt+0x5e>
   10128:	26 17       	cp	r18, r22
   1012a:	37 07       	cpc	r19, r23
   1012c:	48 07       	cpc	r20, r24
   1012e:	30 f4       	brcc	.+12     	; 0x1013c <sqrt+0x6a>
   10130:	62 0b       	sbc	r22, r18
   10132:	73 0b       	sbc	r23, r19
   10134:	84 0b       	sbc	r24, r20
   10136:	20 0d       	add	r18, r0
   10138:	31 1d       	adc	r19, r1
   1013a:	41 1d       	adc	r20, r1
   1013c:	a0 95       	com	r26
   1013e:	81 f7       	brne	.-32     	; 0x10120 <sqrt+0x4e>
   10140:	b9 01       	movw	r22, r18
   10142:	84 2f       	mov	r24, r20
   10144:	91 58       	subi	r25, 0x81	; 129
   10146:	88 0f       	add	r24, r24
   10148:	96 95       	lsr	r25
   1014a:	87 95       	ror	r24
   1014c:	08 95       	ret

0001014e <square>:
   1014e:	9b 01       	movw	r18, r22
   10150:	ac 01       	movw	r20, r24
   10152:	06 cf       	rjmp	.-500    	; 0xff60 <__mulsf3>

00010154 <strrev>:
   10154:	dc 01       	movw	r26, r24
   10156:	fc 01       	movw	r30, r24
   10158:	67 2f       	mov	r22, r23
   1015a:	71 91       	ld	r23, Z+
   1015c:	77 23       	and	r23, r23
   1015e:	e1 f7       	brne	.-8      	; 0x10158 <strrev+0x4>
   10160:	32 97       	sbiw	r30, 0x02	; 2
   10162:	04 c0       	rjmp	.+8      	; 0x1016c <strrev+0x18>
   10164:	7c 91       	ld	r23, X
   10166:	6d 93       	st	X+, r22
   10168:	70 83       	st	Z, r23
   1016a:	62 91       	ld	r22, -Z
   1016c:	ae 17       	cp	r26, r30
   1016e:	bf 07       	cpc	r27, r31
   10170:	c8 f3       	brcs	.-14     	; 0x10164 <strrev+0x10>
   10172:	08 95       	ret

00010174 <__fp_mpack>:
   10174:	9f 3f       	cpi	r25, 0xFF	; 255
   10176:	31 f0       	breq	.+12     	; 0x10184 <__fp_mpack_finite+0xc>

00010178 <__fp_mpack_finite>:
   10178:	91 50       	subi	r25, 0x01	; 1
   1017a:	20 f4       	brcc	.+8      	; 0x10184 <__fp_mpack_finite+0xc>
   1017c:	87 95       	ror	r24
   1017e:	77 95       	ror	r23
   10180:	67 95       	ror	r22
   10182:	b7 95       	ror	r27
   10184:	88 0f       	add	r24, r24
   10186:	91 1d       	adc	r25, r1
   10188:	96 95       	lsr	r25
   1018a:	87 95       	ror	r24
   1018c:	97 f9       	bld	r25, 7
   1018e:	08 95       	ret

00010190 <__fp_norm2>:
   10190:	91 50       	subi	r25, 0x01	; 1
   10192:	50 40       	sbci	r21, 0x00	; 0
   10194:	66 0f       	add	r22, r22
   10196:	77 1f       	adc	r23, r23
   10198:	88 1f       	adc	r24, r24
   1019a:	d2 f7       	brpl	.-12     	; 0x10190 <__fp_norm2>
   1019c:	08 95       	ret

0001019e <__fp_powsodd>:
   1019e:	9f 93       	push	r25
   101a0:	8f 93       	push	r24
   101a2:	7f 93       	push	r23
   101a4:	6f 93       	push	r22
   101a6:	ff 93       	push	r31
   101a8:	ef 93       	push	r30
   101aa:	9b 01       	movw	r18, r22
   101ac:	ac 01       	movw	r20, r24
   101ae:	d8 de       	rcall	.-592    	; 0xff60 <__mulsf3>
   101b0:	ef 91       	pop	r30
   101b2:	ff 91       	pop	r31
   101b4:	15 dd       	rcall	.-1494   	; 0xfbe0 <__fp_powser>
   101b6:	2f 91       	pop	r18
   101b8:	3f 91       	pop	r19
   101ba:	4f 91       	pop	r20
   101bc:	5f 91       	pop	r21
   101be:	d0 ce       	rjmp	.-608    	; 0xff60 <__mulsf3>

000101c0 <__mulsi3>:
   101c0:	62 9f       	mul	r22, r18
   101c2:	d0 01       	movw	r26, r0
   101c4:	73 9f       	mul	r23, r19
   101c6:	f0 01       	movw	r30, r0
   101c8:	82 9f       	mul	r24, r18
   101ca:	e0 0d       	add	r30, r0
   101cc:	f1 1d       	adc	r31, r1
   101ce:	64 9f       	mul	r22, r20
   101d0:	e0 0d       	add	r30, r0
   101d2:	f1 1d       	adc	r31, r1
   101d4:	92 9f       	mul	r25, r18
   101d6:	f0 0d       	add	r31, r0
   101d8:	83 9f       	mul	r24, r19
   101da:	f0 0d       	add	r31, r0
   101dc:	74 9f       	mul	r23, r20
   101de:	f0 0d       	add	r31, r0
   101e0:	65 9f       	mul	r22, r21
   101e2:	f0 0d       	add	r31, r0
   101e4:	99 27       	eor	r25, r25
   101e6:	72 9f       	mul	r23, r18
   101e8:	b0 0d       	add	r27, r0
   101ea:	e1 1d       	adc	r30, r1
   101ec:	f9 1f       	adc	r31, r25
   101ee:	63 9f       	mul	r22, r19
   101f0:	b0 0d       	add	r27, r0
   101f2:	e1 1d       	adc	r30, r1
   101f4:	f9 1f       	adc	r31, r25
   101f6:	bd 01       	movw	r22, r26
   101f8:	cf 01       	movw	r24, r30
   101fa:	11 24       	eor	r1, r1
   101fc:	08 95       	ret

000101fe <__udivmodqi4>:
   101fe:	99 1b       	sub	r25, r25
   10200:	79 e0       	ldi	r23, 0x09	; 9
   10202:	04 c0       	rjmp	.+8      	; 0x1020c <__udivmodqi4_ep>

00010204 <__udivmodqi4_loop>:
   10204:	99 1f       	adc	r25, r25
   10206:	96 17       	cp	r25, r22
   10208:	08 f0       	brcs	.+2      	; 0x1020c <__udivmodqi4_ep>
   1020a:	96 1b       	sub	r25, r22

0001020c <__udivmodqi4_ep>:
   1020c:	88 1f       	adc	r24, r24
   1020e:	7a 95       	dec	r23
   10210:	c9 f7       	brne	.-14     	; 0x10204 <__udivmodqi4_loop>
   10212:	80 95       	com	r24
   10214:	08 95       	ret

00010216 <__udivmodhi4>:
   10216:	aa 1b       	sub	r26, r26
   10218:	bb 1b       	sub	r27, r27
   1021a:	51 e1       	ldi	r21, 0x11	; 17
   1021c:	07 c0       	rjmp	.+14     	; 0x1022c <__udivmodhi4_ep>

0001021e <__udivmodhi4_loop>:
   1021e:	aa 1f       	adc	r26, r26
   10220:	bb 1f       	adc	r27, r27
   10222:	a6 17       	cp	r26, r22
   10224:	b7 07       	cpc	r27, r23
   10226:	10 f0       	brcs	.+4      	; 0x1022c <__udivmodhi4_ep>
   10228:	a6 1b       	sub	r26, r22
   1022a:	b7 0b       	sbc	r27, r23

0001022c <__udivmodhi4_ep>:
   1022c:	88 1f       	adc	r24, r24
   1022e:	99 1f       	adc	r25, r25
   10230:	5a 95       	dec	r21
   10232:	a9 f7       	brne	.-22     	; 0x1021e <__udivmodhi4_loop>
   10234:	80 95       	com	r24
   10236:	90 95       	com	r25
   10238:	bc 01       	movw	r22, r24
   1023a:	cd 01       	movw	r24, r26
   1023c:	08 95       	ret

0001023e <__divmodhi4>:
   1023e:	97 fb       	bst	r25, 7
   10240:	09 2e       	mov	r0, r25
   10242:	07 26       	eor	r0, r23
   10244:	0a d0       	rcall	.+20     	; 0x1025a <__divmodhi4_neg1>
   10246:	77 fd       	sbrc	r23, 7
   10248:	04 d0       	rcall	.+8      	; 0x10252 <__divmodhi4_neg2>
   1024a:	e5 df       	rcall	.-54     	; 0x10216 <__udivmodhi4>
   1024c:	06 d0       	rcall	.+12     	; 0x1025a <__divmodhi4_neg1>
   1024e:	00 20       	and	r0, r0
   10250:	1a f4       	brpl	.+6      	; 0x10258 <__divmodhi4_exit>

00010252 <__divmodhi4_neg2>:
   10252:	70 95       	com	r23
   10254:	61 95       	neg	r22
   10256:	7f 4f       	sbci	r23, 0xFF	; 255

00010258 <__divmodhi4_exit>:
   10258:	08 95       	ret

0001025a <__divmodhi4_neg1>:
   1025a:	f6 f7       	brtc	.-4      	; 0x10258 <__divmodhi4_exit>
   1025c:	90 95       	com	r25
   1025e:	81 95       	neg	r24
   10260:	9f 4f       	sbci	r25, 0xFF	; 255
   10262:	08 95       	ret

00010264 <__udivmodsi4>:
   10264:	a1 e2       	ldi	r26, 0x21	; 33
   10266:	1a 2e       	mov	r1, r26
   10268:	aa 1b       	sub	r26, r26
   1026a:	bb 1b       	sub	r27, r27
   1026c:	fd 01       	movw	r30, r26
   1026e:	0d c0       	rjmp	.+26     	; 0x1028a <__udivmodsi4_ep>

00010270 <__udivmodsi4_loop>:
   10270:	aa 1f       	adc	r26, r26
   10272:	bb 1f       	adc	r27, r27
   10274:	ee 1f       	adc	r30, r30
   10276:	ff 1f       	adc	r31, r31
   10278:	a2 17       	cp	r26, r18
   1027a:	b3 07       	cpc	r27, r19
   1027c:	e4 07       	cpc	r30, r20
   1027e:	f5 07       	cpc	r31, r21
   10280:	20 f0       	brcs	.+8      	; 0x1028a <__udivmodsi4_ep>
   10282:	a2 1b       	sub	r26, r18
   10284:	b3 0b       	sbc	r27, r19
   10286:	e4 0b       	sbc	r30, r20
   10288:	f5 0b       	sbc	r31, r21

0001028a <__udivmodsi4_ep>:
   1028a:	66 1f       	adc	r22, r22
   1028c:	77 1f       	adc	r23, r23
   1028e:	88 1f       	adc	r24, r24
   10290:	99 1f       	adc	r25, r25
   10292:	1a 94       	dec	r1
   10294:	69 f7       	brne	.-38     	; 0x10270 <__udivmodsi4_loop>
   10296:	60 95       	com	r22
   10298:	70 95       	com	r23
   1029a:	80 95       	com	r24
   1029c:	90 95       	com	r25
   1029e:	9b 01       	movw	r18, r22
   102a0:	ac 01       	movw	r20, r24
   102a2:	bd 01       	movw	r22, r26
   102a4:	cf 01       	movw	r24, r30
   102a6:	08 95       	ret

000102a8 <__divmodsi4>:
   102a8:	97 fb       	bst	r25, 7
   102aa:	09 2e       	mov	r0, r25
   102ac:	05 26       	eor	r0, r21
   102ae:	0e d0       	rcall	.+28     	; 0x102cc <__divmodsi4_neg1>
   102b0:	57 fd       	sbrc	r21, 7
   102b2:	04 d0       	rcall	.+8      	; 0x102bc <__divmodsi4_neg2>
   102b4:	d7 df       	rcall	.-82     	; 0x10264 <__udivmodsi4>
   102b6:	0a d0       	rcall	.+20     	; 0x102cc <__divmodsi4_neg1>
   102b8:	00 1c       	adc	r0, r0
   102ba:	38 f4       	brcc	.+14     	; 0x102ca <__divmodsi4_exit>

000102bc <__divmodsi4_neg2>:
   102bc:	50 95       	com	r21
   102be:	40 95       	com	r20
   102c0:	30 95       	com	r19
   102c2:	21 95       	neg	r18
   102c4:	3f 4f       	sbci	r19, 0xFF	; 255
   102c6:	4f 4f       	sbci	r20, 0xFF	; 255
   102c8:	5f 4f       	sbci	r21, 0xFF	; 255

000102ca <__divmodsi4_exit>:
   102ca:	08 95       	ret

000102cc <__divmodsi4_neg1>:
   102cc:	f6 f7       	brtc	.-4      	; 0x102ca <__divmodsi4_exit>
   102ce:	90 95       	com	r25
   102d0:	80 95       	com	r24
   102d2:	70 95       	com	r23
   102d4:	61 95       	neg	r22
   102d6:	7f 4f       	sbci	r23, 0xFF	; 255
   102d8:	8f 4f       	sbci	r24, 0xFF	; 255
   102da:	9f 4f       	sbci	r25, 0xFF	; 255
   102dc:	08 95       	ret

000102de <__tablejump2__>:
   102de:	ee 0f       	add	r30, r30
   102e0:	ff 1f       	adc	r31, r31

000102e2 <__tablejump__>:
   102e2:	05 90       	lpm	r0, Z+
   102e4:	f4 91       	lpm	r31, Z+
   102e6:	e0 2d       	mov	r30, r0
   102e8:	09 94       	ijmp

000102ea <__do_global_dtors>:
   102ea:	15 e0       	ldi	r17, 0x05	; 5
   102ec:	c4 e4       	ldi	r28, 0x44	; 68
   102ee:	d5 e0       	ldi	r29, 0x05	; 5
   102f0:	04 c0       	rjmp	.+8      	; 0x102fa <.do_global_dtors_start>

000102f2 <.do_global_dtors_loop>:
   102f2:	fe 01       	movw	r30, r28
   102f4:	0e 94 71 81 	call	0x102e2	; 0x102e2 <__tablejump__>
   102f8:	22 96       	adiw	r28, 0x02	; 2

000102fa <.do_global_dtors_start>:
   102fa:	c6 34       	cpi	r28, 0x46	; 70
   102fc:	d1 07       	cpc	r29, r17
   102fe:	c9 f7       	brne	.-14     	; 0x102f2 <.do_global_dtors_loop>
   10300:	f8 94       	cli

00010302 <__stop_program>:
   10302:	ff cf       	rjmp	.-2      	; 0x10302 <__stop_program>
