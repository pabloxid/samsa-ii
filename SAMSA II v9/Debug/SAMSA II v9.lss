
SAMSA II v9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003be  00800200  00010434  000104c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00010434  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f15  008005be  008005be  00010886  2**0
                  ALLOC
  3 .debug_aranges 00000ee0  00000000  00000000  00010886  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00002389  00000000  00000000  00011766  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000162fb  00000000  00000000  00013aef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003e46  00000000  00000000  00029dea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00008780  00000000  00000000  0002dc30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001aa0  00000000  00000000  000363b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000039ea  00000000  00000000  00037e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000088da  00000000  00000000  0003b83a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000f50  00000000  00000000  00044114  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    //bitSet(TIMSK0, TOIE0);        // rehabilita la interrupción del timer0 (nota: esto es sólo para entornos Arduino)
#endif    
}

/** Sends a character out the serial port */
byte AX12::writeByte (byte data) {
       0:	0c 94 a3 02 	jmp	0x546	; 0x546 <__dtors_end>
  if (size > 0) {
    return buffer [head].timestamp;
  } else {
    return -1;                                           // este -1 en realidad lo que retorna es el valor más alto posible, impidiendo que la isr llame a la get_data()
  }
}
       4:	0c 94 33 76 	jmp	0xec66	; 0xec66 <__vector_1>

///////////////////////////////////////// OSCILADORES /////////////////////////////////////////

void Movimiento::set_oscilador (byte parametro, float amplitud, float frecuencia, float fase, bool brown) {
	bd.oscilator [parametro] = (OSCILATOR) {amplitud, frecuencia, fase, brown};
}
       8:	0c 94 64 76 	jmp	0xecc8	; 0xecc8 <__vector_2>
void Movimiento::stop () {
	sh.cn.enable = false;
}

// prosigue el movimiento
void Movimiento::cont () {
       c:	0c 94 95 76 	jmp	0xed2a	; 0xed2a <__vector_3>

void pos_ang (byte pata, ANGULOS A, int duracion) {                       // mueve 1 pata
  servo (pata, 0, A.gama, duracion);                           
  servo (pata, 1, A.alfa, duracion);                          
  servo (pata, 2, A.beta, duracion);    
}
      10:	0c 94 c6 76 	jmp	0xed8c	; 0xed8c <__vector_4>

COORD2D xyz2xz (COORD3D vector) {
  return (COORD2D) {vector.x, vector.z}; 
}

float sumaproducto (COORD3D vector1, COORD3D vector2) {
      14:	0c 94 f7 76 	jmp	0xedee	; 0xedee <__vector_5>
	}
	if (status == MODE_FAST) {blue_serial.send_msg (pata, 3, data);}   // esta comprobación evita que el buffer del modem se sature, 
																																				// en caso de que no esté conectado
}

void Bluetooth::send_msg (byte instruccion, byte largo, byte* data) {
      18:	0c 94 28 77 	jmp	0xee50	; 0xee50 <__vector_6>
}
*/

int Cabeza::twobyte2int (byte* data) {          // transforma 2 bytes de 7 bits en un int
  return 128*data[0] + data[1];
} 
      1c:	0c 94 59 77 	jmp	0xeeb2	; 0xeeb2 <__vector_7>
Display pantalla;                  // preinstanciado

Display::Display () {               // constructor
  text = NULL;
  mode = DISPLAY_OFF;
}
      20:	0c 94 8a 77 	jmp	0xef14	; 0xef14 <__vector_8>
			
		////////////////////////////*/	
		
	}

}
      24:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
#include "wiring.h"
#include <string.h>

#define TIMEOUT 3000

Serialcomm::Serialcomm () { }   // construtor por defeto
      28:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
byte Conducta::estado;

Conducta::Conducta (byte in_prioridad) {
	prioridad = in_prioridad;
	enabled = false;                      // todas las conductas arrancan apagadas, y sus respectivos recursos también
}
      2c:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
// acá hay mucho que arreglar:
// habilitar movimiento continuo
// habilitar curvas
// probablemente hay que sofisticar el sistema de acciones en lo que tiene que ver con caminata

bool Correa::evaluar () {
      30:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
  
	// esto quedó sin implementar
	// porque es realmente un huevo
	// pero la idea es muy buena, una red con n cantidad de layers
	
      34:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {             // esta rutina sólo se usaría para diagnóstico
      38:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
  }
  float diff = howbig - howsmall;
  return random(diff) + howsmall;
}

float map(float value, float istart, float istop, float ostart, float ostop) {
      3c:	0c 94 9d 70 	jmp	0xe13a	; 0xe13a <__vector_15>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
      40:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
{
  while (size--)
    write(*buffer++);
}

void Print::print(const String &s)
      44:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
    #endif
      break;
#endif
    }
      
    intFunc[interruptNum] = 0;
      48:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
		SREG = oldSREG;
	}
}

int digitalRead(uint8_t pin)
{
      4c:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>

char String::operator[]( unsigned int index ) const
{
  // need to check for valid index, to do later
  return _buffer[ index ];
}
      50:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      54:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      58:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      5c:	0c 94 d3 70 	jmp	0xe1a6	; 0xe1a6 <__vector_23>
      60:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      64:	0c 94 6d 74 	jmp	0xe8da	; 0xe8da <__vector_25>
      68:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      6c:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      70:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      74:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      78:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      7c:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      80:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      84:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      88:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      8c:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      90:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__vector_36>
      94:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      98:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      9c:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      a0:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      a4:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      a8:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      ac:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      b0:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      b4:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      b8:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      bc:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      c0:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      c4:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      c8:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      cc:	0c 94 a2 74 	jmp	0xe944	; 0xe944 <__vector_51>
      d0:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      d4:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      d8:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      dc:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      e0:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__bad_interrupt>
      e4:	0c 04       	cpc	r0, r12
      e6:	0a 04       	cpc	r0, r10
      e8:	08 04       	cpc	r0, r8
      ea:	08 04       	cpc	r0, r8
      ec:	08 04       	cpc	r0, r8
      ee:	08 04       	cpc	r0, r8
      f0:	0c 04       	cpc	r0, r12
      f2:	0a 04       	cpc	r0, r10
      f4:	0c 04       	cpc	r0, r12
      f6:	0a 04       	cpc	r0, r10
      f8:	0a 04       	cpc	r0, r10
      fa:	08 04       	cpc	r0, r8
      fc:	08 04       	cpc	r0, r8
      fe:	08 04       	cpc	r0, r8
     100:	0c 04       	cpc	r0, r12
     102:	0a 04       	cpc	r0, r10
     104:	08 04       	cpc	r0, r8
     106:	08 04       	cpc	r0, r8
     108:	08 04       	cpc	r0, r8
     10a:	08 04       	cpc	r0, r8
     10c:	0c 04       	cpc	r0, r12
     10e:	0a 04       	cpc	r0, r10
     110:	0c 04       	cpc	r0, r12
     112:	0a 04       	cpc	r0, r10
     114:	08 04       	cpc	r0, r8
     116:	08 04       	cpc	r0, r8
     118:	08 04       	cpc	r0, r8
     11a:	08 04       	cpc	r0, r8
     11c:	08 04       	cpc	r0, r8
     11e:	08 04       	cpc	r0, r8
     120:	0c 04       	cpc	r0, r12
     122:	0a 04       	cpc	r0, r10
     124:	0c 04       	cpc	r0, r12
     126:	0a 04       	cpc	r0, r10
     128:	0c 04       	cpc	r0, r12
     12a:	0a 04       	cpc	r0, r10
     12c:	0c 04       	cpc	r0, r12
     12e:	0a 04       	cpc	r0, r10
     130:	0c 04       	cpc	r0, r12
     132:	0a 04       	cpc	r0, r10
     134:	0c 04       	cpc	r0, r12
     136:	0a 04       	cpc	r0, r10
     138:	08 04       	cpc	r0, r8
     13a:	08 04       	cpc	r0, r8
     13c:	08 04       	cpc	r0, r8
     13e:	0a 04       	cpc	r0, r10
     140:	08 04       	cpc	r0, r8
     142:	08 04       	cpc	r0, r8
     144:	0c 04       	cpc	r0, r12
     146:	1c 04       	cpc	r1, r12
     148:	1c 04       	cpc	r1, r12
     14a:	1c 04       	cpc	r1, r12
     14c:	20 04       	cpc	r2, r0
     14e:	1e 04       	cpc	r1, r14
     150:	20 04       	cpc	r2, r0
     152:	1e 04       	cpc	r1, r14
     154:	1e 04       	cpc	r1, r14
     156:	1c 04       	cpc	r1, r12
     158:	1c 04       	cpc	r1, r12
     15a:	1c 04       	cpc	r1, r12
     15c:	20 04       	cpc	r2, r0
     15e:	1e 04       	cpc	r1, r14
     160:	1c 04       	cpc	r1, r12
     162:	1c 04       	cpc	r1, r12
     164:	1c 04       	cpc	r1, r12
     166:	1c 04       	cpc	r1, r12
     168:	1e 04       	cpc	r1, r14
     16a:	1e 04       	cpc	r1, r14
     16c:	1e 04       	cpc	r1, r14
     16e:	1e 04       	cpc	r1, r14
     170:	1c 04       	cpc	r1, r12
     172:	1c 04       	cpc	r1, r12
     174:	1c 04       	cpc	r1, r12
     176:	1c 04       	cpc	r1, r12
     178:	1c 04       	cpc	r1, r12
     17a:	1c 04       	cpc	r1, r12
     17c:	20 04       	cpc	r2, r0
     17e:	1e 04       	cpc	r1, r14
     180:	20 04       	cpc	r2, r0
     182:	1e 04       	cpc	r1, r14
     184:	20 04       	cpc	r2, r0
     186:	1e 04       	cpc	r1, r14
     188:	1e 04       	cpc	r1, r14
     18a:	1e 04       	cpc	r1, r14
     18c:	1e 04       	cpc	r1, r14
     18e:	1e 04       	cpc	r1, r14
     190:	1e 04       	cpc	r1, r14
     192:	1e 04       	cpc	r1, r14
     194:	1e 04       	cpc	r1, r14
     196:	1e 04       	cpc	r1, r14
     198:	1c 04       	cpc	r1, r12
     19a:	1e 04       	cpc	r1, r14
     19c:	1e 04       	cpc	r1, r14
     19e:	1c 04       	cpc	r1, r12
     1a0:	20 04       	cpc	r2, r0
     1a2:	5d 4e       	sbci	r21, 0xED	; 237
     1a4:	5b 4e       	sbci	r21, 0xEB	; 235
     1a6:	65 4e       	sbci	r22, 0xE5	; 229
     1a8:	65 4e       	sbci	r22, 0xE5	; 229
     1aa:	65 4e       	sbci	r22, 0xE5	; 229
     1ac:	61 4e       	sbci	r22, 0xE1	; 225
     1ae:	5b 4e       	sbci	r21, 0xEB	; 235
     1b0:	65 4e       	sbci	r22, 0xE5	; 229
     1b2:	5f 4e       	sbci	r21, 0xEF	; 239
     1b4:	5f 4e       	sbci	r21, 0xEF	; 239
     1b6:	63 4e       	sbci	r22, 0xE3	; 227
     1b8:	65 4e       	sbci	r22, 0xE5	; 229
     1ba:	5f 4e       	sbci	r21, 0xEF	; 239
     1bc:	5b 4e       	sbci	r21, 0xEB	; 235
     1be:	5f 4e       	sbci	r21, 0xEF	; 239
     1c0:	59 4e       	sbci	r21, 0xE9	; 233
     1c2:	5b 4e       	sbci	r21, 0xEB	; 235
     1c4:	5f 4e       	sbci	r21, 0xEF	; 239
     1c6:	5b 4e       	sbci	r21, 0xEB	; 235
     1c8:	5b 4e       	sbci	r21, 0xEB	; 235
     1ca:	5b 4e       	sbci	r21, 0xEB	; 235
     1cc:	5b 4e       	sbci	r21, 0xEB	; 235
     1ce:	5b 4e       	sbci	r21, 0xEB	; 235
     1d0:	5b 4e       	sbci	r21, 0xEB	; 235
     1d2:	5b 4e       	sbci	r21, 0xEB	; 235
     1d4:	5b 4e       	sbci	r21, 0xEB	; 235
     1d6:	5f 4e       	sbci	r21, 0xEF	; 239
     1d8:	5f 4e       	sbci	r21, 0xEF	; 239
     1da:	63 4e       	sbci	r22, 0xE3	; 227
     1dc:	5b 4e       	sbci	r21, 0xEB	; 235
     1de:	63 4e       	sbci	r22, 0xE3	; 227
     1e0:	5b 4e       	sbci	r21, 0xEB	; 235
     1e2:	63 4e       	sbci	r22, 0xE3	; 227
     1e4:	65 4e       	sbci	r22, 0xE5	; 229
     1e6:	65 4e       	sbci	r22, 0xE5	; 229
     1e8:	65 4e       	sbci	r22, 0xE5	; 229
     1ea:	65 4e       	sbci	r22, 0xE5	; 229
     1ec:	5b 4e       	sbci	r21, 0xEB	; 235
     1ee:	5b 4e       	sbci	r21, 0xEB	; 235
     1f0:	65 4e       	sbci	r22, 0xE5	; 229
     1f2:	5b 4e       	sbci	r21, 0xEB	; 235
     1f4:	5d 4e       	sbci	r21, 0xED	; 237
     1f6:	5b 4e       	sbci	r21, 0xEB	; 235
     1f8:	5b 4e       	sbci	r21, 0xEB	; 235
     1fa:	5b 4e       	sbci	r21, 0xEB	; 235
     1fc:	65 4e       	sbci	r22, 0xE5	; 229
     1fe:	65 4e       	sbci	r22, 0xE5	; 229
     200:	65 4e       	sbci	r22, 0xE5	; 229
     202:	5b 4e       	sbci	r21, 0xEB	; 235
     204:	65 4e       	sbci	r22, 0xE5	; 229
     206:	65 4e       	sbci	r22, 0xE5	; 229
     208:	65 4e       	sbci	r22, 0xE5	; 229
     20a:	65 4e       	sbci	r22, 0xE5	; 229
     20c:	65 4e       	sbci	r22, 0xE5	; 229
     20e:	65 4e       	sbci	r22, 0xE5	; 229
     210:	63 4e       	sbci	r22, 0xE3	; 227
     212:	65 4e       	sbci	r22, 0xE5	; 229
     214:	65 4e       	sbci	r22, 0xE5	; 229
     216:	5b 4e       	sbci	r21, 0xEB	; 235
     218:	63 4e       	sbci	r22, 0xE3	; 227
     21a:	65 4e       	sbci	r22, 0xE5	; 229
     21c:	63 4e       	sbci	r22, 0xE3	; 227
     21e:	63 4e       	sbci	r22, 0xE3	; 227
     220:	63 4e       	sbci	r22, 0xE3	; 227
     222:	65 4e       	sbci	r22, 0xE5	; 229
     224:	5b 4e       	sbci	r21, 0xEB	; 235
     226:	5b 4e       	sbci	r21, 0xEB	; 235
     228:	5b 4e       	sbci	r21, 0xEB	; 235
     22a:	5b 4e       	sbci	r21, 0xEB	; 235
     22c:	5b 4e       	sbci	r21, 0xEB	; 235
     22e:	59 4e       	sbci	r21, 0xE9	; 233
     230:	5b 4e       	sbci	r21, 0xEB	; 235
     232:	5b 4e       	sbci	r21, 0xEB	; 235
     234:	5d 4e       	sbci	r21, 0xED	; 237
     236:	5f 4e       	sbci	r21, 0xEF	; 239
     238:	5b 4e       	sbci	r21, 0xEB	; 235
     23a:	5d 4e       	sbci	r21, 0xED	; 237
     23c:	65 4e       	sbci	r22, 0xE5	; 229
     23e:	5b 4e       	sbci	r21, 0xEB	; 235
     240:	5b 4e       	sbci	r21, 0xEB	; 235
     242:	5b 4e       	sbci	r21, 0xEB	; 235
     244:	5b 4e       	sbci	r21, 0xEB	; 235
     246:	59 4e       	sbci	r21, 0xE9	; 233
     248:	5b 4e       	sbci	r21, 0xEB	; 235
     24a:	59 4e       	sbci	r21, 0xE9	; 233
     24c:	5b 4e       	sbci	r21, 0xEB	; 235
     24e:	65 4e       	sbci	r22, 0xE5	; 229
     250:	65 4e       	sbci	r22, 0xE5	; 229
     252:	65 4e       	sbci	r22, 0xE5	; 229
     254:	5b 4e       	sbci	r21, 0xEB	; 235
     256:	5b 4e       	sbci	r21, 0xEB	; 235
     258:	5b 4e       	sbci	r21, 0xEB	; 235
     25a:	63 4e       	sbci	r22, 0xE3	; 227
     25c:	5b 4e       	sbci	r21, 0xEB	; 235
     25e:	63 4e       	sbci	r22, 0xE3	; 227
     260:	79 4e       	sbci	r23, 0xE9	; 233
     262:	7b 4e       	sbci	r23, 0xEB	; 235
     264:	7b 4e       	sbci	r23, 0xEB	; 235
     266:	7d 4e       	sbci	r23, 0xED	; 237
     268:	7d 4e       	sbci	r23, 0xED	; 237
     26a:	7d 4e       	sbci	r23, 0xED	; 237
     26c:	7b 4e       	sbci	r23, 0xEB	; 235
     26e:	7d 4e       	sbci	r23, 0xED	; 237
     270:	79 4e       	sbci	r23, 0xE9	; 233
     272:	79 4e       	sbci	r23, 0xE9	; 233
     274:	7d 4e       	sbci	r23, 0xED	; 237
     276:	7d 4e       	sbci	r23, 0xED	; 237
     278:	79 4e       	sbci	r23, 0xE9	; 233
     27a:	7b 4e       	sbci	r23, 0xEB	; 235
     27c:	79 4e       	sbci	r23, 0xE9	; 233
     27e:	7b 4e       	sbci	r23, 0xEB	; 235
     280:	7b 4e       	sbci	r23, 0xEB	; 235
     282:	79 4e       	sbci	r23, 0xE9	; 233
     284:	7b 4e       	sbci	r23, 0xEB	; 235
     286:	7b 4e       	sbci	r23, 0xEB	; 235
     288:	7b 4e       	sbci	r23, 0xEB	; 235
     28a:	7b 4e       	sbci	r23, 0xEB	; 235
     28c:	7b 4e       	sbci	r23, 0xEB	; 235
     28e:	7b 4e       	sbci	r23, 0xEB	; 235
     290:	7b 4e       	sbci	r23, 0xEB	; 235
     292:	7b 4e       	sbci	r23, 0xEB	; 235
     294:	79 4e       	sbci	r23, 0xE9	; 233
     296:	79 4e       	sbci	r23, 0xE9	; 233
     298:	7d 4e       	sbci	r23, 0xED	; 237
     29a:	7b 4e       	sbci	r23, 0xEB	; 235
     29c:	7d 4e       	sbci	r23, 0xED	; 237
     29e:	7b 4e       	sbci	r23, 0xEB	; 235
     2a0:	7d 4e       	sbci	r23, 0xED	; 237
     2a2:	7d 4e       	sbci	r23, 0xED	; 237
     2a4:	7d 4e       	sbci	r23, 0xED	; 237
     2a6:	7d 4e       	sbci	r23, 0xED	; 237
     2a8:	7d 4e       	sbci	r23, 0xED	; 237
     2aa:	7b 4e       	sbci	r23, 0xEB	; 235
     2ac:	7b 4e       	sbci	r23, 0xEB	; 235
     2ae:	7d 4e       	sbci	r23, 0xED	; 237
     2b0:	7b 4e       	sbci	r23, 0xEB	; 235
     2b2:	79 4e       	sbci	r23, 0xE9	; 233
     2b4:	7b 4e       	sbci	r23, 0xEB	; 235
     2b6:	7b 4e       	sbci	r23, 0xEB	; 235
     2b8:	7b 4e       	sbci	r23, 0xEB	; 235
     2ba:	7d 4e       	sbci	r23, 0xED	; 237
     2bc:	7d 4e       	sbci	r23, 0xED	; 237
     2be:	7d 4e       	sbci	r23, 0xED	; 237
     2c0:	7b 4e       	sbci	r23, 0xEB	; 235
     2c2:	7d 4e       	sbci	r23, 0xED	; 237
     2c4:	7d 4e       	sbci	r23, 0xED	; 237
     2c6:	7d 4e       	sbci	r23, 0xED	; 237
     2c8:	7d 4e       	sbci	r23, 0xED	; 237
     2ca:	7d 4e       	sbci	r23, 0xED	; 237
     2cc:	7d 4e       	sbci	r23, 0xED	; 237
     2ce:	7d 4e       	sbci	r23, 0xED	; 237
     2d0:	7d 4e       	sbci	r23, 0xED	; 237
     2d2:	7d 4e       	sbci	r23, 0xED	; 237
     2d4:	7b 4e       	sbci	r23, 0xEB	; 235
     2d6:	7d 4e       	sbci	r23, 0xED	; 237
     2d8:	7d 4e       	sbci	r23, 0xED	; 237
     2da:	7d 4e       	sbci	r23, 0xED	; 237
     2dc:	7d 4e       	sbci	r23, 0xED	; 237
     2de:	7d 4e       	sbci	r23, 0xED	; 237
     2e0:	7d 4e       	sbci	r23, 0xED	; 237
     2e2:	7b 4e       	sbci	r23, 0xEB	; 235
     2e4:	7b 4e       	sbci	r23, 0xEB	; 235
     2e6:	7b 4e       	sbci	r23, 0xEB	; 235
     2e8:	7b 4e       	sbci	r23, 0xEB	; 235
     2ea:	7b 4e       	sbci	r23, 0xEB	; 235
     2ec:	7b 4e       	sbci	r23, 0xEB	; 235
     2ee:	7b 4e       	sbci	r23, 0xEB	; 235
     2f0:	7b 4e       	sbci	r23, 0xEB	; 235
     2f2:	79 4e       	sbci	r23, 0xE9	; 233
     2f4:	79 4e       	sbci	r23, 0xE9	; 233
     2f6:	7b 4e       	sbci	r23, 0xEB	; 235
     2f8:	79 4e       	sbci	r23, 0xE9	; 233
     2fa:	7d 4e       	sbci	r23, 0xED	; 237
     2fc:	7b 4e       	sbci	r23, 0xEB	; 235
     2fe:	7b 4e       	sbci	r23, 0xEB	; 235
     300:	7b 4e       	sbci	r23, 0xEB	; 235
     302:	7b 4e       	sbci	r23, 0xEB	; 235
     304:	7b 4e       	sbci	r23, 0xEB	; 235
     306:	7b 4e       	sbci	r23, 0xEB	; 235
     308:	7b 4e       	sbci	r23, 0xEB	; 235
     30a:	7b 4e       	sbci	r23, 0xEB	; 235
     30c:	7d 4e       	sbci	r23, 0xED	; 237
     30e:	7d 4e       	sbci	r23, 0xED	; 237
     310:	7d 4e       	sbci	r23, 0xED	; 237
     312:	7b 4e       	sbci	r23, 0xEB	; 235
     314:	7b 4e       	sbci	r23, 0xEB	; 235
     316:	7b 4e       	sbci	r23, 0xEB	; 235
     318:	7d 4e       	sbci	r23, 0xED	; 237
     31a:	7b 4e       	sbci	r23, 0xEB	; 235
     31c:	08 4a       	sbci	r16, 0xA8	; 168
     31e:	d7 3b       	cpi	r29, 0xB7	; 183
     320:	3b ce       	rjmp	.-906    	; 0xffffff98 <__eeprom_end+0xff7eff98>
     322:	01 6e       	ori	r16, 0xE1	; 225
     324:	84 bc       	out	0x24, r8	; 36
     326:	bf fd       	.word	0xfdbf	; ????
     328:	c1 2f       	mov	r28, r17
     32a:	3d 6c       	ori	r19, 0xCD	; 205
     32c:	74 31       	cpi	r23, 0x14	; 20
     32e:	9a bd       	out	0x2a, r25	; 42
     330:	56 83       	std	Z+6, r21	; 0x06
     332:	3d da       	rcall	.-2950   	; 0xfffff7ae <__eeprom_end+0xff7ef7ae>
     334:	3d 00       	.word	0x003d	; ????
     336:	c7 7f       	andi	r28, 0xF7	; 247
     338:	11 be       	out	0x31, r1	; 49
     33a:	d9 e4       	ldi	r29, 0x49	; 73
     33c:	bb 4c       	sbci	r27, 0xCB	; 203
     33e:	3e 91       	ld	r19, -X
     340:	6b aa       	std	Y+51, r6	; 0x33
     342:	aa be       	out	0x3a, r10	; 58
     344:	00 00       	nop
     346:	00 80       	ld	r0, Z
     348:	3f 07       	cpc	r19, r31
     34a:	63 42       	sbci	r22, 0x23	; 35
     34c:	36 b7       	in	r19, 0x36	; 54
     34e:	9b d8       	rcall	.-3786   	; 0xfffff486 <__eeprom_end+0xff7ef486>
     350:	a7 1a       	sub	r10, r23
     352:	39 68       	ori	r19, 0x89	; 137
     354:	56 18       	sub	r5, r6
     356:	ae ba       	out	0x1e, r10	; 30
     358:	ab 55       	subi	r26, 0x5B	; 91
     35a:	8c 1d       	adc	r24, r12
     35c:	3c b7       	in	r19, 0x3c	; 60
     35e:	cc 57       	subi	r28, 0x7C	; 124
     360:	63 bd       	out	0x23, r22	; 35
     362:	6d ed       	ldi	r22, 0xDD	; 221
     364:	fd 75       	andi	r31, 0x5D	; 93
     366:	3e f6       	brtc	.-114    	; 0x2f6 <__SREG__+0x2b7>
     368:	17 72       	andi	r17, 0x27	; 39
     36a:	31 bf       	out	0x31, r19	; 49
     36c:	00 00       	nop
     36e:	00 80       	ld	r0, Z
     370:	3f 07       	cpc	r19, r31
     372:	2c 7a       	andi	r18, 0xAC	; 172
     374:	a5 ba       	out	0x15, r10	; 21
     376:	6c c5       	rjmp	.+2776   	; 0xe50 <_ZN6Events4swapEhh+0x88>
     378:	90 da       	rcall	.-2784   	; 0xfffff89a <__eeprom_end+0xff7ef89a>
     37a:	3b 93       	.word	0x933b	; ????
     37c:	65 fc       	sbrc	r6, 5
     37e:	8b bc       	out	0x2b, r8	; 43
     380:	53 f8       	bld	r5, 3
     382:	10 fd       	sbrc	r17, 0
     384:	3c 56       	subi	r19, 0x6C	; 108
     386:	92 83       	std	Z+2, r25	; 0x02
     388:	4d bd       	out	0x2d, r20	; 45
     38a:	87 9d       	mul	r24, r7
     38c:	3a b6       	in	r3, 0x3a	; 58
     38e:	3d cb       	rjmp	.-2438   	; 0xfffffa0a <__eeprom_end+0xff7efa0a>
     390:	c9 bf       	out	0x39, r28	; 57
     392:	5b be       	out	0x3b, r5	; 59
     394:	73 da       	rcall	.-2842   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
     396:	0f c9       	rjmp	.-3554   	; 0xfffff5b6 <__eeprom_end+0xff7ef5b6>
     398:	3f 05       	cpc	r19, r15
     39a:	a8 4c       	sbci	r26, 0xC8	; 200
     39c:	cd b2       	in	r12, 0x1d	; 29
     39e:	d4 4e       	sbci	r29, 0xE4	; 228
     3a0:	b9 38       	cpi	r27, 0x89	; 137
     3a2:	36 a9       	ldd	r19, Z+54	; 0x36
     3a4:	02 0c       	add	r0, r2
     3a6:	50 b9       	out	0x00, r21	; 0
     3a8:	91 86       	std	Z+9, r9	; 0x09
     3aa:	88 08       	sbc	r8, r8
     3ac:	3c a6       	std	Y+44, r3	; 0x2c
     3ae:	aa aa       	std	Y+50, r10	; 0x32
     3b0:	2a be       	out	0x3a, r2	; 58
     3b2:	00 00       	nop
     3b4:	00 80       	ld	r0, Z
     3b6:	3f 08       	sbc	r3, r15
     3b8:	00 00       	nop
     3ba:	00 be       	out	0x30, r0	; 48
     3bc:	92 24       	eor	r9, r2
     3be:	49 12       	cpse	r4, r25
     3c0:	3e ab       	std	Y+54, r19	; 0x36
     3c2:	aa aa       	std	Y+50, r10	; 0x32
     3c4:	2a be       	out	0x3a, r2	; 58
     3c6:	cd cc       	rjmp	.-1638   	; 0xfffffd62 <__eeprom_end+0xff7efd62>
     3c8:	cc 4c       	sbci	r28, 0xCC	; 204
     3ca:	3e 00       	.word	0x003e	; ????
     3cc:	00 00       	nop
     3ce:	80 be       	out	0x30, r8	; 48
     3d0:	ab aa       	std	Y+51, r10	; 0x33
     3d2:	aa aa       	std	Y+50, r10	; 0x32
     3d4:	3e 00       	.word	0x003e	; ????
     3d6:	00 00       	nop
     3d8:	00 bf       	out	0x30, r16	; 48
     3da:	00 00       	nop
     3dc:	00 80       	ld	r0, Z
     3de:	3f 00       	.word	0x003f	; ????
     3e0:	00 00       	nop
     3e2:	00 00       	nop
     3e4:	08 41       	sbci	r16, 0x18	; 24
     3e6:	78 d3       	rcall	.+1776   	; 0xad8 <_ZN4AX129syncWriteEhhhPhPS0_+0xbc>
     3e8:	bb 43       	sbci	r27, 0x3B	; 59
     3ea:	87 d1       	rcall	.+782    	; 0x6fa <_ZN4AX1210sendPacketEhhhPh+0x76>
     3ec:	13 3d       	cpi	r17, 0xD3	; 211
     3ee:	19 0e       	add	r1, r25
     3f0:	3c c3       	rjmp	.+1656   	; 0xa6a <_ZN4AX129syncWriteEhhhPhPS0_+0x4e>
     3f2:	bd 42       	sbci	r27, 0x2D	; 45
     3f4:	82 ad       	ldd	r24, Z+58	; 0x3a
     3f6:	2b 3e       	cpi	r18, 0xEB	; 235
     3f8:	68 ec       	ldi	r22, 0xC8	; 200
     3fa:	82 76       	andi	r24, 0x62	; 98
     3fc:	be d9       	rcall	.-3204   	; 0xfffff77a <__eeprom_end+0xff7ef77a>
     3fe:	8f e1       	ldi	r24, 0x1F	; 31
     400:	a9 3e       	cpi	r26, 0xE9	; 233
     402:	4c 80       	ldd	r4, Y+4	; 0x04
     404:	ef ff       	.word	0xffef	; ????
     406:	be 01       	movw	r22, r28
     408:	c4 ff       	sbrs	r28, 4
     40a:	7f 3f       	cpi	r23, 0xFF	; 255
     40c:	00 00       	nop
     40e:	00 00       	nop
	...

00000411 <port_to_mode_PGM>:
     411:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     421:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000042b <port_to_output_PGM>:
     42b:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     43b:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000445 <port_to_input_PGM>:
     445:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     455:	00 01 00 00 03 01 06 01 09 01                       ..........

0000045f <digital_pin_to_port_PGM>:
     45f:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     46f:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     47f:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     48f:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     49f:	0b 0b 0b 0b 0b 0b                                   ......

000004a5 <digital_pin_to_bit_mask_PGM>:
     4a5:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     4b5:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     4c5:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     4d5:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     4e5:	04 08 10 20 40 80                                   ... @.

000004eb <digital_pin_to_timer_PGM>:
     4eb:	00 00 09 0a 02 08 0b 0c 0d 07 06 03 04 01 00 00     ................
	...
     517:	10 0f 0e 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000532 <__ctors_start>:
     532:	95 08       	sbc	r9, r5
     534:	23 15       	cp	r18, r3
     536:	7d 32       	cpi	r23, 0x2D	; 45
     538:	12 4d       	sbci	r17, 0xD2	; 210
     53a:	38 4e       	sbci	r19, 0xE8	; 232
     53c:	8d 4e       	sbci	r24, 0xED	; 237
     53e:	15 51       	subi	r17, 0x15	; 21
     540:	42 6b       	ori	r20, 0xB2	; 178
     542:	88 75       	andi	r24, 0x58	; 88

00000544 <__ctors_end>:
     544:	0e 51       	subi	r16, 0x1E	; 30

00000546 <__dtors_end>:
     546:	11 24       	eor	r1, r1
     548:	1f be       	out	0x3f, r1	; 63
     54a:	cf ef       	ldi	r28, 0xFF	; 255
     54c:	d1 e2       	ldi	r29, 0x21	; 33
     54e:	de bf       	out	0x3e, r29	; 62
     550:	cd bf       	out	0x3d, r28	; 61

00000552 <__do_copy_data>:
     552:	15 e0       	ldi	r17, 0x05	; 5
     554:	a0 e0       	ldi	r26, 0x00	; 0
     556:	b2 e0       	ldi	r27, 0x02	; 2
     558:	e4 e3       	ldi	r30, 0x34	; 52
     55a:	f4 e0       	ldi	r31, 0x04	; 4
     55c:	01 e0       	ldi	r16, 0x01	; 1
     55e:	0b bf       	out	0x3b, r16	; 59
     560:	02 c0       	rjmp	.+4      	; 0x566 <__do_copy_data+0x14>
     562:	07 90       	elpm	r0, Z+
     564:	0d 92       	st	X+, r0
     566:	ae 3b       	cpi	r26, 0xBE	; 190
     568:	b1 07       	cpc	r27, r17
     56a:	d9 f7       	brne	.-10     	; 0x562 <__do_copy_data+0x10>

0000056c <__do_clear_bss>:
     56c:	14 e1       	ldi	r17, 0x14	; 20
     56e:	ae eb       	ldi	r26, 0xBE	; 190
     570:	b5 e0       	ldi	r27, 0x05	; 5
     572:	01 c0       	rjmp	.+2      	; 0x576 <.do_clear_bss_start>

00000574 <.do_clear_bss_loop>:
     574:	1d 92       	st	X+, r1

00000576 <.do_clear_bss_start>:
     576:	a3 3d       	cpi	r26, 0xD3	; 211
     578:	b1 07       	cpc	r27, r17
     57a:	e1 f7       	brne	.-8      	; 0x574 <.do_clear_bss_loop>

0000057c <__do_global_ctors>:
     57c:	15 e0       	ldi	r17, 0x05	; 5
     57e:	c4 e4       	ldi	r28, 0x44	; 68
     580:	d5 e0       	ldi	r29, 0x05	; 5
     582:	04 c0       	rjmp	.+8      	; 0x58c <.do_global_ctors_start>

00000584 <.do_global_ctors_loop>:
     584:	22 97       	sbiw	r28, 0x02	; 2
     586:	fe 01       	movw	r30, r28
     588:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__tablejump__>

0000058c <.do_global_ctors_start>:
     58c:	c2 33       	cpi	r28, 0x32	; 50
     58e:	d1 07       	cpc	r29, r17
     590:	c9 f7       	brne	.-14     	; 0x584 <.do_global_ctors_loop>
     592:	0e 94 e7 73 	call	0xe7ce	; 0xe7ce <main>
     596:	0c 94 0d 82 	jmp	0x1041a	; 0x1041a <__do_global_dtors>

0000059a <__bad_interrupt>:
     59a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000059e <_ZN4AX125setTXEv>:
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
    bitClear(UCSR0B, RXCIE0);    // deshabilita la interrupción de recepción
    bitClear(UCSR0B, RXEN0);     // deshabilila la recepción
    bitSet(UCSR0B, TXEN0);       // habilita la trasmisión
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)   
    bitClear(UCSR1B, RXCIE1);    // deshabilita la interrupción de recepción
     59e:	e9 ec       	ldi	r30, 0xC9	; 201
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	80 81       	ld	r24, Z
     5a4:	8f 77       	andi	r24, 0x7F	; 127
     5a6:	80 83       	st	Z, r24
    bitClear(UCSR1B, RXEN1);     // deshabilila la recepción
     5a8:	80 81       	ld	r24, Z
     5aa:	8f 7e       	andi	r24, 0xEF	; 239
     5ac:	80 83       	st	Z, r24
    bitSet(UCSR1B, TXEN1);       // habilita la trasmisión
     5ae:	80 81       	ld	r24, Z
     5b0:	88 60       	ori	r24, 0x08	; 8
     5b2:	80 83       	st	Z, r24
#elif defined (__AVR_ATmega8__)
    bitClear(UCSRB, RXCIE);    // deshabilita la interrupción de recepción
    bitClear(UCSRB, RXEN);     // deshabilila la recepción
    bitSet(UCSRB, TXEN);       // habilita la trasmisión
#endif    
}
     5b4:	08 95       	ret

000005b6 <_ZN4AX125setRXEv>:
    bitClear(UCSR0B, TXEN0);   // deshabilita la trasmisión
    bitSet(UCSR0B, RXEN0);     // habilita la recepción
    bitSet(UCSR0B, RXCIE0);    // habilita la interrupción de recepción
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    //bitClear(TIMSK0, TOIE0);   // deshabilita la interrupción del timer0 (nota: esto es sólo para entornos Arduino)
    bitClear(UCSR1B, TXEN1);   // deshabilita la trasmisión
     5b6:	e9 ec       	ldi	r30, 0xC9	; 201
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	80 81       	ld	r24, Z
     5bc:	87 7f       	andi	r24, 0xF7	; 247
     5be:	80 83       	st	Z, r24
    bitSet(UCSR1B, RXEN1);     // habilita la recepción
     5c0:	80 81       	ld	r24, Z
     5c2:	80 61       	ori	r24, 0x10	; 16
     5c4:	80 83       	st	Z, r24
    bitSet(UCSR1B, RXCIE1);    // habilita la interrupción de recepción
     5c6:	80 81       	ld	r24, Z
     5c8:	80 68       	ori	r24, 0x80	; 128
     5ca:	80 83       	st	Z, r24
    //bitClear(TIMSK0, TOIE0); // deshabilita la interrupción del timer0 (nota: esto es sólo para entornos Arduino)
    bitClear(UCSRB, TXEN);   // deshabilita la trasmisión
    bitSet(UCSRB, RXEN);     // habilita la recepción
    bitSet(UCSRB, RXCIE);    // habilita la interrupción de recepción 
#endif    
    ax_rx_Pointer = 0;         // resetea el puntero del buffer
     5cc:	10 92 de 05 	sts	0x05DE, r1
}
     5d0:	08 95       	ret

000005d2 <_ZN4AX127setNoneEv>:
    bitClear(UCSR0B, RXCIE0);    // deshabilita la interrupción de recepción
    bitClear(UCSR0B, RXEN0);     // deshabilila la recepción
    bitClear(UCSR0B, TXEN0);     // deshabilita la trasmisión
    //bitSet(TIMSK0, TOIE0);          // rehabilita la interrupción del timer0 (nota: esto es sólo para entornos Arduino)
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    bitClear(UCSR1B, RXCIE1);    // deshabilita la interrupción de recepción
     5d2:	e9 ec       	ldi	r30, 0xC9	; 201
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 81       	ld	r24, Z
     5d8:	8f 77       	andi	r24, 0x7F	; 127
     5da:	80 83       	st	Z, r24
    bitClear(UCSR1B, RXEN1);     // deshabilila la recepción
     5dc:	80 81       	ld	r24, Z
     5de:	8f 7e       	andi	r24, 0xEF	; 239
     5e0:	80 83       	st	Z, r24
    bitClear(UCSR1B, TXEN1);     // deshabilita la trasmisión
     5e2:	80 81       	ld	r24, Z
     5e4:	87 7f       	andi	r24, 0xF7	; 247
     5e6:	80 83       	st	Z, r24
    bitClear(UCSRB, RXCIE);    // deshabilita la interrupción de recepción
    bitClear(UCSRB, RXEN);     // deshabilila la recepción
    bitClear(UCSRB, TXEN);     // deshabilita la trasmisión 
    //bitSet(TIMSK0, TOIE0);        // rehabilita la interrupción del timer0 (nota: esto es sólo para entornos Arduino)
#endif    
}
     5e8:	08 95       	ret

000005ea <__vector_36>:
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
ISR (USART_RX_vect) {
    AX12::ax_rx_buffer[(AX12::ax_rx_Pointer++)] = UDR0;    // esta es la rutina de interrupción de recepción
}                                                          
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
ISR (USART1_RX_vect) {
     5ea:	1f 92       	push	r1
     5ec:	0f 92       	push	r0
     5ee:	0f b6       	in	r0, 0x3f	; 63
     5f0:	0f 92       	push	r0
     5f2:	0b b6       	in	r0, 0x3b	; 59
     5f4:	0f 92       	push	r0
     5f6:	11 24       	eor	r1, r1
     5f8:	8f 93       	push	r24
     5fa:	9f 93       	push	r25
     5fc:	ef 93       	push	r30
     5fe:	ff 93       	push	r31
    AX12::ax_rx_buffer[(AX12::ax_rx_Pointer++)] = UDR1;    // esta es la rutina de interrupción de recepción
     600:	80 91 de 05 	lds	r24, 0x05DE
     604:	90 91 ce 00 	lds	r25, 0x00CE
     608:	ee eb       	ldi	r30, 0xBE	; 190
     60a:	f5 e0       	ldi	r31, 0x05	; 5
     60c:	e8 0f       	add	r30, r24
     60e:	f1 1d       	adc	r31, r1
     610:	90 83       	st	Z, r25
     612:	8f 5f       	subi	r24, 0xFF	; 255
     614:	80 93 de 05 	sts	0x05DE, r24
}                                               // lo que hace es meter el byte recibido en el buffer
     618:	ff 91       	pop	r31
     61a:	ef 91       	pop	r30
     61c:	9f 91       	pop	r25
     61e:	8f 91       	pop	r24
     620:	0f 90       	pop	r0
     622:	0b be       	out	0x3b, r0	; 59
     624:	0f 90       	pop	r0
     626:	0f be       	out	0x3f, r0	; 63
     628:	0f 90       	pop	r0
     62a:	1f 90       	pop	r1
     62c:	18 95       	reti

0000062e <_ZN4AX124initEl>:
}                                               // lo que hace es meter el byte recibido en el buffer
#endif    

/** initializes serial transmit at baud, 8-N-1 */
// nota: el AX12 internamente usa el Double Speed Operation (U2Xn=1). Ciertos baudrates no coinciden si no se usa este seteo
void AX12::init (long baud) {
     62e:	9b 01       	movw	r18, r22
     630:	ac 01       	movw	r20, r24
    unsigned int reg = F_CPU / (baud * 8) - 1;
     632:	83 e0       	ldi	r24, 0x03	; 3
     634:	22 0f       	add	r18, r18
     636:	33 1f       	adc	r19, r19
     638:	44 1f       	adc	r20, r20
     63a:	55 1f       	adc	r21, r21
     63c:	8a 95       	dec	r24
     63e:	d1 f7       	brne	.-12     	; 0x634 <_ZN4AX124initEl+0x6>
     640:	60 e0       	ldi	r22, 0x00	; 0
     642:	74 e2       	ldi	r23, 0x24	; 36
     644:	84 ef       	ldi	r24, 0xF4	; 244
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	0e 94 3a 7f 	call	0xfe74	; 0xfe74 <__divmodsi4>
     64c:	21 50       	subi	r18, 0x01	; 1
     64e:	30 40       	sbci	r19, 0x00	; 0
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
    bitSet (UCSR0A, U2X0); 
    UBRR0H = reg >> 8;                 // setea la velocidad del USART
    UBRR0L = reg & 0xFF; 
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    bitSet (UCSR1A, U2X1); 
     650:	e8 ec       	ldi	r30, 0xC8	; 200
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	80 81       	ld	r24, Z
     656:	82 60       	ori	r24, 0x02	; 2
     658:	80 83       	st	Z, r24
    UBRR1H = reg >> 8;
     65a:	30 93 cd 00 	sts	0x00CD, r19
    UBRR1L = reg & 0xFF;               // setea la velocidad del USART
     65e:	20 93 cc 00 	sts	0x00CC, r18
#elif defined (__AVR_ATmega8__)
    bitSet (UCSRA, U2X); 
    UBRRH = reg >> 8;
    UBRRL = reg & 0xFF;                // setea la velocidad del USART
#endif    
    ax_rx_Pointer = 0;
     662:	10 92 de 05 	sts	0x05DE, r1
    // deshabilita tanto recepción como trasmisión
    setNone();
     666:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN4AX127setNoneEv>
}
     66a:	08 95       	ret

0000066c <_ZN4AX12C1Eh>:
    inverse = false;
    SRL = RETURN_ALL;
    init (baud);
}

AX12::AX12 (byte motor_id) {
     66c:	fc 01       	movw	r30, r24
    id = motor_id;
     66e:	60 83       	st	Z, r22
    inverse = false;
     670:	11 82       	std	Z+1, r1	; 0x01
    SRL = RETURN_ALL;
     672:	82 e0       	ldi	r24, 0x02	; 2
     674:	82 83       	std	Z+2, r24	; 0x02
}
     676:	08 95       	ret

00000678 <_ZN4AX12C1Ev>:

AX12::AX12 () {
     678:	fc 01       	movw	r30, r24
    id = BROADCAST_ID;
     67a:	8e ef       	ldi	r24, 0xFE	; 254
     67c:	80 83       	st	Z, r24
    inverse = false;
     67e:	11 82       	std	Z+1, r1	; 0x01
    SRL = RETURN_NONE;
     680:	12 82       	std	Z+2, r1	; 0x02
}
     682:	08 95       	ret

00000684 <_ZN4AX1210sendPacketEhhhPh>:
/******************************************************************************
 * Packet Level
 ******************************************************************************/

/** send instruction packet */
void AX12::sendPacket (byte _id, byte datalength, byte instruction, byte* data) {
     684:	df 92       	push	r13
     686:	ef 92       	push	r14
     688:	ff 92       	push	r15
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	08 2f       	mov	r16, r24
     690:	d6 2e       	mov	r13, r22
     692:	14 2f       	mov	r17, r20
     694:	f2 2e       	mov	r15, r18
     696:	e3 2e       	mov	r14, r19
    byte checksum = 0;
    setTX();
     698:	0e 94 cf 02 	call	0x59e	; 0x59e <_ZN4AX125setTXEv>
byte AX12::writeByte (byte data) {
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
    while (bit_is_clear(UCSR0A, UDRE0));    // espera que el micro esté pronto para trasmitir
    UDR0 = data;                       // escribe el byte a trasmitir
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    while (bit_is_clear(UCSR1A, UDRE1));    // espera que el micro esté pronto para trasmitir
     69c:	80 91 c8 00 	lds	r24, 0x00C8
     6a0:	85 ff       	sbrs	r24, 5
     6a2:	fc cf       	rjmp	.-8      	; 0x69c <_ZN4AX1210sendPacketEhhhPh+0x18>
    UDR1 = data;                       // escribe el byte a trasmitir
     6a4:	8f ef       	ldi	r24, 0xFF	; 255
     6a6:	80 93 ce 00 	sts	0x00CE, r24
byte AX12::writeByte (byte data) {
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
    while (bit_is_clear(UCSR0A, UDRE0));    // espera que el micro esté pronto para trasmitir
    UDR0 = data;                       // escribe el byte a trasmitir
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    while (bit_is_clear(UCSR1A, UDRE1));    // espera que el micro esté pronto para trasmitir
     6aa:	80 91 c8 00 	lds	r24, 0x00C8
     6ae:	85 ff       	sbrs	r24, 5
     6b0:	fc cf       	rjmp	.-8      	; 0x6aa <_ZN4AX1210sendPacketEhhhPh+0x26>
    UDR1 = data;                       // escribe el byte a trasmitir
     6b2:	8f ef       	ldi	r24, 0xFF	; 255
     6b4:	80 93 ce 00 	sts	0x00CE, r24
byte AX12::writeByte (byte data) {
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
    while (bit_is_clear(UCSR0A, UDRE0));    // espera que el micro esté pronto para trasmitir
    UDR0 = data;                       // escribe el byte a trasmitir
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    while (bit_is_clear(UCSR1A, UDRE1));    // espera que el micro esté pronto para trasmitir
     6b8:	80 91 c8 00 	lds	r24, 0x00C8
     6bc:	85 ff       	sbrs	r24, 5
     6be:	fc cf       	rjmp	.-8      	; 0x6b8 <_ZN4AX1210sendPacketEhhhPh+0x34>
    UDR1 = data;                       // escribe el byte a trasmitir
     6c0:	00 93 ce 00 	sts	0x00CE, r16
    byte checksum = 0;
    setTX();
    writeByte (0xFF);
    writeByte (0xFF);
    checksum += writeByte (_id);
    checksum += writeByte (datalength + 2);
     6c4:	4d 2d       	mov	r20, r13
     6c6:	4e 5f       	subi	r20, 0xFE	; 254
byte AX12::writeByte (byte data) {
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
    while (bit_is_clear(UCSR0A, UDRE0));    // espera que el micro esté pronto para trasmitir
    UDR0 = data;                       // escribe el byte a trasmitir
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    while (bit_is_clear(UCSR1A, UDRE1));    // espera que el micro esté pronto para trasmitir
     6c8:	80 91 c8 00 	lds	r24, 0x00C8
     6cc:	85 ff       	sbrs	r24, 5
     6ce:	fc cf       	rjmp	.-8      	; 0x6c8 <_ZN4AX1210sendPacketEhhhPh+0x44>
    UDR1 = data;                       // escribe el byte a trasmitir
     6d0:	40 93 ce 00 	sts	0x00CE, r20
byte AX12::writeByte (byte data) {
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
    while (bit_is_clear(UCSR0A, UDRE0));    // espera que el micro esté pronto para trasmitir
    UDR0 = data;                       // escribe el byte a trasmitir
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    while (bit_is_clear(UCSR1A, UDRE1));    // espera que el micro esté pronto para trasmitir
     6d4:	80 91 c8 00 	lds	r24, 0x00C8
     6d8:	85 ff       	sbrs	r24, 5
     6da:	fc cf       	rjmp	.-8      	; 0x6d4 <_ZN4AX1210sendPacketEhhhPh+0x50>
    UDR1 = data;                       // escribe el byte a trasmitir
     6dc:	10 93 ce 00 	sts	0x00CE, r17
    byte checksum = 0;
    setTX();
    writeByte (0xFF);
    writeByte (0xFF);
    checksum += writeByte (_id);
    checksum += writeByte (datalength + 2);
     6e0:	41 0f       	add	r20, r17
    checksum += writeByte (instruction);
     6e2:	40 0f       	add	r20, r16
     6e4:	8f 2d       	mov	r24, r15
     6e6:	9e 2d       	mov	r25, r14
     6e8:	9c 01       	movw	r18, r24
     6ea:	f9 01       	movw	r30, r18
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	0a c0       	rjmp	.+20     	; 0x704 <_ZN4AX1210sendPacketEhhhPh+0x80>
    for (byte f=0; f<datalength; f++) {     // data = parámetros
      checksum += writeByte (data[f]);
     6f0:	20 81       	ld	r18, Z
byte AX12::writeByte (byte data) {
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
    while (bit_is_clear(UCSR0A, UDRE0));    // espera que el micro esté pronto para trasmitir
    UDR0 = data;                       // escribe el byte a trasmitir
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    while (bit_is_clear(UCSR1A, UDRE1));    // espera que el micro esté pronto para trasmitir
     6f2:	80 91 c8 00 	lds	r24, 0x00C8
     6f6:	85 ff       	sbrs	r24, 5
     6f8:	fc cf       	rjmp	.-8      	; 0x6f2 <_ZN4AX1210sendPacketEhhhPh+0x6e>
    UDR1 = data;                       // escribe el byte a trasmitir
     6fa:	20 93 ce 00 	sts	0x00CE, r18
    writeByte (0xFF);
    checksum += writeByte (_id);
    checksum += writeByte (datalength + 2);
    checksum += writeByte (instruction);
    for (byte f=0; f<datalength; f++) {     // data = parámetros
      checksum += writeByte (data[f]);
     6fe:	42 0f       	add	r20, r18
    writeByte (0xFF);
    writeByte (0xFF);
    checksum += writeByte (_id);
    checksum += writeByte (datalength + 2);
    checksum += writeByte (instruction);
    for (byte f=0; f<datalength; f++) {     // data = parámetros
     700:	9f 5f       	subi	r25, 0xFF	; 255
     702:	31 96       	adiw	r30, 0x01	; 1
     704:	9d 15       	cp	r25, r13
     706:	a0 f3       	brcs	.-24     	; 0x6f0 <_ZN4AX1210sendPacketEhhhPh+0x6c>
byte AX12::writeByte (byte data) {
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
    while (bit_is_clear(UCSR0A, UDRE0));    // espera que el micro esté pronto para trasmitir
    UDR0 = data;                       // escribe el byte a trasmitir
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    while (bit_is_clear(UCSR1A, UDRE1));    // espera que el micro esté pronto para trasmitir
     708:	80 91 c8 00 	lds	r24, 0x00C8
     70c:	85 ff       	sbrs	r24, 5
     70e:	fc cf       	rjmp	.-8      	; 0x708 <_ZN4AX1210sendPacketEhhhPh+0x84>
    checksum += writeByte (instruction);
    for (byte f=0; f<datalength; f++) {     // data = parámetros
      checksum += writeByte (data[f]);
    }
    // checksum =
    writeByte (~checksum);
     710:	40 95       	com	r20
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328P__)
    while (bit_is_clear(UCSR0A, UDRE0));    // espera que el micro esté pronto para trasmitir
    UDR0 = data;                       // escribe el byte a trasmitir
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega2560__)
    while (bit_is_clear(UCSR1A, UDRE1));    // espera que el micro esté pronto para trasmitir
    UDR1 = data;                       // escribe el byte a trasmitir
     712:	40 93 ce 00 	sts	0x00CE, r20
    for (byte f=0; f<datalength; f++) {     // data = parámetros
      checksum += writeByte (data[f]);
    }
    // checksum =
    writeByte (~checksum);
    setRX();
     716:	0e 94 db 02 	call	0x5b6	; 0x5b6 <_ZN4AX125setRXEv>
}
     71a:	1f 91       	pop	r17
     71c:	0f 91       	pop	r16
     71e:	ff 90       	pop	r15
     720:	ef 90       	pop	r14
     722:	df 90       	pop	r13
     724:	08 95       	ret

00000726 <_ZN4AX1210readPacketEv>:
/** retorna la posición en el buffer a partir de la cual se lee lo siguiente:
    posición [0] = status_id
    posición [1] = internal error (0 = OK)
    posición [2] = status_error
    posición [3,4,...] = status_data        */
byte AX12::readPacket () {
     726:	ff 92       	push	r15
     728:	0f 93       	push	r16
     72a:	1f 93       	push	r17
     72c:	00 e0       	ldi	r16, 0x00	; 0
     72e:	10 e0       	ldi	r17, 0x00	; 0
     730:	07 c0       	rjmp	.+14     	; 0x740 <_ZN4AX1210readPacketEv+0x1a>
     732:	2f 5f       	subi	r18, 0xFF	; 255
     734:	3f 4f       	sbci	r19, 0xFF	; 255
    // primero espera que llegue toda la data
    offset = 0; timeout = 0; bcount = 0;
    while (bcount < 13) {       // 13 es el largo máximo que puede tener un packet
        ulCounter = 0;
        while ((bcount + offset) == ax_rx_Pointer) {
            if (ulCounter++ > 1100L) {                   // was 3000
     736:	84 e0       	ldi	r24, 0x04	; 4
     738:	2e 34       	cpi	r18, 0x4E	; 78
     73a:	38 07       	cpc	r19, r24
     73c:	41 f4       	brne	.+16     	; 0x74e <_ZN4AX1210readPacketEv+0x28>
     73e:	15 c0       	rjmp	.+42     	; 0x76a <_ZN4AX1210readPacketEv+0x44>
     740:	20 e0       	ldi	r18, 0x00	; 0
     742:	30 e0       	ldi	r19, 0x00	; 0
    byte timeout, error, status_length, checksum, offset, bcount;
    // primero espera que llegue toda la data
    offset = 0; timeout = 0; bcount = 0;
    while (bcount < 13) {       // 13 es el largo máximo que puede tener un packet
        ulCounter = 0;
        while ((bcount + offset) == ax_rx_Pointer) {
     744:	e0 2f       	mov	r30, r16
     746:	f0 e0       	ldi	r31, 0x00	; 0
     748:	af 01       	movw	r20, r30
     74a:	41 0f       	add	r20, r17
     74c:	51 1d       	adc	r21, r1
     74e:	80 91 de 05 	lds	r24, 0x05DE
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	48 17       	cp	r20, r24
     756:	59 07       	cpc	r21, r25
     758:	61 f3       	breq	.-40     	; 0x732 <_ZN4AX1210readPacketEv+0xc>
     75a:	3c c0       	rjmp	.+120    	; 0x7d4 <_ZN4AX1210readPacketEv+0xae>
                timeout = 1;
                break;
            }
        }
        if (timeout) break;
        if ((bcount == 0) && (ax_rx_buffer[offset] != 0xff)) offset++;
     75c:	e2 54       	subi	r30, 0x42	; 66
     75e:	fa 4f       	sbci	r31, 0xFA	; 250
     760:	80 81       	ld	r24, Z
     762:	8f 3f       	cpi	r24, 0xFF	; 255
     764:	c9 f1       	breq	.+114    	; 0x7d8 <_ZN4AX1210readPacketEv+0xb2>
     766:	0f 5f       	subi	r16, 0xFF	; 255
     768:	eb cf       	rjmp	.-42     	; 0x740 <_ZN4AX1210readPacketEv+0x1a>
        else bcount++;
    }
    setNone();
     76a:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN4AX127setNoneEv>
     76e:	90 e0       	ldi	r25, 0x00	; 0
    // ahora decodifica el packet
    // corrección de cabecera
    error = 0;                                             // código interno de error
    do {
        error++;
     770:	9f 5f       	subi	r25, 0xFF	; 255
     772:	f9 2e       	mov	r15, r25
     774:	f0 0e       	add	r15, r16
     776:	21 2f       	mov	r18, r17
     778:	29 1b       	sub	r18, r25
    }
    setNone();
    // ahora decodifica el packet
    // corrección de cabecera
    error = 0;                                             // código interno de error
    do {
     77a:	4f 2d       	mov	r20, r15
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	fa 01       	movw	r30, r20
     780:	e2 54       	subi	r30, 0x42	; 66
     782:	fa 4f       	sbci	r31, 0xFA	; 250
     784:	80 81       	ld	r24, Z
     786:	8f 3f       	cpi	r24, 0xFF	; 255
     788:	99 f3       	breq	.-26     	; 0x770 <_ZN4AX1210readPacketEv+0x4a>
        error++;
        offset++;
        bcount--;
    } while (ax_rx_buffer[offset] == 255);
    if (error > 1) error = 0;                               // prueba de cabecera
     78a:	92 30       	cpi	r25, 0x02	; 2
     78c:	08 f0       	brcs	.+2      	; 0x790 <_ZN4AX1210readPacketEv+0x6a>
     78e:	90 e0       	ldi	r25, 0x00	; 0
    // offset = primer byte del mensaje (sin cabecera)
    // bcount = largo del mensaje leido (sin cabecera)
    status_length = 2 + ax_rx_buffer[offset+1];            // largo del mensaje decodificado
     790:	da 01       	movw	r26, r20
     792:	11 96       	adiw	r26, 0x01	; 1
     794:	fd 01       	movw	r30, r26
     796:	e2 54       	subi	r30, 0x42	; 66
     798:	fa 4f       	sbci	r31, 0xFA	; 250
     79a:	70 81       	ld	r23, Z
     79c:	7e 5f       	subi	r23, 0xFE	; 254
    if (bcount != status_length) error+=2;                 // prueba de coherencia de data
     79e:	27 13       	cpse	r18, r23
     7a0:	9e 5f       	subi	r25, 0xFE	; 254
     7a2:	9a 01       	movw	r18, r20
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	07 c0       	rjmp	.+14     	; 0x7b6 <_ZN4AX1210readPacketEv+0x90>
    checksum = 0;                                          // cálculo de checksum
    for (byte f=0; f<status_length; f++)
        checksum += ax_rx_buffer[offset+f];
     7a8:	f9 01       	movw	r30, r18
     7aa:	e2 54       	subi	r30, 0x42	; 66
     7ac:	fa 4f       	sbci	r31, 0xFA	; 250
     7ae:	80 81       	ld	r24, Z
     7b0:	68 0f       	add	r22, r24
     7b2:	2f 5f       	subi	r18, 0xFF	; 255
     7b4:	3f 4f       	sbci	r19, 0xFF	; 255
    // offset = primer byte del mensaje (sin cabecera)
    // bcount = largo del mensaje leido (sin cabecera)
    status_length = 2 + ax_rx_buffer[offset+1];            // largo del mensaje decodificado
    if (bcount != status_length) error+=2;                 // prueba de coherencia de data
    checksum = 0;                                          // cálculo de checksum
    for (byte f=0; f<status_length; f++)
     7b6:	82 2f       	mov	r24, r18
     7b8:	84 1b       	sub	r24, r20
     7ba:	87 17       	cp	r24, r23
     7bc:	a8 f3       	brcs	.-22     	; 0x7a8 <_ZN4AX1210readPacketEv+0x82>
        checksum += ax_rx_buffer[offset+f];
    if (checksum != 255) error+=4;                          // prueba de checksum
     7be:	6f 3f       	cpi	r22, 0xFF	; 255
     7c0:	09 f0       	breq	.+2      	; 0x7c4 <_ZN4AX1210readPacketEv+0x9e>
     7c2:	9c 5f       	subi	r25, 0xFC	; 252
    ax_rx_buffer[offset+1] = error;
     7c4:	a2 54       	subi	r26, 0x42	; 66
     7c6:	ba 4f       	sbci	r27, 0xFA	; 250
     7c8:	9c 93       	st	X, r25
    return offset;   
}
     7ca:	8f 2d       	mov	r24, r15
     7cc:	1f 91       	pop	r17
     7ce:	0f 91       	pop	r16
     7d0:	ff 90       	pop	r15
     7d2:	08 95       	ret
                timeout = 1;
                break;
            }
        }
        if (timeout) break;
        if ((bcount == 0) && (ax_rx_buffer[offset] != 0xff)) offset++;
     7d4:	11 23       	and	r17, r17
     7d6:	11 f2       	breq	.-124    	; 0x75c <_ZN4AX1210readPacketEv+0x36>
        else bcount++;
     7d8:	1f 5f       	subi	r17, 0xFF	; 255
byte AX12::readPacket () {
    unsigned long ulCounter;
    byte timeout, error, status_length, checksum, offset, bcount;
    // primero espera que llegue toda la data
    offset = 0; timeout = 0; bcount = 0;
    while (bcount < 13) {       // 13 es el largo máximo que puede tener un packet
     7da:	1d 30       	cpi	r17, 0x0D	; 13
     7dc:	08 f4       	brcc	.+2      	; 0x7e0 <_ZN4AX1210readPacketEv+0xba>
     7de:	b0 cf       	rjmp	.-160    	; 0x740 <_ZN4AX1210readPacketEv+0x1a>
     7e0:	c4 cf       	rjmp	.-120    	; 0x76a <_ZN4AX1210readPacketEv+0x44>

000007e2 <_Z8sign2bini>:
 * Misc.
 ******************************************************************************/

// solución para que bin2sign y sign2bin queden fuera de acá: distribuir junto con "util.cpp"
 
bool sign2bin (int numero) {         // numero > 0 --> true; numero <= 0 --> false
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	18 16       	cp	r1, r24
     7e6:	19 06       	cpc	r1, r25
     7e8:	0c f4       	brge	.+2      	; 0x7ec <_Z8sign2bini+0xa>
     7ea:	21 e0       	ldi	r18, 0x01	; 1
  return (numero > 0);
}
     7ec:	82 2f       	mov	r24, r18
     7ee:	08 95       	ret

000007f0 <_Z8bin2signb>:

char bin2sign (bool var) {           // var = 0 --> sign = -1; var = 1 --> sign = 1
     7f0:	88 0f       	add	r24, r24
  return 2*var - 1;
}
     7f2:	81 50       	subi	r24, 0x01	; 1
     7f4:	08 95       	ret

000007f6 <_Z10lengthReadh>:
  }
}

byte lengthRead (byte registr) {
    byte reglength = 0;
    switch (registr) {
     7f6:	e8 2f       	mov	r30, r24
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	e1 33       	cpi	r30, 0x31	; 49
     7fc:	f1 05       	cpc	r31, r1
     7fe:	50 f4       	brcc	.+20     	; 0x814 <_Z10lengthReadh+0x1e>
     800:	ee 58       	subi	r30, 0x8E	; 142
     802:	ff 4f       	sbci	r31, 0xFF	; 255
     804:	ee 0f       	add	r30, r30
     806:	ff 1f       	adc	r31, r31
     808:	05 90       	lpm	r0, Z+
     80a:	f4 91       	lpm	r31, Z+
     80c:	e0 2d       	mov	r30, r0
     80e:	09 94       	ijmp
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	08 95       	ret
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	08 95       	ret
     818:	82 e0       	ldi	r24, 0x02	; 2
      case MAX_TORQUE: case DOWN_CALIBRATION: case UP_CALIBRATION: 
      case GOAL_POSITION: case MOVING_SPEED: case TORQUE_LIMIT: 
      case PRESENT_POSITION: case PRESENT_SPEED: case PRESENT_LOAD: case PUNCH: reglength = 2; break;
    }
    return reglength;
}
     81a:	08 95       	ret

0000081c <_Z11lengthWriteh>:

byte lengthWrite (byte registr) {
    byte reglength = 0;
    switch (registr) {
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	fc 01       	movw	r30, r24
     820:	33 97       	sbiw	r30, 0x03	; 3
     822:	ee 32       	cpi	r30, 0x2E	; 46
     824:	f1 05       	cpc	r31, r1
     826:	50 f4       	brcc	.+20     	; 0x83c <_Z11lengthWriteh+0x20>
     828:	ed 55       	subi	r30, 0x5D	; 93
     82a:	ff 4f       	sbci	r31, 0xFF	; 255
     82c:	ee 0f       	add	r30, r30
     82e:	ff 1f       	adc	r31, r31
     830:	05 90       	lpm	r0, Z+
     832:	f4 91       	lpm	r31, Z+
     834:	e0 2d       	mov	r30, r0
     836:	09 94       	ijmp
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	08 95       	ret
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	08 95       	ret
     840:	82 e0       	ldi	r24, 0x02	; 2
      case CW_ANGLE_LIMIT: case CCW_ANGLE_LIMIT: 
      case MAX_TORQUE: case GOAL_POSITION: 
      case MOVING_SPEED: case TORQUE_LIMIT: case PUNCH: reglength = 2; break;
    }
    return reglength;
}
     842:	08 95       	ret

00000844 <_ZN4AX1210returnDataEh>:

AX12data AX12::returnData (byte _srl) {
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	ec 01       	movw	r28, r24
  AX12data returndata;
  if (SRL >= _srl) {
     84a:	8a 81       	ldd	r24, Y+2	; 0x02
     84c:	86 17       	cp	r24, r22
     84e:	50 f1       	brcs	.+84     	; 0x8a4 <_ZN4AX1210returnDataEh+0x60>
    byte index = readPacket ();
     850:	0e 94 93 03 	call	0x726	; 0x726 <_ZN4AX1210readPacketEv>
    byte status_id = ax_rx_buffer [index];
     854:	28 2f       	mov	r18, r24
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	f9 01       	movw	r30, r18
     85a:	e2 54       	subi	r30, 0x42	; 66
     85c:	fa 4f       	sbci	r31, 0xFA	; 250
     85e:	90 81       	ld	r25, Z
    byte int_error = ax_rx_buffer [index+1];
     860:	f9 01       	movw	r30, r18
     862:	e1 54       	subi	r30, 0x41	; 65
     864:	fa 4f       	sbci	r31, 0xFA	; 250
     866:	60 81       	ld	r22, Z
    byte status_error = ax_rx_buffer [index+2];
     868:	f9 01       	movw	r30, r18
     86a:	e0 54       	subi	r30, 0x40	; 64
     86c:	fa 4f       	sbci	r31, 0xFA	; 250
     86e:	a0 81       	ld	r26, Z
    returndata.error = (int_error<<7) | status_error | ((status_id != id)<<10);       // genera el mensaje de error, combinación de error interno con error ax12
     870:	88 81       	ld	r24, Y
     872:	98 17       	cp	r25, r24
     874:	19 f4       	brne	.+6      	; 0x87c <_ZN4AX1210returnDataEh+0x38>
     876:	40 e0       	ldi	r20, 0x00	; 0
     878:	50 e0       	ldi	r21, 0x00	; 0
     87a:	02 c0       	rjmp	.+4      	; 0x880 <_ZN4AX1210returnDataEh+0x3c>
     87c:	40 e0       	ldi	r20, 0x00	; 0
     87e:	54 e0       	ldi	r21, 0x04	; 4
     880:	e6 2f       	mov	r30, r22
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	f6 95       	lsr	r31
     886:	fe 2f       	mov	r31, r30
     888:	ee 27       	eor	r30, r30
     88a:	f7 95       	ror	r31
     88c:	e7 95       	ror	r30
     88e:	8a 2f       	mov	r24, r26
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	e8 2b       	or	r30, r24
     894:	f9 2b       	or	r31, r25
     896:	e4 2b       	or	r30, r20
     898:	f5 2b       	or	r31, r21
    returndata.data = (byte*) &(ax_rx_buffer [index+3]);
     89a:	c9 01       	movw	r24, r18
     89c:	8f 53       	subi	r24, 0x3F	; 63
     89e:	9a 4f       	sbci	r25, 0xFA	; 250
     8a0:	38 2f       	mov	r19, r24
     8a2:	04 c0       	rjmp	.+8      	; 0x8ac <_ZN4AX1210returnDataEh+0x68>
  } else {
    setNone();
     8a4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN4AX127setNoneEv>
     8a8:	ef ef       	ldi	r30, 0xFF	; 255
     8aa:	ff ef       	ldi	r31, 0xFF	; 255
    returndata.error = -1;
  }
  return returndata;
     8ac:	83 2f       	mov	r24, r19
}
     8ae:	bf 01       	movw	r22, r30
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	08 95       	ret

000008b6 <_ZN4AX128readDataEhh>:
  sendPacket (id, 0, ACTION, data);
  return returnData (RETURN_ALL).error;
}

/** read data */
AX12data AX12::readData (byte start, byte length) {
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	df 93       	push	r29
     8bc:	cf 93       	push	r28
     8be:	00 d0       	rcall	.+0      	; 0x8c0 <_ZN4AX128readDataEhh+0xa>
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	8c 01       	movw	r16, r24
  byte data [2];
  data [0] = start; data [1] = length;
     8c6:	69 83       	std	Y+1, r22	; 0x01
     8c8:	4a 83       	std	Y+2, r20	; 0x02
  sendPacket (id, 2, READ_DATA, data);
     8ca:	fc 01       	movw	r30, r24
     8cc:	80 81       	ld	r24, Z
     8ce:	62 e0       	ldi	r22, 0x02	; 2
     8d0:	42 e0       	ldi	r20, 0x02	; 2
     8d2:	9e 01       	movw	r18, r28
     8d4:	2f 5f       	subi	r18, 0xFF	; 255
     8d6:	3f 4f       	sbci	r19, 0xFF	; 255
     8d8:	0e 94 42 03 	call	0x684	; 0x684 <_ZN4AX1210sendPacketEhhhPh>
  return returnData (RETURN_READ);
     8dc:	c8 01       	movw	r24, r16
     8de:	61 e0       	ldi	r22, 0x01	; 1
     8e0:	0e 94 22 04 	call	0x844	; 0x844 <_ZN4AX1210returnDataEh>
}
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	cf 91       	pop	r28
     8ea:	df 91       	pop	r29
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	08 95       	ret

000008f2 <_ZN4AX124pingEv>:
/******************************************************************************
 * Instruction Level
 ******************************************************************************/

/** ping */
int AX12::ping () {
     8f2:	0f 93       	push	r16
     8f4:	1f 93       	push	r17
     8f6:	8c 01       	movw	r16, r24
  byte* data;
  sendPacket (id, 0, AX_PING, data);
     8f8:	fc 01       	movw	r30, r24
     8fa:	80 81       	ld	r24, Z
     8fc:	60 e0       	ldi	r22, 0x00	; 0
     8fe:	41 e0       	ldi	r20, 0x01	; 1
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	0e 94 42 03 	call	0x684	; 0x684 <_ZN4AX1210sendPacketEhhhPh>
  return returnData (RETURN_NONE).error;
     908:	c8 01       	movw	r24, r16
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 22 04 	call	0x844	; 0x844 <_ZN4AX1210returnDataEh>
     910:	cb 01       	movw	r24, r22
}
     912:	1f 91       	pop	r17
     914:	0f 91       	pop	r16
     916:	08 95       	ret

00000918 <_ZN4AX1212processValueEhPi>:
    returndata.error = -1;
  }
  return returndata;
}

void AX12::processValue (byte registr, int* value) {                           // procesa el valor para la salida segun la propiedad "inverse"
     918:	dc 01       	movw	r26, r24
     91a:	fa 01       	movw	r30, r20
  switch (registr) {
     91c:	64 32       	cpi	r22, 0x24	; 36
     91e:	51 f0       	breq	.+20     	; 0x934 <_ZN4AX1212processValueEhPi+0x1c>
     920:	65 32       	cpi	r22, 0x25	; 37
     922:	18 f4       	brcc	.+6      	; 0x92a <_ZN4AX1212processValueEhPi+0x12>
     924:	6e 31       	cpi	r22, 0x1E	; 30
     926:	c9 f5       	brne	.+114    	; 0x99a <_ZN4AX1212processValueEhPi+0x82>
     928:	05 c0       	rjmp	.+10     	; 0x934 <_ZN4AX1212processValueEhPi+0x1c>
     92a:	66 32       	cpi	r22, 0x26	; 38
     92c:	81 f0       	breq	.+32     	; 0x94e <_ZN4AX1212processValueEhPi+0x36>
     92e:	68 32       	cpi	r22, 0x28	; 40
     930:	a1 f5       	brne	.+104    	; 0x99a <_ZN4AX1212processValueEhPi+0x82>
     932:	0d c0       	rjmp	.+26     	; 0x94e <_ZN4AX1212processValueEhPi+0x36>
    case PRESENT_POSITION: case GOAL_POSITION:
      if (inverse) {*value = 1023 - *value;}
     934:	11 96       	adiw	r26, 0x01	; 1
     936:	8c 91       	ld	r24, X
     938:	88 23       	and	r24, r24
     93a:	79 f1       	breq	.+94     	; 0x99a <_ZN4AX1212processValueEhPi+0x82>
     93c:	8f ef       	ldi	r24, 0xFF	; 255
     93e:	93 e0       	ldi	r25, 0x03	; 3
     940:	20 81       	ld	r18, Z
     942:	31 81       	ldd	r19, Z+1	; 0x01
     944:	82 1b       	sub	r24, r18
     946:	93 0b       	sbc	r25, r19
     948:	91 83       	std	Z+1, r25	; 0x01
     94a:	80 83       	st	Z, r24
     94c:	08 95       	ret
      break;
    case PRESENT_SPEED: case PRESENT_LOAD:
      *value = ((*value)&0x03FF) * bin2sign(((*value)>0x03FF)^inverse); 
     94e:	40 81       	ld	r20, Z
     950:	51 81       	ldd	r21, Z+1	; 0x01
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	70 e0       	ldi	r23, 0x00	; 0
     95a:	84 e0       	ldi	r24, 0x04	; 4
     95c:	40 30       	cpi	r20, 0x00	; 0
     95e:	58 07       	cpc	r21, r24
     960:	14 f0       	brlt	.+4      	; 0x966 <_ZN4AX1212processValueEhPi+0x4e>
     962:	61 e0       	ldi	r22, 0x01	; 1
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	11 96       	adiw	r26, 0x01	; 1
     968:	8c 91       	ld	r24, X
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	68 17       	cp	r22, r24
     96e:	79 07       	cpc	r23, r25
     970:	11 f0       	breq	.+4      	; 0x976 <_ZN4AX1212processValueEhPi+0x5e>
     972:	21 e0       	ldi	r18, 0x01	; 1
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	22 0f       	add	r18, r18
     978:	33 1f       	adc	r19, r19
     97a:	82 2f       	mov	r24, r18
     97c:	81 50       	subi	r24, 0x01	; 1
     97e:	99 27       	eor	r25, r25
     980:	87 fd       	sbrc	r24, 7
     982:	90 95       	com	r25
     984:	53 70       	andi	r21, 0x03	; 3
     986:	9c 01       	movw	r18, r24
     988:	24 9f       	mul	r18, r20
     98a:	c0 01       	movw	r24, r0
     98c:	25 9f       	mul	r18, r21
     98e:	90 0d       	add	r25, r0
     990:	34 9f       	mul	r19, r20
     992:	90 0d       	add	r25, r0
     994:	11 24       	eor	r1, r1
     996:	91 83       	std	Z+1, r25	; 0x01
     998:	80 83       	st	Z, r24
     99a:	08 95       	ret

0000099c <_ZN4AX128readInfoEh>:
/******************************************************************************
 * Register Level
 ******************************************************************************/

/** "intelligent" read data */
AX12info AX12::readInfo (byte registr) {
     99c:	ef 92       	push	r14
     99e:	ff 92       	push	r15
     9a0:	0f 93       	push	r16
     9a2:	1f 93       	push	r17
     9a4:	df 93       	push	r29
     9a6:	cf 93       	push	r28
     9a8:	00 d0       	rcall	.+0      	; 0x9aa <_ZN4AX128readInfoEh+0xe>
     9aa:	00 d0       	rcall	.+0      	; 0x9ac <_ZN4AX128readInfoEh+0x10>
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
     9b0:	7c 01       	movw	r14, r24
     9b2:	06 2f       	mov	r16, r22
    byte reglength = lengthRead (registr);
     9b4:	86 2f       	mov	r24, r22
     9b6:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <_Z10lengthReadh>
     9ba:	18 2f       	mov	r17, r24
    AX12info returninfo;
    returninfo.error = -2;
     9bc:	8e ef       	ldi	r24, 0xFE	; 254
     9be:	9f ef       	ldi	r25, 0xFF	; 255
     9c0:	9a 83       	std	Y+2, r25	; 0x02
     9c2:	89 83       	std	Y+1, r24	; 0x01
    if (reglength == 0) {return returninfo;}
     9c4:	11 23       	and	r17, r17
     9c6:	d9 f0       	breq	.+54     	; 0x9fe <_ZN4AX128readInfoEh+0x62>
    AX12data returndata = readData (registr, reglength);
     9c8:	c7 01       	movw	r24, r14
     9ca:	60 2f       	mov	r22, r16
     9cc:	41 2f       	mov	r20, r17
     9ce:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <_ZN4AX128readDataEhh>
     9d2:	fc 01       	movw	r30, r24
    returninfo.error = returndata.error;
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	69 83       	std	Y+1, r22	; 0x01
     9d8:	20 81       	ld	r18, Z
char bin2sign (bool var) {           // var = 0 --> sign = -1; var = 1 --> sign = 1
  return 2*var - 1;
}

int makeInt (byte *dir, byte reglength) {          // transforma 2 bytes en un int (según la lógica AX12)
  if (reglength > 1) {
     9da:	11 30       	cpi	r17, 0x01	; 1
     9dc:	31 f0       	breq	.+12     	; 0x9ea <_ZN4AX128readInfoEh+0x4e>
    return (dir[1] << 8) | dir[0];
     9de:	91 81       	ldd	r25, Z+1	; 0x01
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	28 2b       	or	r18, r24
     9e6:	39 2b       	or	r19, r25
     9e8:	01 c0       	rjmp	.+2      	; 0x9ec <_ZN4AX128readInfoEh+0x50>
  } else {
    return dir[0];
     9ea:	30 e0       	ldi	r19, 0x00	; 0
    AX12info returninfo;
    returninfo.error = -2;
    if (reglength == 0) {return returninfo;}
    AX12data returndata = readData (registr, reglength);
    returninfo.error = returndata.error;
    returninfo.value = makeInt (returndata.data, reglength);    
     9ec:	3c 83       	std	Y+4, r19	; 0x04
     9ee:	2b 83       	std	Y+3, r18	; 0x03
    processValue (registr, &returninfo.value);
     9f0:	c7 01       	movw	r24, r14
     9f2:	60 2f       	mov	r22, r16
     9f4:	ae 01       	movw	r20, r28
     9f6:	4d 5f       	subi	r20, 0xFD	; 253
     9f8:	5f 4f       	sbci	r21, 0xFF	; 255
     9fa:	0e 94 8c 04 	call	0x918	; 0x918 <_ZN4AX1212processValueEhPi>
    return returninfo;
     9fe:	69 81       	ldd	r22, Y+1	; 0x01
     a00:	7a 81       	ldd	r23, Y+2	; 0x02
     a02:	8b 81       	ldd	r24, Y+3	; 0x03
     a04:	9c 81       	ldd	r25, Y+4	; 0x04
}
     a06:	0f 90       	pop	r0
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	cf 91       	pop	r28
     a10:	df 91       	pop	r29
     a12:	1f 91       	pop	r17
     a14:	0f 91       	pop	r16
     a16:	ff 90       	pop	r15
     a18:	ef 90       	pop	r14
     a1a:	08 95       	ret

00000a1c <_ZN4AX129syncWriteEhhhPhPS0_>:
                                                   // (las operaciones en la EEPROM no suelen ser real-time)
    return error;
}

/** sync write */
void AX12::syncWrite (byte start, byte length, byte targetlength, byte* targets, byte** valuess) {
     a1c:	2f 92       	push	r2
     a1e:	3f 92       	push	r3
     a20:	4f 92       	push	r4
     a22:	5f 92       	push	r5
     a24:	6f 92       	push	r6
     a26:	7f 92       	push	r7
     a28:	8f 92       	push	r8
     a2a:	9f 92       	push	r9
     a2c:	af 92       	push	r10
     a2e:	bf 92       	push	r11
     a30:	cf 92       	push	r12
     a32:	df 92       	push	r13
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	df 93       	push	r29
     a3e:	cf 93       	push	r28
     a40:	cd b7       	in	r28, 0x3d	; 61
     a42:	de b7       	in	r29, 0x3e	; 62
     a44:	86 2e       	mov	r8, r22
     a46:	24 2e       	mov	r2, r20
     a48:	39 01       	movw	r6, r18
      memcpy (&data[index], valuess[f], length);   // copio los valores
      index += length;
    }
    sendPacket (BROADCAST_ID, superlength, SYNC_WRITE, data);
    setNone();   
}
     a4a:	4d b6       	in	r4, 0x3d	; 61
     a4c:	5e b6       	in	r5, 0x3e	; 62
    return error;
}

/** sync write */
void AX12::syncWrite (byte start, byte length, byte targetlength, byte* targets, byte** valuess) {
    byte rowlength = length + 1;
     a4e:	36 2e       	mov	r3, r22
     a50:	33 94       	inc	r3
    byte superlength = rowlength*targetlength + 2; 
     a52:	43 9d       	mul	r20, r3
     a54:	90 2c       	mov	r9, r0
     a56:	11 24       	eor	r1, r1
     a58:	22 e0       	ldi	r18, 0x02	; 2
     a5a:	92 0e       	add	r9, r18
    byte data [superlength];
     a5c:	ed b7       	in	r30, 0x3d	; 61
     a5e:	fe b7       	in	r31, 0x3e	; 62
     a60:	e9 19       	sub	r30, r9
     a62:	f1 09       	sbc	r31, r1
     a64:	0f b6       	in	r0, 0x3f	; 63
     a66:	f8 94       	cli
     a68:	fe bf       	out	0x3e, r31	; 62
     a6a:	0f be       	out	0x3f, r0	; 63
     a6c:	ed bf       	out	0x3d, r30	; 61
     a6e:	ad b6       	in	r10, 0x3d	; 61
     a70:	be b6       	in	r11, 0x3e	; 62
     a72:	08 94       	sec
     a74:	a1 1c       	adc	r10, r1
     a76:	b1 1c       	adc	r11, r1
    data [0] = start; 
     a78:	81 83       	std	Z+1, r24	; 0x01
    data [1] = length;
     a7a:	f5 01       	movw	r30, r10
     a7c:	61 83       	std	Z+1, r22	; 0x01
     a7e:	68 01       	movw	r12, r16
     a80:	12 e0       	ldi	r17, 0x02	; 2
     a82:	ee 24       	eor	r14, r14
     a84:	ff 24       	eor	r15, r15
     a86:	1d c0       	rjmp	.+58     	; 0xac2 <_ZN4AX129syncWriteEhhhPhPS0_+0xa6>
    byte index = 2;
    for (byte f=0; f<targetlength; f++) {
      data [index++] = targets[f];                 // pongo el ID
     a88:	d5 01       	movw	r26, r10
     a8a:	a1 0f       	add	r26, r17
     a8c:	b1 1d       	adc	r27, r1
     a8e:	f3 01       	movw	r30, r6
     a90:	ee 0d       	add	r30, r14
     a92:	ff 1d       	adc	r31, r15
     a94:	80 81       	ld	r24, Z
     a96:	8c 93       	st	X, r24
      memcpy (&data[index], valuess[f], length);   // copio los valores
     a98:	1f 5f       	subi	r17, 0xFF	; 255
     a9a:	95 01       	movw	r18, r10
     a9c:	21 0f       	add	r18, r17
     a9e:	31 1d       	adc	r19, r1
     aa0:	11 50       	subi	r17, 0x01	; 1
     aa2:	f6 01       	movw	r30, r12
     aa4:	60 81       	ld	r22, Z
     aa6:	71 81       	ldd	r23, Z+1	; 0x01
     aa8:	c9 01       	movw	r24, r18
     aaa:	48 2d       	mov	r20, r8
     aac:	50 e0       	ldi	r21, 0x00	; 0
     aae:	0e 94 a7 81 	call	0x1034e	; 0x1034e <memcpy>
     ab2:	13 0d       	add	r17, r3
     ab4:	08 94       	sec
     ab6:	e1 1c       	adc	r14, r1
     ab8:	f1 1c       	adc	r15, r1
     aba:	22 e0       	ldi	r18, 0x02	; 2
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	c2 0e       	add	r12, r18
     ac0:	d3 1e       	adc	r13, r19
    byte superlength = rowlength*targetlength + 2; 
    byte data [superlength];
    data [0] = start; 
    data [1] = length;
    byte index = 2;
    for (byte f=0; f<targetlength; f++) {
     ac2:	e2 14       	cp	r14, r2
     ac4:	08 f3       	brcs	.-62     	; 0xa88 <_ZN4AX129syncWriteEhhhPhPS0_+0x6c>
      data [index++] = targets[f];                 // pongo el ID
      memcpy (&data[index], valuess[f], length);   // copio los valores
      index += length;
    }
    sendPacket (BROADCAST_ID, superlength, SYNC_WRITE, data);
     ac6:	8e ef       	ldi	r24, 0xFE	; 254
     ac8:	69 2d       	mov	r22, r9
     aca:	43 e8       	ldi	r20, 0x83	; 131
     acc:	95 01       	movw	r18, r10
     ace:	0e 94 42 03 	call	0x684	; 0x684 <_ZN4AX1210sendPacketEhhhPh>
    setNone();   
     ad2:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN4AX127setNoneEv>
}
     ad6:	0f b6       	in	r0, 0x3f	; 63
     ad8:	f8 94       	cli
     ada:	5e be       	out	0x3e, r5	; 62
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	4d be       	out	0x3d, r4	; 61
     ae0:	cf 91       	pop	r28
     ae2:	df 91       	pop	r29
     ae4:	1f 91       	pop	r17
     ae6:	0f 91       	pop	r16
     ae8:	ff 90       	pop	r15
     aea:	ef 90       	pop	r14
     aec:	df 90       	pop	r13
     aee:	cf 90       	pop	r12
     af0:	bf 90       	pop	r11
     af2:	af 90       	pop	r10
     af4:	9f 90       	pop	r9
     af6:	8f 90       	pop	r8
     af8:	7f 90       	pop	r7
     afa:	6f 90       	pop	r6
     afc:	5f 90       	pop	r5
     afe:	4f 90       	pop	r4
     b00:	3f 90       	pop	r3
     b02:	2f 90       	pop	r2
     b04:	08 95       	ret

00000b06 <_ZN4AX1214setMultiPosVelEhPhPiS1_>:
    values [2] = lowByte(vel);
    values[3] = highByte(vel);
    return writeData (GOAL_POSITION, 4, values);
}

void AX12::setMultiPosVel (byte targetlength, byte* targets, int* posvalues, int* velvalues) {
     b06:	6f 92       	push	r6
     b08:	7f 92       	push	r7
     b0a:	8f 92       	push	r8
     b0c:	9f 92       	push	r9
     b0e:	af 92       	push	r10
     b10:	bf 92       	push	r11
     b12:	cf 92       	push	r12
     b14:	df 92       	push	r13
     b16:	ef 92       	push	r14
     b18:	ff 92       	push	r15
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	df 93       	push	r29
     b20:	cf 93       	push	r28
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
     b26:	08 2f       	mov	r16, r24
     b28:	5b 01       	movw	r10, r22
      valuess[f][3] = highByte(velvalues[f]);
      pointers[f] = &valuess[f][0];
    }    
    //nota: la sync write no respeta la propiedad "inverse"
    syncWrite (GOAL_POSITION, 4, targetlength, targets, pointers);  
}
     b2a:	8d b6       	in	r8, 0x3d	; 61
     b2c:	9e b6       	in	r9, 0x3e	; 62
    values[3] = highByte(vel);
    return writeData (GOAL_POSITION, 4, values);
}

void AX12::setMultiPosVel (byte targetlength, byte* targets, int* posvalues, int* velvalues) {
    byte valuess [targetlength][4];
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	bc 01       	movw	r22, r24
     b32:	66 0f       	add	r22, r22
     b34:	77 1f       	adc	r23, r23
     b36:	66 0f       	add	r22, r22
     b38:	77 1f       	adc	r23, r23
     b3a:	ad b7       	in	r26, 0x3d	; 61
     b3c:	be b7       	in	r27, 0x3e	; 62
     b3e:	a6 1b       	sub	r26, r22
     b40:	b7 0b       	sbc	r27, r23
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	f8 94       	cli
     b46:	be bf       	out	0x3e, r27	; 62
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	ad bf       	out	0x3d, r26	; 61
     b4c:	ed b6       	in	r14, 0x3d	; 61
     b4e:	fe b6       	in	r15, 0x3e	; 62
     b50:	08 94       	sec
     b52:	e1 1c       	adc	r14, r1
     b54:	f1 1c       	adc	r15, r1
    byte * pointers [targetlength];
     b56:	88 0f       	add	r24, r24
     b58:	99 1f       	adc	r25, r25
     b5a:	ed b7       	in	r30, 0x3d	; 61
     b5c:	fe b7       	in	r31, 0x3e	; 62
     b5e:	e8 1b       	sub	r30, r24
     b60:	f9 0b       	sbc	r31, r25
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	f8 94       	cli
     b66:	fe bf       	out	0x3e, r31	; 62
     b68:	0f be       	out	0x3f, r0	; 63
     b6a:	ed bf       	out	0x3d, r30	; 61
     b6c:	cd b6       	in	r12, 0x3d	; 61
     b6e:	de b6       	in	r13, 0x3e	; 62
     b70:	08 94       	sec
     b72:	c1 1c       	adc	r12, r1
     b74:	d1 1c       	adc	r13, r1
     b76:	ba 01       	movw	r22, r20
     b78:	a9 01       	movw	r20, r18
     b7a:	10 e0       	ldi	r17, 0x00	; 0
     b7c:	32 c0       	rjmp	.+100    	; 0xbe2 <_ZN4AX1214setMultiPosVelEhPhPiS1_+0xdc>
    for (byte f=0; f<targetlength; f++) {
      valuess [f][0] = lowByte(posvalues[f]);
     b7e:	a1 2f       	mov	r26, r17
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	9d 01       	movw	r18, r26
     b84:	22 0f       	add	r18, r18
     b86:	33 1f       	adc	r19, r19
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	2e 0d       	add	r18, r14
     b8e:	3f 1d       	adc	r19, r15
     b90:	fb 01       	movw	r30, r22
     b92:	80 81       	ld	r24, Z
     b94:	f9 01       	movw	r30, r18
     b96:	80 83       	st	Z, r24
      valuess[f][1] = highByte(posvalues[f]);
     b98:	fb 01       	movw	r30, r22
     b9a:	81 91       	ld	r24, Z+
     b9c:	91 91       	ld	r25, Z+
     b9e:	bf 01       	movw	r22, r30
     ba0:	89 2f       	mov	r24, r25
     ba2:	99 0f       	add	r25, r25
     ba4:	99 0b       	sbc	r25, r25
     ba6:	f9 01       	movw	r30, r18
     ba8:	81 83       	std	Z+1, r24	; 0x01
      valuess [f][2] = lowByte(velvalues[f]);
     baa:	3d 01       	movw	r6, r26
     bac:	66 0c       	add	r6, r6
     bae:	77 1c       	adc	r7, r7
     bb0:	f3 01       	movw	r30, r6
     bb2:	31 96       	adiw	r30, 0x01	; 1
     bb4:	ee 0f       	add	r30, r30
     bb6:	ff 1f       	adc	r31, r31
     bb8:	ee 0d       	add	r30, r14
     bba:	ff 1d       	adc	r31, r15
     bbc:	da 01       	movw	r26, r20
     bbe:	8c 91       	ld	r24, X
     bc0:	80 83       	st	Z, r24
      valuess[f][3] = highByte(velvalues[f]);
     bc2:	fa 01       	movw	r30, r20
     bc4:	81 91       	ld	r24, Z+
     bc6:	91 91       	ld	r25, Z+
     bc8:	af 01       	movw	r20, r30
     bca:	89 2f       	mov	r24, r25
     bcc:	99 0f       	add	r25, r25
     bce:	99 0b       	sbc	r25, r25
     bd0:	d9 01       	movw	r26, r18
     bd2:	13 96       	adiw	r26, 0x03	; 3
     bd4:	8c 93       	st	X, r24
      pointers[f] = &valuess[f][0];
     bd6:	6c 0c       	add	r6, r12
     bd8:	7d 1c       	adc	r7, r13
     bda:	f3 01       	movw	r30, r6
     bdc:	31 83       	std	Z+1, r19	; 0x01
     bde:	20 83       	st	Z, r18
}

void AX12::setMultiPosVel (byte targetlength, byte* targets, int* posvalues, int* velvalues) {
    byte valuess [targetlength][4];
    byte * pointers [targetlength];
    for (byte f=0; f<targetlength; f++) {
     be0:	1f 5f       	subi	r17, 0xFF	; 255
     be2:	10 17       	cp	r17, r16
     be4:	60 f2       	brcs	.-104    	; 0xb7e <_ZN4AX1214setMultiPosVelEhPhPiS1_+0x78>
      valuess [f][2] = lowByte(velvalues[f]);
      valuess[f][3] = highByte(velvalues[f]);
      pointers[f] = &valuess[f][0];
    }    
    //nota: la sync write no respeta la propiedad "inverse"
    syncWrite (GOAL_POSITION, 4, targetlength, targets, pointers);  
     be6:	8e e1       	ldi	r24, 0x1E	; 30
     be8:	64 e0       	ldi	r22, 0x04	; 4
     bea:	40 2f       	mov	r20, r16
     bec:	95 01       	movw	r18, r10
     bee:	86 01       	movw	r16, r12
     bf0:	0e 94 0e 05 	call	0xa1c	; 0xa1c <_ZN4AX129syncWriteEhhhPhPS0_>
}
     bf4:	0f b6       	in	r0, 0x3f	; 63
     bf6:	f8 94       	cli
     bf8:	9e be       	out	0x3e, r9	; 62
     bfa:	0f be       	out	0x3f, r0	; 63
     bfc:	8d be       	out	0x3d, r8	; 61
     bfe:	cf 91       	pop	r28
     c00:	df 91       	pop	r29
     c02:	1f 91       	pop	r17
     c04:	0f 91       	pop	r16
     c06:	ff 90       	pop	r15
     c08:	ef 90       	pop	r14
     c0a:	df 90       	pop	r13
     c0c:	cf 90       	pop	r12
     c0e:	bf 90       	pop	r11
     c10:	af 90       	pop	r10
     c12:	9f 90       	pop	r9
     c14:	8f 90       	pop	r8
     c16:	7f 90       	pop	r7
     c18:	6f 90       	pop	r6
     c1a:	08 95       	ret

00000c1c <_ZN4AX129writeDataEhhPhb>:
  return returnData (RETURN_READ);
}

/** write data + reg write */
// seteando a "true" el parámetro adicional (isReg) se transforma en un reg write
int AX12::writeData (byte start, byte length, byte* values, bool isReg) {
     c1c:	9f 92       	push	r9
     c1e:	af 92       	push	r10
     c20:	bf 92       	push	r11
     c22:	cf 92       	push	r12
     c24:	df 92       	push	r13
     c26:	ef 92       	push	r14
     c28:	ff 92       	push	r15
     c2a:	0f 93       	push	r16
     c2c:	1f 93       	push	r17
     c2e:	df 93       	push	r29
     c30:	cf 93       	push	r28
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
     c36:	6c 01       	movw	r12, r24
     c38:	96 2e       	mov	r9, r22
     c3a:	14 2f       	mov	r17, r20
    }
    int error = returnData (RETURN_ALL).error;
    if (start < 23) {delayMicroseconds (5000);}       // si la operación de escritura es en la EEPROM, este delay previene el embotellamiento
                                                   // (las operaciones en la EEPROM no suelen ser real-time)
    return error;
}
     c3c:	ad b6       	in	r10, 0x3d	; 61
     c3e:	be b6       	in	r11, 0x3e	; 62
}

/** write data + reg write */
// seteando a "true" el parámetro adicional (isReg) se transforma en un reg write
int AX12::writeData (byte start, byte length, byte* values, bool isReg) {
    byte data [length+1];
     c40:	84 2f       	mov	r24, r20
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	01 96       	adiw	r24, 0x01	; 1
     c46:	4d b7       	in	r20, 0x3d	; 61
     c48:	5e b7       	in	r21, 0x3e	; 62
     c4a:	48 1b       	sub	r20, r24
     c4c:	59 0b       	sbc	r21, r25
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	f8 94       	cli
     c52:	5e bf       	out	0x3e, r21	; 62
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	4d bf       	out	0x3d, r20	; 61
     c58:	ed b6       	in	r14, 0x3d	; 61
     c5a:	fe b6       	in	r15, 0x3e	; 62
     c5c:	08 94       	sec
     c5e:	e1 1c       	adc	r14, r1
     c60:	f1 1c       	adc	r15, r1
    data [0] = start; 
     c62:	ed b7       	in	r30, 0x3d	; 61
     c64:	fe b7       	in	r31, 0x3e	; 62
     c66:	61 83       	std	Z+1, r22	; 0x01
    memcpy (&data[1], values, length);
     c68:	a7 01       	movw	r20, r14
     c6a:	4f 5f       	subi	r20, 0xFF	; 255
     c6c:	5f 4f       	sbci	r21, 0xFF	; 255
     c6e:	ca 01       	movw	r24, r20
     c70:	b9 01       	movw	r22, r18
     c72:	41 2f       	mov	r20, r17
     c74:	50 e0       	ldi	r21, 0x00	; 0
     c76:	0e 94 a7 81 	call	0x1034e	; 0x1034e <memcpy>
     c7a:	61 2f       	mov	r22, r17
     c7c:	6f 5f       	subi	r22, 0xFF	; 255
    if (isReg) {
     c7e:	00 23       	and	r16, r16
     c80:	21 f0       	breq	.+8      	; 0xc8a <_ZN4AX129writeDataEhhPhb+0x6e>
      sendPacket (id, length+1, REG_WRITE, data);
     c82:	f6 01       	movw	r30, r12
     c84:	80 81       	ld	r24, Z
     c86:	44 e0       	ldi	r20, 0x04	; 4
     c88:	03 c0       	rjmp	.+6      	; 0xc90 <_ZN4AX129writeDataEhhPhb+0x74>
    } else {
      sendPacket (id, length+1, WRITE_DATA, data);
     c8a:	f6 01       	movw	r30, r12
     c8c:	80 81       	ld	r24, Z
     c8e:	43 e0       	ldi	r20, 0x03	; 3
     c90:	97 01       	movw	r18, r14
     c92:	0e 94 42 03 	call	0x684	; 0x684 <_ZN4AX1210sendPacketEhhhPh>
    }
    int error = returnData (RETURN_ALL).error;
     c96:	c6 01       	movw	r24, r12
     c98:	62 e0       	ldi	r22, 0x02	; 2
     c9a:	0e 94 22 04 	call	0x844	; 0x844 <_ZN4AX1210returnDataEh>
     c9e:	07 2f       	mov	r16, r23
     ca0:	16 2f       	mov	r17, r22
    if (start < 23) {delayMicroseconds (5000);}       // si la operación de escritura es en la EEPROM, este delay previene el embotellamiento
     ca2:	f6 e1       	ldi	r31, 0x16	; 22
     ca4:	f9 15       	cp	r31, r9
     ca6:	20 f0       	brcs	.+8      	; 0xcb0 <_ZN4AX129writeDataEhhPhb+0x94>
     ca8:	88 e8       	ldi	r24, 0x88	; 136
     caa:	93 e1       	ldi	r25, 0x13	; 19
     cac:	0e 94 93 70 	call	0xe126	; 0xe126 <_Z17delayMicrosecondsj>
                                                   // (las operaciones en la EEPROM no suelen ser real-time)
    return error;
}
     cb0:	81 2f       	mov	r24, r17
     cb2:	90 2f       	mov	r25, r16
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	f8 94       	cli
     cb8:	be be       	out	0x3e, r11	; 62
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	ad be       	out	0x3d, r10	; 61
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	1f 91       	pop	r17
     cc4:	0f 91       	pop	r16
     cc6:	ff 90       	pop	r15
     cc8:	ef 90       	pop	r14
     cca:	df 90       	pop	r13
     ccc:	cf 90       	pop	r12
     cce:	bf 90       	pop	r11
     cd0:	af 90       	pop	r10
     cd2:	9f 90       	pop	r9
     cd4:	08 95       	ret

00000cd6 <_ZN4AX129writeInfoEhib>:
    return returninfo;
}

/** "intelligent" write data + reg write */
// seteando a "true" el parámetro adicional se transforma en un reg write
int AX12::writeInfo (byte registr, int value, bool isReg) {
     cd6:	bf 92       	push	r11
     cd8:	cf 92       	push	r12
     cda:	df 92       	push	r13
     cdc:	ef 92       	push	r14
     cde:	ff 92       	push	r15
     ce0:	0f 93       	push	r16
     ce2:	1f 93       	push	r17
     ce4:	df 93       	push	r29
     ce6:	cf 93       	push	r28
     ce8:	00 d0       	rcall	.+0      	; 0xcea <_ZN4AX129writeInfoEhib+0x14>
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	7c 01       	movw	r14, r24
     cf0:	06 2f       	mov	r16, r22
     cf2:	5a 83       	std	Y+2, r21	; 0x02
     cf4:	49 83       	std	Y+1, r20	; 0x01
     cf6:	b2 2e       	mov	r11, r18
    processValue (registr, &value);
    byte values [reglength];
    values [0] = lowByte(value);
    if (reglength > 1) {values[1] = highByte(value);}
    return writeData (registr, reglength, values, isReg);
}
     cf8:	cd b6       	in	r12, 0x3d	; 61
     cfa:	de b6       	in	r13, 0x3e	; 62
}

/** "intelligent" write data + reg write */
// seteando a "true" el parámetro adicional se transforma en un reg write
int AX12::writeInfo (byte registr, int value, bool isReg) {
    byte reglength = lengthWrite (registr);
     cfc:	86 2f       	mov	r24, r22
     cfe:	0e 94 0e 04 	call	0x81c	; 0x81c <_Z11lengthWriteh>
     d02:	18 2f       	mov	r17, r24
    if (reglength==0) {return -2;}
     d04:	88 23       	and	r24, r24
     d06:	19 f4       	brne	.+6      	; 0xd0e <_ZN4AX129writeInfoEhib+0x38>
     d08:	2e ef       	ldi	r18, 0xFE	; 254
     d0a:	3f ef       	ldi	r19, 0xFF	; 255
     d0c:	27 c0       	rjmp	.+78     	; 0xd5c <_ZN4AX129writeInfoEhib+0x86>
    processValue (registr, &value);
     d0e:	c7 01       	movw	r24, r14
     d10:	60 2f       	mov	r22, r16
     d12:	ae 01       	movw	r20, r28
     d14:	4f 5f       	subi	r20, 0xFF	; 255
     d16:	5f 4f       	sbci	r21, 0xFF	; 255
     d18:	0e 94 8c 04 	call	0x918	; 0x918 <_ZN4AX1212processValueEhPi>
    byte values [reglength];
     d1c:	8d b7       	in	r24, 0x3d	; 61
     d1e:	9e b7       	in	r25, 0x3e	; 62
     d20:	81 1b       	sub	r24, r17
     d22:	91 09       	sbc	r25, r1
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	9e bf       	out	0x3e, r25	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	8d bf       	out	0x3d, r24	; 61
     d2e:	ed b7       	in	r30, 0x3d	; 61
     d30:	fe b7       	in	r31, 0x3e	; 62
     d32:	31 96       	adiw	r30, 0x01	; 1
    values [0] = lowByte(value);
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	9a 81       	ldd	r25, Y+2	; 0x02
     d38:	ad b7       	in	r26, 0x3d	; 61
     d3a:	be b7       	in	r27, 0x3e	; 62
     d3c:	11 96       	adiw	r26, 0x01	; 1
     d3e:	8c 93       	st	X, r24
    if (reglength > 1) {values[1] = highByte(value);}
     d40:	11 30       	cpi	r17, 0x01	; 1
     d42:	21 f0       	breq	.+8      	; 0xd4c <_ZN4AX129writeInfoEhib+0x76>
     d44:	89 2f       	mov	r24, r25
     d46:	99 0f       	add	r25, r25
     d48:	99 0b       	sbc	r25, r25
     d4a:	81 83       	std	Z+1, r24	; 0x01
    return writeData (registr, reglength, values, isReg);
     d4c:	c7 01       	movw	r24, r14
     d4e:	60 2f       	mov	r22, r16
     d50:	41 2f       	mov	r20, r17
     d52:	9f 01       	movw	r18, r30
     d54:	0b 2d       	mov	r16, r11
     d56:	0e 94 0e 06 	call	0xc1c	; 0xc1c <_ZN4AX129writeDataEhhPhb>
     d5a:	9c 01       	movw	r18, r24
}
     d5c:	c9 01       	movw	r24, r18
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	f8 94       	cli
     d62:	de be       	out	0x3e, r13	; 62
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	cd be       	out	0x3d, r12	; 61
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	ff 90       	pop	r15
     d76:	ef 90       	pop	r14
     d78:	df 90       	pop	r13
     d7a:	cf 90       	pop	r12
     d7c:	bf 90       	pop	r11
     d7e:	08 95       	ret

00000d80 <_ZN6Events8get_dataEv>:

MOVDATA Events::get_data () {                                // get data & remove entry (atención: es responsabilidad de la isr no llamar esto cuando size==0)
     d80:	ac 01       	movw	r20, r24
  byte index = head;
     d82:	fb 01       	movw	r30, r22
     d84:	ec 5f       	subi	r30, 0xFC	; 252
     d86:	f5 4f       	sbci	r31, 0xF5	; 245
     d88:	20 81       	ld	r18, Z
  head = get_index (1);
     d8a:	82 2f       	mov	r24, r18
     d8c:	8f 5f       	subi	r24, 0xFF	; 255
     d8e:	8f 77       	andi	r24, 0x7F	; 127
     d90:	80 83       	st	Z, r24
  size --; 
     d92:	fb 01       	movw	r30, r22
     d94:	eb 5f       	subi	r30, 0xFB	; 251
     d96:	f5 4f       	sbci	r31, 0xF5	; 245
     d98:	80 81       	ld	r24, Z
     d9a:	81 50       	subi	r24, 0x01	; 1
     d9c:	80 83       	st	Z, r24
  return buffer [index].movdata;
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	84 e1       	ldi	r24, 0x14	; 20
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	28 9f       	mul	r18, r24
     da6:	f0 01       	movw	r30, r0
     da8:	29 9f       	mul	r18, r25
     daa:	f0 0d       	add	r31, r0
     dac:	38 9f       	mul	r19, r24
     dae:	f0 0d       	add	r31, r0
     db0:	11 24       	eor	r1, r1
     db2:	e6 0f       	add	r30, r22
     db4:	f7 1f       	adc	r31, r23
     db6:	da 01       	movw	r26, r20
     db8:	38 96       	adiw	r30, 0x08	; 8
     dba:	80 e1       	ldi	r24, 0x10	; 16
     dbc:	01 90       	ld	r0, Z+
     dbe:	0d 92       	st	X+, r0
     dc0:	81 50       	subi	r24, 0x01	; 1
     dc2:	e1 f7       	brne	.-8      	; 0xdbc <_ZN6Events8get_dataEv+0x3c>
}
     dc4:	ca 01       	movw	r24, r20
     dc6:	08 95       	ret

00000dc8 <_ZN6Events4swapEhh>:
  enable_ovf2();
  return result; 
}


void Events::swap (byte index1, byte index2) {          // forma parte del algoritmo de ordenación, intercambia de lugar 2 eventos
     dc8:	df 93       	push	r29
     dca:	cf 93       	push	r28
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	64 97       	sbiw	r28, 0x14	; 20
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	f8 94       	cli
     dd6:	de bf       	out	0x3e, r29	; 62
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	cd bf       	out	0x3d, r28	; 61
  EVENT temp =  buffer [index2];
     ddc:	50 e0       	ldi	r21, 0x00	; 0
     dde:	fa 01       	movw	r30, r20
     de0:	ee 0f       	add	r30, r30
     de2:	ff 1f       	adc	r31, r31
     de4:	ee 0f       	add	r30, r30
     de6:	ff 1f       	adc	r31, r31
     de8:	e4 0f       	add	r30, r20
     dea:	f5 1f       	adc	r31, r21
     dec:	31 96       	adiw	r30, 0x01	; 1
     dee:	ee 0f       	add	r30, r30
     df0:	ff 1f       	adc	r31, r31
     df2:	ee 0f       	add	r30, r30
     df4:	ff 1f       	adc	r31, r31
     df6:	de 01       	movw	r26, r28
     df8:	11 96       	adiw	r26, 0x01	; 1
     dfa:	e8 0f       	add	r30, r24
     dfc:	f9 1f       	adc	r31, r25
     dfe:	24 e1       	ldi	r18, 0x14	; 20
     e00:	01 90       	ld	r0, Z+
     e02:	0d 92       	st	X+, r0
     e04:	21 50       	subi	r18, 0x01	; 1
     e06:	e1 f7       	brne	.-8      	; 0xe00 <_ZN6Events4swapEhh+0x38>
  buffer [index2] = buffer [index1];
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	da 01       	movw	r26, r20
     e0c:	aa 0f       	add	r26, r26
     e0e:	bb 1f       	adc	r27, r27
     e10:	aa 0f       	add	r26, r26
     e12:	bb 1f       	adc	r27, r27
     e14:	a4 0f       	add	r26, r20
     e16:	b5 1f       	adc	r27, r21
     e18:	11 96       	adiw	r26, 0x01	; 1
     e1a:	aa 0f       	add	r26, r26
     e1c:	bb 1f       	adc	r27, r27
     e1e:	aa 0f       	add	r26, r26
     e20:	bb 1f       	adc	r27, r27
     e22:	fb 01       	movw	r30, r22
     e24:	ee 0f       	add	r30, r30
     e26:	ff 1f       	adc	r31, r31
     e28:	ee 0f       	add	r30, r30
     e2a:	ff 1f       	adc	r31, r31
     e2c:	e6 0f       	add	r30, r22
     e2e:	f7 1f       	adc	r31, r23
     e30:	31 96       	adiw	r30, 0x01	; 1
     e32:	ee 0f       	add	r30, r30
     e34:	ff 1f       	adc	r31, r31
     e36:	ee 0f       	add	r30, r30
     e38:	ff 1f       	adc	r31, r31
     e3a:	a8 0f       	add	r26, r24
     e3c:	b9 1f       	adc	r27, r25
     e3e:	e8 0f       	add	r30, r24
     e40:	f9 1f       	adc	r31, r25
     e42:	24 e1       	ldi	r18, 0x14	; 20
     e44:	01 90       	ld	r0, Z+
     e46:	0d 92       	st	X+, r0
     e48:	21 50       	subi	r18, 0x01	; 1
     e4a:	e1 f7       	brne	.-8      	; 0xe44 <_ZN6Events4swapEhh+0x7c>
  buffer [index1] = temp;
     e4c:	fb 01       	movw	r30, r22
     e4e:	ee 0f       	add	r30, r30
     e50:	ff 1f       	adc	r31, r31
     e52:	ee 0f       	add	r30, r30
     e54:	ff 1f       	adc	r31, r31
     e56:	e6 0f       	add	r30, r22
     e58:	f7 1f       	adc	r31, r23
     e5a:	31 96       	adiw	r30, 0x01	; 1
     e5c:	ee 0f       	add	r30, r30
     e5e:	ff 1f       	adc	r31, r31
     e60:	ee 0f       	add	r30, r30
     e62:	ff 1f       	adc	r31, r31
     e64:	e8 0f       	add	r30, r24
     e66:	f9 1f       	adc	r31, r25
     e68:	de 01       	movw	r26, r28
     e6a:	11 96       	adiw	r26, 0x01	; 1
     e6c:	84 e1       	ldi	r24, 0x14	; 20
     e6e:	0d 90       	ld	r0, X+
     e70:	01 92       	st	Z+, r0
     e72:	81 50       	subi	r24, 0x01	; 1
     e74:	e1 f7       	brne	.-8      	; 0xe6e <_ZN6Events4swapEhh+0xa6>
}
     e76:	64 96       	adiw	r28, 0x14	; 20
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	f8 94       	cli
     e7c:	de bf       	out	0x3e, r29	; 62
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	cd bf       	out	0x3d, r28	; 61
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	08 95       	ret

00000e88 <_ZN6Events3addE7MOVDATAi>:
  if (count > 0) {count = motor_update();}
  timer ++;  
  return count;                        // retorna la cantidad de motores updateados
}

bool Events::add (MOVDATA movdata, int rel_time) {     // add entry & sort deque
     e88:	6f 92       	push	r6
     e8a:	7f 92       	push	r7
     e8c:	8f 92       	push	r8
     e8e:	9f 92       	push	r9
     e90:	af 92       	push	r10
     e92:	bf 92       	push	r11
     e94:	cf 92       	push	r12
     e96:	df 92       	push	r13
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
     ea8:	60 97       	sbiw	r28, 0x10	; 16
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	de bf       	out	0x3e, r29	; 62
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	cd bf       	out	0x3d, r28	; 61
     eb4:	3c 01       	movw	r6, r24
     eb6:	89 82       	std	Y+1, r8	; 0x01
     eb8:	9a 82       	std	Y+2, r9	; 0x02
     eba:	ab 82       	std	Y+3, r10	; 0x03
     ebc:	bc 82       	std	Y+4, r11	; 0x04
     ebe:	cd 82       	std	Y+5, r12	; 0x05
     ec0:	de 82       	std	Y+6, r13	; 0x06
     ec2:	ef 82       	std	Y+7, r14	; 0x07
     ec4:	f8 86       	std	Y+8, r15	; 0x08
     ec6:	09 87       	std	Y+9, r16	; 0x09
     ec8:	1a 87       	std	Y+10, r17	; 0x0a
     eca:	2b 87       	std	Y+11, r18	; 0x0b
     ecc:	3c 87       	std	Y+12, r19	; 0x0c
     ece:	4d 87       	std	Y+13, r20	; 0x0d
     ed0:	5e 87       	std	Y+14, r21	; 0x0e
     ed2:	6f 87       	std	Y+15, r22	; 0x0f
     ed4:	78 8b       	std	Y+16, r23	; 0x10
  if (size < MAX_SIZE) {
     ed6:	25 e0       	ldi	r18, 0x05	; 5
     ed8:	3a e0       	ldi	r19, 0x0A	; 10
     eda:	62 0e       	add	r6, r18
     edc:	73 1e       	adc	r7, r19
     ede:	f3 01       	movw	r30, r6
     ee0:	90 81       	ld	r25, Z
     ee2:	2b ef       	ldi	r18, 0xFB	; 251
     ee4:	35 ef       	ldi	r19, 0xF5	; 245
     ee6:	62 0e       	add	r6, r18
     ee8:	73 1e       	adc	r7, r19
     eea:	97 ff       	sbrs	r25, 7
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <_ZN6Events3addE7MOVDATAi+0x6a>
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	a0 c0       	rjmp	.+320    	; 0x1032 <_ZN6Events3addE7MOVDATAi+0x1aa>
void delayMicroseconds (unsigned int us);

extern volatile byte timer0_int_flag;                // permite registrar y desregistrar tareas en la interrupción del timer0

void inline enable_ovf2() {TIMSK2 |= _BV(TOIE2);}                 // habilita el Overflow Interrupt (timer2)
void inline disable_ovf2() {TIMSK2 &= ~_BV(TOIE2);}               // deshabilita el Overflow Interrupt (timer2)
     ef2:	80 91 70 00 	lds	r24, 0x0070
     ef6:	8e 7f       	andi	r24, 0xFE	; 254
     ef8:	80 93 70 00 	sts	0x0070, r24
  buffer [index2] = buffer [index1];
  buffer [index1] = temp;
}

byte Events::get_index (byte position) {               // devuelve el índice absoluto en el deque
  return (head + position) % MAX_SIZE;
     efc:	e4 e0       	ldi	r30, 0x04	; 4
     efe:	fa e0       	ldi	r31, 0x0A	; 10
     f00:	6e 0e       	add	r6, r30
     f02:	7f 1e       	adc	r7, r31
     f04:	f3 01       	movw	r30, r6
     f06:	00 81       	ld	r16, Z
     f08:	2c ef       	ldi	r18, 0xFC	; 252
     f0a:	35 ef       	ldi	r19, 0xF5	; 245
     f0c:	62 0e       	add	r6, r18
     f0e:	73 1e       	adc	r7, r19
     f10:	09 0f       	add	r16, r25
     f12:	0f 77       	andi	r16, 0x7F	; 127

bool Events::add (MOVDATA movdata, int rel_time) {     // add entry & sort deque
  if (size < MAX_SIZE) {
    disable_ovf2();
    byte index = get_index (size);
    buffer [index].timestamp = timer + rel_time;
     f14:	20 2f       	mov	r18, r16
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	f3 01       	movw	r30, r6
     f1a:	40 81       	ld	r20, Z
     f1c:	51 81       	ldd	r21, Z+1	; 0x01
     f1e:	62 81       	ldd	r22, Z+2	; 0x02
     f20:	73 81       	ldd	r23, Z+3	; 0x03
     f22:	f9 01       	movw	r30, r18
     f24:	ee 0f       	add	r30, r30
     f26:	ff 1f       	adc	r31, r31
     f28:	ee 0f       	add	r30, r30
     f2a:	ff 1f       	adc	r31, r31
     f2c:	e2 0f       	add	r30, r18
     f2e:	f3 1f       	adc	r31, r19
     f30:	31 96       	adiw	r30, 0x01	; 1
     f32:	ee 0f       	add	r30, r30
     f34:	ff 1f       	adc	r31, r31
     f36:	ee 0f       	add	r30, r30
     f38:	ff 1f       	adc	r31, r31
     f3a:	e6 0d       	add	r30, r6
     f3c:	f7 1d       	adc	r31, r7
     f3e:	89 a1       	ldd	r24, Y+33	; 0x21
     f40:	9a a1       	ldd	r25, Y+34	; 0x22
     f42:	aa 27       	eor	r26, r26
     f44:	97 fd       	sbrc	r25, 7
     f46:	a0 95       	com	r26
     f48:	ba 2f       	mov	r27, r26
     f4a:	84 0f       	add	r24, r20
     f4c:	95 1f       	adc	r25, r21
     f4e:	a6 1f       	adc	r26, r22
     f50:	b7 1f       	adc	r27, r23
     f52:	80 83       	st	Z, r24
     f54:	91 83       	std	Z+1, r25	; 0x01
     f56:	a2 83       	std	Z+2, r26	; 0x02
     f58:	b3 83       	std	Z+3, r27	; 0x03
    buffer [index].movdata = movdata;
     f5a:	84 e1       	ldi	r24, 0x14	; 20
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	28 9f       	mul	r18, r24
     f60:	f0 01       	movw	r30, r0
     f62:	29 9f       	mul	r18, r25
     f64:	f0 0d       	add	r31, r0
     f66:	38 9f       	mul	r19, r24
     f68:	f0 0d       	add	r31, r0
     f6a:	11 24       	eor	r1, r1
     f6c:	e6 0d       	add	r30, r6
     f6e:	f7 1d       	adc	r31, r7
     f70:	38 96       	adiw	r30, 0x08	; 8
     f72:	de 01       	movw	r26, r28
     f74:	11 96       	adiw	r26, 0x01	; 1
     f76:	80 e1       	ldi	r24, 0x10	; 16
     f78:	0d 90       	ld	r0, X+
     f7a:	01 92       	st	Z+, r0
     f7c:	81 50       	subi	r24, 0x01	; 1
     f7e:	e1 f7       	brne	.-8      	; 0xf78 <_ZN6Events3addE7MOVDATAi+0xf0>
    // sort
    if (size > 0) {
     f80:	25 e0       	ldi	r18, 0x05	; 5
     f82:	3a e0       	ldi	r19, 0x0A	; 10
     f84:	62 0e       	add	r6, r18
     f86:	73 1e       	adc	r7, r19
     f88:	f3 01       	movw	r30, r6
     f8a:	f0 80       	ld	r15, Z
     f8c:	2b ef       	ldi	r18, 0xFB	; 251
     f8e:	35 ef       	ldi	r19, 0xF5	; 245
     f90:	62 0e       	add	r6, r18
     f92:	73 1e       	adc	r7, r19
     f94:	ff 20       	and	r15, r15
     f96:	09 f4       	brne	.+2      	; 0xf9a <_ZN6Events3addE7MOVDATAi+0x112>
     f98:	40 c0       	rjmp	.+128    	; 0x101a <_ZN6Events3addE7MOVDATAi+0x192>
  buffer [index2] = buffer [index1];
  buffer [index1] = temp;
}

byte Events::get_index (byte position) {               // devuelve el índice absoluto en el deque
  return (head + position) % MAX_SIZE;
     f9a:	54 e0       	ldi	r21, 0x04	; 4
     f9c:	c5 2e       	mov	r12, r21
     f9e:	5a e0       	ldi	r21, 0x0A	; 10
     fa0:	d5 2e       	mov	r13, r21
     fa2:	c6 0c       	add	r12, r6
     fa4:	d7 1c       	adc	r13, r7
    buffer [index].timestamp = timer + rel_time;
    buffer [index].movdata = movdata;
    // sort
    if (size > 0) {
      for (byte i=size; i>0; i--) {
        byte index1 = get_index (i-1);
     fa6:	fa 94       	dec	r15
  buffer [index2] = buffer [index1];
  buffer [index1] = temp;
}

byte Events::get_index (byte position) {               // devuelve el índice absoluto en el deque
  return (head + position) % MAX_SIZE;
     fa8:	f6 01       	movw	r30, r12
     faa:	10 81       	ld	r17, Z
     fac:	1f 0d       	add	r17, r15
     fae:	1f 77       	andi	r17, 0x7F	; 127
    buffer [index].movdata = movdata;
    // sort
    if (size > 0) {
      for (byte i=size; i>0; i--) {
        byte index1 = get_index (i-1);
        if (buffer[index].timestamp < buffer[index1].timestamp) {
     fb0:	80 2f       	mov	r24, r16
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	dc 01       	movw	r26, r24
     fb6:	aa 0f       	add	r26, r26
     fb8:	bb 1f       	adc	r27, r27
     fba:	aa 0f       	add	r26, r26
     fbc:	bb 1f       	adc	r27, r27
     fbe:	a8 0f       	add	r26, r24
     fc0:	b9 1f       	adc	r27, r25
     fc2:	11 96       	adiw	r26, 0x01	; 1
     fc4:	aa 0f       	add	r26, r26
     fc6:	bb 1f       	adc	r27, r27
     fc8:	aa 0f       	add	r26, r26
     fca:	bb 1f       	adc	r27, r27
     fcc:	a6 0d       	add	r26, r6
     fce:	b7 1d       	adc	r27, r7
     fd0:	81 2f       	mov	r24, r17
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	fc 01       	movw	r30, r24
     fd6:	ee 0f       	add	r30, r30
     fd8:	ff 1f       	adc	r31, r31
     fda:	ee 0f       	add	r30, r30
     fdc:	ff 1f       	adc	r31, r31
     fde:	e8 0f       	add	r30, r24
     fe0:	f9 1f       	adc	r31, r25
     fe2:	31 96       	adiw	r30, 0x01	; 1
     fe4:	ee 0f       	add	r30, r30
     fe6:	ff 1f       	adc	r31, r31
     fe8:	ee 0f       	add	r30, r30
     fea:	ff 1f       	adc	r31, r31
     fec:	e6 0d       	add	r30, r6
     fee:	f7 1d       	adc	r31, r7
     ff0:	2d 91       	ld	r18, X+
     ff2:	3d 91       	ld	r19, X+
     ff4:	4d 91       	ld	r20, X+
     ff6:	5c 91       	ld	r21, X
     ff8:	80 81       	ld	r24, Z
     ffa:	91 81       	ldd	r25, Z+1	; 0x01
     ffc:	a2 81       	ldd	r26, Z+2	; 0x02
     ffe:	b3 81       	ldd	r27, Z+3	; 0x03
    1000:	28 17       	cp	r18, r24
    1002:	39 07       	cpc	r19, r25
    1004:	4a 07       	cpc	r20, r26
    1006:	5b 07       	cpc	r21, r27
    1008:	40 f4       	brcc	.+16     	; 0x101a <_ZN6Events3addE7MOVDATAi+0x192>
          swap (index, index1);
    100a:	c3 01       	movw	r24, r6
    100c:	60 2f       	mov	r22, r16
    100e:	41 2f       	mov	r20, r17
    1010:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN6Events4swapEhh>
    1014:	01 2f       	mov	r16, r17
    byte index = get_index (size);
    buffer [index].timestamp = timer + rel_time;
    buffer [index].movdata = movdata;
    // sort
    if (size > 0) {
      for (byte i=size; i>0; i--) {
    1016:	ff 20       	and	r15, r15
    1018:	31 f6       	brne	.-116    	; 0xfa6 <_ZN6Events3addE7MOVDATAi+0x11e>
          swap (index, index1);
          index = index1;
        } else {break;}    
      } 
    }   
    size ++;
    101a:	f3 01       	movw	r30, r6
    101c:	eb 5f       	subi	r30, 0xFB	; 251
    101e:	f5 4f       	sbci	r31, 0xF5	; 245
    1020:	80 81       	ld	r24, Z
    1022:	8f 5f       	subi	r24, 0xFF	; 255
    1024:	80 83       	st	Z, r24
void delay (unsigned long);
void delayMicroseconds (unsigned int us);

extern volatile byte timer0_int_flag;                // permite registrar y desregistrar tareas en la interrupción del timer0

void inline enable_ovf2() {TIMSK2 |= _BV(TOIE2);}                 // habilita el Overflow Interrupt (timer2)
    1026:	80 91 70 00 	lds	r24, 0x0070
    102a:	81 60       	ori	r24, 0x01	; 1
    102c:	80 93 70 00 	sts	0x0070, r24
    1030:	81 e0       	ldi	r24, 0x01	; 1
    enable_ovf2();
    return true;  
  } else {
    return false;
  }
}  
    1032:	60 96       	adiw	r28, 0x10	; 16
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	de bf       	out	0x3e, r29	; 62
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	cd bf       	out	0x3d, r28	; 61
    103e:	cf 91       	pop	r28
    1040:	df 91       	pop	r29
    1042:	1f 91       	pop	r17
    1044:	0f 91       	pop	r16
    1046:	ff 90       	pop	r15
    1048:	ef 90       	pop	r14
    104a:	df 90       	pop	r13
    104c:	cf 90       	pop	r12
    104e:	bf 90       	pop	r11
    1050:	af 90       	pop	r10
    1052:	9f 90       	pop	r9
    1054:	8f 90       	pop	r8
    1056:	7f 90       	pop	r7
    1058:	6f 90       	pop	r6
    105a:	08 95       	ret

0000105c <_ZN6Events12search_indexEmh>:

byte Events::get_index (byte position) {               // devuelve el índice absoluto en el deque
  return (head + position) % MAX_SIZE;
}
 
int Events::search_index (unsigned long timestamp, byte pata) {      // usada por search 
    105c:	8f 92       	push	r8
    105e:	9f 92       	push	r9
    1060:	af 92       	push	r10
    1062:	bf 92       	push	r11
    1064:	cf 92       	push	r12
    1066:	df 92       	push	r13
    1068:	ef 92       	push	r14
    106a:	ff 92       	push	r15
    106c:	0f 93       	push	r16
    106e:	1f 93       	push	r17
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	ec 01       	movw	r28, r24
    1076:	6a 01       	movw	r12, r20
    1078:	7b 01       	movw	r14, r22
  int match = -1; 
  for (byte i=0; i<size; i++) {
    107a:	cb 5f       	subi	r28, 0xFB	; 251
    107c:	d5 4f       	sbci	r29, 0xF5	; 245
    107e:	08 81       	ld	r16, Y
    1080:	c5 50       	subi	r28, 0x05	; 5
    1082:	da 40       	sbci	r29, 0x0A	; 10
    1084:	61 e0       	ldi	r22, 0x01	; 1
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	02 c0       	rjmp	.+4      	; 0x108e <_ZN6Events12search_indexEmh+0x32>
    108a:	66 0f       	add	r22, r22
    108c:	77 1f       	adc	r23, r23
    108e:	2a 95       	dec	r18
    1090:	e2 f7       	brpl	.-8      	; 0x108a <_ZN6Events12search_indexEmh+0x2e>
    1092:	4f ef       	ldi	r20, 0xFF	; 255
    1094:	5f ef       	ldi	r21, 0xFF	; 255
    1096:	10 e0       	ldi	r17, 0x00	; 0
    byte index = get_index (i);
    if (buffer[index].timestamp > timestamp) {break;}
    1098:	34 e0       	ldi	r19, 0x04	; 4
    109a:	a3 2e       	mov	r10, r19
    109c:	3a e0       	ldi	r19, 0x0A	; 10
    109e:	b3 2e       	mov	r11, r19
    10a0:	ac 0e       	add	r10, r28
    10a2:	bd 1e       	adc	r11, r29
    if ((buffer[index].movdata.patas>>pata)&1) {match = index;}
    10a4:	24 e1       	ldi	r18, 0x14	; 20
    10a6:	82 2e       	mov	r8, r18
    10a8:	91 2c       	mov	r9, r1
    10aa:	2f c0       	rjmp	.+94     	; 0x110a <_ZN6Events12search_indexEmh+0xae>
 
int Events::search_index (unsigned long timestamp, byte pata) {      // usada por search 
  int match = -1; 
  for (byte i=0; i<size; i++) {
    byte index = get_index (i);
    if (buffer[index].timestamp > timestamp) {break;}
    10ac:	f5 01       	movw	r30, r10
    10ae:	80 81       	ld	r24, Z
    10b0:	81 0f       	add	r24, r17
    10b2:	8f 77       	andi	r24, 0x7F	; 127
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	f9 01       	movw	r30, r18
    10ba:	ee 0f       	add	r30, r30
    10bc:	ff 1f       	adc	r31, r31
    10be:	ee 0f       	add	r30, r30
    10c0:	ff 1f       	adc	r31, r31
    10c2:	e2 0f       	add	r30, r18
    10c4:	f3 1f       	adc	r31, r19
    10c6:	31 96       	adiw	r30, 0x01	; 1
    10c8:	ee 0f       	add	r30, r30
    10ca:	ff 1f       	adc	r31, r31
    10cc:	ee 0f       	add	r30, r30
    10ce:	ff 1f       	adc	r31, r31
    10d0:	ec 0f       	add	r30, r28
    10d2:	fd 1f       	adc	r31, r29
    10d4:	80 81       	ld	r24, Z
    10d6:	91 81       	ldd	r25, Z+1	; 0x01
    10d8:	a2 81       	ldd	r26, Z+2	; 0x02
    10da:	b3 81       	ldd	r27, Z+3	; 0x03
    10dc:	c8 16       	cp	r12, r24
    10de:	d9 06       	cpc	r13, r25
    10e0:	ea 06       	cpc	r14, r26
    10e2:	fb 06       	cpc	r15, r27
    10e4:	a0 f0       	brcs	.+40     	; 0x110e <_ZN6Events12search_indexEmh+0xb2>
    if ((buffer[index].movdata.patas>>pata)&1) {match = index;}
    10e6:	28 9d       	mul	r18, r8
    10e8:	f0 01       	movw	r30, r0
    10ea:	29 9d       	mul	r18, r9
    10ec:	f0 0d       	add	r31, r0
    10ee:	38 9d       	mul	r19, r8
    10f0:	f0 0d       	add	r31, r0
    10f2:	11 24       	eor	r1, r1
    10f4:	ec 0f       	add	r30, r28
    10f6:	fd 1f       	adc	r31, r29
    10f8:	80 85       	ldd	r24, Z+8	; 0x08
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	86 23       	and	r24, r22
    10fe:	97 23       	and	r25, r23
    1100:	89 2b       	or	r24, r25
    1102:	09 f4       	brne	.+2      	; 0x1106 <_ZN6Events12search_indexEmh+0xaa>
    1104:	9a 01       	movw	r18, r20
  return (head + position) % MAX_SIZE;
}
 
int Events::search_index (unsigned long timestamp, byte pata) {      // usada por search 
  int match = -1; 
  for (byte i=0; i<size; i++) {
    1106:	1f 5f       	subi	r17, 0xFF	; 255
    1108:	a9 01       	movw	r20, r18
    110a:	10 17       	cp	r17, r16
    110c:	78 f2       	brcs	.-98     	; 0x10ac <_ZN6Events12search_indexEmh+0x50>
    byte index = get_index (i);
    if (buffer[index].timestamp > timestamp) {break;}
    if ((buffer[index].movdata.patas>>pata)&1) {match = index;}
  }
  return match;
    110e:	ca 01       	movw	r24, r20
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	1f 91       	pop	r17
    1116:	0f 91       	pop	r16
    1118:	ff 90       	pop	r15
    111a:	ef 90       	pop	r14
    111c:	df 90       	pop	r13
    111e:	cf 90       	pop	r12
    1120:	bf 90       	pop	r11
    1122:	af 90       	pop	r10
    1124:	9f 90       	pop	r9
    1126:	8f 90       	pop	r8
    1128:	08 95       	ret

0000112a <_GLOBAL__I_eventos>:
#include "wiring.h"

Events eventos;          // preinstanciado

Events::Events () {
	head = 0;
    112a:	10 92 e3 0f 	sts	0x0FE3, r1
	size = 0;
    112e:	10 92 e4 0f 	sts	0x0FE4, r1
	timer = 0;
    1132:	10 92 df 05 	sts	0x05DF, r1
    1136:	10 92 e0 05 	sts	0x05E0, r1
    113a:	10 92 e1 05 	sts	0x05E1, r1
    113e:	10 92 e2 05 	sts	0x05E2, r1
    byte index = get_index (i);
    if (buffer[index].timestamp > timestamp) {break;}
    if ((buffer[index].movdata.patas>>pata)&1) {match = index;}
  }
  return match;
    1142:	08 95       	ret

00001144 <_ZN6Events6searchEhi>:
  head = get_index (1);
  size --; 
  return buffer [index].movdata;
}

COORD3D Events::search (byte pata, int rel_time) {       // estima la posición futura una pata, en base a los eventos agendados
    1144:	3f 92       	push	r3
    1146:	4f 92       	push	r4
    1148:	5f 92       	push	r5
    114a:	6f 92       	push	r6
    114c:	7f 92       	push	r7
    114e:	8f 92       	push	r8
    1150:	9f 92       	push	r9
    1152:	af 92       	push	r10
    1154:	bf 92       	push	r11
    1156:	cf 92       	push	r12
    1158:	df 92       	push	r13
    115a:	ef 92       	push	r14
    115c:	ff 92       	push	r15
    115e:	0f 93       	push	r16
    1160:	1f 93       	push	r17
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	78 2e       	mov	r7, r24
    1168:	69 2e       	mov	r6, r25
    116a:	4b 01       	movw	r8, r22
    116c:	34 2e       	mov	r3, r20
    116e:	e9 01       	movw	r28, r18
void inline disable_ovf2() {TIMSK2 &= ~_BV(TOIE2);}               // deshabilita el Overflow Interrupt (timer2)
    1170:	80 91 70 00 	lds	r24, 0x0070
    1174:	8e 7f       	andi	r24, 0xFE	; 254
    1176:	80 93 70 00 	sts	0x0070, r24
  disable_ovf2();
  COORD3D result = {0, 0, 0};
    117a:	27 2d       	mov	r18, r7
    117c:	39 2f       	mov	r19, r25
    117e:	c9 01       	movw	r24, r18
    1180:	dc 01       	movw	r26, r24
    1182:	eb e0       	ldi	r30, 0x0B	; 11
    1184:	f4 e0       	ldi	r31, 0x04	; 4
    1186:	8c e0       	ldi	r24, 0x0C	; 12
    1188:	01 90       	ld	r0, Z+
    118a:	0d 92       	st	X+, r0
    118c:	81 50       	subi	r24, 0x01	; 1
    118e:	e1 f7       	brne	.-8      	; 0x1188 <_ZN6Events6searchEhi+0x44>
  unsigned long timestamp = timer + rel_time; 
    1190:	f4 01       	movw	r30, r8
    1192:	80 81       	ld	r24, Z
    1194:	91 81       	ldd	r25, Z+1	; 0x01
    1196:	a2 81       	ldd	r26, Z+2	; 0x02
    1198:	b3 81       	ldd	r27, Z+3	; 0x03
    119a:	ae 01       	movw	r20, r28
    119c:	66 27       	eor	r22, r22
    119e:	57 fd       	sbrc	r21, 7
    11a0:	60 95       	com	r22
    11a2:	76 2f       	mov	r23, r22
    11a4:	48 0f       	add	r20, r24
    11a6:	59 1f       	adc	r21, r25
    11a8:	6a 1f       	adc	r22, r26
    11aa:	7b 1f       	adc	r23, r27
  int match;
  do {
    match = search_index (timestamp, pata);
    if (match != -1) {
      sumasigna (&result, buffer[match].movdata.coord);
    11ac:	e4 e1       	ldi	r30, 0x14	; 20
    11ae:	4e 2e       	mov	r4, r30
    11b0:	51 2c       	mov	r5, r1
  disable_ovf2();
  COORD3D result = {0, 0, 0};
  unsigned long timestamp = timer + rel_time; 
  int match;
  do {
    match = search_index (timestamp, pata);
    11b2:	c4 01       	movw	r24, r8
    11b4:	23 2d       	mov	r18, r3
    11b6:	0e 94 2e 08 	call	0x105c	; 0x105c <_ZN6Events12search_indexEmh>
    11ba:	ec 01       	movw	r28, r24
    if (match != -1) {
    11bc:	ff ef       	ldi	r31, 0xFF	; 255
    11be:	8f 3f       	cpi	r24, 0xFF	; 255
    11c0:	9f 07       	cpc	r25, r31
    11c2:	c1 f1       	breq	.+112    	; 0x1234 <_ZN6Events6searchEhi+0xf0>
      sumasigna (&result, buffer[match].movdata.coord);
    11c4:	84 9d       	mul	r24, r4
    11c6:	50 01       	movw	r10, r0
    11c8:	85 9d       	mul	r24, r5
    11ca:	b0 0c       	add	r11, r0
    11cc:	94 9d       	mul	r25, r4
    11ce:	b0 0c       	add	r11, r0
    11d0:	11 24       	eor	r1, r1
    11d2:	a8 0c       	add	r10, r8
    11d4:	b9 1c       	adc	r11, r9
    11d6:	f5 01       	movw	r30, r10
    11d8:	39 96       	adiw	r30, 0x09	; 9
    11da:	87 2d       	mov	r24, r7
    11dc:	96 2d       	mov	r25, r6
    11de:	d5 01       	movw	r26, r10
    11e0:	19 96       	adiw	r26, 0x09	; 9
    11e2:	cc 90       	ld	r12, X
    11e4:	d1 80       	ldd	r13, Z+1	; 0x01
    11e6:	e2 80       	ldd	r14, Z+2	; 0x02
    11e8:	f3 80       	ldd	r15, Z+3	; 0x03
    11ea:	04 81       	ldd	r16, Z+4	; 0x04
    11ec:	15 81       	ldd	r17, Z+5	; 0x05
    11ee:	26 81       	ldd	r18, Z+6	; 0x06
    11f0:	37 81       	ldd	r19, Z+7	; 0x07
    11f2:	40 85       	ldd	r20, Z+8	; 0x08
    11f4:	51 85       	ldd	r21, Z+9	; 0x09
    11f6:	62 85       	ldd	r22, Z+10	; 0x0a
    11f8:	73 85       	ldd	r23, Z+11	; 0x0b
    11fa:	0e 94 c6 3e 	call	0x7d8c	; 0x7d8c <_Z9sumasignaP7COORD3DS_>
      timestamp = buffer[match].timestamp-1;
    11fe:	fe 01       	movw	r30, r28
    1200:	ee 0f       	add	r30, r30
    1202:	ff 1f       	adc	r31, r31
    1204:	ee 0f       	add	r30, r30
    1206:	ff 1f       	adc	r31, r31
    1208:	ec 0f       	add	r30, r28
    120a:	fd 1f       	adc	r31, r29
    120c:	31 96       	adiw	r30, 0x01	; 1
    120e:	ee 0f       	add	r30, r30
    1210:	ff 1f       	adc	r31, r31
    1212:	ee 0f       	add	r30, r30
    1214:	ff 1f       	adc	r31, r31
    1216:	e8 0d       	add	r30, r8
    1218:	f9 1d       	adc	r31, r9
    121a:	40 81       	ld	r20, Z
    121c:	51 81       	ldd	r21, Z+1	; 0x01
    121e:	62 81       	ldd	r22, Z+2	; 0x02
    1220:	73 81       	ldd	r23, Z+3	; 0x03
COORD3D Events::search (byte pata, int rel_time) {       // estima la posición futura una pata, en base a los eventos agendados
  disable_ovf2();
  COORD3D result = {0, 0, 0};
  unsigned long timestamp = timer + rel_time; 
  int match;
  do {
    1222:	f5 01       	movw	r30, r10
    1224:	87 89       	ldd	r24, Z+23	; 0x17
    1226:	88 23       	and	r24, r24
    1228:	11 f5       	brne	.+68     	; 0x126e <_ZN6Events6searchEhi+0x12a>
    match = search_index (timestamp, pata);
    if (match != -1) {
      sumasigna (&result, buffer[match].movdata.coord);
      timestamp = buffer[match].timestamp-1;
    122a:	41 50       	subi	r20, 0x01	; 1
    122c:	50 40       	sbci	r21, 0x00	; 0
    122e:	60 40       	sbci	r22, 0x00	; 0
    1230:	70 40       	sbci	r23, 0x00	; 0
    1232:	bf cf       	rjmp	.-130    	; 0x11b2 <_ZN6Events6searchEhi+0x6e>
    } else {break;}
  } while (!buffer[match].movdata.absolute);
  if (match == -1) {
    sumasigna (&result, pos_des[pata]);
    1234:	83 2d       	mov	r24, r3
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	fc 01       	movw	r30, r24
    123a:	ee 0f       	add	r30, r30
    123c:	ff 1f       	adc	r31, r31
    123e:	e8 0f       	add	r30, r24
    1240:	f9 1f       	adc	r31, r25
    1242:	ee 0f       	add	r30, r30
    1244:	ff 1f       	adc	r31, r31
    1246:	ee 0f       	add	r30, r30
    1248:	ff 1f       	adc	r31, r31
    124a:	ec 5a       	subi	r30, 0xAC	; 172
    124c:	fd 4e       	sbci	r31, 0xED	; 237
    124e:	87 2d       	mov	r24, r7
    1250:	96 2d       	mov	r25, r6
    1252:	c0 80       	ld	r12, Z
    1254:	d1 80       	ldd	r13, Z+1	; 0x01
    1256:	e2 80       	ldd	r14, Z+2	; 0x02
    1258:	f3 80       	ldd	r15, Z+3	; 0x03
    125a:	04 81       	ldd	r16, Z+4	; 0x04
    125c:	15 81       	ldd	r17, Z+5	; 0x05
    125e:	26 81       	ldd	r18, Z+6	; 0x06
    1260:	37 81       	ldd	r19, Z+7	; 0x07
    1262:	40 85       	ldd	r20, Z+8	; 0x08
    1264:	51 85       	ldd	r21, Z+9	; 0x09
    1266:	62 85       	ldd	r22, Z+10	; 0x0a
    1268:	73 85       	ldd	r23, Z+11	; 0x0b
    126a:	0e 94 c6 3e 	call	0x7d8c	; 0x7d8c <_Z9sumasignaP7COORD3DS_>
void delay (unsigned long);
void delayMicroseconds (unsigned int us);

extern volatile byte timer0_int_flag;                // permite registrar y desregistrar tareas en la interrupción del timer0

void inline enable_ovf2() {TIMSK2 |= _BV(TOIE2);}                 // habilita el Overflow Interrupt (timer2)
    126e:	80 91 70 00 	lds	r24, 0x0070
    1272:	81 60       	ori	r24, 0x01	; 1
    1274:	80 93 70 00 	sts	0x0070, r24
  }
  enable_ovf2();
  return result; 
}
    1278:	87 2d       	mov	r24, r7
    127a:	96 2d       	mov	r25, r6
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	1f 91       	pop	r17
    1282:	0f 91       	pop	r16
    1284:	ff 90       	pop	r15
    1286:	ef 90       	pop	r14
    1288:	df 90       	pop	r13
    128a:	cf 90       	pop	r12
    128c:	bf 90       	pop	r11
    128e:	af 90       	pop	r10
    1290:	9f 90       	pop	r9
    1292:	8f 90       	pop	r8
    1294:	7f 90       	pop	r7
    1296:	6f 90       	pop	r6
    1298:	5f 90       	pop	r5
    129a:	4f 90       	pop	r4
    129c:	3f 90       	pop	r3
    129e:	08 95       	ret

000012a0 <_ZN6Events7processEv>:
	head = 0;
	size = 0;
	timer = 0;
}

byte Events::process () {                               // esta rutina es llamada desde la ISR
    12a0:	8f 92       	push	r8
    12a2:	9f 92       	push	r9
    12a4:	af 92       	push	r10
    12a6:	bf 92       	push	r11
    12a8:	cf 92       	push	r12
    12aa:	df 92       	push	r13
    12ac:	ff 92       	push	r15
    12ae:	0f 93       	push	r16
    12b0:	1f 93       	push	r17
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	60 97       	sbiw	r28, 0x10	; 16
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	f8 94       	cli
    12c0:	de bf       	out	0x3e, r29	; 62
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	cd bf       	out	0x3d, r28	; 61
    12c6:	8c 01       	movw	r16, r24
    12c8:	ff 24       	eor	r15, r15
    return false;
  }
}  

unsigned long Events::get_time () {                           // get current timestamp 
  if (size > 0) {
    12ca:	95 e0       	ldi	r25, 0x05	; 5
    12cc:	a9 2e       	mov	r10, r25
    12ce:	9a e0       	ldi	r25, 0x0A	; 10
    12d0:	b9 2e       	mov	r11, r25
    12d2:	a0 0e       	add	r10, r16
    12d4:	b1 1e       	adc	r11, r17
    return buffer [head].timestamp;
    12d6:	84 e0       	ldi	r24, 0x04	; 4
    12d8:	c8 2e       	mov	r12, r24
    12da:	8a e0       	ldi	r24, 0x0A	; 10
    12dc:	d8 2e       	mov	r13, r24
    12de:	c0 0e       	add	r12, r16
    12e0:	d1 1e       	adc	r13, r17
}

byte Events::process () {                               // esta rutina es llamada desde la ISR
  byte count = 0;
  while (get_time() <= timer) {
    MOVDATA m = get_data ();                           // cuando hace el get_data(), automáticamente se borra el evento
    12e2:	4e 01       	movw	r8, r28
    12e4:	08 94       	sec
    12e6:	81 1c       	adc	r8, r1
    12e8:	91 1c       	adc	r9, r1
    12ea:	08 c0       	rjmp	.+16     	; 0x12fc <_ZN6Events7processEv+0x5c>
    12ec:	c4 01       	movw	r24, r8
    12ee:	b8 01       	movw	r22, r16
    12f0:	0e 94 c0 06 	call	0xd80	; 0xd80 <_ZN6Events8get_dataEv>
    set_coord (m);                                    // se podría meter el get_data adentro de la propia llamada a set_coord           
    12f4:	c4 01       	movw	r24, r8
    12f6:	0e 94 19 39 	call	0x7232	; 0x7232 <_Z9set_coordR7MOVDATA>
    count ++;
    12fa:	f3 94       	inc	r15
    return false;
  }
}  

unsigned long Events::get_time () {                           // get current timestamp 
  if (size > 0) {
    12fc:	f5 01       	movw	r30, r10
    12fe:	80 81       	ld	r24, Z
    1300:	88 23       	and	r24, r24
    1302:	29 f4       	brne	.+10     	; 0x130e <_ZN6Events7processEv+0x6e>
    1304:	2f ef       	ldi	r18, 0xFF	; 255
    1306:	3f ef       	ldi	r19, 0xFF	; 255
    1308:	4f ef       	ldi	r20, 0xFF	; 255
    130a:	5f ef       	ldi	r21, 0xFF	; 255
    130c:	15 c0       	rjmp	.+42     	; 0x1338 <_ZN6Events7processEv+0x98>
    return buffer [head].timestamp;
    130e:	f6 01       	movw	r30, r12
    1310:	80 81       	ld	r24, Z
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	fc 01       	movw	r30, r24
    1316:	ee 0f       	add	r30, r30
    1318:	ff 1f       	adc	r31, r31
    131a:	ee 0f       	add	r30, r30
    131c:	ff 1f       	adc	r31, r31
    131e:	e8 0f       	add	r30, r24
    1320:	f9 1f       	adc	r31, r25
    1322:	31 96       	adiw	r30, 0x01	; 1
    1324:	ee 0f       	add	r30, r30
    1326:	ff 1f       	adc	r31, r31
    1328:	ee 0f       	add	r30, r30
    132a:	ff 1f       	adc	r31, r31
    132c:	e0 0f       	add	r30, r16
    132e:	f1 1f       	adc	r31, r17
    1330:	20 81       	ld	r18, Z
    1332:	31 81       	ldd	r19, Z+1	; 0x01
    1334:	42 81       	ldd	r20, Z+2	; 0x02
    1336:	53 81       	ldd	r21, Z+3	; 0x03
	timer = 0;
}

byte Events::process () {                               // esta rutina es llamada desde la ISR
  byte count = 0;
  while (get_time() <= timer) {
    1338:	f8 01       	movw	r30, r16
    133a:	80 81       	ld	r24, Z
    133c:	91 81       	ldd	r25, Z+1	; 0x01
    133e:	a2 81       	ldd	r26, Z+2	; 0x02
    1340:	b3 81       	ldd	r27, Z+3	; 0x03
    1342:	82 17       	cp	r24, r18
    1344:	93 07       	cpc	r25, r19
    1346:	a4 07       	cpc	r26, r20
    1348:	b5 07       	cpc	r27, r21
    134a:	80 f6       	brcc	.-96     	; 0x12ec <_ZN6Events7processEv+0x4c>
    MOVDATA m = get_data ();                           // cuando hace el get_data(), automáticamente se borra el evento
    set_coord (m);                                    // se podría meter el get_data adentro de la propia llamada a set_coord           
    count ++;
  }
  if (count > 0) {count = motor_update();}
    134c:	ff 20       	and	r15, r15
    134e:	19 f0       	breq	.+6      	; 0x1356 <_ZN6Events7processEv+0xb6>
    1350:	0e 94 14 34 	call	0x6828	; 0x6828 <_Z12motor_updatev>
    1354:	f8 2e       	mov	r15, r24
  timer ++;  
    1356:	f8 01       	movw	r30, r16
    1358:	80 81       	ld	r24, Z
    135a:	91 81       	ldd	r25, Z+1	; 0x01
    135c:	a2 81       	ldd	r26, Z+2	; 0x02
    135e:	b3 81       	ldd	r27, Z+3	; 0x03
    1360:	01 96       	adiw	r24, 0x01	; 1
    1362:	a1 1d       	adc	r26, r1
    1364:	b1 1d       	adc	r27, r1
    1366:	80 83       	st	Z, r24
    1368:	91 83       	std	Z+1, r25	; 0x01
    136a:	a2 83       	std	Z+2, r26	; 0x02
    136c:	b3 83       	std	Z+3, r27	; 0x03
  return count;                        // retorna la cantidad de motores updateados
}
    136e:	8f 2d       	mov	r24, r15
    1370:	60 96       	adiw	r28, 0x10	; 16
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	de bf       	out	0x3e, r29	; 62
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	cd bf       	out	0x3d, r28	; 61
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	1f 91       	pop	r17
    1382:	0f 91       	pop	r16
    1384:	ff 90       	pop	r15
    1386:	df 90       	pop	r13
    1388:	cf 90       	pop	r12
    138a:	bf 90       	pop	r11
    138c:	af 90       	pop	r10
    138e:	9f 90       	pop	r9
    1390:	8f 90       	pop	r8
    1392:	08 95       	ret

00001394 <_ZN10Movimiento13get_osciladorEh>:

OSCILATOR Movimiento::get_oscilador (byte parametro) {
    1394:	0f 93       	push	r16
    1396:	1f 93       	push	r17
    1398:	18 2f       	mov	r17, r24
    139a:	09 2f       	mov	r16, r25
    139c:	fb 01       	movw	r30, r22
	return bd.oscilator [parametro];
    139e:	50 e0       	ldi	r21, 0x00	; 0
    13a0:	8d e0       	ldi	r24, 0x0D	; 13
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	9c 01       	movw	r18, r24
    13a6:	42 9f       	mul	r20, r18
    13a8:	c0 01       	movw	r24, r0
    13aa:	43 9f       	mul	r20, r19
    13ac:	90 0d       	add	r25, r0
    13ae:	52 9f       	mul	r21, r18
    13b0:	90 0d       	add	r25, r0
    13b2:	11 24       	eor	r1, r1
    13b4:	e8 0f       	add	r30, r24
    13b6:	f9 1f       	adc	r31, r25
    13b8:	21 2f       	mov	r18, r17
    13ba:	30 2f       	mov	r19, r16
    13bc:	c9 01       	movw	r24, r18
    13be:	dc 01       	movw	r26, r24
    13c0:	34 96       	adiw	r30, 0x04	; 4
    13c2:	8d e0       	ldi	r24, 0x0D	; 13
    13c4:	01 90       	ld	r0, Z+
    13c6:	0d 92       	st	X+, r0
    13c8:	81 50       	subi	r24, 0x01	; 1
    13ca:	e1 f7       	brne	.-8      	; 0x13c4 <_ZN10Movimiento13get_osciladorEh+0x30>
}
    13cc:	81 2f       	mov	r24, r17
    13ce:	90 2f       	mov	r25, r16
    13d0:	1f 91       	pop	r17
    13d2:	0f 91       	pop	r16
    13d4:	08 95       	ret

000013d6 <_ZN10Movimiento7set_ampEhf>:

void Movimiento::set_amp (byte parametro, float value) {
	bd.oscilator [parametro].amp = value;
    13d6:	70 e0       	ldi	r23, 0x00	; 0
    13d8:	ed e0       	ldi	r30, 0x0D	; 13
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	df 01       	movw	r26, r30
    13de:	6a 9f       	mul	r22, r26
    13e0:	f0 01       	movw	r30, r0
    13e2:	6b 9f       	mul	r22, r27
    13e4:	f0 0d       	add	r31, r0
    13e6:	7a 9f       	mul	r23, r26
    13e8:	f0 0d       	add	r31, r0
    13ea:	11 24       	eor	r1, r1
    13ec:	e8 0f       	add	r30, r24
    13ee:	f9 1f       	adc	r31, r25
    13f0:	24 83       	std	Z+4, r18	; 0x04
    13f2:	35 83       	std	Z+5, r19	; 0x05
    13f4:	46 83       	std	Z+6, r20	; 0x06
    13f6:	57 83       	std	Z+7, r21	; 0x07
}
    13f8:	08 95       	ret

000013fa <_ZN10Movimiento8set_freqEhf>:

void Movimiento::set_freq (byte parametro, float value) {
	bd.oscilator [parametro].freq = value;
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	ed e0       	ldi	r30, 0x0D	; 13
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	df 01       	movw	r26, r30
    1402:	6a 9f       	mul	r22, r26
    1404:	f0 01       	movw	r30, r0
    1406:	6b 9f       	mul	r22, r27
    1408:	f0 0d       	add	r31, r0
    140a:	7a 9f       	mul	r23, r26
    140c:	f0 0d       	add	r31, r0
    140e:	11 24       	eor	r1, r1
    1410:	e8 0f       	add	r30, r24
    1412:	f9 1f       	adc	r31, r25
    1414:	20 87       	std	Z+8, r18	; 0x08
    1416:	31 87       	std	Z+9, r19	; 0x09
    1418:	42 87       	std	Z+10, r20	; 0x0a
    141a:	53 87       	std	Z+11, r21	; 0x0b
}
    141c:	08 95       	ret

0000141e <_ZN10Movimiento9set_phaseEhf>:

void Movimiento::set_phase (byte parametro, float value) {
	bd.oscilator [parametro].phase = value;
    141e:	70 e0       	ldi	r23, 0x00	; 0
    1420:	ed e0       	ldi	r30, 0x0D	; 13
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	df 01       	movw	r26, r30
    1426:	6a 9f       	mul	r22, r26
    1428:	f0 01       	movw	r30, r0
    142a:	6b 9f       	mul	r22, r27
    142c:	f0 0d       	add	r31, r0
    142e:	7a 9f       	mul	r23, r26
    1430:	f0 0d       	add	r31, r0
    1432:	11 24       	eor	r1, r1
    1434:	e8 0f       	add	r30, r24
    1436:	f9 1f       	adc	r31, r25
    1438:	24 87       	std	Z+12, r18	; 0x0c
    143a:	35 87       	std	Z+13, r19	; 0x0d
    143c:	46 87       	std	Z+14, r20	; 0x0e
    143e:	57 87       	std	Z+15, r21	; 0x0f
}
    1440:	08 95       	ret

00001442 <_ZN10Movimiento9set_brownEhb>:

void Movimiento::set_brown (byte parametro, bool value) {
	bd.oscilator [parametro].brown = value;
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	2d e0       	ldi	r18, 0x0D	; 13
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	62 9f       	mul	r22, r18
    144a:	f0 01       	movw	r30, r0
    144c:	63 9f       	mul	r22, r19
    144e:	f0 0d       	add	r31, r0
    1450:	72 9f       	mul	r23, r18
    1452:	f0 0d       	add	r31, r0
    1454:	11 24       	eor	r1, r1
    1456:	e8 0f       	add	r30, r24
    1458:	f9 1f       	adc	r31, r25
    145a:	40 8b       	std	Z+16, r20	; 0x10
}
    145c:	08 95       	ret

0000145e <_ZN10Movimiento9osc_resetEv>:
	start ();
	
}

// restea los osciladores
void Movimiento::osc_reset () {
    145e:	ef 92       	push	r14
    1460:	ff 92       	push	r15
    1462:	0f 93       	push	r16
    1464:	1f 93       	push	r17
    1466:	cf 93       	push	r28
    1468:	df 93       	push	r29
    146a:	dc 01       	movw	r26, r24
    146c:	a7 58       	subi	r26, 0x87	; 135
    146e:	bf 4f       	sbci	r27, 0xFF	; 255
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
	for (byte i=0; i<9; i++) {
	  bd.oscilator[i] = (OSCILATOR) {0, 0, 0, false};             // inicializa los osciladores
    1474:	4d e0       	ldi	r20, 0x0D	; 13
    1476:	e4 2e       	mov	r14, r20
    1478:	f1 2c       	mov	r15, r1
    147a:	1d e0       	ldi	r17, 0x0D	; 13
	  bd.param_tronco[i] = 0;
    147c:	40 e0       	ldi	r20, 0x00	; 0
    147e:	50 e0       	ldi	r21, 0x00	; 0
    1480:	60 e0       	ldi	r22, 0x00	; 0
    1482:	70 e0       	ldi	r23, 0x00	; 0
}

// restea los osciladores
void Movimiento::osc_reset () {
	for (byte i=0; i<9; i++) {
	  bd.oscilator[i] = (OSCILATOR) {0, 0, 0, false};             // inicializa los osciladores
    1484:	2e 9d       	mul	r18, r14
    1486:	f0 01       	movw	r30, r0
    1488:	2f 9d       	mul	r18, r15
    148a:	f0 0d       	add	r31, r0
    148c:	3e 9d       	mul	r19, r14
    148e:	f0 0d       	add	r31, r0
    1490:	11 24       	eor	r1, r1
    1492:	e8 0f       	add	r30, r24
    1494:	f9 1f       	adc	r31, r25
    1496:	34 96       	adiw	r30, 0x04	; 4
    1498:	ef 01       	movw	r28, r30
    149a:	01 2f       	mov	r16, r17
    149c:	19 92       	st	Y+, r1
    149e:	0a 95       	dec	r16
    14a0:	e9 f7       	brne	.-6      	; 0x149c <_ZN10Movimiento9osc_resetEv+0x3e>
	  bd.param_tronco[i] = 0;
    14a2:	4d 93       	st	X+, r20
    14a4:	5d 93       	st	X+, r21
    14a6:	6d 93       	st	X+, r22
    14a8:	7d 93       	st	X+, r23
    14aa:	2f 5f       	subi	r18, 0xFF	; 255
    14ac:	3f 4f       	sbci	r19, 0xFF	; 255
	
}

// restea los osciladores
void Movimiento::osc_reset () {
	for (byte i=0; i<9; i++) {
    14ae:	29 30       	cpi	r18, 0x09	; 9
    14b0:	31 05       	cpc	r19, r1
    14b2:	41 f7       	brne	.-48     	; 0x1484 <_ZN10Movimiento9osc_resetEv+0x26>
	  bd.oscilator[i] = (OSCILATOR) {0, 0, 0, false};             // inicializa los osciladores
	  bd.param_tronco[i] = 0;
	}
}
    14b4:	df 91       	pop	r29
    14b6:	cf 91       	pop	r28
    14b8:	1f 91       	pop	r17
    14ba:	0f 91       	pop	r16
    14bc:	ff 90       	pop	r15
    14be:	ef 90       	pop	r14
    14c0:	08 95       	ret

000014c2 <_ZN10Movimiento11get_pos_refEv>:
	wk.mv.altura_pasito = 10;
	sh.mv.nsegmentos = 7;
	caminata (false);
}

COORD3D* Movimiento::get_pos_ref () {
    14c2:	9c 01       	movw	r18, r24
    14c4:	28 56       	subi	r18, 0x68	; 104
    14c6:	3e 4f       	sbci	r19, 0xFE	; 254
	return sh.mv.pos_ref;
}
    14c8:	c9 01       	movw	r24, r18
    14ca:	08 95       	ret

000014cc <_ZN10Movimiento6pasitoEh7COORD3DbfihS0_>:

// curvas bezier (usada para dar "pasitos" en la caminata, pero se puede usar para muchas más cosas)
void Movimiento::pasito (byte patas, COORD3D destino, bool absolute, float comienzo, int duracion, byte nsegmentos, COORD3D manejador) { 
    14cc:	2f 92       	push	r2
    14ce:	3f 92       	push	r3
    14d0:	4f 92       	push	r4
    14d2:	5f 92       	push	r5
    14d4:	6f 92       	push	r6
    14d6:	7f 92       	push	r7
    14d8:	8f 92       	push	r8
    14da:	9f 92       	push	r9
    14dc:	af 92       	push	r10
    14de:	bf 92       	push	r11
    14e0:	cf 92       	push	r12
    14e2:	df 92       	push	r13
    14e4:	ef 92       	push	r14
    14e6:	ff 92       	push	r15
    14e8:	0f 93       	push	r16
    14ea:	1f 93       	push	r17
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
    14f4:	c3 59       	subi	r28, 0x93	; 147
    14f6:	d0 40       	sbci	r29, 0x00	; 0
    14f8:	0f b6       	in	r0, 0x3f	; 63
    14fa:	f8 94       	cli
    14fc:	de bf       	out	0x3e, r29	; 62
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	cd bf       	out	0x3d, r28	; 61
    1502:	eb 96       	adiw	r28, 0x3b	; 59
    1504:	6f af       	std	Y+63, r22	; 0x3f
    1506:	eb 97       	sbiw	r28, 0x3b	; 59
    1508:	be 01       	movw	r22, r28
    150a:	6f 5b       	subi	r22, 0xBF	; 191
    150c:	7f 4f       	sbci	r23, 0xFF	; 255
    150e:	db 01       	movw	r26, r22
    1510:	ac 92       	st	X, r10
    1512:	fe 01       	movw	r30, r28
    1514:	ee 5b       	subi	r30, 0xBE	; 190
    1516:	ff 4f       	sbci	r31, 0xFF	; 255
    1518:	b0 82       	st	Z, r11
    151a:	fe 01       	movw	r30, r28
    151c:	ed 5b       	subi	r30, 0xBD	; 189
    151e:	ff 4f       	sbci	r31, 0xFF	; 255
    1520:	c0 82       	st	Z, r12
    1522:	fe 01       	movw	r30, r28
    1524:	ec 5b       	subi	r30, 0xBC	; 188
    1526:	ff 4f       	sbci	r31, 0xFF	; 255
    1528:	d0 82       	st	Z, r13
    152a:	ce 01       	movw	r24, r28
    152c:	8b 5b       	subi	r24, 0xBB	; 187
    152e:	9f 4f       	sbci	r25, 0xFF	; 255
    1530:	fc 01       	movw	r30, r24
    1532:	e0 82       	st	Z, r14
    1534:	fe 01       	movw	r30, r28
    1536:	ea 5b       	subi	r30, 0xBA	; 186
    1538:	ff 4f       	sbci	r31, 0xFF	; 255
    153a:	f0 82       	st	Z, r15
    153c:	fe 01       	movw	r30, r28
    153e:	e9 5b       	subi	r30, 0xB9	; 185
    1540:	ff 4f       	sbci	r31, 0xFF	; 255
    1542:	00 83       	st	Z, r16
    1544:	fe 01       	movw	r30, r28
    1546:	e8 5b       	subi	r30, 0xB8	; 184
    1548:	ff 4f       	sbci	r31, 0xFF	; 255
    154a:	10 83       	st	Z, r17
    154c:	de 01       	movw	r26, r28
    154e:	a7 5b       	subi	r26, 0xB7	; 183
    1550:	bf 4f       	sbci	r27, 0xFF	; 255
    1552:	2c 93       	st	X, r18
    1554:	fe 01       	movw	r30, r28
    1556:	e6 5b       	subi	r30, 0xB6	; 182
    1558:	ff 4f       	sbci	r31, 0xFF	; 255
    155a:	30 83       	st	Z, r19
    155c:	fe 01       	movw	r30, r28
    155e:	e5 5b       	subi	r30, 0xB5	; 181
    1560:	ff 4f       	sbci	r31, 0xFF	; 255
    1562:	40 83       	st	Z, r20
    1564:	fe 01       	movw	r30, r28
    1566:	e4 5b       	subi	r30, 0xB4	; 180
    1568:	ff 4f       	sbci	r31, 0xFF	; 255
    156a:	50 83       	st	Z, r21
    156c:	ec 96       	adiw	r28, 0x3c	; 60
    156e:	8f ae       	std	Y+63, r8	; 0x3f
    1570:	ec 97       	sbiw	r28, 0x3c	; 60
    1572:	fb 01       	movw	r30, r22
    1574:	20 81       	ld	r18, Z
    1576:	31 81       	ldd	r19, Z+1	; 0x01
    1578:	42 81       	ldd	r20, Z+2	; 0x02
    157a:	53 81       	ldd	r21, Z+3	; 0x03
    157c:	a5 96       	adiw	r28, 0x25	; 37
    157e:	2c af       	std	Y+60, r18	; 0x3c
    1580:	3d af       	std	Y+61, r19	; 0x3d
    1582:	4e af       	std	Y+62, r20	; 0x3e
    1584:	5f af       	std	Y+63, r21	; 0x3f
    1586:	a5 97       	sbiw	r28, 0x25	; 37
    1588:	fc 01       	movw	r30, r24
    158a:	20 81       	ld	r18, Z
    158c:	31 81       	ldd	r19, Z+1	; 0x01
    158e:	42 81       	ldd	r20, Z+2	; 0x02
    1590:	53 81       	ldd	r21, Z+3	; 0x03
    1592:	a1 96       	adiw	r28, 0x21	; 33
    1594:	2c af       	std	Y+60, r18	; 0x3c
    1596:	3d af       	std	Y+61, r19	; 0x3d
    1598:	4e af       	std	Y+62, r20	; 0x3e
    159a:	5f af       	std	Y+63, r21	; 0x3f
    159c:	a1 97       	sbiw	r28, 0x21	; 33
    159e:	2d 91       	ld	r18, X+
    15a0:	3d 91       	ld	r19, X+
    15a2:	4d 91       	ld	r20, X+
    15a4:	5c 91       	ld	r21, X
    15a6:	6d 96       	adiw	r28, 0x1d	; 29
    15a8:	2c af       	std	Y+60, r18	; 0x3c
    15aa:	3d af       	std	Y+61, r19	; 0x3d
    15ac:	4e af       	std	Y+62, r20	; 0x3e
    15ae:	5f af       	std	Y+63, r21	; 0x3f
    15b0:	6d 97       	sbiw	r28, 0x1d	; 29
    15b2:	c1 55       	subi	r28, 0x51	; 81
    15b4:	df 4f       	sbci	r29, 0xFF	; 255
    15b6:	88 81       	ld	r24, Y
    15b8:	99 81       	ldd	r25, Y+1	; 0x01
    15ba:	aa 81       	ldd	r26, Y+2	; 0x02
    15bc:	bb 81       	ldd	r27, Y+3	; 0x03
    15be:	cf 5a       	subi	r28, 0xAF	; 175
    15c0:	d0 40       	sbci	r29, 0x00	; 0
    15c2:	69 96       	adiw	r28, 0x19	; 25
    15c4:	8c af       	std	Y+60, r24	; 0x3c
    15c6:	9d af       	std	Y+61, r25	; 0x3d
    15c8:	ae af       	std	Y+62, r26	; 0x3e
    15ca:	bf af       	std	Y+63, r27	; 0x3f
    15cc:	69 97       	sbiw	r28, 0x19	; 25
    15ce:	cd 54       	subi	r28, 0x4D	; 77
    15d0:	df 4f       	sbci	r29, 0xFF	; 255
    15d2:	28 81       	ld	r18, Y
    15d4:	39 81       	ldd	r19, Y+1	; 0x01
    15d6:	4a 81       	ldd	r20, Y+2	; 0x02
    15d8:	5b 81       	ldd	r21, Y+3	; 0x03
    15da:	c3 5b       	subi	r28, 0xB3	; 179
    15dc:	d0 40       	sbci	r29, 0x00	; 0
    15de:	65 96       	adiw	r28, 0x15	; 21
    15e0:	2c af       	std	Y+60, r18	; 0x3c
    15e2:	3d af       	std	Y+61, r19	; 0x3d
    15e4:	4e af       	std	Y+62, r20	; 0x3e
    15e6:	5f af       	std	Y+63, r21	; 0x3f
    15e8:	65 97       	sbiw	r28, 0x15	; 21
    15ea:	c9 54       	subi	r28, 0x49	; 73
    15ec:	df 4f       	sbci	r29, 0xFF	; 255
    15ee:	88 81       	ld	r24, Y
    15f0:	99 81       	ldd	r25, Y+1	; 0x01
    15f2:	aa 81       	ldd	r26, Y+2	; 0x02
    15f4:	bb 81       	ldd	r27, Y+3	; 0x03
    15f6:	c7 5b       	subi	r28, 0xB7	; 183
    15f8:	d0 40       	sbci	r29, 0x00	; 0
    15fa:	61 96       	adiw	r28, 0x11	; 17
    15fc:	8c af       	std	Y+60, r24	; 0x3c
    15fe:	9d af       	std	Y+61, r25	; 0x3d
    1600:	ae af       	std	Y+62, r26	; 0x3e
    1602:	bf af       	std	Y+63, r27	; 0x3f
    1604:	61 97       	sbiw	r28, 0x11	; 17
  
  float t = 0;
  float t_inc = 1.0 / nsegmentos;
    1606:	c2 55       	subi	r28, 0x52	; 82
    1608:	df 4f       	sbci	r29, 0xFF	; 255
    160a:	98 81       	ld	r25, Y
    160c:	ce 5a       	subi	r28, 0xAE	; 174
    160e:	d0 40       	sbci	r29, 0x00	; 0
    1610:	69 2f       	mov	r22, r25
    1612:	70 e0       	ldi	r23, 0x00	; 0
    1614:	88 27       	eor	r24, r24
    1616:	77 fd       	sbrc	r23, 7
    1618:	80 95       	com	r24
    161a:	98 2f       	mov	r25, r24
    161c:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    1620:	9b 01       	movw	r18, r22
    1622:	ac 01       	movw	r20, r24
    1624:	60 e0       	ldi	r22, 0x00	; 0
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	80 e8       	ldi	r24, 0x80	; 128
    162a:	9f e3       	ldi	r25, 0x3F	; 63
    162c:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    1630:	ea 96       	adiw	r28, 0x3a	; 58
    1632:	6c af       	std	Y+60, r22	; 0x3c
    1634:	7d af       	std	Y+61, r23	; 0x3d
    1636:	8e af       	std	Y+62, r24	; 0x3e
    1638:	9f af       	std	Y+63, r25	; 0x3f
    163a:	ea 97       	sbiw	r28, 0x3a	; 58
  float tps = duracion * t_inc;         // ticks-per-segment
    163c:	c4 55       	subi	r28, 0x54	; 84
    163e:	df 4f       	sbci	r29, 0xFF	; 255
    1640:	68 81       	ld	r22, Y
    1642:	79 81       	ldd	r23, Y+1	; 0x01
    1644:	cc 5a       	subi	r28, 0xAC	; 172
    1646:	d0 40       	sbci	r29, 0x00	; 0
    1648:	88 27       	eor	r24, r24
    164a:	77 fd       	sbrc	r23, 7
    164c:	80 95       	com	r24
    164e:	98 2f       	mov	r25, r24
    1650:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    1654:	ea 96       	adiw	r28, 0x3a	; 58
    1656:	2c ad       	ldd	r18, Y+60	; 0x3c
    1658:	3d ad       	ldd	r19, Y+61	; 0x3d
    165a:	4e ad       	ldd	r20, Y+62	; 0x3e
    165c:	5f ad       	ldd	r21, Y+63	; 0x3f
    165e:	ea 97       	sbiw	r28, 0x3a	; 58
    1660:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    1664:	e6 96       	adiw	r28, 0x36	; 54
    1666:	6c af       	std	Y+60, r22	; 0x3c
    1668:	7d af       	std	Y+61, r23	; 0x3d
    166a:	8e af       	std	Y+62, r24	; 0x3e
    166c:	9f af       	std	Y+63, r25	; 0x3f
    166e:	e6 97       	sbiw	r28, 0x36	; 54
  COORD3D punto, last, origen;
  if (absolute) {
    1670:	88 20       	and	r8, r8
    1672:	b9 f4       	brne	.+46     	; 0x16a2 <_ZN10Movimiento6pasitoEh7COORD3DbfihS0_+0x1d6>
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	40 e0       	ldi	r20, 0x00	; 0
    167a:	50 e0       	ldi	r21, 0x00	; 0
    167c:	e1 96       	adiw	r28, 0x31	; 49
    167e:	2c af       	std	Y+60, r18	; 0x3c
    1680:	3d af       	std	Y+61, r19	; 0x3d
    1682:	4e af       	std	Y+62, r20	; 0x3e
    1684:	5f af       	std	Y+63, r21	; 0x3f
    1686:	e1 97       	sbiw	r28, 0x31	; 49
    1688:	ad 96       	adiw	r28, 0x2d	; 45
    168a:	2c af       	std	Y+60, r18	; 0x3c
    168c:	3d af       	std	Y+61, r19	; 0x3d
    168e:	4e af       	std	Y+62, r20	; 0x3e
    1690:	5f af       	std	Y+63, r21	; 0x3f
    1692:	ad 97       	sbiw	r28, 0x2d	; 45
    1694:	a9 96       	adiw	r28, 0x29	; 41
    1696:	2c af       	std	Y+60, r18	; 0x3c
    1698:	3d af       	std	Y+61, r19	; 0x3d
    169a:	4e af       	std	Y+62, r20	; 0x3e
    169c:	5f af       	std	Y+63, r21	; 0x3f
    169e:	a9 97       	sbiw	r28, 0x29	; 41
    16a0:	38 c0       	rjmp	.+112    	; 0x1712 <_ZN10Movimiento6pasitoEh7COORD3DbfihS0_+0x246>
    origen = eventos.search (patas2pata(patas), comienzo);   // calcula la posición futura de una pata, en base a los eventos agendados
    16a2:	eb 96       	adiw	r28, 0x3b	; 59
    16a4:	8f ad       	ldd	r24, Y+63	; 0x3f
    16a6:	eb 97       	sbiw	r28, 0x3b	; 59
    16a8:	0e 94 79 3f 	call	0x7ef2	; 0x7ef2 <_Z10patas2patah>
    16ac:	f8 2e       	mov	r15, r24
    16ae:	c8 55       	subi	r28, 0x58	; 88
    16b0:	df 4f       	sbci	r29, 0xFF	; 255
    16b2:	68 81       	ld	r22, Y
    16b4:	79 81       	ldd	r23, Y+1	; 0x01
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	9b 81       	ldd	r25, Y+3	; 0x03
    16ba:	c8 5a       	subi	r28, 0xA8	; 168
    16bc:	d0 40       	sbci	r29, 0x00	; 0
    16be:	0e 94 30 7b 	call	0xf660	; 0xf660 <__fixsfsi>
    16c2:	8b 01       	movw	r16, r22
    16c4:	9c 01       	movw	r18, r24
    16c6:	ce 01       	movw	r24, r28
    16c8:	49 96       	adiw	r24, 0x19	; 25
    16ca:	6f ed       	ldi	r22, 0xDF	; 223
    16cc:	75 e0       	ldi	r23, 0x05	; 5
    16ce:	4f 2d       	mov	r20, r15
    16d0:	98 01       	movw	r18, r16
    16d2:	0e 94 a2 08 	call	0x1144	; 0x1144 <_ZN6Events6searchEhi>
    16d6:	89 a1       	ldd	r24, Y+33	; 0x21
    16d8:	9a a1       	ldd	r25, Y+34	; 0x22
    16da:	ab a1       	ldd	r26, Y+35	; 0x23
    16dc:	bc a1       	ldd	r27, Y+36	; 0x24
    16de:	e1 96       	adiw	r28, 0x31	; 49
    16e0:	8c af       	std	Y+60, r24	; 0x3c
    16e2:	9d af       	std	Y+61, r25	; 0x3d
    16e4:	ae af       	std	Y+62, r26	; 0x3e
    16e6:	bf af       	std	Y+63, r27	; 0x3f
    16e8:	e1 97       	sbiw	r28, 0x31	; 49
    16ea:	2d 8d       	ldd	r18, Y+29	; 0x1d
    16ec:	3e 8d       	ldd	r19, Y+30	; 0x1e
    16ee:	4f 8d       	ldd	r20, Y+31	; 0x1f
    16f0:	58 a1       	ldd	r21, Y+32	; 0x20
    16f2:	ad 96       	adiw	r28, 0x2d	; 45
    16f4:	2c af       	std	Y+60, r18	; 0x3c
    16f6:	3d af       	std	Y+61, r19	; 0x3d
    16f8:	4e af       	std	Y+62, r20	; 0x3e
    16fa:	5f af       	std	Y+63, r21	; 0x3f
    16fc:	ad 97       	sbiw	r28, 0x2d	; 45
    16fe:	89 8d       	ldd	r24, Y+25	; 0x19
    1700:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1702:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1704:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1706:	a9 96       	adiw	r28, 0x29	; 41
    1708:	8c af       	std	Y+60, r24	; 0x3c
    170a:	9d af       	std	Y+61, r25	; 0x3d
    170c:	ae af       	std	Y+62, r26	; 0x3e
    170e:	bf af       	std	Y+63, r27	; 0x3f
    1710:	a9 97       	sbiw	r28, 0x29	; 41
    1712:	e2 96       	adiw	r28, 0x32	; 50
    1714:	1f ae       	std	Y+63, r1	; 0x3f
    1716:	e2 97       	sbiw	r28, 0x32	; 50
    1718:	0f 2e       	mov	r0, r31
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	4f 2e       	mov	r4, r31
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	5f 2e       	mov	r5, r31
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	6f 2e       	mov	r6, r31
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	7f 2e       	mov	r7, r31
    172a:	f0 2d       	mov	r31, r0
    172c:	c1 57       	subi	r28, 0x71	; 113
    172e:	df 4f       	sbci	r29, 0xFF	; 255
    1730:	18 82       	st	Y, r1
    1732:	cf 58       	subi	r28, 0x8F	; 143
    1734:	d0 40       	sbci	r29, 0x00	; 0
    1736:	c0 57       	subi	r28, 0x70	; 112
    1738:	df 4f       	sbci	r29, 0xFF	; 255
    173a:	18 82       	st	Y, r1
    173c:	c0 59       	subi	r28, 0x90	; 144
    173e:	d0 40       	sbci	r29, 0x00	; 0
    1740:	cf 56       	subi	r28, 0x6F	; 111
    1742:	df 4f       	sbci	r29, 0xFF	; 255
    1744:	18 82       	st	Y, r1
    1746:	c1 59       	subi	r28, 0x91	; 145
    1748:	d0 40       	sbci	r29, 0x00	; 0
    174a:	33 24       	eor	r3, r3
    174c:	c4 57       	subi	r28, 0x74	; 116
    174e:	df 4f       	sbci	r29, 0xFF	; 255
    1750:	18 82       	st	Y, r1
    1752:	cc 58       	subi	r28, 0x8C	; 140
    1754:	d0 40       	sbci	r29, 0x00	; 0
    1756:	c3 57       	subi	r28, 0x73	; 115
    1758:	df 4f       	sbci	r29, 0xFF	; 255
    175a:	18 82       	st	Y, r1
    175c:	cd 58       	subi	r28, 0x8D	; 141
    175e:	d0 40       	sbci	r29, 0x00	; 0
    1760:	c2 57       	subi	r28, 0x72	; 114
    1762:	df 4f       	sbci	r29, 0xFF	; 255
    1764:	18 82       	st	Y, r1
    1766:	ce 58       	subi	r28, 0x8E	; 142
    1768:	d0 40       	sbci	r29, 0x00	; 0
    176a:	22 24       	eor	r2, r2
    176c:	c8 57       	subi	r28, 0x78	; 120
    176e:	df 4f       	sbci	r29, 0xFF	; 255
    1770:	18 82       	st	Y, r1
    1772:	c8 58       	subi	r28, 0x88	; 136
    1774:	d0 40       	sbci	r29, 0x00	; 0
    1776:	c7 57       	subi	r28, 0x77	; 119
    1778:	df 4f       	sbci	r29, 0xFF	; 255
    177a:	18 82       	st	Y, r1
    177c:	c9 58       	subi	r28, 0x89	; 137
    177e:	d0 40       	sbci	r29, 0x00	; 0
    1780:	c6 57       	subi	r28, 0x76	; 118
    1782:	df 4f       	sbci	r29, 0xFF	; 255
    1784:	18 82       	st	Y, r1
    1786:	ca 58       	subi	r28, 0x8A	; 138
    1788:	d0 40       	sbci	r29, 0x00	; 0
    178a:	c5 57       	subi	r28, 0x75	; 117
    178c:	df 4f       	sbci	r29, 0xFF	; 255
    178e:	18 82       	st	Y, r1
    1790:	cb 58       	subi	r28, 0x8B	; 139
    1792:	d0 40       	sbci	r29, 0x00	; 0
    1794:	cc 57       	subi	r28, 0x7C	; 124
    1796:	df 4f       	sbci	r29, 0xFF	; 255
    1798:	18 82       	st	Y, r1
    179a:	c4 58       	subi	r28, 0x84	; 132
    179c:	d0 40       	sbci	r29, 0x00	; 0
    179e:	cb 57       	subi	r28, 0x7B	; 123
    17a0:	df 4f       	sbci	r29, 0xFF	; 255
    17a2:	18 82       	st	Y, r1
    17a4:	c5 58       	subi	r28, 0x85	; 133
    17a6:	d0 40       	sbci	r29, 0x00	; 0
    17a8:	ca 57       	subi	r28, 0x7A	; 122
    17aa:	df 4f       	sbci	r29, 0xFF	; 255
    17ac:	18 82       	st	Y, r1
    17ae:	c6 58       	subi	r28, 0x86	; 134
    17b0:	d0 40       	sbci	r29, 0x00	; 0
    17b2:	c9 57       	subi	r28, 0x79	; 121
    17b4:	df 4f       	sbci	r29, 0xFF	; 255
    17b6:	18 82       	st	Y, r1
    17b8:	c7 58       	subi	r28, 0x87	; 135
    17ba:	d0 40       	sbci	r29, 0x00	; 0
    17bc:	c0 58       	subi	r28, 0x80	; 128
    17be:	df 4f       	sbci	r29, 0xFF	; 255
    17c0:	18 82       	st	Y, r1
    17c2:	c0 58       	subi	r28, 0x80	; 128
    17c4:	d0 40       	sbci	r29, 0x00	; 0
    17c6:	cf 57       	subi	r28, 0x7F	; 127
    17c8:	df 4f       	sbci	r29, 0xFF	; 255
    17ca:	18 82       	st	Y, r1
    17cc:	c1 58       	subi	r28, 0x81	; 129
    17ce:	d0 40       	sbci	r29, 0x00	; 0
    17d0:	ce 57       	subi	r28, 0x7E	; 126
    17d2:	df 4f       	sbci	r29, 0xFF	; 255
    17d4:	18 82       	st	Y, r1
    17d6:	c2 58       	subi	r28, 0x82	; 130
    17d8:	d0 40       	sbci	r29, 0x00	; 0
    17da:	cd 57       	subi	r28, 0x7D	; 125
    17dc:	df 4f       	sbci	r29, 0xFF	; 255
    17de:	18 82       	st	Y, r1
    17e0:	c3 58       	subi	r28, 0x83	; 131
    17e2:	d0 40       	sbci	r29, 0x00	; 0
    17e4:	ed 96       	adiw	r28, 0x3d	; 61
    17e6:	1f ae       	std	Y+63, r1	; 0x3f
    17e8:	ed 97       	sbiw	r28, 0x3d	; 61
    17ea:	ee 96       	adiw	r28, 0x3e	; 62
    17ec:	1f ae       	std	Y+63, r1	; 0x3f
    17ee:	ee 97       	sbiw	r28, 0x3e	; 62
    17f0:	ef 96       	adiw	r28, 0x3f	; 63
    17f2:	1f ae       	std	Y+63, r1	; 0x3f
    17f4:	ef 97       	sbiw	r28, 0x3f	; 63
    17f6:	c1 58       	subi	r28, 0x81	; 129
    17f8:	df 4f       	sbci	r29, 0xFF	; 255
    17fa:	18 82       	st	Y, r1
    17fc:	cf 57       	subi	r28, 0x7F	; 127
    17fe:	d0 40       	sbci	r29, 0x00	; 0
    t += t_inc;
    if (!absolute) {last = punto;}
    punto.x = bezier (origen.x, manejador.x, destino.x, t);
    punto.y = bezier (origen.y, manejador.y, destino.y, t);
    punto.z = bezier (origen.z, manejador.z, destino.z, t);
    eventos.add ((MOVDATA) {patas, resta (punto, last), tps, absolute}, comienzo);  
    1800:	de 01       	movw	r26, r28
    1802:	d1 96       	adiw	r26, 0x31	; 49
    1804:	ce 56       	subi	r28, 0x6E	; 110
    1806:	df 4f       	sbci	r29, 0xFF	; 255
    1808:	b9 83       	std	Y+1, r27	; 0x01
    180a:	a8 83       	st	Y, r26
    180c:	c2 59       	subi	r28, 0x92	; 146
    180e:	d0 40       	sbci	r29, 0x00	; 0
    1810:	06 c2       	rjmp	.+1036   	; 0x1c1e <_ZN10Movimiento6pasitoEh7COORD3DbfihS0_+0x752>
    origen = (COORD3D) {0, 0, 0};
    punto = origen;
    last = punto;
  }
  for (byte i=0; i<nsegmentos; i++) {
    t += t_inc;
    1812:	c3 01       	movw	r24, r6
    1814:	b2 01       	movw	r22, r4
    1816:	ea 96       	adiw	r28, 0x3a	; 58
    1818:	2c ad       	ldd	r18, Y+60	; 0x3c
    181a:	3d ad       	ldd	r19, Y+61	; 0x3d
    181c:	4e ad       	ldd	r20, Y+62	; 0x3e
    181e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1820:	ea 97       	sbiw	r28, 0x3a	; 58
    1822:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    1826:	2b 01       	movw	r4, r22
    1828:	3c 01       	movw	r6, r24
    if (!absolute) {last = punto;}
    182a:	ec 96       	adiw	r28, 0x3c	; 60
    182c:	bf ad       	ldd	r27, Y+63	; 0x3f
    182e:	ec 97       	sbiw	r28, 0x3c	; 60
    1830:	bb 23       	and	r27, r27
    1832:	09 f0       	breq	.+2      	; 0x1836 <_ZN10Movimiento6pasitoEh7COORD3DbfihS0_+0x36a>
    1834:	68 c0       	rjmp	.+208    	; 0x1906 <_ZN10Movimiento6pasitoEh7COORD3DbfihS0_+0x43a>
    1836:	c8 57       	subi	r28, 0x78	; 120
    1838:	df 4f       	sbci	r29, 0xFF	; 255
    183a:	e8 81       	ld	r30, Y
    183c:	c8 58       	subi	r28, 0x88	; 136
    183e:	d0 40       	sbci	r29, 0x00	; 0
    1840:	cc 57       	subi	r28, 0x7C	; 124
    1842:	df 4f       	sbci	r29, 0xFF	; 255
    1844:	e8 83       	st	Y, r30
    1846:	c4 58       	subi	r28, 0x84	; 132
    1848:	d0 40       	sbci	r29, 0x00	; 0
    184a:	c7 57       	subi	r28, 0x77	; 119
    184c:	df 4f       	sbci	r29, 0xFF	; 255
    184e:	f8 81       	ld	r31, Y
    1850:	c9 58       	subi	r28, 0x89	; 137
    1852:	d0 40       	sbci	r29, 0x00	; 0
    1854:	cb 57       	subi	r28, 0x7B	; 123
    1856:	df 4f       	sbci	r29, 0xFF	; 255
    1858:	f8 83       	st	Y, r31
    185a:	c5 58       	subi	r28, 0x85	; 133
    185c:	d0 40       	sbci	r29, 0x00	; 0
    185e:	c6 57       	subi	r28, 0x76	; 118
    1860:	df 4f       	sbci	r29, 0xFF	; 255
    1862:	28 81       	ld	r18, Y
    1864:	ca 58       	subi	r28, 0x8A	; 138
    1866:	d0 40       	sbci	r29, 0x00	; 0
    1868:	ca 57       	subi	r28, 0x7A	; 122
    186a:	df 4f       	sbci	r29, 0xFF	; 255
    186c:	28 83       	st	Y, r18
    186e:	c6 58       	subi	r28, 0x86	; 134
    1870:	d0 40       	sbci	r29, 0x00	; 0
    1872:	c5 57       	subi	r28, 0x75	; 117
    1874:	df 4f       	sbci	r29, 0xFF	; 255
    1876:	38 81       	ld	r19, Y
    1878:	cb 58       	subi	r28, 0x8B	; 139
    187a:	d0 40       	sbci	r29, 0x00	; 0
    187c:	c9 57       	subi	r28, 0x79	; 121
    187e:	df 4f       	sbci	r29, 0xFF	; 255
    1880:	38 83       	st	Y, r19
    1882:	c7 58       	subi	r28, 0x87	; 135
    1884:	d0 40       	sbci	r29, 0x00	; 0
    1886:	c4 57       	subi	r28, 0x74	; 116
    1888:	df 4f       	sbci	r29, 0xFF	; 255
    188a:	48 81       	ld	r20, Y
    188c:	cc 58       	subi	r28, 0x8C	; 140
    188e:	d0 40       	sbci	r29, 0x00	; 0
    1890:	c0 58       	subi	r28, 0x80	; 128
    1892:	df 4f       	sbci	r29, 0xFF	; 255
    1894:	48 83       	st	Y, r20
    1896:	c0 58       	subi	r28, 0x80	; 128
    1898:	d0 40       	sbci	r29, 0x00	; 0
    189a:	c3 57       	subi	r28, 0x73	; 115
    189c:	df 4f       	sbci	r29, 0xFF	; 255
    189e:	58 81       	ld	r21, Y
    18a0:	cd 58       	subi	r28, 0x8D	; 141
    18a2:	d0 40       	sbci	r29, 0x00	; 0
    18a4:	cf 57       	subi	r28, 0x7F	; 127
    18a6:	df 4f       	sbci	r29, 0xFF	; 255
    18a8:	58 83       	st	Y, r21
    18aa:	c1 58       	subi	r28, 0x81	; 129
    18ac:	d0 40       	sbci	r29, 0x00	; 0
    18ae:	c2 57       	subi	r28, 0x72	; 114
    18b0:	df 4f       	sbci	r29, 0xFF	; 255
    18b2:	88 81       	ld	r24, Y
    18b4:	ce 58       	subi	r28, 0x8E	; 142
    18b6:	d0 40       	sbci	r29, 0x00	; 0
    18b8:	ce 57       	subi	r28, 0x7E	; 126
    18ba:	df 4f       	sbci	r29, 0xFF	; 255
    18bc:	88 83       	st	Y, r24
    18be:	c2 58       	subi	r28, 0x82	; 130
    18c0:	d0 40       	sbci	r29, 0x00	; 0
    18c2:	cd 57       	subi	r28, 0x7D	; 125
    18c4:	df 4f       	sbci	r29, 0xFF	; 255
    18c6:	28 82       	st	Y, r2
    18c8:	c3 58       	subi	r28, 0x83	; 131
    18ca:	d0 40       	sbci	r29, 0x00	; 0
    18cc:	c1 57       	subi	r28, 0x71	; 113
    18ce:	df 4f       	sbci	r29, 0xFF	; 255
    18d0:	98 81       	ld	r25, Y
    18d2:	cf 58       	subi	r28, 0x8F	; 143
    18d4:	d0 40       	sbci	r29, 0x00	; 0
    18d6:	ed 96       	adiw	r28, 0x3d	; 61
    18d8:	9f af       	std	Y+63, r25	; 0x3f
    18da:	ed 97       	sbiw	r28, 0x3d	; 61
    18dc:	c0 57       	subi	r28, 0x70	; 112
    18de:	df 4f       	sbci	r29, 0xFF	; 255
    18e0:	a8 81       	ld	r26, Y
    18e2:	c0 59       	subi	r28, 0x90	; 144
    18e4:	d0 40       	sbci	r29, 0x00	; 0
    18e6:	ee 96       	adiw	r28, 0x3e	; 62
    18e8:	af af       	std	Y+63, r26	; 0x3f
    18ea:	ee 97       	sbiw	r28, 0x3e	; 62
    18ec:	cf 56       	subi	r28, 0x6F	; 111
    18ee:	df 4f       	sbci	r29, 0xFF	; 255
    18f0:	b8 81       	ld	r27, Y
    18f2:	c1 59       	subi	r28, 0x91	; 145
    18f4:	d0 40       	sbci	r29, 0x00	; 0
    18f6:	ef 96       	adiw	r28, 0x3f	; 63
    18f8:	bf af       	std	Y+63, r27	; 0x3f
    18fa:	ef 97       	sbiw	r28, 0x3f	; 63
    18fc:	c1 58       	subi	r28, 0x81	; 129
    18fe:	df 4f       	sbci	r29, 0xFF	; 255
    1900:	38 82       	st	Y, r3
    1902:	cf 57       	subi	r28, 0x7F	; 127
    1904:	d0 40       	sbci	r29, 0x00	; 0
    punto.x = bezier (origen.x, manejador.x, destino.x, t);
    1906:	a9 96       	adiw	r28, 0x29	; 41
    1908:	6c ad       	ldd	r22, Y+60	; 0x3c
    190a:	7d ad       	ldd	r23, Y+61	; 0x3d
    190c:	8e ad       	ldd	r24, Y+62	; 0x3e
    190e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1910:	a9 97       	sbiw	r28, 0x29	; 41
    1912:	69 96       	adiw	r28, 0x19	; 25
    1914:	2c ad       	ldd	r18, Y+60	; 0x3c
    1916:	3d ad       	ldd	r19, Y+61	; 0x3d
    1918:	4e ad       	ldd	r20, Y+62	; 0x3e
    191a:	5f ad       	ldd	r21, Y+63	; 0x3f
    191c:	69 97       	sbiw	r28, 0x19	; 25
    191e:	a5 96       	adiw	r28, 0x25	; 37
    1920:	ec ac       	ldd	r14, Y+60	; 0x3c
    1922:	fd ac       	ldd	r15, Y+61	; 0x3d
    1924:	0e ad       	ldd	r16, Y+62	; 0x3e
    1926:	1f ad       	ldd	r17, Y+63	; 0x3f
    1928:	a5 97       	sbiw	r28, 0x25	; 37
    192a:	63 01       	movw	r12, r6
    192c:	52 01       	movw	r10, r4
    192e:	0e 94 01 3a 	call	0x7402	; 0x7402 <_Z6bezierffff>
    1932:	c8 57       	subi	r28, 0x78	; 120
    1934:	df 4f       	sbci	r29, 0xFF	; 255
    1936:	68 83       	st	Y, r22
    1938:	c8 58       	subi	r28, 0x88	; 136
    193a:	d0 40       	sbci	r29, 0x00	; 0
    193c:	c7 57       	subi	r28, 0x77	; 119
    193e:	df 4f       	sbci	r29, 0xFF	; 255
    1940:	78 83       	st	Y, r23
    1942:	c9 58       	subi	r28, 0x89	; 137
    1944:	d0 40       	sbci	r29, 0x00	; 0
    1946:	c6 57       	subi	r28, 0x76	; 118
    1948:	df 4f       	sbci	r29, 0xFF	; 255
    194a:	88 83       	st	Y, r24
    194c:	ca 58       	subi	r28, 0x8A	; 138
    194e:	d0 40       	sbci	r29, 0x00	; 0
    1950:	c5 57       	subi	r28, 0x75	; 117
    1952:	df 4f       	sbci	r29, 0xFF	; 255
    1954:	98 83       	st	Y, r25
    1956:	cb 58       	subi	r28, 0x8B	; 139
    1958:	d0 40       	sbci	r29, 0x00	; 0
    punto.y = bezier (origen.y, manejador.y, destino.y, t);
    195a:	ad 96       	adiw	r28, 0x2d	; 45
    195c:	6c ad       	ldd	r22, Y+60	; 0x3c
    195e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1960:	8e ad       	ldd	r24, Y+62	; 0x3e
    1962:	9f ad       	ldd	r25, Y+63	; 0x3f
    1964:	ad 97       	sbiw	r28, 0x2d	; 45
    1966:	65 96       	adiw	r28, 0x15	; 21
    1968:	2c ad       	ldd	r18, Y+60	; 0x3c
    196a:	3d ad       	ldd	r19, Y+61	; 0x3d
    196c:	4e ad       	ldd	r20, Y+62	; 0x3e
    196e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1970:	65 97       	sbiw	r28, 0x15	; 21
    1972:	a1 96       	adiw	r28, 0x21	; 33
    1974:	ec ac       	ldd	r14, Y+60	; 0x3c
    1976:	fd ac       	ldd	r15, Y+61	; 0x3d
    1978:	0e ad       	ldd	r16, Y+62	; 0x3e
    197a:	1f ad       	ldd	r17, Y+63	; 0x3f
    197c:	a1 97       	sbiw	r28, 0x21	; 33
    197e:	0e 94 01 3a 	call	0x7402	; 0x7402 <_Z6bezierffff>
    1982:	c4 57       	subi	r28, 0x74	; 116
    1984:	df 4f       	sbci	r29, 0xFF	; 255
    1986:	68 83       	st	Y, r22
    1988:	cc 58       	subi	r28, 0x8C	; 140
    198a:	d0 40       	sbci	r29, 0x00	; 0
    198c:	c3 57       	subi	r28, 0x73	; 115
    198e:	df 4f       	sbci	r29, 0xFF	; 255
    1990:	78 83       	st	Y, r23
    1992:	cd 58       	subi	r28, 0x8D	; 141
    1994:	d0 40       	sbci	r29, 0x00	; 0
    1996:	c2 57       	subi	r28, 0x72	; 114
    1998:	df 4f       	sbci	r29, 0xFF	; 255
    199a:	88 83       	st	Y, r24
    199c:	ce 58       	subi	r28, 0x8E	; 142
    199e:	d0 40       	sbci	r29, 0x00	; 0
    19a0:	29 2e       	mov	r2, r25
    punto.z = bezier (origen.z, manejador.z, destino.z, t);
    19a2:	e1 96       	adiw	r28, 0x31	; 49
    19a4:	6c ad       	ldd	r22, Y+60	; 0x3c
    19a6:	7d ad       	ldd	r23, Y+61	; 0x3d
    19a8:	8e ad       	ldd	r24, Y+62	; 0x3e
    19aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    19ac:	e1 97       	sbiw	r28, 0x31	; 49
    19ae:	61 96       	adiw	r28, 0x11	; 17
    19b0:	2c ad       	ldd	r18, Y+60	; 0x3c
    19b2:	3d ad       	ldd	r19, Y+61	; 0x3d
    19b4:	4e ad       	ldd	r20, Y+62	; 0x3e
    19b6:	5f ad       	ldd	r21, Y+63	; 0x3f
    19b8:	61 97       	sbiw	r28, 0x11	; 17
    19ba:	6d 96       	adiw	r28, 0x1d	; 29
    19bc:	ec ac       	ldd	r14, Y+60	; 0x3c
    19be:	fd ac       	ldd	r15, Y+61	; 0x3d
    19c0:	0e ad       	ldd	r16, Y+62	; 0x3e
    19c2:	1f ad       	ldd	r17, Y+63	; 0x3f
    19c4:	6d 97       	sbiw	r28, 0x1d	; 29
    19c6:	0e 94 01 3a 	call	0x7402	; 0x7402 <_Z6bezierffff>
    19ca:	c1 57       	subi	r28, 0x71	; 113
    19cc:	df 4f       	sbci	r29, 0xFF	; 255
    19ce:	68 83       	st	Y, r22
    19d0:	cf 58       	subi	r28, 0x8F	; 143
    19d2:	d0 40       	sbci	r29, 0x00	; 0
    19d4:	c0 57       	subi	r28, 0x70	; 112
    19d6:	df 4f       	sbci	r29, 0xFF	; 255
    19d8:	78 83       	st	Y, r23
    19da:	c0 59       	subi	r28, 0x90	; 144
    19dc:	d0 40       	sbci	r29, 0x00	; 0
    19de:	cf 56       	subi	r28, 0x6F	; 111
    19e0:	df 4f       	sbci	r29, 0xFF	; 255
    19e2:	88 83       	st	Y, r24
    19e4:	c1 59       	subi	r28, 0x91	; 145
    19e6:	d0 40       	sbci	r29, 0x00	; 0
    19e8:	39 2e       	mov	r3, r25
    eventos.add ((MOVDATA) {patas, resta (punto, last), tps, absolute}, comienzo);  
    19ea:	48 2f       	mov	r20, r24
    19ec:	59 2f       	mov	r21, r25
    19ee:	cb 01       	movw	r24, r22
    19f0:	da 01       	movw	r26, r20
    19f2:	89 87       	std	Y+9, r24	; 0x09
    19f4:	9a 87       	std	Y+10, r25	; 0x0a
    19f6:	ab 87       	std	Y+11, r26	; 0x0b
    19f8:	bc 87       	std	Y+12, r27	; 0x0c
    19fa:	c4 57       	subi	r28, 0x74	; 116
    19fc:	df 4f       	sbci	r29, 0xFF	; 255
    19fe:	28 81       	ld	r18, Y
    1a00:	cc 58       	subi	r28, 0x8C	; 140
    1a02:	d0 40       	sbci	r29, 0x00	; 0
    1a04:	c3 57       	subi	r28, 0x73	; 115
    1a06:	df 4f       	sbci	r29, 0xFF	; 255
    1a08:	38 81       	ld	r19, Y
    1a0a:	cd 58       	subi	r28, 0x8D	; 141
    1a0c:	d0 40       	sbci	r29, 0x00	; 0
    1a0e:	c2 57       	subi	r28, 0x72	; 114
    1a10:	df 4f       	sbci	r29, 0xFF	; 255
    1a12:	48 81       	ld	r20, Y
    1a14:	ce 58       	subi	r28, 0x8E	; 142
    1a16:	d0 40       	sbci	r29, 0x00	; 0
    1a18:	52 2d       	mov	r21, r2
    1a1a:	c9 01       	movw	r24, r18
    1a1c:	da 01       	movw	r26, r20
    1a1e:	8d 83       	std	Y+5, r24	; 0x05
    1a20:	9e 83       	std	Y+6, r25	; 0x06
    1a22:	af 83       	std	Y+7, r26	; 0x07
    1a24:	b8 87       	std	Y+8, r27	; 0x08
    1a26:	c8 57       	subi	r28, 0x78	; 120
    1a28:	df 4f       	sbci	r29, 0xFF	; 255
    1a2a:	28 81       	ld	r18, Y
    1a2c:	c8 58       	subi	r28, 0x88	; 136
    1a2e:	d0 40       	sbci	r29, 0x00	; 0
    1a30:	c7 57       	subi	r28, 0x77	; 119
    1a32:	df 4f       	sbci	r29, 0xFF	; 255
    1a34:	38 81       	ld	r19, Y
    1a36:	c9 58       	subi	r28, 0x89	; 137
    1a38:	d0 40       	sbci	r29, 0x00	; 0
    1a3a:	c6 57       	subi	r28, 0x76	; 118
    1a3c:	df 4f       	sbci	r29, 0xFF	; 255
    1a3e:	48 81       	ld	r20, Y
    1a40:	ca 58       	subi	r28, 0x8A	; 138
    1a42:	d0 40       	sbci	r29, 0x00	; 0
    1a44:	c5 57       	subi	r28, 0x75	; 117
    1a46:	df 4f       	sbci	r29, 0xFF	; 255
    1a48:	58 81       	ld	r21, Y
    1a4a:	cb 58       	subi	r28, 0x8B	; 139
    1a4c:	d0 40       	sbci	r29, 0x00	; 0
    1a4e:	c9 01       	movw	r24, r18
    1a50:	da 01       	movw	r26, r20
    1a52:	89 83       	std	Y+1, r24	; 0x01
    1a54:	9a 83       	std	Y+2, r25	; 0x02
    1a56:	ab 83       	std	Y+3, r26	; 0x03
    1a58:	bc 83       	std	Y+4, r27	; 0x04
    1a5a:	cc 57       	subi	r28, 0x7C	; 124
    1a5c:	df 4f       	sbci	r29, 0xFF	; 255
    1a5e:	28 81       	ld	r18, Y
    1a60:	c4 58       	subi	r28, 0x84	; 132
    1a62:	d0 40       	sbci	r29, 0x00	; 0
    1a64:	cb 57       	subi	r28, 0x7B	; 123
    1a66:	df 4f       	sbci	r29, 0xFF	; 255
    1a68:	38 81       	ld	r19, Y
    1a6a:	c5 58       	subi	r28, 0x85	; 133
    1a6c:	d0 40       	sbci	r29, 0x00	; 0
    1a6e:	ca 57       	subi	r28, 0x7A	; 122
    1a70:	df 4f       	sbci	r29, 0xFF	; 255
    1a72:	48 81       	ld	r20, Y
    1a74:	c6 58       	subi	r28, 0x86	; 134
    1a76:	d0 40       	sbci	r29, 0x00	; 0
    1a78:	c9 57       	subi	r28, 0x79	; 121
    1a7a:	df 4f       	sbci	r29, 0xFF	; 255
    1a7c:	58 81       	ld	r21, Y
    1a7e:	c7 58       	subi	r28, 0x87	; 135
    1a80:	d0 40       	sbci	r29, 0x00	; 0
    1a82:	c9 01       	movw	r24, r18
    1a84:	da 01       	movw	r26, r20
    1a86:	8d 87       	std	Y+13, r24	; 0x0d
    1a88:	9e 87       	std	Y+14, r25	; 0x0e
    1a8a:	af 87       	std	Y+15, r26	; 0x0f
    1a8c:	b8 8b       	std	Y+16, r27	; 0x10
    1a8e:	c0 58       	subi	r28, 0x80	; 128
    1a90:	df 4f       	sbci	r29, 0xFF	; 255
    1a92:	28 81       	ld	r18, Y
    1a94:	c0 58       	subi	r28, 0x80	; 128
    1a96:	d0 40       	sbci	r29, 0x00	; 0
    1a98:	cf 57       	subi	r28, 0x7F	; 127
    1a9a:	df 4f       	sbci	r29, 0xFF	; 255
    1a9c:	38 81       	ld	r19, Y
    1a9e:	c1 58       	subi	r28, 0x81	; 129
    1aa0:	d0 40       	sbci	r29, 0x00	; 0
    1aa2:	ce 57       	subi	r28, 0x7E	; 126
    1aa4:	df 4f       	sbci	r29, 0xFF	; 255
    1aa6:	48 81       	ld	r20, Y
    1aa8:	c2 58       	subi	r28, 0x82	; 130
    1aaa:	d0 40       	sbci	r29, 0x00	; 0
    1aac:	cd 57       	subi	r28, 0x7D	; 125
    1aae:	df 4f       	sbci	r29, 0xFF	; 255
    1ab0:	58 81       	ld	r21, Y
    1ab2:	c3 58       	subi	r28, 0x83	; 131
    1ab4:	d0 40       	sbci	r29, 0x00	; 0
    1ab6:	c9 01       	movw	r24, r18
    1ab8:	da 01       	movw	r26, r20
    1aba:	89 8b       	std	Y+17, r24	; 0x11
    1abc:	9a 8b       	std	Y+18, r25	; 0x12
    1abe:	ab 8b       	std	Y+19, r26	; 0x13
    1ac0:	bc 8b       	std	Y+20, r27	; 0x14
    1ac2:	ed 96       	adiw	r28, 0x3d	; 61
    1ac4:	2f ad       	ldd	r18, Y+63	; 0x3f
    1ac6:	ed 97       	sbiw	r28, 0x3d	; 61
    1ac8:	ee 96       	adiw	r28, 0x3e	; 62
    1aca:	3f ad       	ldd	r19, Y+63	; 0x3f
    1acc:	ee 97       	sbiw	r28, 0x3e	; 62
    1ace:	ef 96       	adiw	r28, 0x3f	; 63
    1ad0:	4f ad       	ldd	r20, Y+63	; 0x3f
    1ad2:	ef 97       	sbiw	r28, 0x3f	; 63
    1ad4:	c1 58       	subi	r28, 0x81	; 129
    1ad6:	df 4f       	sbci	r29, 0xFF	; 255
    1ad8:	58 81       	ld	r21, Y
    1ada:	cf 57       	subi	r28, 0x7F	; 127
    1adc:	d0 40       	sbci	r29, 0x00	; 0
    1ade:	c9 01       	movw	r24, r18
    1ae0:	da 01       	movw	r26, r20
    1ae2:	8d 8b       	std	Y+21, r24	; 0x15
    1ae4:	9e 8b       	std	Y+22, r25	; 0x16
    1ae6:	af 8b       	std	Y+23, r26	; 0x17
    1ae8:	b8 8f       	std	Y+24, r27	; 0x18
    1aea:	ed b7       	in	r30, 0x3d	; 61
    1aec:	fe b7       	in	r31, 0x3e	; 62
    1aee:	3c 97       	sbiw	r30, 0x0c	; 12
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	f8 94       	cli
    1af4:	fe bf       	out	0x3e, r31	; 62
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	ed bf       	out	0x3d, r30	; 61
    1afa:	ad b7       	in	r26, 0x3d	; 61
    1afc:	be b7       	in	r27, 0x3e	; 62
    1afe:	11 96       	adiw	r26, 0x01	; 1
    1b00:	fe 01       	movw	r30, r28
    1b02:	3d 96       	adiw	r30, 0x0d	; 13
    1b04:	8c e0       	ldi	r24, 0x0C	; 12
    1b06:	01 90       	ld	r0, Z+
    1b08:	0d 92       	st	X+, r0
    1b0a:	81 50       	subi	r24, 0x01	; 1
    1b0c:	e1 f7       	brne	.-8      	; 0x1b06 <_ZN10Movimiento6pasitoEh7COORD3DbfihS0_+0x63a>
    1b0e:	ce 01       	movw	r24, r28
    1b10:	85 96       	adiw	r24, 0x25	; 37
    1b12:	c9 80       	ldd	r12, Y+1	; 0x01
    1b14:	da 80       	ldd	r13, Y+2	; 0x02
    1b16:	eb 80       	ldd	r14, Y+3	; 0x03
    1b18:	fc 80       	ldd	r15, Y+4	; 0x04
    1b1a:	0d 81       	ldd	r16, Y+5	; 0x05
    1b1c:	1e 81       	ldd	r17, Y+6	; 0x06
    1b1e:	2f 81       	ldd	r18, Y+7	; 0x07
    1b20:	38 85       	ldd	r19, Y+8	; 0x08
    1b22:	49 85       	ldd	r20, Y+9	; 0x09
    1b24:	5a 85       	ldd	r21, Y+10	; 0x0a
    1b26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b2a:	0e 94 33 3b 	call	0x7666	; 0x7666 <_Z5resta7COORD3DS_>
    1b2e:	ce 56       	subi	r28, 0x6E	; 110
    1b30:	df 4f       	sbci	r29, 0xFF	; 255
    1b32:	a8 81       	ld	r26, Y
    1b34:	b9 81       	ldd	r27, Y+1	; 0x01
    1b36:	c2 59       	subi	r28, 0x92	; 146
    1b38:	d0 40       	sbci	r29, 0x00	; 0
    1b3a:	e0 e1       	ldi	r30, 0x10	; 16
    1b3c:	1d 92       	st	X+, r1
    1b3e:	ea 95       	dec	r30
    1b40:	e9 f7       	brne	.-6      	; 0x1b3c <_ZN10Movimiento6pasitoEh7COORD3DbfihS0_+0x670>
    1b42:	de 01       	movw	r26, r28
    1b44:	d2 96       	adiw	r26, 0x32	; 50
    1b46:	fe 01       	movw	r30, r28
    1b48:	b5 96       	adiw	r30, 0x25	; 37
    1b4a:	8c e0       	ldi	r24, 0x0C	; 12
    1b4c:	01 90       	ld	r0, Z+
    1b4e:	0d 92       	st	X+, r0
    1b50:	81 50       	subi	r24, 0x01	; 1
    1b52:	e1 f7       	brne	.-8      	; 0x1b4c <_ZN10Movimiento6pasitoEh7COORD3DbfihS0_+0x680>
    1b54:	eb 96       	adiw	r28, 0x3b	; 59
    1b56:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b58:	eb 97       	sbiw	r28, 0x3b	; 59
    1b5a:	f9 ab       	std	Y+49, r31	; 0x31
    1b5c:	e6 96       	adiw	r28, 0x36	; 54
    1b5e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b60:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b62:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b64:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b66:	e6 97       	sbiw	r28, 0x36	; 54
    1b68:	0e 94 30 7b 	call	0xf660	; 0xf660 <__fixsfsi>
    1b6c:	7f af       	std	Y+63, r23	; 0x3f
    1b6e:	6e af       	std	Y+62, r22	; 0x3e
    1b70:	ec 96       	adiw	r28, 0x3c	; 60
    1b72:	2f ad       	ldd	r18, Y+63	; 0x3f
    1b74:	ec 97       	sbiw	r28, 0x3c	; 60
    1b76:	21 96       	adiw	r28, 0x01	; 1
    1b78:	2f af       	std	Y+63, r18	; 0x3f
    1b7a:	21 97       	sbiw	r28, 0x01	; 1
    1b7c:	4d b7       	in	r20, 0x3d	; 61
    1b7e:	5e b7       	in	r21, 0x3e	; 62
    1b80:	46 5f       	subi	r20, 0xF6	; 246
    1b82:	5f 4f       	sbci	r21, 0xFF	; 255
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	f8 94       	cli
    1b88:	5e bf       	out	0x3e, r21	; 62
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	4d bf       	out	0x3d, r20	; 61
    1b8e:	0d b7       	in	r16, 0x3d	; 61
    1b90:	1e b7       	in	r17, 0x3e	; 62
    1b92:	0f 5f       	subi	r16, 0xFF	; 255
    1b94:	1f 4f       	sbci	r17, 0xFF	; 255
    1b96:	c8 55       	subi	r28, 0x58	; 88
    1b98:	df 4f       	sbci	r29, 0xFF	; 255
    1b9a:	68 81       	ld	r22, Y
    1b9c:	79 81       	ldd	r23, Y+1	; 0x01
    1b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba2:	c8 5a       	subi	r28, 0xA8	; 168
    1ba4:	d0 40       	sbci	r29, 0x00	; 0
    1ba6:	0e 94 30 7b 	call	0xf660	; 0xf660 <__fixsfsi>
    1baa:	d8 01       	movw	r26, r16
    1bac:	6d 93       	st	X+, r22
    1bae:	7c 93       	st	X, r23
    1bb0:	8f ed       	ldi	r24, 0xDF	; 223
    1bb2:	95 e0       	ldi	r25, 0x05	; 5
    1bb4:	89 a8       	ldd	r8, Y+49	; 0x31
    1bb6:	9a a8       	ldd	r9, Y+50	; 0x32
    1bb8:	ab a8       	ldd	r10, Y+51	; 0x33
    1bba:	bc a8       	ldd	r11, Y+52	; 0x34
    1bbc:	cd a8       	ldd	r12, Y+53	; 0x35
    1bbe:	de a8       	ldd	r13, Y+54	; 0x36
    1bc0:	ef a8       	ldd	r14, Y+55	; 0x37
    1bc2:	f8 ac       	ldd	r15, Y+56	; 0x38
    1bc4:	09 ad       	ldd	r16, Y+57	; 0x39
    1bc6:	1a ad       	ldd	r17, Y+58	; 0x3a
    1bc8:	2b ad       	ldd	r18, Y+59	; 0x3b
    1bca:	3c ad       	ldd	r19, Y+60	; 0x3c
    1bcc:	4d ad       	ldd	r20, Y+61	; 0x3d
    1bce:	5e ad       	ldd	r21, Y+62	; 0x3e
    1bd0:	6f ad       	ldd	r22, Y+63	; 0x3f
    1bd2:	21 96       	adiw	r28, 0x01	; 1
    1bd4:	7f ad       	ldd	r23, Y+63	; 0x3f
    1bd6:	21 97       	sbiw	r28, 0x01	; 1
    1bd8:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZN6Events3addE7MOVDATAi>
    comienzo += tps; 
    1bdc:	c8 55       	subi	r28, 0x58	; 88
    1bde:	df 4f       	sbci	r29, 0xFF	; 255
    1be0:	68 81       	ld	r22, Y
    1be2:	79 81       	ldd	r23, Y+1	; 0x01
    1be4:	8a 81       	ldd	r24, Y+2	; 0x02
    1be6:	9b 81       	ldd	r25, Y+3	; 0x03
    1be8:	c8 5a       	subi	r28, 0xA8	; 168
    1bea:	d0 40       	sbci	r29, 0x00	; 0
    1bec:	e6 96       	adiw	r28, 0x36	; 54
    1bee:	2c ad       	ldd	r18, Y+60	; 0x3c
    1bf0:	3d ad       	ldd	r19, Y+61	; 0x3d
    1bf2:	4e ad       	ldd	r20, Y+62	; 0x3e
    1bf4:	5f ad       	ldd	r21, Y+63	; 0x3f
    1bf6:	e6 97       	sbiw	r28, 0x36	; 54
    1bf8:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    1bfc:	c8 55       	subi	r28, 0x58	; 88
    1bfe:	df 4f       	sbci	r29, 0xFF	; 255
    1c00:	68 83       	st	Y, r22
    1c02:	79 83       	std	Y+1, r23	; 0x01
    1c04:	8a 83       	std	Y+2, r24	; 0x02
    1c06:	9b 83       	std	Y+3, r25	; 0x03
    1c08:	c8 5a       	subi	r28, 0xA8	; 168
    1c0a:	d0 40       	sbci	r29, 0x00	; 0
  } else { 
    origen = (COORD3D) {0, 0, 0};
    punto = origen;
    last = punto;
  }
  for (byte i=0; i<nsegmentos; i++) {
    1c0c:	e2 96       	adiw	r28, 0x32	; 50
    1c0e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1c10:	e2 97       	sbiw	r28, 0x32	; 50
    1c12:	bf 5f       	subi	r27, 0xFF	; 255
    1c14:	e2 96       	adiw	r28, 0x32	; 50
    1c16:	bf af       	std	Y+63, r27	; 0x3f
    1c18:	e2 97       	sbiw	r28, 0x32	; 50
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	e2 96       	adiw	r28, 0x32	; 50
    1c20:	ef ad       	ldd	r30, Y+63	; 0x3f
    1c22:	e2 97       	sbiw	r28, 0x32	; 50
    1c24:	c2 55       	subi	r28, 0x52	; 82
    1c26:	df 4f       	sbci	r29, 0xFF	; 255
    1c28:	f8 81       	ld	r31, Y
    1c2a:	ce 5a       	subi	r28, 0xAE	; 174
    1c2c:	d0 40       	sbci	r29, 0x00	; 0
    1c2e:	ef 17       	cp	r30, r31
    1c30:	08 f4       	brcc	.+2      	; 0x1c34 <_ZN10Movimiento6pasitoEh7COORD3DbfihS0_+0x768>
    1c32:	ef cd       	rjmp	.-1058   	; 0x1812 <_ZN10Movimiento6pasitoEh7COORD3DbfihS0_+0x346>
    punto.y = bezier (origen.y, manejador.y, destino.y, t);
    punto.z = bezier (origen.z, manejador.z, destino.z, t);
    eventos.add ((MOVDATA) {patas, resta (punto, last), tps, absolute}, comienzo);  
    comienzo += tps; 
  } 
    1c34:	cd 56       	subi	r28, 0x6D	; 109
    1c36:	df 4f       	sbci	r29, 0xFF	; 255
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	f8 94       	cli
    1c3c:	de bf       	out	0x3e, r29	; 62
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	cd bf       	out	0x3d, r28	; 61
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	1f 91       	pop	r17
    1c48:	0f 91       	pop	r16
    1c4a:	ff 90       	pop	r15
    1c4c:	ef 90       	pop	r14
    1c4e:	df 90       	pop	r13
    1c50:	cf 90       	pop	r12
    1c52:	bf 90       	pop	r11
    1c54:	af 90       	pop	r10
    1c56:	9f 90       	pop	r9
    1c58:	8f 90       	pop	r8
    1c5a:	7f 90       	pop	r7
    1c5c:	6f 90       	pop	r6
    1c5e:	5f 90       	pop	r5
    1c60:	4f 90       	pop	r4
    1c62:	3f 90       	pop	r3
    1c64:	2f 90       	pop	r2
    1c66:	08 95       	ret

00001c68 <_ZN10Movimiento8posicionEP7COORD3Dii>:
void Movimiento::actual_pos_ref () { 
  memcpy (sh.mv.pos_ref, pos_des, 6*sizeof(COORD3D));
}

// adopta una posición directamente
void Movimiento::posicion (COORD3D posicion[], int comienzo, int duracion) {
    1c68:	2f 92       	push	r2
    1c6a:	3f 92       	push	r3
    1c6c:	4f 92       	push	r4
    1c6e:	5f 92       	push	r5
    1c70:	6f 92       	push	r6
    1c72:	7f 92       	push	r7
    1c74:	8f 92       	push	r8
    1c76:	9f 92       	push	r9
    1c78:	af 92       	push	r10
    1c7a:	bf 92       	push	r11
    1c7c:	cf 92       	push	r12
    1c7e:	df 92       	push	r13
    1c80:	ef 92       	push	r14
    1c82:	ff 92       	push	r15
    1c84:	0f 93       	push	r16
    1c86:	1f 93       	push	r17
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	a0 97       	sbiw	r28, 0x20	; 32
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	de bf       	out	0x3e, r29	; 62
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	cd bf       	out	0x3d, r28	; 61
    1c9c:	5e 8f       	std	Y+30, r21	; 0x1e
    1c9e:	4d 8f       	std	Y+29, r20	; 0x1d
    1ca0:	19 01       	movw	r2, r18
    1ca2:	2b 01       	movw	r4, r22
    1ca4:	66 24       	eor	r6, r6
    1ca6:	77 24       	eor	r7, r7
  for (byte pata=0; pata<6; pata++) {
    eventos.add ((MOVDATA) {1<<pata, posicion[pata], duracion, true}, comienzo); 
    1ca8:	ce 01       	movw	r24, r28
    1caa:	0d 96       	adiw	r24, 0x0d	; 13
    1cac:	98 a3       	std	Y+32, r25	; 0x20
    1cae:	8f 8f       	std	Y+31, r24	; 0x1f
    1cb0:	de 01       	movw	r26, r28
    1cb2:	11 96       	adiw	r26, 0x01	; 1
    1cb4:	f2 01       	movw	r30, r4
    1cb6:	8c e0       	ldi	r24, 0x0C	; 12
    1cb8:	01 90       	ld	r0, Z+
    1cba:	0d 92       	st	X+, r0
    1cbc:	81 50       	subi	r24, 0x01	; 1
    1cbe:	e1 f7       	brne	.-8      	; 0x1cb8 <_ZN10Movimiento8posicionEP7COORD3Dii+0x50>
    1cc0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1cc2:	f8 a1       	ldd	r31, Y+32	; 0x20
    1cc4:	80 e1       	ldi	r24, 0x10	; 16
    1cc6:	11 92       	st	Z+, r1
    1cc8:	8a 95       	dec	r24
    1cca:	e9 f7       	brne	.-6      	; 0x1cc6 <_ZN10Movimiento8posicionEP7COORD3Dii+0x5e>
    1ccc:	de 01       	movw	r26, r28
    1cce:	1e 96       	adiw	r26, 0x0e	; 14
    1cd0:	fe 01       	movw	r30, r28
    1cd2:	31 96       	adiw	r30, 0x01	; 1
    1cd4:	8c e0       	ldi	r24, 0x0C	; 12
    1cd6:	01 90       	ld	r0, Z+
    1cd8:	0d 92       	st	X+, r0
    1cda:	81 50       	subi	r24, 0x01	; 1
    1cdc:	e1 f7       	brne	.-8      	; 0x1cd6 <_ZN10Movimiento8posicionEP7COORD3Dii+0x6e>
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	06 2c       	mov	r0, r6
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <_ZN10Movimiento8posicionEP7COORD3Dii+0x82>
    1ce6:	88 0f       	add	r24, r24
    1ce8:	99 1f       	adc	r25, r25
    1cea:	0a 94       	dec	r0
    1cec:	e2 f7       	brpl	.-8      	; 0x1ce6 <_ZN10Movimiento8posicionEP7COORD3Dii+0x7e>
    1cee:	8d 87       	std	Y+13, r24	; 0x0d
    1cf0:	3b 8e       	std	Y+27, r3	; 0x1b
    1cf2:	2a 8e       	std	Y+26, r2	; 0x1a
    1cf4:	91 e0       	ldi	r25, 0x01	; 1
    1cf6:	9c 8f       	std	Y+28, r25	; 0x1c
    1cf8:	00 d0       	rcall	.+0      	; 0x1cfa <_ZN10Movimiento8posicionEP7COORD3Dii+0x92>
    1cfa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cfc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cfe:	ed b7       	in	r30, 0x3d	; 61
    1d00:	fe b7       	in	r31, 0x3e	; 62
    1d02:	92 83       	std	Z+2, r25	; 0x02
    1d04:	81 83       	std	Z+1, r24	; 0x01
    1d06:	8f ed       	ldi	r24, 0xDF	; 223
    1d08:	95 e0       	ldi	r25, 0x05	; 5
    1d0a:	8d 84       	ldd	r8, Y+13	; 0x0d
    1d0c:	9e 84       	ldd	r9, Y+14	; 0x0e
    1d0e:	af 84       	ldd	r10, Y+15	; 0x0f
    1d10:	b8 88       	ldd	r11, Y+16	; 0x10
    1d12:	c9 88       	ldd	r12, Y+17	; 0x11
    1d14:	da 88       	ldd	r13, Y+18	; 0x12
    1d16:	eb 88       	ldd	r14, Y+19	; 0x13
    1d18:	fc 88       	ldd	r15, Y+20	; 0x14
    1d1a:	0d 89       	ldd	r16, Y+21	; 0x15
    1d1c:	1e 89       	ldd	r17, Y+22	; 0x16
    1d1e:	2f 89       	ldd	r18, Y+23	; 0x17
    1d20:	38 8d       	ldd	r19, Y+24	; 0x18
    1d22:	49 8d       	ldd	r20, Y+25	; 0x19
    1d24:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1d26:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1d28:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1d2a:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZN6Events3addE7MOVDATAi>
    1d2e:	08 94       	sec
    1d30:	61 1c       	adc	r6, r1
    1d32:	71 1c       	adc	r7, r1
    1d34:	ec e0       	ldi	r30, 0x0C	; 12
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	4e 0e       	add	r4, r30
    1d3a:	5f 1e       	adc	r5, r31
  memcpy (sh.mv.pos_ref, pos_des, 6*sizeof(COORD3D));
}

// adopta una posición directamente
void Movimiento::posicion (COORD3D posicion[], int comienzo, int duracion) {
  for (byte pata=0; pata<6; pata++) {
    1d3c:	0f 90       	pop	r0
    1d3e:	0f 90       	pop	r0
    1d40:	f6 e0       	ldi	r31, 0x06	; 6
    1d42:	6f 16       	cp	r6, r31
    1d44:	71 04       	cpc	r7, r1
    1d46:	09 f0       	breq	.+2      	; 0x1d4a <_ZN10Movimiento8posicionEP7COORD3Dii+0xe2>
    1d48:	b3 cf       	rjmp	.-154    	; 0x1cb0 <_ZN10Movimiento8posicionEP7COORD3Dii+0x48>
    eventos.add ((MOVDATA) {1<<pata, posicion[pata], duracion, true}, comienzo); 
  }
}
    1d4a:	a0 96       	adiw	r28, 0x20	; 32
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	f8 94       	cli
    1d50:	de bf       	out	0x3e, r29	; 62
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	cd bf       	out	0x3d, r28	; 61
    1d56:	cf 91       	pop	r28
    1d58:	df 91       	pop	r29
    1d5a:	1f 91       	pop	r17
    1d5c:	0f 91       	pop	r16
    1d5e:	ff 90       	pop	r15
    1d60:	ef 90       	pop	r14
    1d62:	df 90       	pop	r13
    1d64:	cf 90       	pop	r12
    1d66:	bf 90       	pop	r11
    1d68:	af 90       	pop	r10
    1d6a:	9f 90       	pop	r9
    1d6c:	8f 90       	pop	r8
    1d6e:	7f 90       	pop	r7
    1d70:	6f 90       	pop	r6
    1d72:	5f 90       	pop	r5
    1d74:	4f 90       	pop	r4
    1d76:	3f 90       	pop	r3
    1d78:	2f 90       	pop	r2
    1d7a:	08 95       	ret

00001d7c <_ZN10Movimiento14actual_pos_refEv>:
void Movimiento::set_pos_ref (COORD3D *pos_ref) {
  memcpy (sh.mv.pos_ref, pos_ref, 6*sizeof(COORD3D));
}

void Movimiento::actual_pos_ref () { 
  memcpy (sh.mv.pos_ref, pos_des, 6*sizeof(COORD3D));
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	a8 56       	subi	r26, 0x68	; 104
    1d80:	be 4f       	sbci	r27, 0xFE	; 254
    1d82:	e4 e5       	ldi	r30, 0x54	; 84
    1d84:	f2 e1       	ldi	r31, 0x12	; 18
    1d86:	88 e4       	ldi	r24, 0x48	; 72
    1d88:	01 90       	ld	r0, Z+
    1d8a:	0d 92       	st	X+, r0
    1d8c:	81 50       	subi	r24, 0x01	; 1
    1d8e:	e1 f7       	brne	.-8      	; 0x1d88 <_ZN10Movimiento14actual_pos_refEv+0xc>
}
    1d90:	08 95       	ret

00001d92 <_ZN10Movimiento11set_pos_refEP7COORD3D>:


///////////////////////////////////////// MISC. & PRIVATE /////////////////////////////////////////

void Movimiento::set_pos_ref (COORD3D *pos_ref) {
  memcpy (sh.mv.pos_ref, pos_ref, 6*sizeof(COORD3D));
    1d92:	dc 01       	movw	r26, r24
    1d94:	a8 56       	subi	r26, 0x68	; 104
    1d96:	be 4f       	sbci	r27, 0xFE	; 254
    1d98:	fb 01       	movw	r30, r22
    1d9a:	88 e4       	ldi	r24, 0x48	; 72
    1d9c:	01 90       	ld	r0, Z+
    1d9e:	0d 92       	st	X+, r0
    1da0:	81 50       	subi	r24, 0x01	; 1
    1da2:	e1 f7       	brne	.-8      	; 0x1d9c <_ZN10Movimiento11set_pos_refEP7COORD3D+0xa>
}
    1da4:	08 95       	ret

00001da6 <_ZN10Movimiento12goto_pos_refEv>:
void Movimiento::goto_pos_ref (COORD3D posicion[]) {
	set_pos_ref (posicion);
	goto_pos_ref ();
}
	
void Movimiento::goto_pos_ref () {
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	00 d0       	rcall	.+0      	; 0x1dac <_ZN10Movimiento12goto_pos_refEv+0x6>
    1dac:	00 d0       	rcall	.+0      	; 0x1dae <_ZN10Movimiento12goto_pos_refEv+0x8>
    1dae:	00 d0       	rcall	.+0      	; 0x1db0 <_ZN10Movimiento12goto_pos_refEv+0xa>
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	fc 01       	movw	r30, r24
  // esto por ahora está harcodeado, y muy probablemente se mantenga asi
	wk.mv.vector = (COORD2D) {0, 0};
    1db6:	9c 01       	movw	r18, r24
    1db8:	27 55       	subi	r18, 0x57	; 87
    1dba:	3f 4f       	sbci	r19, 0xFF	; 255
    1dbc:	4d e1       	ldi	r20, 0x1D	; 29
    1dbe:	54 e0       	ldi	r21, 0x04	; 4
    1dc0:	88 e0       	ldi	r24, 0x08	; 8
    1dc2:	da 01       	movw	r26, r20
    1dc4:	0d 90       	ld	r0, X+
    1dc6:	ad 01       	movw	r20, r26
    1dc8:	d9 01       	movw	r26, r18
    1dca:	0d 92       	st	X+, r0
    1dcc:	9d 01       	movw	r18, r26
    1dce:	81 50       	subi	r24, 0x01	; 1
    1dd0:	c1 f7       	brne	.-16     	; 0x1dc2 <_ZN10Movimiento12goto_pos_refEv+0x1c>
	wk.mv.rotacion = 0;
    1dd2:	ef 54       	subi	r30, 0x4F	; 79
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	a0 e0       	ldi	r26, 0x00	; 0
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	80 83       	st	Z, r24
    1de0:	91 83       	std	Z+1, r25	; 0x01
    1de2:	a2 83       	std	Z+2, r26	; 0x02
    1de4:	b3 83       	std	Z+3, r27	; 0x03
	sh.mv.ticks = 90;
    1de6:	ef 5c       	subi	r30, 0xCF	; 207
    1de8:	fe 4f       	sbci	r31, 0xFE	; 254
    1dea:	8a e5       	ldi	r24, 0x5A	; 90
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	91 83       	std	Z+1, r25	; 0x01
    1df0:	80 83       	st	Z, r24
    1df2:	e2 5e       	subi	r30, 0xE2	; 226
    1df4:	f1 40       	sbci	r31, 0x01	; 1
	memcpy (wk.mv.secuencia, (byte[]) {8, 2, 32, 1, 16, 4}, 6);
    1df6:	9e 01       	movw	r18, r28
    1df8:	2f 5f       	subi	r18, 0xFF	; 255
    1dfa:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfc:	47 e1       	ldi	r20, 0x17	; 23
    1dfe:	54 e0       	ldi	r21, 0x04	; 4
    1e00:	86 e0       	ldi	r24, 0x06	; 6
    1e02:	da 01       	movw	r26, r20
    1e04:	0d 90       	ld	r0, X+
    1e06:	ad 01       	movw	r20, r26
    1e08:	d9 01       	movw	r26, r18
    1e0a:	0d 92       	st	X+, r0
    1e0c:	9d 01       	movw	r18, r26
    1e0e:	81 50       	subi	r24, 0x01	; 1
    1e10:	c1 f7       	brne	.-16     	; 0x1e02 <_ZN10Movimiento12goto_pos_refEv+0x5c>
    1e12:	9f 01       	movw	r18, r30
    1e14:	2b 54       	subi	r18, 0x4B	; 75
    1e16:	3f 4f       	sbci	r19, 0xFF	; 255
    1e18:	ae 01       	movw	r20, r28
    1e1a:	4f 5f       	subi	r20, 0xFF	; 255
    1e1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e1e:	86 e0       	ldi	r24, 0x06	; 6
    1e20:	da 01       	movw	r26, r20
    1e22:	0d 90       	ld	r0, X+
    1e24:	ad 01       	movw	r20, r26
    1e26:	d9 01       	movw	r26, r18
    1e28:	0d 92       	st	X+, r0
    1e2a:	9d 01       	movw	r18, r26
    1e2c:	81 50       	subi	r24, 0x01	; 1
    1e2e:	c1 f7       	brne	.-16     	; 0x1e20 <_ZN10Movimiento12goto_pos_refEv+0x7a>
	wk.mv.fases = 6;
    1e30:	e5 54       	subi	r30, 0x45	; 69
    1e32:	ff 4f       	sbci	r31, 0xFF	; 255
    1e34:	86 e0       	ldi	r24, 0x06	; 6
    1e36:	81 93       	st	Z+, r24
	wk.mv.agrupamiento = 1;
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	80 83       	st	Z, r24
	sh.mv.escala = 1;
    1e3c:	ec 5d       	subi	r30, 0xDC	; 220
    1e3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e40:	80 83       	st	Z, r24
	wk.mv.periodo_sub_ciclo = 15;
    1e42:	e3 52       	subi	r30, 0x23	; 35
    1e44:	f1 40       	sbci	r31, 0x01	; 1
    1e46:	8f e0       	ldi	r24, 0x0F	; 15
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	81 93       	st	Z+, r24
    1e4c:	91 93       	st	Z+, r25
	wk.mv.periodo_pasos = 15;
    1e4e:	81 93       	st	Z+, r24
    1e50:	91 93       	st	Z+, r25
	wk.mv.duracion_pasos = 60;
    1e52:	8c e3       	ldi	r24, 0x3C	; 60
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	91 83       	std	Z+1, r25	; 0x01
    1e58:	80 83       	st	Z, r24
	wk.mv.altura_pasito = 10;
    1e5a:	33 96       	adiw	r30, 0x03	; 3
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	a0 e2       	ldi	r26, 0x20	; 32
    1e62:	b1 e4       	ldi	r27, 0x41	; 65
    1e64:	80 83       	st	Z, r24
    1e66:	91 83       	std	Z+1, r25	; 0x01
    1e68:	a2 83       	std	Z+2, r26	; 0x02
    1e6a:	b3 83       	std	Z+3, r27	; 0x03
	sh.mv.nsegmentos = 7;
    1e6c:	e3 5e       	subi	r30, 0xE3	; 227
    1e6e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e70:	87 e0       	ldi	r24, 0x07	; 7
    1e72:	80 83       	st	Z, r24
    1e74:	e1 5e       	subi	r30, 0xE1	; 225
    1e76:	f1 40       	sbci	r31, 0x01	; 1
	caminata (false);
    1e78:	cf 01       	movw	r24, r30
    1e7a:	60 e0       	ldi	r22, 0x00	; 0
    1e7c:	0e 94 c4 29 	call	0x5388	; 0x5388 <_ZN10Movimiento8caminataEb>
}
    1e80:	26 96       	adiw	r28, 0x06	; 6
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	f8 94       	cli
    1e86:	de bf       	out	0x3e, r29	; 62
    1e88:	0f be       	out	0x3f, r0	; 63
    1e8a:	cd bf       	out	0x3d, r28	; 61
    1e8c:	cf 91       	pop	r28
    1e8e:	df 91       	pop	r29
    1e90:	08 95       	ret

00001e92 <_ZN10Movimiento12goto_pos_refEP7COORD3D>:
    eventos.add ((MOVDATA) {1<<pata, posicion[pata], duracion, true}, comienzo); 
  }
}

// adopta una posición indirectamente, dando "pasitos"
void Movimiento::goto_pos_ref (COORD3D posicion[]) {
    1e92:	0f 93       	push	r16
    1e94:	1f 93       	push	r17
    1e96:	8c 01       	movw	r16, r24
	set_pos_ref (posicion);
    1e98:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <_ZN10Movimiento11set_pos_refEP7COORD3D>
	goto_pos_ref ();
    1e9c:	c8 01       	movw	r24, r16
    1e9e:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <_ZN10Movimiento12goto_pos_refEv>
}
    1ea2:	1f 91       	pop	r17
    1ea4:	0f 91       	pop	r16
    1ea6:	08 95       	ret

00001ea8 <_ZN10Movimiento13osc_randomizeEffhf>:
	}
}

// prueba de randomizador
// nota: el centro de rotación tendría que ser una referencia seteable en la clase "movimiento", y su oscilación en torno a ella --> hecho
void Movimiento::osc_randomize (float amplitud, float frecuencia, byte parameters_flag, float curvature) { 
    1ea8:	2f 92       	push	r2
    1eaa:	3f 92       	push	r3
    1eac:	4f 92       	push	r4
    1eae:	5f 92       	push	r5
    1eb0:	6f 92       	push	r6
    1eb2:	7f 92       	push	r7
    1eb4:	8f 92       	push	r8
    1eb6:	9f 92       	push	r9
    1eb8:	af 92       	push	r10
    1eba:	bf 92       	push	r11
    1ebc:	cf 92       	push	r12
    1ebe:	df 92       	push	r13
    1ec0:	ef 92       	push	r14
    1ec2:	ff 92       	push	r15
    1ec4:	0f 93       	push	r16
    1ec6:	1f 93       	push	r17
    1ec8:	df 93       	push	r29
    1eca:	cf 93       	push	r28
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    1ed0:	2e 97       	sbiw	r28, 0x0e	; 14
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	de bf       	out	0x3e, r29	; 62
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	cd bf       	out	0x3d, r28	; 61
    1edc:	4a 83       	std	Y+2, r20	; 0x02
    1ede:	5b 83       	std	Y+3, r21	; 0x03
    1ee0:	6c 83       	std	Y+4, r22	; 0x04
    1ee2:	7d 83       	std	Y+5, r23	; 0x05
    1ee4:	18 01       	movw	r2, r16
    1ee6:	29 01       	movw	r4, r18
    1ee8:	ae 82       	std	Y+6, r10	; 0x06
    1eea:	bf 82       	std	Y+7, r11	; 0x07
    1eec:	c8 86       	std	Y+8, r12	; 0x08
    1eee:	d9 86       	std	Y+9, r13	; 0x09
    1ef0:	88 24       	eor	r8, r8
    1ef2:	99 24       	eor	r9, r9
    1ef4:	19 82       	std	Y+1, r1	; 0x01
	/* parameters_flag = bit0 traslaciones, bit1 centro, bit2 rotaciones; default 7 o sea todo.
	   curvature afecta a las amplitudes, default = 3 o sea, tienden a 0   */
	for (byte index=0; index<3; index++) {
		bool active = parameters_flag & (1<<index);
    1ef6:	6e 2d       	mov	r22, r14
    1ef8:	70 e0       	ldi	r23, 0x00	; 0
    1efa:	7c 87       	std	Y+12, r23	; 0x0c
    1efc:	6b 87       	std	Y+11, r22	; 0x0b
    1efe:	6b 84       	ldd	r6, Y+11	; 0x0b
    1f00:	7c 84       	ldd	r7, Y+12	; 0x0c
    1f02:	08 2c       	mov	r0, r8
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <_ZN10Movimiento13osc_randomizeEffhf+0x62>
    1f06:	75 94       	asr	r7
    1f08:	67 94       	ror	r6
    1f0a:	0a 94       	dec	r0
    1f0c:	e2 f7       	brpl	.-8      	; 0x1f06 <_ZN10Movimiento13osc_randomizeEffhf+0x5e>
    1f0e:	71 e0       	ldi	r23, 0x01	; 1
    1f10:	67 22       	and	r6, r23
    1f12:	77 24       	eor	r7, r7
    1f14:	1e 86       	std	Y+14, r1	; 0x0e
    1f16:	1d 86       	std	Y+13, r1	; 0x0d
		for (byte subindex=0; subindex<3; subindex++) {
			float amp=0, freq=0, fase=0;
			if (active) {
				amp	= amplitud * log_random (curvature);
    1f18:	8a 86       	std	Y+10, r8	; 0x0a
	   curvature afecta a las amplitudes, default = 3 o sea, tienden a 0   */
	for (byte index=0; index<3; index++) {
		bool active = parameters_flag & (1<<index);
		for (byte subindex=0; subindex<3; subindex++) {
			float amp=0, freq=0, fase=0;
			if (active) {
    1f1a:	61 14       	cp	r6, r1
    1f1c:	71 04       	cpc	r7, r1
    1f1e:	79 f4       	brne	.+30     	; 0x1f3e <_ZN10Movimiento13osc_randomizeEffhf+0x96>
    1f20:	0f 2e       	mov	r0, r31
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	af 2e       	mov	r10, r31
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	bf 2e       	mov	r11, r31
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	cf 2e       	mov	r12, r31
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	df 2e       	mov	r13, r31
    1f32:	f0 2d       	mov	r31, r0
    1f34:	86 01       	movw	r16, r12
    1f36:	75 01       	movw	r14, r10
    1f38:	a6 01       	movw	r20, r12
    1f3a:	95 01       	movw	r18, r10
    1f3c:	4d c0       	rjmp	.+154    	; 0x1fd8 <_ZN10Movimiento13osc_randomizeEffhf+0x130>
				amp	= amplitud * log_random (curvature);
    1f3e:	6e 81       	ldd	r22, Y+6	; 0x06
    1f40:	7f 81       	ldd	r23, Y+7	; 0x07
    1f42:	88 85       	ldd	r24, Y+8	; 0x08
    1f44:	99 85       	ldd	r25, Y+9	; 0x09
    1f46:	0e 94 76 72 	call	0xe4ec	; 0xe4ec <_Z10log_randomf>
    1f4a:	9b 01       	movw	r18, r22
    1f4c:	ac 01       	movw	r20, r24
    1f4e:	6a 81       	ldd	r22, Y+2	; 0x02
    1f50:	7b 81       	ldd	r23, Y+3	; 0x03
    1f52:	8c 81       	ldd	r24, Y+4	; 0x04
    1f54:	9d 81       	ldd	r25, Y+5	; 0x05
    1f56:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    1f5a:	5b 01       	movw	r10, r22
    1f5c:	6c 01       	movw	r12, r24
				if (index==1) {amp *= 2;}                           // para el centro, más efecto       
    1f5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f60:	81 30       	cpi	r24, 0x01	; 1
    1f62:	39 f4       	brne	.+14     	; 0x1f72 <_ZN10Movimiento13osc_randomizeEffhf+0xca>
    1f64:	c6 01       	movw	r24, r12
    1f66:	b5 01       	movw	r22, r10
    1f68:	a6 01       	movw	r20, r12
    1f6a:	95 01       	movw	r18, r10
    1f6c:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    1f70:	0b c0       	rjmp	.+22     	; 0x1f88 <_ZN10Movimiento13osc_randomizeEffhf+0xe0>
				else if (index == 2) {amp /= 15;}                    // para los ángulos, radio=15
    1f72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f74:	92 30       	cpi	r25, 0x02	; 2
    1f76:	51 f4       	brne	.+20     	; 0x1f8c <_ZN10Movimiento13osc_randomizeEffhf+0xe4>
    1f78:	c6 01       	movw	r24, r12
    1f7a:	b5 01       	movw	r22, r10
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	40 e7       	ldi	r20, 0x70	; 112
    1f82:	51 e4       	ldi	r21, 0x41	; 65
    1f84:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    1f88:	5b 01       	movw	r10, r22
    1f8a:	6c 01       	movw	r12, r24
				freq = random (frecuencia/3, frecuencia*3);
    1f8c:	c2 01       	movw	r24, r4
    1f8e:	b1 01       	movw	r22, r2
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e4       	ldi	r20, 0x40	; 64
    1f96:	50 e4       	ldi	r21, 0x40	; 64
    1f98:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    1f9c:	7b 01       	movw	r14, r22
    1f9e:	8c 01       	movw	r16, r24
    1fa0:	c2 01       	movw	r24, r4
    1fa2:	b1 01       	movw	r22, r2
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	40 e4       	ldi	r20, 0x40	; 64
    1faa:	50 e4       	ldi	r21, 0x40	; 64
    1fac:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    1fb0:	9b 01       	movw	r18, r22
    1fb2:	ac 01       	movw	r20, r24
    1fb4:	c8 01       	movw	r24, r16
    1fb6:	b7 01       	movw	r22, r14
    1fb8:	0e 94 c7 71 	call	0xe38e	; 0xe38e <_Z6randomff>
    1fbc:	7b 01       	movw	r14, r22
    1fbe:	8c 01       	movw	r16, r24
				fase = random (-PI, PI);
    1fc0:	6b ed       	ldi	r22, 0xDB	; 219
    1fc2:	7f e0       	ldi	r23, 0x0F	; 15
    1fc4:	89 e4       	ldi	r24, 0x49	; 73
    1fc6:	90 ec       	ldi	r25, 0xC0	; 192
    1fc8:	2b ed       	ldi	r18, 0xDB	; 219
    1fca:	3f e0       	ldi	r19, 0x0F	; 15
    1fcc:	49 e4       	ldi	r20, 0x49	; 73
    1fce:	50 e4       	ldi	r21, 0x40	; 64
    1fd0:	0e 94 c7 71 	call	0xe38e	; 0xe38e <_Z6randomff>
    1fd4:	9b 01       	movw	r18, r22
    1fd6:	ac 01       	movw	r20, r24
}

///////////////////////////////////////// OSCILADORES /////////////////////////////////////////

void Movimiento::set_oscilador (byte parametro, float amplitud, float frecuencia, float fase, bool brown) {
	bd.oscilator [parametro] = (OSCILATOR) {amplitud, frecuencia, fase, brown};
    1fd8:	89 81       	ldd	r24, Y+1	; 0x01
    1fda:	ed 85       	ldd	r30, Y+13	; 0x0d
    1fdc:	8e 0f       	add	r24, r30
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	6d e0       	ldi	r22, 0x0D	; 13
    1fe2:	70 e0       	ldi	r23, 0x00	; 0
    1fe4:	86 9f       	mul	r24, r22
    1fe6:	f0 01       	movw	r30, r0
    1fe8:	87 9f       	mul	r24, r23
    1fea:	f0 0d       	add	r31, r0
    1fec:	96 9f       	mul	r25, r22
    1fee:	f0 0d       	add	r31, r0
    1ff0:	11 24       	eor	r1, r1
    1ff2:	eb 51       	subi	r30, 0x1B	; 27
    1ff4:	f0 4f       	sbci	r31, 0xF0	; 240
    1ff6:	a4 82       	std	Z+4, r10	; 0x04
    1ff8:	b5 82       	std	Z+5, r11	; 0x05
    1ffa:	c6 82       	std	Z+6, r12	; 0x06
    1ffc:	d7 82       	std	Z+7, r13	; 0x07
    1ffe:	e0 86       	std	Z+8, r14	; 0x08
    2000:	f1 86       	std	Z+9, r15	; 0x09
    2002:	02 87       	std	Z+10, r16	; 0x0a
    2004:	13 87       	std	Z+11, r17	; 0x0b
    2006:	24 87       	std	Z+12, r18	; 0x0c
    2008:	35 87       	std	Z+13, r19	; 0x0d
    200a:	46 87       	std	Z+14, r20	; 0x0e
    200c:	57 87       	std	Z+15, r21	; 0x0f
    200e:	10 8a       	std	Z+16, r1	; 0x10
    2010:	8d 85       	ldd	r24, Y+13	; 0x0d
    2012:	9e 85       	ldd	r25, Y+14	; 0x0e
    2014:	01 96       	adiw	r24, 0x01	; 1
    2016:	9e 87       	std	Y+14, r25	; 0x0e
    2018:	8d 87       	std	Y+13, r24	; 0x0d
void Movimiento::osc_randomize (float amplitud, float frecuencia, byte parameters_flag, float curvature) { 
	/* parameters_flag = bit0 traslaciones, bit1 centro, bit2 rotaciones; default 7 o sea todo.
	   curvature afecta a las amplitudes, default = 3 o sea, tienden a 0   */
	for (byte index=0; index<3; index++) {
		bool active = parameters_flag & (1<<index);
		for (byte subindex=0; subindex<3; subindex++) {
    201a:	03 97       	sbiw	r24, 0x03	; 3
    201c:	09 f0       	breq	.+2      	; 0x2020 <_ZN10Movimiento13osc_randomizeEffhf+0x178>
    201e:	7d cf       	rjmp	.-262    	; 0x1f1a <_ZN10Movimiento13osc_randomizeEffhf+0x72>
    2020:	08 94       	sec
    2022:	81 1c       	adc	r8, r1
    2024:	91 1c       	adc	r9, r1
    2026:	99 81       	ldd	r25, Y+1	; 0x01
    2028:	9d 5f       	subi	r25, 0xFD	; 253
    202a:	99 83       	std	Y+1, r25	; 0x01
// prueba de randomizador
// nota: el centro de rotación tendría que ser una referencia seteable en la clase "movimiento", y su oscilación en torno a ella --> hecho
void Movimiento::osc_randomize (float amplitud, float frecuencia, byte parameters_flag, float curvature) { 
	/* parameters_flag = bit0 traslaciones, bit1 centro, bit2 rotaciones; default 7 o sea todo.
	   curvature afecta a las amplitudes, default = 3 o sea, tienden a 0   */
	for (byte index=0; index<3; index++) {
    202c:	99 30       	cpi	r25, 0x09	; 9
    202e:	09 f0       	breq	.+2      	; 0x2032 <_ZN10Movimiento13osc_randomizeEffhf+0x18a>
    2030:	66 cf       	rjmp	.-308    	; 0x1efe <_ZN10Movimiento13osc_randomizeEffhf+0x56>
				fase = random (-PI, PI);
			}
			mov.set_oscilador (3*index+subindex, amp, freq, fase, false);
		}
	}
}
    2032:	2e 96       	adiw	r28, 0x0e	; 14
    2034:	0f b6       	in	r0, 0x3f	; 63
    2036:	f8 94       	cli
    2038:	de bf       	out	0x3e, r29	; 62
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	cd bf       	out	0x3d, r28	; 61
    203e:	cf 91       	pop	r28
    2040:	df 91       	pop	r29
    2042:	1f 91       	pop	r17
    2044:	0f 91       	pop	r16
    2046:	ff 90       	pop	r15
    2048:	ef 90       	pop	r14
    204a:	df 90       	pop	r13
    204c:	cf 90       	pop	r12
    204e:	bf 90       	pop	r11
    2050:	af 90       	pop	r10
    2052:	9f 90       	pop	r9
    2054:	8f 90       	pop	r8
    2056:	7f 90       	pop	r7
    2058:	6f 90       	pop	r6
    205a:	5f 90       	pop	r5
    205c:	4f 90       	pop	r4
    205e:	3f 90       	pop	r3
    2060:	2f 90       	pop	r2
    2062:	08 95       	ret

00002064 <_ZN10Movimiento9osciladorEfi>:

void Movimiento::set_brown (byte parametro, bool value) {
	bd.oscilator [parametro].brown = value;
}

void Movimiento::oscilador (float frecuencia_fund, int duracion) {
    2064:	cf 92       	push	r12
    2066:	df 92       	push	r13
    2068:	ef 92       	push	r14
    206a:	ff 92       	push	r15
    206c:	0f 93       	push	r16
    206e:	1f 93       	push	r17
    2070:	8c 01       	movw	r16, r24
    2072:	69 01       	movw	r12, r18
  // duración en TICKS (4ms), igual que en las rutinas del tronco, en la 'event', en la 'pasito'
	
	sh.mv.escala = 1.0/(CIRCLE_RES*TICK*frecuencia_fund);                   // período en TICKS para una subdivisión del círculo
    2074:	cb 01       	movw	r24, r22
    2076:	ba 01       	movw	r22, r20
    2078:	26 ea       	ldi	r18, 0xA6	; 166
    207a:	3b e9       	ldi	r19, 0x9B	; 155
    207c:	44 ec       	ldi	r20, 0xC4	; 196
    207e:	5d e3       	ldi	r21, 0x3D	; 61
    2080:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    2084:	9b 01       	movw	r18, r22
    2086:	ac 01       	movw	r20, r24
    2088:	60 e0       	ldi	r22, 0x00	; 0
    208a:	70 e0       	ldi	r23, 0x00	; 0
    208c:	80 e8       	ldi	r24, 0x80	; 128
    208e:	9f e3       	ldi	r25, 0x3F	; 63
    2090:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    2094:	0e 94 35 7b 	call	0xf66a	; 0xf66a <__fixunssfsi>
    2098:	9b 01       	movw	r18, r22
    209a:	ac 01       	movw	r20, r24
    209c:	50 ee       	ldi	r21, 0xE0	; 224
    209e:	e5 2e       	mov	r14, r21
    20a0:	51 e0       	ldi	r21, 0x01	; 1
    20a2:	f5 2e       	mov	r15, r21
    20a4:	e0 0e       	add	r14, r16
    20a6:	f1 1e       	adc	r15, r17
    20a8:	f7 01       	movw	r30, r14
    20aa:	20 83       	st	Z, r18
	sh.mv.nsegmentos = nseg (sh.mv.escala);                     
    20ac:	c8 01       	movw	r24, r16
    20ae:	62 2f       	mov	r22, r18
    20b0:	70 e0       	ldi	r23, 0x00	; 0
    20b2:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <_ZN10Movimiento4nsegEi>
    20b6:	0f 51       	subi	r16, 0x1F	; 31
    20b8:	1e 4f       	sbci	r17, 0xFE	; 254
    20ba:	f8 01       	movw	r30, r16
    20bc:	81 93       	st	Z+, r24
    20be:	8f 01       	movw	r16, r30
	sh.mv.ticks = duracion/sh.mv.escala;
    20c0:	f7 01       	movw	r30, r14
    20c2:	60 81       	ld	r22, Z
    20c4:	c6 01       	movw	r24, r12
    20c6:	70 e0       	ldi	r23, 0x00	; 0
    20c8:	0e 94 05 7f 	call	0xfe0a	; 0xfe0a <__divmodhi4>
    20cc:	f8 01       	movw	r30, r16
    20ce:	71 83       	std	Z+1, r23	; 0x01
    20d0:	60 83       	st	Z, r22
	sh.cn.mode = TRONCO;
    20d2:	0d 5f       	subi	r16, 0xFD	; 253
    20d4:	1f 4f       	sbci	r17, 0xFF	; 255
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	f8 01       	movw	r30, r16
    20da:	80 83       	st	Z, r24
    20dc:	05 5e       	subi	r16, 0xE5	; 229
    20de:	11 40       	sbci	r17, 0x01	; 1
	start ();
    20e0:	c8 01       	movw	r24, r16
    20e2:	0e 94 92 29 	call	0x5324	; 0x5324 <_ZN10Movimiento5startEv>
	
}
    20e6:	1f 91       	pop	r17
    20e8:	0f 91       	pop	r16
    20ea:	ff 90       	pop	r15
    20ec:	ef 90       	pop	r14
    20ee:	df 90       	pop	r13
    20f0:	cf 90       	pop	r12
    20f2:	08 95       	ret

000020f4 <_ZN10Movimiento5saltoEff>:
  if (do_rotate) {
    free (matrix);
  }
}

void Movimiento::salto (float modulo, float angulo) {
    20f4:	4f 92       	push	r4
    20f6:	5f 92       	push	r5
    20f8:	6f 92       	push	r6
    20fa:	7f 92       	push	r7
    20fc:	8f 92       	push	r8
    20fe:	9f 92       	push	r9
    2100:	af 92       	push	r10
    2102:	bf 92       	push	r11
    2104:	cf 92       	push	r12
    2106:	df 92       	push	r13
    2108:	ef 92       	push	r14
    210a:	ff 92       	push	r15
    210c:	0f 93       	push	r16
    210e:	1f 93       	push	r17
    2110:	df 93       	push	r29
    2112:	cf 93       	push	r28
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
    2118:	68 97       	sbiw	r28, 0x18	; 24
    211a:	0f b6       	in	r0, 0x3f	; 63
    211c:	f8 94       	cli
    211e:	de bf       	out	0x3e, r29	; 62
    2120:	0f be       	out	0x3f, r0	; 63
    2122:	cd bf       	out	0x3d, r28	; 61
    2124:	6a 01       	movw	r12, r20
    2126:	7b 01       	movw	r14, r22
    2128:	48 01       	movw	r8, r16
    212a:	59 01       	movw	r10, r18
	COORD3D vector = (COORD3D) {-modulo*cos(angulo), -modulo, -modulo*sin(angulo)};  
    212c:	f7 fa       	bst	r15, 7
    212e:	f0 94       	com	r15
    2130:	f7 f8       	bld	r15, 7
    2132:	f0 94       	com	r15
    2134:	c9 01       	movw	r24, r18
    2136:	b8 01       	movw	r22, r16
    2138:	0e 94 94 7a 	call	0xf528	; 0xf528 <cos>
    213c:	2b 01       	movw	r4, r22
    213e:	3c 01       	movw	r6, r24
    2140:	c5 01       	movw	r24, r10
    2142:	b4 01       	movw	r22, r8
    2144:	0e 94 55 7e 	call	0xfcaa	; 0xfcaa <sin>
    2148:	4b 01       	movw	r8, r22
    214a:	5c 01       	movw	r10, r24
    214c:	c7 01       	movw	r24, r14
    214e:	b6 01       	movw	r22, r12
    2150:	a3 01       	movw	r20, r6
    2152:	92 01       	movw	r18, r4
    2154:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    2158:	69 83       	std	Y+1, r22	; 0x01
    215a:	7a 83       	std	Y+2, r23	; 0x02
    215c:	8b 83       	std	Y+3, r24	; 0x03
    215e:	9c 83       	std	Y+4, r25	; 0x04
    2160:	cd 82       	std	Y+5, r12	; 0x05
    2162:	de 82       	std	Y+6, r13	; 0x06
    2164:	ef 82       	std	Y+7, r14	; 0x07
    2166:	f8 86       	std	Y+8, r15	; 0x08
    2168:	c7 01       	movw	r24, r14
    216a:	b6 01       	movw	r22, r12
    216c:	a5 01       	movw	r20, r10
    216e:	94 01       	movw	r18, r8
    2170:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    2174:	69 87       	std	Y+9, r22	; 0x09
    2176:	7a 87       	std	Y+10, r23	; 0x0a
    2178:	8b 87       	std	Y+11, r24	; 0x0b
    217a:	9c 87       	std	Y+12, r25	; 0x0c
	mov.pasito (63, (COORD3D){0,0,0}, false, 0, 15, 5, vector);
    217c:	de 01       	movw	r26, r28
    217e:	1d 96       	adiw	r26, 0x0d	; 13
    2180:	e5 e2       	ldi	r30, 0x25	; 37
    2182:	f4 e0       	ldi	r31, 0x04	; 4
    2184:	8c e0       	ldi	r24, 0x0C	; 12
    2186:	01 90       	ld	r0, Z+
    2188:	0d 92       	st	X+, r0
    218a:	81 50       	subi	r24, 0x01	; 1
    218c:	e1 f7       	brne	.-8      	; 0x2186 <_ZN10Movimiento5saltoEff+0x92>
    218e:	8d b7       	in	r24, 0x3d	; 61
    2190:	9e b7       	in	r25, 0x3e	; 62
    2192:	43 97       	sbiw	r24, 0x13	; 19
    2194:	0f b6       	in	r0, 0x3f	; 63
    2196:	f8 94       	cli
    2198:	9e bf       	out	0x3e, r25	; 62
    219a:	0f be       	out	0x3f, r0	; 63
    219c:	8d bf       	out	0x3d, r24	; 61
    219e:	ed b7       	in	r30, 0x3d	; 61
    21a0:	fe b7       	in	r31, 0x3e	; 62
    21a2:	31 96       	adiw	r30, 0x01	; 1
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	40 e0       	ldi	r20, 0x00	; 0
    21aa:	50 e0       	ldi	r21, 0x00	; 0
    21ac:	ad b7       	in	r26, 0x3d	; 61
    21ae:	be b7       	in	r27, 0x3e	; 62
    21b0:	11 96       	adiw	r26, 0x01	; 1
    21b2:	2d 93       	st	X+, r18
    21b4:	3d 93       	st	X+, r19
    21b6:	4d 93       	st	X+, r20
    21b8:	5c 93       	st	X, r21
    21ba:	14 97       	sbiw	r26, 0x04	; 4
    21bc:	8f e0       	ldi	r24, 0x0F	; 15
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	95 83       	std	Z+5, r25	; 0x05
    21c2:	84 83       	std	Z+4, r24	; 0x04
    21c4:	85 e0       	ldi	r24, 0x05	; 5
    21c6:	86 83       	std	Z+6, r24	; 0x06
    21c8:	18 96       	adiw	r26, 0x08	; 8
    21ca:	fe 01       	movw	r30, r28
    21cc:	31 96       	adiw	r30, 0x01	; 1
    21ce:	8c e0       	ldi	r24, 0x0C	; 12
    21d0:	01 90       	ld	r0, Z+
    21d2:	0d 92       	st	X+, r0
    21d4:	81 50       	subi	r24, 0x01	; 1
    21d6:	e1 f7       	brne	.-8      	; 0x21d0 <_ZN10Movimiento5saltoEff+0xdc>
    21d8:	85 ee       	ldi	r24, 0xE5	; 229
    21da:	9f e0       	ldi	r25, 0x0F	; 15
    21dc:	6f e3       	ldi	r22, 0x3F	; 63
    21de:	ad 84       	ldd	r10, Y+13	; 0x0d
    21e0:	be 84       	ldd	r11, Y+14	; 0x0e
    21e2:	cf 84       	ldd	r12, Y+15	; 0x0f
    21e4:	d8 88       	ldd	r13, Y+16	; 0x10
    21e6:	e9 88       	ldd	r14, Y+17	; 0x11
    21e8:	fa 88       	ldd	r15, Y+18	; 0x12
    21ea:	0b 89       	ldd	r16, Y+19	; 0x13
    21ec:	1c 89       	ldd	r17, Y+20	; 0x14
    21ee:	2d 89       	ldd	r18, Y+21	; 0x15
    21f0:	3e 89       	ldd	r19, Y+22	; 0x16
    21f2:	4f 89       	ldd	r20, Y+23	; 0x17
    21f4:	58 8d       	ldd	r21, Y+24	; 0x18
    21f6:	88 24       	eor	r8, r8
    21f8:	0e 94 66 0a 	call	0x14cc	; 0x14cc <_ZN10Movimiento6pasitoEh7COORD3DbfihS0_>
    21fc:	8d b7       	in	r24, 0x3d	; 61
    21fe:	9e b7       	in	r25, 0x3e	; 62
    2200:	43 96       	adiw	r24, 0x13	; 19
    2202:	0f b6       	in	r0, 0x3f	; 63
    2204:	f8 94       	cli
    2206:	9e bf       	out	0x3e, r25	; 62
    2208:	0f be       	out	0x3f, r0	; 63
    220a:	8d bf       	out	0x3d, r24	; 61
}
    220c:	68 96       	adiw	r28, 0x18	; 24
    220e:	0f b6       	in	r0, 0x3f	; 63
    2210:	f8 94       	cli
    2212:	de bf       	out	0x3e, r29	; 62
    2214:	0f be       	out	0x3f, r0	; 63
    2216:	cd bf       	out	0x3d, r28	; 61
    2218:	cf 91       	pop	r28
    221a:	df 91       	pop	r29
    221c:	1f 91       	pop	r17
    221e:	0f 91       	pop	r16
    2220:	ff 90       	pop	r15
    2222:	ef 90       	pop	r14
    2224:	df 90       	pop	r13
    2226:	cf 90       	pop	r12
    2228:	bf 90       	pop	r11
    222a:	af 90       	pop	r10
    222c:	9f 90       	pop	r9
    222e:	8f 90       	pop	r8
    2230:	7f 90       	pop	r7
    2232:	6f 90       	pop	r6
    2234:	5f 90       	pop	r5
    2236:	4f 90       	pop	r4
    2238:	08 95       	ret

0000223a <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih>:
}

// rotaciones y traslaciones del tronco 
// las dos rutinas anteriores mueven desde la posición actual, 
// en cambio esta mueve desde la posición de referencia que le pasen
void Movimiento::tronco (COORD3D *pos_ref, COORD3D traslacion, COORD3D centro, float angulox, float anguloy, float anguloz, int duracion, byte nsegmentos) {
    223a:	2f 92       	push	r2
    223c:	3f 92       	push	r3
    223e:	4f 92       	push	r4
    2240:	5f 92       	push	r5
    2242:	6f 92       	push	r6
    2244:	7f 92       	push	r7
    2246:	8f 92       	push	r8
    2248:	9f 92       	push	r9
    224a:	af 92       	push	r10
    224c:	bf 92       	push	r11
    224e:	cf 92       	push	r12
    2250:	df 92       	push	r13
    2252:	ef 92       	push	r14
    2254:	ff 92       	push	r15
    2256:	0f 93       	push	r16
    2258:	1f 93       	push	r17
    225a:	df 93       	push	r29
    225c:	cf 93       	push	r28
    225e:	cd b7       	in	r28, 0x3d	; 61
    2260:	de b7       	in	r29, 0x3e	; 62
    2262:	c9 5a       	subi	r28, 0xA9	; 169
    2264:	d0 40       	sbci	r29, 0x00	; 0
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	de bf       	out	0x3e, r29	; 62
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	cd bf       	out	0x3d, r28	; 61
    2270:	ca 55       	subi	r28, 0x5A	; 90
    2272:	df 4f       	sbci	r29, 0xFF	; 255
    2274:	99 83       	std	Y+1, r25	; 0x01
    2276:	88 83       	st	Y, r24
    2278:	c6 5a       	subi	r28, 0xA6	; 166
    227a:	d0 40       	sbci	r29, 0x00	; 0
    227c:	96 2e       	mov	r9, r22
    227e:	87 2e       	mov	r8, r23
    2280:	fe 01       	movw	r30, r28
    2282:	e7 5b       	subi	r30, 0xB7	; 183
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	a0 82       	st	Z, r10
    2288:	b1 82       	std	Z+1, r11	; 0x01
    228a:	c2 82       	std	Z+2, r12	; 0x02
    228c:	d3 82       	std	Z+3, r13	; 0x03
    228e:	e4 82       	std	Z+4, r14	; 0x04
    2290:	f5 82       	std	Z+5, r15	; 0x05
    2292:	06 83       	std	Z+6, r16	; 0x06
    2294:	17 83       	std	Z+7, r17	; 0x07
    2296:	20 87       	std	Z+8, r18	; 0x08
    2298:	31 87       	std	Z+9, r19	; 0x09
    229a:	42 87       	std	Z+10, r20	; 0x0a
    229c:	53 87       	std	Z+11, r21	; 0x0b
    229e:	c6 53       	subi	r28, 0x36	; 54
    22a0:	df 4f       	sbci	r29, 0xFF	; 255
    22a2:	48 80       	ld	r4, Y
    22a4:	59 80       	ldd	r5, Y+1	; 0x01
    22a6:	6a 80       	ldd	r6, Y+2	; 0x02
    22a8:	7b 80       	ldd	r7, Y+3	; 0x03
    22aa:	ca 5c       	subi	r28, 0xCA	; 202
    22ac:	d0 40       	sbci	r29, 0x00	; 0
    22ae:	ca 52       	subi	r28, 0x2A	; 42
    22b0:	df 4f       	sbci	r29, 0xFF	; 255
    22b2:	08 81       	ld	r16, Y
    22b4:	19 81       	ldd	r17, Y+1	; 0x01
    22b6:	c6 5d       	subi	r28, 0xD6	; 214
    22b8:	d0 40       	sbci	r29, 0x00	; 0
  
  if (nsegmentos == 0) {nsegmentos = nseg (duracion);}
    22ba:	c8 52       	subi	r28, 0x28	; 40
    22bc:	df 4f       	sbci	r29, 0xFF	; 255
    22be:	88 81       	ld	r24, Y
    22c0:	c8 5d       	subi	r28, 0xD8	; 216
    22c2:	d0 40       	sbci	r29, 0x00	; 0
    22c4:	88 23       	and	r24, r24
    22c6:	71 f4       	brne	.+28     	; 0x22e4 <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0xaa>
    22c8:	ca 55       	subi	r28, 0x5A	; 90
    22ca:	df 4f       	sbci	r29, 0xFF	; 255
    22cc:	88 81       	ld	r24, Y
    22ce:	99 81       	ldd	r25, Y+1	; 0x01
    22d0:	c6 5a       	subi	r28, 0xA6	; 166
    22d2:	d0 40       	sbci	r29, 0x00	; 0
    22d4:	b8 01       	movw	r22, r16
    22d6:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <_ZN10Movimiento4nsegEi>
    22da:	c8 52       	subi	r28, 0x28	; 40
    22dc:	df 4f       	sbci	r29, 0xFF	; 255
    22de:	88 83       	st	Y, r24
    22e0:	c8 5d       	subi	r28, 0xD8	; 216
    22e2:	d0 40       	sbci	r29, 0x00	; 0
	
  POSICION pos;
  memcpy (pos.patas, pos_ref, 6*sizeof(COORD3D));
    22e4:	de 01       	movw	r26, r28
    22e6:	11 96       	adiw	r26, 0x01	; 1
    22e8:	89 2d       	mov	r24, r9
    22ea:	98 2d       	mov	r25, r8
    22ec:	9c 01       	movw	r18, r24
    22ee:	f9 01       	movw	r30, r18
    22f0:	88 e4       	ldi	r24, 0x48	; 72
    22f2:	01 90       	ld	r0, Z+
    22f4:	0d 92       	st	X+, r0
    22f6:	81 50       	subi	r24, 0x01	; 1
    22f8:	e1 f7       	brne	.-8      	; 0x22f2 <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0xb8>
  COORD3D *matrix;
  float coeficiente = 1.0 / nsegmentos;  // modulo vector
    22fa:	c8 52       	subi	r28, 0x28	; 40
    22fc:	df 4f       	sbci	r29, 0xFF	; 255
    22fe:	98 81       	ld	r25, Y
    2300:	c8 5d       	subi	r28, 0xD8	; 216
    2302:	d0 40       	sbci	r29, 0x00	; 0
    2304:	69 2f       	mov	r22, r25
    2306:	70 e0       	ldi	r23, 0x00	; 0
    2308:	88 27       	eor	r24, r24
    230a:	77 fd       	sbrc	r23, 7
    230c:	80 95       	com	r24
    230e:	98 2f       	mov	r25, r24
    2310:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    2314:	9b 01       	movw	r18, r22
    2316:	ac 01       	movw	r20, r24
    2318:	60 e0       	ldi	r22, 0x00	; 0
    231a:	70 e0       	ldi	r23, 0x00	; 0
    231c:	80 e8       	ldi	r24, 0x80	; 128
    231e:	9f e3       	ldi	r25, 0x3F	; 63
    2320:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    2324:	ce 55       	subi	r28, 0x5E	; 94
    2326:	df 4f       	sbci	r29, 0xFF	; 255
    2328:	68 83       	st	Y, r22
    232a:	79 83       	std	Y+1, r23	; 0x01
    232c:	8a 83       	std	Y+2, r24	; 0x02
    232e:	9b 83       	std	Y+3, r25	; 0x03
    2330:	c2 5a       	subi	r28, 0xA2	; 162
    2332:	d0 40       	sbci	r29, 0x00	; 0
  float t = 0;
  int tps = duracion * coeficiente;    // ticks-per-segment
    2334:	b8 01       	movw	r22, r16
    2336:	88 27       	eor	r24, r24
    2338:	77 fd       	sbrc	r23, 7
    233a:	80 95       	com	r24
    233c:	98 2f       	mov	r25, r24
    233e:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    2342:	ce 55       	subi	r28, 0x5E	; 94
    2344:	df 4f       	sbci	r29, 0xFF	; 255
    2346:	28 81       	ld	r18, Y
    2348:	39 81       	ldd	r19, Y+1	; 0x01
    234a:	4a 81       	ldd	r20, Y+2	; 0x02
    234c:	5b 81       	ldd	r21, Y+3	; 0x03
    234e:	c2 5a       	subi	r28, 0xA2	; 162
    2350:	d0 40       	sbci	r29, 0x00	; 0
    2352:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    2356:	0e 94 30 7b 	call	0xf660	; 0xf660 <__fixsfsi>
    235a:	c0 56       	subi	r28, 0x60	; 96
    235c:	df 4f       	sbci	r29, 0xFF	; 255
    235e:	79 83       	std	Y+1, r23	; 0x01
    2360:	68 83       	st	Y, r22
    2362:	c0 5a       	subi	r28, 0xA0	; 160
    2364:	d0 40       	sbci	r29, 0x00	; 0
  
  bool do_traslate = (traslacion.x!=0 || traslacion.y!=0 || traslacion.z!=0);
    2366:	8e 01       	movw	r16, r28
    2368:	07 5b       	subi	r16, 0xB7	; 183
    236a:	1f 4f       	sbci	r17, 0xFF	; 255
    236c:	d8 01       	movw	r26, r16
    236e:	6d 91       	ld	r22, X+
    2370:	7d 91       	ld	r23, X+
    2372:	8d 91       	ld	r24, X+
    2374:	9c 91       	ld	r25, X
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	40 e0       	ldi	r20, 0x00	; 0
    237c:	50 e0       	ldi	r21, 0x00	; 0
    237e:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    2382:	88 23       	and	r24, r24
    2384:	11 f5       	brne	.+68     	; 0x23ca <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x190>
    2386:	f8 01       	movw	r30, r16
    2388:	64 81       	ldd	r22, Z+4	; 0x04
    238a:	75 81       	ldd	r23, Z+5	; 0x05
    238c:	86 81       	ldd	r24, Z+6	; 0x06
    238e:	97 81       	ldd	r25, Z+7	; 0x07
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e0       	ldi	r20, 0x00	; 0
    2396:	50 e0       	ldi	r21, 0x00	; 0
    2398:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    239c:	88 23       	and	r24, r24
    239e:	a9 f4       	brne	.+42     	; 0x23ca <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x190>
    23a0:	d8 01       	movw	r26, r16
    23a2:	18 96       	adiw	r26, 0x08	; 8
    23a4:	6d 91       	ld	r22, X+
    23a6:	7d 91       	ld	r23, X+
    23a8:	8d 91       	ld	r24, X+
    23aa:	9c 91       	ld	r25, X
    23ac:	1b 97       	sbiw	r26, 0x0b	; 11
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	40 e0       	ldi	r20, 0x00	; 0
    23b4:	50 e0       	ldi	r21, 0x00	; 0
    23b6:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    23ba:	88 23       	and	r24, r24
    23bc:	31 f4       	brne	.+12     	; 0x23ca <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x190>
    23be:	c1 56       	subi	r28, 0x61	; 97
    23c0:	df 4f       	sbci	r29, 0xFF	; 255
    23c2:	18 82       	st	Y, r1
    23c4:	cf 59       	subi	r28, 0x9F	; 159
    23c6:	d0 40       	sbci	r29, 0x00	; 0
    23c8:	24 c0       	rjmp	.+72     	; 0x2412 <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x1d8>
  if (do_traslate) {traslacion = producto (traslacion, -coeficiente);}
    23ca:	fe 01       	movw	r30, r28
    23cc:	e7 5b       	subi	r30, 0xB7	; 183
    23ce:	ff 4f       	sbci	r31, 0xFF	; 255
    23d0:	ce 55       	subi	r28, 0x5E	; 94
    23d2:	df 4f       	sbci	r29, 0xFF	; 255
    23d4:	88 80       	ld	r8, Y
    23d6:	99 80       	ldd	r9, Y+1	; 0x01
    23d8:	aa 80       	ldd	r10, Y+2	; 0x02
    23da:	bb 80       	ldd	r11, Y+3	; 0x03
    23dc:	c2 5a       	subi	r28, 0xA2	; 162
    23de:	d0 40       	sbci	r29, 0x00	; 0
    23e0:	b7 fa       	bst	r11, 7
    23e2:	b0 94       	com	r11
    23e4:	b7 f8       	bld	r11, 7
    23e6:	b0 94       	com	r11
    23e8:	cf 01       	movw	r24, r30
    23ea:	c0 80       	ld	r12, Z
    23ec:	d1 80       	ldd	r13, Z+1	; 0x01
    23ee:	e2 80       	ldd	r14, Z+2	; 0x02
    23f0:	f3 80       	ldd	r15, Z+3	; 0x03
    23f2:	04 81       	ldd	r16, Z+4	; 0x04
    23f4:	15 81       	ldd	r17, Z+5	; 0x05
    23f6:	26 81       	ldd	r18, Z+6	; 0x06
    23f8:	37 81       	ldd	r19, Z+7	; 0x07
    23fa:	40 85       	ldd	r20, Z+8	; 0x08
    23fc:	51 85       	ldd	r21, Z+9	; 0x09
    23fe:	62 85       	ldd	r22, Z+10	; 0x0a
    2400:	73 85       	ldd	r23, Z+11	; 0x0b
    2402:	0e 94 f6 3b 	call	0x77ec	; 0x77ec <_Z8producto7COORD3Df>
    2406:	b1 e0       	ldi	r27, 0x01	; 1
    2408:	c1 56       	subi	r28, 0x61	; 97
    240a:	df 4f       	sbci	r29, 0xFF	; 255
    240c:	b8 83       	st	Y, r27
    240e:	cf 59       	subi	r28, 0x9F	; 159
    2410:	d0 40       	sbci	r29, 0x00	; 0
  bool do_rotate = (angulox!=0 || anguloy!=0 || anguloz!=0);
    2412:	c3 01       	movw	r24, r6
    2414:	b2 01       	movw	r22, r4
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	40 e0       	ldi	r20, 0x00	; 0
    241c:	50 e0       	ldi	r21, 0x00	; 0
    241e:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    2422:	88 23       	and	r24, r24
    2424:	31 f5       	brne	.+76     	; 0x2472 <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x238>
    2426:	c2 53       	subi	r28, 0x32	; 50
    2428:	df 4f       	sbci	r29, 0xFF	; 255
    242a:	68 81       	ld	r22, Y
    242c:	79 81       	ldd	r23, Y+1	; 0x01
    242e:	8a 81       	ldd	r24, Y+2	; 0x02
    2430:	9b 81       	ldd	r25, Y+3	; 0x03
    2432:	ce 5c       	subi	r28, 0xCE	; 206
    2434:	d0 40       	sbci	r29, 0x00	; 0
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	40 e0       	ldi	r20, 0x00	; 0
    243c:	50 e0       	ldi	r21, 0x00	; 0
    243e:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    2442:	88 23       	and	r24, r24
    2444:	b1 f4       	brne	.+44     	; 0x2472 <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x238>
    2446:	ce 52       	subi	r28, 0x2E	; 46
    2448:	df 4f       	sbci	r29, 0xFF	; 255
    244a:	68 81       	ld	r22, Y
    244c:	79 81       	ldd	r23, Y+1	; 0x01
    244e:	8a 81       	ldd	r24, Y+2	; 0x02
    2450:	9b 81       	ldd	r25, Y+3	; 0x03
    2452:	c2 5d       	subi	r28, 0xD2	; 210
    2454:	d0 40       	sbci	r29, 0x00	; 0
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	40 e0       	ldi	r20, 0x00	; 0
    245c:	50 e0       	ldi	r21, 0x00	; 0
    245e:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    2462:	88 23       	and	r24, r24
    2464:	31 f4       	brne	.+12     	; 0x2472 <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x238>
    2466:	c2 56       	subi	r28, 0x62	; 98
    2468:	df 4f       	sbci	r29, 0xFF	; 255
    246a:	18 82       	st	Y, r1
    246c:	ce 59       	subi	r28, 0x9E	; 158
    246e:	d0 40       	sbci	r29, 0x00	; 0
    2470:	54 c0       	rjmp	.+168    	; 0x251a <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x2e0>
  if (do_rotate) {
    matrix = (COORD3D*) malloc (3*sizeof(COORD3D));
    2472:	84 e2       	ldi	r24, 0x24	; 36
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	0e 94 5b 7f 	call	0xfeb6	; 0xfeb6 <malloc>
    247a:	c8 55       	subi	r28, 0x58	; 88
    247c:	df 4f       	sbci	r29, 0xFF	; 255
    247e:	88 83       	st	Y, r24
    2480:	c8 5a       	subi	r28, 0xA8	; 168
    2482:	d0 40       	sbci	r29, 0x00	; 0
    2484:	c7 55       	subi	r28, 0x57	; 87
    2486:	df 4f       	sbci	r29, 0xFF	; 255
    2488:	98 83       	st	Y, r25
    248a:	c9 5a       	subi	r28, 0xA9	; 169
    248c:	d0 40       	sbci	r29, 0x00	; 0
    getRotationMatrix (matrix, angulox*-coeficiente, anguloy*-coeficiente, anguloz*-coeficiente);
    248e:	ce 55       	subi	r28, 0x5E	; 94
    2490:	df 4f       	sbci	r29, 0xFF	; 255
    2492:	e8 80       	ld	r14, Y
    2494:	f9 80       	ldd	r15, Y+1	; 0x01
    2496:	0a 81       	ldd	r16, Y+2	; 0x02
    2498:	1b 81       	ldd	r17, Y+3	; 0x03
    249a:	c2 5a       	subi	r28, 0xA2	; 162
    249c:	d0 40       	sbci	r29, 0x00	; 0
    249e:	17 fb       	bst	r17, 7
    24a0:	10 95       	com	r17
    24a2:	17 f9       	bld	r17, 7
    24a4:	10 95       	com	r17
    24a6:	c3 01       	movw	r24, r6
    24a8:	b2 01       	movw	r22, r4
    24aa:	a8 01       	movw	r20, r16
    24ac:	97 01       	movw	r18, r14
    24ae:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    24b2:	2b 01       	movw	r4, r22
    24b4:	3c 01       	movw	r6, r24
    24b6:	c2 53       	subi	r28, 0x32	; 50
    24b8:	df 4f       	sbci	r29, 0xFF	; 255
    24ba:	68 81       	ld	r22, Y
    24bc:	79 81       	ldd	r23, Y+1	; 0x01
    24be:	8a 81       	ldd	r24, Y+2	; 0x02
    24c0:	9b 81       	ldd	r25, Y+3	; 0x03
    24c2:	ce 5c       	subi	r28, 0xCE	; 206
    24c4:	d0 40       	sbci	r29, 0x00	; 0
    24c6:	a8 01       	movw	r20, r16
    24c8:	97 01       	movw	r18, r14
    24ca:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    24ce:	4b 01       	movw	r8, r22
    24d0:	5c 01       	movw	r10, r24
    24d2:	ce 52       	subi	r28, 0x2E	; 46
    24d4:	df 4f       	sbci	r29, 0xFF	; 255
    24d6:	68 81       	ld	r22, Y
    24d8:	79 81       	ldd	r23, Y+1	; 0x01
    24da:	8a 81       	ldd	r24, Y+2	; 0x02
    24dc:	9b 81       	ldd	r25, Y+3	; 0x03
    24de:	c2 5d       	subi	r28, 0xD2	; 210
    24e0:	d0 40       	sbci	r29, 0x00	; 0
    24e2:	a8 01       	movw	r20, r16
    24e4:	97 01       	movw	r18, r14
    24e6:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    24ea:	6b 01       	movw	r12, r22
    24ec:	7c 01       	movw	r14, r24
    24ee:	c8 55       	subi	r28, 0x58	; 88
    24f0:	df 4f       	sbci	r29, 0xFF	; 255
    24f2:	88 81       	ld	r24, Y
    24f4:	c8 5a       	subi	r28, 0xA8	; 168
    24f6:	d0 40       	sbci	r29, 0x00	; 0
    24f8:	c7 55       	subi	r28, 0x57	; 87
    24fa:	df 4f       	sbci	r29, 0xFF	; 255
    24fc:	98 81       	ld	r25, Y
    24fe:	c9 5a       	subi	r28, 0xA9	; 169
    2500:	d0 40       	sbci	r29, 0x00	; 0
    2502:	b3 01       	movw	r22, r6
    2504:	a2 01       	movw	r20, r4
    2506:	95 01       	movw	r18, r10
    2508:	84 01       	movw	r16, r8
    250a:	0e 94 38 49 	call	0x9270	; 0x9270 <_Z17getRotationMatrixP7COORD3Dfff>
    250e:	e1 e0       	ldi	r30, 0x01	; 1
    2510:	c2 56       	subi	r28, 0x62	; 98
    2512:	df 4f       	sbci	r29, 0xFF	; 255
    2514:	e8 83       	st	Y, r30
    2516:	ce 59       	subi	r28, 0x9E	; 158
    2518:	d0 40       	sbci	r29, 0x00	; 0
    251a:	0f 2e       	mov	r0, r31
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	2f 2e       	mov	r2, r31
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	3f 2e       	mov	r3, r31
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	4f 2e       	mov	r4, r31
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	5f 2e       	mov	r5, r31
    252c:	f0 2d       	mov	r31, r0
    252e:	c3 56       	subi	r28, 0x63	; 99
    2530:	df 4f       	sbci	r29, 0xFF	; 255
    2532:	18 82       	st	Y, r1
    2534:	cd 59       	subi	r28, 0x9D	; 157
    2536:	d0 40       	sbci	r29, 0x00	; 0
  }
  
  for (byte i=0; i<nsegmentos; i++) {
    if (do_traslate) {pos = traslate (pos.patas, traslacion);}
    2538:	69 e4       	ldi	r22, 0x49	; 73
    253a:	66 2e       	mov	r6, r22
    253c:	71 2c       	mov	r7, r1
    253e:	6c 0e       	add	r6, r28
    2540:	7d 1e       	adc	r7, r29
    2542:	d2 c0       	rjmp	.+420    	; 0x26e8 <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x4ae>
    2544:	c1 56       	subi	r28, 0x61	; 97
    2546:	df 4f       	sbci	r29, 0xFF	; 255
    2548:	f8 81       	ld	r31, Y
    254a:	cf 59       	subi	r28, 0x9F	; 159
    254c:	d0 40       	sbci	r29, 0x00	; 0
    254e:	ff 23       	and	r31, r31
    2550:	a1 f1       	breq	.+104    	; 0x25ba <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x380>
    2552:	ce 01       	movw	r24, r28
    2554:	8b 5a       	subi	r24, 0xAB	; 171
    2556:	9f 4f       	sbci	r25, 0xFF	; 255
    2558:	be 01       	movw	r22, r28
    255a:	6f 5f       	subi	r22, 0xFF	; 255
    255c:	7f 4f       	sbci	r23, 0xFF	; 255
    255e:	d3 01       	movw	r26, r6
    2560:	ac 90       	ld	r10, X
    2562:	11 96       	adiw	r26, 0x01	; 1
    2564:	bc 90       	ld	r11, X
    2566:	11 97       	sbiw	r26, 0x01	; 1
    2568:	12 96       	adiw	r26, 0x02	; 2
    256a:	cc 90       	ld	r12, X
    256c:	12 97       	sbiw	r26, 0x02	; 2
    256e:	13 96       	adiw	r26, 0x03	; 3
    2570:	dc 90       	ld	r13, X
    2572:	13 97       	sbiw	r26, 0x03	; 3
    2574:	14 96       	adiw	r26, 0x04	; 4
    2576:	ec 90       	ld	r14, X
    2578:	14 97       	sbiw	r26, 0x04	; 4
    257a:	15 96       	adiw	r26, 0x05	; 5
    257c:	fc 90       	ld	r15, X
    257e:	15 97       	sbiw	r26, 0x05	; 5
    2580:	16 96       	adiw	r26, 0x06	; 6
    2582:	0c 91       	ld	r16, X
    2584:	16 97       	sbiw	r26, 0x06	; 6
    2586:	17 96       	adiw	r26, 0x07	; 7
    2588:	1c 91       	ld	r17, X
    258a:	17 97       	sbiw	r26, 0x07	; 7
    258c:	18 96       	adiw	r26, 0x08	; 8
    258e:	2c 91       	ld	r18, X
    2590:	18 97       	sbiw	r26, 0x08	; 8
    2592:	19 96       	adiw	r26, 0x09	; 9
    2594:	3c 91       	ld	r19, X
    2596:	19 97       	sbiw	r26, 0x09	; 9
    2598:	1a 96       	adiw	r26, 0x0a	; 10
    259a:	4c 91       	ld	r20, X
    259c:	1a 97       	sbiw	r26, 0x0a	; 10
    259e:	1b 96       	adiw	r26, 0x0b	; 11
    25a0:	5c 91       	ld	r21, X
    25a2:	0e 94 8f 3f 	call	0x7f1e	; 0x7f1e <_Z8traslateP7COORD3DS_>
    25a6:	de 01       	movw	r26, r28
    25a8:	11 96       	adiw	r26, 0x01	; 1
    25aa:	fe 01       	movw	r30, r28
    25ac:	eb 5a       	subi	r30, 0xAB	; 171
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	88 e4       	ldi	r24, 0x48	; 72
    25b2:	01 90       	ld	r0, Z+
    25b4:	0d 92       	st	X+, r0
    25b6:	81 50       	subi	r24, 0x01	; 1
    25b8:	e1 f7       	brne	.-8      	; 0x25b2 <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x378>
    if (do_rotate) {pos = rotate (pos.patas, centro, matrix);} 
    25ba:	c2 56       	subi	r28, 0x62	; 98
    25bc:	df 4f       	sbci	r29, 0xFF	; 255
    25be:	b8 81       	ld	r27, Y
    25c0:	ce 59       	subi	r28, 0x9E	; 158
    25c2:	d0 40       	sbci	r29, 0x00	; 0
    25c4:	bb 23       	and	r27, r27
    25c6:	09 f4       	brne	.+2      	; 0x25ca <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x390>
    25c8:	58 c0       	rjmp	.+176    	; 0x267a <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x440>
    25ca:	ce 01       	movw	r24, r28
    25cc:	8b 5a       	subi	r24, 0xAB	; 171
    25ce:	9f 4f       	sbci	r25, 0xFF	; 255
    25d0:	be 01       	movw	r22, r28
    25d2:	6f 5f       	subi	r22, 0xFF	; 255
    25d4:	7f 4f       	sbci	r23, 0xFF	; 255
    25d6:	c2 54       	subi	r28, 0x42	; 66
    25d8:	df 4f       	sbci	r29, 0xFF	; 255
    25da:	a8 80       	ld	r10, Y
    25dc:	ce 5b       	subi	r28, 0xBE	; 190
    25de:	d0 40       	sbci	r29, 0x00	; 0
    25e0:	c1 54       	subi	r28, 0x41	; 65
    25e2:	df 4f       	sbci	r29, 0xFF	; 255
    25e4:	b8 80       	ld	r11, Y
    25e6:	cf 5b       	subi	r28, 0xBF	; 191
    25e8:	d0 40       	sbci	r29, 0x00	; 0
    25ea:	c0 54       	subi	r28, 0x40	; 64
    25ec:	df 4f       	sbci	r29, 0xFF	; 255
    25ee:	c8 80       	ld	r12, Y
    25f0:	c0 5c       	subi	r28, 0xC0	; 192
    25f2:	d0 40       	sbci	r29, 0x00	; 0
    25f4:	cf 53       	subi	r28, 0x3F	; 63
    25f6:	df 4f       	sbci	r29, 0xFF	; 255
    25f8:	d8 80       	ld	r13, Y
    25fa:	c1 5c       	subi	r28, 0xC1	; 193
    25fc:	d0 40       	sbci	r29, 0x00	; 0
    25fe:	ce 53       	subi	r28, 0x3E	; 62
    2600:	df 4f       	sbci	r29, 0xFF	; 255
    2602:	e8 80       	ld	r14, Y
    2604:	c2 5c       	subi	r28, 0xC2	; 194
    2606:	d0 40       	sbci	r29, 0x00	; 0
    2608:	cd 53       	subi	r28, 0x3D	; 61
    260a:	df 4f       	sbci	r29, 0xFF	; 255
    260c:	f8 80       	ld	r15, Y
    260e:	c3 5c       	subi	r28, 0xC3	; 195
    2610:	d0 40       	sbci	r29, 0x00	; 0
    2612:	cc 53       	subi	r28, 0x3C	; 60
    2614:	df 4f       	sbci	r29, 0xFF	; 255
    2616:	08 81       	ld	r16, Y
    2618:	c4 5c       	subi	r28, 0xC4	; 196
    261a:	d0 40       	sbci	r29, 0x00	; 0
    261c:	cb 53       	subi	r28, 0x3B	; 59
    261e:	df 4f       	sbci	r29, 0xFF	; 255
    2620:	18 81       	ld	r17, Y
    2622:	c5 5c       	subi	r28, 0xC5	; 197
    2624:	d0 40       	sbci	r29, 0x00	; 0
    2626:	ca 53       	subi	r28, 0x3A	; 58
    2628:	df 4f       	sbci	r29, 0xFF	; 255
    262a:	28 81       	ld	r18, Y
    262c:	c6 5c       	subi	r28, 0xC6	; 198
    262e:	d0 40       	sbci	r29, 0x00	; 0
    2630:	c9 53       	subi	r28, 0x39	; 57
    2632:	df 4f       	sbci	r29, 0xFF	; 255
    2634:	38 81       	ld	r19, Y
    2636:	c7 5c       	subi	r28, 0xC7	; 199
    2638:	d0 40       	sbci	r29, 0x00	; 0
    263a:	c8 53       	subi	r28, 0x38	; 56
    263c:	df 4f       	sbci	r29, 0xFF	; 255
    263e:	48 81       	ld	r20, Y
    2640:	c8 5c       	subi	r28, 0xC8	; 200
    2642:	d0 40       	sbci	r29, 0x00	; 0
    2644:	c7 53       	subi	r28, 0x37	; 55
    2646:	df 4f       	sbci	r29, 0xFF	; 255
    2648:	58 81       	ld	r21, Y
    264a:	c9 5c       	subi	r28, 0xC9	; 201
    264c:	d0 40       	sbci	r29, 0x00	; 0
    264e:	c8 55       	subi	r28, 0x58	; 88
    2650:	df 4f       	sbci	r29, 0xFF	; 255
    2652:	88 80       	ld	r8, Y
    2654:	c8 5a       	subi	r28, 0xA8	; 168
    2656:	d0 40       	sbci	r29, 0x00	; 0
    2658:	c7 55       	subi	r28, 0x57	; 87
    265a:	df 4f       	sbci	r29, 0xFF	; 255
    265c:	98 80       	ld	r9, Y
    265e:	c9 5a       	subi	r28, 0xA9	; 169
    2660:	d0 40       	sbci	r29, 0x00	; 0
    2662:	0e 94 34 41 	call	0x8268	; 0x8268 <_Z6rotateP7COORD3DS_S0_>
    2666:	de 01       	movw	r26, r28
    2668:	11 96       	adiw	r26, 0x01	; 1
    266a:	fe 01       	movw	r30, r28
    266c:	eb 5a       	subi	r30, 0xAB	; 171
    266e:	ff 4f       	sbci	r31, 0xFF	; 255
    2670:	88 e4       	ldi	r24, 0x48	; 72
    2672:	01 90       	ld	r0, Z+
    2674:	0d 92       	st	X+, r0
    2676:	81 50       	subi	r24, 0x01	; 1
    2678:	e1 f7       	brne	.-8      	; 0x2672 <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x438>
    posicion (pos.patas, t+.5, tps);
    267a:	c2 01       	movw	r24, r4
    267c:	b1 01       	movw	r22, r2
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	40 e0       	ldi	r20, 0x00	; 0
    2684:	5f e3       	ldi	r21, 0x3F	; 63
    2686:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    268a:	0e 94 30 7b 	call	0xf660	; 0xf660 <__fixsfsi>
    268e:	9b 01       	movw	r18, r22
    2690:	ac 01       	movw	r20, r24
    2692:	ca 55       	subi	r28, 0x5A	; 90
    2694:	df 4f       	sbci	r29, 0xFF	; 255
    2696:	88 81       	ld	r24, Y
    2698:	99 81       	ldd	r25, Y+1	; 0x01
    269a:	c6 5a       	subi	r28, 0xA6	; 166
    269c:	d0 40       	sbci	r29, 0x00	; 0
    269e:	be 01       	movw	r22, r28
    26a0:	6f 5f       	subi	r22, 0xFF	; 255
    26a2:	7f 4f       	sbci	r23, 0xFF	; 255
    26a4:	a9 01       	movw	r20, r18
    26a6:	c0 56       	subi	r28, 0x60	; 96
    26a8:	df 4f       	sbci	r29, 0xFF	; 255
    26aa:	28 81       	ld	r18, Y
    26ac:	39 81       	ldd	r19, Y+1	; 0x01
    26ae:	c0 5a       	subi	r28, 0xA0	; 160
    26b0:	d0 40       	sbci	r29, 0x00	; 0
    26b2:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <_ZN10Movimiento8posicionEP7COORD3Dii>
    t += coeficiente;
    26b6:	c2 01       	movw	r24, r4
    26b8:	b1 01       	movw	r22, r2
    26ba:	ce 55       	subi	r28, 0x5E	; 94
    26bc:	df 4f       	sbci	r29, 0xFF	; 255
    26be:	28 81       	ld	r18, Y
    26c0:	39 81       	ldd	r19, Y+1	; 0x01
    26c2:	4a 81       	ldd	r20, Y+2	; 0x02
    26c4:	5b 81       	ldd	r21, Y+3	; 0x03
    26c6:	c2 5a       	subi	r28, 0xA2	; 162
    26c8:	d0 40       	sbci	r29, 0x00	; 0
    26ca:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    26ce:	1b 01       	movw	r2, r22
    26d0:	2c 01       	movw	r4, r24
  if (do_rotate) {
    matrix = (COORD3D*) malloc (3*sizeof(COORD3D));
    getRotationMatrix (matrix, angulox*-coeficiente, anguloy*-coeficiente, anguloz*-coeficiente);
  }
  
  for (byte i=0; i<nsegmentos; i++) {
    26d2:	c3 56       	subi	r28, 0x63	; 99
    26d4:	df 4f       	sbci	r29, 0xFF	; 255
    26d6:	e8 81       	ld	r30, Y
    26d8:	cd 59       	subi	r28, 0x9D	; 157
    26da:	d0 40       	sbci	r29, 0x00	; 0
    26dc:	ef 5f       	subi	r30, 0xFF	; 255
    26de:	c3 56       	subi	r28, 0x63	; 99
    26e0:	df 4f       	sbci	r29, 0xFF	; 255
    26e2:	e8 83       	st	Y, r30
    26e4:	cd 59       	subi	r28, 0x9D	; 157
    26e6:	d0 40       	sbci	r29, 0x00	; 0
    26e8:	c3 56       	subi	r28, 0x63	; 99
    26ea:	df 4f       	sbci	r29, 0xFF	; 255
    26ec:	f8 81       	ld	r31, Y
    26ee:	cd 59       	subi	r28, 0x9D	; 157
    26f0:	d0 40       	sbci	r29, 0x00	; 0
    26f2:	c8 52       	subi	r28, 0x28	; 40
    26f4:	df 4f       	sbci	r29, 0xFF	; 255
    26f6:	88 81       	ld	r24, Y
    26f8:	c8 5d       	subi	r28, 0xD8	; 216
    26fa:	d0 40       	sbci	r29, 0x00	; 0
    26fc:	f8 17       	cp	r31, r24
    26fe:	08 f4       	brcc	.+2      	; 0x2702 <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x4c8>
    2700:	21 cf       	rjmp	.-446    	; 0x2544 <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x30a>
    if (do_rotate) {pos = rotate (pos.patas, centro, matrix);} 
    posicion (pos.patas, t+.5, tps);
    t += coeficiente;
  }
    
  if (do_rotate) {
    2702:	c2 56       	subi	r28, 0x62	; 98
    2704:	df 4f       	sbci	r29, 0xFF	; 255
    2706:	98 81       	ld	r25, Y
    2708:	ce 59       	subi	r28, 0x9E	; 158
    270a:	d0 40       	sbci	r29, 0x00	; 0
    270c:	99 23       	and	r25, r25
    270e:	61 f0       	breq	.+24     	; 0x2728 <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih+0x4ee>
    free (matrix);
    2710:	c8 55       	subi	r28, 0x58	; 88
    2712:	df 4f       	sbci	r29, 0xFF	; 255
    2714:	88 81       	ld	r24, Y
    2716:	c8 5a       	subi	r28, 0xA8	; 168
    2718:	d0 40       	sbci	r29, 0x00	; 0
    271a:	c7 55       	subi	r28, 0x57	; 87
    271c:	df 4f       	sbci	r29, 0xFF	; 255
    271e:	98 81       	ld	r25, Y
    2720:	c9 5a       	subi	r28, 0xA9	; 169
    2722:	d0 40       	sbci	r29, 0x00	; 0
    2724:	0e 94 08 80 	call	0x10010	; 0x10010 <free>
  }
}
    2728:	c7 55       	subi	r28, 0x57	; 87
    272a:	df 4f       	sbci	r29, 0xFF	; 255
    272c:	0f b6       	in	r0, 0x3f	; 63
    272e:	f8 94       	cli
    2730:	de bf       	out	0x3e, r29	; 62
    2732:	0f be       	out	0x3f, r0	; 63
    2734:	cd bf       	out	0x3d, r28	; 61
    2736:	cf 91       	pop	r28
    2738:	df 91       	pop	r29
    273a:	1f 91       	pop	r17
    273c:	0f 91       	pop	r16
    273e:	ff 90       	pop	r15
    2740:	ef 90       	pop	r14
    2742:	df 90       	pop	r13
    2744:	cf 90       	pop	r12
    2746:	bf 90       	pop	r11
    2748:	af 90       	pop	r10
    274a:	9f 90       	pop	r9
    274c:	8f 90       	pop	r8
    274e:	7f 90       	pop	r7
    2750:	6f 90       	pop	r6
    2752:	5f 90       	pop	r5
    2754:	4f 90       	pop	r4
    2756:	3f 90       	pop	r3
    2758:	2f 90       	pop	r2
    275a:	08 95       	ret

0000275c <_ZN10Movimiento8rotationEfffih>:
void Movimiento::rotation (COORD3D centro, float angulox, float anguloy, float anguloz, int duracion, byte nsegmentos) {
	tronco (pos_des, (COORD3D){0,0,0}, centro, angulox, anguloy, anguloz, duracion, nsegmentos);
}

// rotación usando el centro de referencia
void Movimiento::rotation (float angulox, float anguloy, float anguloz, int duracion, byte nsegmentos) {
    275c:	2f 92       	push	r2
    275e:	3f 92       	push	r3
    2760:	4f 92       	push	r4
    2762:	5f 92       	push	r5
    2764:	6f 92       	push	r6
    2766:	7f 92       	push	r7
    2768:	8f 92       	push	r8
    276a:	af 92       	push	r10
    276c:	bf 92       	push	r11
    276e:	cf 92       	push	r12
    2770:	df 92       	push	r13
    2772:	ef 92       	push	r14
    2774:	ff 92       	push	r15
    2776:	0f 93       	push	r16
    2778:	1f 93       	push	r17
    277a:	df 93       	push	r29
    277c:	cf 93       	push	r28
    277e:	cd b7       	in	r28, 0x3d	; 61
    2780:	de b7       	in	r29, 0x3e	; 62
    2782:	2c 97       	sbiw	r28, 0x0c	; 12
    2784:	0f b6       	in	r0, 0x3f	; 63
    2786:	f8 94       	cli
    2788:	de bf       	out	0x3e, r29	; 62
    278a:	0f be       	out	0x3f, r0	; 63
    278c:	cd bf       	out	0x3d, r28	; 61
    278e:	1c 01       	movw	r2, r24
    2790:	28 01       	movw	r4, r16
    2792:	39 01       	movw	r6, r18
	tronco (pos_des, (COORD3D){0,0,0}, bd.centro_ref, angulox, anguloy, anguloz, duracion, nsegmentos);
    2794:	ce 01       	movw	r24, r28
    2796:	01 96       	adiw	r24, 0x01	; 1
    2798:	21 e3       	ldi	r18, 0x31	; 49
    279a:	34 e0       	ldi	r19, 0x04	; 4
    279c:	ec e0       	ldi	r30, 0x0C	; 12
    279e:	d9 01       	movw	r26, r18
    27a0:	0d 90       	ld	r0, X+
    27a2:	9d 01       	movw	r18, r26
    27a4:	dc 01       	movw	r26, r24
    27a6:	0d 92       	st	X+, r0
    27a8:	cd 01       	movw	r24, r26
    27aa:	e1 50       	subi	r30, 0x01	; 1
    27ac:	c1 f7       	brne	.-16     	; 0x279e <_ZN10Movimiento8rotationEfffih+0x42>
    27ae:	8d b7       	in	r24, 0x3d	; 61
    27b0:	9e b7       	in	r25, 0x3e	; 62
    27b2:	4b 97       	sbiw	r24, 0x1b	; 27
    27b4:	0f b6       	in	r0, 0x3f	; 63
    27b6:	f8 94       	cli
    27b8:	9e bf       	out	0x3e, r25	; 62
    27ba:	0f be       	out	0x3f, r0	; 63
    27bc:	8d bf       	out	0x3d, r24	; 61
    27be:	ed b7       	in	r30, 0x3d	; 61
    27c0:	fe b7       	in	r31, 0x3e	; 62
    27c2:	31 96       	adiw	r30, 0x01	; 1
    27c4:	9f 01       	movw	r18, r30
    27c6:	c1 01       	movw	r24, r2
    27c8:	83 56       	subi	r24, 0x63	; 99
    27ca:	9f 4f       	sbci	r25, 0xFF	; 255
    27cc:	1c e0       	ldi	r17, 0x0C	; 12
    27ce:	dc 01       	movw	r26, r24
    27d0:	0d 90       	ld	r0, X+
    27d2:	cd 01       	movw	r24, r26
    27d4:	d9 01       	movw	r26, r18
    27d6:	0d 92       	st	X+, r0
    27d8:	9d 01       	movw	r18, r26
    27da:	11 50       	subi	r17, 0x01	; 1
    27dc:	c1 f7       	brne	.-16     	; 0x27ce <_ZN10Movimiento8rotationEfffih+0x72>
    27de:	44 87       	std	Z+12, r20	; 0x0c
    27e0:	55 87       	std	Z+13, r21	; 0x0d
    27e2:	66 87       	std	Z+14, r22	; 0x0e
    27e4:	77 87       	std	Z+15, r23	; 0x0f
    27e6:	40 8a       	std	Z+16, r4	; 0x10
    27e8:	51 8a       	std	Z+17, r5	; 0x11
    27ea:	62 8a       	std	Z+18, r6	; 0x12
    27ec:	73 8a       	std	Z+19, r7	; 0x13
    27ee:	c4 8a       	std	Z+20, r12	; 0x14
    27f0:	d5 8a       	std	Z+21, r13	; 0x15
    27f2:	e6 8a       	std	Z+22, r14	; 0x16
    27f4:	f7 8a       	std	Z+23, r15	; 0x17
    27f6:	b1 8e       	std	Z+25, r11	; 0x19
    27f8:	a0 8e       	std	Z+24, r10	; 0x18
    27fa:	82 8e       	std	Z+26, r8	; 0x1a
    27fc:	c1 01       	movw	r24, r2
    27fe:	64 e5       	ldi	r22, 0x54	; 84
    2800:	72 e1       	ldi	r23, 0x12	; 18
    2802:	a9 80       	ldd	r10, Y+1	; 0x01
    2804:	ba 80       	ldd	r11, Y+2	; 0x02
    2806:	cb 80       	ldd	r12, Y+3	; 0x03
    2808:	dc 80       	ldd	r13, Y+4	; 0x04
    280a:	ed 80       	ldd	r14, Y+5	; 0x05
    280c:	fe 80       	ldd	r15, Y+6	; 0x06
    280e:	0f 81       	ldd	r16, Y+7	; 0x07
    2810:	18 85       	ldd	r17, Y+8	; 0x08
    2812:	29 85       	ldd	r18, Y+9	; 0x09
    2814:	3a 85       	ldd	r19, Y+10	; 0x0a
    2816:	4b 85       	ldd	r20, Y+11	; 0x0b
    2818:	5c 85       	ldd	r21, Y+12	; 0x0c
    281a:	0e 94 1d 11 	call	0x223a	; 0x223a <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih>
    281e:	8d b7       	in	r24, 0x3d	; 61
    2820:	9e b7       	in	r25, 0x3e	; 62
    2822:	4b 96       	adiw	r24, 0x1b	; 27
    2824:	0f b6       	in	r0, 0x3f	; 63
    2826:	f8 94       	cli
    2828:	9e bf       	out	0x3e, r25	; 62
    282a:	0f be       	out	0x3f, r0	; 63
    282c:	8d bf       	out	0x3d, r24	; 61
}
    282e:	2c 96       	adiw	r28, 0x0c	; 12
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	f8 94       	cli
    2834:	de bf       	out	0x3e, r29	; 62
    2836:	0f be       	out	0x3f, r0	; 63
    2838:	cd bf       	out	0x3d, r28	; 61
    283a:	cf 91       	pop	r28
    283c:	df 91       	pop	r29
    283e:	1f 91       	pop	r17
    2840:	0f 91       	pop	r16
    2842:	ff 90       	pop	r15
    2844:	ef 90       	pop	r14
    2846:	df 90       	pop	r13
    2848:	cf 90       	pop	r12
    284a:	bf 90       	pop	r11
    284c:	af 90       	pop	r10
    284e:	8f 90       	pop	r8
    2850:	7f 90       	pop	r7
    2852:	6f 90       	pop	r6
    2854:	5f 90       	pop	r5
    2856:	4f 90       	pop	r4
    2858:	3f 90       	pop	r3
    285a:	2f 90       	pop	r2
    285c:	08 95       	ret

0000285e <_ZN10Movimiento11translationE7COORD3Dih>:
}

///////////////////////////////////////// ROTACIONES Y TRASLACIONES /////////////////////////////////////////

// traslación del tronco
void Movimiento::translation (COORD3D vector, int duracion, byte nsegmentos) {
    285e:	6f 92       	push	r6
    2860:	7f 92       	push	r7
    2862:	8f 92       	push	r8
    2864:	af 92       	push	r10
    2866:	bf 92       	push	r11
    2868:	cf 92       	push	r12
    286a:	df 92       	push	r13
    286c:	ef 92       	push	r14
    286e:	ff 92       	push	r15
    2870:	0f 93       	push	r16
    2872:	1f 93       	push	r17
    2874:	df 93       	push	r29
    2876:	cf 93       	push	r28
    2878:	cd b7       	in	r28, 0x3d	; 61
    287a:	de b7       	in	r29, 0x3e	; 62
    287c:	68 97       	sbiw	r28, 0x18	; 24
    287e:	0f b6       	in	r0, 0x3f	; 63
    2880:	f8 94       	cli
    2882:	de bf       	out	0x3e, r29	; 62
    2884:	0f be       	out	0x3f, r0	; 63
    2886:	cd bf       	out	0x3d, r28	; 61
    2888:	3c 01       	movw	r6, r24
    288a:	cd 86       	std	Y+13, r12	; 0x0d
    288c:	de 86       	std	Y+14, r13	; 0x0e
    288e:	ef 86       	std	Y+15, r14	; 0x0f
    2890:	f8 8a       	std	Y+16, r15	; 0x10
    2892:	09 8b       	std	Y+17, r16	; 0x11
    2894:	1a 8b       	std	Y+18, r17	; 0x12
    2896:	2b 8b       	std	Y+19, r18	; 0x13
    2898:	3c 8b       	std	Y+20, r19	; 0x14
    289a:	4d 8b       	std	Y+21, r20	; 0x15
    289c:	5e 8b       	std	Y+22, r21	; 0x16
    289e:	6f 8b       	std	Y+23, r22	; 0x17
    28a0:	78 8f       	std	Y+24, r23	; 0x18
  tronco (pos_des, vector, (COORD3D){0,0,0}, 0, 0, 0, duracion, nsegmentos);
    28a2:	de 01       	movw	r26, r28
    28a4:	11 96       	adiw	r26, 0x01	; 1
    28a6:	ed e3       	ldi	r30, 0x3D	; 61
    28a8:	f4 e0       	ldi	r31, 0x04	; 4
    28aa:	8c e0       	ldi	r24, 0x0C	; 12
    28ac:	01 90       	ld	r0, Z+
    28ae:	0d 92       	st	X+, r0
    28b0:	81 50       	subi	r24, 0x01	; 1
    28b2:	e1 f7       	brne	.-8      	; 0x28ac <_ZN10Movimiento11translationE7COORD3Dih+0x4e>
    28b4:	8d b7       	in	r24, 0x3d	; 61
    28b6:	9e b7       	in	r25, 0x3e	; 62
    28b8:	4b 97       	sbiw	r24, 0x1b	; 27
    28ba:	0f b6       	in	r0, 0x3f	; 63
    28bc:	f8 94       	cli
    28be:	9e bf       	out	0x3e, r25	; 62
    28c0:	0f be       	out	0x3f, r0	; 63
    28c2:	8d bf       	out	0x3d, r24	; 61
    28c4:	ed b7       	in	r30, 0x3d	; 61
    28c6:	fe b7       	in	r31, 0x3e	; 62
    28c8:	31 96       	adiw	r30, 0x01	; 1
    28ca:	9f 01       	movw	r18, r30
    28cc:	ae 01       	movw	r20, r28
    28ce:	4f 5f       	subi	r20, 0xFF	; 255
    28d0:	5f 4f       	sbci	r21, 0xFF	; 255
    28d2:	8c e0       	ldi	r24, 0x0C	; 12
    28d4:	da 01       	movw	r26, r20
    28d6:	0d 90       	ld	r0, X+
    28d8:	ad 01       	movw	r20, r26
    28da:	d9 01       	movw	r26, r18
    28dc:	0d 92       	st	X+, r0
    28de:	9d 01       	movw	r18, r26
    28e0:	81 50       	subi	r24, 0x01	; 1
    28e2:	c1 f7       	brne	.-16     	; 0x28d4 <_ZN10Movimiento11translationE7COORD3Dih+0x76>
    28e4:	80 e0       	ldi	r24, 0x00	; 0
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	a0 e0       	ldi	r26, 0x00	; 0
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	84 87       	std	Z+12, r24	; 0x0c
    28ee:	95 87       	std	Z+13, r25	; 0x0d
    28f0:	a6 87       	std	Z+14, r26	; 0x0e
    28f2:	b7 87       	std	Z+15, r27	; 0x0f
    28f4:	80 8b       	std	Z+16, r24	; 0x10
    28f6:	91 8b       	std	Z+17, r25	; 0x11
    28f8:	a2 8b       	std	Z+18, r26	; 0x12
    28fa:	b3 8b       	std	Z+19, r27	; 0x13
    28fc:	84 8b       	std	Z+20, r24	; 0x14
    28fe:	95 8b       	std	Z+21, r25	; 0x15
    2900:	a6 8b       	std	Z+22, r26	; 0x16
    2902:	b7 8b       	std	Z+23, r27	; 0x17
    2904:	b1 8e       	std	Z+25, r11	; 0x19
    2906:	a0 8e       	std	Z+24, r10	; 0x18
    2908:	82 8e       	std	Z+26, r8	; 0x1a
    290a:	c3 01       	movw	r24, r6
    290c:	64 e5       	ldi	r22, 0x54	; 84
    290e:	72 e1       	ldi	r23, 0x12	; 18
    2910:	ad 84       	ldd	r10, Y+13	; 0x0d
    2912:	be 84       	ldd	r11, Y+14	; 0x0e
    2914:	cf 84       	ldd	r12, Y+15	; 0x0f
    2916:	d8 88       	ldd	r13, Y+16	; 0x10
    2918:	e9 88       	ldd	r14, Y+17	; 0x11
    291a:	fa 88       	ldd	r15, Y+18	; 0x12
    291c:	0b 89       	ldd	r16, Y+19	; 0x13
    291e:	1c 89       	ldd	r17, Y+20	; 0x14
    2920:	2d 89       	ldd	r18, Y+21	; 0x15
    2922:	3e 89       	ldd	r19, Y+22	; 0x16
    2924:	4f 89       	ldd	r20, Y+23	; 0x17
    2926:	58 8d       	ldd	r21, Y+24	; 0x18
    2928:	0e 94 1d 11 	call	0x223a	; 0x223a <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih>
    292c:	8d b7       	in	r24, 0x3d	; 61
    292e:	9e b7       	in	r25, 0x3e	; 62
    2930:	4b 96       	adiw	r24, 0x1b	; 27
    2932:	0f b6       	in	r0, 0x3f	; 63
    2934:	f8 94       	cli
    2936:	9e bf       	out	0x3e, r25	; 62
    2938:	0f be       	out	0x3f, r0	; 63
    293a:	8d bf       	out	0x3d, r24	; 61
}
    293c:	68 96       	adiw	r28, 0x18	; 24
    293e:	0f b6       	in	r0, 0x3f	; 63
    2940:	f8 94       	cli
    2942:	de bf       	out	0x3e, r29	; 62
    2944:	0f be       	out	0x3f, r0	; 63
    2946:	cd bf       	out	0x3d, r28	; 61
    2948:	cf 91       	pop	r28
    294a:	df 91       	pop	r29
    294c:	1f 91       	pop	r17
    294e:	0f 91       	pop	r16
    2950:	ff 90       	pop	r15
    2952:	ef 90       	pop	r14
    2954:	df 90       	pop	r13
    2956:	cf 90       	pop	r12
    2958:	bf 90       	pop	r11
    295a:	af 90       	pop	r10
    295c:	8f 90       	pop	r8
    295e:	7f 90       	pop	r7
    2960:	6f 90       	pop	r6
    2962:	08 95       	ret

00002964 <_ZN10MovimientoC1Ev>:

Movimiento mov;        // preinstanciado

///////////////////////////////////////// CONSTRUCTOR /////////////////////////////////////////

Movimiento::Movimiento () {           
    2964:	4f 92       	push	r4
    2966:	5f 92       	push	r5
    2968:	6f 92       	push	r6
    296a:	7f 92       	push	r7
    296c:	8f 92       	push	r8
    296e:	9f 92       	push	r9
    2970:	af 92       	push	r10
    2972:	bf 92       	push	r11
    2974:	cf 92       	push	r12
    2976:	df 92       	push	r13
    2978:	ef 92       	push	r14
    297a:	ff 92       	push	r15
    297c:	0f 93       	push	r16
    297e:	1f 93       	push	r17
    2980:	df 93       	push	r29
    2982:	cf 93       	push	r28
    2984:	cd b7       	in	r28, 0x3d	; 61
    2986:	de b7       	in	r29, 0x3e	; 62
    2988:	c8 54       	subi	r28, 0x48	; 72
    298a:	d0 40       	sbci	r29, 0x00	; 0
    298c:	0f b6       	in	r0, 0x3f	; 63
    298e:	f8 94       	cli
    2990:	de bf       	out	0x3e, r29	; 62
    2992:	0f be       	out	0x3f, r0	; 63
    2994:	cd bf       	out	0x3d, r28	; 61
    2996:	2c 01       	movw	r4, r24
	set_pos_ref (DEFAULT_POSITION);                      // posición de referencia (por las dudas que se olviden de setear)
    2998:	3e 01       	movw	r6, r28
    299a:	08 94       	sec
    299c:	61 1c       	adc	r6, r1
    299e:	71 1c       	adc	r7, r1
    29a0:	c3 01       	movw	r24, r6
    29a2:	43 e3       	ldi	r20, 0x33	; 51
    29a4:	53 e3       	ldi	r21, 0x33	; 51
    29a6:	6b ef       	ldi	r22, 0xFB	; 251
    29a8:	70 e4       	ldi	r23, 0x40	; 64
    29aa:	03 e3       	ldi	r16, 0x33	; 51
    29ac:	13 e3       	ldi	r17, 0x33	; 51
    29ae:	23 ef       	ldi	r18, 0xF3	; 243
    29b0:	31 e4       	ldi	r19, 0x41	; 65
    29b2:	0f 2e       	mov	r0, r31
    29b4:	f0 e0       	ldi	r31, 0x00	; 0
    29b6:	cf 2e       	mov	r12, r31
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	df 2e       	mov	r13, r31
    29bc:	f0 e1       	ldi	r31, 0x10	; 16
    29be:	ef 2e       	mov	r14, r31
    29c0:	f2 e4       	ldi	r31, 0x42	; 66
    29c2:	ff 2e       	mov	r15, r31
    29c4:	f0 2d       	mov	r31, r0
    29c6:	0f 2e       	mov	r0, r31
    29c8:	fd ec       	ldi	r31, 0xCD	; 205
    29ca:	8f 2e       	mov	r8, r31
    29cc:	fc ec       	ldi	r31, 0xCC	; 204
    29ce:	9f 2e       	mov	r9, r31
    29d0:	fe e0       	ldi	r31, 0x0E	; 14
    29d2:	af 2e       	mov	r10, r31
    29d4:	f2 e4       	ldi	r31, 0x42	; 66
    29d6:	bf 2e       	mov	r11, r31
    29d8:	f0 2d       	mov	r31, r0
    29da:	0e 94 a1 47 	call	0x8f42	; 0x8f42 <_Z8hexagonoffff>
    29de:	c2 01       	movw	r24, r4
    29e0:	b3 01       	movw	r22, r6
    29e2:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <_ZN10Movimiento11set_pos_refEP7COORD3D>
	osc_reset ();                                    // inicializa los osciladores 
    29e6:	c2 01       	movw	r24, r4
    29e8:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZN10Movimiento9osc_resetEv>
	bd.centro_ref = (COORD3D) {0, 0, 0};                 // centro de referencia de las rotaciones
    29ec:	d2 01       	movw	r26, r4
    29ee:	a3 56       	subi	r26, 0x63	; 99
    29f0:	bf 4f       	sbci	r27, 0xFF	; 255
    29f2:	e9 e4       	ldi	r30, 0x49	; 73
    29f4:	f4 e0       	ldi	r31, 0x04	; 4
    29f6:	8c e0       	ldi	r24, 0x0C	; 12
    29f8:	01 90       	ld	r0, Z+
    29fa:	0d 92       	st	X+, r0
    29fc:	81 50       	subi	r24, 0x01	; 1
    29fe:	e1 f7       	brne	.-8      	; 0x29f8 <_ZN10MovimientoC1Ev+0x94>
	// inicializa los monitores a NULL
	mon_angulo = NULL;
    2a00:	f2 01       	movw	r30, r4
    2a02:	11 82       	std	Z+1, r1	; 0x01
    2a04:	10 82       	st	Z, r1
	mon_desplazamiento = NULL;
    2a06:	13 82       	std	Z+3, r1	; 0x03
    2a08:	12 82       	std	Z+2, r1	; 0x02
	// inicia el estado de movimiento
	sh.cn.enable = false;
    2a0a:	84 ee       	ldi	r24, 0xE4	; 228
    2a0c:	91 e0       	ldi	r25, 0x01	; 1
    2a0e:	48 0e       	add	r4, r24
    2a10:	59 1e       	adc	r5, r25
    2a12:	f2 01       	movw	r30, r4
    2a14:	10 82       	st	Z, r1
}
    2a16:	c8 5b       	subi	r28, 0xB8	; 184
    2a18:	df 4f       	sbci	r29, 0xFF	; 255
    2a1a:	0f b6       	in	r0, 0x3f	; 63
    2a1c:	f8 94       	cli
    2a1e:	de bf       	out	0x3e, r29	; 62
    2a20:	0f be       	out	0x3f, r0	; 63
    2a22:	cd bf       	out	0x3d, r28	; 61
    2a24:	cf 91       	pop	r28
    2a26:	df 91       	pop	r29
    2a28:	1f 91       	pop	r17
    2a2a:	0f 91       	pop	r16
    2a2c:	ff 90       	pop	r15
    2a2e:	ef 90       	pop	r14
    2a30:	df 90       	pop	r13
    2a32:	cf 90       	pop	r12
    2a34:	bf 90       	pop	r11
    2a36:	af 90       	pop	r10
    2a38:	9f 90       	pop	r9
    2a3a:	8f 90       	pop	r8
    2a3c:	7f 90       	pop	r7
    2a3e:	6f 90       	pop	r6
    2a40:	5f 90       	pop	r5
    2a42:	4f 90       	pop	r4
    2a44:	08 95       	ret

00002a46 <_GLOBAL__I_mov>:
#include "movimiento.h"
#include "events.h"
#include <string.h>
#include "mov_bajo_nivel.h"      // para acceder a 'pos_des[]'

Movimiento mov;        // preinstanciado
    2a46:	85 ee       	ldi	r24, 0xE5	; 229
    2a48:	9f e0       	ldi	r25, 0x0F	; 15
    2a4a:	0e 94 b2 14 	call	0x2964	; 0x2964 <_ZN10MovimientoC1Ev>
    punto.y = bezier (origen.y, manejador.y, destino.y, t);
    punto.z = bezier (origen.z, manejador.z, destino.z, t);
    eventos.add ((MOVDATA) {patas, resta (punto, last), tps, absolute}, comienzo);  
    comienzo += tps; 
  } 
    2a4e:	08 95       	ret

00002a50 <_ZN10Movimiento4stopEv>:
	sh.cn.enable = true;
}

// detiene cualquier movimiento
void Movimiento::stop () {
	sh.cn.enable = false;
    2a50:	fc 01       	movw	r30, r24
    2a52:	ec 51       	subi	r30, 0x1C	; 28
    2a54:	fe 4f       	sbci	r31, 0xFE	; 254
    2a56:	10 82       	st	Z, r1
}
    2a58:	08 95       	ret

00002a5a <_ZN10Movimiento4nsegEi>:

// devuelve el número de segmentos a aplicar en la curva bezier 1
byte Movimiento::nseg (int duracion) {
	// duracion en TICKS
	// esta fórmula no tiene en cuenta la distancia
	return constrain (duracion/TPS, 2, 5);           // limitado a 5 porque son movimientos cortos
    2a5a:	6c 31       	cpi	r22, 0x1C	; 28
    2a5c:	71 05       	cpc	r23, r1
    2a5e:	14 f4       	brge	.+4      	; 0x2a64 <_ZN10Movimiento4nsegEi+0xa>
    2a60:	62 e0       	ldi	r22, 0x02	; 2
    2a62:	0a c0       	rjmp	.+20     	; 0x2a78 <_ZN10Movimiento4nsegEi+0x1e>
    2a64:	64 35       	cpi	r22, 0x54	; 84
    2a66:	71 05       	cpc	r23, r1
    2a68:	14 f0       	brlt	.+4      	; 0x2a6e <_ZN10Movimiento4nsegEi+0x14>
    2a6a:	65 e0       	ldi	r22, 0x05	; 5
    2a6c:	05 c0       	rjmp	.+10     	; 0x2a78 <_ZN10Movimiento4nsegEi+0x1e>
    2a6e:	cb 01       	movw	r24, r22
    2a70:	6e e0       	ldi	r22, 0x0E	; 14
    2a72:	70 e0       	ldi	r23, 0x00	; 0
    2a74:	0e 94 05 7f 	call	0xfe0a	; 0xfe0a <__divmodhi4>
}
    2a78:	86 2f       	mov	r24, r22
    2a7a:	08 95       	ret

00002a7c <_ZN10Movimiento4nsegEihf>:

// devuelve el número de segmentos a aplicar en la curva bezier 2
byte Movimiento::nseg (int duracion_pasos, byte escala, float largo_pasos) {
    2a7c:	af 92       	push	r10
    2a7e:	bf 92       	push	r11
    2a80:	cf 92       	push	r12
    2a82:	df 92       	push	r13
    2a84:	ef 92       	push	r14
    2a86:	ff 92       	push	r15
    2a88:	0f 93       	push	r16
    2a8a:	1f 93       	push	r17
    2a8c:	58 01       	movw	r10, r16
    2a8e:	69 01       	movw	r12, r18
	return constrain (duracion_pasos*escala*(largo_pasos/10)/TPS, 2, 10);       // esta fórmula sí tiene en cuenta la distancia
    2a90:	50 e0       	ldi	r21, 0x00	; 0
    2a92:	cb 01       	movw	r24, r22
    2a94:	48 9f       	mul	r20, r24
    2a96:	b0 01       	movw	r22, r0
    2a98:	49 9f       	mul	r20, r25
    2a9a:	70 0d       	add	r23, r0
    2a9c:	58 9f       	mul	r21, r24
    2a9e:	70 0d       	add	r23, r0
    2aa0:	11 24       	eor	r1, r1
    2aa2:	88 27       	eor	r24, r24
    2aa4:	77 fd       	sbrc	r23, 7
    2aa6:	80 95       	com	r24
    2aa8:	98 2f       	mov	r25, r24
    2aaa:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    2aae:	7b 01       	movw	r14, r22
    2ab0:	8c 01       	movw	r16, r24
    2ab2:	c6 01       	movw	r24, r12
    2ab4:	b5 01       	movw	r22, r10
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	40 e2       	ldi	r20, 0x20	; 32
    2abc:	51 e4       	ldi	r21, 0x41	; 65
    2abe:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    2ac2:	9b 01       	movw	r18, r22
    2ac4:	ac 01       	movw	r20, r24
    2ac6:	c8 01       	movw	r24, r16
    2ac8:	b7 01       	movw	r22, r14
    2aca:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	40 e6       	ldi	r20, 0x60	; 96
    2ad4:	51 e4       	ldi	r21, 0x41	; 65
    2ad6:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    2ada:	7b 01       	movw	r14, r22
    2adc:	8c 01       	movw	r16, r24
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	40 e0       	ldi	r20, 0x00	; 0
    2ae4:	50 e4       	ldi	r21, 0x40	; 64
    2ae6:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    2aea:	88 23       	and	r24, r24
    2aec:	14 f4       	brge	.+4      	; 0x2af2 <_ZN10Movimiento4nsegEihf+0x76>
    2aee:	82 e0       	ldi	r24, 0x02	; 2
    2af0:	11 c0       	rjmp	.+34     	; 0x2b14 <_ZN10Movimiento4nsegEihf+0x98>
    2af2:	c8 01       	movw	r24, r16
    2af4:	b7 01       	movw	r22, r14
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	40 e2       	ldi	r20, 0x20	; 32
    2afc:	51 e4       	ldi	r21, 0x41	; 65
    2afe:	0e 94 8c 7c 	call	0xf918	; 0xf918 <__gesf2>
    2b02:	18 16       	cp	r1, r24
    2b04:	14 f4       	brge	.+4      	; 0x2b0a <_ZN10Movimiento4nsegEihf+0x8e>
    2b06:	8a e0       	ldi	r24, 0x0A	; 10
    2b08:	05 c0       	rjmp	.+10     	; 0x2b14 <_ZN10Movimiento4nsegEihf+0x98>
    2b0a:	c8 01       	movw	r24, r16
    2b0c:	b7 01       	movw	r22, r14
    2b0e:	0e 94 35 7b 	call	0xf66a	; 0xf66a <__fixunssfsi>
    2b12:	86 2f       	mov	r24, r22
}
    2b14:	1f 91       	pop	r17
    2b16:	0f 91       	pop	r16
    2b18:	ff 90       	pop	r15
    2b1a:	ef 90       	pop	r14
    2b1c:	df 90       	pop	r13
    2b1e:	cf 90       	pop	r12
    2b20:	bf 90       	pop	r11
    2b22:	af 90       	pop	r10
    2b24:	08 95       	ret

00002b26 <_ZN10Movimiento10inc_escalaEv>:
	}
	return sh.mv.escala;
}

// reduce la velocidad en movimiento
byte Movimiento::inc_escala () {
    2b26:	0f 93       	push	r16
    2b28:	1f 93       	push	r17
    2b2a:	cf 93       	push	r28
    2b2c:	df 93       	push	r29
    2b2e:	ec 01       	movw	r28, r24
	if (sh.mv.escala < 255) {
    2b30:	fc 01       	movw	r30, r24
    2b32:	e0 52       	subi	r30, 0x20	; 32
    2b34:	fe 4f       	sbci	r31, 0xFE	; 254
    2b36:	10 81       	ld	r17, Z
    2b38:	1f 3f       	cpi	r17, 0xFF	; 255
    2b3a:	49 f1       	breq	.+82     	; 0x2b8e <_ZN10Movimiento10inc_escalaEv+0x68>
		sh.mv.escala ++;
    2b3c:	1f 5f       	subi	r17, 0xFF	; 255
    2b3e:	10 83       	st	Z, r17
		sh.cn.pausa = 1000*TICK*sh.mv.escala;
    2b40:	c8 51       	subi	r28, 0x18	; 24
    2b42:	de 4f       	sbci	r29, 0xFE	; 254
    2b44:	61 2f       	mov	r22, r17
    2b46:	70 e0       	ldi	r23, 0x00	; 0
    2b48:	88 27       	eor	r24, r24
    2b4a:	77 fd       	sbrc	r23, 7
    2b4c:	80 95       	com	r24
    2b4e:	98 2f       	mov	r25, r24
    2b50:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	40 e8       	ldi	r20, 0x80	; 128
    2b5a:	50 e4       	ldi	r21, 0x40	; 64
    2b5c:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    2b60:	0e 94 30 7b 	call	0xf660	; 0xf660 <__fixsfsi>
    2b64:	79 83       	std	Y+1, r23	; 0x01
    2b66:	68 83       	st	Y, r22
		sh.mv.nsegmentos = nseg (wk.mv.duracion_pasos, sh.mv.escala, 10);  // largo_pasos no se conoce, así que se estima en 10
    2b68:	c7 52       	subi	r28, 0x27	; 39
    2b6a:	d1 40       	sbci	r29, 0x01	; 1
    2b6c:	68 81       	ld	r22, Y
    2b6e:	79 81       	ldd	r23, Y+1	; 0x01
    2b70:	c1 5c       	subi	r28, 0xC1	; 193
    2b72:	d0 40       	sbci	r29, 0x00	; 0
    2b74:	ce 01       	movw	r24, r28
    2b76:	41 2f       	mov	r20, r17
    2b78:	00 e0       	ldi	r16, 0x00	; 0
    2b7a:	10 e0       	ldi	r17, 0x00	; 0
    2b7c:	20 e2       	ldi	r18, 0x20	; 32
    2b7e:	31 e4       	ldi	r19, 0x41	; 65
    2b80:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <_ZN10Movimiento4nsegEihf>
    2b84:	cf 51       	subi	r28, 0x1F	; 31
    2b86:	de 4f       	sbci	r29, 0xFE	; 254
    2b88:	88 83       	st	Y, r24
    2b8a:	c1 5e       	subi	r28, 0xE1	; 225
    2b8c:	d1 40       	sbci	r29, 0x01	; 1
    2b8e:	c0 52       	subi	r28, 0x20	; 32
    2b90:	de 4f       	sbci	r29, 0xFE	; 254
	}
	return sh.mv.escala;
}
    2b92:	88 81       	ld	r24, Y
    2b94:	df 91       	pop	r29
    2b96:	cf 91       	pop	r28
    2b98:	1f 91       	pop	r17
    2b9a:	0f 91       	pop	r16
    2b9c:	08 95       	ret

00002b9e <_ZN10Movimiento10dec_escalaEv>:
void Movimiento::cont () {
	sh.cn.enable = true;
}

// aumenta la velocidad en movimiento
byte Movimiento::dec_escala () {
    2b9e:	0f 93       	push	r16
    2ba0:	1f 93       	push	r17
    2ba2:	cf 93       	push	r28
    2ba4:	df 93       	push	r29
    2ba6:	ec 01       	movw	r28, r24
	if (sh.mv.escala > 1) {
    2ba8:	fc 01       	movw	r30, r24
    2baa:	e0 52       	subi	r30, 0x20	; 32
    2bac:	fe 4f       	sbci	r31, 0xFE	; 254
    2bae:	10 81       	ld	r17, Z
    2bb0:	12 30       	cpi	r17, 0x02	; 2
    2bb2:	48 f1       	brcs	.+82     	; 0x2c06 <_ZN10Movimiento10dec_escalaEv+0x68>
		sh.mv.escala --;
    2bb4:	11 50       	subi	r17, 0x01	; 1
    2bb6:	10 83       	st	Z, r17
		sh.cn.pausa = 1000*TICK*sh.mv.escala;
    2bb8:	c8 51       	subi	r28, 0x18	; 24
    2bba:	de 4f       	sbci	r29, 0xFE	; 254
    2bbc:	61 2f       	mov	r22, r17
    2bbe:	70 e0       	ldi	r23, 0x00	; 0
    2bc0:	88 27       	eor	r24, r24
    2bc2:	77 fd       	sbrc	r23, 7
    2bc4:	80 95       	com	r24
    2bc6:	98 2f       	mov	r25, r24
    2bc8:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	40 e8       	ldi	r20, 0x80	; 128
    2bd2:	50 e4       	ldi	r21, 0x40	; 64
    2bd4:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    2bd8:	0e 94 30 7b 	call	0xf660	; 0xf660 <__fixsfsi>
    2bdc:	79 83       	std	Y+1, r23	; 0x01
    2bde:	68 83       	st	Y, r22
		sh.mv.nsegmentos = nseg (wk.mv.duracion_pasos, sh.mv.escala, 10);  // largo_pasos no se conoce, así que se estima en 10
    2be0:	c7 52       	subi	r28, 0x27	; 39
    2be2:	d1 40       	sbci	r29, 0x01	; 1
    2be4:	68 81       	ld	r22, Y
    2be6:	79 81       	ldd	r23, Y+1	; 0x01
    2be8:	c1 5c       	subi	r28, 0xC1	; 193
    2bea:	d0 40       	sbci	r29, 0x00	; 0
    2bec:	ce 01       	movw	r24, r28
    2bee:	41 2f       	mov	r20, r17
    2bf0:	00 e0       	ldi	r16, 0x00	; 0
    2bf2:	10 e0       	ldi	r17, 0x00	; 0
    2bf4:	20 e2       	ldi	r18, 0x20	; 32
    2bf6:	31 e4       	ldi	r19, 0x41	; 65
    2bf8:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <_ZN10Movimiento4nsegEihf>
    2bfc:	cf 51       	subi	r28, 0x1F	; 31
    2bfe:	de 4f       	sbci	r29, 0xFE	; 254
    2c00:	88 83       	st	Y, r24
    2c02:	c1 5e       	subi	r28, 0xE1	; 225
    2c04:	d1 40       	sbci	r29, 0x01	; 1
    2c06:	c0 52       	subi	r28, 0x20	; 32
    2c08:	de 4f       	sbci	r29, 0xFE	; 254
	}
	return sh.mv.escala;
}
    2c0a:	88 81       	ld	r24, Y
    2c0c:	df 91       	pop	r29
    2c0e:	cf 91       	pop	r28
    2c10:	1f 91       	pop	r17
    2c12:	0f 91       	pop	r16
    2c14:	08 95       	ret

00002c16 <_ZN10Movimiento9h_correctE7COORD2D>:
byte Movimiento::nseg (int duracion_pasos, byte escala, float largo_pasos) {
	return constrain (duracion_pasos*escala*(largo_pasos/10)/TPS, 2, 10);       // esta fórmula sí tiene en cuenta la distancia
}

// devuelve la coordenada 'y' a partir de (x, z) usando la ecuación del plano (relativo)
COORD3D Movimiento::h_correct (COORD2D C) {
    2c16:	9f 92       	push	r9
    2c18:	af 92       	push	r10
    2c1a:	bf 92       	push	r11
    2c1c:	cf 92       	push	r12
    2c1e:	df 92       	push	r13
    2c20:	ef 92       	push	r14
    2c22:	ff 92       	push	r15
    2c24:	0f 93       	push	r16
    2c26:	1f 93       	push	r17
    2c28:	df 93       	push	r29
    2c2a:	cf 93       	push	r28
    2c2c:	cd b7       	in	r28, 0x3d	; 61
    2c2e:	de b7       	in	r29, 0x3e	; 62
    2c30:	28 97       	sbiw	r28, 0x08	; 8
    2c32:	0f b6       	in	r0, 0x3f	; 63
    2c34:	f8 94       	cli
    2c36:	de bf       	out	0x3e, r29	; 62
    2c38:	0f be       	out	0x3f, r0	; 63
    2c3a:	cd bf       	out	0x3d, r28	; 61
    2c3c:	5c 01       	movw	r10, r24
    2c3e:	6b 01       	movw	r12, r22
    2c40:	9e 2c       	mov	r9, r14
    2c42:	e9 82       	std	Y+1, r14	; 0x01
    2c44:	fa 82       	std	Y+2, r15	; 0x02
    2c46:	b0 2f       	mov	r27, r16
    2c48:	0b 83       	std	Y+3, r16	; 0x03
    2c4a:	a1 2f       	mov	r26, r17
    2c4c:	1c 83       	std	Y+4, r17	; 0x04
    2c4e:	f2 2f       	mov	r31, r18
    2c50:	2d 83       	std	Y+5, r18	; 0x05
    2c52:	e3 2f       	mov	r30, r19
    2c54:	3e 83       	std	Y+6, r19	; 0x06
    2c56:	64 2f       	mov	r22, r20
    2c58:	4f 83       	std	Y+7, r20	; 0x07
    2c5a:	75 2f       	mov	r23, r21
    2c5c:	58 87       	std	Y+8, r21	; 0x08
	COORD3D P = xz2xyz (C);
    2c5e:	09 2d       	mov	r16, r9
    2c60:	1f 2d       	mov	r17, r15
    2c62:	2b 2f       	mov	r18, r27
    2c64:	3a 2f       	mov	r19, r26
    2c66:	4f 2f       	mov	r20, r31
    2c68:	5e 2f       	mov	r21, r30
    2c6a:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_Z6xz2xyz7COORD2D>
	P.y = -(P.x*wk.rt.normal.x + P.z*wk.rt.normal.z) / wk.rt.normal.y; 
    2c6e:	88 e8       	ldi	r24, 0x88	; 136
    2c70:	91 e0       	ldi	r25, 0x01	; 1
    2c72:	c8 0e       	add	r12, r24
    2c74:	d9 1e       	adc	r13, r25
    2c76:	f5 01       	movw	r30, r10
    2c78:	60 81       	ld	r22, Z
    2c7a:	71 81       	ldd	r23, Z+1	; 0x01
    2c7c:	82 81       	ldd	r24, Z+2	; 0x02
    2c7e:	93 81       	ldd	r25, Z+3	; 0x03
    2c80:	f6 01       	movw	r30, r12
    2c82:	20 81       	ld	r18, Z
    2c84:	31 81       	ldd	r19, Z+1	; 0x01
    2c86:	42 81       	ldd	r20, Z+2	; 0x02
    2c88:	53 81       	ldd	r21, Z+3	; 0x03
    2c8a:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    2c8e:	7b 01       	movw	r14, r22
    2c90:	8c 01       	movw	r16, r24
    2c92:	88 e0       	ldi	r24, 0x08	; 8
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	c8 0e       	add	r12, r24
    2c98:	d9 1e       	adc	r13, r25
    2c9a:	f5 01       	movw	r30, r10
    2c9c:	60 85       	ldd	r22, Z+8	; 0x08
    2c9e:	71 85       	ldd	r23, Z+9	; 0x09
    2ca0:	82 85       	ldd	r24, Z+10	; 0x0a
    2ca2:	93 85       	ldd	r25, Z+11	; 0x0b
    2ca4:	f6 01       	movw	r30, r12
    2ca6:	20 81       	ld	r18, Z
    2ca8:	31 81       	ldd	r19, Z+1	; 0x01
    2caa:	42 81       	ldd	r20, Z+2	; 0x02
    2cac:	53 81       	ldd	r21, Z+3	; 0x03
    2cae:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    2cb2:	9b 01       	movw	r18, r22
    2cb4:	ac 01       	movw	r20, r24
    2cb6:	c8 01       	movw	r24, r16
    2cb8:	b7 01       	movw	r22, r14
    2cba:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    2cbe:	90 58       	subi	r25, 0x80	; 128
    2cc0:	f6 01       	movw	r30, r12
    2cc2:	52 91       	ld	r21, -Z
    2cc4:	42 91       	ld	r20, -Z
    2cc6:	32 91       	ld	r19, -Z
    2cc8:	22 91       	ld	r18, -Z
    2cca:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    2cce:	f5 01       	movw	r30, r10
    2cd0:	64 83       	std	Z+4, r22	; 0x04
    2cd2:	75 83       	std	Z+5, r23	; 0x05
    2cd4:	86 83       	std	Z+6, r24	; 0x06
    2cd6:	97 83       	std	Z+7, r25	; 0x07
	return P;
}
    2cd8:	c5 01       	movw	r24, r10
    2cda:	28 96       	adiw	r28, 0x08	; 8
    2cdc:	0f b6       	in	r0, 0x3f	; 63
    2cde:	f8 94       	cli
    2ce0:	de bf       	out	0x3e, r29	; 62
    2ce2:	0f be       	out	0x3f, r0	; 63
    2ce4:	cd bf       	out	0x3d, r28	; 61
    2ce6:	cf 91       	pop	r28
    2ce8:	df 91       	pop	r29
    2cea:	1f 91       	pop	r17
    2cec:	0f 91       	pop	r16
    2cee:	ff 90       	pop	r15
    2cf0:	ef 90       	pop	r14
    2cf2:	df 90       	pop	r13
    2cf4:	cf 90       	pop	r12
    2cf6:	bf 90       	pop	r11
    2cf8:	af 90       	pop	r10
    2cfa:	9f 90       	pop	r9
    2cfc:	08 95       	ret

00002cfe <_ZN10Movimiento9h_correctE7COORD2Dh>:

// devuelve la coordenada 'y' a partir de (x, z) usando la ecuación del plano (absoluto)
COORD3D Movimiento::h_correct (COORD2D C, byte pata) {
    2cfe:	7f 92       	push	r7
    2d00:	8f 92       	push	r8
    2d02:	9f 92       	push	r9
    2d04:	af 92       	push	r10
    2d06:	bf 92       	push	r11
    2d08:	cf 92       	push	r12
    2d0a:	df 92       	push	r13
    2d0c:	ef 92       	push	r14
    2d0e:	ff 92       	push	r15
    2d10:	0f 93       	push	r16
    2d12:	1f 93       	push	r17
    2d14:	df 93       	push	r29
    2d16:	cf 93       	push	r28
    2d18:	cd b7       	in	r28, 0x3d	; 61
    2d1a:	de b7       	in	r29, 0x3e	; 62
    2d1c:	a4 97       	sbiw	r28, 0x24	; 36
    2d1e:	0f b6       	in	r0, 0x3f	; 63
    2d20:	f8 94       	cli
    2d22:	de bf       	out	0x3e, r29	; 62
    2d24:	0f be       	out	0x3f, r0	; 63
    2d26:	cd bf       	out	0x3d, r28	; 61
    2d28:	4c 01       	movw	r8, r24
    2d2a:	5b 01       	movw	r10, r22
    2d2c:	ed 8a       	std	Y+21, r14	; 0x15
    2d2e:	fe 8a       	std	Y+22, r15	; 0x16
    2d30:	0f 8b       	std	Y+23, r16	; 0x17
    2d32:	18 8f       	std	Y+24, r17	; 0x18
    2d34:	62 2f       	mov	r22, r18
    2d36:	29 8f       	std	Y+25, r18	; 0x19
    2d38:	73 2f       	mov	r23, r19
    2d3a:	3a 8f       	std	Y+26, r19	; 0x1a
    2d3c:	84 2f       	mov	r24, r20
    2d3e:	4b 8f       	std	Y+27, r20	; 0x1b
    2d40:	95 2f       	mov	r25, r21
    2d42:	5c 8f       	std	Y+28, r21	; 0x1c
    2d44:	7c 2c       	mov	r7, r12
	COORD3D P = xz2xyz (rel2abs(C, pata));
    2d46:	2e 2d       	mov	r18, r14
    2d48:	3f 2d       	mov	r19, r15
    2d4a:	40 2f       	mov	r20, r16
    2d4c:	51 2f       	mov	r21, r17
    2d4e:	0c 2d       	mov	r16, r12
    2d50:	0e 94 4d 43 	call	0x869a	; 0x869a <_Z7rel2abs7COORD2Dh>
    2d54:	2d 8f       	std	Y+29, r18	; 0x1d
    2d56:	3e 8f       	std	Y+30, r19	; 0x1e
    2d58:	4f 8f       	std	Y+31, r20	; 0x1f
    2d5a:	58 a3       	std	Y+32, r21	; 0x20
    2d5c:	69 a3       	std	Y+33, r22	; 0x21
    2d5e:	7a a3       	std	Y+34, r23	; 0x22
    2d60:	8b a3       	std	Y+35, r24	; 0x23
    2d62:	9c a3       	std	Y+36, r25	; 0x24
    2d64:	de 01       	movw	r26, r28
    2d66:	11 96       	adiw	r26, 0x01	; 1
    2d68:	fe 01       	movw	r30, r28
    2d6a:	7d 96       	adiw	r30, 0x1d	; 29
    2d6c:	88 e0       	ldi	r24, 0x08	; 8
    2d6e:	01 90       	ld	r0, Z+
    2d70:	0d 92       	st	X+, r0
    2d72:	81 50       	subi	r24, 0x01	; 1
    2d74:	e1 f7       	brne	.-8      	; 0x2d6e <_ZN10Movimiento9h_correctE7COORD2Dh+0x70>
    2d76:	ce 01       	movw	r24, r28
    2d78:	09 96       	adiw	r24, 0x09	; 9
    2d7a:	09 81       	ldd	r16, Y+1	; 0x01
    2d7c:	1a 81       	ldd	r17, Y+2	; 0x02
    2d7e:	2b 81       	ldd	r18, Y+3	; 0x03
    2d80:	3c 81       	ldd	r19, Y+4	; 0x04
    2d82:	4d 81       	ldd	r20, Y+5	; 0x05
    2d84:	5e 81       	ldd	r21, Y+6	; 0x06
    2d86:	6f 81       	ldd	r22, Y+7	; 0x07
    2d88:	78 85       	ldd	r23, Y+8	; 0x08
    2d8a:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_Z6xz2xyz7COORD2D>
	P.y = -(P.x*wk.rt.normal.x + P.z*wk.rt.normal.z + wk.rt.d) / wk.rt.normal.y;
    2d8e:	28 e8       	ldi	r18, 0x88	; 136
    2d90:	31 e0       	ldi	r19, 0x01	; 1
    2d92:	a2 0e       	add	r10, r18
    2d94:	b3 1e       	adc	r11, r19
    2d96:	69 85       	ldd	r22, Y+9	; 0x09
    2d98:	7a 85       	ldd	r23, Y+10	; 0x0a
    2d9a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d9c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d9e:	f5 01       	movw	r30, r10
    2da0:	20 81       	ld	r18, Z
    2da2:	31 81       	ldd	r19, Z+1	; 0x01
    2da4:	42 81       	ldd	r20, Z+2	; 0x02
    2da6:	53 81       	ldd	r21, Z+3	; 0x03
    2da8:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    2dac:	7b 01       	movw	r14, r22
    2dae:	8c 01       	movw	r16, r24
    2db0:	28 e0       	ldi	r18, 0x08	; 8
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	a2 0e       	add	r10, r18
    2db6:	b3 1e       	adc	r11, r19
    2db8:	69 89       	ldd	r22, Y+17	; 0x11
    2dba:	7a 89       	ldd	r23, Y+18	; 0x12
    2dbc:	8b 89       	ldd	r24, Y+19	; 0x13
    2dbe:	9c 89       	ldd	r25, Y+20	; 0x14
    2dc0:	f5 01       	movw	r30, r10
    2dc2:	21 91       	ld	r18, Z+
    2dc4:	31 91       	ld	r19, Z+
    2dc6:	41 91       	ld	r20, Z+
    2dc8:	51 91       	ld	r21, Z+
    2dca:	5f 01       	movw	r10, r30
    2dcc:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    2dd0:	9b 01       	movw	r18, r22
    2dd2:	ac 01       	movw	r20, r24
    2dd4:	c8 01       	movw	r24, r16
    2dd6:	b7 01       	movw	r22, r14
    2dd8:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    2ddc:	f5 01       	movw	r30, r10
    2dde:	20 81       	ld	r18, Z
    2de0:	31 81       	ldd	r19, Z+1	; 0x01
    2de2:	42 81       	ldd	r20, Z+2	; 0x02
    2de4:	53 81       	ldd	r21, Z+3	; 0x03
    2de6:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    2dea:	90 58       	subi	r25, 0x80	; 128
    2dec:	28 ef       	ldi	r18, 0xF8	; 248
    2dee:	3f ef       	ldi	r19, 0xFF	; 255
    2df0:	a2 0e       	add	r10, r18
    2df2:	b3 1e       	adc	r11, r19
    2df4:	f5 01       	movw	r30, r10
    2df6:	20 81       	ld	r18, Z
    2df8:	31 81       	ldd	r19, Z+1	; 0x01
    2dfa:	42 81       	ldd	r20, Z+2	; 0x02
    2dfc:	53 81       	ldd	r21, Z+3	; 0x03
    2dfe:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    2e02:	6d 87       	std	Y+13, r22	; 0x0d
    2e04:	7e 87       	std	Y+14, r23	; 0x0e
    2e06:	8f 87       	std	Y+15, r24	; 0x0f
    2e08:	98 8b       	std	Y+16, r25	; 0x10
	return abs2rel (P, pata);
    2e0a:	c4 01       	movw	r24, r8
    2e0c:	c9 84       	ldd	r12, Y+9	; 0x09
    2e0e:	da 84       	ldd	r13, Y+10	; 0x0a
    2e10:	eb 84       	ldd	r14, Y+11	; 0x0b
    2e12:	fc 84       	ldd	r15, Y+12	; 0x0c
    2e14:	0d 85       	ldd	r16, Y+13	; 0x0d
    2e16:	1e 85       	ldd	r17, Y+14	; 0x0e
    2e18:	2f 85       	ldd	r18, Y+15	; 0x0f
    2e1a:	38 89       	ldd	r19, Y+16	; 0x10
    2e1c:	49 89       	ldd	r20, Y+17	; 0x11
    2e1e:	5a 89       	ldd	r21, Y+18	; 0x12
    2e20:	6b 89       	ldd	r22, Y+19	; 0x13
    2e22:	7c 89       	ldd	r23, Y+20	; 0x14
    2e24:	a7 2c       	mov	r10, r7
    2e26:	0e 94 7e 42 	call	0x84fc	; 0x84fc <_Z7abs2rel7COORD3Dh>
}
    2e2a:	c4 01       	movw	r24, r8
    2e2c:	a4 96       	adiw	r28, 0x24	; 36
    2e2e:	0f b6       	in	r0, 0x3f	; 63
    2e30:	f8 94       	cli
    2e32:	de bf       	out	0x3e, r29	; 62
    2e34:	0f be       	out	0x3f, r0	; 63
    2e36:	cd bf       	out	0x3d, r28	; 61
    2e38:	cf 91       	pop	r28
    2e3a:	df 91       	pop	r29
    2e3c:	1f 91       	pop	r17
    2e3e:	0f 91       	pop	r16
    2e40:	ff 90       	pop	r15
    2e42:	ef 90       	pop	r14
    2e44:	df 90       	pop	r13
    2e46:	cf 90       	pop	r12
    2e48:	bf 90       	pop	r11
    2e4a:	af 90       	pop	r10
    2e4c:	9f 90       	pop	r9
    2e4e:	8f 90       	pop	r8
    2e50:	7f 90       	pop	r7
    2e52:	08 95       	ret

00002e54 <_ZN10Movimiento6updateEm>:
// posición y que lentamente se vaya acomodando, la clave es: transformar sh.mv.pos_ref
// nueva corrección de planos inclinados - hay que testear performance
// se podría optimizar la caminata recta haciendo un vector 3D que ya tenga la 'y' corregida...
// ... pero en cambio, esto no es posible en la curva, donde hay que hacer montones de cálculos por cada pata.

void Movimiento::update (unsigned long milis) {          // esto es un kilombo. Solución: la "update" pasaría a ser una clase nueva
    2e54:	2f 92       	push	r2
    2e56:	3f 92       	push	r3
    2e58:	4f 92       	push	r4
    2e5a:	5f 92       	push	r5
    2e5c:	6f 92       	push	r6
    2e5e:	7f 92       	push	r7
    2e60:	8f 92       	push	r8
    2e62:	9f 92       	push	r9
    2e64:	af 92       	push	r10
    2e66:	bf 92       	push	r11
    2e68:	cf 92       	push	r12
    2e6a:	df 92       	push	r13
    2e6c:	ef 92       	push	r14
    2e6e:	ff 92       	push	r15
    2e70:	0f 93       	push	r16
    2e72:	1f 93       	push	r17
    2e74:	df 93       	push	r29
    2e76:	cf 93       	push	r28
    2e78:	cd b7       	in	r28, 0x3d	; 61
    2e7a:	de b7       	in	r29, 0x3e	; 62
    2e7c:	cc 57       	subi	r28, 0x7C	; 124
    2e7e:	d1 40       	sbci	r29, 0x01	; 1
    2e80:	0f b6       	in	r0, 0x3f	; 63
    2e82:	f8 94       	cli
    2e84:	de bf       	out	0x3e, r29	; 62
    2e86:	0f be       	out	0x3f, r0	; 63
    2e88:	cd bf       	out	0x3d, r28	; 61
    2e8a:	3c 01       	movw	r6, r24
    2e8c:	7a 01       	movw	r14, r20
    2e8e:	8b 01       	movw	r16, r22
  
  // única variable de control exclusiva de la "update"
  static unsigned long timer = 0;                         // timer
  
  // verifica si pasó x tiempo desde la última vez que se ejecutó el micropaso, y si no, retorna sin hacer nada 
  if (milis-timer < sh.cn.pausa) {return;} 
    2e90:	80 91 cf 11 	lds	r24, 0x11CF
    2e94:	90 91 d0 11 	lds	r25, 0x11D0
    2e98:	a0 91 d1 11 	lds	r26, 0x11D1
    2e9c:	b0 91 d2 11 	lds	r27, 0x11D2
    2ea0:	9a 01       	movw	r18, r20
    2ea2:	ab 01       	movw	r20, r22
    2ea4:	28 1b       	sub	r18, r24
    2ea6:	39 0b       	sbc	r19, r25
    2ea8:	4a 0b       	sbc	r20, r26
    2eaa:	5b 0b       	sbc	r21, r27
    2eac:	68 ee       	ldi	r22, 0xE8	; 232
    2eae:	71 e0       	ldi	r23, 0x01	; 1
    2eb0:	66 0e       	add	r6, r22
    2eb2:	77 1e       	adc	r7, r23
    2eb4:	d3 01       	movw	r26, r6
    2eb6:	8d 91       	ld	r24, X+
    2eb8:	9c 91       	ld	r25, X
    2eba:	e8 e1       	ldi	r30, 0x18	; 24
    2ebc:	fe ef       	ldi	r31, 0xFE	; 254
    2ebe:	6e 0e       	add	r6, r30
    2ec0:	7f 1e       	adc	r7, r31
    2ec2:	aa 27       	eor	r26, r26
    2ec4:	97 fd       	sbrc	r25, 7
    2ec6:	a0 95       	com	r26
    2ec8:	ba 2f       	mov	r27, r26
    2eca:	28 17       	cp	r18, r24
    2ecc:	39 07       	cpc	r19, r25
    2ece:	4a 07       	cpc	r20, r26
    2ed0:	5b 07       	cpc	r21, r27
    2ed2:	10 f4       	brcc	.+4      	; 0x2ed8 <_ZN10Movimiento6updateEm+0x84>
    2ed4:	0c 94 f7 26 	jmp	0x4dee	; 0x4dee <_ZN10Movimiento6updateEm+0x1f9a>
  timer = milis;
    2ed8:	e0 92 cf 11 	sts	0x11CF, r14
    2edc:	f0 92 d0 11 	sts	0x11D0, r15
    2ee0:	00 93 d1 11 	sts	0x11D1, r16
    2ee4:	10 93 d2 11 	sts	0x11D2, r17
  
	// empieza el loop (bloque activo)
	if (sh.cn.enable) {
    2ee8:	a3 01       	movw	r20, r6
    2eea:	4c 51       	subi	r20, 0x1C	; 28
    2eec:	5e 4f       	sbci	r21, 0xFE	; 254
    2eee:	da 01       	movw	r26, r20
    2ef0:	8c 91       	ld	r24, X
    2ef2:	88 23       	and	r24, r24
    2ef4:	11 f4       	brne	.+4      	; 0x2efa <_ZN10Movimiento6updateEm+0xa6>
    2ef6:	0c 94 f7 26 	jmp	0x4dee	; 0x4dee <_ZN10Movimiento6updateEm+0x1f9a>
		if (sh.cn.tick < sh.mv.ticks) {
    2efa:	d3 01       	movw	r26, r6
    2efc:	aa 51       	subi	r26, 0x1A	; 26
    2efe:	be 4f       	sbci	r27, 0xFE	; 254
    2f00:	6d 91       	ld	r22, X+
    2f02:	7c 91       	ld	r23, X
    2f04:	11 97       	sbiw	r26, 0x01	; 1
    2f06:	e2 ee       	ldi	r30, 0xE2	; 226
    2f08:	f1 e0       	ldi	r31, 0x01	; 1
    2f0a:	6e 0e       	add	r6, r30
    2f0c:	7f 1e       	adc	r7, r31
    2f0e:	f3 01       	movw	r30, r6
    2f10:	80 81       	ld	r24, Z
    2f12:	91 81       	ldd	r25, Z+1	; 0x01
    2f14:	2e e1       	ldi	r18, 0x1E	; 30
    2f16:	3e ef       	ldi	r19, 0xFE	; 254
    2f18:	62 0e       	add	r6, r18
    2f1a:	73 1e       	adc	r7, r19
    2f1c:	68 17       	cp	r22, r24
    2f1e:	79 07       	cpc	r23, r25
    2f20:	10 f0       	brcs	.+4      	; 0x2f26 <_ZN10Movimiento6updateEm+0xd2>
    2f22:	0c 94 f5 26 	jmp	0x4dea	; 0x4dea <_ZN10Movimiento6updateEm+0x1f96>
			switch (sh.cn.mode) {
    2f26:	45 ee       	ldi	r20, 0xE5	; 229
    2f28:	51 e0       	ldi	r21, 0x01	; 1
    2f2a:	64 0e       	add	r6, r20
    2f2c:	75 1e       	adc	r7, r21
    2f2e:	f3 01       	movw	r30, r6
    2f30:	80 81       	ld	r24, Z
    2f32:	2b e1       	ldi	r18, 0x1B	; 27
    2f34:	3e ef       	ldi	r19, 0xFE	; 254
    2f36:	62 0e       	add	r6, r18
    2f38:	73 1e       	adc	r7, r19
    2f3a:	88 23       	and	r24, r24
    2f3c:	31 f0       	breq	.+12     	; 0x2f4a <_ZN10Movimiento6updateEm+0xf6>
    2f3e:	81 30       	cpi	r24, 0x01	; 1
    2f40:	11 f0       	breq	.+4      	; 0x2f46 <_ZN10Movimiento6updateEm+0xf2>
    2f42:	0c 94 ec 26 	jmp	0x4dd8	; 0x4dd8 <_ZN10Movimiento6updateEm+0x1f84>
    2f46:	0c 94 6d 25 	jmp	0x4ada	; 0x4ada <_ZN10Movimiento6updateEm+0x1c86>
				case CAMINATA: {
					
					// compensación de posición de referencia
					if (wk.mv.compensate && sh.cn.tick < 2*wk.rt.ciclo) {
    2f4a:	43 ec       	ldi	r20, 0xC3	; 195
    2f4c:	50 e0       	ldi	r21, 0x00	; 0
    2f4e:	64 0e       	add	r6, r20
    2f50:	75 1e       	adc	r7, r21
    2f52:	d3 01       	movw	r26, r6
    2f54:	8c 91       	ld	r24, X
    2f56:	ed e3       	ldi	r30, 0x3D	; 61
    2f58:	ff ef       	ldi	r31, 0xFF	; 255
    2f5a:	6e 0e       	add	r6, r30
    2f5c:	7f 1e       	adc	r7, r31
    2f5e:	88 23       	and	r24, r24
    2f60:	09 f4       	brne	.+2      	; 0x2f64 <_ZN10Movimiento6updateEm+0x110>
    2f62:	53 c0       	rjmp	.+166    	; 0x300a <_ZN10Movimiento6updateEm+0x1b6>
    2f64:	80 e0       	ldi	r24, 0x00	; 0
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	0e 94 61 7b 	call	0xf6c2	; 0xf6c2 <__floatunsisf>
    2f6c:	7b 01       	movw	r14, r22
    2f6e:	8c 01       	movw	r16, r24
    2f70:	28 ec       	ldi	r18, 0xC8	; 200
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	62 0e       	add	r6, r18
    2f76:	73 1e       	adc	r7, r19
    2f78:	d3 01       	movw	r26, r6
    2f7a:	2d 91       	ld	r18, X+
    2f7c:	3d 91       	ld	r19, X+
    2f7e:	4d 91       	ld	r20, X+
    2f80:	5c 91       	ld	r21, X
    2f82:	e8 e3       	ldi	r30, 0x38	; 56
    2f84:	ff ef       	ldi	r31, 0xFF	; 255
    2f86:	6e 0e       	add	r6, r30
    2f88:	7f 1e       	adc	r7, r31
    2f8a:	ca 01       	movw	r24, r20
    2f8c:	b9 01       	movw	r22, r18
    2f8e:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    2f92:	9b 01       	movw	r18, r22
    2f94:	ac 01       	movw	r20, r24
    2f96:	c8 01       	movw	r24, r16
    2f98:	b7 01       	movw	r22, r14
    2f9a:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    2f9e:	88 23       	and	r24, r24
    2fa0:	a4 f5       	brge	.+104    	; 0x300a <_ZN10Movimiento6updateEm+0x1b6>
    2fa2:	aa 24       	eor	r10, r10
    2fa4:	bb 24       	eor	r11, r11
						for (byte pata=0; pata<6; pata++) {
							sumasigna (&wk.rt.pos_ref[pata], wk.rt.comp[pata]);  
    2fa6:	c5 01       	movw	r24, r10
    2fa8:	88 0f       	add	r24, r24
    2faa:	99 1f       	adc	r25, r25
    2fac:	8a 0d       	add	r24, r10
    2fae:	9b 1d       	adc	r25, r11
    2fb0:	88 0f       	add	r24, r24
    2fb2:	99 1f       	adc	r25, r25
    2fb4:	88 0f       	add	r24, r24
    2fb6:	99 1f       	adc	r25, r25
    2fb8:	f3 01       	movw	r30, r6
    2fba:	e8 0f       	add	r30, r24
    2fbc:	f9 1f       	adc	r31, r25
    2fbe:	e0 51       	subi	r30, 0x10	; 16
    2fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc2:	88 5c       	subi	r24, 0xC8	; 200
    2fc4:	9e 4f       	sbci	r25, 0xFE	; 254
    2fc6:	86 0d       	add	r24, r6
    2fc8:	97 1d       	adc	r25, r7
    2fca:	c0 80       	ld	r12, Z
    2fcc:	d1 80       	ldd	r13, Z+1	; 0x01
    2fce:	e2 80       	ldd	r14, Z+2	; 0x02
    2fd0:	f3 80       	ldd	r15, Z+3	; 0x03
    2fd2:	04 81       	ldd	r16, Z+4	; 0x04
    2fd4:	15 81       	ldd	r17, Z+5	; 0x05
    2fd6:	26 81       	ldd	r18, Z+6	; 0x06
    2fd8:	37 81       	ldd	r19, Z+7	; 0x07
    2fda:	40 85       	ldd	r20, Z+8	; 0x08
    2fdc:	51 85       	ldd	r21, Z+9	; 0x09
    2fde:	62 85       	ldd	r22, Z+10	; 0x0a
    2fe0:	73 85       	ldd	r23, Z+11	; 0x0b
    2fe2:	0e 94 c6 3e 	call	0x7d8c	; 0x7d8c <_Z9sumasignaP7COORD3DS_>
    2fe6:	08 94       	sec
    2fe8:	a1 1c       	adc	r10, r1
    2fea:	b1 1c       	adc	r11, r1
			switch (sh.cn.mode) {
				case CAMINATA: {
					
					// compensación de posición de referencia
					if (wk.mv.compensate && sh.cn.tick < 2*wk.rt.ciclo) {
						for (byte pata=0; pata<6; pata++) {
    2fec:	f6 e0       	ldi	r31, 0x06	; 6
    2fee:	af 16       	cp	r10, r31
    2ff0:	b1 04       	cpc	r11, r1
    2ff2:	c9 f6       	brne	.-78     	; 0x2fa6 <_ZN10Movimiento6updateEm+0x152>
							sumasigna (&wk.rt.pos_ref[pata], wk.rt.comp[pata]);  
						}
						ec_plano (wk.rt.pos_ref, &wk.rt.normal, &wk.rt.d);   // calcula nuevamente la ecuación del plano
    2ff4:	b3 01       	movw	r22, r6
    2ff6:	68 57       	subi	r22, 0x78	; 120
    2ff8:	7e 4f       	sbci	r23, 0xFE	; 254
    2ffa:	a3 01       	movw	r20, r6
    2ffc:	4c 56       	subi	r20, 0x6C	; 108
    2ffe:	5e 4f       	sbci	r21, 0xFE	; 254
    3000:	c3 01       	movw	r24, r6
    3002:	88 5c       	subi	r24, 0xC8	; 200
    3004:	9e 4f       	sbci	r25, 0xFE	; 254
    3006:	0e 94 3f 44 	call	0x887e	; 0x887e <_Z8ec_planoP7COORD3DS0_Pf>
					}
					
					// tratamiento de los "pasitos"
					if ((sh.cn.tick%wk.mv.periodo_sub_ciclo)-wk.mv.periodo_pasos*(wk.rt.index%wk.mv.agrupamiento) == 0) {
    300a:	96 ee       	ldi	r25, 0xE6	; 230
    300c:	e9 2e       	mov	r14, r25
    300e:	91 e0       	ldi	r25, 0x01	; 1
    3010:	f9 2e       	mov	r15, r25
    3012:	e6 0c       	add	r14, r6
    3014:	f7 1c       	adc	r15, r7
    3016:	2d eb       	ldi	r18, 0xBD	; 189
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	62 0e       	add	r6, r18
    301c:	73 1e       	adc	r7, r19
    301e:	d3 01       	movw	r26, r6
    3020:	6d 91       	ld	r22, X+
    3022:	7c 91       	ld	r23, X
    3024:	e3 e4       	ldi	r30, 0x43	; 67
    3026:	ff ef       	ldi	r31, 0xFF	; 255
    3028:	6e 0e       	add	r6, r30
    302a:	7f 1e       	adc	r7, r31
    302c:	d7 01       	movw	r26, r14
    302e:	8d 91       	ld	r24, X+
    3030:	9c 91       	ld	r25, X
    3032:	0e 94 f1 7e 	call	0xfde2	; 0xfde2 <__udivmodhi4>
    3036:	fc 01       	movw	r30, r24
    3038:	83 01       	movw	r16, r6
    303a:	00 58       	subi	r16, 0x80	; 128
    303c:	1e 4f       	sbci	r17, 0xFE	; 254
    303e:	2c eb       	ldi	r18, 0xBC	; 188
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	62 0e       	add	r6, r18
    3044:	73 1e       	adc	r7, r19
    3046:	d3 01       	movw	r26, r6
    3048:	6c 91       	ld	r22, X
    304a:	d8 01       	movw	r26, r16
    304c:	8c 91       	ld	r24, X
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	70 e0       	ldi	r23, 0x00	; 0
    3052:	0e 94 f1 7e 	call	0xfde2	; 0xfde2 <__udivmodhi4>
    3056:	23 e0       	ldi	r18, 0x03	; 3
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	62 0e       	add	r6, r18
    305c:	73 1e       	adc	r7, r19
    305e:	d3 01       	movw	r26, r6
    3060:	2d 91       	ld	r18, X+
    3062:	3c 91       	ld	r19, X
    3064:	41 e4       	ldi	r20, 0x41	; 65
    3066:	5f ef       	ldi	r21, 0xFF	; 255
    3068:	64 0e       	add	r6, r20
    306a:	75 1e       	adc	r7, r21
    306c:	bc 01       	movw	r22, r24
    306e:	62 9f       	mul	r22, r18
    3070:	c0 01       	movw	r24, r0
    3072:	63 9f       	mul	r22, r19
    3074:	90 0d       	add	r25, r0
    3076:	72 9f       	mul	r23, r18
    3078:	90 0d       	add	r25, r0
    307a:	11 24       	eor	r1, r1
    307c:	e8 17       	cp	r30, r24
    307e:	f9 07       	cpc	r31, r25
    3080:	11 f0       	breq	.+4      	; 0x3086 <_ZN10Movimiento6updateEm+0x232>
    3082:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <_ZN10Movimiento6updateEm+0x13c2>
										break;
									}
								} else {
									// rotación
									COORD2D O = getOffset (pata); // no usamos rel2abs/abs2rel por razones de eficiencia
									C = resta (suma (applyMatrix (resta (suma (xyz2xz(wk.rt.pos_ref[pata]), O), wk.mv.vector), wk.rt.rotor2), wk.mv.vector), O);   
    3086:	c3 01       	movw	r24, r6
    3088:	80 52       	subi	r24, 0x20	; 32
    308a:	9f 4f       	sbci	r25, 0xFF	; 255
    308c:	cd 59       	subi	r28, 0x9D	; 157
    308e:	de 4f       	sbci	r29, 0xFE	; 254
    3090:	99 83       	std	Y+1, r25	; 0x01
    3092:	88 83       	st	Y, r24
    3094:	c3 56       	subi	r28, 0x63	; 99
    3096:	d1 40       	sbci	r29, 0x01	; 1
    3098:	22 24       	eor	r2, r2
    309a:	33 24       	eor	r3, r3
					
					// tratamiento de los "pasitos"
					if ((sh.cn.tick%wk.mv.periodo_sub_ciclo)-wk.mv.periodo_pasos*(wk.rt.index%wk.mv.agrupamiento) == 0) {
									
						for (byte pata=0; pata<6; pata++) {
							if ((wk.mv.secuencia[wk.rt.index]>>pata)&1) {
    309c:	c5 59       	subi	r28, 0x95	; 149
    309e:	de 4f       	sbci	r29, 0xFE	; 254
    30a0:	19 83       	std	Y+1, r17	; 0x01
    30a2:	08 83       	st	Y, r16
    30a4:	cb 56       	subi	r28, 0x6B	; 107
    30a6:	d1 40       	sbci	r29, 0x01	; 1
								COORD2D C;
								float atenuador; 
								
								// "zancada progresiva"
								if (sh.cn.tick <= 2*wk.rt.ciclo) {atenuador = 1.6 * sigmoide(.5*sh.cn.tick/wk.rt.ciclo) - .6;} else {atenuador = 1;}
    30a8:	c3 59       	subi	r28, 0x93	; 147
    30aa:	de 4f       	sbci	r29, 0xFE	; 254
    30ac:	f9 82       	std	Y+1, r15	; 0x01
    30ae:	e8 82       	st	Y, r14
    30b0:	cd 56       	subi	r28, 0x6D	; 109
    30b2:	d1 40       	sbci	r29, 0x01	; 1
    30b4:	d3 01       	movw	r26, r6
    30b6:	a8 53       	subi	r26, 0x38	; 56
    30b8:	bf 4f       	sbci	r27, 0xFF	; 255
    30ba:	c1 59       	subi	r28, 0x91	; 145
    30bc:	de 4f       	sbci	r29, 0xFE	; 254
    30be:	b9 83       	std	Y+1, r27	; 0x01
    30c0:	a8 83       	st	Y, r26
    30c2:	cf 56       	subi	r28, 0x6F	; 111
    30c4:	d1 40       	sbci	r29, 0x01	; 1
								
								if (wk.mv.rotacion == 0) {
    30c6:	f3 01       	movw	r30, r6
    30c8:	ef 54       	subi	r30, 0x4F	; 79
    30ca:	ff 4f       	sbci	r31, 0xFF	; 255
    30cc:	cf 58       	subi	r28, 0x8F	; 143
    30ce:	de 4f       	sbci	r29, 0xFE	; 254
    30d0:	f9 83       	std	Y+1, r31	; 0x01
    30d2:	e8 83       	st	Y, r30
    30d4:	c1 57       	subi	r28, 0x71	; 113
    30d6:	d1 40       	sbci	r29, 0x01	; 1
									}
								} 
								
								// pasito
			//				pasito (1<<pata, (COORD3D) {C.x, wk.rt.pos_ref[pata].y, C.z}, true, 0, sh.mv.escala*wk.mv.duracion_pasos, sh.mv.nsegmentos, suma(wk.rt.pos_ref[pata], (COORD3D){0,wk.mv.altura_pasito,0}));
								pasito (1<<pata, h_correct(C, pata), true, 0, sh.mv.escala*wk.mv.duracion_pasos, sh.mv.nsegmentos, suma(wk.rt.pos_ref[pata], (COORD3D){0,wk.mv.altura_pasito,0}));
    30d8:	93 01       	movw	r18, r6
    30da:	20 52       	subi	r18, 0x20	; 32
    30dc:	3e 4f       	sbci	r19, 0xFE	; 254
    30de:	cd 58       	subi	r28, 0x8D	; 141
    30e0:	de 4f       	sbci	r29, 0xFE	; 254
    30e2:	39 83       	std	Y+1, r19	; 0x01
    30e4:	28 83       	st	Y, r18
    30e6:	c3 57       	subi	r28, 0x73	; 115
    30e8:	d1 40       	sbci	r29, 0x01	; 1
    30ea:	a3 01       	movw	r20, r6
    30ec:	4f 53       	subi	r20, 0x3F	; 63
    30ee:	5f 4f       	sbci	r21, 0xFF	; 255
    30f0:	cb 58       	subi	r28, 0x8B	; 139
    30f2:	de 4f       	sbci	r29, 0xFE	; 254
    30f4:	59 83       	std	Y+1, r21	; 0x01
    30f6:	48 83       	st	Y, r20
    30f8:	c5 57       	subi	r28, 0x75	; 117
    30fa:	d1 40       	sbci	r29, 0x01	; 1
    30fc:	b3 01       	movw	r22, r6
    30fe:	6f 51       	subi	r22, 0x1F	; 31
    3100:	7e 4f       	sbci	r23, 0xFE	; 254
    3102:	c9 58       	subi	r28, 0x89	; 137
    3104:	de 4f       	sbci	r29, 0xFE	; 254
    3106:	79 83       	std	Y+1, r23	; 0x01
    3108:	68 83       	st	Y, r22
    310a:	c7 57       	subi	r28, 0x77	; 119
    310c:	d1 40       	sbci	r29, 0x01	; 1
    310e:	c3 01       	movw	r24, r6
    3110:	8c 53       	subi	r24, 0x3C	; 60
    3112:	9f 4f       	sbci	r25, 0xFF	; 255
    3114:	c7 58       	subi	r28, 0x87	; 135
    3116:	de 4f       	sbci	r29, 0xFE	; 254
    3118:	99 83       	std	Y+1, r25	; 0x01
    311a:	88 83       	st	Y, r24
    311c:	c9 57       	subi	r28, 0x79	; 121
    311e:	d1 40       	sbci	r29, 0x01	; 1
										break;
									}
								} else {
									// rotación
									COORD2D O = getOffset (pata); // no usamos rel2abs/abs2rel por razones de eficiencia
									C = resta (suma (applyMatrix (resta (suma (xyz2xz(wk.rt.pos_ref[pata]), O), wk.mv.vector), wk.rt.rotor2), wk.mv.vector), O);   
    3120:	89 ea       	ldi	r24, 0xA9	; 169
    3122:	48 2e       	mov	r4, r24
    3124:	51 2c       	mov	r5, r1
    3126:	46 0c       	add	r4, r6
    3128:	57 1c       	adc	r5, r7
    312a:	92 2c       	mov	r9, r2
					
					// tratamiento de los "pasitos"
					if ((sh.cn.tick%wk.mv.periodo_sub_ciclo)-wk.mv.periodo_pasos*(wk.rt.index%wk.mv.agrupamiento) == 0) {
									
						for (byte pata=0; pata<6; pata++) {
							if ((wk.mv.secuencia[wk.rt.index]>>pata)&1) {
    312c:	c5 59       	subi	r28, 0x95	; 149
    312e:	de 4f       	sbci	r29, 0xFE	; 254
    3130:	a8 81       	ld	r26, Y
    3132:	b9 81       	ldd	r27, Y+1	; 0x01
    3134:	cb 56       	subi	r28, 0x6B	; 107
    3136:	d1 40       	sbci	r29, 0x01	; 1
    3138:	8c 91       	ld	r24, X
    313a:	f3 01       	movw	r30, r6
    313c:	e8 0f       	add	r30, r24
    313e:	f1 1d       	adc	r31, r1
    3140:	eb 54       	subi	r30, 0x4B	; 75
    3142:	ff 4f       	sbci	r31, 0xFF	; 255
    3144:	80 81       	ld	r24, Z
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	02 2c       	mov	r0, r2
    314a:	02 c0       	rjmp	.+4      	; 0x3150 <_ZN10Movimiento6updateEm+0x2fc>
    314c:	95 95       	asr	r25
    314e:	87 95       	ror	r24
    3150:	0a 94       	dec	r0
    3152:	e2 f7       	brpl	.-8      	; 0x314c <_ZN10Movimiento6updateEm+0x2f8>
    3154:	80 fd       	sbrc	r24, 0
    3156:	02 c0       	rjmp	.+4      	; 0x315c <_ZN10Movimiento6updateEm+0x308>
    3158:	0c 94 e0 20 	jmp	0x41c0	; 0x41c0 <_ZN10Movimiento6updateEm+0x136c>
								COORD2D C;
								float atenuador; 
								
								// "zancada progresiva"
								if (sh.cn.tick <= 2*wk.rt.ciclo) {atenuador = 1.6 * sigmoide(.5*sh.cn.tick/wk.rt.ciclo) - .6;} else {atenuador = 1;}
    315c:	c3 59       	subi	r28, 0x93	; 147
    315e:	de 4f       	sbci	r29, 0xFE	; 254
    3160:	e8 81       	ld	r30, Y
    3162:	f9 81       	ldd	r31, Y+1	; 0x01
    3164:	cd 56       	subi	r28, 0x6D	; 109
    3166:	d1 40       	sbci	r29, 0x01	; 1
    3168:	60 81       	ld	r22, Z
    316a:	71 81       	ldd	r23, Z+1	; 0x01
    316c:	80 e0       	ldi	r24, 0x00	; 0
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	0e 94 61 7b 	call	0xf6c2	; 0xf6c2 <__floatunsisf>
    3174:	5b 01       	movw	r10, r22
    3176:	6c 01       	movw	r12, r24
    3178:	c1 59       	subi	r28, 0x91	; 145
    317a:	de 4f       	sbci	r29, 0xFE	; 254
    317c:	a8 81       	ld	r26, Y
    317e:	b9 81       	ldd	r27, Y+1	; 0x01
    3180:	cf 56       	subi	r28, 0x6F	; 111
    3182:	d1 40       	sbci	r29, 0x01	; 1
    3184:	ed 90       	ld	r14, X+
    3186:	fd 90       	ld	r15, X+
    3188:	0d 91       	ld	r16, X+
    318a:	1c 91       	ld	r17, X
    318c:	c8 01       	movw	r24, r16
    318e:	b7 01       	movw	r22, r14
    3190:	a8 01       	movw	r20, r16
    3192:	97 01       	movw	r18, r14
    3194:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    3198:	9b 01       	movw	r18, r22
    319a:	ac 01       	movw	r20, r24
    319c:	c6 01       	movw	r24, r12
    319e:	b5 01       	movw	r22, r10
    31a0:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    31a4:	18 16       	cp	r1, r24
    31a6:	6c f4       	brge	.+26     	; 0x31c2 <_ZN10Movimiento6updateEm+0x36e>
    31a8:	20 e0       	ldi	r18, 0x00	; 0
    31aa:	30 e0       	ldi	r19, 0x00	; 0
    31ac:	40 e8       	ldi	r20, 0x80	; 128
    31ae:	5f e3       	ldi	r21, 0x3F	; 63
    31b0:	c3 5a       	subi	r28, 0xA3	; 163
    31b2:	de 4f       	sbci	r29, 0xFE	; 254
    31b4:	28 83       	st	Y, r18
    31b6:	39 83       	std	Y+1, r19	; 0x01
    31b8:	4a 83       	std	Y+2, r20	; 0x02
    31ba:	5b 83       	std	Y+3, r21	; 0x03
    31bc:	cd 55       	subi	r28, 0x5D	; 93
    31be:	d1 40       	sbci	r29, 0x01	; 1
    31c0:	22 c0       	rjmp	.+68     	; 0x3206 <_ZN10Movimiento6updateEm+0x3b2>
    31c2:	c6 01       	movw	r24, r12
    31c4:	b5 01       	movw	r22, r10
    31c6:	20 e0       	ldi	r18, 0x00	; 0
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	40 e0       	ldi	r20, 0x00	; 0
    31cc:	5f e3       	ldi	r21, 0x3F	; 63
    31ce:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    31d2:	a8 01       	movw	r20, r16
    31d4:	97 01       	movw	r18, r14
    31d6:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    31da:	0e 94 d5 73 	call	0xe7aa	; 0xe7aa <_Z8sigmoided>
    31de:	2d ec       	ldi	r18, 0xCD	; 205
    31e0:	3c ec       	ldi	r19, 0xCC	; 204
    31e2:	4c ec       	ldi	r20, 0xCC	; 204
    31e4:	5f e3       	ldi	r21, 0x3F	; 63
    31e6:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    31ea:	2a e9       	ldi	r18, 0x9A	; 154
    31ec:	39 e9       	ldi	r19, 0x99	; 153
    31ee:	49 e1       	ldi	r20, 0x19	; 25
    31f0:	5f e3       	ldi	r21, 0x3F	; 63
    31f2:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    31f6:	c3 5a       	subi	r28, 0xA3	; 163
    31f8:	de 4f       	sbci	r29, 0xFE	; 254
    31fa:	68 83       	st	Y, r22
    31fc:	79 83       	std	Y+1, r23	; 0x01
    31fe:	8a 83       	std	Y+2, r24	; 0x02
    3200:	9b 83       	std	Y+3, r25	; 0x03
    3202:	cd 55       	subi	r28, 0x5D	; 93
    3204:	d1 40       	sbci	r29, 0x01	; 1
								
								if (wk.mv.rotacion == 0) {
    3206:	cf 58       	subi	r28, 0x8F	; 143
    3208:	de 4f       	sbci	r29, 0xFE	; 254
    320a:	a8 81       	ld	r26, Y
    320c:	b9 81       	ldd	r27, Y+1	; 0x01
    320e:	c1 57       	subi	r28, 0x71	; 113
    3210:	d1 40       	sbci	r29, 0x01	; 1
    3212:	6d 91       	ld	r22, X+
    3214:	7d 91       	ld	r23, X+
    3216:	8d 91       	ld	r24, X+
    3218:	9c 91       	ld	r25, X
    321a:	20 e0       	ldi	r18, 0x00	; 0
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	40 e0       	ldi	r20, 0x00	; 0
    3220:	50 e0       	ldi	r21, 0x00	; 0
    3222:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    3226:	88 23       	and	r24, r24
    3228:	09 f0       	breq	.+2      	; 0x322c <_ZN10Movimiento6updateEm+0x3d8>
    322a:	e7 c2       	rjmp	.+1486   	; 0x37fa <_ZN10Movimiento6updateEm+0x9a6>
									// traslación
									C = suma(xyz2xz (wk.rt.pos_ref[pata]), producto(wk.mv.vector, -wk.rt.coeficiente*atenuador)); 
    322c:	f1 01       	movw	r30, r2
    322e:	ee 0f       	add	r30, r30
    3230:	ff 1f       	adc	r31, r31
    3232:	e2 0d       	add	r30, r2
    3234:	f3 1d       	adc	r31, r3
    3236:	ee 0f       	add	r30, r30
    3238:	ff 1f       	adc	r31, r31
    323a:	ee 0f       	add	r30, r30
    323c:	ff 1f       	adc	r31, r31
    323e:	e6 0d       	add	r30, r6
    3240:	f7 1d       	adc	r31, r7
    3242:	e8 5c       	subi	r30, 0xC8	; 200
    3244:	fe 4f       	sbci	r31, 0xFE	; 254
    3246:	e0 80       	ld	r14, Z
    3248:	f1 80       	ldd	r15, Z+1	; 0x01
    324a:	02 81       	ldd	r16, Z+2	; 0x02
    324c:	13 81       	ldd	r17, Z+3	; 0x03
    324e:	24 81       	ldd	r18, Z+4	; 0x04
    3250:	35 81       	ldd	r19, Z+5	; 0x05
    3252:	46 81       	ldd	r20, Z+6	; 0x06
    3254:	57 81       	ldd	r21, Z+7	; 0x07
    3256:	60 85       	ldd	r22, Z+8	; 0x08
    3258:	71 85       	ldd	r23, Z+9	; 0x09
    325a:	82 85       	ldd	r24, Z+10	; 0x0a
    325c:	93 85       	ldd	r25, Z+11	; 0x0b
    325e:	0e 94 ec 3c 	call	0x79d8	; 0x79d8 <_Z6xyz2xz7COORD3D>
    3262:	cf 5a       	subi	r28, 0xAF	; 175
    3264:	de 4f       	sbci	r29, 0xFE	; 254
    3266:	28 83       	st	Y, r18
    3268:	c1 55       	subi	r28, 0x51	; 81
    326a:	d1 40       	sbci	r29, 0x01	; 1
    326c:	ce 5a       	subi	r28, 0xAE	; 174
    326e:	de 4f       	sbci	r29, 0xFE	; 254
    3270:	38 83       	st	Y, r19
    3272:	c2 55       	subi	r28, 0x52	; 82
    3274:	d1 40       	sbci	r29, 0x01	; 1
    3276:	cd 5a       	subi	r28, 0xAD	; 173
    3278:	de 4f       	sbci	r29, 0xFE	; 254
    327a:	48 83       	st	Y, r20
    327c:	c3 55       	subi	r28, 0x53	; 83
    327e:	d1 40       	sbci	r29, 0x01	; 1
    3280:	cc 5a       	subi	r28, 0xAC	; 172
    3282:	de 4f       	sbci	r29, 0xFE	; 254
    3284:	58 83       	st	Y, r21
    3286:	c4 55       	subi	r28, 0x54	; 84
    3288:	d1 40       	sbci	r29, 0x01	; 1
    328a:	cb 5a       	subi	r28, 0xAB	; 171
    328c:	de 4f       	sbci	r29, 0xFE	; 254
    328e:	68 83       	st	Y, r22
    3290:	c5 55       	subi	r28, 0x55	; 85
    3292:	d1 40       	sbci	r29, 0x01	; 1
    3294:	ca 5a       	subi	r28, 0xAA	; 170
    3296:	de 4f       	sbci	r29, 0xFE	; 254
    3298:	78 83       	st	Y, r23
    329a:	c6 55       	subi	r28, 0x56	; 86
    329c:	d1 40       	sbci	r29, 0x01	; 1
    329e:	c9 5a       	subi	r28, 0xA9	; 169
    32a0:	de 4f       	sbci	r29, 0xFE	; 254
    32a2:	88 83       	st	Y, r24
    32a4:	c7 55       	subi	r28, 0x57	; 87
    32a6:	d1 40       	sbci	r29, 0x01	; 1
    32a8:	c8 5a       	subi	r28, 0xA8	; 168
    32aa:	de 4f       	sbci	r29, 0xFE	; 254
    32ac:	98 83       	st	Y, r25
    32ae:	c8 55       	subi	r28, 0x58	; 88
    32b0:	d1 40       	sbci	r29, 0x01	; 1
    32b2:	de 01       	movw	r26, r28
    32b4:	11 96       	adiw	r26, 0x01	; 1
    32b6:	fe 01       	movw	r30, r28
    32b8:	ef 5a       	subi	r30, 0xAF	; 175
    32ba:	fe 4f       	sbci	r31, 0xFE	; 254
    32bc:	88 e0       	ldi	r24, 0x08	; 8
    32be:	01 90       	ld	r0, Z+
    32c0:	0d 92       	st	X+, r0
    32c2:	81 50       	subi	r24, 0x01	; 1
    32c4:	e1 f7       	brne	.-8      	; 0x32be <_ZN10Movimiento6updateEm+0x46a>
    32c6:	ec ec       	ldi	r30, 0xCC	; 204
    32c8:	f0 e0       	ldi	r31, 0x00	; 0
    32ca:	6e 0e       	add	r6, r30
    32cc:	7f 1e       	adc	r7, r31
    32ce:	d3 01       	movw	r26, r6
    32d0:	6d 91       	ld	r22, X+
    32d2:	7d 91       	ld	r23, X+
    32d4:	8d 91       	ld	r24, X+
    32d6:	9c 91       	ld	r25, X
    32d8:	e4 e3       	ldi	r30, 0x34	; 52
    32da:	ff ef       	ldi	r31, 0xFF	; 255
    32dc:	6e 0e       	add	r6, r30
    32de:	7f 1e       	adc	r7, r31
    32e0:	90 58       	subi	r25, 0x80	; 128
    32e2:	c3 5a       	subi	r28, 0xA3	; 163
    32e4:	de 4f       	sbci	r29, 0xFE	; 254
    32e6:	28 81       	ld	r18, Y
    32e8:	39 81       	ldd	r19, Y+1	; 0x01
    32ea:	4a 81       	ldd	r20, Y+2	; 0x02
    32ec:	5b 81       	ldd	r21, Y+3	; 0x03
    32ee:	cd 55       	subi	r28, 0x5D	; 93
    32f0:	d1 40       	sbci	r29, 0x01	; 1
    32f2:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    32f6:	7b 01       	movw	r14, r22
    32f8:	8c 01       	movw	r16, r24
    32fa:	d2 01       	movw	r26, r4
    32fc:	2c 91       	ld	r18, X
    32fe:	11 96       	adiw	r26, 0x01	; 1
    3300:	3c 91       	ld	r19, X
    3302:	11 97       	sbiw	r26, 0x01	; 1
    3304:	12 96       	adiw	r26, 0x02	; 2
    3306:	4c 91       	ld	r20, X
    3308:	12 97       	sbiw	r26, 0x02	; 2
    330a:	13 96       	adiw	r26, 0x03	; 3
    330c:	5c 91       	ld	r21, X
    330e:	13 97       	sbiw	r26, 0x03	; 3
    3310:	14 96       	adiw	r26, 0x04	; 4
    3312:	6c 91       	ld	r22, X
    3314:	14 97       	sbiw	r26, 0x04	; 4
    3316:	15 96       	adiw	r26, 0x05	; 5
    3318:	7c 91       	ld	r23, X
    331a:	15 97       	sbiw	r26, 0x05	; 5
    331c:	16 96       	adiw	r26, 0x06	; 6
    331e:	8c 91       	ld	r24, X
    3320:	16 97       	sbiw	r26, 0x06	; 6
    3322:	17 96       	adiw	r26, 0x07	; 7
    3324:	9c 91       	ld	r25, X
    3326:	0e 94 64 3c 	call	0x78c8	; 0x78c8 <_Z8producto7COORD2Df>
    332a:	cf 5a       	subi	r28, 0xAF	; 175
    332c:	de 4f       	sbci	r29, 0xFE	; 254
    332e:	28 83       	st	Y, r18
    3330:	c1 55       	subi	r28, 0x51	; 81
    3332:	d1 40       	sbci	r29, 0x01	; 1
    3334:	ce 5a       	subi	r28, 0xAE	; 174
    3336:	de 4f       	sbci	r29, 0xFE	; 254
    3338:	38 83       	st	Y, r19
    333a:	c2 55       	subi	r28, 0x52	; 82
    333c:	d1 40       	sbci	r29, 0x01	; 1
    333e:	cd 5a       	subi	r28, 0xAD	; 173
    3340:	de 4f       	sbci	r29, 0xFE	; 254
    3342:	48 83       	st	Y, r20
    3344:	c3 55       	subi	r28, 0x53	; 83
    3346:	d1 40       	sbci	r29, 0x01	; 1
    3348:	cc 5a       	subi	r28, 0xAC	; 172
    334a:	de 4f       	sbci	r29, 0xFE	; 254
    334c:	58 83       	st	Y, r21
    334e:	c4 55       	subi	r28, 0x54	; 84
    3350:	d1 40       	sbci	r29, 0x01	; 1
    3352:	cb 5a       	subi	r28, 0xAB	; 171
    3354:	de 4f       	sbci	r29, 0xFE	; 254
    3356:	68 83       	st	Y, r22
    3358:	c5 55       	subi	r28, 0x55	; 85
    335a:	d1 40       	sbci	r29, 0x01	; 1
    335c:	ca 5a       	subi	r28, 0xAA	; 170
    335e:	de 4f       	sbci	r29, 0xFE	; 254
    3360:	78 83       	st	Y, r23
    3362:	c6 55       	subi	r28, 0x56	; 86
    3364:	d1 40       	sbci	r29, 0x01	; 1
    3366:	c9 5a       	subi	r28, 0xA9	; 169
    3368:	de 4f       	sbci	r29, 0xFE	; 254
    336a:	88 83       	st	Y, r24
    336c:	c7 55       	subi	r28, 0x57	; 87
    336e:	d1 40       	sbci	r29, 0x01	; 1
    3370:	c8 5a       	subi	r28, 0xA8	; 168
    3372:	de 4f       	sbci	r29, 0xFE	; 254
    3374:	98 83       	st	Y, r25
    3376:	c8 55       	subi	r28, 0x58	; 88
    3378:	d1 40       	sbci	r29, 0x01	; 1
    337a:	de 01       	movw	r26, r28
    337c:	19 96       	adiw	r26, 0x09	; 9
    337e:	fe 01       	movw	r30, r28
    3380:	ef 5a       	subi	r30, 0xAF	; 175
    3382:	fe 4f       	sbci	r31, 0xFE	; 254
    3384:	88 e0       	ldi	r24, 0x08	; 8
    3386:	01 90       	ld	r0, Z+
    3388:	0d 92       	st	X+, r0
    338a:	81 50       	subi	r24, 0x01	; 1
    338c:	e1 f7       	brne	.-8      	; 0x3386 <_ZN10Movimiento6updateEm+0x532>
    338e:	29 81       	ldd	r18, Y+1	; 0x01
    3390:	3a 81       	ldd	r19, Y+2	; 0x02
    3392:	4b 81       	ldd	r20, Y+3	; 0x03
    3394:	5c 81       	ldd	r21, Y+4	; 0x04
    3396:	6d 81       	ldd	r22, Y+5	; 0x05
    3398:	7e 81       	ldd	r23, Y+6	; 0x06
    339a:	8f 81       	ldd	r24, Y+7	; 0x07
    339c:	98 85       	ldd	r25, Y+8	; 0x08
    339e:	a9 84       	ldd	r10, Y+9	; 0x09
    33a0:	ba 84       	ldd	r11, Y+10	; 0x0a
    33a2:	cb 84       	ldd	r12, Y+11	; 0x0b
    33a4:	dc 84       	ldd	r13, Y+12	; 0x0c
    33a6:	ed 84       	ldd	r14, Y+13	; 0x0d
    33a8:	fe 84       	ldd	r15, Y+14	; 0x0e
    33aa:	0f 85       	ldd	r16, Y+15	; 0x0f
    33ac:	18 89       	ldd	r17, Y+16	; 0x10
    33ae:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <_Z4suma7COORD2DS_>
    33b2:	cf 5a       	subi	r28, 0xAF	; 175
    33b4:	de 4f       	sbci	r29, 0xFE	; 254
    33b6:	28 83       	st	Y, r18
    33b8:	c1 55       	subi	r28, 0x51	; 81
    33ba:	d1 40       	sbci	r29, 0x01	; 1
    33bc:	ce 5a       	subi	r28, 0xAE	; 174
    33be:	de 4f       	sbci	r29, 0xFE	; 254
    33c0:	38 83       	st	Y, r19
    33c2:	c2 55       	subi	r28, 0x52	; 82
    33c4:	d1 40       	sbci	r29, 0x01	; 1
    33c6:	cd 5a       	subi	r28, 0xAD	; 173
    33c8:	de 4f       	sbci	r29, 0xFE	; 254
    33ca:	48 83       	st	Y, r20
    33cc:	c3 55       	subi	r28, 0x53	; 83
    33ce:	d1 40       	sbci	r29, 0x01	; 1
    33d0:	cc 5a       	subi	r28, 0xAC	; 172
    33d2:	de 4f       	sbci	r29, 0xFE	; 254
    33d4:	58 83       	st	Y, r21
    33d6:	c4 55       	subi	r28, 0x54	; 84
    33d8:	d1 40       	sbci	r29, 0x01	; 1
    33da:	cb 5a       	subi	r28, 0xAB	; 171
    33dc:	de 4f       	sbci	r29, 0xFE	; 254
    33de:	68 83       	st	Y, r22
    33e0:	c5 55       	subi	r28, 0x55	; 85
    33e2:	d1 40       	sbci	r29, 0x01	; 1
    33e4:	ca 5a       	subi	r28, 0xAA	; 170
    33e6:	de 4f       	sbci	r29, 0xFE	; 254
    33e8:	78 83       	st	Y, r23
    33ea:	c6 55       	subi	r28, 0x56	; 86
    33ec:	d1 40       	sbci	r29, 0x01	; 1
    33ee:	c9 5a       	subi	r28, 0xA9	; 169
    33f0:	de 4f       	sbci	r29, 0xFE	; 254
    33f2:	88 83       	st	Y, r24
    33f4:	c7 55       	subi	r28, 0x57	; 87
    33f6:	d1 40       	sbci	r29, 0x01	; 1
    33f8:	c8 5a       	subi	r28, 0xA8	; 168
    33fa:	de 4f       	sbci	r29, 0xFE	; 254
    33fc:	98 83       	st	Y, r25
    33fe:	c8 55       	subi	r28, 0x58	; 88
    3400:	d1 40       	sbci	r29, 0x01	; 1
    3402:	de 01       	movw	r26, r28
    3404:	af 58       	subi	r26, 0x8F	; 143
    3406:	bf 4f       	sbci	r27, 0xFF	; 255
    3408:	fe 01       	movw	r30, r28
    340a:	ef 5a       	subi	r30, 0xAF	; 175
    340c:	fe 4f       	sbci	r31, 0xFE	; 254
    340e:	88 e0       	ldi	r24, 0x08	; 8
    3410:	01 90       	ld	r0, Z+
    3412:	0d 92       	st	X+, r0
    3414:	81 50       	subi	r24, 0x01	; 1
    3416:	e1 f7       	brne	.-8      	; 0x3410 <_ZN10Movimiento6updateEm+0x5bc>
									if (sh.cn.tick > 2*wk.rt.ciclo) {
    3418:	c3 59       	subi	r28, 0x93	; 147
    341a:	de 4f       	sbci	r29, 0xFE	; 254
    341c:	e8 81       	ld	r30, Y
    341e:	f9 81       	ldd	r31, Y+1	; 0x01
    3420:	cd 56       	subi	r28, 0x6D	; 109
    3422:	d1 40       	sbci	r29, 0x01	; 1
    3424:	60 81       	ld	r22, Z
    3426:	71 81       	ldd	r23, Z+1	; 0x01
    3428:	80 e0       	ldi	r24, 0x00	; 0
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	0e 94 61 7b 	call	0xf6c2	; 0xf6c2 <__floatunsisf>
    3430:	7b 01       	movw	r14, r22
    3432:	8c 01       	movw	r16, r24
    3434:	c1 59       	subi	r28, 0x91	; 145
    3436:	de 4f       	sbci	r29, 0xFE	; 254
    3438:	a8 81       	ld	r26, Y
    343a:	b9 81       	ldd	r27, Y+1	; 0x01
    343c:	cf 56       	subi	r28, 0x6F	; 111
    343e:	d1 40       	sbci	r29, 0x01	; 1
    3440:	2d 91       	ld	r18, X+
    3442:	3d 91       	ld	r19, X+
    3444:	4d 91       	ld	r20, X+
    3446:	5c 91       	ld	r21, X
    3448:	ca 01       	movw	r24, r20
    344a:	b9 01       	movw	r22, r18
    344c:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    3450:	9b 01       	movw	r18, r22
    3452:	ac 01       	movw	r20, r24
    3454:	c8 01       	movw	r24, r16
    3456:	b7 01       	movw	r22, r14
    3458:	0e 94 8c 7c 	call	0xf918	; 0xf918 <__gesf2>
    345c:	18 16       	cp	r1, r24
    345e:	0c f0       	brlt	.+2      	; 0x3462 <_ZN10Movimiento6updateEm+0x60e>
    3460:	a5 c5       	rjmp	.+2890   	; 0x3fac <_ZN10Movimiento6updateEm+0x1158>
										C = resta (C, xyz2xz(pos_des[pata]));
    3462:	f1 01       	movw	r30, r2
    3464:	ee 0f       	add	r30, r30
    3466:	ff 1f       	adc	r31, r31
    3468:	e2 0d       	add	r30, r2
    346a:	f3 1d       	adc	r31, r3
    346c:	ee 0f       	add	r30, r30
    346e:	ff 1f       	adc	r31, r31
    3470:	ee 0f       	add	r30, r30
    3472:	ff 1f       	adc	r31, r31
    3474:	ec 5a       	subi	r30, 0xAC	; 172
    3476:	fd 4e       	sbci	r31, 0xED	; 237
    3478:	e0 80       	ld	r14, Z
    347a:	f1 80       	ldd	r15, Z+1	; 0x01
    347c:	02 81       	ldd	r16, Z+2	; 0x02
    347e:	13 81       	ldd	r17, Z+3	; 0x03
    3480:	24 81       	ldd	r18, Z+4	; 0x04
    3482:	35 81       	ldd	r19, Z+5	; 0x05
    3484:	46 81       	ldd	r20, Z+6	; 0x06
    3486:	57 81       	ldd	r21, Z+7	; 0x07
    3488:	60 85       	ldd	r22, Z+8	; 0x08
    348a:	71 85       	ldd	r23, Z+9	; 0x09
    348c:	82 85       	ldd	r24, Z+10	; 0x0a
    348e:	93 85       	ldd	r25, Z+11	; 0x0b
    3490:	0e 94 ec 3c 	call	0x79d8	; 0x79d8 <_Z6xyz2xz7COORD3D>
    3494:	de 01       	movw	r26, r28
    3496:	af 5a       	subi	r26, 0xAF	; 175
    3498:	be 4f       	sbci	r27, 0xFE	; 254
    349a:	2c 93       	st	X, r18
    349c:	fe 01       	movw	r30, r28
    349e:	ee 5a       	subi	r30, 0xAE	; 174
    34a0:	fe 4f       	sbci	r31, 0xFE	; 254
    34a2:	30 83       	st	Z, r19
    34a4:	fe 01       	movw	r30, r28
    34a6:	ed 5a       	subi	r30, 0xAD	; 173
    34a8:	fe 4f       	sbci	r31, 0xFE	; 254
    34aa:	40 83       	st	Z, r20
    34ac:	fe 01       	movw	r30, r28
    34ae:	ec 5a       	subi	r30, 0xAC	; 172
    34b0:	fe 4f       	sbci	r31, 0xFE	; 254
    34b2:	50 83       	st	Z, r21
    34b4:	fe 01       	movw	r30, r28
    34b6:	eb 5a       	subi	r30, 0xAB	; 171
    34b8:	fe 4f       	sbci	r31, 0xFE	; 254
    34ba:	60 83       	st	Z, r22
    34bc:	fe 01       	movw	r30, r28
    34be:	ea 5a       	subi	r30, 0xAA	; 170
    34c0:	fe 4f       	sbci	r31, 0xFE	; 254
    34c2:	70 83       	st	Z, r23
    34c4:	fe 01       	movw	r30, r28
    34c6:	e9 5a       	subi	r30, 0xA9	; 169
    34c8:	fe 4f       	sbci	r31, 0xFE	; 254
    34ca:	80 83       	st	Z, r24
    34cc:	fe 01       	movw	r30, r28
    34ce:	e8 5a       	subi	r30, 0xA8	; 168
    34d0:	fe 4f       	sbci	r31, 0xFE	; 254
    34d2:	90 83       	st	Z, r25
    34d4:	9e 01       	movw	r18, r28
    34d6:	2f 5e       	subi	r18, 0xEF	; 239
    34d8:	3f 4f       	sbci	r19, 0xFF	; 255
    34da:	fd 01       	movw	r30, r26
    34dc:	88 e0       	ldi	r24, 0x08	; 8
    34de:	01 90       	ld	r0, Z+
    34e0:	d9 01       	movw	r26, r18
    34e2:	0d 92       	st	X+, r0
    34e4:	9d 01       	movw	r18, r26
    34e6:	81 50       	subi	r24, 0x01	; 1
    34e8:	d1 f7       	brne	.-12     	; 0x34de <_ZN10Movimiento6updateEm+0x68a>
    34ea:	71 e7       	ldi	r23, 0x71	; 113
    34ec:	87 2e       	mov	r8, r23
    34ee:	91 2c       	mov	r9, r1
    34f0:	8c 0e       	add	r8, r28
    34f2:	9d 1e       	adc	r9, r29
    34f4:	f4 01       	movw	r30, r8
    34f6:	20 81       	ld	r18, Z
    34f8:	31 81       	ldd	r19, Z+1	; 0x01
    34fa:	42 81       	ldd	r20, Z+2	; 0x02
    34fc:	53 81       	ldd	r21, Z+3	; 0x03
    34fe:	64 81       	ldd	r22, Z+4	; 0x04
    3500:	75 81       	ldd	r23, Z+5	; 0x05
    3502:	86 81       	ldd	r24, Z+6	; 0x06
    3504:	97 81       	ldd	r25, Z+7	; 0x07
    3506:	a9 88       	ldd	r10, Y+17	; 0x11
    3508:	ba 88       	ldd	r11, Y+18	; 0x12
    350a:	cb 88       	ldd	r12, Y+19	; 0x13
    350c:	dc 88       	ldd	r13, Y+20	; 0x14
    350e:	ed 88       	ldd	r14, Y+21	; 0x15
    3510:	fe 88       	ldd	r15, Y+22	; 0x16
    3512:	0f 89       	ldd	r16, Y+23	; 0x17
    3514:	18 8d       	ldd	r17, Y+24	; 0x18
    3516:	0e 94 9b 3b 	call	0x7736	; 0x7736 <_Z5resta7COORD2DS_>
    351a:	de 01       	movw	r26, r28
    351c:	af 5a       	subi	r26, 0xAF	; 175
    351e:	be 4f       	sbci	r27, 0xFE	; 254
    3520:	2c 93       	st	X, r18
    3522:	fe 01       	movw	r30, r28
    3524:	ee 5a       	subi	r30, 0xAE	; 174
    3526:	fe 4f       	sbci	r31, 0xFE	; 254
    3528:	30 83       	st	Z, r19
    352a:	fe 01       	movw	r30, r28
    352c:	ed 5a       	subi	r30, 0xAD	; 173
    352e:	fe 4f       	sbci	r31, 0xFE	; 254
    3530:	40 83       	st	Z, r20
    3532:	fe 01       	movw	r30, r28
    3534:	ec 5a       	subi	r30, 0xAC	; 172
    3536:	fe 4f       	sbci	r31, 0xFE	; 254
    3538:	50 83       	st	Z, r21
    353a:	fe 01       	movw	r30, r28
    353c:	eb 5a       	subi	r30, 0xAB	; 171
    353e:	fe 4f       	sbci	r31, 0xFE	; 254
    3540:	60 83       	st	Z, r22
    3542:	fe 01       	movw	r30, r28
    3544:	ea 5a       	subi	r30, 0xAA	; 170
    3546:	fe 4f       	sbci	r31, 0xFE	; 254
    3548:	70 83       	st	Z, r23
    354a:	fe 01       	movw	r30, r28
    354c:	e9 5a       	subi	r30, 0xA9	; 169
    354e:	fe 4f       	sbci	r31, 0xFE	; 254
    3550:	80 83       	st	Z, r24
    3552:	fe 01       	movw	r30, r28
    3554:	e8 5a       	subi	r30, 0xA8	; 168
    3556:	fe 4f       	sbci	r31, 0xFE	; 254
    3558:	90 83       	st	Z, r25
    355a:	94 01       	movw	r18, r8
    355c:	fd 01       	movw	r30, r26
    355e:	88 e0       	ldi	r24, 0x08	; 8
    3560:	01 90       	ld	r0, Z+
    3562:	d9 01       	movw	r26, r18
    3564:	0d 92       	st	X+, r0
    3566:	9d 01       	movw	r18, r26
    3568:	81 50       	subi	r24, 0x01	; 1
    356a:	d1 f7       	brne	.-12     	; 0x3560 <_ZN10Movimiento6updateEm+0x70c>
										// si las condiciones están dadas, agenda un solo pasito relativo para todas las patas y sale
					//				pasito (wk.mv.secuencia[wk.rt.index], xz2xyz(C), false, 0, sh.mv.escala*wk.mv.duracion_pasos, sh.mv.nsegmentos, suma(xz2xyz(producto(C, .5)), (COORD3D){0,wk.mv.altura_pasito,0}));
										pasito (wk.mv.secuencia[wk.rt.index], h_correct(C), false, 0, sh.mv.escala*wk.mv.duracion_pasos, sh.mv.nsegmentos, suma(xz2xyz(producto(C, .5)), (COORD3D){0,wk.mv.altura_pasito,0}));
    356c:	e0 e8       	ldi	r30, 0x80	; 128
    356e:	f1 e0       	ldi	r31, 0x01	; 1
    3570:	6e 0e       	add	r6, r30
    3572:	7f 1e       	adc	r7, r31
    3574:	d3 01       	movw	r26, r6
    3576:	8c 91       	ld	r24, X
    3578:	e0 e8       	ldi	r30, 0x80	; 128
    357a:	fe ef       	ldi	r31, 0xFE	; 254
    357c:	6e 0e       	add	r6, r30
    357e:	7f 1e       	adc	r7, r31
    3580:	f3 01       	movw	r30, r6
    3582:	e8 0f       	add	r30, r24
    3584:	f1 1d       	adc	r31, r1
    3586:	eb 54       	subi	r30, 0x4B	; 75
    3588:	ff 4f       	sbci	r31, 0xFF	; 255
    358a:	20 80       	ld	r2, Z
    358c:	61 e7       	ldi	r22, 0x71	; 113
    358e:	c6 2e       	mov	r12, r22
    3590:	d1 2c       	mov	r13, r1
    3592:	cc 0e       	add	r12, r28
    3594:	dd 1e       	adc	r13, r29
    3596:	ce 01       	movw	r24, r28
    3598:	8f 55       	subi	r24, 0x5F	; 95
    359a:	9f 4f       	sbci	r25, 0xFF	; 255
    359c:	b3 01       	movw	r22, r6
    359e:	d6 01       	movw	r26, r12
    35a0:	ec 90       	ld	r14, X
    35a2:	11 96       	adiw	r26, 0x01	; 1
    35a4:	fc 90       	ld	r15, X
    35a6:	11 97       	sbiw	r26, 0x01	; 1
    35a8:	12 96       	adiw	r26, 0x02	; 2
    35aa:	0c 91       	ld	r16, X
    35ac:	12 97       	sbiw	r26, 0x02	; 2
    35ae:	13 96       	adiw	r26, 0x03	; 3
    35b0:	1c 91       	ld	r17, X
    35b2:	13 97       	sbiw	r26, 0x03	; 3
    35b4:	14 96       	adiw	r26, 0x04	; 4
    35b6:	2c 91       	ld	r18, X
    35b8:	14 97       	sbiw	r26, 0x04	; 4
    35ba:	15 96       	adiw	r26, 0x05	; 5
    35bc:	3c 91       	ld	r19, X
    35be:	15 97       	sbiw	r26, 0x05	; 5
    35c0:	16 96       	adiw	r26, 0x06	; 6
    35c2:	4c 91       	ld	r20, X
    35c4:	16 97       	sbiw	r26, 0x06	; 6
    35c6:	17 96       	adiw	r26, 0x07	; 7
    35c8:	5c 91       	ld	r21, X
    35ca:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <_ZN10Movimiento9h_correctE7COORD2D>
    35ce:	e0 ee       	ldi	r30, 0xE0	; 224
    35d0:	f1 e0       	ldi	r31, 0x01	; 1
    35d2:	6e 0e       	add	r6, r30
    35d4:	7f 1e       	adc	r7, r31
    35d6:	d3 01       	movw	r26, r6
    35d8:	8c 91       	ld	r24, X
    35da:	90 e0       	ldi	r25, 0x00	; 0
    35dc:	e1 ee       	ldi	r30, 0xE1	; 225
    35de:	fe ef       	ldi	r31, 0xFE	; 254
    35e0:	6e 0e       	add	r6, r30
    35e2:	7f 1e       	adc	r7, r31
    35e4:	d3 01       	movw	r26, r6
    35e6:	2d 91       	ld	r18, X+
    35e8:	3c 91       	ld	r19, X
    35ea:	82 9f       	mul	r24, r18
    35ec:	20 01       	movw	r4, r0
    35ee:	83 9f       	mul	r24, r19
    35f0:	50 0c       	add	r5, r0
    35f2:	92 9f       	mul	r25, r18
    35f4:	50 0c       	add	r5, r0
    35f6:	11 24       	eor	r1, r1
    35f8:	e0 e2       	ldi	r30, 0x20	; 32
    35fa:	f1 e0       	ldi	r31, 0x01	; 1
    35fc:	6e 0e       	add	r6, r30
    35fe:	7f 1e       	adc	r7, r31
    3600:	d3 01       	movw	r26, r6
    3602:	3c 90       	ld	r3, X
    3604:	ef e1       	ldi	r30, 0x1F	; 31
    3606:	fe ef       	ldi	r31, 0xFE	; 254
    3608:	6e 0e       	add	r6, r30
    360a:	7f 1e       	adc	r7, r31
    360c:	d6 01       	movw	r26, r12
    360e:	2c 91       	ld	r18, X
    3610:	11 96       	adiw	r26, 0x01	; 1
    3612:	3c 91       	ld	r19, X
    3614:	11 97       	sbiw	r26, 0x01	; 1
    3616:	12 96       	adiw	r26, 0x02	; 2
    3618:	4c 91       	ld	r20, X
    361a:	12 97       	sbiw	r26, 0x02	; 2
    361c:	13 96       	adiw	r26, 0x03	; 3
    361e:	5c 91       	ld	r21, X
    3620:	13 97       	sbiw	r26, 0x03	; 3
    3622:	14 96       	adiw	r26, 0x04	; 4
    3624:	6c 91       	ld	r22, X
    3626:	14 97       	sbiw	r26, 0x04	; 4
    3628:	15 96       	adiw	r26, 0x05	; 5
    362a:	7c 91       	ld	r23, X
    362c:	15 97       	sbiw	r26, 0x05	; 5
    362e:	16 96       	adiw	r26, 0x06	; 6
    3630:	8c 91       	ld	r24, X
    3632:	16 97       	sbiw	r26, 0x06	; 6
    3634:	17 96       	adiw	r26, 0x07	; 7
    3636:	9c 91       	ld	r25, X
    3638:	0f 2e       	mov	r0, r31
    363a:	f0 e0       	ldi	r31, 0x00	; 0
    363c:	ef 2e       	mov	r14, r31
    363e:	f0 e0       	ldi	r31, 0x00	; 0
    3640:	ff 2e       	mov	r15, r31
    3642:	f0 e0       	ldi	r31, 0x00	; 0
    3644:	0f 2f       	mov	r16, r31
    3646:	ff e3       	ldi	r31, 0x3F	; 63
    3648:	1f 2f       	mov	r17, r31
    364a:	f0 2d       	mov	r31, r0
    364c:	0e 94 64 3c 	call	0x78c8	; 0x78c8 <_Z8producto7COORD2Df>
    3650:	de 01       	movw	r26, r28
    3652:	af 5a       	subi	r26, 0xAF	; 175
    3654:	be 4f       	sbci	r27, 0xFE	; 254
    3656:	2c 93       	st	X, r18
    3658:	fe 01       	movw	r30, r28
    365a:	ee 5a       	subi	r30, 0xAE	; 174
    365c:	fe 4f       	sbci	r31, 0xFE	; 254
    365e:	30 83       	st	Z, r19
    3660:	fe 01       	movw	r30, r28
    3662:	ed 5a       	subi	r30, 0xAD	; 173
    3664:	fe 4f       	sbci	r31, 0xFE	; 254
    3666:	40 83       	st	Z, r20
    3668:	fe 01       	movw	r30, r28
    366a:	ec 5a       	subi	r30, 0xAC	; 172
    366c:	fe 4f       	sbci	r31, 0xFE	; 254
    366e:	50 83       	st	Z, r21
    3670:	fe 01       	movw	r30, r28
    3672:	eb 5a       	subi	r30, 0xAB	; 171
    3674:	fe 4f       	sbci	r31, 0xFE	; 254
    3676:	60 83       	st	Z, r22
    3678:	fe 01       	movw	r30, r28
    367a:	ea 5a       	subi	r30, 0xAA	; 170
    367c:	fe 4f       	sbci	r31, 0xFE	; 254
    367e:	70 83       	st	Z, r23
    3680:	fe 01       	movw	r30, r28
    3682:	e9 5a       	subi	r30, 0xA9	; 169
    3684:	fe 4f       	sbci	r31, 0xFE	; 254
    3686:	80 83       	st	Z, r24
    3688:	fe 01       	movw	r30, r28
    368a:	e8 5a       	subi	r30, 0xA8	; 168
    368c:	fe 4f       	sbci	r31, 0xFE	; 254
    368e:	90 83       	st	Z, r25
    3690:	9e 01       	movw	r18, r28
    3692:	27 5e       	subi	r18, 0xE7	; 231
    3694:	3f 4f       	sbci	r19, 0xFF	; 255
    3696:	fd 01       	movw	r30, r26
    3698:	88 e0       	ldi	r24, 0x08	; 8
    369a:	01 90       	ld	r0, Z+
    369c:	d9 01       	movw	r26, r18
    369e:	0d 92       	st	X+, r0
    36a0:	9d 01       	movw	r18, r26
    36a2:	81 50       	subi	r24, 0x01	; 1
    36a4:	d1 f7       	brne	.-12     	; 0x369a <_ZN10Movimiento6updateEm+0x846>
    36a6:	5d ea       	ldi	r21, 0xAD	; 173
    36a8:	a5 2e       	mov	r10, r21
    36aa:	b1 2c       	mov	r11, r1
    36ac:	ac 0e       	add	r10, r28
    36ae:	bd 1e       	adc	r11, r29
    36b0:	c5 01       	movw	r24, r10
    36b2:	09 8d       	ldd	r16, Y+25	; 0x19
    36b4:	1a 8d       	ldd	r17, Y+26	; 0x1a
    36b6:	2b 8d       	ldd	r18, Y+27	; 0x1b
    36b8:	3c 8d       	ldd	r19, Y+28	; 0x1c
    36ba:	4d 8d       	ldd	r20, Y+29	; 0x1d
    36bc:	5e 8d       	ldd	r21, Y+30	; 0x1e
    36be:	6f 8d       	ldd	r22, Y+31	; 0x1f
    36c0:	78 a1       	ldd	r23, Y+32	; 0x20
    36c2:	0e 94 b3 3c 	call	0x7966	; 0x7966 <_Z6xz2xyz7COORD2D>
    36c6:	e4 ec       	ldi	r30, 0xC4	; 196
    36c8:	f0 e0       	ldi	r31, 0x00	; 0
    36ca:	6e 0e       	add	r6, r30
    36cc:	7f 1e       	adc	r7, r31
    36ce:	d3 01       	movw	r26, r6
    36d0:	2d 91       	ld	r18, X+
    36d2:	3d 91       	ld	r19, X+
    36d4:	4d 91       	ld	r20, X+
    36d6:	5c 91       	ld	r21, X
    36d8:	ec e3       	ldi	r30, 0x3C	; 60
    36da:	ff ef       	ldi	r31, 0xFF	; 255
    36dc:	6e 0e       	add	r6, r30
    36de:	7f 1e       	adc	r7, r31
    36e0:	fe 01       	movw	r30, r28
    36e2:	e7 54       	subi	r30, 0x47	; 71
    36e4:	ff 4f       	sbci	r31, 0xFF	; 255
    36e6:	80 e0       	ldi	r24, 0x00	; 0
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	a0 e0       	ldi	r26, 0x00	; 0
    36ec:	b0 e0       	ldi	r27, 0x00	; 0
    36ee:	80 83       	st	Z, r24
    36f0:	91 83       	std	Z+1, r25	; 0x01
    36f2:	a2 83       	std	Z+2, r26	; 0x02
    36f4:	b3 83       	std	Z+3, r27	; 0x03
    36f6:	24 83       	std	Z+4, r18	; 0x04
    36f8:	35 83       	std	Z+5, r19	; 0x05
    36fa:	46 83       	std	Z+6, r20	; 0x06
    36fc:	57 83       	std	Z+7, r21	; 0x07
    36fe:	80 87       	std	Z+8, r24	; 0x08
    3700:	91 87       	std	Z+9, r25	; 0x09
    3702:	a2 87       	std	Z+10, r26	; 0x0a
    3704:	b3 87       	std	Z+11, r27	; 0x0b
    3706:	2d b7       	in	r18, 0x3d	; 61
    3708:	3e b7       	in	r19, 0x3e	; 62
    370a:	2c 50       	subi	r18, 0x0C	; 12
    370c:	30 40       	sbci	r19, 0x00	; 0
    370e:	0f b6       	in	r0, 0x3f	; 63
    3710:	f8 94       	cli
    3712:	3e bf       	out	0x3e, r19	; 62
    3714:	0f be       	out	0x3f, r0	; 63
    3716:	2d bf       	out	0x3d, r18	; 61
    3718:	ad b7       	in	r26, 0x3d	; 61
    371a:	be b7       	in	r27, 0x3e	; 62
    371c:	11 96       	adiw	r26, 0x01	; 1
    371e:	8c e0       	ldi	r24, 0x0C	; 12
    3720:	01 90       	ld	r0, Z+
    3722:	0d 92       	st	X+, r0
    3724:	81 50       	subi	r24, 0x01	; 1
    3726:	e1 f7       	brne	.-8      	; 0x3720 <_ZN10Movimiento6updateEm+0x8cc>
    3728:	ce 01       	movw	r24, r28
    372a:	8b 53       	subi	r24, 0x3B	; 59
    372c:	9f 4f       	sbci	r25, 0xFF	; 255
    372e:	d5 01       	movw	r26, r10
    3730:	cc 90       	ld	r12, X
    3732:	11 96       	adiw	r26, 0x01	; 1
    3734:	dc 90       	ld	r13, X
    3736:	11 97       	sbiw	r26, 0x01	; 1
    3738:	12 96       	adiw	r26, 0x02	; 2
    373a:	ec 90       	ld	r14, X
    373c:	12 97       	sbiw	r26, 0x02	; 2
    373e:	13 96       	adiw	r26, 0x03	; 3
    3740:	fc 90       	ld	r15, X
    3742:	13 97       	sbiw	r26, 0x03	; 3
    3744:	14 96       	adiw	r26, 0x04	; 4
    3746:	0c 91       	ld	r16, X
    3748:	14 97       	sbiw	r26, 0x04	; 4
    374a:	15 96       	adiw	r26, 0x05	; 5
    374c:	1c 91       	ld	r17, X
    374e:	15 97       	sbiw	r26, 0x05	; 5
    3750:	16 96       	adiw	r26, 0x06	; 6
    3752:	2c 91       	ld	r18, X
    3754:	16 97       	sbiw	r26, 0x06	; 6
    3756:	17 96       	adiw	r26, 0x07	; 7
    3758:	3c 91       	ld	r19, X
    375a:	17 97       	sbiw	r26, 0x07	; 7
    375c:	18 96       	adiw	r26, 0x08	; 8
    375e:	4c 91       	ld	r20, X
    3760:	18 97       	sbiw	r26, 0x08	; 8
    3762:	19 96       	adiw	r26, 0x09	; 9
    3764:	5c 91       	ld	r21, X
    3766:	19 97       	sbiw	r26, 0x09	; 9
    3768:	1a 96       	adiw	r26, 0x0a	; 10
    376a:	6c 91       	ld	r22, X
    376c:	1a 97       	sbiw	r26, 0x0a	; 10
    376e:	1b 96       	adiw	r26, 0x0b	; 11
    3770:	7c 91       	ld	r23, X
    3772:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <_Z4suma7COORD3DS_>
    3776:	ed b7       	in	r30, 0x3d	; 61
    3778:	fe b7       	in	r31, 0x3e	; 62
    377a:	37 97       	sbiw	r30, 0x07	; 7
    377c:	0f b6       	in	r0, 0x3f	; 63
    377e:	f8 94       	cli
    3780:	fe bf       	out	0x3e, r31	; 62
    3782:	0f be       	out	0x3f, r0	; 63
    3784:	ed bf       	out	0x3d, r30	; 61
    3786:	31 96       	adiw	r30, 0x01	; 1
    3788:	41 ea       	ldi	r20, 0xA1	; 161
    378a:	84 2e       	mov	r8, r20
    378c:	91 2c       	mov	r9, r1
    378e:	8c 0e       	add	r8, r28
    3790:	9d 1e       	adc	r9, r29
    3792:	20 e0       	ldi	r18, 0x00	; 0
    3794:	30 e0       	ldi	r19, 0x00	; 0
    3796:	40 e0       	ldi	r20, 0x00	; 0
    3798:	50 e0       	ldi	r21, 0x00	; 0
    379a:	ad b7       	in	r26, 0x3d	; 61
    379c:	be b7       	in	r27, 0x3e	; 62
    379e:	11 96       	adiw	r26, 0x01	; 1
    37a0:	2d 93       	st	X+, r18
    37a2:	3d 93       	st	X+, r19
    37a4:	4d 93       	st	X+, r20
    37a6:	5c 93       	st	X, r21
    37a8:	14 97       	sbiw	r26, 0x04	; 4
    37aa:	55 82       	std	Z+5, r5	; 0x05
    37ac:	44 82       	std	Z+4, r4	; 0x04
    37ae:	36 82       	std	Z+6, r3	; 0x06
    37b0:	18 96       	adiw	r26, 0x08	; 8
    37b2:	fe 01       	movw	r30, r28
    37b4:	eb 53       	subi	r30, 0x3B	; 59
    37b6:	ff 4f       	sbci	r31, 0xFF	; 255
    37b8:	8c e0       	ldi	r24, 0x0C	; 12
    37ba:	01 90       	ld	r0, Z+
    37bc:	0d 92       	st	X+, r0
    37be:	81 50       	subi	r24, 0x01	; 1
    37c0:	e1 f7       	brne	.-8      	; 0x37ba <_ZN10Movimiento6updateEm+0x966>
    37c2:	c3 01       	movw	r24, r6
    37c4:	62 2d       	mov	r22, r2
    37c6:	f4 01       	movw	r30, r8
    37c8:	a0 80       	ld	r10, Z
    37ca:	b1 80       	ldd	r11, Z+1	; 0x01
    37cc:	c2 80       	ldd	r12, Z+2	; 0x02
    37ce:	d3 80       	ldd	r13, Z+3	; 0x03
    37d0:	e4 80       	ldd	r14, Z+4	; 0x04
    37d2:	f5 80       	ldd	r15, Z+5	; 0x05
    37d4:	06 81       	ldd	r16, Z+6	; 0x06
    37d6:	17 81       	ldd	r17, Z+7	; 0x07
    37d8:	20 85       	ldd	r18, Z+8	; 0x08
    37da:	31 85       	ldd	r19, Z+9	; 0x09
    37dc:	42 85       	ldd	r20, Z+10	; 0x0a
    37de:	53 85       	ldd	r21, Z+11	; 0x0b
    37e0:	88 24       	eor	r8, r8
    37e2:	0e 94 66 0a 	call	0x14cc	; 0x14cc <_ZN10Movimiento6pasitoEh7COORD3DbfihS0_>
    37e6:	2d b7       	in	r18, 0x3d	; 61
    37e8:	3e b7       	in	r19, 0x3e	; 62
    37ea:	2d 5e       	subi	r18, 0xED	; 237
    37ec:	3f 4f       	sbci	r19, 0xFF	; 255
    37ee:	0f b6       	in	r0, 0x3f	; 63
    37f0:	f8 94       	cli
    37f2:	3e bf       	out	0x3e, r19	; 62
    37f4:	0f be       	out	0x3f, r0	; 63
    37f6:	2d bf       	out	0x3d, r18	; 61
    37f8:	ec c4       	rjmp	.+2520   	; 0x41d2 <_ZN10Movimiento6updateEm+0x137e>
										break;
									}
								} else {
									// rotación
									COORD2D O = getOffset (pata); // no usamos rel2abs/abs2rel por razones de eficiencia
    37fa:	89 2d       	mov	r24, r9
    37fc:	0e 94 e3 40 	call	0x81c6	; 0x81c6 <_Z9getOffseth>
    3800:	cf 5a       	subi	r28, 0xAF	; 175
    3802:	de 4f       	sbci	r29, 0xFE	; 254
    3804:	28 83       	st	Y, r18
    3806:	c1 55       	subi	r28, 0x51	; 81
    3808:	d1 40       	sbci	r29, 0x01	; 1
    380a:	ce 5a       	subi	r28, 0xAE	; 174
    380c:	de 4f       	sbci	r29, 0xFE	; 254
    380e:	38 83       	st	Y, r19
    3810:	c2 55       	subi	r28, 0x52	; 82
    3812:	d1 40       	sbci	r29, 0x01	; 1
    3814:	cd 5a       	subi	r28, 0xAD	; 173
    3816:	de 4f       	sbci	r29, 0xFE	; 254
    3818:	48 83       	st	Y, r20
    381a:	c3 55       	subi	r28, 0x53	; 83
    381c:	d1 40       	sbci	r29, 0x01	; 1
    381e:	cc 5a       	subi	r28, 0xAC	; 172
    3820:	de 4f       	sbci	r29, 0xFE	; 254
    3822:	58 83       	st	Y, r21
    3824:	c4 55       	subi	r28, 0x54	; 84
    3826:	d1 40       	sbci	r29, 0x01	; 1
    3828:	cb 5a       	subi	r28, 0xAB	; 171
    382a:	de 4f       	sbci	r29, 0xFE	; 254
    382c:	68 83       	st	Y, r22
    382e:	c5 55       	subi	r28, 0x55	; 85
    3830:	d1 40       	sbci	r29, 0x01	; 1
    3832:	ca 5a       	subi	r28, 0xAA	; 170
    3834:	de 4f       	sbci	r29, 0xFE	; 254
    3836:	78 83       	st	Y, r23
    3838:	c6 55       	subi	r28, 0x56	; 86
    383a:	d1 40       	sbci	r29, 0x01	; 1
    383c:	c9 5a       	subi	r28, 0xA9	; 169
    383e:	de 4f       	sbci	r29, 0xFE	; 254
    3840:	88 83       	st	Y, r24
    3842:	c7 55       	subi	r28, 0x57	; 87
    3844:	d1 40       	sbci	r29, 0x01	; 1
    3846:	c8 5a       	subi	r28, 0xA8	; 168
    3848:	de 4f       	sbci	r29, 0xFE	; 254
    384a:	98 83       	st	Y, r25
    384c:	c8 55       	subi	r28, 0x58	; 88
    384e:	d1 40       	sbci	r29, 0x01	; 1
    3850:	de 01       	movw	r26, r28
    3852:	a7 59       	subi	r26, 0x97	; 151
    3854:	bf 4f       	sbci	r27, 0xFF	; 255
    3856:	fe 01       	movw	r30, r28
    3858:	ef 5a       	subi	r30, 0xAF	; 175
    385a:	fe 4f       	sbci	r31, 0xFE	; 254
    385c:	88 e0       	ldi	r24, 0x08	; 8
    385e:	01 90       	ld	r0, Z+
    3860:	0d 92       	st	X+, r0
    3862:	81 50       	subi	r24, 0x01	; 1
    3864:	e1 f7       	brne	.-8      	; 0x385e <_ZN10Movimiento6updateEm+0xa0a>
									C = resta (suma (applyMatrix (resta (suma (xyz2xz(wk.rt.pos_ref[pata]), O), wk.mv.vector), wk.rt.rotor2), wk.mv.vector), O);   
    3866:	f1 01       	movw	r30, r2
    3868:	ee 0f       	add	r30, r30
    386a:	ff 1f       	adc	r31, r31
    386c:	e2 0d       	add	r30, r2
    386e:	f3 1d       	adc	r31, r3
    3870:	ee 0f       	add	r30, r30
    3872:	ff 1f       	adc	r31, r31
    3874:	ee 0f       	add	r30, r30
    3876:	ff 1f       	adc	r31, r31
    3878:	e6 0d       	add	r30, r6
    387a:	f7 1d       	adc	r31, r7
    387c:	e8 5c       	subi	r30, 0xC8	; 200
    387e:	fe 4f       	sbci	r31, 0xFE	; 254
    3880:	e0 80       	ld	r14, Z
    3882:	f1 80       	ldd	r15, Z+1	; 0x01
    3884:	02 81       	ldd	r16, Z+2	; 0x02
    3886:	13 81       	ldd	r17, Z+3	; 0x03
    3888:	24 81       	ldd	r18, Z+4	; 0x04
    388a:	35 81       	ldd	r19, Z+5	; 0x05
    388c:	46 81       	ldd	r20, Z+6	; 0x06
    388e:	57 81       	ldd	r21, Z+7	; 0x07
    3890:	60 85       	ldd	r22, Z+8	; 0x08
    3892:	71 85       	ldd	r23, Z+9	; 0x09
    3894:	82 85       	ldd	r24, Z+10	; 0x0a
    3896:	93 85       	ldd	r25, Z+11	; 0x0b
    3898:	0e 94 ec 3c 	call	0x79d8	; 0x79d8 <_Z6xyz2xz7COORD3D>
    389c:	cf 5a       	subi	r28, 0xAF	; 175
    389e:	de 4f       	sbci	r29, 0xFE	; 254
    38a0:	28 83       	st	Y, r18
    38a2:	c1 55       	subi	r28, 0x51	; 81
    38a4:	d1 40       	sbci	r29, 0x01	; 1
    38a6:	ce 5a       	subi	r28, 0xAE	; 174
    38a8:	de 4f       	sbci	r29, 0xFE	; 254
    38aa:	38 83       	st	Y, r19
    38ac:	c2 55       	subi	r28, 0x52	; 82
    38ae:	d1 40       	sbci	r29, 0x01	; 1
    38b0:	cd 5a       	subi	r28, 0xAD	; 173
    38b2:	de 4f       	sbci	r29, 0xFE	; 254
    38b4:	48 83       	st	Y, r20
    38b6:	c3 55       	subi	r28, 0x53	; 83
    38b8:	d1 40       	sbci	r29, 0x01	; 1
    38ba:	cc 5a       	subi	r28, 0xAC	; 172
    38bc:	de 4f       	sbci	r29, 0xFE	; 254
    38be:	58 83       	st	Y, r21
    38c0:	c4 55       	subi	r28, 0x54	; 84
    38c2:	d1 40       	sbci	r29, 0x01	; 1
    38c4:	cb 5a       	subi	r28, 0xAB	; 171
    38c6:	de 4f       	sbci	r29, 0xFE	; 254
    38c8:	68 83       	st	Y, r22
    38ca:	c5 55       	subi	r28, 0x55	; 85
    38cc:	d1 40       	sbci	r29, 0x01	; 1
    38ce:	ca 5a       	subi	r28, 0xAA	; 170
    38d0:	de 4f       	sbci	r29, 0xFE	; 254
    38d2:	78 83       	st	Y, r23
    38d4:	c6 55       	subi	r28, 0x56	; 86
    38d6:	d1 40       	sbci	r29, 0x01	; 1
    38d8:	c9 5a       	subi	r28, 0xA9	; 169
    38da:	de 4f       	sbci	r29, 0xFE	; 254
    38dc:	88 83       	st	Y, r24
    38de:	c7 55       	subi	r28, 0x57	; 87
    38e0:	d1 40       	sbci	r29, 0x01	; 1
    38e2:	c8 5a       	subi	r28, 0xA8	; 168
    38e4:	de 4f       	sbci	r29, 0xFE	; 254
    38e6:	98 83       	st	Y, r25
    38e8:	c8 55       	subi	r28, 0x58	; 88
    38ea:	d1 40       	sbci	r29, 0x01	; 1
    38ec:	de 01       	movw	r26, r28
    38ee:	91 96       	adiw	r26, 0x21	; 33
    38f0:	fe 01       	movw	r30, r28
    38f2:	ef 5a       	subi	r30, 0xAF	; 175
    38f4:	fe 4f       	sbci	r31, 0xFE	; 254
    38f6:	88 e0       	ldi	r24, 0x08	; 8
    38f8:	01 90       	ld	r0, Z+
    38fa:	0d 92       	st	X+, r0
    38fc:	81 50       	subi	r24, 0x01	; 1
    38fe:	e1 f7       	brne	.-8      	; 0x38f8 <_ZN10Movimiento6updateEm+0xaa4>
    3900:	29 a1       	ldd	r18, Y+33	; 0x21
    3902:	3a a1       	ldd	r19, Y+34	; 0x22
    3904:	4b a1       	ldd	r20, Y+35	; 0x23
    3906:	5c a1       	ldd	r21, Y+36	; 0x24
    3908:	6d a1       	ldd	r22, Y+37	; 0x25
    390a:	7e a1       	ldd	r23, Y+38	; 0x26
    390c:	8f a1       	ldd	r24, Y+39	; 0x27
    390e:	98 a5       	ldd	r25, Y+40	; 0x28
    3910:	aa 96       	adiw	r28, 0x2a	; 42
    3912:	af ac       	ldd	r10, Y+63	; 0x3f
    3914:	aa 97       	sbiw	r28, 0x2a	; 42
    3916:	ab 96       	adiw	r28, 0x2b	; 43
    3918:	bf ac       	ldd	r11, Y+63	; 0x3f
    391a:	ab 97       	sbiw	r28, 0x2b	; 43
    391c:	ac 96       	adiw	r28, 0x2c	; 44
    391e:	cf ac       	ldd	r12, Y+63	; 0x3f
    3920:	ac 97       	sbiw	r28, 0x2c	; 44
    3922:	ad 96       	adiw	r28, 0x2d	; 45
    3924:	df ac       	ldd	r13, Y+63	; 0x3f
    3926:	ad 97       	sbiw	r28, 0x2d	; 45
    3928:	ae 96       	adiw	r28, 0x2e	; 46
    392a:	ef ac       	ldd	r14, Y+63	; 0x3f
    392c:	ae 97       	sbiw	r28, 0x2e	; 46
    392e:	af 96       	adiw	r28, 0x2f	; 47
    3930:	ff ac       	ldd	r15, Y+63	; 0x3f
    3932:	af 97       	sbiw	r28, 0x2f	; 47
    3934:	e0 96       	adiw	r28, 0x30	; 48
    3936:	0f ad       	ldd	r16, Y+63	; 0x3f
    3938:	e0 97       	sbiw	r28, 0x30	; 48
    393a:	e1 96       	adiw	r28, 0x31	; 49
    393c:	1f ad       	ldd	r17, Y+63	; 0x3f
    393e:	e1 97       	sbiw	r28, 0x31	; 49
    3940:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <_Z4suma7COORD2DS_>
    3944:	cf 5a       	subi	r28, 0xAF	; 175
    3946:	de 4f       	sbci	r29, 0xFE	; 254
    3948:	28 83       	st	Y, r18
    394a:	c1 55       	subi	r28, 0x51	; 81
    394c:	d1 40       	sbci	r29, 0x01	; 1
    394e:	ce 5a       	subi	r28, 0xAE	; 174
    3950:	de 4f       	sbci	r29, 0xFE	; 254
    3952:	38 83       	st	Y, r19
    3954:	c2 55       	subi	r28, 0x52	; 82
    3956:	d1 40       	sbci	r29, 0x01	; 1
    3958:	cd 5a       	subi	r28, 0xAD	; 173
    395a:	de 4f       	sbci	r29, 0xFE	; 254
    395c:	48 83       	st	Y, r20
    395e:	c3 55       	subi	r28, 0x53	; 83
    3960:	d1 40       	sbci	r29, 0x01	; 1
    3962:	cc 5a       	subi	r28, 0xAC	; 172
    3964:	de 4f       	sbci	r29, 0xFE	; 254
    3966:	58 83       	st	Y, r21
    3968:	c4 55       	subi	r28, 0x54	; 84
    396a:	d1 40       	sbci	r29, 0x01	; 1
    396c:	cb 5a       	subi	r28, 0xAB	; 171
    396e:	de 4f       	sbci	r29, 0xFE	; 254
    3970:	68 83       	st	Y, r22
    3972:	c5 55       	subi	r28, 0x55	; 85
    3974:	d1 40       	sbci	r29, 0x01	; 1
    3976:	ca 5a       	subi	r28, 0xAA	; 170
    3978:	de 4f       	sbci	r29, 0xFE	; 254
    397a:	78 83       	st	Y, r23
    397c:	c6 55       	subi	r28, 0x56	; 86
    397e:	d1 40       	sbci	r29, 0x01	; 1
    3980:	c9 5a       	subi	r28, 0xA9	; 169
    3982:	de 4f       	sbci	r29, 0xFE	; 254
    3984:	88 83       	st	Y, r24
    3986:	c7 55       	subi	r28, 0x57	; 87
    3988:	d1 40       	sbci	r29, 0x01	; 1
    398a:	c8 5a       	subi	r28, 0xA8	; 168
    398c:	de 4f       	sbci	r29, 0xFE	; 254
    398e:	98 83       	st	Y, r25
    3990:	c8 55       	subi	r28, 0x58	; 88
    3992:	d1 40       	sbci	r29, 0x01	; 1
    3994:	de 01       	movw	r26, r28
    3996:	99 96       	adiw	r26, 0x29	; 41
    3998:	fe 01       	movw	r30, r28
    399a:	ef 5a       	subi	r30, 0xAF	; 175
    399c:	fe 4f       	sbci	r31, 0xFE	; 254
    399e:	88 e0       	ldi	r24, 0x08	; 8
    39a0:	01 90       	ld	r0, Z+
    39a2:	0d 92       	st	X+, r0
    39a4:	81 50       	subi	r24, 0x01	; 1
    39a6:	e1 f7       	brne	.-8      	; 0x39a0 <_ZN10Movimiento6updateEm+0xb4c>
    39a8:	29 a5       	ldd	r18, Y+41	; 0x29
    39aa:	3a a5       	ldd	r19, Y+42	; 0x2a
    39ac:	4b a5       	ldd	r20, Y+43	; 0x2b
    39ae:	5c a5       	ldd	r21, Y+44	; 0x2c
    39b0:	6d a5       	ldd	r22, Y+45	; 0x2d
    39b2:	7e a5       	ldd	r23, Y+46	; 0x2e
    39b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    39b6:	98 a9       	ldd	r25, Y+48	; 0x30
    39b8:	d2 01       	movw	r26, r4
    39ba:	ac 90       	ld	r10, X
    39bc:	11 96       	adiw	r26, 0x01	; 1
    39be:	bc 90       	ld	r11, X
    39c0:	11 97       	sbiw	r26, 0x01	; 1
    39c2:	12 96       	adiw	r26, 0x02	; 2
    39c4:	cc 90       	ld	r12, X
    39c6:	12 97       	sbiw	r26, 0x02	; 2
    39c8:	13 96       	adiw	r26, 0x03	; 3
    39ca:	dc 90       	ld	r13, X
    39cc:	13 97       	sbiw	r26, 0x03	; 3
    39ce:	14 96       	adiw	r26, 0x04	; 4
    39d0:	ec 90       	ld	r14, X
    39d2:	14 97       	sbiw	r26, 0x04	; 4
    39d4:	15 96       	adiw	r26, 0x05	; 5
    39d6:	fc 90       	ld	r15, X
    39d8:	15 97       	sbiw	r26, 0x05	; 5
    39da:	16 96       	adiw	r26, 0x06	; 6
    39dc:	0c 91       	ld	r16, X
    39de:	16 97       	sbiw	r26, 0x06	; 6
    39e0:	17 96       	adiw	r26, 0x07	; 7
    39e2:	1c 91       	ld	r17, X
    39e4:	0e 94 9b 3b 	call	0x7736	; 0x7736 <_Z5resta7COORD2DS_>
    39e8:	cf 5a       	subi	r28, 0xAF	; 175
    39ea:	de 4f       	sbci	r29, 0xFE	; 254
    39ec:	28 83       	st	Y, r18
    39ee:	c1 55       	subi	r28, 0x51	; 81
    39f0:	d1 40       	sbci	r29, 0x01	; 1
    39f2:	ce 5a       	subi	r28, 0xAE	; 174
    39f4:	de 4f       	sbci	r29, 0xFE	; 254
    39f6:	38 83       	st	Y, r19
    39f8:	c2 55       	subi	r28, 0x52	; 82
    39fa:	d1 40       	sbci	r29, 0x01	; 1
    39fc:	cd 5a       	subi	r28, 0xAD	; 173
    39fe:	de 4f       	sbci	r29, 0xFE	; 254
    3a00:	48 83       	st	Y, r20
    3a02:	c3 55       	subi	r28, 0x53	; 83
    3a04:	d1 40       	sbci	r29, 0x01	; 1
    3a06:	cc 5a       	subi	r28, 0xAC	; 172
    3a08:	de 4f       	sbci	r29, 0xFE	; 254
    3a0a:	58 83       	st	Y, r21
    3a0c:	c4 55       	subi	r28, 0x54	; 84
    3a0e:	d1 40       	sbci	r29, 0x01	; 1
    3a10:	cb 5a       	subi	r28, 0xAB	; 171
    3a12:	de 4f       	sbci	r29, 0xFE	; 254
    3a14:	68 83       	st	Y, r22
    3a16:	c5 55       	subi	r28, 0x55	; 85
    3a18:	d1 40       	sbci	r29, 0x01	; 1
    3a1a:	ca 5a       	subi	r28, 0xAA	; 170
    3a1c:	de 4f       	sbci	r29, 0xFE	; 254
    3a1e:	78 83       	st	Y, r23
    3a20:	c6 55       	subi	r28, 0x56	; 86
    3a22:	d1 40       	sbci	r29, 0x01	; 1
    3a24:	c9 5a       	subi	r28, 0xA9	; 169
    3a26:	de 4f       	sbci	r29, 0xFE	; 254
    3a28:	88 83       	st	Y, r24
    3a2a:	c7 55       	subi	r28, 0x57	; 87
    3a2c:	d1 40       	sbci	r29, 0x01	; 1
    3a2e:	c8 5a       	subi	r28, 0xA8	; 168
    3a30:	de 4f       	sbci	r29, 0xFE	; 254
    3a32:	98 83       	st	Y, r25
    3a34:	c8 55       	subi	r28, 0x58	; 88
    3a36:	d1 40       	sbci	r29, 0x01	; 1
    3a38:	de 01       	movw	r26, r28
    3a3a:	d1 96       	adiw	r26, 0x31	; 49
    3a3c:	fe 01       	movw	r30, r28
    3a3e:	ef 5a       	subi	r30, 0xAF	; 175
    3a40:	fe 4f       	sbci	r31, 0xFE	; 254
    3a42:	88 e0       	ldi	r24, 0x08	; 8
    3a44:	01 90       	ld	r0, Z+
    3a46:	0d 92       	st	X+, r0
    3a48:	81 50       	subi	r24, 0x01	; 1
    3a4a:	e1 f7       	brne	.-8      	; 0x3a44 <_ZN10Movimiento6updateEm+0xbf0>
    3a4c:	29 a9       	ldd	r18, Y+49	; 0x31
    3a4e:	3a a9       	ldd	r19, Y+50	; 0x32
    3a50:	4b a9       	ldd	r20, Y+51	; 0x33
    3a52:	5c a9       	ldd	r21, Y+52	; 0x34
    3a54:	6d a9       	ldd	r22, Y+53	; 0x35
    3a56:	7e a9       	ldd	r23, Y+54	; 0x36
    3a58:	8f a9       	ldd	r24, Y+55	; 0x37
    3a5a:	98 ad       	ldd	r25, Y+56	; 0x38
    3a5c:	cd 59       	subi	r28, 0x9D	; 157
    3a5e:	de 4f       	sbci	r29, 0xFE	; 254
    3a60:	08 81       	ld	r16, Y
    3a62:	19 81       	ldd	r17, Y+1	; 0x01
    3a64:	c3 56       	subi	r28, 0x63	; 99
    3a66:	d1 40       	sbci	r29, 0x01	; 1
    3a68:	0e 94 3b 3e 	call	0x7c76	; 0x7c76 <_Z11applyMatrix7COORD2DPS_>
    3a6c:	cf 5a       	subi	r28, 0xAF	; 175
    3a6e:	de 4f       	sbci	r29, 0xFE	; 254
    3a70:	28 83       	st	Y, r18
    3a72:	c1 55       	subi	r28, 0x51	; 81
    3a74:	d1 40       	sbci	r29, 0x01	; 1
    3a76:	ce 5a       	subi	r28, 0xAE	; 174
    3a78:	de 4f       	sbci	r29, 0xFE	; 254
    3a7a:	38 83       	st	Y, r19
    3a7c:	c2 55       	subi	r28, 0x52	; 82
    3a7e:	d1 40       	sbci	r29, 0x01	; 1
    3a80:	cd 5a       	subi	r28, 0xAD	; 173
    3a82:	de 4f       	sbci	r29, 0xFE	; 254
    3a84:	48 83       	st	Y, r20
    3a86:	c3 55       	subi	r28, 0x53	; 83
    3a88:	d1 40       	sbci	r29, 0x01	; 1
    3a8a:	cc 5a       	subi	r28, 0xAC	; 172
    3a8c:	de 4f       	sbci	r29, 0xFE	; 254
    3a8e:	58 83       	st	Y, r21
    3a90:	c4 55       	subi	r28, 0x54	; 84
    3a92:	d1 40       	sbci	r29, 0x01	; 1
    3a94:	cb 5a       	subi	r28, 0xAB	; 171
    3a96:	de 4f       	sbci	r29, 0xFE	; 254
    3a98:	68 83       	st	Y, r22
    3a9a:	c5 55       	subi	r28, 0x55	; 85
    3a9c:	d1 40       	sbci	r29, 0x01	; 1
    3a9e:	ca 5a       	subi	r28, 0xAA	; 170
    3aa0:	de 4f       	sbci	r29, 0xFE	; 254
    3aa2:	78 83       	st	Y, r23
    3aa4:	c6 55       	subi	r28, 0x56	; 86
    3aa6:	d1 40       	sbci	r29, 0x01	; 1
    3aa8:	c9 5a       	subi	r28, 0xA9	; 169
    3aaa:	de 4f       	sbci	r29, 0xFE	; 254
    3aac:	88 83       	st	Y, r24
    3aae:	c7 55       	subi	r28, 0x57	; 87
    3ab0:	d1 40       	sbci	r29, 0x01	; 1
    3ab2:	c8 5a       	subi	r28, 0xA8	; 168
    3ab4:	de 4f       	sbci	r29, 0xFE	; 254
    3ab6:	98 83       	st	Y, r25
    3ab8:	c8 55       	subi	r28, 0x58	; 88
    3aba:	d1 40       	sbci	r29, 0x01	; 1
    3abc:	de 01       	movw	r26, r28
    3abe:	d9 96       	adiw	r26, 0x39	; 57
    3ac0:	fe 01       	movw	r30, r28
    3ac2:	ef 5a       	subi	r30, 0xAF	; 175
    3ac4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ac6:	88 e0       	ldi	r24, 0x08	; 8
    3ac8:	01 90       	ld	r0, Z+
    3aca:	0d 92       	st	X+, r0
    3acc:	81 50       	subi	r24, 0x01	; 1
    3ace:	e1 f7       	brne	.-8      	; 0x3ac8 <_ZN10Movimiento6updateEm+0xc74>
    3ad0:	29 ad       	ldd	r18, Y+57	; 0x39
    3ad2:	3a ad       	ldd	r19, Y+58	; 0x3a
    3ad4:	4b ad       	ldd	r20, Y+59	; 0x3b
    3ad6:	5c ad       	ldd	r21, Y+60	; 0x3c
    3ad8:	6d ad       	ldd	r22, Y+61	; 0x3d
    3ada:	7e ad       	ldd	r23, Y+62	; 0x3e
    3adc:	8f ad       	ldd	r24, Y+63	; 0x3f
    3ade:	21 96       	adiw	r28, 0x01	; 1
    3ae0:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ae2:	21 97       	sbiw	r28, 0x01	; 1
    3ae4:	f2 01       	movw	r30, r4
    3ae6:	a0 80       	ld	r10, Z
    3ae8:	b1 80       	ldd	r11, Z+1	; 0x01
    3aea:	c2 80       	ldd	r12, Z+2	; 0x02
    3aec:	d3 80       	ldd	r13, Z+3	; 0x03
    3aee:	e4 80       	ldd	r14, Z+4	; 0x04
    3af0:	f5 80       	ldd	r15, Z+5	; 0x05
    3af2:	06 81       	ldd	r16, Z+6	; 0x06
    3af4:	17 81       	ldd	r17, Z+7	; 0x07
    3af6:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <_Z4suma7COORD2DS_>
    3afa:	cf 5a       	subi	r28, 0xAF	; 175
    3afc:	de 4f       	sbci	r29, 0xFE	; 254
    3afe:	28 83       	st	Y, r18
    3b00:	c1 55       	subi	r28, 0x51	; 81
    3b02:	d1 40       	sbci	r29, 0x01	; 1
    3b04:	ce 5a       	subi	r28, 0xAE	; 174
    3b06:	de 4f       	sbci	r29, 0xFE	; 254
    3b08:	38 83       	st	Y, r19
    3b0a:	c2 55       	subi	r28, 0x52	; 82
    3b0c:	d1 40       	sbci	r29, 0x01	; 1
    3b0e:	cd 5a       	subi	r28, 0xAD	; 173
    3b10:	de 4f       	sbci	r29, 0xFE	; 254
    3b12:	48 83       	st	Y, r20
    3b14:	c3 55       	subi	r28, 0x53	; 83
    3b16:	d1 40       	sbci	r29, 0x01	; 1
    3b18:	cc 5a       	subi	r28, 0xAC	; 172
    3b1a:	de 4f       	sbci	r29, 0xFE	; 254
    3b1c:	58 83       	st	Y, r21
    3b1e:	c4 55       	subi	r28, 0x54	; 84
    3b20:	d1 40       	sbci	r29, 0x01	; 1
    3b22:	cb 5a       	subi	r28, 0xAB	; 171
    3b24:	de 4f       	sbci	r29, 0xFE	; 254
    3b26:	68 83       	st	Y, r22
    3b28:	c5 55       	subi	r28, 0x55	; 85
    3b2a:	d1 40       	sbci	r29, 0x01	; 1
    3b2c:	ca 5a       	subi	r28, 0xAA	; 170
    3b2e:	de 4f       	sbci	r29, 0xFE	; 254
    3b30:	78 83       	st	Y, r23
    3b32:	c6 55       	subi	r28, 0x56	; 86
    3b34:	d1 40       	sbci	r29, 0x01	; 1
    3b36:	c9 5a       	subi	r28, 0xA9	; 169
    3b38:	de 4f       	sbci	r29, 0xFE	; 254
    3b3a:	88 83       	st	Y, r24
    3b3c:	c7 55       	subi	r28, 0x57	; 87
    3b3e:	d1 40       	sbci	r29, 0x01	; 1
    3b40:	c8 5a       	subi	r28, 0xA8	; 168
    3b42:	de 4f       	sbci	r29, 0xFE	; 254
    3b44:	98 83       	st	Y, r25
    3b46:	c8 55       	subi	r28, 0x58	; 88
    3b48:	d1 40       	sbci	r29, 0x01	; 1
    3b4a:	de 01       	movw	r26, r28
    3b4c:	af 5b       	subi	r26, 0xBF	; 191
    3b4e:	bf 4f       	sbci	r27, 0xFF	; 255
    3b50:	fe 01       	movw	r30, r28
    3b52:	ef 5a       	subi	r30, 0xAF	; 175
    3b54:	fe 4f       	sbci	r31, 0xFE	; 254
    3b56:	88 e0       	ldi	r24, 0x08	; 8
    3b58:	01 90       	ld	r0, Z+
    3b5a:	0d 92       	st	X+, r0
    3b5c:	81 50       	subi	r24, 0x01	; 1
    3b5e:	e1 f7       	brne	.-8      	; 0x3b58 <_ZN10Movimiento6updateEm+0xd04>
    3b60:	fe 01       	movw	r30, r28
    3b62:	ef 5b       	subi	r30, 0xBF	; 191
    3b64:	ff 4f       	sbci	r31, 0xFF	; 255
    3b66:	20 81       	ld	r18, Z
    3b68:	fe 01       	movw	r30, r28
    3b6a:	ee 5b       	subi	r30, 0xBE	; 190
    3b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6e:	30 81       	ld	r19, Z
    3b70:	fe 01       	movw	r30, r28
    3b72:	ed 5b       	subi	r30, 0xBD	; 189
    3b74:	ff 4f       	sbci	r31, 0xFF	; 255
    3b76:	40 81       	ld	r20, Z
    3b78:	fe 01       	movw	r30, r28
    3b7a:	ec 5b       	subi	r30, 0xBC	; 188
    3b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7e:	50 81       	ld	r21, Z
    3b80:	fe 01       	movw	r30, r28
    3b82:	eb 5b       	subi	r30, 0xBB	; 187
    3b84:	ff 4f       	sbci	r31, 0xFF	; 255
    3b86:	60 81       	ld	r22, Z
    3b88:	fe 01       	movw	r30, r28
    3b8a:	ea 5b       	subi	r30, 0xBA	; 186
    3b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8e:	70 81       	ld	r23, Z
    3b90:	fe 01       	movw	r30, r28
    3b92:	e9 5b       	subi	r30, 0xB9	; 185
    3b94:	ff 4f       	sbci	r31, 0xFF	; 255
    3b96:	80 81       	ld	r24, Z
    3b98:	fe 01       	movw	r30, r28
    3b9a:	e8 5b       	subi	r30, 0xB8	; 184
    3b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9e:	90 81       	ld	r25, Z
    3ba0:	aa 96       	adiw	r28, 0x2a	; 42
    3ba2:	af ac       	ldd	r10, Y+63	; 0x3f
    3ba4:	aa 97       	sbiw	r28, 0x2a	; 42
    3ba6:	ab 96       	adiw	r28, 0x2b	; 43
    3ba8:	bf ac       	ldd	r11, Y+63	; 0x3f
    3baa:	ab 97       	sbiw	r28, 0x2b	; 43
    3bac:	ac 96       	adiw	r28, 0x2c	; 44
    3bae:	cf ac       	ldd	r12, Y+63	; 0x3f
    3bb0:	ac 97       	sbiw	r28, 0x2c	; 44
    3bb2:	ad 96       	adiw	r28, 0x2d	; 45
    3bb4:	df ac       	ldd	r13, Y+63	; 0x3f
    3bb6:	ad 97       	sbiw	r28, 0x2d	; 45
    3bb8:	ae 96       	adiw	r28, 0x2e	; 46
    3bba:	ef ac       	ldd	r14, Y+63	; 0x3f
    3bbc:	ae 97       	sbiw	r28, 0x2e	; 46
    3bbe:	af 96       	adiw	r28, 0x2f	; 47
    3bc0:	ff ac       	ldd	r15, Y+63	; 0x3f
    3bc2:	af 97       	sbiw	r28, 0x2f	; 47
    3bc4:	e0 96       	adiw	r28, 0x30	; 48
    3bc6:	0f ad       	ldd	r16, Y+63	; 0x3f
    3bc8:	e0 97       	sbiw	r28, 0x30	; 48
    3bca:	e1 96       	adiw	r28, 0x31	; 49
    3bcc:	1f ad       	ldd	r17, Y+63	; 0x3f
    3bce:	e1 97       	sbiw	r28, 0x31	; 49
    3bd0:	0e 94 9b 3b 	call	0x7736	; 0x7736 <_Z5resta7COORD2DS_>
    3bd4:	cf 5a       	subi	r28, 0xAF	; 175
    3bd6:	de 4f       	sbci	r29, 0xFE	; 254
    3bd8:	28 83       	st	Y, r18
    3bda:	c1 55       	subi	r28, 0x51	; 81
    3bdc:	d1 40       	sbci	r29, 0x01	; 1
    3bde:	ce 5a       	subi	r28, 0xAE	; 174
    3be0:	de 4f       	sbci	r29, 0xFE	; 254
    3be2:	38 83       	st	Y, r19
    3be4:	c2 55       	subi	r28, 0x52	; 82
    3be6:	d1 40       	sbci	r29, 0x01	; 1
    3be8:	cd 5a       	subi	r28, 0xAD	; 173
    3bea:	de 4f       	sbci	r29, 0xFE	; 254
    3bec:	48 83       	st	Y, r20
    3bee:	c3 55       	subi	r28, 0x53	; 83
    3bf0:	d1 40       	sbci	r29, 0x01	; 1
    3bf2:	cc 5a       	subi	r28, 0xAC	; 172
    3bf4:	de 4f       	sbci	r29, 0xFE	; 254
    3bf6:	58 83       	st	Y, r21
    3bf8:	c4 55       	subi	r28, 0x54	; 84
    3bfa:	d1 40       	sbci	r29, 0x01	; 1
    3bfc:	cb 5a       	subi	r28, 0xAB	; 171
    3bfe:	de 4f       	sbci	r29, 0xFE	; 254
    3c00:	68 83       	st	Y, r22
    3c02:	c5 55       	subi	r28, 0x55	; 85
    3c04:	d1 40       	sbci	r29, 0x01	; 1
    3c06:	ca 5a       	subi	r28, 0xAA	; 170
    3c08:	de 4f       	sbci	r29, 0xFE	; 254
    3c0a:	78 83       	st	Y, r23
    3c0c:	c6 55       	subi	r28, 0x56	; 86
    3c0e:	d1 40       	sbci	r29, 0x01	; 1
    3c10:	c9 5a       	subi	r28, 0xA9	; 169
    3c12:	de 4f       	sbci	r29, 0xFE	; 254
    3c14:	88 83       	st	Y, r24
    3c16:	c7 55       	subi	r28, 0x57	; 87
    3c18:	d1 40       	sbci	r29, 0x01	; 1
    3c1a:	c8 5a       	subi	r28, 0xA8	; 168
    3c1c:	de 4f       	sbci	r29, 0xFE	; 254
    3c1e:	98 83       	st	Y, r25
    3c20:	c8 55       	subi	r28, 0x58	; 88
    3c22:	d1 40       	sbci	r29, 0x01	; 1
    3c24:	de 01       	movw	r26, r28
    3c26:	af 58       	subi	r26, 0x8F	; 143
    3c28:	bf 4f       	sbci	r27, 0xFF	; 255
    3c2a:	fe 01       	movw	r30, r28
    3c2c:	ef 5a       	subi	r30, 0xAF	; 175
    3c2e:	fe 4f       	sbci	r31, 0xFE	; 254
    3c30:	88 e0       	ldi	r24, 0x08	; 8
    3c32:	01 90       	ld	r0, Z+
    3c34:	0d 92       	st	X+, r0
    3c36:	81 50       	subi	r24, 0x01	; 1
    3c38:	e1 f7       	brne	.-8      	; 0x3c32 <_ZN10Movimiento6updateEm+0xdde>
									// en la rotación, hacer la "zancada progresiva" es un poco más complicado..
									// como no podemos recalcular la matriz de rotación, hacemos interpolación lineal
									if (sh.cn.tick <= 2*wk.rt.ciclo) {
    3c3a:	c3 59       	subi	r28, 0x93	; 147
    3c3c:	de 4f       	sbci	r29, 0xFE	; 254
    3c3e:	a8 81       	ld	r26, Y
    3c40:	b9 81       	ldd	r27, Y+1	; 0x01
    3c42:	cd 56       	subi	r28, 0x6D	; 109
    3c44:	d1 40       	sbci	r29, 0x01	; 1
    3c46:	6d 91       	ld	r22, X+
    3c48:	7c 91       	ld	r23, X
    3c4a:	80 e0       	ldi	r24, 0x00	; 0
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	0e 94 61 7b 	call	0xf6c2	; 0xf6c2 <__floatunsisf>
    3c52:	7b 01       	movw	r14, r22
    3c54:	8c 01       	movw	r16, r24
    3c56:	c1 59       	subi	r28, 0x91	; 145
    3c58:	de 4f       	sbci	r29, 0xFE	; 254
    3c5a:	e8 81       	ld	r30, Y
    3c5c:	f9 81       	ldd	r31, Y+1	; 0x01
    3c5e:	cf 56       	subi	r28, 0x6F	; 111
    3c60:	d1 40       	sbci	r29, 0x01	; 1
    3c62:	20 81       	ld	r18, Z
    3c64:	31 81       	ldd	r19, Z+1	; 0x01
    3c66:	42 81       	ldd	r20, Z+2	; 0x02
    3c68:	53 81       	ldd	r21, Z+3	; 0x03
    3c6a:	ca 01       	movw	r24, r20
    3c6c:	b9 01       	movw	r22, r18
    3c6e:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    3c72:	9b 01       	movw	r18, r22
    3c74:	ac 01       	movw	r20, r24
    3c76:	c8 01       	movw	r24, r16
    3c78:	b7 01       	movw	r22, r14
    3c7a:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    3c7e:	18 16       	cp	r1, r24
    3c80:	0c f4       	brge	.+2      	; 0x3c84 <_ZN10Movimiento6updateEm+0xe30>
    3c82:	94 c1       	rjmp	.+808    	; 0x3fac <_ZN10Movimiento6updateEm+0x1158>
										C = suma (producto (resta (C, xyz2xz(wk.rt.pos_ref[pata])), atenuador), xyz2xz(wk.rt.pos_ref[pata]));
    3c84:	f1 01       	movw	r30, r2
    3c86:	ee 0f       	add	r30, r30
    3c88:	ff 1f       	adc	r31, r31
    3c8a:	e2 0d       	add	r30, r2
    3c8c:	f3 1d       	adc	r31, r3
    3c8e:	ee 0f       	add	r30, r30
    3c90:	ff 1f       	adc	r31, r31
    3c92:	ee 0f       	add	r30, r30
    3c94:	ff 1f       	adc	r31, r31
    3c96:	e6 0d       	add	r30, r6
    3c98:	f7 1d       	adc	r31, r7
    3c9a:	e8 5c       	subi	r30, 0xC8	; 200
    3c9c:	fe 4f       	sbci	r31, 0xFE	; 254
    3c9e:	e0 80       	ld	r14, Z
    3ca0:	f1 80       	ldd	r15, Z+1	; 0x01
    3ca2:	02 81       	ldd	r16, Z+2	; 0x02
    3ca4:	13 81       	ldd	r17, Z+3	; 0x03
    3ca6:	24 81       	ldd	r18, Z+4	; 0x04
    3ca8:	35 81       	ldd	r19, Z+5	; 0x05
    3caa:	46 81       	ldd	r20, Z+6	; 0x06
    3cac:	57 81       	ldd	r21, Z+7	; 0x07
    3cae:	60 85       	ldd	r22, Z+8	; 0x08
    3cb0:	71 85       	ldd	r23, Z+9	; 0x09
    3cb2:	82 85       	ldd	r24, Z+10	; 0x0a
    3cb4:	93 85       	ldd	r25, Z+11	; 0x0b
    3cb6:	0e 94 ec 3c 	call	0x79d8	; 0x79d8 <_Z6xyz2xz7COORD3D>
    3cba:	cf 5a       	subi	r28, 0xAF	; 175
    3cbc:	de 4f       	sbci	r29, 0xFE	; 254
    3cbe:	28 83       	st	Y, r18
    3cc0:	c1 55       	subi	r28, 0x51	; 81
    3cc2:	d1 40       	sbci	r29, 0x01	; 1
    3cc4:	ce 5a       	subi	r28, 0xAE	; 174
    3cc6:	de 4f       	sbci	r29, 0xFE	; 254
    3cc8:	38 83       	st	Y, r19
    3cca:	c2 55       	subi	r28, 0x52	; 82
    3ccc:	d1 40       	sbci	r29, 0x01	; 1
    3cce:	cd 5a       	subi	r28, 0xAD	; 173
    3cd0:	de 4f       	sbci	r29, 0xFE	; 254
    3cd2:	48 83       	st	Y, r20
    3cd4:	c3 55       	subi	r28, 0x53	; 83
    3cd6:	d1 40       	sbci	r29, 0x01	; 1
    3cd8:	cc 5a       	subi	r28, 0xAC	; 172
    3cda:	de 4f       	sbci	r29, 0xFE	; 254
    3cdc:	58 83       	st	Y, r21
    3cde:	c4 55       	subi	r28, 0x54	; 84
    3ce0:	d1 40       	sbci	r29, 0x01	; 1
    3ce2:	cb 5a       	subi	r28, 0xAB	; 171
    3ce4:	de 4f       	sbci	r29, 0xFE	; 254
    3ce6:	68 83       	st	Y, r22
    3ce8:	c5 55       	subi	r28, 0x55	; 85
    3cea:	d1 40       	sbci	r29, 0x01	; 1
    3cec:	ca 5a       	subi	r28, 0xAA	; 170
    3cee:	de 4f       	sbci	r29, 0xFE	; 254
    3cf0:	78 83       	st	Y, r23
    3cf2:	c6 55       	subi	r28, 0x56	; 86
    3cf4:	d1 40       	sbci	r29, 0x01	; 1
    3cf6:	c9 5a       	subi	r28, 0xA9	; 169
    3cf8:	de 4f       	sbci	r29, 0xFE	; 254
    3cfa:	88 83       	st	Y, r24
    3cfc:	c7 55       	subi	r28, 0x57	; 87
    3cfe:	d1 40       	sbci	r29, 0x01	; 1
    3d00:	c8 5a       	subi	r28, 0xA8	; 168
    3d02:	de 4f       	sbci	r29, 0xFE	; 254
    3d04:	98 83       	st	Y, r25
    3d06:	c8 55       	subi	r28, 0x58	; 88
    3d08:	d1 40       	sbci	r29, 0x01	; 1
    3d0a:	de 01       	movw	r26, r28
    3d0c:	a7 5b       	subi	r26, 0xB7	; 183
    3d0e:	bf 4f       	sbci	r27, 0xFF	; 255
    3d10:	fe 01       	movw	r30, r28
    3d12:	ef 5a       	subi	r30, 0xAF	; 175
    3d14:	fe 4f       	sbci	r31, 0xFE	; 254
    3d16:	88 e0       	ldi	r24, 0x08	; 8
    3d18:	01 90       	ld	r0, Z+
    3d1a:	0d 92       	st	X+, r0
    3d1c:	81 50       	subi	r24, 0x01	; 1
    3d1e:	e1 f7       	brne	.-8      	; 0x3d18 <_ZN10Movimiento6updateEm+0xec4>
    3d20:	fe 01       	movw	r30, r28
    3d22:	e7 5b       	subi	r30, 0xB7	; 183
    3d24:	ff 4f       	sbci	r31, 0xFF	; 255
    3d26:	e2 96       	adiw	r28, 0x32	; 50
    3d28:	2f ad       	ldd	r18, Y+63	; 0x3f
    3d2a:	e2 97       	sbiw	r28, 0x32	; 50
    3d2c:	e3 96       	adiw	r28, 0x33	; 51
    3d2e:	3f ad       	ldd	r19, Y+63	; 0x3f
    3d30:	e3 97       	sbiw	r28, 0x33	; 51
    3d32:	e4 96       	adiw	r28, 0x34	; 52
    3d34:	4f ad       	ldd	r20, Y+63	; 0x3f
    3d36:	e4 97       	sbiw	r28, 0x34	; 52
    3d38:	e5 96       	adiw	r28, 0x35	; 53
    3d3a:	5f ad       	ldd	r21, Y+63	; 0x3f
    3d3c:	e5 97       	sbiw	r28, 0x35	; 53
    3d3e:	e6 96       	adiw	r28, 0x36	; 54
    3d40:	6f ad       	ldd	r22, Y+63	; 0x3f
    3d42:	e6 97       	sbiw	r28, 0x36	; 54
    3d44:	e7 96       	adiw	r28, 0x37	; 55
    3d46:	7f ad       	ldd	r23, Y+63	; 0x3f
    3d48:	e7 97       	sbiw	r28, 0x37	; 55
    3d4a:	e8 96       	adiw	r28, 0x38	; 56
    3d4c:	8f ad       	ldd	r24, Y+63	; 0x3f
    3d4e:	e8 97       	sbiw	r28, 0x38	; 56
    3d50:	e9 96       	adiw	r28, 0x39	; 57
    3d52:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d54:	e9 97       	sbiw	r28, 0x39	; 57
    3d56:	a0 80       	ld	r10, Z
    3d58:	b1 80       	ldd	r11, Z+1	; 0x01
    3d5a:	c2 80       	ldd	r12, Z+2	; 0x02
    3d5c:	d3 80       	ldd	r13, Z+3	; 0x03
    3d5e:	e4 80       	ldd	r14, Z+4	; 0x04
    3d60:	f5 80       	ldd	r15, Z+5	; 0x05
    3d62:	06 81       	ldd	r16, Z+6	; 0x06
    3d64:	17 81       	ldd	r17, Z+7	; 0x07
    3d66:	0e 94 9b 3b 	call	0x7736	; 0x7736 <_Z5resta7COORD2DS_>
    3d6a:	cf 5a       	subi	r28, 0xAF	; 175
    3d6c:	de 4f       	sbci	r29, 0xFE	; 254
    3d6e:	28 83       	st	Y, r18
    3d70:	c1 55       	subi	r28, 0x51	; 81
    3d72:	d1 40       	sbci	r29, 0x01	; 1
    3d74:	ce 5a       	subi	r28, 0xAE	; 174
    3d76:	de 4f       	sbci	r29, 0xFE	; 254
    3d78:	38 83       	st	Y, r19
    3d7a:	c2 55       	subi	r28, 0x52	; 82
    3d7c:	d1 40       	sbci	r29, 0x01	; 1
    3d7e:	cd 5a       	subi	r28, 0xAD	; 173
    3d80:	de 4f       	sbci	r29, 0xFE	; 254
    3d82:	48 83       	st	Y, r20
    3d84:	c3 55       	subi	r28, 0x53	; 83
    3d86:	d1 40       	sbci	r29, 0x01	; 1
    3d88:	cc 5a       	subi	r28, 0xAC	; 172
    3d8a:	de 4f       	sbci	r29, 0xFE	; 254
    3d8c:	58 83       	st	Y, r21
    3d8e:	c4 55       	subi	r28, 0x54	; 84
    3d90:	d1 40       	sbci	r29, 0x01	; 1
    3d92:	cb 5a       	subi	r28, 0xAB	; 171
    3d94:	de 4f       	sbci	r29, 0xFE	; 254
    3d96:	68 83       	st	Y, r22
    3d98:	c5 55       	subi	r28, 0x55	; 85
    3d9a:	d1 40       	sbci	r29, 0x01	; 1
    3d9c:	ca 5a       	subi	r28, 0xAA	; 170
    3d9e:	de 4f       	sbci	r29, 0xFE	; 254
    3da0:	78 83       	st	Y, r23
    3da2:	c6 55       	subi	r28, 0x56	; 86
    3da4:	d1 40       	sbci	r29, 0x01	; 1
    3da6:	c9 5a       	subi	r28, 0xA9	; 169
    3da8:	de 4f       	sbci	r29, 0xFE	; 254
    3daa:	88 83       	st	Y, r24
    3dac:	c7 55       	subi	r28, 0x57	; 87
    3dae:	d1 40       	sbci	r29, 0x01	; 1
    3db0:	c8 5a       	subi	r28, 0xA8	; 168
    3db2:	de 4f       	sbci	r29, 0xFE	; 254
    3db4:	98 83       	st	Y, r25
    3db6:	c8 55       	subi	r28, 0x58	; 88
    3db8:	d1 40       	sbci	r29, 0x01	; 1
    3dba:	de 01       	movw	r26, r28
    3dbc:	af 5a       	subi	r26, 0xAF	; 175
    3dbe:	bf 4f       	sbci	r27, 0xFF	; 255
    3dc0:	fe 01       	movw	r30, r28
    3dc2:	ef 5a       	subi	r30, 0xAF	; 175
    3dc4:	fe 4f       	sbci	r31, 0xFE	; 254
    3dc6:	88 e0       	ldi	r24, 0x08	; 8
    3dc8:	01 90       	ld	r0, Z+
    3dca:	0d 92       	st	X+, r0
    3dcc:	81 50       	subi	r24, 0x01	; 1
    3dce:	e1 f7       	brne	.-8      	; 0x3dc8 <_ZN10Movimiento6updateEm+0xf74>
    3dd0:	fe 01       	movw	r30, r28
    3dd2:	ef 5a       	subi	r30, 0xAF	; 175
    3dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd6:	20 81       	ld	r18, Z
    3dd8:	31 81       	ldd	r19, Z+1	; 0x01
    3dda:	42 81       	ldd	r20, Z+2	; 0x02
    3ddc:	53 81       	ldd	r21, Z+3	; 0x03
    3dde:	64 81       	ldd	r22, Z+4	; 0x04
    3de0:	75 81       	ldd	r23, Z+5	; 0x05
    3de2:	86 81       	ldd	r24, Z+6	; 0x06
    3de4:	97 81       	ldd	r25, Z+7	; 0x07
    3de6:	c3 5a       	subi	r28, 0xA3	; 163
    3de8:	de 4f       	sbci	r29, 0xFE	; 254
    3dea:	e8 80       	ld	r14, Y
    3dec:	f9 80       	ldd	r15, Y+1	; 0x01
    3dee:	0a 81       	ldd	r16, Y+2	; 0x02
    3df0:	1b 81       	ldd	r17, Y+3	; 0x03
    3df2:	cd 55       	subi	r28, 0x5D	; 93
    3df4:	d1 40       	sbci	r29, 0x01	; 1
    3df6:	0e 94 64 3c 	call	0x78c8	; 0x78c8 <_Z8producto7COORD2Df>
    3dfa:	cf 5a       	subi	r28, 0xAF	; 175
    3dfc:	de 4f       	sbci	r29, 0xFE	; 254
    3dfe:	28 83       	st	Y, r18
    3e00:	c1 55       	subi	r28, 0x51	; 81
    3e02:	d1 40       	sbci	r29, 0x01	; 1
    3e04:	ce 5a       	subi	r28, 0xAE	; 174
    3e06:	de 4f       	sbci	r29, 0xFE	; 254
    3e08:	38 83       	st	Y, r19
    3e0a:	c2 55       	subi	r28, 0x52	; 82
    3e0c:	d1 40       	sbci	r29, 0x01	; 1
    3e0e:	cd 5a       	subi	r28, 0xAD	; 173
    3e10:	de 4f       	sbci	r29, 0xFE	; 254
    3e12:	48 83       	st	Y, r20
    3e14:	c3 55       	subi	r28, 0x53	; 83
    3e16:	d1 40       	sbci	r29, 0x01	; 1
    3e18:	cc 5a       	subi	r28, 0xAC	; 172
    3e1a:	de 4f       	sbci	r29, 0xFE	; 254
    3e1c:	58 83       	st	Y, r21
    3e1e:	c4 55       	subi	r28, 0x54	; 84
    3e20:	d1 40       	sbci	r29, 0x01	; 1
    3e22:	cb 5a       	subi	r28, 0xAB	; 171
    3e24:	de 4f       	sbci	r29, 0xFE	; 254
    3e26:	68 83       	st	Y, r22
    3e28:	c5 55       	subi	r28, 0x55	; 85
    3e2a:	d1 40       	sbci	r29, 0x01	; 1
    3e2c:	ca 5a       	subi	r28, 0xAA	; 170
    3e2e:	de 4f       	sbci	r29, 0xFE	; 254
    3e30:	78 83       	st	Y, r23
    3e32:	c6 55       	subi	r28, 0x56	; 86
    3e34:	d1 40       	sbci	r29, 0x01	; 1
    3e36:	c9 5a       	subi	r28, 0xA9	; 169
    3e38:	de 4f       	sbci	r29, 0xFE	; 254
    3e3a:	88 83       	st	Y, r24
    3e3c:	c7 55       	subi	r28, 0x57	; 87
    3e3e:	d1 40       	sbci	r29, 0x01	; 1
    3e40:	c8 5a       	subi	r28, 0xA8	; 168
    3e42:	de 4f       	sbci	r29, 0xFE	; 254
    3e44:	98 83       	st	Y, r25
    3e46:	c8 55       	subi	r28, 0x58	; 88
    3e48:	d1 40       	sbci	r29, 0x01	; 1
    3e4a:	de 01       	movw	r26, r28
    3e4c:	a7 5a       	subi	r26, 0xA7	; 167
    3e4e:	bf 4f       	sbci	r27, 0xFF	; 255
    3e50:	fe 01       	movw	r30, r28
    3e52:	ef 5a       	subi	r30, 0xAF	; 175
    3e54:	fe 4f       	sbci	r31, 0xFE	; 254
    3e56:	88 e0       	ldi	r24, 0x08	; 8
    3e58:	01 90       	ld	r0, Z+
    3e5a:	0d 92       	st	X+, r0
    3e5c:	81 50       	subi	r24, 0x01	; 1
    3e5e:	e1 f7       	brne	.-8      	; 0x3e58 <_ZN10Movimiento6updateEm+0x1004>
    3e60:	f1 01       	movw	r30, r2
    3e62:	ee 0f       	add	r30, r30
    3e64:	ff 1f       	adc	r31, r31
    3e66:	e2 0d       	add	r30, r2
    3e68:	f3 1d       	adc	r31, r3
    3e6a:	ee 0f       	add	r30, r30
    3e6c:	ff 1f       	adc	r31, r31
    3e6e:	ee 0f       	add	r30, r30
    3e70:	ff 1f       	adc	r31, r31
    3e72:	e6 0d       	add	r30, r6
    3e74:	f7 1d       	adc	r31, r7
    3e76:	e8 5c       	subi	r30, 0xC8	; 200
    3e78:	fe 4f       	sbci	r31, 0xFE	; 254
    3e7a:	e0 80       	ld	r14, Z
    3e7c:	f1 80       	ldd	r15, Z+1	; 0x01
    3e7e:	02 81       	ldd	r16, Z+2	; 0x02
    3e80:	13 81       	ldd	r17, Z+3	; 0x03
    3e82:	24 81       	ldd	r18, Z+4	; 0x04
    3e84:	35 81       	ldd	r19, Z+5	; 0x05
    3e86:	46 81       	ldd	r20, Z+6	; 0x06
    3e88:	57 81       	ldd	r21, Z+7	; 0x07
    3e8a:	60 85       	ldd	r22, Z+8	; 0x08
    3e8c:	71 85       	ldd	r23, Z+9	; 0x09
    3e8e:	82 85       	ldd	r24, Z+10	; 0x0a
    3e90:	93 85       	ldd	r25, Z+11	; 0x0b
    3e92:	0e 94 ec 3c 	call	0x79d8	; 0x79d8 <_Z6xyz2xz7COORD3D>
    3e96:	cf 5a       	subi	r28, 0xAF	; 175
    3e98:	de 4f       	sbci	r29, 0xFE	; 254
    3e9a:	28 83       	st	Y, r18
    3e9c:	c1 55       	subi	r28, 0x51	; 81
    3e9e:	d1 40       	sbci	r29, 0x01	; 1
    3ea0:	ce 5a       	subi	r28, 0xAE	; 174
    3ea2:	de 4f       	sbci	r29, 0xFE	; 254
    3ea4:	38 83       	st	Y, r19
    3ea6:	c2 55       	subi	r28, 0x52	; 82
    3ea8:	d1 40       	sbci	r29, 0x01	; 1
    3eaa:	cd 5a       	subi	r28, 0xAD	; 173
    3eac:	de 4f       	sbci	r29, 0xFE	; 254
    3eae:	48 83       	st	Y, r20
    3eb0:	c3 55       	subi	r28, 0x53	; 83
    3eb2:	d1 40       	sbci	r29, 0x01	; 1
    3eb4:	cc 5a       	subi	r28, 0xAC	; 172
    3eb6:	de 4f       	sbci	r29, 0xFE	; 254
    3eb8:	58 83       	st	Y, r21
    3eba:	c4 55       	subi	r28, 0x54	; 84
    3ebc:	d1 40       	sbci	r29, 0x01	; 1
    3ebe:	cb 5a       	subi	r28, 0xAB	; 171
    3ec0:	de 4f       	sbci	r29, 0xFE	; 254
    3ec2:	68 83       	st	Y, r22
    3ec4:	c5 55       	subi	r28, 0x55	; 85
    3ec6:	d1 40       	sbci	r29, 0x01	; 1
    3ec8:	ca 5a       	subi	r28, 0xAA	; 170
    3eca:	de 4f       	sbci	r29, 0xFE	; 254
    3ecc:	78 83       	st	Y, r23
    3ece:	c6 55       	subi	r28, 0x56	; 86
    3ed0:	d1 40       	sbci	r29, 0x01	; 1
    3ed2:	c9 5a       	subi	r28, 0xA9	; 169
    3ed4:	de 4f       	sbci	r29, 0xFE	; 254
    3ed6:	88 83       	st	Y, r24
    3ed8:	c7 55       	subi	r28, 0x57	; 87
    3eda:	d1 40       	sbci	r29, 0x01	; 1
    3edc:	c8 5a       	subi	r28, 0xA8	; 168
    3ede:	de 4f       	sbci	r29, 0xFE	; 254
    3ee0:	98 83       	st	Y, r25
    3ee2:	c8 55       	subi	r28, 0x58	; 88
    3ee4:	d1 40       	sbci	r29, 0x01	; 1
    3ee6:	de 01       	movw	r26, r28
    3ee8:	af 59       	subi	r26, 0x9F	; 159
    3eea:	bf 4f       	sbci	r27, 0xFF	; 255
    3eec:	fe 01       	movw	r30, r28
    3eee:	ef 5a       	subi	r30, 0xAF	; 175
    3ef0:	fe 4f       	sbci	r31, 0xFE	; 254
    3ef2:	88 e0       	ldi	r24, 0x08	; 8
    3ef4:	01 90       	ld	r0, Z+
    3ef6:	0d 92       	st	X+, r0
    3ef8:	81 50       	subi	r24, 0x01	; 1
    3efa:	e1 f7       	brne	.-8      	; 0x3ef4 <_ZN10Movimiento6updateEm+0x10a0>
    3efc:	fe 01       	movw	r30, r28
    3efe:	e7 5a       	subi	r30, 0xA7	; 167
    3f00:	ff 4f       	sbci	r31, 0xFF	; 255
    3f02:	de 01       	movw	r26, r28
    3f04:	af 59       	subi	r26, 0x9F	; 159
    3f06:	bf 4f       	sbci	r27, 0xFF	; 255
    3f08:	20 81       	ld	r18, Z
    3f0a:	31 81       	ldd	r19, Z+1	; 0x01
    3f0c:	42 81       	ldd	r20, Z+2	; 0x02
    3f0e:	53 81       	ldd	r21, Z+3	; 0x03
    3f10:	64 81       	ldd	r22, Z+4	; 0x04
    3f12:	75 81       	ldd	r23, Z+5	; 0x05
    3f14:	86 81       	ldd	r24, Z+6	; 0x06
    3f16:	97 81       	ldd	r25, Z+7	; 0x07
    3f18:	ac 90       	ld	r10, X
    3f1a:	11 96       	adiw	r26, 0x01	; 1
    3f1c:	bc 90       	ld	r11, X
    3f1e:	11 97       	sbiw	r26, 0x01	; 1
    3f20:	12 96       	adiw	r26, 0x02	; 2
    3f22:	cc 90       	ld	r12, X
    3f24:	12 97       	sbiw	r26, 0x02	; 2
    3f26:	13 96       	adiw	r26, 0x03	; 3
    3f28:	dc 90       	ld	r13, X
    3f2a:	13 97       	sbiw	r26, 0x03	; 3
    3f2c:	14 96       	adiw	r26, 0x04	; 4
    3f2e:	ec 90       	ld	r14, X
    3f30:	14 97       	sbiw	r26, 0x04	; 4
    3f32:	15 96       	adiw	r26, 0x05	; 5
    3f34:	fc 90       	ld	r15, X
    3f36:	15 97       	sbiw	r26, 0x05	; 5
    3f38:	16 96       	adiw	r26, 0x06	; 6
    3f3a:	0c 91       	ld	r16, X
    3f3c:	16 97       	sbiw	r26, 0x06	; 6
    3f3e:	17 96       	adiw	r26, 0x07	; 7
    3f40:	1c 91       	ld	r17, X
    3f42:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <_Z4suma7COORD2DS_>
    3f46:	cf 5a       	subi	r28, 0xAF	; 175
    3f48:	de 4f       	sbci	r29, 0xFE	; 254
    3f4a:	28 83       	st	Y, r18
    3f4c:	c1 55       	subi	r28, 0x51	; 81
    3f4e:	d1 40       	sbci	r29, 0x01	; 1
    3f50:	ce 5a       	subi	r28, 0xAE	; 174
    3f52:	de 4f       	sbci	r29, 0xFE	; 254
    3f54:	38 83       	st	Y, r19
    3f56:	c2 55       	subi	r28, 0x52	; 82
    3f58:	d1 40       	sbci	r29, 0x01	; 1
    3f5a:	cd 5a       	subi	r28, 0xAD	; 173
    3f5c:	de 4f       	sbci	r29, 0xFE	; 254
    3f5e:	48 83       	st	Y, r20
    3f60:	c3 55       	subi	r28, 0x53	; 83
    3f62:	d1 40       	sbci	r29, 0x01	; 1
    3f64:	cc 5a       	subi	r28, 0xAC	; 172
    3f66:	de 4f       	sbci	r29, 0xFE	; 254
    3f68:	58 83       	st	Y, r21
    3f6a:	c4 55       	subi	r28, 0x54	; 84
    3f6c:	d1 40       	sbci	r29, 0x01	; 1
    3f6e:	cb 5a       	subi	r28, 0xAB	; 171
    3f70:	de 4f       	sbci	r29, 0xFE	; 254
    3f72:	68 83       	st	Y, r22
    3f74:	c5 55       	subi	r28, 0x55	; 85
    3f76:	d1 40       	sbci	r29, 0x01	; 1
    3f78:	ca 5a       	subi	r28, 0xAA	; 170
    3f7a:	de 4f       	sbci	r29, 0xFE	; 254
    3f7c:	78 83       	st	Y, r23
    3f7e:	c6 55       	subi	r28, 0x56	; 86
    3f80:	d1 40       	sbci	r29, 0x01	; 1
    3f82:	c9 5a       	subi	r28, 0xA9	; 169
    3f84:	de 4f       	sbci	r29, 0xFE	; 254
    3f86:	88 83       	st	Y, r24
    3f88:	c7 55       	subi	r28, 0x57	; 87
    3f8a:	d1 40       	sbci	r29, 0x01	; 1
    3f8c:	c8 5a       	subi	r28, 0xA8	; 168
    3f8e:	de 4f       	sbci	r29, 0xFE	; 254
    3f90:	98 83       	st	Y, r25
    3f92:	c8 55       	subi	r28, 0x58	; 88
    3f94:	d1 40       	sbci	r29, 0x01	; 1
    3f96:	de 01       	movw	r26, r28
    3f98:	af 58       	subi	r26, 0x8F	; 143
    3f9a:	bf 4f       	sbci	r27, 0xFF	; 255
    3f9c:	fe 01       	movw	r30, r28
    3f9e:	ef 5a       	subi	r30, 0xAF	; 175
    3fa0:	fe 4f       	sbci	r31, 0xFE	; 254
    3fa2:	88 e0       	ldi	r24, 0x08	; 8
    3fa4:	01 90       	ld	r0, Z+
    3fa6:	0d 92       	st	X+, r0
    3fa8:	81 50       	subi	r24, 0x01	; 1
    3faa:	e1 f7       	brne	.-8      	; 0x3fa4 <_ZN10Movimiento6updateEm+0x1150>
									}
								} 
								
								// pasito
			//				pasito (1<<pata, (COORD3D) {C.x, wk.rt.pos_ref[pata].y, C.z}, true, 0, sh.mv.escala*wk.mv.duracion_pasos, sh.mv.nsegmentos, suma(wk.rt.pos_ref[pata], (COORD3D){0,wk.mv.altura_pasito,0}));
								pasito (1<<pata, h_correct(C, pata), true, 0, sh.mv.escala*wk.mv.duracion_pasos, sh.mv.nsegmentos, suma(wk.rt.pos_ref[pata], (COORD3D){0,wk.mv.altura_pasito,0}));
    3fac:	ce 01       	movw	r24, r28
    3fae:	8f 52       	subi	r24, 0x2F	; 47
    3fb0:	9f 4f       	sbci	r25, 0xFF	; 255
    3fb2:	b3 01       	movw	r22, r6
    3fb4:	e2 96       	adiw	r28, 0x32	; 50
    3fb6:	ef ac       	ldd	r14, Y+63	; 0x3f
    3fb8:	e2 97       	sbiw	r28, 0x32	; 50
    3fba:	e3 96       	adiw	r28, 0x33	; 51
    3fbc:	ff ac       	ldd	r15, Y+63	; 0x3f
    3fbe:	e3 97       	sbiw	r28, 0x33	; 51
    3fc0:	e4 96       	adiw	r28, 0x34	; 52
    3fc2:	0f ad       	ldd	r16, Y+63	; 0x3f
    3fc4:	e4 97       	sbiw	r28, 0x34	; 52
    3fc6:	e5 96       	adiw	r28, 0x35	; 53
    3fc8:	1f ad       	ldd	r17, Y+63	; 0x3f
    3fca:	e5 97       	sbiw	r28, 0x35	; 53
    3fcc:	e6 96       	adiw	r28, 0x36	; 54
    3fce:	2f ad       	ldd	r18, Y+63	; 0x3f
    3fd0:	e6 97       	sbiw	r28, 0x36	; 54
    3fd2:	e7 96       	adiw	r28, 0x37	; 55
    3fd4:	3f ad       	ldd	r19, Y+63	; 0x3f
    3fd6:	e7 97       	sbiw	r28, 0x37	; 55
    3fd8:	e8 96       	adiw	r28, 0x38	; 56
    3fda:	4f ad       	ldd	r20, Y+63	; 0x3f
    3fdc:	e8 97       	sbiw	r28, 0x38	; 56
    3fde:	e9 96       	adiw	r28, 0x39	; 57
    3fe0:	5f ad       	ldd	r21, Y+63	; 0x3f
    3fe2:	e9 97       	sbiw	r28, 0x39	; 57
    3fe4:	c9 2c       	mov	r12, r9
    3fe6:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <_ZN10Movimiento9h_correctE7COORD2Dh>
    3fea:	cd 58       	subi	r28, 0x8D	; 141
    3fec:	de 4f       	sbci	r29, 0xFE	; 254
    3fee:	a8 81       	ld	r26, Y
    3ff0:	b9 81       	ldd	r27, Y+1	; 0x01
    3ff2:	c3 57       	subi	r28, 0x73	; 115
    3ff4:	d1 40       	sbci	r29, 0x01	; 1
    3ff6:	8c 91       	ld	r24, X
    3ff8:	90 e0       	ldi	r25, 0x00	; 0
    3ffa:	cb 58       	subi	r28, 0x8B	; 139
    3ffc:	de 4f       	sbci	r29, 0xFE	; 254
    3ffe:	e8 81       	ld	r30, Y
    4000:	f9 81       	ldd	r31, Y+1	; 0x01
    4002:	c5 57       	subi	r28, 0x75	; 117
    4004:	d1 40       	sbci	r29, 0x01	; 1
    4006:	20 81       	ld	r18, Z
    4008:	31 81       	ldd	r19, Z+1	; 0x01
    400a:	82 9f       	mul	r24, r18
    400c:	50 01       	movw	r10, r0
    400e:	83 9f       	mul	r24, r19
    4010:	b0 0c       	add	r11, r0
    4012:	92 9f       	mul	r25, r18
    4014:	b0 0c       	add	r11, r0
    4016:	11 24       	eor	r1, r1
    4018:	c9 58       	subi	r28, 0x89	; 137
    401a:	de 4f       	sbci	r29, 0xFE	; 254
    401c:	a8 81       	ld	r26, Y
    401e:	b9 81       	ldd	r27, Y+1	; 0x01
    4020:	c7 57       	subi	r28, 0x77	; 119
    4022:	d1 40       	sbci	r29, 0x01	; 1
    4024:	9c 90       	ld	r9, X
    4026:	c7 58       	subi	r28, 0x87	; 135
    4028:	de 4f       	sbci	r29, 0xFE	; 254
    402a:	e8 81       	ld	r30, Y
    402c:	f9 81       	ldd	r31, Y+1	; 0x01
    402e:	c9 57       	subi	r28, 0x79	; 121
    4030:	d1 40       	sbci	r29, 0x01	; 1
    4032:	20 81       	ld	r18, Z
    4034:	31 81       	ldd	r19, Z+1	; 0x01
    4036:	42 81       	ldd	r20, Z+2	; 0x02
    4038:	53 81       	ldd	r21, Z+3	; 0x03
    403a:	80 e0       	ldi	r24, 0x00	; 0
    403c:	90 e0       	ldi	r25, 0x00	; 0
    403e:	a0 e0       	ldi	r26, 0x00	; 0
    4040:	b0 e0       	ldi	r27, 0x00	; 0
    4042:	c3 52       	subi	r28, 0x23	; 35
    4044:	df 4f       	sbci	r29, 0xFF	; 255
    4046:	88 83       	st	Y, r24
    4048:	99 83       	std	Y+1, r25	; 0x01
    404a:	aa 83       	std	Y+2, r26	; 0x02
    404c:	bb 83       	std	Y+3, r27	; 0x03
    404e:	cd 5d       	subi	r28, 0xDD	; 221
    4050:	d0 40       	sbci	r29, 0x00	; 0
    4052:	cf 51       	subi	r28, 0x1F	; 31
    4054:	df 4f       	sbci	r29, 0xFF	; 255
    4056:	28 83       	st	Y, r18
    4058:	39 83       	std	Y+1, r19	; 0x01
    405a:	4a 83       	std	Y+2, r20	; 0x02
    405c:	5b 83       	std	Y+3, r21	; 0x03
    405e:	c1 5e       	subi	r28, 0xE1	; 225
    4060:	d0 40       	sbci	r29, 0x00	; 0
    4062:	cb 51       	subi	r28, 0x1B	; 27
    4064:	df 4f       	sbci	r29, 0xFF	; 255
    4066:	88 83       	st	Y, r24
    4068:	99 83       	std	Y+1, r25	; 0x01
    406a:	aa 83       	std	Y+2, r26	; 0x02
    406c:	bb 83       	std	Y+3, r27	; 0x03
    406e:	c5 5e       	subi	r28, 0xE5	; 229
    4070:	d0 40       	sbci	r29, 0x00	; 0
    4072:	2d b7       	in	r18, 0x3d	; 61
    4074:	3e b7       	in	r19, 0x3e	; 62
    4076:	2c 50       	subi	r18, 0x0C	; 12
    4078:	30 40       	sbci	r19, 0x00	; 0
    407a:	0f b6       	in	r0, 0x3f	; 63
    407c:	f8 94       	cli
    407e:	3e bf       	out	0x3e, r19	; 62
    4080:	0f be       	out	0x3f, r0	; 63
    4082:	2d bf       	out	0x3d, r18	; 61
    4084:	f1 01       	movw	r30, r2
    4086:	ee 0f       	add	r30, r30
    4088:	ff 1f       	adc	r31, r31
    408a:	e2 0d       	add	r30, r2
    408c:	f3 1d       	adc	r31, r3
    408e:	ee 0f       	add	r30, r30
    4090:	ff 1f       	adc	r31, r31
    4092:	ee 0f       	add	r30, r30
    4094:	ff 1f       	adc	r31, r31
    4096:	e6 0d       	add	r30, r6
    4098:	f7 1d       	adc	r31, r7
    409a:	e8 5c       	subi	r30, 0xC8	; 200
    409c:	fe 4f       	sbci	r31, 0xFE	; 254
    409e:	2f 5f       	subi	r18, 0xFF	; 255
    40a0:	3f 4f       	sbci	r19, 0xFF	; 255
    40a2:	ae 01       	movw	r20, r28
    40a4:	43 52       	subi	r20, 0x23	; 35
    40a6:	5f 4f       	sbci	r21, 0xFF	; 255
    40a8:	8c e0       	ldi	r24, 0x0C	; 12
    40aa:	da 01       	movw	r26, r20
    40ac:	0d 90       	ld	r0, X+
    40ae:	ad 01       	movw	r20, r26
    40b0:	d9 01       	movw	r26, r18
    40b2:	0d 92       	st	X+, r0
    40b4:	9d 01       	movw	r18, r26
    40b6:	81 50       	subi	r24, 0x01	; 1
    40b8:	c1 f7       	brne	.-16     	; 0x40aa <_ZN10Movimiento6updateEm+0x1256>
    40ba:	ce 01       	movw	r24, r28
    40bc:	87 51       	subi	r24, 0x17	; 23
    40be:	9f 4f       	sbci	r25, 0xFF	; 255
    40c0:	c0 80       	ld	r12, Z
    40c2:	d1 80       	ldd	r13, Z+1	; 0x01
    40c4:	e2 80       	ldd	r14, Z+2	; 0x02
    40c6:	f3 80       	ldd	r15, Z+3	; 0x03
    40c8:	04 81       	ldd	r16, Z+4	; 0x04
    40ca:	15 81       	ldd	r17, Z+5	; 0x05
    40cc:	26 81       	ldd	r18, Z+6	; 0x06
    40ce:	37 81       	ldd	r19, Z+7	; 0x07
    40d0:	40 85       	ldd	r20, Z+8	; 0x08
    40d2:	51 85       	ldd	r21, Z+9	; 0x09
    40d4:	62 85       	ldd	r22, Z+10	; 0x0a
    40d6:	73 85       	ldd	r23, Z+11	; 0x0b
    40d8:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <_Z4suma7COORD3DS_>
    40dc:	ed b7       	in	r30, 0x3d	; 61
    40de:	fe b7       	in	r31, 0x3e	; 62
    40e0:	37 97       	sbiw	r30, 0x07	; 7
    40e2:	0f b6       	in	r0, 0x3f	; 63
    40e4:	f8 94       	cli
    40e6:	fe bf       	out	0x3e, r31	; 62
    40e8:	0f be       	out	0x3f, r0	; 63
    40ea:	ed bf       	out	0x3d, r30	; 61
    40ec:	31 96       	adiw	r30, 0x01	; 1
    40ee:	61 e0       	ldi	r22, 0x01	; 1
    40f0:	70 e0       	ldi	r23, 0x00	; 0
    40f2:	02 2c       	mov	r0, r2
    40f4:	02 c0       	rjmp	.+4      	; 0x40fa <_ZN10Movimiento6updateEm+0x12a6>
    40f6:	66 0f       	add	r22, r22
    40f8:	77 1f       	adc	r23, r23
    40fa:	0a 94       	dec	r0
    40fc:	e2 f7       	brpl	.-8      	; 0x40f6 <_ZN10Movimiento6updateEm+0x12a2>
    40fe:	20 e0       	ldi	r18, 0x00	; 0
    4100:	30 e0       	ldi	r19, 0x00	; 0
    4102:	40 e0       	ldi	r20, 0x00	; 0
    4104:	50 e0       	ldi	r21, 0x00	; 0
    4106:	ad b7       	in	r26, 0x3d	; 61
    4108:	be b7       	in	r27, 0x3e	; 62
    410a:	11 96       	adiw	r26, 0x01	; 1
    410c:	2d 93       	st	X+, r18
    410e:	3d 93       	st	X+, r19
    4110:	4d 93       	st	X+, r20
    4112:	5c 93       	st	X, r21
    4114:	14 97       	sbiw	r26, 0x04	; 4
    4116:	b5 82       	std	Z+5, r11	; 0x05
    4118:	a4 82       	std	Z+4, r10	; 0x04
    411a:	96 82       	std	Z+6, r9	; 0x06
    411c:	18 96       	adiw	r26, 0x08	; 8
    411e:	fe 01       	movw	r30, r28
    4120:	e7 51       	subi	r30, 0x17	; 23
    4122:	ff 4f       	sbci	r31, 0xFF	; 255
    4124:	8c e0       	ldi	r24, 0x0C	; 12
    4126:	01 90       	ld	r0, Z+
    4128:	0d 92       	st	X+, r0
    412a:	81 50       	subi	r24, 0x01	; 1
    412c:	e1 f7       	brne	.-8      	; 0x4126 <_ZN10Movimiento6updateEm+0x12d2>
    412e:	c3 01       	movw	r24, r6
    4130:	cf 52       	subi	r28, 0x2F	; 47
    4132:	df 4f       	sbci	r29, 0xFF	; 255
    4134:	a8 80       	ld	r10, Y
    4136:	c1 5d       	subi	r28, 0xD1	; 209
    4138:	d0 40       	sbci	r29, 0x00	; 0
    413a:	ce 52       	subi	r28, 0x2E	; 46
    413c:	df 4f       	sbci	r29, 0xFF	; 255
    413e:	b8 80       	ld	r11, Y
    4140:	c2 5d       	subi	r28, 0xD2	; 210
    4142:	d0 40       	sbci	r29, 0x00	; 0
    4144:	cd 52       	subi	r28, 0x2D	; 45
    4146:	df 4f       	sbci	r29, 0xFF	; 255
    4148:	c8 80       	ld	r12, Y
    414a:	c3 5d       	subi	r28, 0xD3	; 211
    414c:	d0 40       	sbci	r29, 0x00	; 0
    414e:	cc 52       	subi	r28, 0x2C	; 44
    4150:	df 4f       	sbci	r29, 0xFF	; 255
    4152:	d8 80       	ld	r13, Y
    4154:	c4 5d       	subi	r28, 0xD4	; 212
    4156:	d0 40       	sbci	r29, 0x00	; 0
    4158:	cb 52       	subi	r28, 0x2B	; 43
    415a:	df 4f       	sbci	r29, 0xFF	; 255
    415c:	e8 80       	ld	r14, Y
    415e:	c5 5d       	subi	r28, 0xD5	; 213
    4160:	d0 40       	sbci	r29, 0x00	; 0
    4162:	ca 52       	subi	r28, 0x2A	; 42
    4164:	df 4f       	sbci	r29, 0xFF	; 255
    4166:	f8 80       	ld	r15, Y
    4168:	c6 5d       	subi	r28, 0xD6	; 214
    416a:	d0 40       	sbci	r29, 0x00	; 0
    416c:	c9 52       	subi	r28, 0x29	; 41
    416e:	df 4f       	sbci	r29, 0xFF	; 255
    4170:	08 81       	ld	r16, Y
    4172:	c7 5d       	subi	r28, 0xD7	; 215
    4174:	d0 40       	sbci	r29, 0x00	; 0
    4176:	c8 52       	subi	r28, 0x28	; 40
    4178:	df 4f       	sbci	r29, 0xFF	; 255
    417a:	18 81       	ld	r17, Y
    417c:	c8 5d       	subi	r28, 0xD8	; 216
    417e:	d0 40       	sbci	r29, 0x00	; 0
    4180:	c7 52       	subi	r28, 0x27	; 39
    4182:	df 4f       	sbci	r29, 0xFF	; 255
    4184:	28 81       	ld	r18, Y
    4186:	c9 5d       	subi	r28, 0xD9	; 217
    4188:	d0 40       	sbci	r29, 0x00	; 0
    418a:	c6 52       	subi	r28, 0x26	; 38
    418c:	df 4f       	sbci	r29, 0xFF	; 255
    418e:	38 81       	ld	r19, Y
    4190:	ca 5d       	subi	r28, 0xDA	; 218
    4192:	d0 40       	sbci	r29, 0x00	; 0
    4194:	c5 52       	subi	r28, 0x25	; 37
    4196:	df 4f       	sbci	r29, 0xFF	; 255
    4198:	48 81       	ld	r20, Y
    419a:	cb 5d       	subi	r28, 0xDB	; 219
    419c:	d0 40       	sbci	r29, 0x00	; 0
    419e:	c4 52       	subi	r28, 0x24	; 36
    41a0:	df 4f       	sbci	r29, 0xFF	; 255
    41a2:	58 81       	ld	r21, Y
    41a4:	cc 5d       	subi	r28, 0xDC	; 220
    41a6:	d0 40       	sbci	r29, 0x00	; 0
    41a8:	88 24       	eor	r8, r8
    41aa:	83 94       	inc	r8
    41ac:	0e 94 66 0a 	call	0x14cc	; 0x14cc <_ZN10Movimiento6pasitoEh7COORD3DbfihS0_>
    41b0:	ed b7       	in	r30, 0x3d	; 61
    41b2:	fe b7       	in	r31, 0x3e	; 62
    41b4:	73 96       	adiw	r30, 0x13	; 19
    41b6:	0f b6       	in	r0, 0x3f	; 63
    41b8:	f8 94       	cli
    41ba:	fe bf       	out	0x3e, r31	; 62
    41bc:	0f be       	out	0x3f, r0	; 63
    41be:	ed bf       	out	0x3d, r30	; 61
    41c0:	08 94       	sec
    41c2:	21 1c       	adc	r2, r1
    41c4:	31 1c       	adc	r3, r1
					}
					
					// tratamiento de los "pasitos"
					if ((sh.cn.tick%wk.mv.periodo_sub_ciclo)-wk.mv.periodo_pasos*(wk.rt.index%wk.mv.agrupamiento) == 0) {
									
						for (byte pata=0; pata<6; pata++) {
    41c6:	f6 e0       	ldi	r31, 0x06	; 6
    41c8:	2f 16       	cp	r2, r31
    41ca:	31 04       	cpc	r3, r1
    41cc:	11 f0       	breq	.+4      	; 0x41d2 <_ZN10Movimiento6updateEm+0x137e>
    41ce:	0c 94 95 18 	jmp	0x312a	; 0x312a <_ZN10Movimiento6updateEm+0x2d6>
			//				pasito (1<<pata, (COORD3D) {C.x, wk.rt.pos_ref[pata].y, C.z}, true, 0, sh.mv.escala*wk.mv.duracion_pasos, sh.mv.nsegmentos, suma(wk.rt.pos_ref[pata], (COORD3D){0,wk.mv.altura_pasito,0}));
								pasito (1<<pata, h_correct(C, pata), true, 0, sh.mv.escala*wk.mv.duracion_pasos, sh.mv.nsegmentos, suma(wk.rt.pos_ref[pata], (COORD3D){0,wk.mv.altura_pasito,0}));
							}
						}
				
						wk.rt.counter[wk.rt.index] = wk.mv.duracion_pasos;
    41d2:	83 01       	movw	r16, r6
    41d4:	00 58       	subi	r16, 0x80	; 128
    41d6:	1e 4f       	sbci	r17, 0xFE	; 254
    41d8:	d8 01       	movw	r26, r16
    41da:	8c 91       	ld	r24, X
    41dc:	90 e0       	ldi	r25, 0x00	; 0
    41de:	f3 01       	movw	r30, r6
    41e0:	e8 0f       	add	r30, r24
    41e2:	f9 1f       	adc	r31, r25
    41e4:	ee 57       	subi	r30, 0x7E	; 126
    41e6:	fe 4f       	sbci	r31, 0xFE	; 254
    41e8:	21 ec       	ldi	r18, 0xC1	; 193
    41ea:	30 e0       	ldi	r19, 0x00	; 0
    41ec:	62 0e       	add	r6, r18
    41ee:	73 1e       	adc	r7, r19
    41f0:	d3 01       	movw	r26, r6
    41f2:	2c 91       	ld	r18, X
    41f4:	20 83       	st	Z, r18
						wk.rt.index = (wk.rt.index+1)%wk.mv.fases;
    41f6:	ea ef       	ldi	r30, 0xFA	; 250
    41f8:	ff ef       	ldi	r31, 0xFF	; 255
    41fa:	6e 0e       	add	r6, r30
    41fc:	7f 1e       	adc	r7, r31
    41fe:	d3 01       	movw	r26, r6
    4200:	6c 91       	ld	r22, X
    4202:	e5 e4       	ldi	r30, 0x45	; 69
    4204:	ff ef       	ldi	r31, 0xFF	; 255
    4206:	6e 0e       	add	r6, r30
    4208:	7f 1e       	adc	r7, r31
    420a:	01 96       	adiw	r24, 0x01	; 1
    420c:	70 e0       	ldi	r23, 0x00	; 0
    420e:	0e 94 05 7f 	call	0xfe0a	; 0xfe0a <__divmodhi4>
    4212:	d8 01       	movw	r26, r16
    4214:	8c 93       	st	X, r24
					}
					
					// determinación de las patas apoyadas
					wk.rt.apoyadas = 0;
    4216:	f3 01       	movw	r30, r6
    4218:	ef 57       	subi	r30, 0x7F	; 127
    421a:	fe 4f       	sbci	r31, 0xFE	; 254
    421c:	10 82       	st	Z, r1
    421e:	20 e0       	ldi	r18, 0x00	; 0
					for (byte i=0; i<wk.mv.fases; i++) {
    4220:	b3 01       	movw	r22, r6
    4222:	65 54       	subi	r22, 0x45	; 69
    4224:	7f 4f       	sbci	r23, 0xFF	; 255
						if (wk.rt.counter[i] > 0) {wk.rt.counter[i]--;} else {wk.rt.apoyadas += wk.mv.secuencia[i];} // cuando counter[i]=0, el conjunto de patas correspondiente está apoyado
    4226:	af 01       	movw	r20, r30
    4228:	13 c0       	rjmp	.+38     	; 0x4250 <_ZN10Movimiento6updateEm+0x13fc>
    422a:	d3 01       	movw	r26, r6
    422c:	a2 0f       	add	r26, r18
    422e:	b1 1d       	adc	r27, r1
    4230:	fd 01       	movw	r30, r26
    4232:	ee 57       	subi	r30, 0x7E	; 126
    4234:	fe 4f       	sbci	r31, 0xFE	; 254
    4236:	80 81       	ld	r24, Z
    4238:	88 23       	and	r24, r24
    423a:	11 f0       	breq	.+4      	; 0x4240 <_ZN10Movimiento6updateEm+0x13ec>
    423c:	81 50       	subi	r24, 0x01	; 1
    423e:	06 c0       	rjmp	.+12     	; 0x424c <_ZN10Movimiento6updateEm+0x13f8>
    4240:	ab 54       	subi	r26, 0x4B	; 75
    4242:	bf 4f       	sbci	r27, 0xFF	; 255
    4244:	8c 91       	ld	r24, X
    4246:	fa 01       	movw	r30, r20
    4248:	90 81       	ld	r25, Z
    424a:	89 0f       	add	r24, r25
    424c:	80 83       	st	Z, r24
						wk.rt.index = (wk.rt.index+1)%wk.mv.fases;
					}
					
					// determinación de las patas apoyadas
					wk.rt.apoyadas = 0;
					for (byte i=0; i<wk.mv.fases; i++) {
    424e:	2f 5f       	subi	r18, 0xFF	; 255
    4250:	db 01       	movw	r26, r22
    4252:	8c 91       	ld	r24, X
    4254:	28 17       	cp	r18, r24
    4256:	48 f3       	brcs	.-46     	; 0x422a <_ZN10Movimiento6updateEm+0x13d6>
						if (wk.rt.counter[i] > 0) {wk.rt.counter[i]--;} else {wk.rt.apoyadas += wk.mv.secuencia[i];} // cuando counter[i]=0, el conjunto de patas correspondiente está apoyado
					}
					
					// aplicación del movimiento continuo del cuerpo (micropasos)
					if (wk.mv.rotacion == 0) {
    4258:	f3 01       	movw	r30, r6
    425a:	ef 54       	subi	r30, 0x4F	; 79
    425c:	ff 4f       	sbci	r31, 0xFF	; 255
    425e:	60 81       	ld	r22, Z
    4260:	71 81       	ldd	r23, Z+1	; 0x01
    4262:	82 81       	ldd	r24, Z+2	; 0x02
    4264:	93 81       	ldd	r25, Z+3	; 0x03
    4266:	20 e0       	ldi	r18, 0x00	; 0
    4268:	30 e0       	ldi	r19, 0x00	; 0
    426a:	40 e0       	ldi	r20, 0x00	; 0
    426c:	50 e0       	ldi	r21, 0x00	; 0
    426e:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    4272:	88 23       	and	r24, r24
    4274:	09 f0       	breq	.+2      	; 0x4278 <_ZN10Movimiento6updateEm+0x1424>
    4276:	7d c0       	rjmp	.+250    	; 0x4372 <_ZN10Movimiento6updateEm+0x151e>
						// traslación
	//				eventos.add ((MOVDATA) {wk.rt.apoyadas, xz2xyz (wk.mv.vector), sh.mv.escala, false}, 0);
						eventos.add ((MOVDATA) {wk.rt.apoyadas, h_correct (wk.mv.vector), sh.mv.escala, false}, 0);
    4278:	e1 e8       	ldi	r30, 0x81	; 129
    427a:	f1 e0       	ldi	r31, 0x01	; 1
    427c:	6e 0e       	add	r6, r30
    427e:	7f 1e       	adc	r7, r31
    4280:	d3 01       	movw	r26, r6
    4282:	bc 90       	ld	r11, X
    4284:	ef e7       	ldi	r30, 0x7F	; 127
    4286:	fe ef       	ldi	r31, 0xFE	; 254
    4288:	6e 0e       	add	r6, r30
    428a:	7f 1e       	adc	r7, r31
    428c:	75 ef       	ldi	r23, 0xF5	; 245
    428e:	c7 2e       	mov	r12, r23
    4290:	d1 2c       	mov	r13, r1
    4292:	cc 0e       	add	r12, r28
    4294:	dd 1e       	adc	r13, r29
    4296:	f3 01       	movw	r30, r6
    4298:	e7 55       	subi	r30, 0x57	; 87
    429a:	ff 4f       	sbci	r31, 0xFF	; 255
    429c:	c6 01       	movw	r24, r12
    429e:	b3 01       	movw	r22, r6
    42a0:	e0 80       	ld	r14, Z
    42a2:	f1 80       	ldd	r15, Z+1	; 0x01
    42a4:	02 81       	ldd	r16, Z+2	; 0x02
    42a6:	13 81       	ldd	r17, Z+3	; 0x03
    42a8:	24 81       	ldd	r18, Z+4	; 0x04
    42aa:	35 81       	ldd	r19, Z+5	; 0x05
    42ac:	46 81       	ldd	r20, Z+6	; 0x06
    42ae:	57 81       	ldd	r21, Z+7	; 0x07
    42b0:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <_ZN10Movimiento9h_correctE7COORD2D>
    42b4:	20 ee       	ldi	r18, 0xE0	; 224
    42b6:	31 e0       	ldi	r19, 0x01	; 1
    42b8:	62 0e       	add	r6, r18
    42ba:	73 1e       	adc	r7, r19
    42bc:	d3 01       	movw	r26, r6
    42be:	9c 91       	ld	r25, X
    42c0:	e0 e2       	ldi	r30, 0x20	; 32
    42c2:	fe ef       	ldi	r31, 0xFE	; 254
    42c4:	6e 0e       	add	r6, r30
    42c6:	7f 1e       	adc	r7, r31
    42c8:	fe 01       	movw	r30, r28
    42ca:	ef 5c       	subi	r30, 0xCF	; 207
    42cc:	fe 4f       	sbci	r31, 0xFE	; 254
    42ce:	80 e1       	ldi	r24, 0x10	; 16
    42d0:	df 01       	movw	r26, r30
    42d2:	1d 92       	st	X+, r1
    42d4:	8a 95       	dec	r24
    42d6:	e9 f7       	brne	.-6      	; 0x42d2 <_ZN10Movimiento6updateEm+0x147e>
    42d8:	31 96       	adiw	r30, 0x01	; 1
    42da:	d6 01       	movw	r26, r12
    42dc:	8c e0       	ldi	r24, 0x0C	; 12
    42de:	0d 90       	ld	r0, X+
    42e0:	01 92       	st	Z+, r0
    42e2:	81 50       	subi	r24, 0x01	; 1
    42e4:	e1 f7       	brne	.-8      	; 0x42de <_ZN10Movimiento6updateEm+0x148a>
    42e6:	fe 01       	movw	r30, r28
    42e8:	ef 5c       	subi	r30, 0xCF	; 207
    42ea:	fe 4f       	sbci	r31, 0xFE	; 254
    42ec:	b0 82       	st	Z, r11
    42ee:	95 87       	std	Z+13, r25	; 0x0d
    42f0:	16 86       	std	Z+14, r1	; 0x0e
    42f2:	00 d0       	rcall	.+0      	; 0x42f4 <_ZN10Movimiento6updateEm+0x14a0>
    42f4:	ad b7       	in	r26, 0x3d	; 61
    42f6:	be b7       	in	r27, 0x3e	; 62
    42f8:	12 96       	adiw	r26, 0x02	; 2
    42fa:	1c 92       	st	X, r1
    42fc:	1e 92       	st	-X, r1
    42fe:	11 97       	sbiw	r26, 0x01	; 1
    4300:	8f ed       	ldi	r24, 0xDF	; 223
    4302:	95 e0       	ldi	r25, 0x05	; 5
    4304:	80 80       	ld	r8, Z
    4306:	91 80       	ldd	r9, Z+1	; 0x01
    4308:	a2 80       	ldd	r10, Z+2	; 0x02
    430a:	b3 80       	ldd	r11, Z+3	; 0x03
    430c:	c4 80       	ldd	r12, Z+4	; 0x04
    430e:	d5 80       	ldd	r13, Z+5	; 0x05
    4310:	e6 80       	ldd	r14, Z+6	; 0x06
    4312:	f7 80       	ldd	r15, Z+7	; 0x07
    4314:	00 85       	ldd	r16, Z+8	; 0x08
    4316:	11 85       	ldd	r17, Z+9	; 0x09
    4318:	22 85       	ldd	r18, Z+10	; 0x0a
    431a:	33 85       	ldd	r19, Z+11	; 0x0b
    431c:	44 85       	ldd	r20, Z+12	; 0x0c
    431e:	55 85       	ldd	r21, Z+13	; 0x0d
    4320:	66 85       	ldd	r22, Z+14	; 0x0e
    4322:	77 85       	ldd	r23, Z+15	; 0x0f
    4324:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZN6Events3addE7MOVDATAi>
						if (wk.rt.apoyadas) {
    4328:	e1 e8       	ldi	r30, 0x81	; 129
    432a:	f1 e0       	ldi	r31, 0x01	; 1
    432c:	6e 0e       	add	r6, r30
    432e:	7f 1e       	adc	r7, r31
    4330:	0f 90       	pop	r0
    4332:	0f 90       	pop	r0
    4334:	d3 01       	movw	r26, r6
    4336:	8c 91       	ld	r24, X
    4338:	ef e7       	ldi	r30, 0x7F	; 127
    433a:	fe ef       	ldi	r31, 0xFE	; 254
    433c:	6e 0e       	add	r6, r30
    433e:	7f 1e       	adc	r7, r31
    4340:	88 23       	and	r24, r24
    4342:	09 f4       	brne	.+2      	; 0x4346 <_ZN10Movimiento6updateEm+0x14f2>
    4344:	49 c5       	rjmp	.+2706   	; 0x4dd8 <_ZN10Movimiento6updateEm+0x1f84>
							if (mon_desplazamiento != NULL) {sumasigna (mon_desplazamiento, wk.mv.vector);}   // monitor de desplazamiento
    4346:	d3 01       	movw	r26, r6
    4348:	12 96       	adiw	r26, 0x02	; 2
    434a:	8d 91       	ld	r24, X+
    434c:	9c 91       	ld	r25, X
    434e:	13 97       	sbiw	r26, 0x03	; 3
    4350:	00 97       	sbiw	r24, 0x00	; 0
    4352:	09 f4       	brne	.+2      	; 0x4356 <_ZN10Movimiento6updateEm+0x1502>
    4354:	41 c5       	rjmp	.+2690   	; 0x4dd8 <_ZN10Movimiento6updateEm+0x1f84>
    4356:	f3 01       	movw	r30, r6
    4358:	e7 55       	subi	r30, 0x57	; 87
    435a:	ff 4f       	sbci	r31, 0xFF	; 255
    435c:	00 81       	ld	r16, Z
    435e:	11 81       	ldd	r17, Z+1	; 0x01
    4360:	22 81       	ldd	r18, Z+2	; 0x02
    4362:	33 81       	ldd	r19, Z+3	; 0x03
    4364:	44 81       	ldd	r20, Z+4	; 0x04
    4366:	55 81       	ldd	r21, Z+5	; 0x05
    4368:	66 81       	ldd	r22, Z+6	; 0x06
    436a:	77 81       	ldd	r23, Z+7	; 0x07
    436c:	0e 94 30 3f 	call	0x7e60	; 0x7e60 <_Z9sumasignaP7COORD2DS_>
    4370:	33 c5       	rjmp	.+2662   	; 0x4dd8 <_ZN10Movimiento6updateEm+0x1f84>
					} else {
						// rotación
						for (byte pata=0; pata<6; pata++) {
							if ((wk.rt.apoyadas>>pata)&1) {
								COORD2D O = getOffset (pata); // no usamos rel2abs/abs2rel por razones de eficiencia
								COORD2D C = resta (suma (applyMatrix (resta (suma (xyz2xz(pos_des[pata]), O), wk.mv.vector), wk.rt.rotor1), wk.mv.vector), O);
    4372:	f3 01       	movw	r30, r6
    4374:	e0 53       	subi	r30, 0x30	; 48
    4376:	ff 4f       	sbci	r31, 0xFF	; 255
    4378:	cf 59       	subi	r28, 0x9F	; 159
    437a:	de 4f       	sbci	r29, 0xFE	; 254
    437c:	f9 83       	std	Y+1, r31	; 0x01
    437e:	e8 83       	st	Y, r30
    4380:	c1 56       	subi	r28, 0x61	; 97
    4382:	d1 40       	sbci	r29, 0x01	; 1
    4384:	c5 5a       	subi	r28, 0xA5	; 165
    4386:	de 4f       	sbci	r29, 0xFE	; 254
    4388:	19 82       	std	Y+1, r1	; 0x01
    438a:	18 82       	st	Y, r1
    438c:	cb 55       	subi	r28, 0x5B	; 91
    438e:	d1 40       	sbci	r29, 0x01	; 1
							if (mon_desplazamiento != NULL) {sumasigna (mon_desplazamiento, wk.mv.vector);}   // monitor de desplazamiento
						}
					} else {
						// rotación
						for (byte pata=0; pata<6; pata++) {
							if ((wk.rt.apoyadas>>pata)&1) {
    4390:	93 01       	movw	r18, r6
    4392:	2f 57       	subi	r18, 0x7F	; 127
    4394:	3e 4f       	sbci	r19, 0xFE	; 254
    4396:	cb 59       	subi	r28, 0x9B	; 155
    4398:	de 4f       	sbci	r29, 0xFE	; 254
    439a:	39 83       	std	Y+1, r19	; 0x01
    439c:	28 83       	st	Y, r18
    439e:	c5 56       	subi	r28, 0x65	; 101
    43a0:	d1 40       	sbci	r29, 0x01	; 1
								COORD2D O = getOffset (pata); // no usamos rel2abs/abs2rel por razones de eficiencia
								COORD2D C = resta (suma (applyMatrix (resta (suma (xyz2xz(pos_des[pata]), O), wk.mv.vector), wk.rt.rotor1), wk.mv.vector), O);
    43a2:	69 ea       	ldi	r22, 0xA9	; 169
    43a4:	46 2e       	mov	r4, r22
    43a6:	51 2c       	mov	r5, r1
    43a8:	46 0c       	add	r4, r6
    43aa:	57 1c       	adc	r5, r7
		//					eventos.add ((MOVDATA) {1<<pata, (COORD3D) {C.x, pos_des[pata].y, C.z}, sh.mv.escala, true}, 0);
								eventos.add ((MOVDATA) {1<<pata, h_correct(C, pata), sh.mv.escala, true}, 0);
    43ac:	a3 01       	movw	r20, r6
    43ae:	40 52       	subi	r20, 0x20	; 32
    43b0:	5e 4f       	sbci	r21, 0xFE	; 254
    43b2:	c9 59       	subi	r28, 0x99	; 153
    43b4:	de 4f       	sbci	r29, 0xFE	; 254
    43b6:	59 83       	std	Y+1, r21	; 0x01
    43b8:	48 83       	st	Y, r20
    43ba:	c7 56       	subi	r28, 0x67	; 103
    43bc:	d1 40       	sbci	r29, 0x01	; 1
    43be:	51 e4       	ldi	r21, 0x41	; 65
    43c0:	25 2e       	mov	r2, r21
    43c2:	51 e0       	ldi	r21, 0x01	; 1
    43c4:	35 2e       	mov	r3, r21
    43c6:	2c 0e       	add	r2, r28
    43c8:	3d 1e       	adc	r3, r29
    43ca:	b1 01       	movw	r22, r2
    43cc:	6f 5f       	subi	r22, 0xFF	; 255
    43ce:	7f 4f       	sbci	r23, 0xFF	; 255
    43d0:	c7 59       	subi	r28, 0x97	; 151
    43d2:	de 4f       	sbci	r29, 0xFE	; 254
    43d4:	79 83       	std	Y+1, r23	; 0x01
    43d6:	68 83       	st	Y, r22
    43d8:	c9 56       	subi	r28, 0x69	; 105
    43da:	d1 40       	sbci	r29, 0x01	; 1
					} else {
						// rotación
						for (byte pata=0; pata<6; pata++) {
							if ((wk.rt.apoyadas>>pata)&1) {
								COORD2D O = getOffset (pata); // no usamos rel2abs/abs2rel por razones de eficiencia
								COORD2D C = resta (suma (applyMatrix (resta (suma (xyz2xz(pos_des[pata]), O), wk.mv.vector), wk.rt.rotor1), wk.mv.vector), O);
    43dc:	c5 5a       	subi	r28, 0xA5	; 165
    43de:	de 4f       	sbci	r29, 0xFE	; 254
    43e0:	98 80       	ld	r9, Y
    43e2:	cb 55       	subi	r28, 0x5B	; 91
    43e4:	d1 40       	sbci	r29, 0x01	; 1
							if (mon_desplazamiento != NULL) {sumasigna (mon_desplazamiento, wk.mv.vector);}   // monitor de desplazamiento
						}
					} else {
						// rotación
						for (byte pata=0; pata<6; pata++) {
							if ((wk.rt.apoyadas>>pata)&1) {
    43e6:	cb 59       	subi	r28, 0x9B	; 155
    43e8:	de 4f       	sbci	r29, 0xFE	; 254
    43ea:	a8 81       	ld	r26, Y
    43ec:	b9 81       	ldd	r27, Y+1	; 0x01
    43ee:	c5 56       	subi	r28, 0x65	; 101
    43f0:	d1 40       	sbci	r29, 0x01	; 1
    43f2:	8c 91       	ld	r24, X
    43f4:	90 e0       	ldi	r25, 0x00	; 0
    43f6:	09 2c       	mov	r0, r9
    43f8:	02 c0       	rjmp	.+4      	; 0x43fe <_ZN10Movimiento6updateEm+0x15aa>
    43fa:	95 95       	asr	r25
    43fc:	87 95       	ror	r24
    43fe:	0a 94       	dec	r0
    4400:	e2 f7       	brpl	.-8      	; 0x43fa <_ZN10Movimiento6updateEm+0x15a6>
    4402:	80 ff       	sbrs	r24, 0
    4404:	30 c3       	rjmp	.+1632   	; 0x4a66 <_ZN10Movimiento6updateEm+0x1c12>
								COORD2D O = getOffset (pata); // no usamos rel2abs/abs2rel por razones de eficiencia
    4406:	89 2d       	mov	r24, r9
    4408:	0e 94 e3 40 	call	0x81c6	; 0x81c6 <_Z9getOffseth>
    440c:	cf 5a       	subi	r28, 0xAF	; 175
    440e:	de 4f       	sbci	r29, 0xFE	; 254
    4410:	28 83       	st	Y, r18
    4412:	c1 55       	subi	r28, 0x51	; 81
    4414:	d1 40       	sbci	r29, 0x01	; 1
    4416:	ce 5a       	subi	r28, 0xAE	; 174
    4418:	de 4f       	sbci	r29, 0xFE	; 254
    441a:	38 83       	st	Y, r19
    441c:	c2 55       	subi	r28, 0x52	; 82
    441e:	d1 40       	sbci	r29, 0x01	; 1
    4420:	cd 5a       	subi	r28, 0xAD	; 173
    4422:	de 4f       	sbci	r29, 0xFE	; 254
    4424:	48 83       	st	Y, r20
    4426:	c3 55       	subi	r28, 0x53	; 83
    4428:	d1 40       	sbci	r29, 0x01	; 1
    442a:	cc 5a       	subi	r28, 0xAC	; 172
    442c:	de 4f       	sbci	r29, 0xFE	; 254
    442e:	58 83       	st	Y, r21
    4430:	c4 55       	subi	r28, 0x54	; 84
    4432:	d1 40       	sbci	r29, 0x01	; 1
    4434:	cb 5a       	subi	r28, 0xAB	; 171
    4436:	de 4f       	sbci	r29, 0xFE	; 254
    4438:	68 83       	st	Y, r22
    443a:	c5 55       	subi	r28, 0x55	; 85
    443c:	d1 40       	sbci	r29, 0x01	; 1
    443e:	ca 5a       	subi	r28, 0xAA	; 170
    4440:	de 4f       	sbci	r29, 0xFE	; 254
    4442:	78 83       	st	Y, r23
    4444:	c6 55       	subi	r28, 0x56	; 86
    4446:	d1 40       	sbci	r29, 0x01	; 1
    4448:	c9 5a       	subi	r28, 0xA9	; 169
    444a:	de 4f       	sbci	r29, 0xFE	; 254
    444c:	88 83       	st	Y, r24
    444e:	c7 55       	subi	r28, 0x57	; 87
    4450:	d1 40       	sbci	r29, 0x01	; 1
    4452:	c8 5a       	subi	r28, 0xA8	; 168
    4454:	de 4f       	sbci	r29, 0xFE	; 254
    4456:	98 83       	st	Y, r25
    4458:	c8 55       	subi	r28, 0x58	; 88
    445a:	d1 40       	sbci	r29, 0x01	; 1
    445c:	de 01       	movw	r26, r28
    445e:	a7 59       	subi	r26, 0x97	; 151
    4460:	bf 4f       	sbci	r27, 0xFF	; 255
    4462:	fe 01       	movw	r30, r28
    4464:	ef 5a       	subi	r30, 0xAF	; 175
    4466:	fe 4f       	sbci	r31, 0xFE	; 254
    4468:	88 e0       	ldi	r24, 0x08	; 8
    446a:	01 90       	ld	r0, Z+
    446c:	0d 92       	st	X+, r0
    446e:	81 50       	subi	r24, 0x01	; 1
    4470:	e1 f7       	brne	.-8      	; 0x446a <_ZN10Movimiento6updateEm+0x1616>
								COORD2D C = resta (suma (applyMatrix (resta (suma (xyz2xz(pos_des[pata]), O), wk.mv.vector), wk.rt.rotor1), wk.mv.vector), O);
    4472:	c5 5a       	subi	r28, 0xA5	; 165
    4474:	de 4f       	sbci	r29, 0xFE	; 254
    4476:	e8 81       	ld	r30, Y
    4478:	f9 81       	ldd	r31, Y+1	; 0x01
    447a:	cb 55       	subi	r28, 0x5B	; 91
    447c:	d1 40       	sbci	r29, 0x01	; 1
    447e:	ee 0f       	add	r30, r30
    4480:	ff 1f       	adc	r31, r31
    4482:	c5 5a       	subi	r28, 0xA5	; 165
    4484:	de 4f       	sbci	r29, 0xFE	; 254
    4486:	28 81       	ld	r18, Y
    4488:	39 81       	ldd	r19, Y+1	; 0x01
    448a:	cb 55       	subi	r28, 0x5B	; 91
    448c:	d1 40       	sbci	r29, 0x01	; 1
    448e:	e2 0f       	add	r30, r18
    4490:	f3 1f       	adc	r31, r19
    4492:	ee 0f       	add	r30, r30
    4494:	ff 1f       	adc	r31, r31
    4496:	ee 0f       	add	r30, r30
    4498:	ff 1f       	adc	r31, r31
    449a:	ec 5a       	subi	r30, 0xAC	; 172
    449c:	fd 4e       	sbci	r31, 0xED	; 237
    449e:	e0 80       	ld	r14, Z
    44a0:	f1 80       	ldd	r15, Z+1	; 0x01
    44a2:	02 81       	ldd	r16, Z+2	; 0x02
    44a4:	13 81       	ldd	r17, Z+3	; 0x03
    44a6:	24 81       	ldd	r18, Z+4	; 0x04
    44a8:	35 81       	ldd	r19, Z+5	; 0x05
    44aa:	46 81       	ldd	r20, Z+6	; 0x06
    44ac:	57 81       	ldd	r21, Z+7	; 0x07
    44ae:	60 85       	ldd	r22, Z+8	; 0x08
    44b0:	71 85       	ldd	r23, Z+9	; 0x09
    44b2:	82 85       	ldd	r24, Z+10	; 0x0a
    44b4:	93 85       	ldd	r25, Z+11	; 0x0b
    44b6:	0e 94 ec 3c 	call	0x79d8	; 0x79d8 <_Z6xyz2xz7COORD3D>
    44ba:	cf 5a       	subi	r28, 0xAF	; 175
    44bc:	de 4f       	sbci	r29, 0xFE	; 254
    44be:	28 83       	st	Y, r18
    44c0:	c1 55       	subi	r28, 0x51	; 81
    44c2:	d1 40       	sbci	r29, 0x01	; 1
    44c4:	ce 5a       	subi	r28, 0xAE	; 174
    44c6:	de 4f       	sbci	r29, 0xFE	; 254
    44c8:	38 83       	st	Y, r19
    44ca:	c2 55       	subi	r28, 0x52	; 82
    44cc:	d1 40       	sbci	r29, 0x01	; 1
    44ce:	cd 5a       	subi	r28, 0xAD	; 173
    44d0:	de 4f       	sbci	r29, 0xFE	; 254
    44d2:	48 83       	st	Y, r20
    44d4:	c3 55       	subi	r28, 0x53	; 83
    44d6:	d1 40       	sbci	r29, 0x01	; 1
    44d8:	cc 5a       	subi	r28, 0xAC	; 172
    44da:	de 4f       	sbci	r29, 0xFE	; 254
    44dc:	58 83       	st	Y, r21
    44de:	c4 55       	subi	r28, 0x54	; 84
    44e0:	d1 40       	sbci	r29, 0x01	; 1
    44e2:	cb 5a       	subi	r28, 0xAB	; 171
    44e4:	de 4f       	sbci	r29, 0xFE	; 254
    44e6:	68 83       	st	Y, r22
    44e8:	c5 55       	subi	r28, 0x55	; 85
    44ea:	d1 40       	sbci	r29, 0x01	; 1
    44ec:	ca 5a       	subi	r28, 0xAA	; 170
    44ee:	de 4f       	sbci	r29, 0xFE	; 254
    44f0:	78 83       	st	Y, r23
    44f2:	c6 55       	subi	r28, 0x56	; 86
    44f4:	d1 40       	sbci	r29, 0x01	; 1
    44f6:	c9 5a       	subi	r28, 0xA9	; 169
    44f8:	de 4f       	sbci	r29, 0xFE	; 254
    44fa:	88 83       	st	Y, r24
    44fc:	c7 55       	subi	r28, 0x57	; 87
    44fe:	d1 40       	sbci	r29, 0x01	; 1
    4500:	c8 5a       	subi	r28, 0xA8	; 168
    4502:	de 4f       	sbci	r29, 0xFE	; 254
    4504:	98 83       	st	Y, r25
    4506:	c8 55       	subi	r28, 0x58	; 88
    4508:	d1 40       	sbci	r29, 0x01	; 1
    450a:	de 01       	movw	r26, r28
    450c:	a7 58       	subi	r26, 0x87	; 135
    450e:	bf 4f       	sbci	r27, 0xFF	; 255
    4510:	fe 01       	movw	r30, r28
    4512:	ef 5a       	subi	r30, 0xAF	; 175
    4514:	fe 4f       	sbci	r31, 0xFE	; 254
    4516:	88 e0       	ldi	r24, 0x08	; 8
    4518:	01 90       	ld	r0, Z+
    451a:	0d 92       	st	X+, r0
    451c:	81 50       	subi	r24, 0x01	; 1
    451e:	e1 f7       	brne	.-8      	; 0x4518 <_ZN10Movimiento6updateEm+0x16c4>
    4520:	ea 96       	adiw	r28, 0x3a	; 58
    4522:	2f ad       	ldd	r18, Y+63	; 0x3f
    4524:	ea 97       	sbiw	r28, 0x3a	; 58
    4526:	eb 96       	adiw	r28, 0x3b	; 59
    4528:	3f ad       	ldd	r19, Y+63	; 0x3f
    452a:	eb 97       	sbiw	r28, 0x3b	; 59
    452c:	ec 96       	adiw	r28, 0x3c	; 60
    452e:	4f ad       	ldd	r20, Y+63	; 0x3f
    4530:	ec 97       	sbiw	r28, 0x3c	; 60
    4532:	ed 96       	adiw	r28, 0x3d	; 61
    4534:	5f ad       	ldd	r21, Y+63	; 0x3f
    4536:	ed 97       	sbiw	r28, 0x3d	; 61
    4538:	ee 96       	adiw	r28, 0x3e	; 62
    453a:	6f ad       	ldd	r22, Y+63	; 0x3f
    453c:	ee 97       	sbiw	r28, 0x3e	; 62
    453e:	ef 96       	adiw	r28, 0x3f	; 63
    4540:	7f ad       	ldd	r23, Y+63	; 0x3f
    4542:	ef 97       	sbiw	r28, 0x3f	; 63
    4544:	c1 58       	subi	r28, 0x81	; 129
    4546:	df 4f       	sbci	r29, 0xFF	; 255
    4548:	88 81       	ld	r24, Y
    454a:	cf 57       	subi	r28, 0x7F	; 127
    454c:	d0 40       	sbci	r29, 0x00	; 0
    454e:	c0 58       	subi	r28, 0x80	; 128
    4550:	df 4f       	sbci	r29, 0xFF	; 255
    4552:	98 81       	ld	r25, Y
    4554:	c0 58       	subi	r28, 0x80	; 128
    4556:	d0 40       	sbci	r29, 0x00	; 0
    4558:	aa 96       	adiw	r28, 0x2a	; 42
    455a:	af ac       	ldd	r10, Y+63	; 0x3f
    455c:	aa 97       	sbiw	r28, 0x2a	; 42
    455e:	ab 96       	adiw	r28, 0x2b	; 43
    4560:	bf ac       	ldd	r11, Y+63	; 0x3f
    4562:	ab 97       	sbiw	r28, 0x2b	; 43
    4564:	ac 96       	adiw	r28, 0x2c	; 44
    4566:	cf ac       	ldd	r12, Y+63	; 0x3f
    4568:	ac 97       	sbiw	r28, 0x2c	; 44
    456a:	ad 96       	adiw	r28, 0x2d	; 45
    456c:	df ac       	ldd	r13, Y+63	; 0x3f
    456e:	ad 97       	sbiw	r28, 0x2d	; 45
    4570:	ae 96       	adiw	r28, 0x2e	; 46
    4572:	ef ac       	ldd	r14, Y+63	; 0x3f
    4574:	ae 97       	sbiw	r28, 0x2e	; 46
    4576:	af 96       	adiw	r28, 0x2f	; 47
    4578:	ff ac       	ldd	r15, Y+63	; 0x3f
    457a:	af 97       	sbiw	r28, 0x2f	; 47
    457c:	e0 96       	adiw	r28, 0x30	; 48
    457e:	0f ad       	ldd	r16, Y+63	; 0x3f
    4580:	e0 97       	sbiw	r28, 0x30	; 48
    4582:	e1 96       	adiw	r28, 0x31	; 49
    4584:	1f ad       	ldd	r17, Y+63	; 0x3f
    4586:	e1 97       	sbiw	r28, 0x31	; 49
    4588:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <_Z4suma7COORD2DS_>
    458c:	cf 5a       	subi	r28, 0xAF	; 175
    458e:	de 4f       	sbci	r29, 0xFE	; 254
    4590:	28 83       	st	Y, r18
    4592:	c1 55       	subi	r28, 0x51	; 81
    4594:	d1 40       	sbci	r29, 0x01	; 1
    4596:	ce 5a       	subi	r28, 0xAE	; 174
    4598:	de 4f       	sbci	r29, 0xFE	; 254
    459a:	38 83       	st	Y, r19
    459c:	c2 55       	subi	r28, 0x52	; 82
    459e:	d1 40       	sbci	r29, 0x01	; 1
    45a0:	cd 5a       	subi	r28, 0xAD	; 173
    45a2:	de 4f       	sbci	r29, 0xFE	; 254
    45a4:	48 83       	st	Y, r20
    45a6:	c3 55       	subi	r28, 0x53	; 83
    45a8:	d1 40       	sbci	r29, 0x01	; 1
    45aa:	cc 5a       	subi	r28, 0xAC	; 172
    45ac:	de 4f       	sbci	r29, 0xFE	; 254
    45ae:	58 83       	st	Y, r21
    45b0:	c4 55       	subi	r28, 0x54	; 84
    45b2:	d1 40       	sbci	r29, 0x01	; 1
    45b4:	cb 5a       	subi	r28, 0xAB	; 171
    45b6:	de 4f       	sbci	r29, 0xFE	; 254
    45b8:	68 83       	st	Y, r22
    45ba:	c5 55       	subi	r28, 0x55	; 85
    45bc:	d1 40       	sbci	r29, 0x01	; 1
    45be:	ca 5a       	subi	r28, 0xAA	; 170
    45c0:	de 4f       	sbci	r29, 0xFE	; 254
    45c2:	78 83       	st	Y, r23
    45c4:	c6 55       	subi	r28, 0x56	; 86
    45c6:	d1 40       	sbci	r29, 0x01	; 1
    45c8:	c9 5a       	subi	r28, 0xA9	; 169
    45ca:	de 4f       	sbci	r29, 0xFE	; 254
    45cc:	88 83       	st	Y, r24
    45ce:	c7 55       	subi	r28, 0x57	; 87
    45d0:	d1 40       	sbci	r29, 0x01	; 1
    45d2:	c8 5a       	subi	r28, 0xA8	; 168
    45d4:	de 4f       	sbci	r29, 0xFE	; 254
    45d6:	98 83       	st	Y, r25
    45d8:	c8 55       	subi	r28, 0x58	; 88
    45da:	d1 40       	sbci	r29, 0x01	; 1
    45dc:	de 01       	movw	r26, r28
    45de:	af 57       	subi	r26, 0x7F	; 127
    45e0:	bf 4f       	sbci	r27, 0xFF	; 255
    45e2:	fe 01       	movw	r30, r28
    45e4:	ef 5a       	subi	r30, 0xAF	; 175
    45e6:	fe 4f       	sbci	r31, 0xFE	; 254
    45e8:	88 e0       	ldi	r24, 0x08	; 8
    45ea:	01 90       	ld	r0, Z+
    45ec:	0d 92       	st	X+, r0
    45ee:	81 50       	subi	r24, 0x01	; 1
    45f0:	e1 f7       	brne	.-8      	; 0x45ea <_ZN10Movimiento6updateEm+0x1796>
    45f2:	cf 57       	subi	r28, 0x7F	; 127
    45f4:	df 4f       	sbci	r29, 0xFF	; 255
    45f6:	28 81       	ld	r18, Y
    45f8:	c1 58       	subi	r28, 0x81	; 129
    45fa:	d0 40       	sbci	r29, 0x00	; 0
    45fc:	ce 57       	subi	r28, 0x7E	; 126
    45fe:	df 4f       	sbci	r29, 0xFF	; 255
    4600:	38 81       	ld	r19, Y
    4602:	c2 58       	subi	r28, 0x82	; 130
    4604:	d0 40       	sbci	r29, 0x00	; 0
    4606:	cd 57       	subi	r28, 0x7D	; 125
    4608:	df 4f       	sbci	r29, 0xFF	; 255
    460a:	48 81       	ld	r20, Y
    460c:	c3 58       	subi	r28, 0x83	; 131
    460e:	d0 40       	sbci	r29, 0x00	; 0
    4610:	cc 57       	subi	r28, 0x7C	; 124
    4612:	df 4f       	sbci	r29, 0xFF	; 255
    4614:	58 81       	ld	r21, Y
    4616:	c4 58       	subi	r28, 0x84	; 132
    4618:	d0 40       	sbci	r29, 0x00	; 0
    461a:	cb 57       	subi	r28, 0x7B	; 123
    461c:	df 4f       	sbci	r29, 0xFF	; 255
    461e:	68 81       	ld	r22, Y
    4620:	c5 58       	subi	r28, 0x85	; 133
    4622:	d0 40       	sbci	r29, 0x00	; 0
    4624:	ca 57       	subi	r28, 0x7A	; 122
    4626:	df 4f       	sbci	r29, 0xFF	; 255
    4628:	78 81       	ld	r23, Y
    462a:	c6 58       	subi	r28, 0x86	; 134
    462c:	d0 40       	sbci	r29, 0x00	; 0
    462e:	c9 57       	subi	r28, 0x79	; 121
    4630:	df 4f       	sbci	r29, 0xFF	; 255
    4632:	88 81       	ld	r24, Y
    4634:	c7 58       	subi	r28, 0x87	; 135
    4636:	d0 40       	sbci	r29, 0x00	; 0
    4638:	c8 57       	subi	r28, 0x78	; 120
    463a:	df 4f       	sbci	r29, 0xFF	; 255
    463c:	98 81       	ld	r25, Y
    463e:	c8 58       	subi	r28, 0x88	; 136
    4640:	d0 40       	sbci	r29, 0x00	; 0
    4642:	d2 01       	movw	r26, r4
    4644:	ac 90       	ld	r10, X
    4646:	11 96       	adiw	r26, 0x01	; 1
    4648:	bc 90       	ld	r11, X
    464a:	11 97       	sbiw	r26, 0x01	; 1
    464c:	12 96       	adiw	r26, 0x02	; 2
    464e:	cc 90       	ld	r12, X
    4650:	12 97       	sbiw	r26, 0x02	; 2
    4652:	13 96       	adiw	r26, 0x03	; 3
    4654:	dc 90       	ld	r13, X
    4656:	13 97       	sbiw	r26, 0x03	; 3
    4658:	14 96       	adiw	r26, 0x04	; 4
    465a:	ec 90       	ld	r14, X
    465c:	14 97       	sbiw	r26, 0x04	; 4
    465e:	15 96       	adiw	r26, 0x05	; 5
    4660:	fc 90       	ld	r15, X
    4662:	15 97       	sbiw	r26, 0x05	; 5
    4664:	16 96       	adiw	r26, 0x06	; 6
    4666:	0c 91       	ld	r16, X
    4668:	16 97       	sbiw	r26, 0x06	; 6
    466a:	17 96       	adiw	r26, 0x07	; 7
    466c:	1c 91       	ld	r17, X
    466e:	0e 94 9b 3b 	call	0x7736	; 0x7736 <_Z5resta7COORD2DS_>
    4672:	cf 5a       	subi	r28, 0xAF	; 175
    4674:	de 4f       	sbci	r29, 0xFE	; 254
    4676:	28 83       	st	Y, r18
    4678:	c1 55       	subi	r28, 0x51	; 81
    467a:	d1 40       	sbci	r29, 0x01	; 1
    467c:	ce 5a       	subi	r28, 0xAE	; 174
    467e:	de 4f       	sbci	r29, 0xFE	; 254
    4680:	38 83       	st	Y, r19
    4682:	c2 55       	subi	r28, 0x52	; 82
    4684:	d1 40       	sbci	r29, 0x01	; 1
    4686:	cd 5a       	subi	r28, 0xAD	; 173
    4688:	de 4f       	sbci	r29, 0xFE	; 254
    468a:	48 83       	st	Y, r20
    468c:	c3 55       	subi	r28, 0x53	; 83
    468e:	d1 40       	sbci	r29, 0x01	; 1
    4690:	cc 5a       	subi	r28, 0xAC	; 172
    4692:	de 4f       	sbci	r29, 0xFE	; 254
    4694:	58 83       	st	Y, r21
    4696:	c4 55       	subi	r28, 0x54	; 84
    4698:	d1 40       	sbci	r29, 0x01	; 1
    469a:	cb 5a       	subi	r28, 0xAB	; 171
    469c:	de 4f       	sbci	r29, 0xFE	; 254
    469e:	68 83       	st	Y, r22
    46a0:	c5 55       	subi	r28, 0x55	; 85
    46a2:	d1 40       	sbci	r29, 0x01	; 1
    46a4:	ca 5a       	subi	r28, 0xAA	; 170
    46a6:	de 4f       	sbci	r29, 0xFE	; 254
    46a8:	78 83       	st	Y, r23
    46aa:	c6 55       	subi	r28, 0x56	; 86
    46ac:	d1 40       	sbci	r29, 0x01	; 1
    46ae:	c9 5a       	subi	r28, 0xA9	; 169
    46b0:	de 4f       	sbci	r29, 0xFE	; 254
    46b2:	88 83       	st	Y, r24
    46b4:	c7 55       	subi	r28, 0x57	; 87
    46b6:	d1 40       	sbci	r29, 0x01	; 1
    46b8:	c8 5a       	subi	r28, 0xA8	; 168
    46ba:	de 4f       	sbci	r29, 0xFE	; 254
    46bc:	98 83       	st	Y, r25
    46be:	c8 55       	subi	r28, 0x58	; 88
    46c0:	d1 40       	sbci	r29, 0x01	; 1
    46c2:	de 01       	movw	r26, r28
    46c4:	a7 57       	subi	r26, 0x77	; 119
    46c6:	bf 4f       	sbci	r27, 0xFF	; 255
    46c8:	fe 01       	movw	r30, r28
    46ca:	ef 5a       	subi	r30, 0xAF	; 175
    46cc:	fe 4f       	sbci	r31, 0xFE	; 254
    46ce:	88 e0       	ldi	r24, 0x08	; 8
    46d0:	01 90       	ld	r0, Z+
    46d2:	0d 92       	st	X+, r0
    46d4:	81 50       	subi	r24, 0x01	; 1
    46d6:	e1 f7       	brne	.-8      	; 0x46d0 <_ZN10Movimiento6updateEm+0x187c>
    46d8:	c7 57       	subi	r28, 0x77	; 119
    46da:	df 4f       	sbci	r29, 0xFF	; 255
    46dc:	28 81       	ld	r18, Y
    46de:	c9 58       	subi	r28, 0x89	; 137
    46e0:	d0 40       	sbci	r29, 0x00	; 0
    46e2:	c6 57       	subi	r28, 0x76	; 118
    46e4:	df 4f       	sbci	r29, 0xFF	; 255
    46e6:	38 81       	ld	r19, Y
    46e8:	ca 58       	subi	r28, 0x8A	; 138
    46ea:	d0 40       	sbci	r29, 0x00	; 0
    46ec:	c5 57       	subi	r28, 0x75	; 117
    46ee:	df 4f       	sbci	r29, 0xFF	; 255
    46f0:	48 81       	ld	r20, Y
    46f2:	cb 58       	subi	r28, 0x8B	; 139
    46f4:	d0 40       	sbci	r29, 0x00	; 0
    46f6:	c4 57       	subi	r28, 0x74	; 116
    46f8:	df 4f       	sbci	r29, 0xFF	; 255
    46fa:	58 81       	ld	r21, Y
    46fc:	cc 58       	subi	r28, 0x8C	; 140
    46fe:	d0 40       	sbci	r29, 0x00	; 0
    4700:	c3 57       	subi	r28, 0x73	; 115
    4702:	df 4f       	sbci	r29, 0xFF	; 255
    4704:	68 81       	ld	r22, Y
    4706:	cd 58       	subi	r28, 0x8D	; 141
    4708:	d0 40       	sbci	r29, 0x00	; 0
    470a:	c2 57       	subi	r28, 0x72	; 114
    470c:	df 4f       	sbci	r29, 0xFF	; 255
    470e:	78 81       	ld	r23, Y
    4710:	ce 58       	subi	r28, 0x8E	; 142
    4712:	d0 40       	sbci	r29, 0x00	; 0
    4714:	c1 57       	subi	r28, 0x71	; 113
    4716:	df 4f       	sbci	r29, 0xFF	; 255
    4718:	88 81       	ld	r24, Y
    471a:	cf 58       	subi	r28, 0x8F	; 143
    471c:	d0 40       	sbci	r29, 0x00	; 0
    471e:	c0 57       	subi	r28, 0x70	; 112
    4720:	df 4f       	sbci	r29, 0xFF	; 255
    4722:	98 81       	ld	r25, Y
    4724:	c0 59       	subi	r28, 0x90	; 144
    4726:	d0 40       	sbci	r29, 0x00	; 0
    4728:	cf 59       	subi	r28, 0x9F	; 159
    472a:	de 4f       	sbci	r29, 0xFE	; 254
    472c:	08 81       	ld	r16, Y
    472e:	19 81       	ldd	r17, Y+1	; 0x01
    4730:	c1 56       	subi	r28, 0x61	; 97
    4732:	d1 40       	sbci	r29, 0x01	; 1
    4734:	0e 94 3b 3e 	call	0x7c76	; 0x7c76 <_Z11applyMatrix7COORD2DPS_>
    4738:	cf 5a       	subi	r28, 0xAF	; 175
    473a:	de 4f       	sbci	r29, 0xFE	; 254
    473c:	28 83       	st	Y, r18
    473e:	c1 55       	subi	r28, 0x51	; 81
    4740:	d1 40       	sbci	r29, 0x01	; 1
    4742:	ce 5a       	subi	r28, 0xAE	; 174
    4744:	de 4f       	sbci	r29, 0xFE	; 254
    4746:	38 83       	st	Y, r19
    4748:	c2 55       	subi	r28, 0x52	; 82
    474a:	d1 40       	sbci	r29, 0x01	; 1
    474c:	cd 5a       	subi	r28, 0xAD	; 173
    474e:	de 4f       	sbci	r29, 0xFE	; 254
    4750:	48 83       	st	Y, r20
    4752:	c3 55       	subi	r28, 0x53	; 83
    4754:	d1 40       	sbci	r29, 0x01	; 1
    4756:	cc 5a       	subi	r28, 0xAC	; 172
    4758:	de 4f       	sbci	r29, 0xFE	; 254
    475a:	58 83       	st	Y, r21
    475c:	c4 55       	subi	r28, 0x54	; 84
    475e:	d1 40       	sbci	r29, 0x01	; 1
    4760:	cb 5a       	subi	r28, 0xAB	; 171
    4762:	de 4f       	sbci	r29, 0xFE	; 254
    4764:	68 83       	st	Y, r22
    4766:	c5 55       	subi	r28, 0x55	; 85
    4768:	d1 40       	sbci	r29, 0x01	; 1
    476a:	ca 5a       	subi	r28, 0xAA	; 170
    476c:	de 4f       	sbci	r29, 0xFE	; 254
    476e:	78 83       	st	Y, r23
    4770:	c6 55       	subi	r28, 0x56	; 86
    4772:	d1 40       	sbci	r29, 0x01	; 1
    4774:	c9 5a       	subi	r28, 0xA9	; 169
    4776:	de 4f       	sbci	r29, 0xFE	; 254
    4778:	88 83       	st	Y, r24
    477a:	c7 55       	subi	r28, 0x57	; 87
    477c:	d1 40       	sbci	r29, 0x01	; 1
    477e:	c8 5a       	subi	r28, 0xA8	; 168
    4780:	de 4f       	sbci	r29, 0xFE	; 254
    4782:	98 83       	st	Y, r25
    4784:	c8 55       	subi	r28, 0x58	; 88
    4786:	d1 40       	sbci	r29, 0x01	; 1
    4788:	de 01       	movw	r26, r28
    478a:	af 56       	subi	r26, 0x6F	; 111
    478c:	bf 4f       	sbci	r27, 0xFF	; 255
    478e:	fe 01       	movw	r30, r28
    4790:	ef 5a       	subi	r30, 0xAF	; 175
    4792:	fe 4f       	sbci	r31, 0xFE	; 254
    4794:	88 e0       	ldi	r24, 0x08	; 8
    4796:	01 90       	ld	r0, Z+
    4798:	0d 92       	st	X+, r0
    479a:	81 50       	subi	r24, 0x01	; 1
    479c:	e1 f7       	brne	.-8      	; 0x4796 <_ZN10Movimiento6updateEm+0x1942>
    479e:	cf 56       	subi	r28, 0x6F	; 111
    47a0:	df 4f       	sbci	r29, 0xFF	; 255
    47a2:	28 81       	ld	r18, Y
    47a4:	c1 59       	subi	r28, 0x91	; 145
    47a6:	d0 40       	sbci	r29, 0x00	; 0
    47a8:	ce 56       	subi	r28, 0x6E	; 110
    47aa:	df 4f       	sbci	r29, 0xFF	; 255
    47ac:	38 81       	ld	r19, Y
    47ae:	c2 59       	subi	r28, 0x92	; 146
    47b0:	d0 40       	sbci	r29, 0x00	; 0
    47b2:	cd 56       	subi	r28, 0x6D	; 109
    47b4:	df 4f       	sbci	r29, 0xFF	; 255
    47b6:	48 81       	ld	r20, Y
    47b8:	c3 59       	subi	r28, 0x93	; 147
    47ba:	d0 40       	sbci	r29, 0x00	; 0
    47bc:	cc 56       	subi	r28, 0x6C	; 108
    47be:	df 4f       	sbci	r29, 0xFF	; 255
    47c0:	58 81       	ld	r21, Y
    47c2:	c4 59       	subi	r28, 0x94	; 148
    47c4:	d0 40       	sbci	r29, 0x00	; 0
    47c6:	cb 56       	subi	r28, 0x6B	; 107
    47c8:	df 4f       	sbci	r29, 0xFF	; 255
    47ca:	68 81       	ld	r22, Y
    47cc:	c5 59       	subi	r28, 0x95	; 149
    47ce:	d0 40       	sbci	r29, 0x00	; 0
    47d0:	ca 56       	subi	r28, 0x6A	; 106
    47d2:	df 4f       	sbci	r29, 0xFF	; 255
    47d4:	78 81       	ld	r23, Y
    47d6:	c6 59       	subi	r28, 0x96	; 150
    47d8:	d0 40       	sbci	r29, 0x00	; 0
    47da:	c9 56       	subi	r28, 0x69	; 105
    47dc:	df 4f       	sbci	r29, 0xFF	; 255
    47de:	88 81       	ld	r24, Y
    47e0:	c7 59       	subi	r28, 0x97	; 151
    47e2:	d0 40       	sbci	r29, 0x00	; 0
    47e4:	c8 56       	subi	r28, 0x68	; 104
    47e6:	df 4f       	sbci	r29, 0xFF	; 255
    47e8:	98 81       	ld	r25, Y
    47ea:	c8 59       	subi	r28, 0x98	; 152
    47ec:	d0 40       	sbci	r29, 0x00	; 0
    47ee:	f2 01       	movw	r30, r4
    47f0:	a0 80       	ld	r10, Z
    47f2:	b1 80       	ldd	r11, Z+1	; 0x01
    47f4:	c2 80       	ldd	r12, Z+2	; 0x02
    47f6:	d3 80       	ldd	r13, Z+3	; 0x03
    47f8:	e4 80       	ldd	r14, Z+4	; 0x04
    47fa:	f5 80       	ldd	r15, Z+5	; 0x05
    47fc:	06 81       	ldd	r16, Z+6	; 0x06
    47fe:	17 81       	ldd	r17, Z+7	; 0x07
    4800:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <_Z4suma7COORD2DS_>
    4804:	cf 5a       	subi	r28, 0xAF	; 175
    4806:	de 4f       	sbci	r29, 0xFE	; 254
    4808:	28 83       	st	Y, r18
    480a:	c1 55       	subi	r28, 0x51	; 81
    480c:	d1 40       	sbci	r29, 0x01	; 1
    480e:	ce 5a       	subi	r28, 0xAE	; 174
    4810:	de 4f       	sbci	r29, 0xFE	; 254
    4812:	38 83       	st	Y, r19
    4814:	c2 55       	subi	r28, 0x52	; 82
    4816:	d1 40       	sbci	r29, 0x01	; 1
    4818:	cd 5a       	subi	r28, 0xAD	; 173
    481a:	de 4f       	sbci	r29, 0xFE	; 254
    481c:	48 83       	st	Y, r20
    481e:	c3 55       	subi	r28, 0x53	; 83
    4820:	d1 40       	sbci	r29, 0x01	; 1
    4822:	cc 5a       	subi	r28, 0xAC	; 172
    4824:	de 4f       	sbci	r29, 0xFE	; 254
    4826:	58 83       	st	Y, r21
    4828:	c4 55       	subi	r28, 0x54	; 84
    482a:	d1 40       	sbci	r29, 0x01	; 1
    482c:	cb 5a       	subi	r28, 0xAB	; 171
    482e:	de 4f       	sbci	r29, 0xFE	; 254
    4830:	68 83       	st	Y, r22
    4832:	c5 55       	subi	r28, 0x55	; 85
    4834:	d1 40       	sbci	r29, 0x01	; 1
    4836:	ca 5a       	subi	r28, 0xAA	; 170
    4838:	de 4f       	sbci	r29, 0xFE	; 254
    483a:	78 83       	st	Y, r23
    483c:	c6 55       	subi	r28, 0x56	; 86
    483e:	d1 40       	sbci	r29, 0x01	; 1
    4840:	c9 5a       	subi	r28, 0xA9	; 169
    4842:	de 4f       	sbci	r29, 0xFE	; 254
    4844:	88 83       	st	Y, r24
    4846:	c7 55       	subi	r28, 0x57	; 87
    4848:	d1 40       	sbci	r29, 0x01	; 1
    484a:	c8 5a       	subi	r28, 0xA8	; 168
    484c:	de 4f       	sbci	r29, 0xFE	; 254
    484e:	98 83       	st	Y, r25
    4850:	c8 55       	subi	r28, 0x58	; 88
    4852:	d1 40       	sbci	r29, 0x01	; 1
    4854:	de 01       	movw	r26, r28
    4856:	a7 56       	subi	r26, 0x67	; 103
    4858:	bf 4f       	sbci	r27, 0xFF	; 255
    485a:	fe 01       	movw	r30, r28
    485c:	ef 5a       	subi	r30, 0xAF	; 175
    485e:	fe 4f       	sbci	r31, 0xFE	; 254
    4860:	88 e0       	ldi	r24, 0x08	; 8
    4862:	01 90       	ld	r0, Z+
    4864:	0d 92       	st	X+, r0
    4866:	81 50       	subi	r24, 0x01	; 1
    4868:	e1 f7       	brne	.-8      	; 0x4862 <_ZN10Movimiento6updateEm+0x1a0e>
    486a:	c7 56       	subi	r28, 0x67	; 103
    486c:	df 4f       	sbci	r29, 0xFF	; 255
    486e:	28 81       	ld	r18, Y
    4870:	c9 59       	subi	r28, 0x99	; 153
    4872:	d0 40       	sbci	r29, 0x00	; 0
    4874:	c6 56       	subi	r28, 0x66	; 102
    4876:	df 4f       	sbci	r29, 0xFF	; 255
    4878:	38 81       	ld	r19, Y
    487a:	ca 59       	subi	r28, 0x9A	; 154
    487c:	d0 40       	sbci	r29, 0x00	; 0
    487e:	c5 56       	subi	r28, 0x65	; 101
    4880:	df 4f       	sbci	r29, 0xFF	; 255
    4882:	48 81       	ld	r20, Y
    4884:	cb 59       	subi	r28, 0x9B	; 155
    4886:	d0 40       	sbci	r29, 0x00	; 0
    4888:	c4 56       	subi	r28, 0x64	; 100
    488a:	df 4f       	sbci	r29, 0xFF	; 255
    488c:	58 81       	ld	r21, Y
    488e:	cc 59       	subi	r28, 0x9C	; 156
    4890:	d0 40       	sbci	r29, 0x00	; 0
    4892:	c3 56       	subi	r28, 0x63	; 99
    4894:	df 4f       	sbci	r29, 0xFF	; 255
    4896:	68 81       	ld	r22, Y
    4898:	cd 59       	subi	r28, 0x9D	; 157
    489a:	d0 40       	sbci	r29, 0x00	; 0
    489c:	c2 56       	subi	r28, 0x62	; 98
    489e:	df 4f       	sbci	r29, 0xFF	; 255
    48a0:	78 81       	ld	r23, Y
    48a2:	ce 59       	subi	r28, 0x9E	; 158
    48a4:	d0 40       	sbci	r29, 0x00	; 0
    48a6:	c1 56       	subi	r28, 0x61	; 97
    48a8:	df 4f       	sbci	r29, 0xFF	; 255
    48aa:	88 81       	ld	r24, Y
    48ac:	cf 59       	subi	r28, 0x9F	; 159
    48ae:	d0 40       	sbci	r29, 0x00	; 0
    48b0:	c0 56       	subi	r28, 0x60	; 96
    48b2:	df 4f       	sbci	r29, 0xFF	; 255
    48b4:	98 81       	ld	r25, Y
    48b6:	c0 5a       	subi	r28, 0xA0	; 160
    48b8:	d0 40       	sbci	r29, 0x00	; 0
    48ba:	aa 96       	adiw	r28, 0x2a	; 42
    48bc:	af ac       	ldd	r10, Y+63	; 0x3f
    48be:	aa 97       	sbiw	r28, 0x2a	; 42
    48c0:	ab 96       	adiw	r28, 0x2b	; 43
    48c2:	bf ac       	ldd	r11, Y+63	; 0x3f
    48c4:	ab 97       	sbiw	r28, 0x2b	; 43
    48c6:	ac 96       	adiw	r28, 0x2c	; 44
    48c8:	cf ac       	ldd	r12, Y+63	; 0x3f
    48ca:	ac 97       	sbiw	r28, 0x2c	; 44
    48cc:	ad 96       	adiw	r28, 0x2d	; 45
    48ce:	df ac       	ldd	r13, Y+63	; 0x3f
    48d0:	ad 97       	sbiw	r28, 0x2d	; 45
    48d2:	ae 96       	adiw	r28, 0x2e	; 46
    48d4:	ef ac       	ldd	r14, Y+63	; 0x3f
    48d6:	ae 97       	sbiw	r28, 0x2e	; 46
    48d8:	af 96       	adiw	r28, 0x2f	; 47
    48da:	ff ac       	ldd	r15, Y+63	; 0x3f
    48dc:	af 97       	sbiw	r28, 0x2f	; 47
    48de:	e0 96       	adiw	r28, 0x30	; 48
    48e0:	0f ad       	ldd	r16, Y+63	; 0x3f
    48e2:	e0 97       	sbiw	r28, 0x30	; 48
    48e4:	e1 96       	adiw	r28, 0x31	; 49
    48e6:	1f ad       	ldd	r17, Y+63	; 0x3f
    48e8:	e1 97       	sbiw	r28, 0x31	; 49
    48ea:	0e 94 9b 3b 	call	0x7736	; 0x7736 <_Z5resta7COORD2DS_>
    48ee:	cf 5a       	subi	r28, 0xAF	; 175
    48f0:	de 4f       	sbci	r29, 0xFE	; 254
    48f2:	28 83       	st	Y, r18
    48f4:	c1 55       	subi	r28, 0x51	; 81
    48f6:	d1 40       	sbci	r29, 0x01	; 1
    48f8:	ce 5a       	subi	r28, 0xAE	; 174
    48fa:	de 4f       	sbci	r29, 0xFE	; 254
    48fc:	38 83       	st	Y, r19
    48fe:	c2 55       	subi	r28, 0x52	; 82
    4900:	d1 40       	sbci	r29, 0x01	; 1
    4902:	cd 5a       	subi	r28, 0xAD	; 173
    4904:	de 4f       	sbci	r29, 0xFE	; 254
    4906:	48 83       	st	Y, r20
    4908:	c3 55       	subi	r28, 0x53	; 83
    490a:	d1 40       	sbci	r29, 0x01	; 1
    490c:	cc 5a       	subi	r28, 0xAC	; 172
    490e:	de 4f       	sbci	r29, 0xFE	; 254
    4910:	58 83       	st	Y, r21
    4912:	c4 55       	subi	r28, 0x54	; 84
    4914:	d1 40       	sbci	r29, 0x01	; 1
    4916:	cb 5a       	subi	r28, 0xAB	; 171
    4918:	de 4f       	sbci	r29, 0xFE	; 254
    491a:	68 83       	st	Y, r22
    491c:	c5 55       	subi	r28, 0x55	; 85
    491e:	d1 40       	sbci	r29, 0x01	; 1
    4920:	ca 5a       	subi	r28, 0xAA	; 170
    4922:	de 4f       	sbci	r29, 0xFE	; 254
    4924:	78 83       	st	Y, r23
    4926:	c6 55       	subi	r28, 0x56	; 86
    4928:	d1 40       	sbci	r29, 0x01	; 1
    492a:	c9 5a       	subi	r28, 0xA9	; 169
    492c:	de 4f       	sbci	r29, 0xFE	; 254
    492e:	88 83       	st	Y, r24
    4930:	c7 55       	subi	r28, 0x57	; 87
    4932:	d1 40       	sbci	r29, 0x01	; 1
    4934:	c8 5a       	subi	r28, 0xA8	; 168
    4936:	de 4f       	sbci	r29, 0xFE	; 254
    4938:	98 83       	st	Y, r25
    493a:	c8 55       	subi	r28, 0x58	; 88
    493c:	d1 40       	sbci	r29, 0x01	; 1
    493e:	de 01       	movw	r26, r28
    4940:	af 58       	subi	r26, 0x8F	; 143
    4942:	bf 4f       	sbci	r27, 0xFF	; 255
    4944:	fe 01       	movw	r30, r28
    4946:	ef 5a       	subi	r30, 0xAF	; 175
    4948:	fe 4f       	sbci	r31, 0xFE	; 254
    494a:	88 e0       	ldi	r24, 0x08	; 8
    494c:	01 90       	ld	r0, Z+
    494e:	0d 92       	st	X+, r0
    4950:	81 50       	subi	r24, 0x01	; 1
    4952:	e1 f7       	brne	.-8      	; 0x494c <_ZN10Movimiento6updateEm+0x1af8>
		//					eventos.add ((MOVDATA) {1<<pata, (COORD3D) {C.x, pos_des[pata].y, C.z}, sh.mv.escala, true}, 0);
								eventos.add ((MOVDATA) {1<<pata, h_correct(C, pata), sh.mv.escala, true}, 0);
    4954:	ce 01       	movw	r24, r28
    4956:	8f 5f       	subi	r24, 0xFF	; 255
    4958:	9e 4f       	sbci	r25, 0xFE	; 254
    495a:	b3 01       	movw	r22, r6
    495c:	e2 96       	adiw	r28, 0x32	; 50
    495e:	ef ac       	ldd	r14, Y+63	; 0x3f
    4960:	e2 97       	sbiw	r28, 0x32	; 50
    4962:	e3 96       	adiw	r28, 0x33	; 51
    4964:	ff ac       	ldd	r15, Y+63	; 0x3f
    4966:	e3 97       	sbiw	r28, 0x33	; 51
    4968:	e4 96       	adiw	r28, 0x34	; 52
    496a:	0f ad       	ldd	r16, Y+63	; 0x3f
    496c:	e4 97       	sbiw	r28, 0x34	; 52
    496e:	e5 96       	adiw	r28, 0x35	; 53
    4970:	1f ad       	ldd	r17, Y+63	; 0x3f
    4972:	e5 97       	sbiw	r28, 0x35	; 53
    4974:	e6 96       	adiw	r28, 0x36	; 54
    4976:	2f ad       	ldd	r18, Y+63	; 0x3f
    4978:	e6 97       	sbiw	r28, 0x36	; 54
    497a:	e7 96       	adiw	r28, 0x37	; 55
    497c:	3f ad       	ldd	r19, Y+63	; 0x3f
    497e:	e7 97       	sbiw	r28, 0x37	; 55
    4980:	e8 96       	adiw	r28, 0x38	; 56
    4982:	4f ad       	ldd	r20, Y+63	; 0x3f
    4984:	e8 97       	sbiw	r28, 0x38	; 56
    4986:	e9 96       	adiw	r28, 0x39	; 57
    4988:	5f ad       	ldd	r21, Y+63	; 0x3f
    498a:	e9 97       	sbiw	r28, 0x39	; 57
    498c:	c9 2c       	mov	r12, r9
    498e:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <_ZN10Movimiento9h_correctE7COORD2Dh>
    4992:	c9 59       	subi	r28, 0x99	; 153
    4994:	de 4f       	sbci	r29, 0xFE	; 254
    4996:	a8 81       	ld	r26, Y
    4998:	b9 81       	ldd	r27, Y+1	; 0x01
    499a:	c7 56       	subi	r28, 0x67	; 103
    499c:	d1 40       	sbci	r29, 0x01	; 1
    499e:	2c 91       	ld	r18, X
    49a0:	f1 01       	movw	r30, r2
    49a2:	30 e1       	ldi	r19, 0x10	; 16
    49a4:	11 92       	st	Z+, r1
    49a6:	3a 95       	dec	r19
    49a8:	e9 f7       	brne	.-6      	; 0x49a4 <_ZN10Movimiento6updateEm+0x1b50>
    49aa:	c7 59       	subi	r28, 0x97	; 151
    49ac:	de 4f       	sbci	r29, 0xFE	; 254
    49ae:	a8 81       	ld	r26, Y
    49b0:	b9 81       	ldd	r27, Y+1	; 0x01
    49b2:	c9 56       	subi	r28, 0x69	; 105
    49b4:	d1 40       	sbci	r29, 0x01	; 1
    49b6:	fe 01       	movw	r30, r28
    49b8:	ef 5f       	subi	r30, 0xFF	; 255
    49ba:	fe 4f       	sbci	r31, 0xFE	; 254
    49bc:	8c e0       	ldi	r24, 0x0C	; 12
    49be:	01 90       	ld	r0, Z+
    49c0:	0d 92       	st	X+, r0
    49c2:	81 50       	subi	r24, 0x01	; 1
    49c4:	e1 f7       	brne	.-8      	; 0x49be <_ZN10Movimiento6updateEm+0x1b6a>
    49c6:	81 e0       	ldi	r24, 0x01	; 1
    49c8:	90 e0       	ldi	r25, 0x00	; 0
    49ca:	c5 5a       	subi	r28, 0xA5	; 165
    49cc:	de 4f       	sbci	r29, 0xFE	; 254
    49ce:	08 80       	ld	r0, Y
    49d0:	cb 55       	subi	r28, 0x5B	; 91
    49d2:	d1 40       	sbci	r29, 0x01	; 1
    49d4:	02 c0       	rjmp	.+4      	; 0x49da <_ZN10Movimiento6updateEm+0x1b86>
    49d6:	88 0f       	add	r24, r24
    49d8:	99 1f       	adc	r25, r25
    49da:	0a 94       	dec	r0
    49dc:	e2 f7       	brpl	.-8      	; 0x49d6 <_ZN10Movimiento6updateEm+0x1b82>
    49de:	d1 01       	movw	r26, r2
    49e0:	8c 93       	st	X, r24
    49e2:	1d 96       	adiw	r26, 0x0d	; 13
    49e4:	2c 93       	st	X, r18
    49e6:	1d 97       	sbiw	r26, 0x0d	; 13
    49e8:	1e 96       	adiw	r26, 0x0e	; 14
    49ea:	1c 92       	st	X, r1
    49ec:	1e 97       	sbiw	r26, 0x0e	; 14
    49ee:	81 e0       	ldi	r24, 0x01	; 1
    49f0:	1f 96       	adiw	r26, 0x0f	; 15
    49f2:	8c 93       	st	X, r24
    49f4:	1f 97       	sbiw	r26, 0x0f	; 15
    49f6:	00 d0       	rcall	.+0      	; 0x49f8 <_ZN10Movimiento6updateEm+0x1ba4>
    49f8:	ed b7       	in	r30, 0x3d	; 61
    49fa:	fe b7       	in	r31, 0x3e	; 62
    49fc:	12 82       	std	Z+2, r1	; 0x02
    49fe:	11 82       	std	Z+1, r1	; 0x01
    4a00:	8f ed       	ldi	r24, 0xDF	; 223
    4a02:	95 e0       	ldi	r25, 0x05	; 5
    4a04:	8c 90       	ld	r8, X
    4a06:	11 96       	adiw	r26, 0x01	; 1
    4a08:	9c 90       	ld	r9, X
    4a0a:	11 97       	sbiw	r26, 0x01	; 1
    4a0c:	12 96       	adiw	r26, 0x02	; 2
    4a0e:	ac 90       	ld	r10, X
    4a10:	12 97       	sbiw	r26, 0x02	; 2
    4a12:	13 96       	adiw	r26, 0x03	; 3
    4a14:	bc 90       	ld	r11, X
    4a16:	13 97       	sbiw	r26, 0x03	; 3
    4a18:	14 96       	adiw	r26, 0x04	; 4
    4a1a:	cc 90       	ld	r12, X
    4a1c:	14 97       	sbiw	r26, 0x04	; 4
    4a1e:	15 96       	adiw	r26, 0x05	; 5
    4a20:	dc 90       	ld	r13, X
    4a22:	15 97       	sbiw	r26, 0x05	; 5
    4a24:	16 96       	adiw	r26, 0x06	; 6
    4a26:	ec 90       	ld	r14, X
    4a28:	16 97       	sbiw	r26, 0x06	; 6
    4a2a:	17 96       	adiw	r26, 0x07	; 7
    4a2c:	fc 90       	ld	r15, X
    4a2e:	17 97       	sbiw	r26, 0x07	; 7
    4a30:	18 96       	adiw	r26, 0x08	; 8
    4a32:	0c 91       	ld	r16, X
    4a34:	18 97       	sbiw	r26, 0x08	; 8
    4a36:	19 96       	adiw	r26, 0x09	; 9
    4a38:	1c 91       	ld	r17, X
    4a3a:	19 97       	sbiw	r26, 0x09	; 9
    4a3c:	1a 96       	adiw	r26, 0x0a	; 10
    4a3e:	2c 91       	ld	r18, X
    4a40:	1a 97       	sbiw	r26, 0x0a	; 10
    4a42:	1b 96       	adiw	r26, 0x0b	; 11
    4a44:	3c 91       	ld	r19, X
    4a46:	1b 97       	sbiw	r26, 0x0b	; 11
    4a48:	1c 96       	adiw	r26, 0x0c	; 12
    4a4a:	4c 91       	ld	r20, X
    4a4c:	1c 97       	sbiw	r26, 0x0c	; 12
    4a4e:	1d 96       	adiw	r26, 0x0d	; 13
    4a50:	5c 91       	ld	r21, X
    4a52:	1d 97       	sbiw	r26, 0x0d	; 13
    4a54:	1e 96       	adiw	r26, 0x0e	; 14
    4a56:	6c 91       	ld	r22, X
    4a58:	1e 97       	sbiw	r26, 0x0e	; 14
    4a5a:	1f 96       	adiw	r26, 0x0f	; 15
    4a5c:	7c 91       	ld	r23, X
    4a5e:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZN6Events3addE7MOVDATAi>
    4a62:	0f 90       	pop	r0
    4a64:	0f 90       	pop	r0
    4a66:	c5 5a       	subi	r28, 0xA5	; 165
    4a68:	de 4f       	sbci	r29, 0xFE	; 254
    4a6a:	28 81       	ld	r18, Y
    4a6c:	39 81       	ldd	r19, Y+1	; 0x01
    4a6e:	cb 55       	subi	r28, 0x5B	; 91
    4a70:	d1 40       	sbci	r29, 0x01	; 1
    4a72:	2f 5f       	subi	r18, 0xFF	; 255
    4a74:	3f 4f       	sbci	r19, 0xFF	; 255
    4a76:	c5 5a       	subi	r28, 0xA5	; 165
    4a78:	de 4f       	sbci	r29, 0xFE	; 254
    4a7a:	39 83       	std	Y+1, r19	; 0x01
    4a7c:	28 83       	st	Y, r18
    4a7e:	cb 55       	subi	r28, 0x5B	; 91
    4a80:	d1 40       	sbci	r29, 0x01	; 1
						if (wk.rt.apoyadas) {
							if (mon_desplazamiento != NULL) {sumasigna (mon_desplazamiento, wk.mv.vector);}   // monitor de desplazamiento
						}
					} else {
						// rotación
						for (byte pata=0; pata<6; pata++) {
    4a82:	26 30       	cpi	r18, 0x06	; 6
    4a84:	31 05       	cpc	r19, r1
    4a86:	09 f0       	breq	.+2      	; 0x4a8a <_ZN10Movimiento6updateEm+0x1c36>
    4a88:	a9 cc       	rjmp	.-1710   	; 0x43dc <_ZN10Movimiento6updateEm+0x1588>
								COORD2D C = resta (suma (applyMatrix (resta (suma (xyz2xz(pos_des[pata]), O), wk.mv.vector), wk.rt.rotor1), wk.mv.vector), O);
		//					eventos.add ((MOVDATA) {1<<pata, (COORD3D) {C.x, pos_des[pata].y, C.z}, sh.mv.escala, true}, 0);
								eventos.add ((MOVDATA) {1<<pata, h_correct(C, pata), sh.mv.escala, true}, 0);
							}
						}
						if (mon_angulo != NULL && wk.rt.apoyadas) {*mon_angulo -= wk.mv.rotacion;}  // monitor del ángulo de rotación
    4a8a:	d3 01       	movw	r26, r6
    4a8c:	0d 91       	ld	r16, X+
    4a8e:	1c 91       	ld	r17, X
    4a90:	01 15       	cp	r16, r1
    4a92:	11 05       	cpc	r17, r1
    4a94:	09 f4       	brne	.+2      	; 0x4a98 <_ZN10Movimiento6updateEm+0x1c44>
    4a96:	a0 c1       	rjmp	.+832    	; 0x4dd8 <_ZN10Movimiento6updateEm+0x1f84>
    4a98:	e1 e8       	ldi	r30, 0x81	; 129
    4a9a:	f1 e0       	ldi	r31, 0x01	; 1
    4a9c:	6e 0e       	add	r6, r30
    4a9e:	7f 1e       	adc	r7, r31
    4aa0:	d3 01       	movw	r26, r6
    4aa2:	8c 91       	ld	r24, X
    4aa4:	ef e7       	ldi	r30, 0x7F	; 127
    4aa6:	fe ef       	ldi	r31, 0xFE	; 254
    4aa8:	6e 0e       	add	r6, r30
    4aaa:	7f 1e       	adc	r7, r31
    4aac:	88 23       	and	r24, r24
    4aae:	09 f4       	brne	.+2      	; 0x4ab2 <_ZN10Movimiento6updateEm+0x1c5e>
    4ab0:	93 c1       	rjmp	.+806    	; 0x4dd8 <_ZN10Movimiento6updateEm+0x1f84>
    4ab2:	f3 01       	movw	r30, r6
    4ab4:	ef 54       	subi	r30, 0x4F	; 79
    4ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab8:	d8 01       	movw	r26, r16
    4aba:	6d 91       	ld	r22, X+
    4abc:	7d 91       	ld	r23, X+
    4abe:	8d 91       	ld	r24, X+
    4ac0:	9c 91       	ld	r25, X
    4ac2:	20 81       	ld	r18, Z
    4ac4:	31 81       	ldd	r19, Z+1	; 0x01
    4ac6:	42 81       	ldd	r20, Z+2	; 0x02
    4ac8:	53 81       	ldd	r21, Z+3	; 0x03
    4aca:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    4ace:	f8 01       	movw	r30, r16
    4ad0:	60 83       	st	Z, r22
    4ad2:	71 83       	std	Z+1, r23	; 0x01
    4ad4:	82 83       	std	Z+2, r24	; 0x02
    4ad6:	93 83       	std	Z+3, r25	; 0x03
    4ad8:	7f c1       	rjmp	.+766    	; 0x4dd8 <_ZN10Movimiento6updateEm+0x1f84>
    4ada:	53 01       	movw	r10, r6
    4adc:	93 01       	movw	r18, r6
    4ade:	27 58       	subi	r18, 0x87	; 135
    4ae0:	3f 4f       	sbci	r19, 0xFF	; 255
    4ae2:	c7 5a       	subi	r28, 0xA7	; 167
    4ae4:	de 4f       	sbci	r29, 0xFE	; 254
    4ae6:	39 83       	std	Y+1, r19	; 0x01
    4ae8:	28 83       	st	Y, r18
    4aea:	c9 55       	subi	r28, 0x59	; 89
    4aec:	d1 40       	sbci	r29, 0x01	; 1
    4aee:	88 24       	eor	r8, r8
    4af0:	99 24       	eor	r9, r9
				}
				case TRONCO: {
					for (byte index=0; index<9; index++) {
						if (bd.oscilator[index].amp != 0) {
							if (!bd.oscilator[index].brown) {
								bd.param_tronco[index] = bd.oscilator[index].amp*sin (sh.cn.tick*angle_step*bd.oscilator[index].freq + bd.oscilator[index].phase);
    4af2:	c5 58       	subi	r28, 0x85	; 133
    4af4:	de 4f       	sbci	r29, 0xFE	; 254
    4af6:	b9 83       	std	Y+1, r27	; 0x01
    4af8:	a8 83       	st	Y, r26
    4afa:	cb 57       	subi	r28, 0x7B	; 123
    4afc:	d1 40       	sbci	r29, 0x01	; 1
					
					break;
				}
				case TRONCO: {
					for (byte index=0; index<9; index++) {
						if (bd.oscilator[index].amp != 0) {
    4afe:	d5 01       	movw	r26, r10
    4b00:	14 96       	adiw	r26, 0x04	; 4
    4b02:	2d 90       	ld	r2, X+
    4b04:	3d 90       	ld	r3, X+
    4b06:	4d 90       	ld	r4, X+
    4b08:	5c 90       	ld	r5, X
    4b0a:	17 97       	sbiw	r26, 0x07	; 7
    4b0c:	c2 01       	movw	r24, r4
    4b0e:	b1 01       	movw	r22, r2
    4b10:	20 e0       	ldi	r18, 0x00	; 0
    4b12:	30 e0       	ldi	r19, 0x00	; 0
    4b14:	40 e0       	ldi	r20, 0x00	; 0
    4b16:	50 e0       	ldi	r21, 0x00	; 0
    4b18:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    4b1c:	88 23       	and	r24, r24
    4b1e:	09 f4       	brne	.+2      	; 0x4b22 <_ZN10Movimiento6updateEm+0x1cce>
    4b20:	51 c0       	rjmp	.+162    	; 0x4bc4 <_ZN10Movimiento6updateEm+0x1d70>
							if (!bd.oscilator[index].brown) {
    4b22:	f5 01       	movw	r30, r10
    4b24:	80 89       	ldd	r24, Z+16	; 0x10
    4b26:	88 23       	and	r24, r24
    4b28:	a9 f5       	brne	.+106    	; 0x4b94 <_ZN10Movimiento6updateEm+0x1d40>
								bd.param_tronco[index] = bd.oscilator[index].amp*sin (sh.cn.tick*angle_step*bd.oscilator[index].freq + bd.oscilator[index].phase);
    4b2a:	c5 58       	subi	r28, 0x85	; 133
    4b2c:	de 4f       	sbci	r29, 0xFE	; 254
    4b2e:	a8 81       	ld	r26, Y
    4b30:	b9 81       	ldd	r27, Y+1	; 0x01
    4b32:	cb 57       	subi	r28, 0x7B	; 123
    4b34:	d1 40       	sbci	r29, 0x01	; 1
    4b36:	6d 91       	ld	r22, X+
    4b38:	7c 91       	ld	r23, X
    4b3a:	80 e0       	ldi	r24, 0x00	; 0
    4b3c:	90 e0       	ldi	r25, 0x00	; 0
    4b3e:	0e 94 61 7b 	call	0xf6c2	; 0xf6c2 <__floatunsisf>
    4b42:	22 e9       	ldi	r18, 0x92	; 146
    4b44:	3a e0       	ldi	r19, 0x0A	; 10
    4b46:	46 e8       	ldi	r20, 0x86	; 134
    4b48:	5e e3       	ldi	r21, 0x3E	; 62
    4b4a:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    4b4e:	f5 01       	movw	r30, r10
    4b50:	20 85       	ldd	r18, Z+8	; 0x08
    4b52:	31 85       	ldd	r19, Z+9	; 0x09
    4b54:	42 85       	ldd	r20, Z+10	; 0x0a
    4b56:	53 85       	ldd	r21, Z+11	; 0x0b
    4b58:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    4b5c:	d5 01       	movw	r26, r10
    4b5e:	1c 96       	adiw	r26, 0x0c	; 12
    4b60:	2d 91       	ld	r18, X+
    4b62:	3d 91       	ld	r19, X+
    4b64:	4d 91       	ld	r20, X+
    4b66:	5c 91       	ld	r21, X
    4b68:	1f 97       	sbiw	r26, 0x0f	; 15
    4b6a:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    4b6e:	0e 94 55 7e 	call	0xfcaa	; 0xfcaa <sin>
    4b72:	9b 01       	movw	r18, r22
    4b74:	ac 01       	movw	r20, r24
    4b76:	c2 01       	movw	r24, r4
    4b78:	b1 01       	movw	r22, r2
    4b7a:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    4b7e:	c7 5a       	subi	r28, 0xA7	; 167
    4b80:	de 4f       	sbci	r29, 0xFE	; 254
    4b82:	e8 81       	ld	r30, Y
    4b84:	f9 81       	ldd	r31, Y+1	; 0x01
    4b86:	c9 55       	subi	r28, 0x59	; 89
    4b88:	d1 40       	sbci	r29, 0x01	; 1
    4b8a:	60 83       	st	Z, r22
    4b8c:	71 83       	std	Z+1, r23	; 0x01
    4b8e:	82 83       	std	Z+2, r24	; 0x02
    4b90:	93 83       	std	Z+3, r25	; 0x03
    4b92:	18 c0       	rjmp	.+48     	; 0x4bc4 <_ZN10Movimiento6updateEm+0x1d70>
							} else {
								brownian_noise (&bd.param_tronco[index], 0, bd.oscilator[index].amp, bd.oscilator[index].freq);     // revisar esto y la brownian noise
    4b94:	c4 01       	movw	r24, r8
    4b96:	88 0f       	add	r24, r24
    4b98:	99 1f       	adc	r25, r25
    4b9a:	88 0f       	add	r24, r24
    4b9c:	99 1f       	adc	r25, r25
    4b9e:	87 58       	subi	r24, 0x87	; 135
    4ba0:	9f 4f       	sbci	r25, 0xFF	; 255
    4ba2:	d5 01       	movw	r26, r10
    4ba4:	18 96       	adiw	r26, 0x08	; 8
    4ba6:	cd 90       	ld	r12, X+
    4ba8:	dd 90       	ld	r13, X+
    4baa:	ed 90       	ld	r14, X+
    4bac:	fc 90       	ld	r15, X
    4bae:	1b 97       	sbiw	r26, 0x0b	; 11
    4bb0:	86 0d       	add	r24, r6
    4bb2:	97 1d       	adc	r25, r7
    4bb4:	40 e0       	ldi	r20, 0x00	; 0
    4bb6:	50 e0       	ldi	r21, 0x00	; 0
    4bb8:	60 e0       	ldi	r22, 0x00	; 0
    4bba:	70 e0       	ldi	r23, 0x00	; 0
    4bbc:	92 01       	movw	r18, r4
    4bbe:	81 01       	movw	r16, r2
    4bc0:	0e 94 f2 71 	call	0xe3e4	; 0xe3e4 <_Z14brownian_noisePffff>
    4bc4:	08 94       	sec
    4bc6:	81 1c       	adc	r8, r1
    4bc8:	91 1c       	adc	r9, r1
    4bca:	ed e0       	ldi	r30, 0x0D	; 13
    4bcc:	f0 e0       	ldi	r31, 0x00	; 0
    4bce:	ae 0e       	add	r10, r30
    4bd0:	bf 1e       	adc	r11, r31
    4bd2:	c7 5a       	subi	r28, 0xA7	; 167
    4bd4:	de 4f       	sbci	r29, 0xFE	; 254
    4bd6:	28 81       	ld	r18, Y
    4bd8:	39 81       	ldd	r19, Y+1	; 0x01
    4bda:	c9 55       	subi	r28, 0x59	; 89
    4bdc:	d1 40       	sbci	r29, 0x01	; 1
    4bde:	2c 5f       	subi	r18, 0xFC	; 252
    4be0:	3f 4f       	sbci	r19, 0xFF	; 255
    4be2:	c7 5a       	subi	r28, 0xA7	; 167
    4be4:	de 4f       	sbci	r29, 0xFE	; 254
    4be6:	39 83       	std	Y+1, r19	; 0x01
    4be8:	28 83       	st	Y, r18
    4bea:	c9 55       	subi	r28, 0x59	; 89
    4bec:	d1 40       	sbci	r29, 0x01	; 1
					// no me acuerdo qué se suponía que iba a ir acá
					
					break;
				}
				case TRONCO: {
					for (byte index=0; index<9; index++) {
    4bee:	39 e0       	ldi	r19, 0x09	; 9
    4bf0:	83 16       	cp	r8, r19
    4bf2:	91 04       	cpc	r9, r1
    4bf4:	09 f0       	breq	.+2      	; 0x4bf8 <_ZN10Movimiento6updateEm+0x1da4>
    4bf6:	83 cf       	rjmp	.-250    	; 0x4afe <_ZN10Movimiento6updateEm+0x1caa>
						}
					}
					// el centro de la oscilación es sh.mv.pos_ref
					// eso hace posible que la amplitud de la oscilación sea la desviación con respecto a sh.mv.pos_ref
					// en el caso de los centros, la referencia es bd.centro_ref
					tronco (sh.mv.pos_ref, (COORD3D){bd.param_tronco[0],bd.param_tronco[1],bd.param_tronco[2]}, suma((COORD3D){bd.param_tronco[3],bd.param_tronco[4],bd.param_tronco[5]}, bd.centro_ref), bd.param_tronco[6], bd.param_tronco[7], bd.param_tronco[8], sh.mv.escala, sh.mv.nsegmentos);
    4bf8:	4d e7       	ldi	r20, 0x7D	; 125
    4bfa:	50 e0       	ldi	r21, 0x00	; 0
    4bfc:	64 0e       	add	r6, r20
    4bfe:	75 1e       	adc	r7, r21
    4c00:	d3 01       	movw	r26, r6
    4c02:	2d 91       	ld	r18, X+
    4c04:	3d 91       	ld	r19, X+
    4c06:	4d 91       	ld	r20, X+
    4c08:	5d 91       	ld	r21, X+
    4c0a:	3d 01       	movw	r6, r26
    4c0c:	ed 90       	ld	r14, X+
    4c0e:	fd 90       	ld	r15, X+
    4c10:	0d 91       	ld	r16, X+
    4c12:	1c 91       	ld	r17, X
    4c14:	fe 01       	movw	r30, r28
    4c16:	e3 5f       	subi	r30, 0xF3	; 243
    4c18:	fe 4f       	sbci	r31, 0xFE	; 254
    4c1a:	68 ef       	ldi	r22, 0xF8	; 248
    4c1c:	7f ef       	ldi	r23, 0xFF	; 255
    4c1e:	66 0e       	add	r6, r22
    4c20:	77 1e       	adc	r7, r23
    4c22:	d3 01       	movw	r26, r6
    4c24:	ad 90       	ld	r10, X+
    4c26:	bd 90       	ld	r11, X+
    4c28:	cd 90       	ld	r12, X+
    4c2a:	dc 90       	ld	r13, X
    4c2c:	a0 82       	st	Z, r10
    4c2e:	b1 82       	std	Z+1, r11	; 0x01
    4c30:	c2 82       	std	Z+2, r12	; 0x02
    4c32:	d3 82       	std	Z+3, r13	; 0x03
    4c34:	24 83       	std	Z+4, r18	; 0x04
    4c36:	35 83       	std	Z+5, r19	; 0x05
    4c38:	46 83       	std	Z+6, r20	; 0x06
    4c3a:	57 83       	std	Z+7, r21	; 0x07
    4c3c:	e0 86       	std	Z+8, r14	; 0x08
    4c3e:	f1 86       	std	Z+9, r15	; 0x09
    4c40:	02 87       	std	Z+10, r16	; 0x0a
    4c42:	13 87       	std	Z+11, r17	; 0x0b
    4c44:	e0 e1       	ldi	r30, 0x10	; 16
    4c46:	f0 e0       	ldi	r31, 0x00	; 0
    4c48:	6e 0e       	add	r6, r30
    4c4a:	7f 1e       	adc	r7, r31
    4c4c:	d3 01       	movw	r26, r6
    4c4e:	2d 91       	ld	r18, X+
    4c50:	3d 91       	ld	r19, X+
    4c52:	4d 91       	ld	r20, X+
    4c54:	5d 91       	ld	r21, X+
    4c56:	3d 01       	movw	r6, r26
    4c58:	ed 90       	ld	r14, X+
    4c5a:	fd 90       	ld	r15, X+
    4c5c:	0d 91       	ld	r16, X+
    4c5e:	1c 91       	ld	r17, X
    4c60:	fe 01       	movw	r30, r28
    4c62:	e7 5e       	subi	r30, 0xE7	; 231
    4c64:	fe 4f       	sbci	r31, 0xFE	; 254
    4c66:	66 0e       	add	r6, r22
    4c68:	77 1e       	adc	r7, r23
    4c6a:	d3 01       	movw	r26, r6
    4c6c:	ad 90       	ld	r10, X+
    4c6e:	bd 90       	ld	r11, X+
    4c70:	cd 90       	ld	r12, X+
    4c72:	dc 90       	ld	r13, X
    4c74:	6b e7       	ldi	r22, 0x7B	; 123
    4c76:	7f ef       	ldi	r23, 0xFF	; 255
    4c78:	66 0e       	add	r6, r22
    4c7a:	77 1e       	adc	r7, r23
    4c7c:	a0 82       	st	Z, r10
    4c7e:	b1 82       	std	Z+1, r11	; 0x01
    4c80:	c2 82       	std	Z+2, r12	; 0x02
    4c82:	d3 82       	std	Z+3, r13	; 0x03
    4c84:	24 83       	std	Z+4, r18	; 0x04
    4c86:	35 83       	std	Z+5, r19	; 0x05
    4c88:	46 83       	std	Z+6, r20	; 0x06
    4c8a:	57 83       	std	Z+7, r21	; 0x07
    4c8c:	e0 86       	std	Z+8, r14	; 0x08
    4c8e:	f1 86       	std	Z+9, r15	; 0x09
    4c90:	02 87       	std	Z+10, r16	; 0x0a
    4c92:	13 87       	std	Z+11, r17	; 0x0b
    4c94:	8d b7       	in	r24, 0x3d	; 61
    4c96:	9e b7       	in	r25, 0x3e	; 62
    4c98:	0c 97       	sbiw	r24, 0x0c	; 12
    4c9a:	0f b6       	in	r0, 0x3f	; 63
    4c9c:	f8 94       	cli
    4c9e:	9e bf       	out	0x3e, r25	; 62
    4ca0:	0f be       	out	0x3f, r0	; 63
    4ca2:	8d bf       	out	0x3d, r24	; 61
    4ca4:	2d b7       	in	r18, 0x3d	; 61
    4ca6:	3e b7       	in	r19, 0x3e	; 62
    4ca8:	2f 5f       	subi	r18, 0xFF	; 255
    4caa:	3f 4f       	sbci	r19, 0xFF	; 255
    4cac:	a3 01       	movw	r20, r6
    4cae:	43 56       	subi	r20, 0x63	; 99
    4cb0:	5f 4f       	sbci	r21, 0xFF	; 255
    4cb2:	8c e0       	ldi	r24, 0x0C	; 12
    4cb4:	da 01       	movw	r26, r20
    4cb6:	0d 90       	ld	r0, X+
    4cb8:	ad 01       	movw	r20, r26
    4cba:	d9 01       	movw	r26, r18
    4cbc:	0d 92       	st	X+, r0
    4cbe:	9d 01       	movw	r18, r26
    4cc0:	81 50       	subi	r24, 0x01	; 1
    4cc2:	c1 f7       	brne	.-16     	; 0x4cb4 <_ZN10Movimiento6updateEm+0x1e60>
    4cc4:	ce 01       	movw	r24, r28
    4cc6:	8b 5d       	subi	r24, 0xDB	; 219
    4cc8:	9e 4f       	sbci	r25, 0xFE	; 254
    4cca:	c0 80       	ld	r12, Z
    4ccc:	d1 80       	ldd	r13, Z+1	; 0x01
    4cce:	e2 80       	ldd	r14, Z+2	; 0x02
    4cd0:	f3 80       	ldd	r15, Z+3	; 0x03
    4cd2:	04 81       	ldd	r16, Z+4	; 0x04
    4cd4:	15 81       	ldd	r17, Z+5	; 0x05
    4cd6:	26 81       	ldd	r18, Z+6	; 0x06
    4cd8:	37 81       	ldd	r19, Z+7	; 0x07
    4cda:	40 85       	ldd	r20, Z+8	; 0x08
    4cdc:	51 85       	ldd	r21, Z+9	; 0x09
    4cde:	62 85       	ldd	r22, Z+10	; 0x0a
    4ce0:	73 85       	ldd	r23, Z+11	; 0x0b
    4ce2:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <_Z4suma7COORD3DS_>
    4ce6:	ed b7       	in	r30, 0x3d	; 61
    4ce8:	fe b7       	in	r31, 0x3e	; 62
    4cea:	3f 97       	sbiw	r30, 0x0f	; 15
    4cec:	0f b6       	in	r0, 0x3f	; 63
    4cee:	f8 94       	cli
    4cf0:	fe bf       	out	0x3e, r31	; 62
    4cf2:	0f be       	out	0x3f, r0	; 63
    4cf4:	ed bf       	out	0x3d, r30	; 61
    4cf6:	31 96       	adiw	r30, 0x01	; 1
    4cf8:	b3 01       	movw	r22, r6
    4cfa:	68 56       	subi	r22, 0x68	; 104
    4cfc:	7e 4f       	sbci	r23, 0xFE	; 254
    4cfe:	8d e0       	ldi	r24, 0x0D	; 13
    4d00:	88 2e       	mov	r8, r24
    4d02:	81 e0       	ldi	r24, 0x01	; 1
    4d04:	98 2e       	mov	r9, r24
    4d06:	8c 0e       	add	r8, r28
    4d08:	9d 1e       	adc	r9, r29
    4d0a:	9f 01       	movw	r18, r30
    4d0c:	ae 01       	movw	r20, r28
    4d0e:	4b 5d       	subi	r20, 0xDB	; 219
    4d10:	5e 4f       	sbci	r21, 0xFE	; 254
    4d12:	8c e0       	ldi	r24, 0x0C	; 12
    4d14:	da 01       	movw	r26, r20
    4d16:	0d 90       	ld	r0, X+
    4d18:	ad 01       	movw	r20, r26
    4d1a:	d9 01       	movw	r26, r18
    4d1c:	0d 92       	st	X+, r0
    4d1e:	9d 01       	movw	r18, r26
    4d20:	81 50       	subi	r24, 0x01	; 1
    4d22:	c1 f7       	brne	.-16     	; 0x4d14 <_ZN10Movimiento6updateEm+0x1ec0>
    4d24:	21 e9       	ldi	r18, 0x91	; 145
    4d26:	30 e0       	ldi	r19, 0x00	; 0
    4d28:	62 0e       	add	r6, r18
    4d2a:	73 1e       	adc	r7, r19
    4d2c:	d3 01       	movw	r26, r6
    4d2e:	2d 91       	ld	r18, X+
    4d30:	3d 91       	ld	r19, X+
    4d32:	4d 91       	ld	r20, X+
    4d34:	5d 91       	ld	r21, X+
    4d36:	24 87       	std	Z+12, r18	; 0x0c
    4d38:	35 87       	std	Z+13, r19	; 0x0d
    4d3a:	46 87       	std	Z+14, r20	; 0x0e
    4d3c:	57 87       	std	Z+15, r21	; 0x0f
    4d3e:	2d 91       	ld	r18, X+
    4d40:	3d 91       	ld	r19, X+
    4d42:	4d 91       	ld	r20, X+
    4d44:	5d 91       	ld	r21, X+
    4d46:	3d 01       	movw	r6, r26
    4d48:	20 8b       	std	Z+16, r18	; 0x10
    4d4a:	31 8b       	std	Z+17, r19	; 0x11
    4d4c:	42 8b       	std	Z+18, r20	; 0x12
    4d4e:	53 8b       	std	Z+19, r21	; 0x13
    4d50:	2d 91       	ld	r18, X+
    4d52:	3d 91       	ld	r19, X+
    4d54:	4d 91       	ld	r20, X+
    4d56:	5c 91       	ld	r21, X
    4d58:	24 8b       	std	Z+20, r18	; 0x14
    4d5a:	35 8b       	std	Z+21, r19	; 0x15
    4d5c:	46 8b       	std	Z+22, r20	; 0x16
    4d5e:	57 8b       	std	Z+23, r21	; 0x17
    4d60:	27 e4       	ldi	r18, 0x47	; 71
    4d62:	31 e0       	ldi	r19, 0x01	; 1
    4d64:	62 0e       	add	r6, r18
    4d66:	73 1e       	adc	r7, r19
    4d68:	d3 01       	movw	r26, r6
    4d6a:	8d 91       	ld	r24, X+
    4d6c:	3d 01       	movw	r6, r26
    4d6e:	80 8f       	std	Z+24, r24	; 0x18
    4d70:	11 8e       	std	Z+25, r1	; 0x19
    4d72:	8c 91       	ld	r24, X
    4d74:	2f e1       	ldi	r18, 0x1F	; 31
    4d76:	3e ef       	ldi	r19, 0xFE	; 254
    4d78:	62 0e       	add	r6, r18
    4d7a:	73 1e       	adc	r7, r19
    4d7c:	82 8f       	std	Z+26, r24	; 0x1a
    4d7e:	c3 01       	movw	r24, r6
    4d80:	d4 01       	movw	r26, r8
    4d82:	ac 90       	ld	r10, X
    4d84:	11 96       	adiw	r26, 0x01	; 1
    4d86:	bc 90       	ld	r11, X
    4d88:	11 97       	sbiw	r26, 0x01	; 1
    4d8a:	12 96       	adiw	r26, 0x02	; 2
    4d8c:	cc 90       	ld	r12, X
    4d8e:	12 97       	sbiw	r26, 0x02	; 2
    4d90:	13 96       	adiw	r26, 0x03	; 3
    4d92:	dc 90       	ld	r13, X
    4d94:	13 97       	sbiw	r26, 0x03	; 3
    4d96:	14 96       	adiw	r26, 0x04	; 4
    4d98:	ec 90       	ld	r14, X
    4d9a:	14 97       	sbiw	r26, 0x04	; 4
    4d9c:	15 96       	adiw	r26, 0x05	; 5
    4d9e:	fc 90       	ld	r15, X
    4da0:	15 97       	sbiw	r26, 0x05	; 5
    4da2:	16 96       	adiw	r26, 0x06	; 6
    4da4:	0c 91       	ld	r16, X
    4da6:	16 97       	sbiw	r26, 0x06	; 6
    4da8:	17 96       	adiw	r26, 0x07	; 7
    4daa:	1c 91       	ld	r17, X
    4dac:	17 97       	sbiw	r26, 0x07	; 7
    4dae:	18 96       	adiw	r26, 0x08	; 8
    4db0:	2c 91       	ld	r18, X
    4db2:	18 97       	sbiw	r26, 0x08	; 8
    4db4:	19 96       	adiw	r26, 0x09	; 9
    4db6:	3c 91       	ld	r19, X
    4db8:	19 97       	sbiw	r26, 0x09	; 9
    4dba:	1a 96       	adiw	r26, 0x0a	; 10
    4dbc:	4c 91       	ld	r20, X
    4dbe:	1a 97       	sbiw	r26, 0x0a	; 10
    4dc0:	1b 96       	adiw	r26, 0x0b	; 11
    4dc2:	5c 91       	ld	r21, X
    4dc4:	0e 94 1d 11 	call	0x223a	; 0x223a <_ZN10Movimiento6troncoEP7COORD3DS0_S0_fffih>
    4dc8:	ed b7       	in	r30, 0x3d	; 61
    4dca:	fe b7       	in	r31, 0x3e	; 62
    4dcc:	7b 96       	adiw	r30, 0x1b	; 27
    4dce:	0f b6       	in	r0, 0x3f	; 63
    4dd0:	f8 94       	cli
    4dd2:	fe bf       	out	0x3e, r31	; 62
    4dd4:	0f be       	out	0x3f, r0	; 63
    4dd6:	ed bf       	out	0x3d, r30	; 61
					break;
				}
			}
			sh.cn.tick ++;
    4dd8:	f3 01       	movw	r30, r6
    4dda:	ea 51       	subi	r30, 0x1A	; 26
    4ddc:	fe 4f       	sbci	r31, 0xFE	; 254
    4dde:	80 81       	ld	r24, Z
    4de0:	91 81       	ldd	r25, Z+1	; 0x01
    4de2:	01 96       	adiw	r24, 0x01	; 1
    4de4:	91 83       	std	Z+1, r25	; 0x01
    4de6:	80 83       	st	Z, r24
    4de8:	02 c0       	rjmp	.+4      	; 0x4dee <_ZN10Movimiento6updateEm+0x1f9a>
		} else {
			sh.cn.enable = false;
    4dea:	da 01       	movw	r26, r20
    4dec:	1c 92       	st	X, r1
		}
	}
	 
    4dee:	c4 58       	subi	r28, 0x84	; 132
    4df0:	de 4f       	sbci	r29, 0xFE	; 254
    4df2:	0f b6       	in	r0, 0x3f	; 63
    4df4:	f8 94       	cli
    4df6:	de bf       	out	0x3e, r29	; 62
    4df8:	0f be       	out	0x3f, r0	; 63
    4dfa:	cd bf       	out	0x3d, r28	; 61
    4dfc:	cf 91       	pop	r28
    4dfe:	df 91       	pop	r29
    4e00:	1f 91       	pop	r17
    4e02:	0f 91       	pop	r16
    4e04:	ff 90       	pop	r15
    4e06:	ef 90       	pop	r14
    4e08:	df 90       	pop	r13
    4e0a:	cf 90       	pop	r12
    4e0c:	bf 90       	pop	r11
    4e0e:	af 90       	pop	r10
    4e10:	9f 90       	pop	r9
    4e12:	8f 90       	pop	r8
    4e14:	7f 90       	pop	r7
    4e16:	6f 90       	pop	r6
    4e18:	5f 90       	pop	r5
    4e1a:	4f 90       	pop	r4
    4e1c:	3f 90       	pop	r3
    4e1e:	2f 90       	pop	r2
    4e20:	08 95       	ret

00004e22 <_ZN10Movimiento14caminata_init2Ev>:
	sh.cn.tick = wk.mv.periodo_pasos*(wk.rt.index%wk.mv.agrupamiento);   // esto equivale a inicializarlo en 0, tiene el efecto de que arranque dando un pasito
	
}

// inicialización del runtime de la caminata "on-the-fly"
void Movimiento::caminata_init2 () { 
    4e22:	af 92       	push	r10
    4e24:	bf 92       	push	r11
    4e26:	cf 92       	push	r12
    4e28:	df 92       	push	r13
    4e2a:	ef 92       	push	r14
    4e2c:	ff 92       	push	r15
    4e2e:	0f 93       	push	r16
    4e30:	1f 93       	push	r17
    4e32:	cf 93       	push	r28
    4e34:	df 93       	push	r29
    4e36:	ec 01       	movw	r28, r24
	 
	// variables geométricas internas de la caminata (no son parámetros)              
	if (wk.mv.rotacion) {
    4e38:	71 eb       	ldi	r23, 0xB1	; 177
    4e3a:	c7 2e       	mov	r12, r23
    4e3c:	d1 2c       	mov	r13, r1
    4e3e:	c8 0e       	add	r12, r24
    4e40:	d9 1e       	adc	r13, r25
    4e42:	d6 01       	movw	r26, r12
    4e44:	ed 90       	ld	r14, X+
    4e46:	fd 90       	ld	r15, X+
    4e48:	0d 91       	ld	r16, X+
    4e4a:	1c 91       	ld	r17, X
    4e4c:	c8 01       	movw	r24, r16
    4e4e:	b7 01       	movw	r22, r14
    4e50:	20 e0       	ldi	r18, 0x00	; 0
    4e52:	30 e0       	ldi	r19, 0x00	; 0
    4e54:	40 e0       	ldi	r20, 0x00	; 0
    4e56:	50 e0       	ldi	r21, 0x00	; 0
    4e58:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    4e5c:	88 23       	and	r24, r24
    4e5e:	e9 f0       	breq	.+58     	; 0x4e9a <_ZN10Movimiento14caminata_init2Ev+0x78>
		getRotationMatrix (wk.rt.rotor1, -wk.mv.rotacion);                     // matriz de rotación del cuerpo
    4e60:	b8 01       	movw	r22, r16
    4e62:	a7 01       	movw	r20, r14
    4e64:	70 58       	subi	r23, 0x80	; 128
    4e66:	ce 01       	movw	r24, r28
    4e68:	80 53       	subi	r24, 0x30	; 48
    4e6a:	9f 4f       	sbci	r25, 0xFF	; 255
    4e6c:	0e 94 02 49 	call	0x9204	; 0x9204 <_Z17getRotationMatrixP7COORD2Df>
		getRotationMatrix (wk.rt.rotor2, wk.mv.rotacion*wk.rt.coeficiente);       // matriz de rotación de los "pasitos". 
    4e70:	c4 53       	subi	r28, 0x34	; 52
    4e72:	df 4f       	sbci	r29, 0xFF	; 255
    4e74:	f6 01       	movw	r30, r12
    4e76:	60 81       	ld	r22, Z
    4e78:	71 81       	ldd	r23, Z+1	; 0x01
    4e7a:	82 81       	ldd	r24, Z+2	; 0x02
    4e7c:	93 81       	ldd	r25, Z+3	; 0x03
    4e7e:	28 81       	ld	r18, Y
    4e80:	39 81       	ldd	r19, Y+1	; 0x01
    4e82:	4a 81       	ldd	r20, Y+2	; 0x02
    4e84:	5b 81       	ldd	r21, Y+3	; 0x03
    4e86:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    4e8a:	ab 01       	movw	r20, r22
    4e8c:	bc 01       	movw	r22, r24
    4e8e:	64 96       	adiw	r28, 0x14	; 20
    4e90:	ce 01       	movw	r24, r28
    4e92:	c0 5e       	subi	r28, 0xE0	; 224
    4e94:	d0 40       	sbci	r29, 0x00	; 0
    4e96:	0e 94 02 49 	call	0x9204	; 0x9204 <_Z17getRotationMatrixP7COORD2Df>
    4e9a:	20 e0       	ldi	r18, 0x00	; 0
	}
 
	// variables de control de la caminata
	for (byte f=0; f<wk.mv.fases; f++) {wk.rt.counter [f] += wk.mv.duracion_pasos;}     // empieza valiendo duracion_pasos
    4e9c:	ae 01       	movw	r20, r28
    4e9e:	45 54       	subi	r20, 0x45	; 69
    4ea0:	5f 4f       	sbci	r21, 0xFF	; 255
    4ea2:	61 ec       	ldi	r22, 0xC1	; 193
    4ea4:	a6 2e       	mov	r10, r22
    4ea6:	b1 2c       	mov	r11, r1
    4ea8:	ac 0e       	add	r10, r28
    4eaa:	bd 1e       	adc	r11, r29
    4eac:	0b c0       	rjmp	.+22     	; 0x4ec4 <_ZN10Movimiento14caminata_init2Ev+0xa2>
    4eae:	fe 01       	movw	r30, r28
    4eb0:	e2 0f       	add	r30, r18
    4eb2:	f1 1d       	adc	r31, r1
    4eb4:	ee 57       	subi	r30, 0x7E	; 126
    4eb6:	fe 4f       	sbci	r31, 0xFE	; 254
    4eb8:	80 81       	ld	r24, Z
    4eba:	d5 01       	movw	r26, r10
    4ebc:	9c 91       	ld	r25, X
    4ebe:	89 0f       	add	r24, r25
    4ec0:	80 83       	st	Z, r24
    4ec2:	2f 5f       	subi	r18, 0xFF	; 255
    4ec4:	fa 01       	movw	r30, r20
    4ec6:	d0 80       	ld	r13, Z
    4ec8:	2d 15       	cp	r18, r13
    4eca:	88 f3       	brcs	.-30     	; 0x4eae <_ZN10Movimiento14caminata_init2Ev+0x8c>
																																			               // esto hace que durante el primer pasito no haya movimiento del tronco (al no haber patas "apoyadas")
	wk.mv.compensate = false;
    4ecc:	cd 53       	subi	r28, 0x3D	; 61
    4ece:	df 4f       	sbci	r29, 0xFF	; 255
    4ed0:	18 82       	st	Y, r1
    4ed2:	c3 5c       	subi	r28, 0xC3	; 195
    4ed4:	d0 40       	sbci	r29, 0x00	; 0
	sh.cn.tick %= wk.mv.periodo_sub_ciclo;
    4ed6:	fe 01       	movw	r30, r28
    4ed8:	ea 51       	subi	r30, 0x1A	; 26
    4eda:	fe 4f       	sbci	r31, 0xFE	; 254
    4edc:	c3 54       	subi	r28, 0x43	; 67
    4ede:	df 4f       	sbci	r29, 0xFF	; 255
    4ee0:	28 81       	ld	r18, Y
    4ee2:	39 81       	ldd	r19, Y+1	; 0x01
    4ee4:	80 81       	ld	r24, Z
    4ee6:	91 81       	ldd	r25, Z+1	; 0x01
    4ee8:	b9 01       	movw	r22, r18
    4eea:	0e 94 f1 7e 	call	0xfde2	; 0xfde2 <__udivmodhi4>
    4eee:	91 83       	std	Z+1, r25	; 0x01
    4ef0:	80 83       	st	Z, r24
	
	// esto es de la init normal
	wk.rt.ciclo = wk.mv.periodo_sub_ciclo*wk.mv.fases/wk.mv.agrupamiento;              // duración total del ciclo (en ticks) 
    4ef2:	8d 2d       	mov	r24, r13
    4ef4:	90 e0       	ldi	r25, 0x00	; 0
    4ef6:	6a 91       	ld	r22, -Y
    4ef8:	ac 01       	movw	r20, r24
    4efa:	42 9f       	mul	r20, r18
    4efc:	c0 01       	movw	r24, r0
    4efe:	43 9f       	mul	r20, r19
    4f00:	90 0d       	add	r25, r0
    4f02:	52 9f       	mul	r21, r18
    4f04:	90 0d       	add	r25, r0
    4f06:	11 24       	eor	r1, r1
    4f08:	70 e0       	ldi	r23, 0x00	; 0
    4f0a:	0e 94 05 7f 	call	0xfe0a	; 0xfe0a <__divmodhi4>
    4f0e:	88 27       	eor	r24, r24
    4f10:	77 fd       	sbrc	r23, 7
    4f12:	80 95       	com	r24
    4f14:	98 2f       	mov	r25, r24
    4f16:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    4f1a:	7b 01       	movw	r14, r22
    4f1c:	8c 01       	movw	r16, r24
    4f1e:	2c 96       	adiw	r28, 0x0c	; 12
    4f20:	69 93       	st	Y+, r22
    4f22:	79 93       	st	Y+, r23
    4f24:	89 93       	st	Y+, r24
    4f26:	99 93       	st	Y+, r25
	wk.rt.coeficiente = (wk.rt.ciclo-wk.mv.duracion_pasos) / 2;                     // duracion de los "pasitos" (en ticks)
    4f28:	d5 01       	movw	r26, r10
    4f2a:	6d 91       	ld	r22, X+
    4f2c:	7c 91       	ld	r23, X
    4f2e:	88 27       	eor	r24, r24
    4f30:	77 fd       	sbrc	r23, 7
    4f32:	80 95       	com	r24
    4f34:	98 2f       	mov	r25, r24
    4f36:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    4f3a:	9b 01       	movw	r18, r22
    4f3c:	ac 01       	movw	r20, r24
    4f3e:	c8 01       	movw	r24, r16
    4f40:	b7 01       	movw	r22, r14
    4f42:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    4f46:	20 e0       	ldi	r18, 0x00	; 0
    4f48:	30 e0       	ldi	r19, 0x00	; 0
    4f4a:	40 e0       	ldi	r20, 0x00	; 0
    4f4c:	5f e3       	ldi	r21, 0x3F	; 63
    4f4e:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    4f52:	68 83       	st	Y, r22
    4f54:	79 83       	std	Y+1, r23	; 0x01
    4f56:	8a 83       	std	Y+2, r24	; 0x02
    4f58:	9b 83       	std	Y+3, r25	; 0x03
    4f5a:	cc 5c       	subi	r28, 0xCC	; 204
    4f5c:	d0 40       	sbci	r29, 0x00	; 0
	wk.rt.index %= wk.mv.fases;
    4f5e:	fe 01       	movw	r30, r28
    4f60:	e0 58       	subi	r30, 0x80	; 128
    4f62:	fe 4f       	sbci	r31, 0xFE	; 254
    4f64:	80 81       	ld	r24, Z
    4f66:	90 e0       	ldi	r25, 0x00	; 0
    4f68:	6d 2d       	mov	r22, r13
    4f6a:	70 e0       	ldi	r23, 0x00	; 0
    4f6c:	0e 94 f1 7e 	call	0xfde2	; 0xfde2 <__udivmodhi4>
    4f70:	80 83       	st	Z, r24
	sh.cn.pausa = 1000*TICK*sh.mv.escala;
    4f72:	c0 52       	subi	r28, 0x20	; 32
    4f74:	de 4f       	sbci	r29, 0xFE	; 254
    4f76:	68 81       	ld	r22, Y
    4f78:	70 e0       	ldi	r23, 0x00	; 0
    4f7a:	88 27       	eor	r24, r24
    4f7c:	77 fd       	sbrc	r23, 7
    4f7e:	80 95       	com	r24
    4f80:	98 2f       	mov	r25, r24
    4f82:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    4f86:	20 e0       	ldi	r18, 0x00	; 0
    4f88:	30 e0       	ldi	r19, 0x00	; 0
    4f8a:	40 e8       	ldi	r20, 0x80	; 128
    4f8c:	50 e4       	ldi	r21, 0x40	; 64
    4f8e:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    4f92:	0e 94 30 7b 	call	0xf660	; 0xf660 <__fixsfsi>
    4f96:	28 96       	adiw	r28, 0x08	; 8
    4f98:	79 83       	std	Y+1, r23	; 0x01
    4f9a:	68 83       	st	Y, r22
	
}
    4f9c:	df 91       	pop	r29
    4f9e:	cf 91       	pop	r28
    4fa0:	1f 91       	pop	r17
    4fa2:	0f 91       	pop	r16
    4fa4:	ff 90       	pop	r15
    4fa6:	ef 90       	pop	r14
    4fa8:	df 90       	pop	r13
    4faa:	cf 90       	pop	r12
    4fac:	bf 90       	pop	r11
    4fae:	af 90       	pop	r10
    4fb0:	08 95       	ret

00004fb2 <_ZN10Movimiento13caminata_initEv>:
	}
	
}

// inicialización del runtime de la caminata
void Movimiento::caminata_init () {           
    4fb2:	2f 92       	push	r2
    4fb4:	3f 92       	push	r3
    4fb6:	4f 92       	push	r4
    4fb8:	5f 92       	push	r5
    4fba:	6f 92       	push	r6
    4fbc:	7f 92       	push	r7
    4fbe:	8f 92       	push	r8
    4fc0:	9f 92       	push	r9
    4fc2:	af 92       	push	r10
    4fc4:	bf 92       	push	r11
    4fc6:	cf 92       	push	r12
    4fc8:	df 92       	push	r13
    4fca:	ef 92       	push	r14
    4fcc:	ff 92       	push	r15
    4fce:	0f 93       	push	r16
    4fd0:	1f 93       	push	r17
    4fd2:	df 93       	push	r29
    4fd4:	cf 93       	push	r28
    4fd6:	cd b7       	in	r28, 0x3d	; 61
    4fd8:	de b7       	in	r29, 0x3e	; 62
    4fda:	6a 97       	sbiw	r28, 0x1a	; 26
    4fdc:	0f b6       	in	r0, 0x3f	; 63
    4fde:	f8 94       	cli
    4fe0:	de bf       	out	0x3e, r29	; 62
    4fe2:	0f be       	out	0x3f, r0	; 63
    4fe4:	cd bf       	out	0x3d, r28	; 61
    4fe6:	2c 01       	movw	r4, r24
	 
	// variables geométricas internas de la caminata (no son parámetros)              
	wk.rt.ciclo = wk.mv.periodo_sub_ciclo*wk.mv.fases/wk.mv.agrupamiento;                 // duración total del ciclo (en ticks) 
    4fe8:	2b eb       	ldi	r18, 0xBB	; 187
    4fea:	30 e0       	ldi	r19, 0x00	; 0
    4fec:	42 0e       	add	r4, r18
    4fee:	53 1e       	adc	r5, r19
    4ff0:	d2 01       	movw	r26, r4
    4ff2:	8c 91       	ld	r24, X
    4ff4:	90 e0       	ldi	r25, 0x00	; 0
    4ff6:	e2 e0       	ldi	r30, 0x02	; 2
    4ff8:	f0 e0       	ldi	r31, 0x00	; 0
    4ffa:	4e 0e       	add	r4, r30
    4ffc:	5f 1e       	adc	r5, r31
    4ffe:	d2 01       	movw	r26, r4
    5000:	2d 91       	ld	r18, X+
    5002:	3c 91       	ld	r19, X
    5004:	f2 01       	movw	r30, r4
    5006:	62 91       	ld	r22, -Z
    5008:	2f 01       	movw	r4, r30
    500a:	ac 01       	movw	r20, r24
    500c:	42 9f       	mul	r20, r18
    500e:	c0 01       	movw	r24, r0
    5010:	43 9f       	mul	r20, r19
    5012:	90 0d       	add	r25, r0
    5014:	52 9f       	mul	r21, r18
    5016:	90 0d       	add	r25, r0
    5018:	11 24       	eor	r1, r1
    501a:	70 e0       	ldi	r23, 0x00	; 0
    501c:	0e 94 05 7f 	call	0xfe0a	; 0xfe0a <__divmodhi4>
    5020:	88 27       	eor	r24, r24
    5022:	77 fd       	sbrc	r23, 7
    5024:	80 95       	com	r24
    5026:	98 2f       	mov	r25, r24
    5028:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    502c:	7b 01       	movw	r14, r22
    502e:	8c 01       	movw	r16, r24
    5030:	8c e0       	ldi	r24, 0x0C	; 12
    5032:	90 e0       	ldi	r25, 0x00	; 0
    5034:	48 0e       	add	r4, r24
    5036:	59 1e       	adc	r5, r25
    5038:	d2 01       	movw	r26, r4
    503a:	ed 92       	st	X+, r14
    503c:	fd 92       	st	X+, r15
    503e:	0d 93       	st	X+, r16
    5040:	1c 93       	st	X, r17
    5042:	13 97       	sbiw	r26, 0x03	; 3
    5044:	e8 e3       	ldi	r30, 0x38	; 56
    5046:	ff ef       	ldi	r31, 0xFF	; 255
    5048:	4e 0e       	add	r4, r30
    504a:	5f 1e       	adc	r5, r31
	wk.rt.coeficiente = (wk.rt.ciclo-wk.mv.duracion_pasos) / 2;                     // duracion de los "pasitos" (en ticks)
    504c:	8c ec       	ldi	r24, 0xCC	; 204
    504e:	a8 2e       	mov	r10, r24
    5050:	b1 2c       	mov	r11, r1
    5052:	a4 0c       	add	r10, r4
    5054:	b5 1c       	adc	r11, r5
    5056:	21 ec       	ldi	r18, 0xC1	; 193
    5058:	30 e0       	ldi	r19, 0x00	; 0
    505a:	42 0e       	add	r4, r18
    505c:	53 1e       	adc	r5, r19
    505e:	d2 01       	movw	r26, r4
    5060:	6d 91       	ld	r22, X+
    5062:	7c 91       	ld	r23, X
    5064:	ef e3       	ldi	r30, 0x3F	; 63
    5066:	ff ef       	ldi	r31, 0xFF	; 255
    5068:	4e 0e       	add	r4, r30
    506a:	5f 1e       	adc	r5, r31
    506c:	88 27       	eor	r24, r24
    506e:	77 fd       	sbrc	r23, 7
    5070:	80 95       	com	r24
    5072:	98 2f       	mov	r25, r24
    5074:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    5078:	9b 01       	movw	r18, r22
    507a:	ac 01       	movw	r20, r24
    507c:	c8 01       	movw	r24, r16
    507e:	b7 01       	movw	r22, r14
    5080:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    5084:	20 e0       	ldi	r18, 0x00	; 0
    5086:	30 e0       	ldi	r19, 0x00	; 0
    5088:	40 e0       	ldi	r20, 0x00	; 0
    508a:	5f e3       	ldi	r21, 0x3F	; 63
    508c:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    5090:	d5 01       	movw	r26, r10
    5092:	6d 93       	st	X+, r22
    5094:	7d 93       	st	X+, r23
    5096:	8d 93       	st	X+, r24
    5098:	9c 93       	st	X, r25
    509a:	13 97       	sbiw	r26, 0x03	; 3
	
	if (wk.mv.rotacion) {
    509c:	11 eb       	ldi	r17, 0xB1	; 177
    509e:	c1 2e       	mov	r12, r17
    50a0:	d1 2c       	mov	r13, r1
    50a2:	c4 0c       	add	r12, r4
    50a4:	d5 1c       	adc	r13, r5
    50a6:	f6 01       	movw	r30, r12
    50a8:	e0 80       	ld	r14, Z
    50aa:	f1 80       	ldd	r15, Z+1	; 0x01
    50ac:	02 81       	ldd	r16, Z+2	; 0x02
    50ae:	13 81       	ldd	r17, Z+3	; 0x03
    50b0:	c8 01       	movw	r24, r16
    50b2:	b7 01       	movw	r22, r14
    50b4:	20 e0       	ldi	r18, 0x00	; 0
    50b6:	30 e0       	ldi	r19, 0x00	; 0
    50b8:	40 e0       	ldi	r20, 0x00	; 0
    50ba:	50 e0       	ldi	r21, 0x00	; 0
    50bc:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    50c0:	88 23       	and	r24, r24
    50c2:	09 f1       	breq	.+66     	; 0x5106 <_ZN10Movimiento13caminata_initEv+0x154>
		getRotationMatrix (wk.rt.rotor1, -wk.mv.rotacion);                    // matriz de rotación del cuerpo
    50c4:	b8 01       	movw	r22, r16
    50c6:	a7 01       	movw	r20, r14
    50c8:	70 58       	subi	r23, 0x80	; 128
    50ca:	c2 01       	movw	r24, r4
    50cc:	80 53       	subi	r24, 0x30	; 48
    50ce:	9f 4f       	sbci	r25, 0xFF	; 255
    50d0:	0e 94 02 49 	call	0x9204	; 0x9204 <_Z17getRotationMatrixP7COORD2Df>
		getRotationMatrix (wk.rt.rotor2, wk.mv.rotacion*wk.rt.coeficiente);     // matriz de rotación de los "pasitos". 
    50d4:	20 ee       	ldi	r18, 0xE0	; 224
    50d6:	30 e0       	ldi	r19, 0x00	; 0
    50d8:	42 0e       	add	r4, r18
    50da:	53 1e       	adc	r5, r19
    50dc:	d6 01       	movw	r26, r12
    50de:	6d 91       	ld	r22, X+
    50e0:	7d 91       	ld	r23, X+
    50e2:	8d 91       	ld	r24, X+
    50e4:	9c 91       	ld	r25, X
    50e6:	f5 01       	movw	r30, r10
    50e8:	20 81       	ld	r18, Z
    50ea:	31 81       	ldd	r19, Z+1	; 0x01
    50ec:	42 81       	ldd	r20, Z+2	; 0x02
    50ee:	53 81       	ldd	r21, Z+3	; 0x03
    50f0:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    50f4:	ab 01       	movw	r20, r22
    50f6:	bc 01       	movw	r22, r24
    50f8:	c2 01       	movw	r24, r4
    50fa:	20 e2       	ldi	r18, 0x20	; 32
    50fc:	3f ef       	ldi	r19, 0xFF	; 255
    50fe:	42 0e       	add	r4, r18
    5100:	53 1e       	adc	r5, r19
    5102:	0e 94 02 49 	call	0x9204	; 0x9204 <_Z17getRotationMatrixP7COORD2Df>
    5106:	90 e0       	ldi	r25, 0x00	; 0
																																					   // Para hacer una verdadera "zancada progresiva" habría que recalcular esta matriz todo el tiempo
	}
 
	// variables de control de la caminata
	for (byte f=0; f<wk.mv.fases; f++) {wk.rt.counter [f] = wk.mv.duracion_pasos;}    // empieza valiendo duracion_pasos
    5108:	92 01       	movw	r18, r4
    510a:	25 54       	subi	r18, 0x45	; 69
    510c:	3f 4f       	sbci	r19, 0xFF	; 255
    510e:	d2 01       	movw	r26, r4
    5110:	af 53       	subi	r26, 0x3F	; 63
    5112:	bf 4f       	sbci	r27, 0xFF	; 255
    5114:	08 c0       	rjmp	.+16     	; 0x5126 <_ZN10Movimiento13caminata_initEv+0x174>
    5116:	f2 01       	movw	r30, r4
    5118:	e9 0f       	add	r30, r25
    511a:	f1 1d       	adc	r31, r1
    511c:	ee 57       	subi	r30, 0x7E	; 126
    511e:	fe 4f       	sbci	r31, 0xFE	; 254
    5120:	8c 91       	ld	r24, X
    5122:	80 83       	st	Z, r24
    5124:	9f 5f       	subi	r25, 0xFF	; 255
    5126:	f9 01       	movw	r30, r18
    5128:	60 81       	ld	r22, Z
    512a:	96 17       	cp	r25, r22
    512c:	a0 f3       	brcs	.-24     	; 0x5116 <_ZN10Movimiento13caminata_initEv+0x164>
																								  											            // esto hace que durante el primer pasito no haya movimiento del tronco (al no haber patas "apoyadas")
	wk.rt.index %= wk.mv.fases;                                            // index intenta mantenerse igual
    512e:	f2 01       	movw	r30, r4
    5130:	e0 58       	subi	r30, 0x80	; 128
    5132:	fe 4f       	sbci	r31, 0xFE	; 254
    5134:	80 81       	ld	r24, Z
    5136:	90 e0       	ldi	r25, 0x00	; 0
    5138:	70 e0       	ldi	r23, 0x00	; 0
    513a:	0e 94 f1 7e 	call	0xfde2	; 0xfde2 <__udivmodhi4>
    513e:	80 83       	st	Z, r24
	
	// compensación de la posición de referencia, attenti:
	if (wk.mv.compensate) {
    5140:	23 ec       	ldi	r18, 0xC3	; 195
    5142:	30 e0       	ldi	r19, 0x00	; 0
    5144:	42 0e       	add	r4, r18
    5146:	53 1e       	adc	r5, r19
    5148:	d2 01       	movw	r26, r4
    514a:	8c 91       	ld	r24, X
    514c:	ed e3       	ldi	r30, 0x3D	; 61
    514e:	ff ef       	ldi	r31, 0xFF	; 255
    5150:	4e 0e       	add	r4, r30
    5152:	5f 1e       	adc	r5, r31
    5154:	92 01       	movw	r18, r4
    5156:	28 5c       	subi	r18, 0xC8	; 200
    5158:	3e 4f       	sbci	r19, 0xFE	; 254
    515a:	88 23       	and	r24, r24
    515c:	09 f4       	brne	.+2      	; 0x5160 <_ZN10Movimiento13caminata_initEv+0x1ae>
    515e:	93 c0       	rjmp	.+294    	; 0x5286 <_ZN10Movimiento13caminata_initEv+0x2d4>
		memcpy (wk.rt.pos_ref, pos_des, 6*sizeof(COORD3D));                   // pos_ref = posición actual
    5160:	d9 01       	movw	r26, r18
    5162:	e4 e5       	ldi	r30, 0x54	; 84
    5164:	f2 e1       	ldi	r31, 0x12	; 18
    5166:	88 e4       	ldi	r24, 0x48	; 72
    5168:	01 90       	ld	r0, Z+
    516a:	0d 92       	st	X+, r0
    516c:	81 50       	subi	r24, 0x01	; 1
    516e:	e1 f7       	brne	.-8      	; 0x5168 <_ZN10Movimiento13caminata_initEv+0x1b6>
		proyeccion (wk.rt.pos_ref, sh.mv.pos_ref);                         // proyecta la posición de referencia sobre el plano actual
    5170:	b2 01       	movw	r22, r4
    5172:	68 56       	subi	r22, 0x68	; 104
    5174:	7e 4f       	sbci	r23, 0xFE	; 254
    5176:	c9 01       	movw	r24, r18
    5178:	0e 94 63 46 	call	0x8cc6	; 0x8cc6 <_Z10proyeccionP7COORD3DS0_>
    517c:	22 24       	eor	r2, r2
    517e:	33 24       	eor	r3, r3
		for (byte pata=0; pata<6; pata++) {
			wk.rt.comp [pata] = producto(resta(sh.mv.pos_ref[pata], wk.rt.pos_ref[pata]), .5/wk.rt.ciclo);  // calcula el factor de corrección
    5180:	92 01       	movw	r18, r4
    5182:	28 53       	subi	r18, 0x38	; 56
    5184:	3f 4f       	sbci	r19, 0xFF	; 255
    5186:	3a 8f       	std	Y+26, r19	; 0x1a
    5188:	29 8f       	std	Y+25, r18	; 0x19
    518a:	4d b7       	in	r20, 0x3d	; 61
    518c:	5e b7       	in	r21, 0x3e	; 62
    518e:	4c 50       	subi	r20, 0x0C	; 12
    5190:	50 40       	sbci	r21, 0x00	; 0
    5192:	0f b6       	in	r0, 0x3f	; 63
    5194:	f8 94       	cli
    5196:	5e bf       	out	0x3e, r21	; 62
    5198:	0f be       	out	0x3f, r0	; 63
    519a:	4d bf       	out	0x3d, r20	; 61
    519c:	c1 01       	movw	r24, r2
    519e:	88 0f       	add	r24, r24
    51a0:	99 1f       	adc	r25, r25
    51a2:	82 0d       	add	r24, r2
    51a4:	93 1d       	adc	r25, r3
    51a6:	88 0f       	add	r24, r24
    51a8:	99 1f       	adc	r25, r25
    51aa:	88 0f       	add	r24, r24
    51ac:	99 1f       	adc	r25, r25
    51ae:	84 0d       	add	r24, r4
    51b0:	95 1d       	adc	r25, r5
    51b2:	fc 01       	movw	r30, r24
    51b4:	e8 56       	subi	r30, 0x68	; 104
    51b6:	fe 4f       	sbci	r31, 0xFE	; 254
    51b8:	2d b7       	in	r18, 0x3d	; 61
    51ba:	3e b7       	in	r19, 0x3e	; 62
    51bc:	2f 5f       	subi	r18, 0xFF	; 255
    51be:	3f 4f       	sbci	r19, 0xFF	; 255
    51c0:	ac 01       	movw	r20, r24
    51c2:	48 5c       	subi	r20, 0xC8	; 200
    51c4:	5e 4f       	sbci	r21, 0xFE	; 254
    51c6:	8c e0       	ldi	r24, 0x0C	; 12
    51c8:	da 01       	movw	r26, r20
    51ca:	0d 90       	ld	r0, X+
    51cc:	ad 01       	movw	r20, r26
    51ce:	d9 01       	movw	r26, r18
    51d0:	0d 92       	st	X+, r0
    51d2:	9d 01       	movw	r18, r26
    51d4:	81 50       	subi	r24, 0x01	; 1
    51d6:	c1 f7       	brne	.-16     	; 0x51c8 <_ZN10Movimiento13caminata_initEv+0x216>
    51d8:	ce 01       	movw	r24, r28
    51da:	01 96       	adiw	r24, 0x01	; 1
    51dc:	c0 80       	ld	r12, Z
    51de:	d1 80       	ldd	r13, Z+1	; 0x01
    51e0:	e2 80       	ldd	r14, Z+2	; 0x02
    51e2:	f3 80       	ldd	r15, Z+3	; 0x03
    51e4:	04 81       	ldd	r16, Z+4	; 0x04
    51e6:	15 81       	ldd	r17, Z+5	; 0x05
    51e8:	26 81       	ldd	r18, Z+6	; 0x06
    51ea:	37 81       	ldd	r19, Z+7	; 0x07
    51ec:	40 85       	ldd	r20, Z+8	; 0x08
    51ee:	51 85       	ldd	r21, Z+9	; 0x09
    51f0:	62 85       	ldd	r22, Z+10	; 0x0a
    51f2:	73 85       	ldd	r23, Z+11	; 0x0b
    51f4:	0e 94 33 3b 	call	0x7666	; 0x7666 <_Z5resta7COORD3DS_>
    51f8:	31 01       	movw	r6, r2
    51fa:	66 0c       	add	r6, r6
    51fc:	77 1c       	adc	r7, r7
    51fe:	62 0c       	add	r6, r2
    5200:	73 1c       	adc	r7, r3
    5202:	66 0c       	add	r6, r6
    5204:	77 1c       	adc	r7, r7
    5206:	66 0c       	add	r6, r6
    5208:	77 1c       	adc	r7, r7
    520a:	64 0c       	add	r6, r4
    520c:	75 1c       	adc	r7, r5
    520e:	e0 ef       	ldi	r30, 0xF0	; 240
    5210:	f0 e0       	ldi	r31, 0x00	; 0
    5212:	6e 0e       	add	r6, r30
    5214:	7f 1e       	adc	r7, r31
    5216:	2d b7       	in	r18, 0x3d	; 61
    5218:	3e b7       	in	r19, 0x3e	; 62
    521a:	24 5f       	subi	r18, 0xF4	; 244
    521c:	3f 4f       	sbci	r19, 0xFF	; 255
    521e:	0f b6       	in	r0, 0x3f	; 63
    5220:	f8 94       	cli
    5222:	3e bf       	out	0x3e, r19	; 62
    5224:	0f be       	out	0x3f, r0	; 63
    5226:	2d bf       	out	0x3d, r18	; 61
    5228:	60 e0       	ldi	r22, 0x00	; 0
    522a:	70 e0       	ldi	r23, 0x00	; 0
    522c:	80 e0       	ldi	r24, 0x00	; 0
    522e:	9f e3       	ldi	r25, 0x3F	; 63
    5230:	a9 8d       	ldd	r26, Y+25	; 0x19
    5232:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5234:	2d 91       	ld	r18, X+
    5236:	3d 91       	ld	r19, X+
    5238:	4d 91       	ld	r20, X+
    523a:	5c 91       	ld	r21, X
    523c:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    5240:	4b 01       	movw	r8, r22
    5242:	5c 01       	movw	r10, r24
    5244:	ce 01       	movw	r24, r28
    5246:	0d 96       	adiw	r24, 0x0d	; 13
    5248:	c9 80       	ldd	r12, Y+1	; 0x01
    524a:	da 80       	ldd	r13, Y+2	; 0x02
    524c:	eb 80       	ldd	r14, Y+3	; 0x03
    524e:	fc 80       	ldd	r15, Y+4	; 0x04
    5250:	0d 81       	ldd	r16, Y+5	; 0x05
    5252:	1e 81       	ldd	r17, Y+6	; 0x06
    5254:	2f 81       	ldd	r18, Y+7	; 0x07
    5256:	38 85       	ldd	r19, Y+8	; 0x08
    5258:	49 85       	ldd	r20, Y+9	; 0x09
    525a:	5a 85       	ldd	r21, Y+10	; 0x0a
    525c:	6b 85       	ldd	r22, Y+11	; 0x0b
    525e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5260:	0e 94 f6 3b 	call	0x77ec	; 0x77ec <_Z8producto7COORD3Df>
    5264:	d3 01       	movw	r26, r6
    5266:	fe 01       	movw	r30, r28
    5268:	3d 96       	adiw	r30, 0x0d	; 13
    526a:	8c e0       	ldi	r24, 0x0C	; 12
    526c:	01 90       	ld	r0, Z+
    526e:	0d 92       	st	X+, r0
    5270:	81 50       	subi	r24, 0x01	; 1
    5272:	e1 f7       	brne	.-8      	; 0x526c <_ZN10Movimiento13caminata_initEv+0x2ba>
    5274:	08 94       	sec
    5276:	21 1c       	adc	r2, r1
    5278:	31 1c       	adc	r3, r1
	
	// compensación de la posición de referencia, attenti:
	if (wk.mv.compensate) {
		memcpy (wk.rt.pos_ref, pos_des, 6*sizeof(COORD3D));                   // pos_ref = posición actual
		proyeccion (wk.rt.pos_ref, sh.mv.pos_ref);                         // proyecta la posición de referencia sobre el plano actual
		for (byte pata=0; pata<6; pata++) {
    527a:	b6 e0       	ldi	r27, 0x06	; 6
    527c:	2b 16       	cp	r2, r27
    527e:	31 04       	cpc	r3, r1
    5280:	09 f0       	breq	.+2      	; 0x5284 <_ZN10Movimiento13caminata_initEv+0x2d2>
    5282:	83 cf       	rjmp	.-250    	; 0x518a <_ZN10Movimiento13caminata_initEv+0x1d8>
    5284:	12 c0       	rjmp	.+36     	; 0x52aa <_ZN10Movimiento13caminata_initEv+0x2f8>
			wk.rt.comp [pata] = producto(resta(sh.mv.pos_ref[pata], wk.rt.pos_ref[pata]), .5/wk.rt.ciclo);  // calcula el factor de corrección
		} 
	} else {
		memcpy (wk.rt.pos_ref, sh.mv.pos_ref, 6*sizeof(COORD3D));           // wt.rt.pos_ref es la posición de referencia usada en el runtime
    5286:	d9 01       	movw	r26, r18
    5288:	f2 01       	movw	r30, r4
    528a:	e8 56       	subi	r30, 0x68	; 104
    528c:	fe 4f       	sbci	r31, 0xFE	; 254
    528e:	88 e4       	ldi	r24, 0x48	; 72
    5290:	01 90       	ld	r0, Z+
    5292:	0d 92       	st	X+, r0
    5294:	81 50       	subi	r24, 0x01	; 1
    5296:	e1 f7       	brne	.-8      	; 0x5290 <_ZN10Movimiento13caminata_initEv+0x2de>
		ec_plano (wk.rt.pos_ref, &wk.rt.normal, &wk.rt.d);                // ecuación del plano de dicha posición
    5298:	b2 01       	movw	r22, r4
    529a:	68 57       	subi	r22, 0x78	; 120
    529c:	7e 4f       	sbci	r23, 0xFE	; 254
    529e:	a2 01       	movw	r20, r4
    52a0:	4c 56       	subi	r20, 0x6C	; 108
    52a2:	5e 4f       	sbci	r21, 0xFE	; 254
    52a4:	c9 01       	movw	r24, r18
    52a6:	0e 94 3f 44 	call	0x887e	; 0x887e <_Z8ec_planoP7COORD3DS0_Pf>
	}
	
	sh.cn.tick = wk.mv.periodo_pasos*(wk.rt.index%wk.mv.agrupamiento);   // esto equivale a inicializarlo en 0, tiene el efecto de que arranque dando un pasito
    52aa:	f2 01       	movw	r30, r4
    52ac:	e0 58       	subi	r30, 0x80	; 128
    52ae:	fe 4f       	sbci	r31, 0xFE	; 254
    52b0:	2c eb       	ldi	r18, 0xBC	; 188
    52b2:	30 e0       	ldi	r19, 0x00	; 0
    52b4:	42 0e       	add	r4, r18
    52b6:	53 1e       	adc	r5, r19
    52b8:	d2 01       	movw	r26, r4
    52ba:	6c 91       	ld	r22, X
    52bc:	80 81       	ld	r24, Z
    52be:	90 e0       	ldi	r25, 0x00	; 0
    52c0:	70 e0       	ldi	r23, 0x00	; 0
    52c2:	0e 94 f1 7e 	call	0xfde2	; 0xfde2 <__udivmodhi4>
    52c6:	e3 e0       	ldi	r30, 0x03	; 3
    52c8:	f0 e0       	ldi	r31, 0x00	; 0
    52ca:	4e 0e       	add	r4, r30
    52cc:	5f 1e       	adc	r5, r31
    52ce:	d2 01       	movw	r26, r4
    52d0:	2d 91       	ld	r18, X+
    52d2:	3c 91       	ld	r19, X
    52d4:	fc 01       	movw	r30, r24
    52d6:	e2 9f       	mul	r30, r18
    52d8:	c0 01       	movw	r24, r0
    52da:	e3 9f       	mul	r30, r19
    52dc:	90 0d       	add	r25, r0
    52de:	f2 9f       	mul	r31, r18
    52e0:	90 0d       	add	r25, r0
    52e2:	11 24       	eor	r1, r1
    52e4:	27 e2       	ldi	r18, 0x27	; 39
    52e6:	31 e0       	ldi	r19, 0x01	; 1
    52e8:	42 0e       	add	r4, r18
    52ea:	53 1e       	adc	r5, r19
    52ec:	d2 01       	movw	r26, r4
    52ee:	8d 93       	st	X+, r24
    52f0:	9c 93       	st	X, r25
	
}
    52f2:	6a 96       	adiw	r28, 0x1a	; 26
    52f4:	0f b6       	in	r0, 0x3f	; 63
    52f6:	f8 94       	cli
    52f8:	de bf       	out	0x3e, r29	; 62
    52fa:	0f be       	out	0x3f, r0	; 63
    52fc:	cd bf       	out	0x3d, r28	; 61
    52fe:	cf 91       	pop	r28
    5300:	df 91       	pop	r29
    5302:	1f 91       	pop	r17
    5304:	0f 91       	pop	r16
    5306:	ff 90       	pop	r15
    5308:	ef 90       	pop	r14
    530a:	df 90       	pop	r13
    530c:	cf 90       	pop	r12
    530e:	bf 90       	pop	r11
    5310:	af 90       	pop	r10
    5312:	9f 90       	pop	r9
    5314:	8f 90       	pop	r8
    5316:	7f 90       	pop	r7
    5318:	6f 90       	pop	r6
    531a:	5f 90       	pop	r5
    531c:	4f 90       	pop	r4
    531e:	3f 90       	pop	r3
    5320:	2f 90       	pop	r2
    5322:	08 95       	ret

00005324 <_ZN10Movimiento5startEv>:
	caminata_init2 ();
		
}

// reinicia el movimiento
void Movimiento::start () {
    5324:	cf 93       	push	r28
    5326:	df 93       	push	r29
    5328:	ec 01       	movw	r28, r24
	switch (sh.cn.mode) {
    532a:	cb 51       	subi	r28, 0x1B	; 27
    532c:	de 4f       	sbci	r29, 0xFE	; 254
    532e:	88 81       	ld	r24, Y
    5330:	c5 5e       	subi	r28, 0xE5	; 229
    5332:	d1 40       	sbci	r29, 0x01	; 1
    5334:	88 23       	and	r24, r24
    5336:	19 f0       	breq	.+6      	; 0x533e <_ZN10Movimiento5startEv+0x1a>
    5338:	81 30       	cpi	r24, 0x01	; 1
    533a:	59 f4       	brne	.+22     	; 0x5352 <_ZN10Movimiento5startEv+0x2e>
    533c:	04 c0       	rjmp	.+8      	; 0x5346 <_ZN10Movimiento5startEv+0x22>
		case CAMINATA:
			caminata_init ();
    533e:	ce 01       	movw	r24, r28
    5340:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <_ZN10Movimiento13caminata_initEv>
    5344:	06 c0       	rjmp	.+12     	; 0x5352 <_ZN10Movimiento5startEv+0x2e>
			break;
		case TRONCO:
			sh.cn.tick = 0;         // la tronco_init () se reduce a esto
    5346:	ca 51       	subi	r28, 0x1A	; 26
    5348:	de 4f       	sbci	r29, 0xFE	; 254
    534a:	19 82       	std	Y+1, r1	; 0x01
    534c:	18 82       	st	Y, r1
    534e:	c6 5e       	subi	r28, 0xE6	; 230
    5350:	d1 40       	sbci	r29, 0x01	; 1
			break;
	}
	
	// common
	sh.cn.pausa = 1000*TICK*sh.mv.escala;
    5352:	c0 52       	subi	r28, 0x20	; 32
    5354:	de 4f       	sbci	r29, 0xFE	; 254
    5356:	68 81       	ld	r22, Y
    5358:	70 e0       	ldi	r23, 0x00	; 0
    535a:	88 27       	eor	r24, r24
    535c:	77 fd       	sbrc	r23, 7
    535e:	80 95       	com	r24
    5360:	98 2f       	mov	r25, r24
    5362:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    5366:	20 e0       	ldi	r18, 0x00	; 0
    5368:	30 e0       	ldi	r19, 0x00	; 0
    536a:	40 e8       	ldi	r20, 0x80	; 128
    536c:	50 e4       	ldi	r21, 0x40	; 64
    536e:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    5372:	0e 94 30 7b 	call	0xf660	; 0xf660 <__fixsfsi>
    5376:	28 96       	adiw	r28, 0x08	; 8
    5378:	79 83       	std	Y+1, r23	; 0x01
    537a:	68 83       	st	Y, r22
	sh.cn.enable = true;
    537c:	24 97       	sbiw	r28, 0x04	; 4
    537e:	81 e0       	ldi	r24, 0x01	; 1
    5380:	88 83       	st	Y, r24
}
    5382:	df 91       	pop	r29
    5384:	cf 91       	pop	r28
    5386:	08 95       	ret

00005388 <_ZN10Movimiento8caminataEb>:
		sh.mv.nsegmentos = nsegmentos;
		
}

// ejecución de la caminata
void Movimiento::caminata (bool compensate) {  
    5388:	fc 01       	movw	r30, r24
	
	// variables de control
	wk.mv.compensate = compensate;                     // revisar esta lógica (compensate deberia ser una variable de control, por ejemplo)
    538a:	ed 53       	subi	r30, 0x3D	; 61
    538c:	ff 4f       	sbci	r31, 0xFF	; 255
    538e:	60 83       	st	Z, r22
	if (!sh.cn.enable || sh.cn.mode!=CAMINATA) { 
    5390:	ef 5d       	subi	r30, 0xDF	; 223
    5392:	fe 4f       	sbci	r31, 0xFE	; 254
    5394:	80 81       	ld	r24, Z
    5396:	e4 5e       	subi	r30, 0xE4	; 228
    5398:	f1 40       	sbci	r31, 0x01	; 1
    539a:	88 23       	and	r24, r24
    539c:	39 f0       	breq	.+14     	; 0x53ac <_ZN10Movimiento8caminataEb+0x24>
    539e:	eb 51       	subi	r30, 0x1B	; 27
    53a0:	fe 4f       	sbci	r31, 0xFE	; 254
    53a2:	80 81       	ld	r24, Z
    53a4:	e5 5e       	subi	r30, 0xE5	; 229
    53a6:	f1 40       	sbci	r31, 0x01	; 1
    53a8:	88 23       	and	r24, r24
    53aa:	49 f0       	breq	.+18     	; 0x53be <_ZN10Movimiento8caminataEb+0x36>
		sh.cn.mode = CAMINATA;
    53ac:	eb 51       	subi	r30, 0x1B	; 27
    53ae:	fe 4f       	sbci	r31, 0xFE	; 254
    53b0:	10 82       	st	Z, r1
    53b2:	e5 5e       	subi	r30, 0xE5	; 229
    53b4:	f1 40       	sbci	r31, 0x01	; 1
		start ();
    53b6:	cf 01       	movw	r24, r30
    53b8:	0e 94 92 29 	call	0x5324	; 0x5324 <_ZN10Movimiento5startEv>
    53bc:	08 95       	ret
	} else {
		caminata_init2 ();
    53be:	cf 01       	movw	r24, r30
    53c0:	0e 94 11 27 	call	0x4e22	; 0x4e22 <_ZN10Movimiento14caminata_init2Ev>
    53c4:	08 95       	ret

000053c6 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf>:
}

///////////////////////////////////////// MISC. & PRIVATE /////////////////////////////////////////

// convierte parámetros "inteligentes" en parámetros "RAW" 
void Movimiento::set_values (float velocidad, float desplazamiento, bool curva, COORD2D centro, float angulo, byte marcha, float largo_pasos) {
    53c6:	2f 92       	push	r2
    53c8:	3f 92       	push	r3
    53ca:	4f 92       	push	r4
    53cc:	5f 92       	push	r5
    53ce:	6f 92       	push	r6
    53d0:	7f 92       	push	r7
    53d2:	8f 92       	push	r8
    53d4:	9f 92       	push	r9
    53d6:	af 92       	push	r10
    53d8:	bf 92       	push	r11
    53da:	cf 92       	push	r12
    53dc:	df 92       	push	r13
    53de:	ef 92       	push	r14
    53e0:	ff 92       	push	r15
    53e2:	0f 93       	push	r16
    53e4:	1f 93       	push	r17
    53e6:	df 93       	push	r29
    53e8:	cf 93       	push	r28
    53ea:	cd b7       	in	r28, 0x3d	; 61
    53ec:	de b7       	in	r29, 0x3e	; 62
    53ee:	c6 57       	subi	r28, 0x76	; 118
    53f0:	d0 40       	sbci	r29, 0x00	; 0
    53f2:	0f b6       	in	r0, 0x3f	; 63
    53f4:	f8 94       	cli
    53f6:	de bf       	out	0x3e, r29	; 62
    53f8:	0f be       	out	0x3f, r0	; 63
    53fa:	cd bf       	out	0x3d, r28	; 61
    53fc:	6a 96       	adiw	r28, 0x1a	; 26
    53fe:	9f af       	std	Y+63, r25	; 0x3f
    5400:	8e af       	std	Y+62, r24	; 0x3e
    5402:	6a 97       	sbiw	r28, 0x1a	; 26
    5404:	6e 96       	adiw	r28, 0x1e	; 30
    5406:	4c af       	std	Y+60, r20	; 0x3c
    5408:	5d af       	std	Y+61, r21	; 0x3d
    540a:	6e af       	std	Y+62, r22	; 0x3e
    540c:	7f af       	std	Y+63, r23	; 0x3f
    540e:	6e 97       	sbiw	r28, 0x1e	; 30
    5410:	a2 96       	adiw	r28, 0x22	; 34
    5412:	0c af       	std	Y+60, r16	; 0x3c
    5414:	1d af       	std	Y+61, r17	; 0x3d
    5416:	2e af       	std	Y+62, r18	; 0x3e
    5418:	3f af       	std	Y+63, r19	; 0x3f
    541a:	a2 97       	sbiw	r28, 0x22	; 34
    541c:	a3 96       	adiw	r28, 0x23	; 35
    541e:	ef ae       	std	Y+63, r14	; 0x3f
    5420:	a3 97       	sbiw	r28, 0x23	; 35
		wk.mv.periodo_pasos = periodo_pasos;
		wk.mv.duracion_pasos = duracion_pasos;
		wk.mv.altura_pasito = altura_pasito;
		sh.mv.nsegmentos = nsegmentos;
		
}
    5422:	2d b7       	in	r18, 0x3d	; 61
    5424:	3e b7       	in	r19, 0x3e	; 62
    5426:	a9 96       	adiw	r28, 0x29	; 41
    5428:	3f af       	std	Y+63, r19	; 0x3f
    542a:	2e af       	std	Y+62, r18	; 0x3e
    542c:	a9 97       	sbiw	r28, 0x29	; 41
}

///////////////////////////////////////// MISC. & PRIVATE /////////////////////////////////////////

// convierte parámetros "inteligentes" en parámetros "RAW" 
void Movimiento::set_values (float velocidad, float desplazamiento, bool curva, COORD2D centro, float angulo, byte marcha, float largo_pasos) {
    542e:	c5 57       	subi	r28, 0x75	; 117
    5430:	df 4f       	sbci	r29, 0xFF	; 255
    5432:	38 81       	ld	r19, Y
    5434:	cb 58       	subi	r28, 0x8B	; 139
    5436:	d0 40       	sbci	r29, 0x00	; 0
    5438:	ae 96       	adiw	r28, 0x2e	; 46
    543a:	3f af       	std	Y+63, r19	; 0x3f
    543c:	ae 97       	sbiw	r28, 0x2e	; 46
    543e:	c4 57       	subi	r28, 0x74	; 116
    5440:	df 4f       	sbci	r29, 0xFF	; 255
    5442:	88 81       	ld	r24, Y
    5444:	cc 58       	subi	r28, 0x8C	; 140
    5446:	d0 40       	sbci	r29, 0x00	; 0
    5448:	af 96       	adiw	r28, 0x2f	; 47
    544a:	8f af       	std	Y+63, r24	; 0x3f
    544c:	af 97       	sbiw	r28, 0x2f	; 47
    544e:	c3 57       	subi	r28, 0x73	; 115
    5450:	df 4f       	sbci	r29, 0xFF	; 255
    5452:	98 81       	ld	r25, Y
    5454:	cd 58       	subi	r28, 0x8D	; 141
    5456:	d0 40       	sbci	r29, 0x00	; 0
    5458:	e0 96       	adiw	r28, 0x30	; 48
    545a:	9f af       	std	Y+63, r25	; 0x3f
    545c:	e0 97       	sbiw	r28, 0x30	; 48
    545e:	c2 57       	subi	r28, 0x72	; 114
    5460:	df 4f       	sbci	r29, 0xFF	; 255
    5462:	a8 81       	ld	r26, Y
    5464:	ce 58       	subi	r28, 0x8E	; 142
    5466:	d0 40       	sbci	r29, 0x00	; 0
    5468:	e1 96       	adiw	r28, 0x31	; 49
    546a:	af af       	std	Y+63, r26	; 0x3f
    546c:	e1 97       	sbiw	r28, 0x31	; 49
    546e:	c1 57       	subi	r28, 0x71	; 113
    5470:	df 4f       	sbci	r29, 0xFF	; 255
    5472:	b8 81       	ld	r27, Y
    5474:	cf 58       	subi	r28, 0x8F	; 143
    5476:	d0 40       	sbci	r29, 0x00	; 0
    5478:	aa 96       	adiw	r28, 0x2a	; 42
    547a:	bf af       	std	Y+63, r27	; 0x3f
    547c:	aa 97       	sbiw	r28, 0x2a	; 42
    547e:	c0 57       	subi	r28, 0x70	; 112
    5480:	df 4f       	sbci	r29, 0xFF	; 255
    5482:	e8 81       	ld	r30, Y
    5484:	c0 59       	subi	r28, 0x90	; 144
    5486:	d0 40       	sbci	r29, 0x00	; 0
    5488:	ab 96       	adiw	r28, 0x2b	; 43
    548a:	ef af       	std	Y+63, r30	; 0x3f
    548c:	ab 97       	sbiw	r28, 0x2b	; 43
    548e:	cf 56       	subi	r28, 0x6F	; 111
    5490:	df 4f       	sbci	r29, 0xFF	; 255
    5492:	f8 81       	ld	r31, Y
    5494:	c1 59       	subi	r28, 0x91	; 145
    5496:	d0 40       	sbci	r29, 0x00	; 0
    5498:	ac 96       	adiw	r28, 0x2c	; 44
    549a:	ff af       	std	Y+63, r31	; 0x3f
    549c:	ac 97       	sbiw	r28, 0x2c	; 44
    549e:	ce 56       	subi	r28, 0x6E	; 110
    54a0:	df 4f       	sbci	r29, 0xFF	; 255
    54a2:	28 81       	ld	r18, Y
    54a4:	c2 59       	subi	r28, 0x92	; 146
    54a6:	d0 40       	sbci	r29, 0x00	; 0
    54a8:	ad 96       	adiw	r28, 0x2d	; 45
    54aa:	2f af       	std	Y+63, r18	; 0x3f
    54ac:	ad 97       	sbiw	r28, 0x2d	; 45
  // si curva == true  -> caminata curva con centro [centro] y sentido = signo de [angulo]
  // todos los parámetros son en centímetros y en segundos.
  // marcha admite los valores 1, 2 y 3 (es el numero de patas simultáneas)  
  // desplazamiento < 0 -> movimiento infinito, detenerlo con stop();
  
  if (largo_pasos == 0) {
    54ae:	c8 56       	subi	r28, 0x68	; 104
    54b0:	df 4f       	sbci	r29, 0xFF	; 255
    54b2:	68 81       	ld	r22, Y
    54b4:	79 81       	ldd	r23, Y+1	; 0x01
    54b6:	8a 81       	ldd	r24, Y+2	; 0x02
    54b8:	9b 81       	ldd	r25, Y+3	; 0x03
    54ba:	c8 59       	subi	r28, 0x98	; 152
    54bc:	d0 40       	sbci	r29, 0x00	; 0
    54be:	20 e0       	ldi	r18, 0x00	; 0
    54c0:	30 e0       	ldi	r19, 0x00	; 0
    54c2:	40 e0       	ldi	r20, 0x00	; 0
    54c4:	50 e0       	ldi	r21, 0x00	; 0
    54c6:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    54ca:	88 23       	and	r24, r24
    54cc:	09 f0       	breq	.+2      	; 0x54d0 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x10a>
    54ce:	ea c0       	rjmp	.+468    	; 0x56a4 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x2de>
		// esta fórmula para calcular automáticamente el largo de los pasos, contempla la distancia entre las patas
		// pero igual da cualquier fruta, hay que corregirla
		largo_pasos = sigmoide (velocidad/7) * .335 * distancia (rel2abs (xyz2xz(sh.mv.pos_ref[0]), 0), rel2abs (xyz2xz(sh.mv.pos_ref[2]), 2)); 
    54d0:	6e 96       	adiw	r28, 0x1e	; 30
    54d2:	6c ad       	ldd	r22, Y+60	; 0x3c
    54d4:	7d ad       	ldd	r23, Y+61	; 0x3d
    54d6:	8e ad       	ldd	r24, Y+62	; 0x3e
    54d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    54da:	6e 97       	sbiw	r28, 0x1e	; 30
    54dc:	20 e0       	ldi	r18, 0x00	; 0
    54de:	30 e0       	ldi	r19, 0x00	; 0
    54e0:	40 ee       	ldi	r20, 0xE0	; 224
    54e2:	50 e4       	ldi	r21, 0x40	; 64
    54e4:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    54e8:	0e 94 d5 73 	call	0xe7aa	; 0xe7aa <_Z8sigmoided>
    54ec:	3b 01       	movw	r6, r22
    54ee:	4c 01       	movw	r8, r24
    54f0:	6a 96       	adiw	r28, 0x1a	; 26
    54f2:	ee ad       	ldd	r30, Y+62	; 0x3e
    54f4:	ff ad       	ldd	r31, Y+63	; 0x3f
    54f6:	6a 97       	sbiw	r28, 0x1a	; 26
    54f8:	e8 56       	subi	r30, 0x68	; 104
    54fa:	fe 4f       	sbci	r31, 0xFE	; 254
    54fc:	e0 80       	ld	r14, Z
    54fe:	f1 80       	ldd	r15, Z+1	; 0x01
    5500:	02 81       	ldd	r16, Z+2	; 0x02
    5502:	13 81       	ldd	r17, Z+3	; 0x03
    5504:	24 81       	ldd	r18, Z+4	; 0x04
    5506:	35 81       	ldd	r19, Z+5	; 0x05
    5508:	46 81       	ldd	r20, Z+6	; 0x06
    550a:	57 81       	ldd	r21, Z+7	; 0x07
    550c:	60 85       	ldd	r22, Z+8	; 0x08
    550e:	71 85       	ldd	r23, Z+9	; 0x09
    5510:	82 85       	ldd	r24, Z+10	; 0x0a
    5512:	93 85       	ldd	r25, Z+11	; 0x0b
    5514:	0e 94 ec 3c 	call	0x79d8	; 0x79d8 <_Z6xyz2xz7COORD3D>
    5518:	2c af       	std	Y+60, r18	; 0x3c
    551a:	3d af       	std	Y+61, r19	; 0x3d
    551c:	4e af       	std	Y+62, r20	; 0x3e
    551e:	5f af       	std	Y+63, r21	; 0x3f
    5520:	fe 01       	movw	r30, r28
    5522:	e0 5c       	subi	r30, 0xC0	; 192
    5524:	ff 4f       	sbci	r31, 0xFF	; 255
    5526:	60 83       	st	Z, r22
    5528:	fe 01       	movw	r30, r28
    552a:	ef 5b       	subi	r30, 0xBF	; 191
    552c:	ff 4f       	sbci	r31, 0xFF	; 255
    552e:	70 83       	st	Z, r23
    5530:	fe 01       	movw	r30, r28
    5532:	ee 5b       	subi	r30, 0xBE	; 190
    5534:	ff 4f       	sbci	r31, 0xFF	; 255
    5536:	80 83       	st	Z, r24
    5538:	fe 01       	movw	r30, r28
    553a:	ed 5b       	subi	r30, 0xBD	; 189
    553c:	ff 4f       	sbci	r31, 0xFF	; 255
    553e:	90 83       	st	Z, r25
    5540:	de 01       	movw	r26, r28
    5542:	1c 96       	adiw	r26, 0x0c	; 12
    5544:	fe 01       	movw	r30, r28
    5546:	fc 96       	adiw	r30, 0x3c	; 60
    5548:	88 e0       	ldi	r24, 0x08	; 8
    554a:	01 90       	ld	r0, Z+
    554c:	0d 92       	st	X+, r0
    554e:	81 50       	subi	r24, 0x01	; 1
    5550:	e1 f7       	brne	.-8      	; 0x554a <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x184>
    5552:	2c 85       	ldd	r18, Y+12	; 0x0c
    5554:	3d 85       	ldd	r19, Y+13	; 0x0d
    5556:	4e 85       	ldd	r20, Y+14	; 0x0e
    5558:	5f 85       	ldd	r21, Y+15	; 0x0f
    555a:	68 89       	ldd	r22, Y+16	; 0x10
    555c:	79 89       	ldd	r23, Y+17	; 0x11
    555e:	8a 89       	ldd	r24, Y+18	; 0x12
    5560:	9b 89       	ldd	r25, Y+19	; 0x13
    5562:	00 e0       	ldi	r16, 0x00	; 0
    5564:	0e 94 4d 43 	call	0x869a	; 0x869a <_Z7rel2abs7COORD2Dh>
    5568:	2c af       	std	Y+60, r18	; 0x3c
    556a:	3d af       	std	Y+61, r19	; 0x3d
    556c:	4e af       	std	Y+62, r20	; 0x3e
    556e:	5f af       	std	Y+63, r21	; 0x3f
    5570:	fe 01       	movw	r30, r28
    5572:	e0 5c       	subi	r30, 0xC0	; 192
    5574:	ff 4f       	sbci	r31, 0xFF	; 255
    5576:	60 83       	st	Z, r22
    5578:	fe 01       	movw	r30, r28
    557a:	ef 5b       	subi	r30, 0xBF	; 191
    557c:	ff 4f       	sbci	r31, 0xFF	; 255
    557e:	70 83       	st	Z, r23
    5580:	fe 01       	movw	r30, r28
    5582:	ee 5b       	subi	r30, 0xBE	; 190
    5584:	ff 4f       	sbci	r31, 0xFF	; 255
    5586:	80 83       	st	Z, r24
    5588:	fe 01       	movw	r30, r28
    558a:	ed 5b       	subi	r30, 0xBD	; 189
    558c:	ff 4f       	sbci	r31, 0xFF	; 255
    558e:	90 83       	st	Z, r25
    5590:	de 01       	movw	r26, r28
    5592:	54 96       	adiw	r26, 0x14	; 20
    5594:	fe 01       	movw	r30, r28
    5596:	fc 96       	adiw	r30, 0x3c	; 60
    5598:	88 e0       	ldi	r24, 0x08	; 8
    559a:	01 90       	ld	r0, Z+
    559c:	0d 92       	st	X+, r0
    559e:	81 50       	subi	r24, 0x01	; 1
    55a0:	e1 f7       	brne	.-8      	; 0x559a <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x1d4>
    55a2:	6a 96       	adiw	r28, 0x1a	; 26
    55a4:	ee ad       	ldd	r30, Y+62	; 0x3e
    55a6:	ff ad       	ldd	r31, Y+63	; 0x3f
    55a8:	6a 97       	sbiw	r28, 0x1a	; 26
    55aa:	e0 55       	subi	r30, 0x50	; 80
    55ac:	fe 4f       	sbci	r31, 0xFE	; 254
    55ae:	e0 80       	ld	r14, Z
    55b0:	f1 80       	ldd	r15, Z+1	; 0x01
    55b2:	02 81       	ldd	r16, Z+2	; 0x02
    55b4:	13 81       	ldd	r17, Z+3	; 0x03
    55b6:	24 81       	ldd	r18, Z+4	; 0x04
    55b8:	35 81       	ldd	r19, Z+5	; 0x05
    55ba:	46 81       	ldd	r20, Z+6	; 0x06
    55bc:	57 81       	ldd	r21, Z+7	; 0x07
    55be:	60 85       	ldd	r22, Z+8	; 0x08
    55c0:	71 85       	ldd	r23, Z+9	; 0x09
    55c2:	82 85       	ldd	r24, Z+10	; 0x0a
    55c4:	93 85       	ldd	r25, Z+11	; 0x0b
    55c6:	0e 94 ec 3c 	call	0x79d8	; 0x79d8 <_Z6xyz2xz7COORD3D>
    55ca:	2c af       	std	Y+60, r18	; 0x3c
    55cc:	3d af       	std	Y+61, r19	; 0x3d
    55ce:	4e af       	std	Y+62, r20	; 0x3e
    55d0:	5f af       	std	Y+63, r21	; 0x3f
    55d2:	fe 01       	movw	r30, r28
    55d4:	e0 5c       	subi	r30, 0xC0	; 192
    55d6:	ff 4f       	sbci	r31, 0xFF	; 255
    55d8:	60 83       	st	Z, r22
    55da:	fe 01       	movw	r30, r28
    55dc:	ef 5b       	subi	r30, 0xBF	; 191
    55de:	ff 4f       	sbci	r31, 0xFF	; 255
    55e0:	70 83       	st	Z, r23
    55e2:	fe 01       	movw	r30, r28
    55e4:	ee 5b       	subi	r30, 0xBE	; 190
    55e6:	ff 4f       	sbci	r31, 0xFF	; 255
    55e8:	80 83       	st	Z, r24
    55ea:	fe 01       	movw	r30, r28
    55ec:	ed 5b       	subi	r30, 0xBD	; 189
    55ee:	ff 4f       	sbci	r31, 0xFF	; 255
    55f0:	90 83       	st	Z, r25
    55f2:	de 01       	movw	r26, r28
    55f4:	5c 96       	adiw	r26, 0x1c	; 28
    55f6:	fe 01       	movw	r30, r28
    55f8:	fc 96       	adiw	r30, 0x3c	; 60
    55fa:	88 e0       	ldi	r24, 0x08	; 8
    55fc:	01 90       	ld	r0, Z+
    55fe:	0d 92       	st	X+, r0
    5600:	81 50       	subi	r24, 0x01	; 1
    5602:	e1 f7       	brne	.-8      	; 0x55fc <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x236>
    5604:	2c 8d       	ldd	r18, Y+28	; 0x1c
    5606:	3d 8d       	ldd	r19, Y+29	; 0x1d
    5608:	4e 8d       	ldd	r20, Y+30	; 0x1e
    560a:	5f 8d       	ldd	r21, Y+31	; 0x1f
    560c:	68 a1       	ldd	r22, Y+32	; 0x20
    560e:	79 a1       	ldd	r23, Y+33	; 0x21
    5610:	8a a1       	ldd	r24, Y+34	; 0x22
    5612:	9b a1       	ldd	r25, Y+35	; 0x23
    5614:	02 e0       	ldi	r16, 0x02	; 2
    5616:	0e 94 4d 43 	call	0x869a	; 0x869a <_Z7rel2abs7COORD2Dh>
    561a:	2c af       	std	Y+60, r18	; 0x3c
    561c:	3d af       	std	Y+61, r19	; 0x3d
    561e:	4e af       	std	Y+62, r20	; 0x3e
    5620:	5f af       	std	Y+63, r21	; 0x3f
    5622:	fe 01       	movw	r30, r28
    5624:	e0 5c       	subi	r30, 0xC0	; 192
    5626:	ff 4f       	sbci	r31, 0xFF	; 255
    5628:	60 83       	st	Z, r22
    562a:	fe 01       	movw	r30, r28
    562c:	ef 5b       	subi	r30, 0xBF	; 191
    562e:	ff 4f       	sbci	r31, 0xFF	; 255
    5630:	70 83       	st	Z, r23
    5632:	fe 01       	movw	r30, r28
    5634:	ee 5b       	subi	r30, 0xBE	; 190
    5636:	ff 4f       	sbci	r31, 0xFF	; 255
    5638:	80 83       	st	Z, r24
    563a:	fe 01       	movw	r30, r28
    563c:	ed 5b       	subi	r30, 0xBD	; 189
    563e:	ff 4f       	sbci	r31, 0xFF	; 255
    5640:	90 83       	st	Z, r25
    5642:	de 01       	movw	r26, r28
    5644:	94 96       	adiw	r26, 0x24	; 36
    5646:	fe 01       	movw	r30, r28
    5648:	fc 96       	adiw	r30, 0x3c	; 60
    564a:	88 e0       	ldi	r24, 0x08	; 8
    564c:	01 90       	ld	r0, Z+
    564e:	0d 92       	st	X+, r0
    5650:	81 50       	subi	r24, 0x01	; 1
    5652:	e1 f7       	brne	.-8      	; 0x564c <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x286>
    5654:	2c 89       	ldd	r18, Y+20	; 0x14
    5656:	3d 89       	ldd	r19, Y+21	; 0x15
    5658:	4e 89       	ldd	r20, Y+22	; 0x16
    565a:	5f 89       	ldd	r21, Y+23	; 0x17
    565c:	68 8d       	ldd	r22, Y+24	; 0x18
    565e:	79 8d       	ldd	r23, Y+25	; 0x19
    5660:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5662:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5664:	ac a0       	ldd	r10, Y+36	; 0x24
    5666:	bd a0       	ldd	r11, Y+37	; 0x25
    5668:	ce a0       	ldd	r12, Y+38	; 0x26
    566a:	df a0       	ldd	r13, Y+39	; 0x27
    566c:	e8 a4       	ldd	r14, Y+40	; 0x28
    566e:	f9 a4       	ldd	r15, Y+41	; 0x29
    5670:	0a a5       	ldd	r16, Y+42	; 0x2a
    5672:	1b a5       	ldd	r17, Y+43	; 0x2b
    5674:	0e 94 b3 48 	call	0x9166	; 0x9166 <_Z9distancia7COORD2DS_>
    5678:	7b 01       	movw	r14, r22
    567a:	8c 01       	movw	r16, r24
    567c:	c4 01       	movw	r24, r8
    567e:	b3 01       	movw	r22, r6
    5680:	2f e1       	ldi	r18, 0x1F	; 31
    5682:	35 e8       	ldi	r19, 0x85	; 133
    5684:	4b ea       	ldi	r20, 0xAB	; 171
    5686:	5e e3       	ldi	r21, 0x3E	; 62
    5688:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    568c:	a8 01       	movw	r20, r16
    568e:	97 01       	movw	r18, r14
    5690:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    5694:	c8 56       	subi	r28, 0x68	; 104
    5696:	df 4f       	sbci	r29, 0xFF	; 255
    5698:	68 83       	st	Y, r22
    569a:	79 83       	std	Y+1, r23	; 0x01
    569c:	8a 83       	std	Y+2, r24	; 0x02
    569e:	9b 83       	std	Y+3, r25	; 0x03
    56a0:	c8 59       	subi	r28, 0x98	; 152
    56a2:	d0 40       	sbci	r29, 0x00	; 0
	/* 1) En este mega-loop, vamos a calcular: 
	           K (relación entre duracion_paso y periodo_sub_ciclo), agrupamiento, periodo_sub_ciclo, marcha y fases */
  byte agrupamiento = 0, Amax = 0, fases;
  int periodo_sub_ciclo;
  float K = 0, Kmax = 0;
  marcha --;                     // marcha se va a incrementar por lo menos 1 vez
    56a4:	c9 56       	subi	r28, 0x69	; 105
    56a6:	df 4f       	sbci	r29, 0xFF	; 255
    56a8:	88 81       	ld	r24, Y
    56aa:	c7 59       	subi	r28, 0x97	; 151
    56ac:	d0 40       	sbci	r29, 0x00	; 0
    56ae:	68 2e       	mov	r6, r24
    56b0:	6a 94       	dec	r6
    56b2:	68 96       	adiw	r28, 0x18	; 24
    56b4:	1f ae       	std	Y+63, r1	; 0x3f
    56b6:	68 97       	sbiw	r28, 0x18	; 24
    56b8:	67 96       	adiw	r28, 0x17	; 23
    56ba:	1f ae       	std	Y+63, r1	; 0x3f
    56bc:	67 97       	sbiw	r28, 0x17	; 23
    56be:	0f 2e       	mov	r0, r31
    56c0:	f0 e0       	ldi	r31, 0x00	; 0
    56c2:	2f 2e       	mov	r2, r31
    56c4:	f0 e0       	ldi	r31, 0x00	; 0
    56c6:	3f 2e       	mov	r3, r31
    56c8:	f0 e0       	ldi	r31, 0x00	; 0
    56ca:	4f 2e       	mov	r4, r31
    56cc:	f0 e0       	ldi	r31, 0x00	; 0
    56ce:	5f 2e       	mov	r5, r31
    56d0:	f0 2d       	mov	r31, r0
    56d2:	63 96       	adiw	r28, 0x13	; 19
    56d4:	2c ae       	std	Y+60, r2	; 0x3c
    56d6:	3d ae       	std	Y+61, r3	; 0x3d
    56d8:	4e ae       	std	Y+62, r4	; 0x3e
    56da:	5f ae       	std	Y+63, r5	; 0x3f
    56dc:	63 97       	sbiw	r28, 0x13	; 19
          fases = 6 / marcha;
          agrupamiento = 0;
        } else {break;}
      }
    }
    periodo_sub_ciclo = -largo_pasos*agrupamiento/(velocidad*TICK*(K*agrupamiento-fases));  // [velocidad*TICK] es [velocidad*TICK*escala], pero escala=1 en este momento.
    56de:	c8 56       	subi	r28, 0x68	; 104
    56e0:	df 4f       	sbci	r29, 0xFF	; 255
    56e2:	88 81       	ld	r24, Y
    56e4:	99 81       	ldd	r25, Y+1	; 0x01
    56e6:	aa 81       	ldd	r26, Y+2	; 0x02
    56e8:	bb 81       	ldd	r27, Y+3	; 0x03
    56ea:	c8 59       	subi	r28, 0x98	; 152
    56ec:	d0 40       	sbci	r29, 0x00	; 0
    56ee:	b0 58       	subi	r27, 0x80	; 128
    56f0:	e7 96       	adiw	r28, 0x37	; 55
    56f2:	8c af       	std	Y+60, r24	; 0x3c
    56f4:	9d af       	std	Y+61, r25	; 0x3d
    56f6:	ae af       	std	Y+62, r26	; 0x3e
    56f8:	bf af       	std	Y+63, r27	; 0x3f
    56fa:	e7 97       	sbiw	r28, 0x37	; 55
  byte agrupamiento = 0, Amax = 0, fases;
  int periodo_sub_ciclo;
  float K = 0, Kmax = 0;
  marcha --;                     // marcha se va a incrementar por lo menos 1 vez
  do {
    if (K < Kmax-2*Kinc*(agrupamiento-1)) { // esto es otra manera de prevenir el overflow (antes era K < Kmax) 
    56fc:	68 96       	adiw	r28, 0x18	; 24
    56fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    5700:	68 97       	sbiw	r28, 0x18	; 24
    5702:	69 2f       	mov	r22, r25
    5704:	70 e0       	ldi	r23, 0x00	; 0
    5706:	61 50       	subi	r22, 0x01	; 1
    5708:	70 40       	sbci	r23, 0x00	; 0
    570a:	88 27       	eor	r24, r24
    570c:	77 fd       	sbrc	r23, 7
    570e:	80 95       	com	r24
    5710:	98 2f       	mov	r25, r24
    5712:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    5716:	2d ec       	ldi	r18, 0xCD	; 205
    5718:	3c ec       	ldi	r19, 0xCC	; 204
    571a:	4c e4       	ldi	r20, 0x4C	; 76
    571c:	5e eb       	ldi	r21, 0xBE	; 190
    571e:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    5722:	9b 01       	movw	r18, r22
    5724:	ac 01       	movw	r20, r24
    5726:	63 96       	adiw	r28, 0x13	; 19
    5728:	6c ad       	ldd	r22, Y+60	; 0x3c
    572a:	7d ad       	ldd	r23, Y+61	; 0x3d
    572c:	8e ad       	ldd	r24, Y+62	; 0x3e
    572e:	9f ad       	ldd	r25, Y+63	; 0x3f
    5730:	63 97       	sbiw	r28, 0x13	; 19
    5732:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    5736:	9b 01       	movw	r18, r22
    5738:	ac 01       	movw	r20, r24
    573a:	c2 01       	movw	r24, r4
    573c:	b1 01       	movw	r22, r2
    573e:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    5742:	88 23       	and	r24, r24
    5744:	5c f4       	brge	.+22     	; 0x575c <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x396>
      // K = min (K + .05, Kmax);            // esto previene el overflow, que después provoca errores en el cálculo de 'periodo_pasos'
      K += Kinc;
    5746:	c2 01       	movw	r24, r4
    5748:	b1 01       	movw	r22, r2
    574a:	2d ec       	ldi	r18, 0xCD	; 205
    574c:	3c ec       	ldi	r19, 0xCC	; 204
    574e:	4c ec       	ldi	r20, 0xCC	; 204
    5750:	5d e3       	ldi	r21, 0x3D	; 61
    5752:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    5756:	1b 01       	movw	r2, r22
    5758:	2c 01       	movw	r4, r24
    575a:	4e c0       	rjmp	.+156    	; 0x57f8 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x432>
    } else {
      if (agrupamiento < Amax) {
    575c:	68 96       	adiw	r28, 0x18	; 24
    575e:	af ad       	ldd	r26, Y+63	; 0x3f
    5760:	68 97       	sbiw	r28, 0x18	; 24
    5762:	67 96       	adiw	r28, 0x17	; 23
    5764:	bf ad       	ldd	r27, Y+63	; 0x3f
    5766:	67 97       	sbiw	r28, 0x17	; 23
    5768:	ab 17       	cp	r26, r27
    576a:	60 f5       	brcc	.+88     	; 0x57c4 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x3fe>
        agrupamiento ++;
    576c:	af 5f       	subi	r26, 0xFF	; 255
    576e:	68 96       	adiw	r28, 0x18	; 24
    5770:	af af       	std	Y+63, r26	; 0x3f
    5772:	68 97       	sbiw	r28, 0x18	; 24
        Kmax = 3.0/(marcha*agrupamiento*1.2);    // revisar esto
    5774:	a6 9d       	mul	r26, r6
    5776:	b0 01       	movw	r22, r0
    5778:	11 24       	eor	r1, r1
    577a:	88 27       	eor	r24, r24
    577c:	77 fd       	sbrc	r23, 7
    577e:	80 95       	com	r24
    5780:	98 2f       	mov	r25, r24
    5782:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    5786:	2a e9       	ldi	r18, 0x9A	; 154
    5788:	39 e9       	ldi	r19, 0x99	; 153
    578a:	49 e9       	ldi	r20, 0x99	; 153
    578c:	5f e3       	ldi	r21, 0x3F	; 63
    578e:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    5792:	9b 01       	movw	r18, r22
    5794:	ac 01       	movw	r20, r24
    5796:	60 e0       	ldi	r22, 0x00	; 0
    5798:	70 e0       	ldi	r23, 0x00	; 0
    579a:	80 e4       	ldi	r24, 0x40	; 64
    579c:	90 e4       	ldi	r25, 0x40	; 64
    579e:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    57a2:	63 96       	adiw	r28, 0x13	; 19
    57a4:	6c af       	std	Y+60, r22	; 0x3c
    57a6:	7d af       	std	Y+61, r23	; 0x3d
    57a8:	8e af       	std	Y+62, r24	; 0x3e
    57aa:	9f af       	std	Y+63, r25	; 0x3f
    57ac:	63 97       	sbiw	r28, 0x13	; 19
    57ae:	0f 2e       	mov	r0, r31
    57b0:	f3 ec       	ldi	r31, 0xC3	; 195
    57b2:	2f 2e       	mov	r2, r31
    57b4:	f5 ef       	ldi	r31, 0xF5	; 245
    57b6:	3f 2e       	mov	r3, r31
    57b8:	f8 ea       	ldi	r31, 0xA8	; 168
    57ba:	4f 2e       	mov	r4, r31
    57bc:	fe e3       	ldi	r31, 0x3E	; 62
    57be:	5f 2e       	mov	r5, r31
    57c0:	f0 2d       	mov	r31, r0
    57c2:	1a c0       	rjmp	.+52     	; 0x57f8 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x432>
        K = Kmin;
      } else {
        if (marcha < 3) {
    57c4:	e2 e0       	ldi	r30, 0x02	; 2
    57c6:	e6 15       	cp	r30, r6
    57c8:	08 f4       	brcc	.+2      	; 0x57cc <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x406>
    57ca:	74 c0       	rjmp	.+232    	; 0x58b4 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x4ee>
          marcha ++;
    57cc:	63 94       	inc	r6
          Amax = 3 / marcha;    // división entera: va a dar 1 si marcha>1
    57ce:	83 e0       	ldi	r24, 0x03	; 3
    57d0:	90 e0       	ldi	r25, 0x00	; 0
    57d2:	66 2d       	mov	r22, r6
    57d4:	70 e0       	ldi	r23, 0x00	; 0
    57d6:	0e 94 05 7f 	call	0xfe0a	; 0xfe0a <__divmodhi4>
    57da:	67 96       	adiw	r28, 0x17	; 23
    57dc:	6f af       	std	Y+63, r22	; 0x3f
    57de:	67 97       	sbiw	r28, 0x17	; 23
          fases = 6 / marcha;
    57e0:	86 e0       	ldi	r24, 0x06	; 6
    57e2:	90 e0       	ldi	r25, 0x00	; 0
    57e4:	66 2d       	mov	r22, r6
    57e6:	70 e0       	ldi	r23, 0x00	; 0
    57e8:	0e 94 05 7f 	call	0xfe0a	; 0xfe0a <__divmodhi4>
    57ec:	66 96       	adiw	r28, 0x16	; 22
    57ee:	6f af       	std	Y+63, r22	; 0x3f
    57f0:	66 97       	sbiw	r28, 0x16	; 22
    57f2:	68 96       	adiw	r28, 0x18	; 24
    57f4:	1f ae       	std	Y+63, r1	; 0x3f
    57f6:	68 97       	sbiw	r28, 0x18	; 24
          agrupamiento = 0;
        } else {break;}
      }
    }
    periodo_sub_ciclo = -largo_pasos*agrupamiento/(velocidad*TICK*(K*agrupamiento-fases));  // [velocidad*TICK] es [velocidad*TICK*escala], pero escala=1 en este momento.
    57f8:	68 96       	adiw	r28, 0x18	; 24
    57fa:	ff ad       	ldd	r31, Y+63	; 0x3f
    57fc:	68 97       	sbiw	r28, 0x18	; 24
    57fe:	6f 2f       	mov	r22, r31
    5800:	70 e0       	ldi	r23, 0x00	; 0
    5802:	88 27       	eor	r24, r24
    5804:	77 fd       	sbrc	r23, 7
    5806:	80 95       	com	r24
    5808:	98 2f       	mov	r25, r24
    580a:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    580e:	7b 01       	movw	r14, r22
    5810:	8c 01       	movw	r16, r24
    5812:	e7 96       	adiw	r28, 0x37	; 55
    5814:	6c ad       	ldd	r22, Y+60	; 0x3c
    5816:	7d ad       	ldd	r23, Y+61	; 0x3d
    5818:	8e ad       	ldd	r24, Y+62	; 0x3e
    581a:	9f ad       	ldd	r25, Y+63	; 0x3f
    581c:	e7 97       	sbiw	r28, 0x37	; 55
    581e:	a8 01       	movw	r20, r16
    5820:	97 01       	movw	r18, r14
    5822:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    5826:	a7 96       	adiw	r28, 0x27	; 39
    5828:	6c af       	std	Y+60, r22	; 0x3c
    582a:	7d af       	std	Y+61, r23	; 0x3d
    582c:	8e af       	std	Y+62, r24	; 0x3e
    582e:	9f af       	std	Y+63, r25	; 0x3f
    5830:	a7 97       	sbiw	r28, 0x27	; 39
    5832:	6e 96       	adiw	r28, 0x1e	; 30
    5834:	6c ad       	ldd	r22, Y+60	; 0x3c
    5836:	7d ad       	ldd	r23, Y+61	; 0x3d
    5838:	8e ad       	ldd	r24, Y+62	; 0x3e
    583a:	9f ad       	ldd	r25, Y+63	; 0x3f
    583c:	6e 97       	sbiw	r28, 0x1e	; 30
    583e:	2f e6       	ldi	r18, 0x6F	; 111
    5840:	32 e1       	ldi	r19, 0x12	; 18
    5842:	43 e8       	ldi	r20, 0x83	; 131
    5844:	5b e3       	ldi	r21, 0x3B	; 59
    5846:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    584a:	5b 01       	movw	r10, r22
    584c:	6c 01       	movw	r12, r24
    584e:	c2 01       	movw	r24, r4
    5850:	b1 01       	movw	r22, r2
    5852:	a8 01       	movw	r20, r16
    5854:	97 01       	movw	r18, r14
    5856:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    585a:	7b 01       	movw	r14, r22
    585c:	8c 01       	movw	r16, r24
    585e:	66 96       	adiw	r28, 0x16	; 22
    5860:	2f ad       	ldd	r18, Y+63	; 0x3f
    5862:	66 97       	sbiw	r28, 0x16	; 22
    5864:	62 2f       	mov	r22, r18
    5866:	70 e0       	ldi	r23, 0x00	; 0
    5868:	88 27       	eor	r24, r24
    586a:	77 fd       	sbrc	r23, 7
    586c:	80 95       	com	r24
    586e:	98 2f       	mov	r25, r24
    5870:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    5874:	9b 01       	movw	r18, r22
    5876:	ac 01       	movw	r20, r24
    5878:	c8 01       	movw	r24, r16
    587a:	b7 01       	movw	r22, r14
    587c:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    5880:	9b 01       	movw	r18, r22
    5882:	ac 01       	movw	r20, r24
    5884:	c6 01       	movw	r24, r12
    5886:	b5 01       	movw	r22, r10
    5888:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    588c:	9b 01       	movw	r18, r22
    588e:	ac 01       	movw	r20, r24
    5890:	a7 96       	adiw	r28, 0x27	; 39
    5892:	6c ad       	ldd	r22, Y+60	; 0x3c
    5894:	7d ad       	ldd	r23, Y+61	; 0x3d
    5896:	8e ad       	ldd	r24, Y+62	; 0x3e
    5898:	9f ad       	ldd	r25, Y+63	; 0x3f
    589a:	a7 97       	sbiw	r28, 0x27	; 39
    589c:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    58a0:	0e 94 30 7b 	call	0xf660	; 0xf660 <__fixsfsi>
    58a4:	65 96       	adiw	r28, 0x15	; 21
    58a6:	7f af       	std	Y+63, r23	; 0x3f
    58a8:	6e af       	std	Y+62, r22	; 0x3e
    58aa:	65 97       	sbiw	r28, 0x15	; 21
	           K (relación entre duracion_paso y periodo_sub_ciclo), agrupamiento, periodo_sub_ciclo, marcha y fases */
  byte agrupamiento = 0, Amax = 0, fases;
  int periodo_sub_ciclo;
  float K = 0, Kmax = 0;
  marcha --;                     // marcha se va a incrementar por lo menos 1 vez
  do {
    58ac:	63 38       	cpi	r22, 0x83	; 131
    58ae:	71 05       	cpc	r23, r1
    58b0:	0c f4       	brge	.+2      	; 0x58b4 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x4ee>
    58b2:	24 cf       	rjmp	.-440    	; 0x56fc <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x336>
    }
    periodo_sub_ciclo = -largo_pasos*agrupamiento/(velocidad*TICK*(K*agrupamiento-fases));  // [velocidad*TICK] es [velocidad*TICK*escala], pero escala=1 en este momento.
  } while (periodo_sub_ciclo < PERIODO_MIN_TICKS);
  
	// 2) vamos a elegir la secuencia
  byte secuencia [fases];
    58b4:	ad b7       	in	r26, 0x3d	; 61
    58b6:	be b7       	in	r27, 0x3e	; 62
    58b8:	66 96       	adiw	r28, 0x16	; 22
    58ba:	ef ad       	ldd	r30, Y+63	; 0x3f
    58bc:	66 97       	sbiw	r28, 0x16	; 22
    58be:	ae 1b       	sub	r26, r30
    58c0:	b1 09       	sbc	r27, r1
    58c2:	0f b6       	in	r0, 0x3f	; 63
    58c4:	f8 94       	cli
    58c6:	be bf       	out	0x3e, r27	; 62
    58c8:	0f be       	out	0x3f, r0	; 63
    58ca:	ad bf       	out	0x3d, r26	; 61
    58cc:	2d b7       	in	r18, 0x3d	; 61
    58ce:	3e b7       	in	r19, 0x3e	; 62
    58d0:	2f 5f       	subi	r18, 0xFF	; 255
    58d2:	3f 4f       	sbci	r19, 0xFF	; 255
    58d4:	e2 96       	adiw	r28, 0x32	; 50
    58d6:	2f af       	std	Y+63, r18	; 0x3f
    58d8:	e2 97       	sbiw	r28, 0x32	; 50
    58da:	e3 96       	adiw	r28, 0x33	; 51
    58dc:	3f af       	std	Y+63, r19	; 0x3f
    58de:	e3 97       	sbiw	r28, 0x33	; 51
  if (marcha == 1) {memcpy (secuencia, (byte[]){1, 16, 4, 8, 2, 32}, fases);}
    58e0:	f1 e0       	ldi	r31, 0x01	; 1
    58e2:	6f 16       	cp	r6, r31
    58e4:	69 f4       	brne	.+26     	; 0x5900 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x53a>
    58e6:	de 01       	movw	r26, r28
    58e8:	16 96       	adiw	r26, 0x06	; 6
    58ea:	e0 e6       	ldi	r30, 0x60	; 96
    58ec:	f4 e0       	ldi	r31, 0x04	; 4
    58ee:	86 e0       	ldi	r24, 0x06	; 6
    58f0:	01 90       	ld	r0, Z+
    58f2:	0d 92       	st	X+, r0
    58f4:	81 50       	subi	r24, 0x01	; 1
    58f6:	e1 f7       	brne	.-8      	; 0x58f0 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x52a>
    58f8:	9e 01       	movw	r18, r28
    58fa:	2a 5f       	subi	r18, 0xFA	; 250
    58fc:	3f 4f       	sbci	r19, 0xFF	; 255
    58fe:	0f c0       	rjmp	.+30     	; 0x591e <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x558>
  else if (marcha == 2) {memcpy (secuencia, (byte[]){33, 12, 18}, fases);}
    5900:	82 e0       	ldi	r24, 0x02	; 2
    5902:	68 16       	cp	r6, r24
    5904:	a1 f4       	brne	.+40     	; 0x592e <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x568>
    5906:	de 01       	movw	r26, r28
    5908:	13 96       	adiw	r26, 0x03	; 3
    590a:	ed e5       	ldi	r30, 0x5D	; 93
    590c:	f4 e0       	ldi	r31, 0x04	; 4
    590e:	83 e0       	ldi	r24, 0x03	; 3
    5910:	01 90       	ld	r0, Z+
    5912:	0d 92       	st	X+, r0
    5914:	81 50       	subi	r24, 0x01	; 1
    5916:	e1 f7       	brne	.-8      	; 0x5910 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x54a>
    5918:	9e 01       	movw	r18, r28
    591a:	2d 5f       	subi	r18, 0xFD	; 253
    591c:	3f 4f       	sbci	r19, 0xFF	; 255
    591e:	e2 96       	adiw	r28, 0x32	; 50
    5920:	8f ad       	ldd	r24, Y+63	; 0x3f
    5922:	e2 97       	sbiw	r28, 0x32	; 50
    5924:	e3 96       	adiw	r28, 0x33	; 51
    5926:	9f ad       	ldd	r25, Y+63	; 0x3f
    5928:	e3 97       	sbiw	r28, 0x33	; 51
    592a:	b9 01       	movw	r22, r18
    592c:	08 c0       	rjmp	.+16     	; 0x593e <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x578>
  else {memcpy (secuencia, (byte[]){42, 21}, fases);}
    592e:	8a e2       	ldi	r24, 0x2A	; 42
    5930:	89 83       	std	Y+1, r24	; 0x01
    5932:	85 e1       	ldi	r24, 0x15	; 21
    5934:	8a 83       	std	Y+2, r24	; 0x02
    5936:	c9 01       	movw	r24, r18
    5938:	be 01       	movw	r22, r28
    593a:	6f 5f       	subi	r22, 0xFF	; 255
    593c:	7f 4f       	sbci	r23, 0xFF	; 255
    593e:	66 96       	adiw	r28, 0x16	; 22
    5940:	4f ad       	ldd	r20, Y+63	; 0x3f
    5942:	66 97       	sbiw	r28, 0x16	; 22
    5944:	50 e0       	ldi	r21, 0x00	; 0
    5946:	0e 94 a7 81 	call	0x1034e	; 0x1034e <memcpy>
  /* otras secuencias que se podrían haber utilizado son {1, 2, 4, 8, 16, 32} y {1, 32, 4, 8, 2, 16}; */
  
  // 3) vamos a calcular: periodo_pasos, duracion_pasos
  int periodo_pasos;
  int duracion_pasos = K * periodo_sub_ciclo;
    594a:	65 96       	adiw	r28, 0x15	; 21
    594c:	ae ad       	ldd	r26, Y+62	; 0x3e
    594e:	bf ad       	ldd	r27, Y+63	; 0x3f
    5950:	65 97       	sbiw	r28, 0x15	; 21
    5952:	bd 01       	movw	r22, r26
    5954:	88 27       	eor	r24, r24
    5956:	77 fd       	sbrc	r23, 7
    5958:	80 95       	com	r24
    595a:	98 2f       	mov	r25, r24
    595c:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    5960:	5b 01       	movw	r10, r22
    5962:	6c 01       	movw	r12, r24
    5964:	c2 01       	movw	r24, r4
    5966:	b1 01       	movw	r22, r2
    5968:	a6 01       	movw	r20, r12
    596a:	95 01       	movw	r18, r10
    596c:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    5970:	0e 94 30 7b 	call	0xf660	; 0xf660 <__fixsfsi>
    5974:	3b 01       	movw	r6, r22
  if (agrupamiento == 1) {
    5976:	68 96       	adiw	r28, 0x18	; 24
    5978:	bf ad       	ldd	r27, Y+63	; 0x3f
    597a:	68 97       	sbiw	r28, 0x18	; 24
    597c:	b1 30       	cpi	r27, 0x01	; 1
    597e:	49 f4       	brne	.+18     	; 0x5992 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x5cc>
    5980:	65 96       	adiw	r28, 0x15	; 21
    5982:	ee ad       	ldd	r30, Y+62	; 0x3e
    5984:	ff ad       	ldd	r31, Y+63	; 0x3f
    5986:	65 97       	sbiw	r28, 0x15	; 21
    5988:	2f 96       	adiw	r28, 0x0f	; 15
    598a:	ff af       	std	Y+63, r31	; 0x3f
    598c:	ee af       	std	Y+62, r30	; 0x3e
    598e:	2f 97       	sbiw	r28, 0x0f	; 15
    5990:	2d c0       	rjmp	.+90     	; 0x59ec <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x626>
    periodo_pasos = periodo_sub_ciclo;
  } else {
    periodo_pasos = (Kmax - K) * periodo_sub_ciclo / agrupamiento + 2;    // revisar esto también   
    5992:	63 96       	adiw	r28, 0x13	; 19
    5994:	6c ad       	ldd	r22, Y+60	; 0x3c
    5996:	7d ad       	ldd	r23, Y+61	; 0x3d
    5998:	8e ad       	ldd	r24, Y+62	; 0x3e
    599a:	9f ad       	ldd	r25, Y+63	; 0x3f
    599c:	63 97       	sbiw	r28, 0x13	; 19
    599e:	a2 01       	movw	r20, r4
    59a0:	91 01       	movw	r18, r2
    59a2:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    59a6:	a6 01       	movw	r20, r12
    59a8:	95 01       	movw	r18, r10
    59aa:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    59ae:	7b 01       	movw	r14, r22
    59b0:	8c 01       	movw	r16, r24
    59b2:	68 96       	adiw	r28, 0x18	; 24
    59b4:	ff ad       	ldd	r31, Y+63	; 0x3f
    59b6:	68 97       	sbiw	r28, 0x18	; 24
    59b8:	6f 2f       	mov	r22, r31
    59ba:	70 e0       	ldi	r23, 0x00	; 0
    59bc:	88 27       	eor	r24, r24
    59be:	77 fd       	sbrc	r23, 7
    59c0:	80 95       	com	r24
    59c2:	98 2f       	mov	r25, r24
    59c4:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    59c8:	9b 01       	movw	r18, r22
    59ca:	ac 01       	movw	r20, r24
    59cc:	c8 01       	movw	r24, r16
    59ce:	b7 01       	movw	r22, r14
    59d0:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    59d4:	20 e0       	ldi	r18, 0x00	; 0
    59d6:	30 e0       	ldi	r19, 0x00	; 0
    59d8:	40 e0       	ldi	r20, 0x00	; 0
    59da:	50 e4       	ldi	r21, 0x40	; 64
    59dc:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    59e0:	0e 94 30 7b 	call	0xf660	; 0xf660 <__fixsfsi>
    59e4:	2f 96       	adiw	r28, 0x0f	; 15
    59e6:	7f af       	std	Y+63, r23	; 0x3f
    59e8:	6e af       	std	Y+62, r22	; 0x3e
    59ea:	2f 97       	sbiw	r28, 0x0f	; 15
  }
   
  // 4) vamos a calcular: escala (y escalar los 3 parámetros anteriores)
  byte escala = min (min(duracion_pasos, periodo_pasos), periodo_sub_ciclo) / 4;  // esto hace que luego del escalamiento, el parámetro más chico valga 4
    59ec:	2f 96       	adiw	r28, 0x0f	; 15
    59ee:	8e ad       	ldd	r24, Y+62	; 0x3e
    59f0:	9f ad       	ldd	r25, Y+63	; 0x3f
    59f2:	2f 97       	sbiw	r28, 0x0f	; 15
    59f4:	68 16       	cp	r6, r24
    59f6:	79 06       	cpc	r7, r25
    59f8:	0c f4       	brge	.+2      	; 0x59fc <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x636>
    59fa:	c3 01       	movw	r24, r6
    59fc:	65 96       	adiw	r28, 0x15	; 21
    59fe:	2e ad       	ldd	r18, Y+62	; 0x3e
    5a00:	3f ad       	ldd	r19, Y+63	; 0x3f
    5a02:	65 97       	sbiw	r28, 0x15	; 21
    5a04:	82 17       	cp	r24, r18
    5a06:	93 07       	cpc	r25, r19
    5a08:	74 f4       	brge	.+28     	; 0x5a26 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x660>
    5a0a:	2f 96       	adiw	r28, 0x0f	; 15
    5a0c:	8e ad       	ldd	r24, Y+62	; 0x3e
    5a0e:	9f ad       	ldd	r25, Y+63	; 0x3f
    5a10:	2f 97       	sbiw	r28, 0x0f	; 15
    5a12:	68 16       	cp	r6, r24
    5a14:	79 06       	cpc	r7, r25
    5a16:	14 f4       	brge	.+4      	; 0x5a1c <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x656>
    5a18:	c3 01       	movw	r24, r6
    5a1a:	09 c0       	rjmp	.+18     	; 0x5a2e <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x668>
    5a1c:	2f 96       	adiw	r28, 0x0f	; 15
    5a1e:	8e ad       	ldd	r24, Y+62	; 0x3e
    5a20:	9f ad       	ldd	r25, Y+63	; 0x3f
    5a22:	2f 97       	sbiw	r28, 0x0f	; 15
    5a24:	04 c0       	rjmp	.+8      	; 0x5a2e <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x668>
    5a26:	65 96       	adiw	r28, 0x15	; 21
    5a28:	8e ad       	ldd	r24, Y+62	; 0x3e
    5a2a:	9f ad       	ldd	r25, Y+63	; 0x3f
    5a2c:	65 97       	sbiw	r28, 0x15	; 21
    5a2e:	64 e0       	ldi	r22, 0x04	; 4
    5a30:	70 e0       	ldi	r23, 0x00	; 0
    5a32:	0e 94 05 7f 	call	0xfe0a	; 0xfe0a <__divmodhi4>
    5a36:	2d 96       	adiw	r28, 0x0d	; 13
    5a38:	6f af       	std	Y+63, r22	; 0x3f
    5a3a:	2d 97       	sbiw	r28, 0x0d	; 13
  if (escala > 1) {
    5a3c:	2d 96       	adiw	r28, 0x0d	; 13
    5a3e:	9f ad       	ldd	r25, Y+63	; 0x3f
    5a40:	2d 97       	sbiw	r28, 0x0d	; 13
    5a42:	92 30       	cpi	r25, 0x02	; 2
    5a44:	28 f4       	brcc	.+10     	; 0x5a50 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x68a>
    5a46:	a1 e0       	ldi	r26, 0x01	; 1
    5a48:	2d 96       	adiw	r28, 0x0d	; 13
    5a4a:	af af       	std	Y+63, r26	; 0x3f
    5a4c:	2d 97       	sbiw	r28, 0x0d	; 13
    5a4e:	4e c0       	rjmp	.+156    	; 0x5aec <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x726>
		periodo_sub_ciclo = 1.0*periodo_sub_ciclo/escala + 0.5;
    5a50:	2d 96       	adiw	r28, 0x0d	; 13
    5a52:	bf ad       	ldd	r27, Y+63	; 0x3f
    5a54:	2d 97       	sbiw	r28, 0x0d	; 13
    5a56:	6b 2f       	mov	r22, r27
    5a58:	70 e0       	ldi	r23, 0x00	; 0
    5a5a:	88 27       	eor	r24, r24
    5a5c:	77 fd       	sbrc	r23, 7
    5a5e:	80 95       	com	r24
    5a60:	98 2f       	mov	r25, r24
    5a62:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    5a66:	7b 01       	movw	r14, r22
    5a68:	8c 01       	movw	r16, r24
    5a6a:	c6 01       	movw	r24, r12
    5a6c:	b5 01       	movw	r22, r10
    5a6e:	a8 01       	movw	r20, r16
    5a70:	97 01       	movw	r18, r14
    5a72:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    5a76:	20 e0       	ldi	r18, 0x00	; 0
    5a78:	30 e0       	ldi	r19, 0x00	; 0
    5a7a:	40 e0       	ldi	r20, 0x00	; 0
    5a7c:	5f e3       	ldi	r21, 0x3F	; 63
    5a7e:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    5a82:	0e 94 30 7b 	call	0xf660	; 0xf660 <__fixsfsi>
    5a86:	65 96       	adiw	r28, 0x15	; 21
    5a88:	7f af       	std	Y+63, r23	; 0x3f
    5a8a:	6e af       	std	Y+62, r22	; 0x3e
    5a8c:	65 97       	sbiw	r28, 0x15	; 21
		duracion_pasos = 1.0*duracion_pasos/escala + 0.5;
    5a8e:	b3 01       	movw	r22, r6
    5a90:	88 27       	eor	r24, r24
    5a92:	77 fd       	sbrc	r23, 7
    5a94:	80 95       	com	r24
    5a96:	98 2f       	mov	r25, r24
    5a98:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    5a9c:	a8 01       	movw	r20, r16
    5a9e:	97 01       	movw	r18, r14
    5aa0:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    5aa4:	20 e0       	ldi	r18, 0x00	; 0
    5aa6:	30 e0       	ldi	r19, 0x00	; 0
    5aa8:	40 e0       	ldi	r20, 0x00	; 0
    5aaa:	5f e3       	ldi	r21, 0x3F	; 63
    5aac:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    5ab0:	0e 94 30 7b 	call	0xf660	; 0xf660 <__fixsfsi>
    5ab4:	3b 01       	movw	r6, r22
		periodo_pasos = 1.0*periodo_pasos/escala + 0.5;
    5ab6:	2f 96       	adiw	r28, 0x0f	; 15
    5ab8:	ee ad       	ldd	r30, Y+62	; 0x3e
    5aba:	ff ad       	ldd	r31, Y+63	; 0x3f
    5abc:	2f 97       	sbiw	r28, 0x0f	; 15
    5abe:	bf 01       	movw	r22, r30
    5ac0:	88 27       	eor	r24, r24
    5ac2:	77 fd       	sbrc	r23, 7
    5ac4:	80 95       	com	r24
    5ac6:	98 2f       	mov	r25, r24
    5ac8:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    5acc:	a8 01       	movw	r20, r16
    5ace:	97 01       	movw	r18, r14
    5ad0:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    5ad4:	20 e0       	ldi	r18, 0x00	; 0
    5ad6:	30 e0       	ldi	r19, 0x00	; 0
    5ad8:	40 e0       	ldi	r20, 0x00	; 0
    5ada:	5f e3       	ldi	r21, 0x3F	; 63
    5adc:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    5ae0:	0e 94 30 7b 	call	0xf660	; 0xf660 <__fixsfsi>
    5ae4:	2f 96       	adiw	r28, 0x0f	; 15
    5ae6:	7f af       	std	Y+63, r23	; 0x3f
    5ae8:	6e af       	std	Y+62, r22	; 0x3e
    5aea:	2f 97       	sbiw	r28, 0x0f	; 15
	} else {escala = 1;}
  
  // 5) vamos a calcular: modulo_vector, ticks, altura_pasito, nsegmentos
  float modulo_vector = velocidad * TICK * escala;
    5aec:	2d 96       	adiw	r28, 0x0d	; 13
    5aee:	3f ad       	ldd	r19, Y+63	; 0x3f
    5af0:	2d 97       	sbiw	r28, 0x0d	; 13
    5af2:	23 2f       	mov	r18, r19
    5af4:	30 e0       	ldi	r19, 0x00	; 0
    5af6:	26 96       	adiw	r28, 0x06	; 6
    5af8:	3f af       	std	Y+63, r19	; 0x3f
    5afa:	2e af       	std	Y+62, r18	; 0x3e
    5afc:	26 97       	sbiw	r28, 0x06	; 6
    5afe:	6e 96       	adiw	r28, 0x1e	; 30
    5b00:	6c ad       	ldd	r22, Y+60	; 0x3c
    5b02:	7d ad       	ldd	r23, Y+61	; 0x3d
    5b04:	8e ad       	ldd	r24, Y+62	; 0x3e
    5b06:	9f ad       	ldd	r25, Y+63	; 0x3f
    5b08:	6e 97       	sbiw	r28, 0x1e	; 30
    5b0a:	2f e6       	ldi	r18, 0x6F	; 111
    5b0c:	32 e1       	ldi	r19, 0x12	; 18
    5b0e:	43 e8       	ldi	r20, 0x83	; 131
    5b10:	5b e3       	ldi	r21, 0x3B	; 59
    5b12:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    5b16:	7b 01       	movw	r14, r22
    5b18:	8c 01       	movw	r16, r24
    5b1a:	26 96       	adiw	r28, 0x06	; 6
    5b1c:	ae ad       	ldd	r26, Y+62	; 0x3e
    5b1e:	bf ad       	ldd	r27, Y+63	; 0x3f
    5b20:	26 97       	sbiw	r28, 0x06	; 6
    5b22:	bd 01       	movw	r22, r26
    5b24:	88 27       	eor	r24, r24
    5b26:	77 fd       	sbrc	r23, 7
    5b28:	80 95       	com	r24
    5b2a:	98 2f       	mov	r25, r24
    5b2c:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    5b30:	9b 01       	movw	r18, r22
    5b32:	ac 01       	movw	r20, r24
    5b34:	c8 01       	movw	r24, r16
    5b36:	b7 01       	movw	r22, r14
    5b38:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    5b3c:	2c 96       	adiw	r28, 0x0c	; 12
    5b3e:	6c af       	std	Y+60, r22	; 0x3c
    5b40:	7d af       	std	Y+61, r23	; 0x3d
    5b42:	8e af       	std	Y+62, r24	; 0x3e
    5b44:	9f af       	std	Y+63, r25	; 0x3f
    5b46:	2c 97       	sbiw	r28, 0x0c	; 12
  unsigned int ticks;
  if (desplazamiento >= 0) {ticks = desplazamiento / modulo_vector + duracion_pasos;} else {ticks = -1;}  
    5b48:	a2 96       	adiw	r28, 0x22	; 34
    5b4a:	6c ad       	ldd	r22, Y+60	; 0x3c
    5b4c:	7d ad       	ldd	r23, Y+61	; 0x3d
    5b4e:	8e ad       	ldd	r24, Y+62	; 0x3e
    5b50:	9f ad       	ldd	r25, Y+63	; 0x3f
    5b52:	a2 97       	sbiw	r28, 0x22	; 34
    5b54:	20 e0       	ldi	r18, 0x00	; 0
    5b56:	30 e0       	ldi	r19, 0x00	; 0
    5b58:	40 e0       	ldi	r20, 0x00	; 0
    5b5a:	50 e0       	ldi	r21, 0x00	; 0
    5b5c:	0e 94 8c 7c 	call	0xf918	; 0xf918 <__gesf2>
    5b60:	87 ff       	sbrs	r24, 7
    5b62:	07 c0       	rjmp	.+14     	; 0x5b72 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x7ac>
    5b64:	ef ef       	ldi	r30, 0xFF	; 255
    5b66:	ff ef       	ldi	r31, 0xFF	; 255
    5b68:	28 96       	adiw	r28, 0x08	; 8
    5b6a:	ff af       	std	Y+63, r31	; 0x3f
    5b6c:	ee af       	std	Y+62, r30	; 0x3e
    5b6e:	28 97       	sbiw	r28, 0x08	; 8
    5b70:	23 c0       	rjmp	.+70     	; 0x5bb8 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x7f2>
    5b72:	a2 96       	adiw	r28, 0x22	; 34
    5b74:	6c ad       	ldd	r22, Y+60	; 0x3c
    5b76:	7d ad       	ldd	r23, Y+61	; 0x3d
    5b78:	8e ad       	ldd	r24, Y+62	; 0x3e
    5b7a:	9f ad       	ldd	r25, Y+63	; 0x3f
    5b7c:	a2 97       	sbiw	r28, 0x22	; 34
    5b7e:	2c 96       	adiw	r28, 0x0c	; 12
    5b80:	2c ad       	ldd	r18, Y+60	; 0x3c
    5b82:	3d ad       	ldd	r19, Y+61	; 0x3d
    5b84:	4e ad       	ldd	r20, Y+62	; 0x3e
    5b86:	5f ad       	ldd	r21, Y+63	; 0x3f
    5b88:	2c 97       	sbiw	r28, 0x0c	; 12
    5b8a:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    5b8e:	7b 01       	movw	r14, r22
    5b90:	8c 01       	movw	r16, r24
    5b92:	b3 01       	movw	r22, r6
    5b94:	88 27       	eor	r24, r24
    5b96:	77 fd       	sbrc	r23, 7
    5b98:	80 95       	com	r24
    5b9a:	98 2f       	mov	r25, r24
    5b9c:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    5ba0:	9b 01       	movw	r18, r22
    5ba2:	ac 01       	movw	r20, r24
    5ba4:	c8 01       	movw	r24, r16
    5ba6:	b7 01       	movw	r22, r14
    5ba8:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    5bac:	0e 94 35 7b 	call	0xf66a	; 0xf66a <__fixunssfsi>
    5bb0:	28 96       	adiw	r28, 0x08	; 8
    5bb2:	7f af       	std	Y+63, r23	; 0x3f
    5bb4:	6e af       	std	Y+62, r22	; 0x3e
    5bb6:	28 97       	sbiw	r28, 0x08	; 8
	// hasta acá lo que es común a traslación y rotación

  // 6) vamos a calcular: los vectores de movimiento (el único paso que varía según sea recta o curva)
  COORD2D vector;
  float rotacion;
  if (!curva) {
    5bb8:	a3 96       	adiw	r28, 0x23	; 35
    5bba:	ff ad       	ldd	r31, Y+63	; 0x3f
    5bbc:	a3 97       	sbiw	r28, 0x23	; 35
    5bbe:	ff 23       	and	r31, r31
    5bc0:	99 f5       	brne	.+102    	; 0x5c28 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x862>
    vector = (COORD2D) {-modulo_vector*cos(angulo), -modulo_vector*sin(angulo)};  // lo invierte para acelerar los cálculos
    5bc2:	2c 96       	adiw	r28, 0x0c	; 12
    5bc4:	ec ac       	ldd	r14, Y+60	; 0x3c
    5bc6:	fd ac       	ldd	r15, Y+61	; 0x3d
    5bc8:	0e ad       	ldd	r16, Y+62	; 0x3e
    5bca:	1f ad       	ldd	r17, Y+63	; 0x3f
    5bcc:	2c 97       	sbiw	r28, 0x0c	; 12
    5bce:	17 fb       	bst	r17, 7
    5bd0:	10 95       	com	r17
    5bd2:	17 f9       	bld	r17, 7
    5bd4:	10 95       	com	r17
    5bd6:	cd 56       	subi	r28, 0x6D	; 109
    5bd8:	df 4f       	sbci	r29, 0xFF	; 255
    5bda:	68 81       	ld	r22, Y
    5bdc:	79 81       	ldd	r23, Y+1	; 0x01
    5bde:	8a 81       	ldd	r24, Y+2	; 0x02
    5be0:	9b 81       	ldd	r25, Y+3	; 0x03
    5be2:	c3 59       	subi	r28, 0x93	; 147
    5be4:	d0 40       	sbci	r29, 0x00	; 0
    5be6:	0e 94 94 7a 	call	0xf528	; 0xf528 <cos>
    5bea:	9b 01       	movw	r18, r22
    5bec:	ac 01       	movw	r20, r24
    5bee:	c8 01       	movw	r24, r16
    5bf0:	b7 01       	movw	r22, r14
    5bf2:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    5bf6:	5b 01       	movw	r10, r22
    5bf8:	6c 01       	movw	r12, r24
    5bfa:	cd 56       	subi	r28, 0x6D	; 109
    5bfc:	df 4f       	sbci	r29, 0xFF	; 255
    5bfe:	68 81       	ld	r22, Y
    5c00:	79 81       	ldd	r23, Y+1	; 0x01
    5c02:	8a 81       	ldd	r24, Y+2	; 0x02
    5c04:	9b 81       	ldd	r25, Y+3	; 0x03
    5c06:	c3 59       	subi	r28, 0x93	; 147
    5c08:	d0 40       	sbci	r29, 0x00	; 0
    5c0a:	0e 94 55 7e 	call	0xfcaa	; 0xfcaa <sin>
    5c0e:	9b 01       	movw	r18, r22
    5c10:	ac 01       	movw	r20, r24
    5c12:	c8 01       	movw	r24, r16
    5c14:	b7 01       	movw	r22, r14
    5c16:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    5c1a:	e6 2f       	mov	r30, r22
    5c1c:	69 2f       	mov	r22, r25
    5c1e:	ff 24       	eor	r15, r15
    5c20:	00 e0       	ldi	r16, 0x00	; 0
    5c22:	10 e0       	ldi	r17, 0x00	; 0
    5c24:	ee 24       	eor	r14, r14
    5c26:	21 c1       	rjmp	.+578    	; 0x5e6a <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0xaa4>
    5c28:	0f 2e       	mov	r0, r31
    5c2a:	f0 e0       	ldi	r31, 0x00	; 0
    5c2c:	2f 2e       	mov	r2, r31
    5c2e:	f0 e0       	ldi	r31, 0x00	; 0
    5c30:	3f 2e       	mov	r3, r31
    5c32:	f0 e0       	ldi	r31, 0x00	; 0
    5c34:	4f 2e       	mov	r4, r31
    5c36:	f0 e0       	ldi	r31, 0x00	; 0
    5c38:	5f 2e       	mov	r5, r31
    5c3a:	f0 2d       	mov	r31, r0
    5c3c:	88 24       	eor	r8, r8
    5c3e:	99 24       	eor	r9, r9
  } else {
    vector = centro;
    // medimos la pata más distante del centro
    float dist = 0;
    for (byte pata=0; pata<6; pata++) {
      float d = distancia (centro, rel2abs (xyz2xz(sh.mv.pos_ref[pata]), pata));
    5c40:	f4 01       	movw	r30, r8
    5c42:	ee 0f       	add	r30, r30
    5c44:	ff 1f       	adc	r31, r31
    5c46:	e8 0d       	add	r30, r8
    5c48:	f9 1d       	adc	r31, r9
    5c4a:	ee 0f       	add	r30, r30
    5c4c:	ff 1f       	adc	r31, r31
    5c4e:	ee 0f       	add	r30, r30
    5c50:	ff 1f       	adc	r31, r31
    5c52:	6a 96       	adiw	r28, 0x1a	; 26
    5c54:	2e ad       	ldd	r18, Y+62	; 0x3e
    5c56:	3f ad       	ldd	r19, Y+63	; 0x3f
    5c58:	6a 97       	sbiw	r28, 0x1a	; 26
    5c5a:	e2 0f       	add	r30, r18
    5c5c:	f3 1f       	adc	r31, r19
    5c5e:	e8 56       	subi	r30, 0x68	; 104
    5c60:	fe 4f       	sbci	r31, 0xFE	; 254
    5c62:	e0 80       	ld	r14, Z
    5c64:	f1 80       	ldd	r15, Z+1	; 0x01
    5c66:	02 81       	ldd	r16, Z+2	; 0x02
    5c68:	13 81       	ldd	r17, Z+3	; 0x03
    5c6a:	24 81       	ldd	r18, Z+4	; 0x04
    5c6c:	35 81       	ldd	r19, Z+5	; 0x05
    5c6e:	46 81       	ldd	r20, Z+6	; 0x06
    5c70:	57 81       	ldd	r21, Z+7	; 0x07
    5c72:	60 85       	ldd	r22, Z+8	; 0x08
    5c74:	71 85       	ldd	r23, Z+9	; 0x09
    5c76:	82 85       	ldd	r24, Z+10	; 0x0a
    5c78:	93 85       	ldd	r25, Z+11	; 0x0b
    5c7a:	0e 94 ec 3c 	call	0x79d8	; 0x79d8 <_Z6xyz2xz7COORD3D>
    5c7e:	2c af       	std	Y+60, r18	; 0x3c
    5c80:	3d af       	std	Y+61, r19	; 0x3d
    5c82:	4e af       	std	Y+62, r20	; 0x3e
    5c84:	5f af       	std	Y+63, r21	; 0x3f
    5c86:	21 96       	adiw	r28, 0x01	; 1
    5c88:	6f af       	std	Y+63, r22	; 0x3f
    5c8a:	21 97       	sbiw	r28, 0x01	; 1
    5c8c:	22 96       	adiw	r28, 0x02	; 2
    5c8e:	7f af       	std	Y+63, r23	; 0x3f
    5c90:	22 97       	sbiw	r28, 0x02	; 2
    5c92:	23 96       	adiw	r28, 0x03	; 3
    5c94:	8f af       	std	Y+63, r24	; 0x3f
    5c96:	23 97       	sbiw	r28, 0x03	; 3
    5c98:	24 96       	adiw	r28, 0x04	; 4
    5c9a:	9f af       	std	Y+63, r25	; 0x3f
    5c9c:	24 97       	sbiw	r28, 0x04	; 4
    5c9e:	de 01       	movw	r26, r28
    5ca0:	9c 96       	adiw	r26, 0x2c	; 44
    5ca2:	fe 01       	movw	r30, r28
    5ca4:	fc 96       	adiw	r30, 0x3c	; 60
    5ca6:	88 e0       	ldi	r24, 0x08	; 8
    5ca8:	01 90       	ld	r0, Z+
    5caa:	0d 92       	st	X+, r0
    5cac:	81 50       	subi	r24, 0x01	; 1
    5cae:	e1 f7       	brne	.-8      	; 0x5ca8 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x8e2>
    5cb0:	2c a5       	ldd	r18, Y+44	; 0x2c
    5cb2:	3d a5       	ldd	r19, Y+45	; 0x2d
    5cb4:	4e a5       	ldd	r20, Y+46	; 0x2e
    5cb6:	5f a5       	ldd	r21, Y+47	; 0x2f
    5cb8:	68 a9       	ldd	r22, Y+48	; 0x30
    5cba:	79 a9       	ldd	r23, Y+49	; 0x31
    5cbc:	8a a9       	ldd	r24, Y+50	; 0x32
    5cbe:	9b a9       	ldd	r25, Y+51	; 0x33
    5cc0:	08 2d       	mov	r16, r8
    5cc2:	0e 94 4d 43 	call	0x869a	; 0x869a <_Z7rel2abs7COORD2Dh>
    5cc6:	2c af       	std	Y+60, r18	; 0x3c
    5cc8:	3d af       	std	Y+61, r19	; 0x3d
    5cca:	4e af       	std	Y+62, r20	; 0x3e
    5ccc:	5f af       	std	Y+63, r21	; 0x3f
    5cce:	21 96       	adiw	r28, 0x01	; 1
    5cd0:	6f af       	std	Y+63, r22	; 0x3f
    5cd2:	21 97       	sbiw	r28, 0x01	; 1
    5cd4:	22 96       	adiw	r28, 0x02	; 2
    5cd6:	7f af       	std	Y+63, r23	; 0x3f
    5cd8:	22 97       	sbiw	r28, 0x02	; 2
    5cda:	23 96       	adiw	r28, 0x03	; 3
    5cdc:	8f af       	std	Y+63, r24	; 0x3f
    5cde:	23 97       	sbiw	r28, 0x03	; 3
    5ce0:	24 96       	adiw	r28, 0x04	; 4
    5ce2:	9f af       	std	Y+63, r25	; 0x3f
    5ce4:	24 97       	sbiw	r28, 0x04	; 4
    5ce6:	de 01       	movw	r26, r28
    5ce8:	d4 96       	adiw	r26, 0x34	; 52
    5cea:	fe 01       	movw	r30, r28
    5cec:	fc 96       	adiw	r30, 0x3c	; 60
    5cee:	88 e0       	ldi	r24, 0x08	; 8
    5cf0:	01 90       	ld	r0, Z+
    5cf2:	0d 92       	st	X+, r0
    5cf4:	81 50       	subi	r24, 0x01	; 1
    5cf6:	e1 f7       	brne	.-8      	; 0x5cf0 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x92a>
    5cf8:	ae 96       	adiw	r28, 0x2e	; 46
    5cfa:	2f ad       	ldd	r18, Y+63	; 0x3f
    5cfc:	ae 97       	sbiw	r28, 0x2e	; 46
    5cfe:	af 96       	adiw	r28, 0x2f	; 47
    5d00:	3f ad       	ldd	r19, Y+63	; 0x3f
    5d02:	af 97       	sbiw	r28, 0x2f	; 47
    5d04:	e0 96       	adiw	r28, 0x30	; 48
    5d06:	4f ad       	ldd	r20, Y+63	; 0x3f
    5d08:	e0 97       	sbiw	r28, 0x30	; 48
    5d0a:	e1 96       	adiw	r28, 0x31	; 49
    5d0c:	5f ad       	ldd	r21, Y+63	; 0x3f
    5d0e:	e1 97       	sbiw	r28, 0x31	; 49
    5d10:	c9 01       	movw	r24, r18
    5d12:	da 01       	movw	r26, r20
    5d14:	c5 57       	subi	r28, 0x75	; 117
    5d16:	df 4f       	sbci	r29, 0xFF	; 255
    5d18:	88 83       	st	Y, r24
    5d1a:	99 83       	std	Y+1, r25	; 0x01
    5d1c:	aa 83       	std	Y+2, r26	; 0x02
    5d1e:	bb 83       	std	Y+3, r27	; 0x03
    5d20:	cb 58       	subi	r28, 0x8B	; 139
    5d22:	d0 40       	sbci	r29, 0x00	; 0
    5d24:	aa 96       	adiw	r28, 0x2a	; 42
    5d26:	2f ad       	ldd	r18, Y+63	; 0x3f
    5d28:	aa 97       	sbiw	r28, 0x2a	; 42
    5d2a:	ab 96       	adiw	r28, 0x2b	; 43
    5d2c:	3f ad       	ldd	r19, Y+63	; 0x3f
    5d2e:	ab 97       	sbiw	r28, 0x2b	; 43
    5d30:	ac 96       	adiw	r28, 0x2c	; 44
    5d32:	4f ad       	ldd	r20, Y+63	; 0x3f
    5d34:	ac 97       	sbiw	r28, 0x2c	; 44
    5d36:	ad 96       	adiw	r28, 0x2d	; 45
    5d38:	5f ad       	ldd	r21, Y+63	; 0x3f
    5d3a:	ad 97       	sbiw	r28, 0x2d	; 45
    5d3c:	c9 01       	movw	r24, r18
    5d3e:	da 01       	movw	r26, r20
    5d40:	c1 57       	subi	r28, 0x71	; 113
    5d42:	df 4f       	sbci	r29, 0xFF	; 255
    5d44:	88 83       	st	Y, r24
    5d46:	99 83       	std	Y+1, r25	; 0x01
    5d48:	aa 83       	std	Y+2, r26	; 0x02
    5d4a:	bb 83       	std	Y+3, r27	; 0x03
    5d4c:	cf 58       	subi	r28, 0x8F	; 143
    5d4e:	d0 40       	sbci	r29, 0x00	; 0
    5d50:	c5 57       	subi	r28, 0x75	; 117
    5d52:	df 4f       	sbci	r29, 0xFF	; 255
    5d54:	28 81       	ld	r18, Y
    5d56:	cb 58       	subi	r28, 0x8B	; 139
    5d58:	d0 40       	sbci	r29, 0x00	; 0
    5d5a:	c4 57       	subi	r28, 0x74	; 116
    5d5c:	df 4f       	sbci	r29, 0xFF	; 255
    5d5e:	38 81       	ld	r19, Y
    5d60:	cc 58       	subi	r28, 0x8C	; 140
    5d62:	d0 40       	sbci	r29, 0x00	; 0
    5d64:	c3 57       	subi	r28, 0x73	; 115
    5d66:	df 4f       	sbci	r29, 0xFF	; 255
    5d68:	48 81       	ld	r20, Y
    5d6a:	cd 58       	subi	r28, 0x8D	; 141
    5d6c:	d0 40       	sbci	r29, 0x00	; 0
    5d6e:	c2 57       	subi	r28, 0x72	; 114
    5d70:	df 4f       	sbci	r29, 0xFF	; 255
    5d72:	58 81       	ld	r21, Y
    5d74:	ce 58       	subi	r28, 0x8E	; 142
    5d76:	d0 40       	sbci	r29, 0x00	; 0
    5d78:	c1 57       	subi	r28, 0x71	; 113
    5d7a:	df 4f       	sbci	r29, 0xFF	; 255
    5d7c:	68 81       	ld	r22, Y
    5d7e:	cf 58       	subi	r28, 0x8F	; 143
    5d80:	d0 40       	sbci	r29, 0x00	; 0
    5d82:	c0 57       	subi	r28, 0x70	; 112
    5d84:	df 4f       	sbci	r29, 0xFF	; 255
    5d86:	78 81       	ld	r23, Y
    5d88:	c0 59       	subi	r28, 0x90	; 144
    5d8a:	d0 40       	sbci	r29, 0x00	; 0
    5d8c:	cf 56       	subi	r28, 0x6F	; 111
    5d8e:	df 4f       	sbci	r29, 0xFF	; 255
    5d90:	88 81       	ld	r24, Y
    5d92:	c1 59       	subi	r28, 0x91	; 145
    5d94:	d0 40       	sbci	r29, 0x00	; 0
    5d96:	ce 56       	subi	r28, 0x6E	; 110
    5d98:	df 4f       	sbci	r29, 0xFF	; 255
    5d9a:	98 81       	ld	r25, Y
    5d9c:	c2 59       	subi	r28, 0x92	; 146
    5d9e:	d0 40       	sbci	r29, 0x00	; 0
    5da0:	ac a8       	ldd	r10, Y+52	; 0x34
    5da2:	bd a8       	ldd	r11, Y+53	; 0x35
    5da4:	ce a8       	ldd	r12, Y+54	; 0x36
    5da6:	df a8       	ldd	r13, Y+55	; 0x37
    5da8:	e8 ac       	ldd	r14, Y+56	; 0x38
    5daa:	f9 ac       	ldd	r15, Y+57	; 0x39
    5dac:	0a ad       	ldd	r16, Y+58	; 0x3a
    5dae:	1b ad       	ldd	r17, Y+59	; 0x3b
    5db0:	0e 94 b3 48 	call	0x9166	; 0x9166 <_Z9distancia7COORD2DS_>
    5db4:	16 2f       	mov	r17, r22
    5db6:	07 2f       	mov	r16, r23
    5db8:	f8 2e       	mov	r15, r24
    5dba:	e9 2e       	mov	r14, r25
      if (dist < d) {dist = d;}
    5dbc:	c2 01       	movw	r24, r4
    5dbe:	b1 01       	movw	r22, r2
    5dc0:	21 2f       	mov	r18, r17
    5dc2:	30 2f       	mov	r19, r16
    5dc4:	4f 2d       	mov	r20, r15
    5dc6:	5e 2d       	mov	r21, r14
    5dc8:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    5dcc:	88 23       	and	r24, r24
    5dce:	34 f4       	brge	.+12     	; 0x5ddc <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0xa16>
    5dd0:	81 2f       	mov	r24, r17
    5dd2:	90 2f       	mov	r25, r16
    5dd4:	af 2d       	mov	r26, r15
    5dd6:	be 2d       	mov	r27, r14
    5dd8:	1c 01       	movw	r2, r24
    5dda:	2d 01       	movw	r4, r26
    5ddc:	08 94       	sec
    5dde:	81 1c       	adc	r8, r1
    5de0:	91 1c       	adc	r9, r1
    rotacion = 0;
  } else {
    vector = centro;
    // medimos la pata más distante del centro
    float dist = 0;
    for (byte pata=0; pata<6; pata++) {
    5de2:	36 e0       	ldi	r19, 0x06	; 6
    5de4:	83 16       	cp	r8, r19
    5de6:	91 04       	cpc	r9, r1
    5de8:	09 f0       	breq	.+2      	; 0x5dec <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0xa26>
    5dea:	2a cf       	rjmp	.-428    	; 0x5c40 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf+0x87a>
      float d = distancia (centro, rel2abs (xyz2xz(sh.mv.pos_ref[pata]), pata));
      if (dist < d) {dist = d;}
    } 
    rotacion = sign (angulo) * modulo_vector / dist;       // aproximación basada en el arco; también podría usarse la cuerda
    5dec:	cd 56       	subi	r28, 0x6D	; 109
    5dee:	df 4f       	sbci	r29, 0xFF	; 255
    5df0:	68 81       	ld	r22, Y
    5df2:	79 81       	ldd	r23, Y+1	; 0x01
    5df4:	8a 81       	ldd	r24, Y+2	; 0x02
    5df6:	9b 81       	ldd	r25, Y+3	; 0x03
    5df8:	c3 59       	subi	r28, 0x93	; 147
    5dfa:	d0 40       	sbci	r29, 0x00	; 0
    5dfc:	0e 94 30 7b 	call	0xf660	; 0xf660 <__fixsfsi>
    5e00:	dc 01       	movw	r26, r24
    5e02:	cb 01       	movw	r24, r22
    5e04:	0e 94 86 71 	call	0xe30c	; 0xe30c <_Z4signi>
    5e08:	99 27       	eor	r25, r25
    5e0a:	87 fd       	sbrc	r24, 7
    5e0c:	90 95       	com	r25
    5e0e:	a9 2f       	mov	r26, r25
    5e10:	b9 2f       	mov	r27, r25
    5e12:	bc 01       	movw	r22, r24
    5e14:	cd 01       	movw	r24, r26
    5e16:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    5e1a:	2c 96       	adiw	r28, 0x0c	; 12
    5e1c:	2c ad       	ldd	r18, Y+60	; 0x3c
    5e1e:	3d ad       	ldd	r19, Y+61	; 0x3d
    5e20:	4e ad       	ldd	r20, Y+62	; 0x3e
    5e22:	5f ad       	ldd	r21, Y+63	; 0x3f
    5e24:	2c 97       	sbiw	r28, 0x0c	; 12
    5e26:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    5e2a:	a2 01       	movw	r20, r4
    5e2c:	91 01       	movw	r18, r2
    5e2e:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    5e32:	f6 2e       	mov	r15, r22
    5e34:	07 2f       	mov	r16, r23
    5e36:	18 2f       	mov	r17, r24
    5e38:	e9 2e       	mov	r14, r25
    5e3a:	aa 96       	adiw	r28, 0x2a	; 42
    5e3c:	ef ad       	ldd	r30, Y+63	; 0x3f
    5e3e:	aa 97       	sbiw	r28, 0x2a	; 42
    5e40:	ab 96       	adiw	r28, 0x2b	; 43
    5e42:	7f ad       	ldd	r23, Y+63	; 0x3f
    5e44:	ab 97       	sbiw	r28, 0x2b	; 43
    5e46:	ac 96       	adiw	r28, 0x2c	; 44
    5e48:	8f ad       	ldd	r24, Y+63	; 0x3f
    5e4a:	ac 97       	sbiw	r28, 0x2c	; 44
    5e4c:	ad 96       	adiw	r28, 0x2d	; 45
    5e4e:	6f ad       	ldd	r22, Y+63	; 0x3f
    5e50:	ad 97       	sbiw	r28, 0x2d	; 45
    5e52:	ae 96       	adiw	r28, 0x2e	; 46
    5e54:	af ac       	ldd	r10, Y+63	; 0x3f
    5e56:	ae 97       	sbiw	r28, 0x2e	; 46
    5e58:	af 96       	adiw	r28, 0x2f	; 47
    5e5a:	bf ac       	ldd	r11, Y+63	; 0x3f
    5e5c:	af 97       	sbiw	r28, 0x2f	; 47
    5e5e:	e0 96       	adiw	r28, 0x30	; 48
    5e60:	cf ac       	ldd	r12, Y+63	; 0x3f
    5e62:	e0 97       	sbiw	r28, 0x30	; 48
    5e64:	e1 96       	adiw	r28, 0x31	; 49
    5e66:	df ac       	ldd	r13, Y+63	; 0x3f
    5e68:	e1 97       	sbiw	r28, 0x31	; 49
   duracion_pasos                 // si es == periodo_pasos, significa no aire entre las fases... si es > periodo_pasos hay "solapamiento" 
   altura_pasito                  // altura de las curvas bezier (pasitos) 
   nsegmentos                     // resolución de las curvas bezier (idealmente: largo_pasos*escala/nsegmentos != escala, para distribuir mejor los eventos AX12)  
	 compensate                     // boolean que indica si se debe corregir progresivamente la posición de referencia    */
	 
		wk.mv.vector = vector;         // en la recta esto es el vector, en la curva el centro (el vector es el desplazamiento por micropaso)
    5e6a:	6a 96       	adiw	r28, 0x1a	; 26
    5e6c:	ae ad       	ldd	r26, Y+62	; 0x3e
    5e6e:	bf ad       	ldd	r27, Y+63	; 0x3f
    5e70:	6a 97       	sbiw	r28, 0x1a	; 26
    5e72:	a3 55       	subi	r26, 0x53	; 83
    5e74:	bf 4f       	sbci	r27, 0xFF	; 255
    5e76:	6a 96       	adiw	r28, 0x1a	; 26
    5e78:	bf af       	std	Y+63, r27	; 0x3f
    5e7a:	ae af       	std	Y+62, r26	; 0x3e
    5e7c:	6a 97       	sbiw	r28, 0x1a	; 26
    5e7e:	2e 2f       	mov	r18, r30
    5e80:	37 2f       	mov	r19, r23
    5e82:	48 2f       	mov	r20, r24
    5e84:	56 2f       	mov	r21, r22
    5e86:	c9 01       	movw	r24, r18
    5e88:	da 01       	movw	r26, r20
    5e8a:	6a 96       	adiw	r28, 0x1a	; 26
    5e8c:	ee ad       	ldd	r30, Y+62	; 0x3e
    5e8e:	ff ad       	ldd	r31, Y+63	; 0x3f
    5e90:	6a 97       	sbiw	r28, 0x1a	; 26
    5e92:	80 83       	st	Z, r24
    5e94:	91 83       	std	Z+1, r25	; 0x01
    5e96:	a2 83       	std	Z+2, r26	; 0x02
    5e98:	b3 83       	std	Z+3, r27	; 0x03
    5e9a:	c5 01       	movw	r24, r10
    5e9c:	d6 01       	movw	r26, r12
    5e9e:	b2 93       	st	-Z, r27
    5ea0:	a2 93       	st	-Z, r26
    5ea2:	92 93       	st	-Z, r25
    5ea4:	82 93       	st	-Z, r24
		wk.mv.rotacion = rotacion;      // si vale 0 es recta, de lo contrario es el arco de la curva
    5ea6:	38 96       	adiw	r30, 0x08	; 8
    5ea8:	2f 2d       	mov	r18, r15
    5eaa:	30 2f       	mov	r19, r16
    5eac:	41 2f       	mov	r20, r17
    5eae:	5e 2d       	mov	r21, r14
    5eb0:	c9 01       	movw	r24, r18
    5eb2:	da 01       	movw	r26, r20
    5eb4:	80 83       	st	Z, r24
    5eb6:	91 83       	std	Z+1, r25	; 0x01
    5eb8:	a2 83       	std	Z+2, r26	; 0x02
    5eba:	b3 83       	std	Z+3, r27	; 0x03
		sh.mv.ticks = ticks;
    5ebc:	ef 5c       	subi	r30, 0xCF	; 207
    5ebe:	fe 4f       	sbci	r31, 0xFE	; 254
    5ec0:	28 96       	adiw	r28, 0x08	; 8
    5ec2:	2e ad       	ldd	r18, Y+62	; 0x3e
    5ec4:	3f ad       	ldd	r19, Y+63	; 0x3f
    5ec6:	28 97       	sbiw	r28, 0x08	; 8
    5ec8:	31 83       	std	Z+1, r19	; 0x01
    5eca:	20 83       	st	Z, r18
    5ecc:	e2 5e       	subi	r30, 0xE2	; 226
    5ece:	f1 40       	sbci	r31, 0x01	; 1
    5ed0:	6a 96       	adiw	r28, 0x1a	; 26
    5ed2:	ff af       	std	Y+63, r31	; 0x3f
    5ed4:	ee af       	std	Y+62, r30	; 0x3e
    5ed6:	6a 97       	sbiw	r28, 0x1a	; 26
		memcpy (wk.mv.secuencia, secuencia, fases);
    5ed8:	9f 01       	movw	r18, r30
    5eda:	2b 54       	subi	r18, 0x4B	; 75
    5edc:	3f 4f       	sbci	r19, 0xFF	; 255
    5ede:	c9 01       	movw	r24, r18
    5ee0:	e2 96       	adiw	r28, 0x32	; 50
    5ee2:	6f ad       	ldd	r22, Y+63	; 0x3f
    5ee4:	e2 97       	sbiw	r28, 0x32	; 50
    5ee6:	e3 96       	adiw	r28, 0x33	; 51
    5ee8:	7f ad       	ldd	r23, Y+63	; 0x3f
    5eea:	e3 97       	sbiw	r28, 0x33	; 51
    5eec:	66 96       	adiw	r28, 0x16	; 22
    5eee:	4f ad       	ldd	r20, Y+63	; 0x3f
    5ef0:	66 97       	sbiw	r28, 0x16	; 22
    5ef2:	50 e0       	ldi	r21, 0x00	; 0
    5ef4:	0e 94 a7 81 	call	0x1034e	; 0x1034e <memcpy>
		wk.mv.fases = fases;
    5ef8:	6a 96       	adiw	r28, 0x1a	; 26
    5efa:	8e ad       	ldd	r24, Y+62	; 0x3e
    5efc:	9f ad       	ldd	r25, Y+63	; 0x3f
    5efe:	6a 97       	sbiw	r28, 0x1a	; 26
    5f00:	85 54       	subi	r24, 0x45	; 69
    5f02:	9f 4f       	sbci	r25, 0xFF	; 255
    5f04:	dc 01       	movw	r26, r24
    5f06:	66 96       	adiw	r28, 0x16	; 22
    5f08:	ef ad       	ldd	r30, Y+63	; 0x3f
    5f0a:	66 97       	sbiw	r28, 0x16	; 22
    5f0c:	ed 93       	st	X+, r30
		wk.mv.agrupamiento = agrupamiento;
    5f0e:	68 96       	adiw	r28, 0x18	; 24
    5f10:	ff ad       	ldd	r31, Y+63	; 0x3f
    5f12:	68 97       	sbiw	r28, 0x18	; 24
    5f14:	fc 93       	st	X, r31
		sh.mv.escala = escala;
    5f16:	ac 5d       	subi	r26, 0xDC	; 220
    5f18:	be 4f       	sbci	r27, 0xFE	; 254
    5f1a:	2d 96       	adiw	r28, 0x0d	; 13
    5f1c:	2f ad       	ldd	r18, Y+63	; 0x3f
    5f1e:	2d 97       	sbiw	r28, 0x0d	; 13
    5f20:	2c 93       	st	X, r18
		wk.mv.periodo_sub_ciclo = periodo_sub_ciclo;
    5f22:	a3 52       	subi	r26, 0x23	; 35
    5f24:	b1 40       	sbci	r27, 0x01	; 1
    5f26:	65 96       	adiw	r28, 0x15	; 21
    5f28:	8e ad       	ldd	r24, Y+62	; 0x3e
    5f2a:	9f ad       	ldd	r25, Y+63	; 0x3f
    5f2c:	65 97       	sbiw	r28, 0x15	; 21
    5f2e:	8d 93       	st	X+, r24
    5f30:	9d 93       	st	X+, r25
		wk.mv.periodo_pasos = periodo_pasos;
    5f32:	2f 96       	adiw	r28, 0x0f	; 15
    5f34:	ee ad       	ldd	r30, Y+62	; 0x3e
    5f36:	ff ad       	ldd	r31, Y+63	; 0x3f
    5f38:	2f 97       	sbiw	r28, 0x0f	; 15
    5f3a:	ed 93       	st	X+, r30
    5f3c:	fd 93       	st	X+, r31
    5f3e:	6a 96       	adiw	r28, 0x1a	; 26
    5f40:	bf af       	std	Y+63, r27	; 0x3f
    5f42:	ae af       	std	Y+62, r26	; 0x3e
    5f44:	6a 97       	sbiw	r28, 0x1a	; 26
		wk.mv.duracion_pasos = duracion_pasos;
    5f46:	6d 92       	st	X+, r6
    5f48:	7c 92       	st	X, r7
  /* a esta altura podemos hacer la siguiente operación comprobatoria: 
	    periodo_sub_ciclo = (largo_pasos/modulo_vector + duracion_pasos)*agrupamiento/fases */
  byte nsegmentos =  nseg (duracion_pasos, escala, largo_pasos);
  // fórmula para la altura del punto manejador de la curva bezier
  // contempla el largo y la duración de los pasos, pero igual da fruta
  float altura_pasito = 7.7 + 25*(8.4 + 2.6*sqrt(largo_pasos))/(duracion_pasos*escala);      // ajustar esto es casi imposible
    5f4a:	c8 56       	subi	r28, 0x68	; 104
    5f4c:	df 4f       	sbci	r29, 0xFF	; 255
    5f4e:	68 81       	ld	r22, Y
    5f50:	79 81       	ldd	r23, Y+1	; 0x01
    5f52:	8a 81       	ldd	r24, Y+2	; 0x02
    5f54:	9b 81       	ldd	r25, Y+3	; 0x03
    5f56:	c8 59       	subi	r28, 0x98	; 152
    5f58:	d0 40       	sbci	r29, 0x00	; 0
    5f5a:	0e 94 5f 7e 	call	0xfcbe	; 0xfcbe <sqrt>
		wk.mv.agrupamiento = agrupamiento;
		sh.mv.escala = escala;
		wk.mv.periodo_sub_ciclo = periodo_sub_ciclo;
		wk.mv.periodo_pasos = periodo_pasos;
		wk.mv.duracion_pasos = duracion_pasos;
		wk.mv.altura_pasito = altura_pasito;
    5f5e:	6a 96       	adiw	r28, 0x1a	; 26
    5f60:	2e ad       	ldd	r18, Y+62	; 0x3e
    5f62:	3f ad       	ldd	r19, Y+63	; 0x3f
    5f64:	6a 97       	sbiw	r28, 0x1a	; 26
    5f66:	2d 5f       	subi	r18, 0xFD	; 253
    5f68:	3f 4f       	sbci	r19, 0xFF	; 255
    5f6a:	6a 96       	adiw	r28, 0x1a	; 26
    5f6c:	3f af       	std	Y+63, r19	; 0x3f
    5f6e:	2e af       	std	Y+62, r18	; 0x3e
    5f70:	6a 97       	sbiw	r28, 0x1a	; 26
    5f72:	26 e6       	ldi	r18, 0x66	; 102
    5f74:	36 e6       	ldi	r19, 0x66	; 102
    5f76:	46 e2       	ldi	r20, 0x26	; 38
    5f78:	50 e4       	ldi	r21, 0x40	; 64
    5f7a:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    5f7e:	26 e6       	ldi	r18, 0x66	; 102
    5f80:	36 e6       	ldi	r19, 0x66	; 102
    5f82:	46 e0       	ldi	r20, 0x06	; 6
    5f84:	51 e4       	ldi	r21, 0x41	; 65
    5f86:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    5f8a:	20 e0       	ldi	r18, 0x00	; 0
    5f8c:	30 e0       	ldi	r19, 0x00	; 0
    5f8e:	48 ec       	ldi	r20, 0xC8	; 200
    5f90:	51 e4       	ldi	r21, 0x41	; 65
    5f92:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    5f96:	7b 01       	movw	r14, r22
    5f98:	8c 01       	movw	r16, r24
    5f9a:	26 96       	adiw	r28, 0x06	; 6
    5f9c:	8e ad       	ldd	r24, Y+62	; 0x3e
    5f9e:	9f ad       	ldd	r25, Y+63	; 0x3f
    5fa0:	26 97       	sbiw	r28, 0x06	; 6
    5fa2:	86 9d       	mul	r24, r6
    5fa4:	b0 01       	movw	r22, r0
    5fa6:	87 9d       	mul	r24, r7
    5fa8:	70 0d       	add	r23, r0
    5faa:	96 9d       	mul	r25, r6
    5fac:	70 0d       	add	r23, r0
    5fae:	11 24       	eor	r1, r1
    5fb0:	88 27       	eor	r24, r24
    5fb2:	77 fd       	sbrc	r23, 7
    5fb4:	80 95       	com	r24
    5fb6:	98 2f       	mov	r25, r24
    5fb8:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    5fbc:	9b 01       	movw	r18, r22
    5fbe:	ac 01       	movw	r20, r24
    5fc0:	c8 01       	movw	r24, r16
    5fc2:	b7 01       	movw	r22, r14
    5fc4:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    5fc8:	26 e6       	ldi	r18, 0x66	; 102
    5fca:	36 e6       	ldi	r19, 0x66	; 102
    5fcc:	46 ef       	ldi	r20, 0xF6	; 246
    5fce:	50 e4       	ldi	r21, 0x40	; 64
    5fd0:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    5fd4:	6a 96       	adiw	r28, 0x1a	; 26
    5fd6:	ae ad       	ldd	r26, Y+62	; 0x3e
    5fd8:	bf ad       	ldd	r27, Y+63	; 0x3f
    5fda:	6a 97       	sbiw	r28, 0x1a	; 26
    5fdc:	6d 93       	st	X+, r22
    5fde:	7d 93       	st	X+, r23
    5fe0:	8d 93       	st	X+, r24
    5fe2:	9c 93       	st	X, r25
    5fe4:	13 97       	sbiw	r26, 0x03	; 3
    5fe6:	a4 5c       	subi	r26, 0xC4	; 196
    5fe8:	b0 40       	sbci	r27, 0x00	; 0
    5fea:	6a 96       	adiw	r28, 0x1a	; 26
    5fec:	bf af       	std	Y+63, r27	; 0x3f
    5fee:	ae af       	std	Y+62, r26	; 0x3e
    5ff0:	6a 97       	sbiw	r28, 0x1a	; 26
  float modulo_vector = velocidad * TICK * escala;
  unsigned int ticks;
  if (desplazamiento >= 0) {ticks = desplazamiento / modulo_vector + duracion_pasos;} else {ticks = -1;}  
  /* a esta altura podemos hacer la siguiente operación comprobatoria: 
	    periodo_sub_ciclo = (largo_pasos/modulo_vector + duracion_pasos)*agrupamiento/fases */
  byte nsegmentos =  nseg (duracion_pasos, escala, largo_pasos);
    5ff2:	cd 01       	movw	r24, r26
    5ff4:	b3 01       	movw	r22, r6
    5ff6:	2d 96       	adiw	r28, 0x0d	; 13
    5ff8:	4f ad       	ldd	r20, Y+63	; 0x3f
    5ffa:	2d 97       	sbiw	r28, 0x0d	; 13
    5ffc:	c8 56       	subi	r28, 0x68	; 104
    5ffe:	df 4f       	sbci	r29, 0xFF	; 255
    6000:	08 81       	ld	r16, Y
    6002:	19 81       	ldd	r17, Y+1	; 0x01
    6004:	2a 81       	ldd	r18, Y+2	; 0x02
    6006:	3b 81       	ldd	r19, Y+3	; 0x03
    6008:	c8 59       	subi	r28, 0x98	; 152
    600a:	d0 40       	sbci	r29, 0x00	; 0
    600c:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <_ZN10Movimiento4nsegEihf>
		sh.mv.escala = escala;
		wk.mv.periodo_sub_ciclo = periodo_sub_ciclo;
		wk.mv.periodo_pasos = periodo_pasos;
		wk.mv.duracion_pasos = duracion_pasos;
		wk.mv.altura_pasito = altura_pasito;
		sh.mv.nsegmentos = nsegmentos;
    6010:	6a 96       	adiw	r28, 0x1a	; 26
    6012:	ee ad       	ldd	r30, Y+62	; 0x3e
    6014:	ff ad       	ldd	r31, Y+63	; 0x3f
    6016:	6a 97       	sbiw	r28, 0x1a	; 26
    6018:	ef 51       	subi	r30, 0x1F	; 31
    601a:	fe 4f       	sbci	r31, 0xFE	; 254
    601c:	80 83       	st	Z, r24
		
}
    601e:	a9 96       	adiw	r28, 0x29	; 41
    6020:	2e ad       	ldd	r18, Y+62	; 0x3e
    6022:	3f ad       	ldd	r19, Y+63	; 0x3f
    6024:	a9 97       	sbiw	r28, 0x29	; 41
    6026:	0f b6       	in	r0, 0x3f	; 63
    6028:	f8 94       	cli
    602a:	3e bf       	out	0x3e, r19	; 62
    602c:	0f be       	out	0x3f, r0	; 63
    602e:	2d bf       	out	0x3d, r18	; 61
    6030:	ca 58       	subi	r28, 0x8A	; 138
    6032:	df 4f       	sbci	r29, 0xFF	; 255
    6034:	0f b6       	in	r0, 0x3f	; 63
    6036:	f8 94       	cli
    6038:	de bf       	out	0x3e, r29	; 62
    603a:	0f be       	out	0x3f, r0	; 63
    603c:	cd bf       	out	0x3d, r28	; 61
    603e:	cf 91       	pop	r28
    6040:	df 91       	pop	r29
    6042:	1f 91       	pop	r17
    6044:	0f 91       	pop	r16
    6046:	ff 90       	pop	r15
    6048:	ef 90       	pop	r14
    604a:	df 90       	pop	r13
    604c:	cf 90       	pop	r12
    604e:	bf 90       	pop	r11
    6050:	af 90       	pop	r10
    6052:	9f 90       	pop	r9
    6054:	8f 90       	pop	r8
    6056:	7f 90       	pop	r7
    6058:	6f 90       	pop	r6
    605a:	5f 90       	pop	r5
    605c:	4f 90       	pop	r4
    605e:	3f 90       	pop	r3
    6060:	2f 90       	pop	r2
    6062:	08 95       	ret

00006064 <_ZN10Movimiento7set_velEf>:

/********************************************************************************************
                          MODIFICADORES ON-THE-FLY (revisar esto)
********************************************************************************************/													

void Movimiento::set_vel (float velocidad) {
    6064:	2f 92       	push	r2
    6066:	3f 92       	push	r3
    6068:	4f 92       	push	r4
    606a:	5f 92       	push	r5
    606c:	6f 92       	push	r6
    606e:	7f 92       	push	r7
    6070:	8f 92       	push	r8
    6072:	9f 92       	push	r9
    6074:	af 92       	push	r10
    6076:	bf 92       	push	r11
    6078:	cf 92       	push	r12
    607a:	df 92       	push	r13
    607c:	ef 92       	push	r14
    607e:	ff 92       	push	r15
    6080:	0f 93       	push	r16
    6082:	1f 93       	push	r17
    6084:	df 93       	push	r29
    6086:	cf 93       	push	r28
    6088:	cd b7       	in	r28, 0x3d	; 61
    608a:	de b7       	in	r29, 0x3e	; 62
    608c:	2e 97       	sbiw	r28, 0x0e	; 14
    608e:	0f b6       	in	r0, 0x3f	; 63
    6090:	f8 94       	cli
    6092:	de bf       	out	0x3e, r29	; 62
    6094:	0f be       	out	0x3f, r0	; 63
    6096:	cd bf       	out	0x3d, r28	; 61
    6098:	2c 01       	movw	r4, r24
    609a:	49 87       	std	Y+9, r20	; 0x09
    609c:	5a 87       	std	Y+10, r21	; 0x0a
    609e:	6b 87       	std	Y+11, r22	; 0x0b
    60a0:	7c 87       	std	Y+12, r23	; 0x0c
		
	// re-calcular los parámetros
	if (wk.mv.rotacion != 0) {return;}                                              // por ahora sólo para caminatas rectas
    60a2:	fc 01       	movw	r30, r24
    60a4:	ef 54       	subi	r30, 0x4F	; 79
    60a6:	ff 4f       	sbci	r31, 0xFF	; 255
    60a8:	60 81       	ld	r22, Z
    60aa:	71 81       	ldd	r23, Z+1	; 0x01
    60ac:	82 81       	ldd	r24, Z+2	; 0x02
    60ae:	93 81       	ldd	r25, Z+3	; 0x03
    60b0:	20 e0       	ldi	r18, 0x00	; 0
    60b2:	30 e0       	ldi	r19, 0x00	; 0
    60b4:	40 e0       	ldi	r20, 0x00	; 0
    60b6:	50 e0       	ldi	r21, 0x00	; 0
    60b8:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    60bc:	88 23       	and	r24, r24
    60be:	09 f0       	breq	.+2      	; 0x60c2 <_ZN10Movimiento7set_velEf+0x5e>
    60c0:	a1 c0       	rjmp	.+322    	; 0x6204 <_ZN10Movimiento7set_velEf+0x1a0>
	float modulo_vector = hypot (wk.mv.vector.x, wk.mv.vector.z);
    60c2:	29 ea       	ldi	r18, 0xA9	; 169
    60c4:	30 e0       	ldi	r19, 0x00	; 0
    60c6:	42 0e       	add	r4, r18
    60c8:	53 1e       	adc	r5, r19
    60ca:	d2 01       	movw	r26, r4
    60cc:	ad 90       	ld	r10, X+
    60ce:	bd 90       	ld	r11, X+
    60d0:	cd 90       	ld	r12, X+
    60d2:	dd 90       	ld	r13, X+
    60d4:	2d 01       	movw	r4, r26
    60d6:	ed 90       	ld	r14, X+
    60d8:	fd 90       	ld	r15, X+
    60da:	0d 91       	ld	r16, X+
    60dc:	1c 91       	ld	r17, X
    60de:	e3 e5       	ldi	r30, 0x53	; 83
    60e0:	ff ef       	ldi	r31, 0xFF	; 255
    60e2:	4e 0e       	add	r4, r30
    60e4:	5f 1e       	adc	r5, r31
    60e6:	c6 01       	movw	r24, r12
    60e8:	b5 01       	movw	r22, r10
    60ea:	a8 01       	movw	r20, r16
    60ec:	97 01       	movw	r18, r14
    60ee:	0e 94 99 7c 	call	0xf932	; 0xf932 <hypot>
    60f2:	3b 01       	movw	r6, r22
    60f4:	4c 01       	movw	r8, r24
	float desplazamiento = (sh.mv.ticks - sh.cn.tick) * modulo_vector; 
    60f6:	f2 01       	movw	r30, r4
    60f8:	ee 51       	subi	r30, 0x1E	; 30
    60fa:	fe 4f       	sbci	r31, 0xFE	; 254
    60fc:	26 ee       	ldi	r18, 0xE6	; 230
    60fe:	31 e0       	ldi	r19, 0x01	; 1
    6100:	42 0e       	add	r4, r18
    6102:	53 1e       	adc	r5, r19
    6104:	60 81       	ld	r22, Z
    6106:	71 81       	ldd	r23, Z+1	; 0x01
    6108:	d2 01       	movw	r26, r4
    610a:	2d 91       	ld	r18, X+
    610c:	3c 91       	ld	r19, X
    610e:	ea e1       	ldi	r30, 0x1A	; 26
    6110:	fe ef       	ldi	r31, 0xFE	; 254
    6112:	4e 0e       	add	r4, r30
    6114:	5f 1e       	adc	r5, r31
    6116:	62 1b       	sub	r22, r18
    6118:	73 0b       	sbc	r23, r19
    611a:	80 e0       	ldi	r24, 0x00	; 0
    611c:	90 e0       	ldi	r25, 0x00	; 0
    611e:	0e 94 61 7b 	call	0xf6c2	; 0xf6c2 <__floatunsisf>
    6122:	a4 01       	movw	r20, r8
    6124:	93 01       	movw	r18, r6
    6126:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    612a:	36 2e       	mov	r3, r22
    612c:	27 2e       	mov	r2, r23
    612e:	8d 87       	std	Y+13, r24	; 0x0d
    6130:	9e 87       	std	Y+14, r25	; 0x0e
	float angulo = atan2 (-wk.mv.vector.z, -wk.mv.vector.x);
    6132:	17 fb       	bst	r17, 7
    6134:	10 95       	com	r17
    6136:	17 f9       	bld	r17, 7
    6138:	10 95       	com	r17
    613a:	d7 fa       	bst	r13, 7
    613c:	d0 94       	com	r13
    613e:	d7 f8       	bld	r13, 7
    6140:	d0 94       	com	r13
    6142:	c8 01       	movw	r24, r16
    6144:	b7 01       	movw	r22, r14
    6146:	a6 01       	movw	r20, r12
    6148:	95 01       	movw	r18, r10
    614a:	0e 94 3d 7a 	call	0xf47a	; 0xf47a <atan2>
    614e:	7b 01       	movw	r14, r22
    6150:	8c 01       	movw	r16, r24
	float largo_pasos = modulo_vector * 2 * wk.rt.coeficiente;
    6152:	c4 01       	movw	r24, r8
    6154:	b3 01       	movw	r22, r6
    6156:	a4 01       	movw	r20, r8
    6158:	93 01       	movw	r18, r6
    615a:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    615e:	f2 01       	movw	r30, r4
    6160:	e4 53       	subi	r30, 0x34	; 52
    6162:	ff 4f       	sbci	r31, 0xFF	; 255
    6164:	20 81       	ld	r18, Z
    6166:	31 81       	ldd	r19, Z+1	; 0x01
    6168:	42 81       	ldd	r20, Z+2	; 0x02
    616a:	53 81       	ldd	r21, Z+3	; 0x03
    616c:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    6170:	a8 2e       	mov	r10, r24
	
	// re-setear todas las variables
	set_values (velocidad, desplazamiento, false, (COORD2D){0,0}, angulo, 1, largo_pasos); 
    6172:	de 01       	movw	r26, r28
    6174:	11 96       	adiw	r26, 0x01	; 1
    6176:	e5 e5       	ldi	r30, 0x55	; 85
    6178:	f4 e0       	ldi	r31, 0x04	; 4
    617a:	88 e0       	ldi	r24, 0x08	; 8
    617c:	01 90       	ld	r0, Z+
    617e:	0d 92       	st	X+, r0
    6180:	81 50       	subi	r24, 0x01	; 1
    6182:	e1 f7       	brne	.-8      	; 0x617c <_ZN10Movimiento7set_velEf+0x118>
    6184:	2d b7       	in	r18, 0x3d	; 61
    6186:	3e b7       	in	r19, 0x3e	; 62
    6188:	21 51       	subi	r18, 0x11	; 17
    618a:	30 40       	sbci	r19, 0x00	; 0
    618c:	0f b6       	in	r0, 0x3f	; 63
    618e:	f8 94       	cli
    6190:	3e bf       	out	0x3e, r19	; 62
    6192:	0f be       	out	0x3f, r0	; 63
    6194:	2d bf       	out	0x3d, r18	; 61
    6196:	ed b7       	in	r30, 0x3d	; 61
    6198:	fe b7       	in	r31, 0x3e	; 62
    619a:	31 96       	adiw	r30, 0x01	; 1
    619c:	9f 01       	movw	r18, r30
    619e:	ae 01       	movw	r20, r28
    61a0:	4f 5f       	subi	r20, 0xFF	; 255
    61a2:	5f 4f       	sbci	r21, 0xFF	; 255
    61a4:	88 e0       	ldi	r24, 0x08	; 8
    61a6:	da 01       	movw	r26, r20
    61a8:	0d 90       	ld	r0, X+
    61aa:	ad 01       	movw	r20, r26
    61ac:	d9 01       	movw	r26, r18
    61ae:	0d 92       	st	X+, r0
    61b0:	9d 01       	movw	r18, r26
    61b2:	81 50       	subi	r24, 0x01	; 1
    61b4:	c1 f7       	brne	.-16     	; 0x61a6 <_ZN10Movimiento7set_velEf+0x142>
    61b6:	e0 86       	std	Z+8, r14	; 0x08
    61b8:	f1 86       	std	Z+9, r15	; 0x09
    61ba:	02 87       	std	Z+10, r16	; 0x0a
    61bc:	13 87       	std	Z+11, r17	; 0x0b
    61be:	81 e0       	ldi	r24, 0x01	; 1
    61c0:	84 87       	std	Z+12, r24	; 0x0c
    61c2:	4a 2d       	mov	r20, r10
    61c4:	59 2f       	mov	r21, r25
    61c6:	cb 01       	movw	r24, r22
    61c8:	da 01       	movw	r26, r20
    61ca:	85 87       	std	Z+13, r24	; 0x0d
    61cc:	96 87       	std	Z+14, r25	; 0x0e
    61ce:	a7 87       	std	Z+15, r26	; 0x0f
    61d0:	b0 8b       	std	Z+16, r27	; 0x10
    61d2:	c2 01       	movw	r24, r4
    61d4:	49 85       	ldd	r20, Y+9	; 0x09
    61d6:	5a 85       	ldd	r21, Y+10	; 0x0a
    61d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    61da:	7c 85       	ldd	r23, Y+12	; 0x0c
    61dc:	e3 2d       	mov	r30, r3
    61de:	f2 2d       	mov	r31, r2
    61e0:	ad 85       	ldd	r26, Y+13	; 0x0d
    61e2:	be 85       	ldd	r27, Y+14	; 0x0e
    61e4:	8f 01       	movw	r16, r30
    61e6:	9d 01       	movw	r18, r26
    61e8:	ee 24       	eor	r14, r14
    61ea:	0e 94 e3 29 	call	0x53c6	; 0x53c6 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf>
	caminata_init2 ();
    61ee:	ed b7       	in	r30, 0x3d	; 61
    61f0:	fe b7       	in	r31, 0x3e	; 62
    61f2:	71 96       	adiw	r30, 0x11	; 17
    61f4:	0f b6       	in	r0, 0x3f	; 63
    61f6:	f8 94       	cli
    61f8:	fe bf       	out	0x3e, r31	; 62
    61fa:	0f be       	out	0x3f, r0	; 63
    61fc:	ed bf       	out	0x3d, r30	; 61
    61fe:	c2 01       	movw	r24, r4
    6200:	0e 94 11 27 	call	0x4e22	; 0x4e22 <_ZN10Movimiento14caminata_init2Ev>
		
}
    6204:	2e 96       	adiw	r28, 0x0e	; 14
    6206:	0f b6       	in	r0, 0x3f	; 63
    6208:	f8 94       	cli
    620a:	de bf       	out	0x3e, r29	; 62
    620c:	0f be       	out	0x3f, r0	; 63
    620e:	cd bf       	out	0x3d, r28	; 61
    6210:	cf 91       	pop	r28
    6212:	df 91       	pop	r29
    6214:	1f 91       	pop	r17
    6216:	0f 91       	pop	r16
    6218:	ff 90       	pop	r15
    621a:	ef 90       	pop	r14
    621c:	df 90       	pop	r13
    621e:	cf 90       	pop	r12
    6220:	bf 90       	pop	r11
    6222:	af 90       	pop	r10
    6224:	9f 90       	pop	r9
    6226:	8f 90       	pop	r8
    6228:	7f 90       	pop	r7
    622a:	6f 90       	pop	r6
    622c:	5f 90       	pop	r5
    622e:	4f 90       	pop	r4
    6230:	3f 90       	pop	r3
    6232:	2f 90       	pop	r2
    6234:	08 95       	ret

00006236 <_ZN10Movimiento8caminataEffb7COORD2Dfhf>:
void Movimiento::curva (float velocidad, float desplazamiento, COORD2D centro, bool sentido, byte marcha, float largo_pasos) {
  caminata (velocidad, desplazamiento, true, centro, bin2sign(sentido), marcha, largo_pasos);
}

// caminata con parámetros "inteligentes"
void Movimiento::caminata (float velocidad, float desplazamiento, bool curva, COORD2D centro, float angulo, byte marcha, float largo_pasos) {
    6236:	8f 92       	push	r8
    6238:	9f 92       	push	r9
    623a:	af 92       	push	r10
    623c:	bf 92       	push	r11
    623e:	cf 92       	push	r12
    6240:	df 92       	push	r13
    6242:	ef 92       	push	r14
    6244:	0f 93       	push	r16
    6246:	1f 93       	push	r17
    6248:	df 93       	push	r29
    624a:	cf 93       	push	r28
    624c:	cd b7       	in	r28, 0x3d	; 61
    624e:	de b7       	in	r29, 0x3e	; 62
    6250:	4c 01       	movw	r8, r24
    6252:	58 01       	movw	r10, r16
    6254:	69 01       	movw	r12, r18
	set_values (velocidad, desplazamiento, curva, centro, angulo, marcha, largo_pasos);
    6256:	8d b7       	in	r24, 0x3d	; 61
    6258:	9e b7       	in	r25, 0x3e	; 62
    625a:	41 97       	sbiw	r24, 0x11	; 17
    625c:	0f b6       	in	r0, 0x3f	; 63
    625e:	f8 94       	cli
    6260:	9e bf       	out	0x3e, r25	; 62
    6262:	0f be       	out	0x3f, r0	; 63
    6264:	8d bf       	out	0x3d, r24	; 61
    6266:	ed b7       	in	r30, 0x3d	; 61
    6268:	fe b7       	in	r31, 0x3e	; 62
    626a:	31 96       	adiw	r30, 0x01	; 1
    626c:	9f 01       	movw	r18, r30
    626e:	8e 01       	movw	r16, r28
    6270:	02 5f       	subi	r16, 0xF2	; 242
    6272:	1f 4f       	sbci	r17, 0xFF	; 255
    6274:	88 e0       	ldi	r24, 0x08	; 8
    6276:	d8 01       	movw	r26, r16
    6278:	0d 90       	ld	r0, X+
    627a:	8d 01       	movw	r16, r26
    627c:	d9 01       	movw	r26, r18
    627e:	0d 92       	st	X+, r0
    6280:	9d 01       	movw	r18, r26
    6282:	81 50       	subi	r24, 0x01	; 1
    6284:	c1 f7       	brne	.-16     	; 0x6276 <_ZN10Movimiento8caminataEffb7COORD2Dfhf+0x40>
    6286:	8e 89       	ldd	r24, Y+22	; 0x16
    6288:	9f 89       	ldd	r25, Y+23	; 0x17
    628a:	a8 8d       	ldd	r26, Y+24	; 0x18
    628c:	b9 8d       	ldd	r27, Y+25	; 0x19
    628e:	80 87       	std	Z+8, r24	; 0x08
    6290:	91 87       	std	Z+9, r25	; 0x09
    6292:	a2 87       	std	Z+10, r26	; 0x0a
    6294:	b3 87       	std	Z+11, r27	; 0x0b
    6296:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6298:	84 87       	std	Z+12, r24	; 0x0c
    629a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    629c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    629e:	ad 8d       	ldd	r26, Y+29	; 0x1d
    62a0:	be 8d       	ldd	r27, Y+30	; 0x1e
    62a2:	85 87       	std	Z+13, r24	; 0x0d
    62a4:	96 87       	std	Z+14, r25	; 0x0e
    62a6:	a7 87       	std	Z+15, r26	; 0x0f
    62a8:	b0 8b       	std	Z+16, r27	; 0x10
    62aa:	c4 01       	movw	r24, r8
    62ac:	96 01       	movw	r18, r12
    62ae:	85 01       	movw	r16, r10
    62b0:	0e 94 e3 29 	call	0x53c6	; 0x53c6 <_ZN10Movimiento10set_valuesEffb7COORD2Dfhf>
	caminata (true);                                                           // revisar esta lógica
    62b4:	8d b7       	in	r24, 0x3d	; 61
    62b6:	9e b7       	in	r25, 0x3e	; 62
    62b8:	41 96       	adiw	r24, 0x11	; 17
    62ba:	0f b6       	in	r0, 0x3f	; 63
    62bc:	f8 94       	cli
    62be:	9e bf       	out	0x3e, r25	; 62
    62c0:	0f be       	out	0x3f, r0	; 63
    62c2:	8d bf       	out	0x3d, r24	; 61
    62c4:	c4 01       	movw	r24, r8
    62c6:	61 e0       	ldi	r22, 0x01	; 1
    62c8:	0e 94 c4 29 	call	0x5388	; 0x5388 <_ZN10Movimiento8caminataEb>
}
    62cc:	cf 91       	pop	r28
    62ce:	df 91       	pop	r29
    62d0:	1f 91       	pop	r17
    62d2:	0f 91       	pop	r16
    62d4:	ef 90       	pop	r14
    62d6:	df 90       	pop	r13
    62d8:	cf 90       	pop	r12
    62da:	bf 90       	pop	r11
    62dc:	af 90       	pop	r10
    62de:	9f 90       	pop	r9
    62e0:	8f 90       	pop	r8
    62e2:	08 95       	ret

000062e4 <_ZN10Movimiento5rectaEfffhf>:

					
///////////////////////////////////////// CAMINATAS /////////////////////////////////////////

// recta común
void Movimiento::recta (float velocidad, float desplazamiento, float angulo, byte marcha, float largo_pasos) {
    62e4:	4f 92       	push	r4
    62e6:	5f 92       	push	r5
    62e8:	6f 92       	push	r6
    62ea:	7f 92       	push	r7
    62ec:	8f 92       	push	r8
    62ee:	9f 92       	push	r9
    62f0:	af 92       	push	r10
    62f2:	cf 92       	push	r12
    62f4:	df 92       	push	r13
    62f6:	ef 92       	push	r14
    62f8:	ff 92       	push	r15
    62fa:	0f 93       	push	r16
    62fc:	1f 93       	push	r17
    62fe:	df 93       	push	r29
    6300:	cf 93       	push	r28
    6302:	cd b7       	in	r28, 0x3d	; 61
    6304:	de b7       	in	r29, 0x3e	; 62
    6306:	28 97       	sbiw	r28, 0x08	; 8
    6308:	0f b6       	in	r0, 0x3f	; 63
    630a:	f8 94       	cli
    630c:	de bf       	out	0x3e, r29	; 62
    630e:	0f be       	out	0x3f, r0	; 63
    6310:	cd bf       	out	0x3d, r28	; 61
    6312:	2c 01       	movw	r4, r24
    6314:	38 01       	movw	r6, r16
    6316:	49 01       	movw	r8, r18
  caminata (velocidad, desplazamiento, false, (COORD2D){0,0}, angulo, marcha, largo_pasos);
    6318:	de 01       	movw	r26, r28
    631a:	11 96       	adiw	r26, 0x01	; 1
    631c:	e6 e6       	ldi	r30, 0x66	; 102
    631e:	f4 e0       	ldi	r31, 0x04	; 4
    6320:	88 e0       	ldi	r24, 0x08	; 8
    6322:	01 90       	ld	r0, Z+
    6324:	0d 92       	st	X+, r0
    6326:	81 50       	subi	r24, 0x01	; 1
    6328:	e1 f7       	brne	.-8      	; 0x6322 <_ZN10Movimiento5rectaEfffhf+0x3e>
    632a:	8d b7       	in	r24, 0x3d	; 61
    632c:	9e b7       	in	r25, 0x3e	; 62
    632e:	41 97       	sbiw	r24, 0x11	; 17
    6330:	0f b6       	in	r0, 0x3f	; 63
    6332:	f8 94       	cli
    6334:	9e bf       	out	0x3e, r25	; 62
    6336:	0f be       	out	0x3f, r0	; 63
    6338:	8d bf       	out	0x3d, r24	; 61
    633a:	ed b7       	in	r30, 0x3d	; 61
    633c:	fe b7       	in	r31, 0x3e	; 62
    633e:	31 96       	adiw	r30, 0x01	; 1
    6340:	9f 01       	movw	r18, r30
    6342:	8e 01       	movw	r16, r28
    6344:	0f 5f       	subi	r16, 0xFF	; 255
    6346:	1f 4f       	sbci	r17, 0xFF	; 255
    6348:	88 e0       	ldi	r24, 0x08	; 8
    634a:	d8 01       	movw	r26, r16
    634c:	0d 90       	ld	r0, X+
    634e:	8d 01       	movw	r16, r26
    6350:	d9 01       	movw	r26, r18
    6352:	0d 92       	st	X+, r0
    6354:	9d 01       	movw	r18, r26
    6356:	81 50       	subi	r24, 0x01	; 1
    6358:	c1 f7       	brne	.-16     	; 0x634a <_ZN10Movimiento5rectaEfffhf+0x66>
    635a:	c0 86       	std	Z+8, r12	; 0x08
    635c:	d1 86       	std	Z+9, r13	; 0x09
    635e:	e2 86       	std	Z+10, r14	; 0x0a
    6360:	f3 86       	std	Z+11, r15	; 0x0b
    6362:	a4 86       	std	Z+12, r10	; 0x0c
    6364:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6366:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6368:	ac 8d       	ldd	r26, Y+28	; 0x1c
    636a:	bd 8d       	ldd	r27, Y+29	; 0x1d
    636c:	85 87       	std	Z+13, r24	; 0x0d
    636e:	96 87       	std	Z+14, r25	; 0x0e
    6370:	a7 87       	std	Z+15, r26	; 0x0f
    6372:	b0 8b       	std	Z+16, r27	; 0x10
    6374:	c2 01       	movw	r24, r4
    6376:	94 01       	movw	r18, r8
    6378:	83 01       	movw	r16, r6
    637a:	ee 24       	eor	r14, r14
    637c:	0e 94 1b 31 	call	0x6236	; 0x6236 <_ZN10Movimiento8caminataEffb7COORD2Dfhf>
    6380:	8d b7       	in	r24, 0x3d	; 61
    6382:	9e b7       	in	r25, 0x3e	; 62
    6384:	41 96       	adiw	r24, 0x11	; 17
    6386:	0f b6       	in	r0, 0x3f	; 63
    6388:	f8 94       	cli
    638a:	9e bf       	out	0x3e, r25	; 62
    638c:	0f be       	out	0x3f, r0	; 63
    638e:	8d bf       	out	0x3d, r24	; 61
}
    6390:	28 96       	adiw	r28, 0x08	; 8
    6392:	0f b6       	in	r0, 0x3f	; 63
    6394:	f8 94       	cli
    6396:	de bf       	out	0x3e, r29	; 62
    6398:	0f be       	out	0x3f, r0	; 63
    639a:	cd bf       	out	0x3d, r28	; 61
    639c:	cf 91       	pop	r28
    639e:	df 91       	pop	r29
    63a0:	1f 91       	pop	r17
    63a2:	0f 91       	pop	r16
    63a4:	ff 90       	pop	r15
    63a6:	ef 90       	pop	r14
    63a8:	df 90       	pop	r13
    63aa:	cf 90       	pop	r12
    63ac:	af 90       	pop	r10
    63ae:	9f 90       	pop	r9
    63b0:	8f 90       	pop	r8
    63b2:	7f 90       	pop	r7
    63b4:	6f 90       	pop	r6
    63b6:	5f 90       	pop	r5
    63b8:	4f 90       	pop	r4
    63ba:	08 95       	ret

000063bc <_ZN10Movimiento5curvaEff7COORD2Dbhf>:
		
// curva común
void Movimiento::curva (float velocidad, float desplazamiento, COORD2D centro, bool sentido, byte marcha, float largo_pasos) {
    63bc:	2f 92       	push	r2
    63be:	3f 92       	push	r3
    63c0:	4f 92       	push	r4
    63c2:	5f 92       	push	r5
    63c4:	6f 92       	push	r6
    63c6:	7f 92       	push	r7
    63c8:	8f 92       	push	r8
    63ca:	9f 92       	push	r9
    63cc:	af 92       	push	r10
    63ce:	bf 92       	push	r11
    63d0:	cf 92       	push	r12
    63d2:	df 92       	push	r13
    63d4:	ef 92       	push	r14
    63d6:	ff 92       	push	r15
    63d8:	0f 93       	push	r16
    63da:	1f 93       	push	r17
    63dc:	df 93       	push	r29
    63de:	cf 93       	push	r28
    63e0:	cd b7       	in	r28, 0x3d	; 61
    63e2:	de b7       	in	r29, 0x3e	; 62
    63e4:	2c 97       	sbiw	r28, 0x0c	; 12
    63e6:	0f b6       	in	r0, 0x3f	; 63
    63e8:	f8 94       	cli
    63ea:	de bf       	out	0x3e, r29	; 62
    63ec:	0f be       	out	0x3f, r0	; 63
    63ee:	cd bf       	out	0x3d, r28	; 61
    63f0:	1c 01       	movw	r2, r24
    63f2:	2a 01       	movw	r4, r20
    63f4:	3b 01       	movw	r6, r22
    63f6:	09 87       	std	Y+9, r16	; 0x09
    63f8:	1a 87       	std	Y+10, r17	; 0x0a
    63fa:	2b 87       	std	Y+11, r18	; 0x0b
    63fc:	3c 87       	std	Y+12, r19	; 0x0c
    63fe:	89 82       	std	Y+1, r8	; 0x01
    6400:	9a 82       	std	Y+2, r9	; 0x02
    6402:	ab 82       	std	Y+3, r10	; 0x03
    6404:	bc 82       	std	Y+4, r11	; 0x04
    6406:	cd 82       	std	Y+5, r12	; 0x05
    6408:	de 82       	std	Y+6, r13	; 0x06
    640a:	ef 82       	std	Y+7, r14	; 0x07
    640c:	f8 86       	std	Y+8, r15	; 0x08
  caminata (velocidad, desplazamiento, true, centro, bin2sign(sentido), marcha, largo_pasos);
    640e:	89 a1       	ldd	r24, Y+33	; 0x21
    6410:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z8bin2signb>
    6414:	2d b7       	in	r18, 0x3d	; 61
    6416:	3e b7       	in	r19, 0x3e	; 62
    6418:	21 51       	subi	r18, 0x11	; 17
    641a:	30 40       	sbci	r19, 0x00	; 0
    641c:	0f b6       	in	r0, 0x3f	; 63
    641e:	f8 94       	cli
    6420:	3e bf       	out	0x3e, r19	; 62
    6422:	0f be       	out	0x3f, r0	; 63
    6424:	2d bf       	out	0x3d, r18	; 61
    6426:	ed b6       	in	r14, 0x3d	; 61
    6428:	fe b6       	in	r15, 0x3e	; 62
    642a:	08 94       	sec
    642c:	e1 1c       	adc	r14, r1
    642e:	f1 1c       	adc	r15, r1
    6430:	d7 01       	movw	r26, r14
    6432:	fe 01       	movw	r30, r28
    6434:	31 96       	adiw	r30, 0x01	; 1
    6436:	28 e0       	ldi	r18, 0x08	; 8
    6438:	01 90       	ld	r0, Z+
    643a:	0d 92       	st	X+, r0
    643c:	21 50       	subi	r18, 0x01	; 1
    643e:	e1 f7       	brne	.-8      	; 0x6438 <_ZN10Movimiento5curvaEff7COORD2Dbhf+0x7c>
    6440:	68 2f       	mov	r22, r24
    6442:	77 27       	eor	r23, r23
    6444:	67 fd       	sbrc	r22, 7
    6446:	70 95       	com	r23
    6448:	87 2f       	mov	r24, r23
    644a:	97 2f       	mov	r25, r23
    644c:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    6450:	f7 01       	movw	r30, r14
    6452:	60 87       	std	Z+8, r22	; 0x08
    6454:	71 87       	std	Z+9, r23	; 0x09
    6456:	82 87       	std	Z+10, r24	; 0x0a
    6458:	93 87       	std	Z+11, r25	; 0x0b
    645a:	8a a1       	ldd	r24, Y+34	; 0x22
    645c:	84 87       	std	Z+12, r24	; 0x0c
    645e:	8b a1       	ldd	r24, Y+35	; 0x23
    6460:	9c a1       	ldd	r25, Y+36	; 0x24
    6462:	ad a1       	ldd	r26, Y+37	; 0x25
    6464:	be a1       	ldd	r27, Y+38	; 0x26
    6466:	85 87       	std	Z+13, r24	; 0x0d
    6468:	96 87       	std	Z+14, r25	; 0x0e
    646a:	a7 87       	std	Z+15, r26	; 0x0f
    646c:	b0 8b       	std	Z+16, r27	; 0x10
    646e:	c1 01       	movw	r24, r2
    6470:	b3 01       	movw	r22, r6
    6472:	a2 01       	movw	r20, r4
    6474:	09 85       	ldd	r16, Y+9	; 0x09
    6476:	1a 85       	ldd	r17, Y+10	; 0x0a
    6478:	2b 85       	ldd	r18, Y+11	; 0x0b
    647a:	3c 85       	ldd	r19, Y+12	; 0x0c
    647c:	ee 24       	eor	r14, r14
    647e:	e3 94       	inc	r14
    6480:	0e 94 1b 31 	call	0x6236	; 0x6236 <_ZN10Movimiento8caminataEffb7COORD2Dfhf>
    6484:	2d b7       	in	r18, 0x3d	; 61
    6486:	3e b7       	in	r19, 0x3e	; 62
    6488:	2f 5e       	subi	r18, 0xEF	; 239
    648a:	3f 4f       	sbci	r19, 0xFF	; 255
    648c:	0f b6       	in	r0, 0x3f	; 63
    648e:	f8 94       	cli
    6490:	3e bf       	out	0x3e, r19	; 62
    6492:	0f be       	out	0x3f, r0	; 63
    6494:	2d bf       	out	0x3d, r18	; 61
}
    6496:	2c 96       	adiw	r28, 0x0c	; 12
    6498:	0f b6       	in	r0, 0x3f	; 63
    649a:	f8 94       	cli
    649c:	de bf       	out	0x3e, r29	; 62
    649e:	0f be       	out	0x3f, r0	; 63
    64a0:	cd bf       	out	0x3d, r28	; 61
    64a2:	cf 91       	pop	r28
    64a4:	df 91       	pop	r29
    64a6:	1f 91       	pop	r17
    64a8:	0f 91       	pop	r16
    64aa:	ff 90       	pop	r15
    64ac:	ef 90       	pop	r14
    64ae:	df 90       	pop	r13
    64b0:	cf 90       	pop	r12
    64b2:	bf 90       	pop	r11
    64b4:	af 90       	pop	r10
    64b6:	9f 90       	pop	r9
    64b8:	8f 90       	pop	r8
    64ba:	7f 90       	pop	r7
    64bc:	6f 90       	pop	r6
    64be:	5f 90       	pop	r5
    64c0:	4f 90       	pop	r4
    64c2:	3f 90       	pop	r3
    64c4:	2f 90       	pop	r2
    64c6:	08 95       	ret

000064c8 <_Z12init_filtersv>:
	motor_index %= 18;
	
	idle ++;
}

void init_filters () {                            // inicialización de los buffers circulares
    64c8:	ee e0       	ldi	r30, 0x0E	; 14
    64ca:	f3 e1       	ldi	r31, 0x13	; 19
    64cc:	20 e0       	ldi	r18, 0x00	; 0
    64ce:	30 e0       	ldi	r19, 0x00	; 0
	for (byte f=0; f<18; f++) {
		filtro [f] = RingBuffer <char> (buffer[f], 5);          
    64d0:	45 e0       	ldi	r20, 0x05	; 5
    64d2:	c9 01       	movw	r24, r18
    64d4:	88 0f       	add	r24, r24
    64d6:	99 1f       	adc	r25, r25
    64d8:	88 0f       	add	r24, r24
    64da:	99 1f       	adc	r25, r25
    64dc:	82 0f       	add	r24, r18
    64de:	93 1f       	adc	r25, r19
    64e0:	8c 54       	subi	r24, 0x4C	; 76
    64e2:	9d 4e       	sbci	r25, 0xED	; 237
    64e4:	80 83       	st	Z, r24
    64e6:	91 83       	std	Z+1, r25	; 0x01
    64e8:	12 82       	std	Z+2, r1	; 0x02
    64ea:	43 83       	std	Z+3, r20	; 0x03
    64ec:	2f 5f       	subi	r18, 0xFF	; 255
    64ee:	3f 4f       	sbci	r19, 0xFF	; 255
    64f0:	34 96       	adiw	r30, 0x04	; 4
	
	idle ++;
}

void init_filters () {                            // inicialización de los buffers circulares
	for (byte f=0; f<18; f++) {
    64f2:	22 31       	cpi	r18, 0x12	; 18
    64f4:	31 05       	cpc	r19, r1
    64f6:	69 f7       	brne	.-38     	; 0x64d2 <_Z12init_filtersv+0xa>
		filtro [f] = RingBuffer <char> (buffer[f], 5);          
	}
}
    64f8:	08 95       	ret

000064fa <_GLOBAL__I_motors>:
	byte dat = 2*digitalRead (4) + digitalRead(5); 
	// esto es provisorio
	pantalla.scrollText (("C"+String(dat, DEC)).toCharArray(), 70);    //PRUEBA DE CONCEPTO (provisorio)
	// termina provisorio
	cuerdita_flag = 128 + dat;
    64fa:	cf 93       	push	r28
    64fc:	df 93       	push	r29
    64fe:	c3 ed       	ldi	r28, 0xD3	; 211
    6500:	d1 e1       	ldi	r29, 0x11	; 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const byte ids[6][3] = {{0,1,2}, {4,5,6}, {8,9,10}, {12,13,14}, {16,17,18}, {20,21,22}};      // IDs de los motores
// const char offset[3] = {0, 0, 0};                                                              // offsets angulares de cada anillo (no se usó al final)

AX12 motors [6][3];                                          // array de los 18 motores
    6502:	ce 01       	movw	r24, r28
    6504:	0e 94 3c 03 	call	0x678	; 0x678 <_ZN4AX12C1Ev>
    6508:	ce 01       	movw	r24, r28
    650a:	03 96       	adiw	r24, 0x03	; 3
    650c:	0e 94 3c 03 	call	0x678	; 0x678 <_ZN4AX12C1Ev>
    6510:	ce 01       	movw	r24, r28
    6512:	06 96       	adiw	r24, 0x06	; 6
    6514:	0e 94 3c 03 	call	0x678	; 0x678 <_ZN4AX12C1Ev>
    6518:	29 96       	adiw	r28, 0x09	; 9
    651a:	82 e1       	ldi	r24, 0x12	; 18
    651c:	c9 30       	cpi	r28, 0x09	; 9
    651e:	d8 07       	cpc	r29, r24
    6520:	81 f7       	brne	.-32     	; 0x6502 <_GLOBAL__I_motors+0x8>
AX12 broadcast = AX12();                                      // objeto broadcast, rara vez usado
    6522:	89 e0       	ldi	r24, 0x09	; 9
    6524:	92 e1       	ldi	r25, 0x12	; 18
    6526:	0e 94 3c 03 	call	0x678	; 0x678 <_ZN4AX12C1Ev>
	byte dat = 2*digitalRead (4) + digitalRead(5); 
	// esto es provisorio
	pantalla.scrollText (("C"+String(dat, DEC)).toCharArray(), 70);    //PRUEBA DE CONCEPTO (provisorio)
	// termina provisorio
	cuerdita_flag = 128 + dat;
    652a:	df 91       	pop	r29
    652c:	cf 91       	pop	r28
    652e:	08 95       	ret

00006530 <_Zpl6StringRKS_>:

  private: 
	
};

inline String operator+( String lhs, const String &rhs )
    6530:	0f 93       	push	r16
    6532:	1f 93       	push	r17
    6534:	18 2f       	mov	r17, r24
    6536:	09 2f       	mov	r16, r25
    6538:	cb 01       	movw	r24, r22
{
  return lhs += rhs;
    653a:	ba 01       	movw	r22, r20
    653c:	0e 94 c0 78 	call	0xf180	; 0xf180 <_ZN6StringpLERKS_>
    6540:	bc 01       	movw	r22, r24
    6542:	81 2f       	mov	r24, r17
    6544:	90 2f       	mov	r25, r16
    6546:	0e 94 3c 79 	call	0xf278	; 0xf278 <_ZN6StringC1ERKS_>
}
    654a:	81 2f       	mov	r24, r17
    654c:	90 2f       	mov	r25, r16
    654e:	1f 91       	pop	r17
    6550:	0f 91       	pop	r16
    6552:	08 95       	ret

00006554 <_Z18poll_analog_sensorm>:
#define SNS_SAMPLE   6                	  // período de muestreo sensores analógicos (en ms)
#define NUM_SENSORS  2                  	// cantidad de sensores analógicos
enum {SNS_FUERZA, SNS_ANGULO};        	// nombres de los sensores
byte sensor [NUM_SENSORS] = {6, 7};   	// mapea el índice de sensor al número de port analógico

void poll_analog_sensor (unsigned long milis) {
    6554:	ef 92       	push	r14
    6556:	ff 92       	push	r15
    6558:	0f 93       	push	r16
    655a:	1f 93       	push	r17
    655c:	9b 01       	movw	r18, r22
    655e:	ac 01       	movw	r20, r24
	
	static unsigned long timer = 0;
	static byte index;                 // alterna entre los sensores
	
	if (milis-timer >= SNS_SAMPLE) {   
    6560:	80 91 57 13 	lds	r24, 0x1357
    6564:	90 91 58 13 	lds	r25, 0x1358
    6568:	a0 91 59 13 	lds	r26, 0x1359
    656c:	b0 91 5a 13 	lds	r27, 0x135A
    6570:	79 01       	movw	r14, r18
    6572:	8a 01       	movw	r16, r20
    6574:	e8 1a       	sub	r14, r24
    6576:	f9 0a       	sbc	r15, r25
    6578:	0a 0b       	sbc	r16, r26
    657a:	1b 0b       	sbc	r17, r27
    657c:	d8 01       	movw	r26, r16
    657e:	c7 01       	movw	r24, r14
    6580:	06 97       	sbiw	r24, 0x06	; 6
    6582:	a1 05       	cpc	r26, r1
    6584:	b1 05       	cpc	r27, r1
    6586:	20 f1       	brcs	.+72     	; 0x65d0 <_Z18poll_analog_sensorm+0x7c>
		timer = milis;
    6588:	20 93 57 13 	sts	0x1357, r18
    658c:	30 93 58 13 	sts	0x1358, r19
    6590:	40 93 59 13 	sts	0x1359, r20
    6594:	50 93 5a 13 	sts	0x135A, r21
		int val = ADCReadConv ();
    6598:	0e 94 2b 70 	call	0xe056	; 0xe056 <_Z11ADCReadConvv>
		switch (index) {
    659c:	e0 91 56 13 	lds	r30, 0x1356
    65a0:	ee 23       	and	r30, r30
    65a2:	19 f0       	breq	.+6      	; 0x65aa <_Z18poll_analog_sensorm+0x56>
    65a4:	e1 30       	cpi	r30, 0x01	; 1
    65a6:	51 f4       	brne	.+20     	; 0x65bc <_Z18poll_analog_sensorm+0x68>
    65a8:	05 c0       	rjmp	.+10     	; 0x65b4 <_Z18poll_analog_sensorm+0x60>
			case SNS_FUERZA:
				sns_fuerza = val;                       // el valor se almacena como viene... 
    65aa:	90 93 af 12 	sts	0x12AF, r25
    65ae:	80 93 ae 12 	sts	0x12AE, r24
    65b2:	04 c0       	rjmp	.+8      	; 0x65bc <_Z18poll_analog_sensorm+0x68>
				break;
			case SNS_ANGULO:
				sns_angulo = val;														  // ...para no gastar procesamiento acá
    65b4:	90 93 b1 12 	sts	0x12B1, r25
    65b8:	80 93 b0 12 	sts	0x12B0, r24
				break;
		}
		index ++;
		index %= NUM_SENSORS;
    65bc:	ef 5f       	subi	r30, 0xFF	; 255
    65be:	e1 70       	andi	r30, 0x01	; 1
    65c0:	e0 93 56 13 	sts	0x1356, r30
		ADCInitConv (sensor[index]);
    65c4:	f0 e0       	ldi	r31, 0x00	; 0
    65c6:	e4 50       	subi	r30, 0x04	; 4
    65c8:	fc 4f       	sbci	r31, 0xFC	; 252
    65ca:	80 81       	ld	r24, Z
    65cc:	0e 94 12 70 	call	0xe024	; 0xe024 <_Z11ADCInitConvh>
	}
	
}
    65d0:	1f 91       	pop	r17
    65d2:	0f 91       	pop	r16
    65d4:	ff 90       	pop	r15
    65d6:	ef 90       	pop	r14
    65d8:	08 95       	ret

000065da <_Z9poll_loadv>:
unsigned int idle = 0;     // esto es importantísimo para las conductas

char buffer [18][5];                              // buffers para el filtrado de la carga de los motores
RingBuffer <char> filtro[18];                       // circularización de dichos buffers 

void poll_load () {               /* mide la carga en cada motor. Lo hace cuando los motores no están trabajando, y a un 
    65da:	9f 92       	push	r9
    65dc:	af 92       	push	r10
    65de:	bf 92       	push	r11
    65e0:	cf 92       	push	r12
    65e2:	df 92       	push	r13
    65e4:	ef 92       	push	r14
    65e6:	ff 92       	push	r15
    65e8:	0f 93       	push	r16
    65ea:	1f 93       	push	r17
    65ec:	cf 93       	push	r28
    65ee:	df 93       	push	r29
                                        ritmo de 14 veces por segundo, lo cual es acorde con las características del motor
																				El resultado queda en array 'char load [6][3]'                                     */
	                                                          
	static byte motor_index = 0;                        // motor al que se le mide el load
	byte pata = motor_index / 3;
    65f0:	e0 90 5b 13 	lds	r14, 0x135B
	byte anillo = motor_index % 3;
	all_timers_off ();
    65f4:	80 e0       	ldi	r24, 0x00	; 0
    65f6:	0e 94 3f 70 	call	0xe07e	; 0xe07e <_Z14all_timers_offb>
	sei();                   // habilita las "nested interrupts"...
    65fa:	78 94       	sei
	// ...lo que hace posible la lectura del motor desde dentro de la ISR
	char carga = bin2sign(motor_index>8)*motors[pata][anillo].getLoad()/8;   // el valor es de 7 bits en realidad, por eso / 8    
    65fc:	90 e0       	ldi	r25, 0x00	; 0
    65fe:	80 91 5b 13 	lds	r24, 0x135B
    6602:	89 30       	cpi	r24, 0x09	; 9
    6604:	08 f0       	brcs	.+2      	; 0x6608 <_Z9poll_loadv+0x2e>
    6606:	91 e0       	ldi	r25, 0x01	; 1
    6608:	89 2f       	mov	r24, r25
    660a:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z8bin2signb>
    660e:	08 2f       	mov	r16, r24
    6610:	8e 2d       	mov	r24, r14
    6612:	63 e0       	ldi	r22, 0x03	; 3
    6614:	0e 94 e5 7e 	call	0xfdca	; 0xfdca <__udivmodqi4>
    6618:	c8 2e       	mov	r12, r24
    661a:	dd 24       	eor	r13, r13
    661c:	8e 2d       	mov	r24, r14
    661e:	0e 94 e5 7e 	call	0xfdca	; 0xfdca <__udivmodqi4>
    6622:	a9 2e       	mov	r10, r25
    6624:	bb 24       	eor	r11, r11
    6626:	c5 01       	movw	r24, r10
    6628:	88 0f       	add	r24, r24
    662a:	99 1f       	adc	r25, r25
    662c:	8a 0d       	add	r24, r10
    662e:	9b 1d       	adc	r25, r11
    6630:	96 01       	movw	r18, r12
    6632:	13 e0       	ldi	r17, 0x03	; 3
    6634:	22 0f       	add	r18, r18
    6636:	33 1f       	adc	r19, r19
    6638:	1a 95       	dec	r17
    663a:	e1 f7       	brne	.-8      	; 0x6634 <_Z9poll_loadv+0x5a>
    663c:	2c 0d       	add	r18, r12
    663e:	3d 1d       	adc	r19, r13
    6640:	82 0f       	add	r24, r18
    6642:	93 1f       	adc	r25, r19
    6644:	8d 52       	subi	r24, 0x2D	; 45
    6646:	9e 4e       	sbci	r25, 0xEE	; 238
    6648:	68 e2       	ldi	r22, 0x28	; 40
    664a:	0e 94 ce 04 	call	0x99c	; 0x99c <_ZN4AX128readInfoEh>
    664e:	ac 01       	movw	r20, r24
    6650:	11 27       	eor	r17, r17
    6652:	07 fd       	sbrc	r16, 7
    6654:	10 95       	com	r17
    6656:	04 9f       	mul	r16, r20
    6658:	c0 01       	movw	r24, r0
    665a:	05 9f       	mul	r16, r21
    665c:	90 0d       	add	r25, r0
    665e:	14 9f       	mul	r17, r20
    6660:	90 0d       	add	r25, r0
    6662:	11 24       	eor	r1, r1
    6664:	68 e0       	ldi	r22, 0x08	; 8
    6666:	70 e0       	ldi	r23, 0x00	; 0
    6668:	0e 94 05 7f 	call	0xfe0a	; 0xfe0a <__divmodhi4>
    666c:	46 2f       	mov	r20, r22
	filtro[motor_index].store(carga);                                 // lo guarda en el buffer circular  
    666e:	20 91 5b 13 	lds	r18, 0x135B
    6672:	82 2f       	mov	r24, r18
    6674:	90 e0       	ldi	r25, 0x00	; 0
		T read (byte index) {              // 0 es la posición actual, 1 la última, 2 la penúltima, etc.
			return buffer [get_index(index)];
		}
		
		void store (T new_value) {
			p = (p + size - 1) % size;
    6676:	88 0f       	add	r24, r24
    6678:	99 1f       	adc	r25, r25
    667a:	88 0f       	add	r24, r24
    667c:	99 1f       	adc	r25, r25
    667e:	9c 01       	movw	r18, r24
    6680:	22 5f       	subi	r18, 0xF2	; 242
    6682:	3c 4e       	sbci	r19, 0xEC	; 236
    6684:	d9 01       	movw	r26, r18
    6686:	13 96       	adiw	r26, 0x03	; 3
    6688:	6c 91       	ld	r22, X
    668a:	70 e0       	ldi	r23, 0x00	; 0
    668c:	ec 01       	movw	r28, r24
    668e:	c0 5f       	subi	r28, 0xF0	; 240
    6690:	dc 4e       	sbci	r29, 0xEC	; 236
    6692:	88 81       	ld	r24, Y
    6694:	fb 01       	movw	r30, r22
    6696:	e8 0f       	add	r30, r24
    6698:	f1 1d       	adc	r31, r1
    669a:	cf 01       	movw	r24, r30
    669c:	01 97       	sbiw	r24, 0x01	; 1
    669e:	0e 94 05 7f 	call	0xfe0a	; 0xfe0a <__divmodhi4>
    66a2:	88 83       	st	Y, r24
			buffer [p] = new_value;
    66a4:	d9 01       	movw	r26, r18
    66a6:	ed 91       	ld	r30, X+
    66a8:	fc 91       	ld	r31, X
    66aa:	11 97       	sbiw	r26, 0x01	; 1
    66ac:	e8 0f       	add	r30, r24
    66ae:	f1 1d       	adc	r31, r1
    66b0:	40 83       	st	Z, r20
			buffer = buffer_;
			size = size_;
		}
		
		T read (byte index) {              // 0 es la posición actual, 1 la última, 2 la penúltima, etc.
			return buffer [get_index(index)];
    66b2:	ed 90       	ld	r14, X+
    66b4:	fc 90       	ld	r15, X
    66b6:	11 97       	sbiw	r26, 0x01	; 1
		}
    
	private:
		
		byte get_index (byte index) {
			return (p+index) % size;
    66b8:	08 81       	ld	r16, Y
    66ba:	10 e0       	ldi	r17, 0x00	; 0
    66bc:	13 96       	adiw	r26, 0x03	; 3
    66be:	9c 90       	ld	r9, X
};

// atencion, si los buffers son *char, el moving average filter no puede ser de más de 4 o 5 puntos

template <class T> void mov_avg_filter (RingBuffer<T>* origen, T* destino, byte puntos) {
  *destino = *destino - origen->read(puntos) + origen->read(0);
    66c0:	96 01       	movw	r18, r12
    66c2:	22 0f       	add	r18, r18
    66c4:	33 1f       	adc	r19, r19
    66c6:	2c 0d       	add	r18, r12
    66c8:	3d 1d       	adc	r19, r13
    66ca:	2a 0d       	add	r18, r10
    66cc:	3b 1d       	adc	r19, r11
    66ce:	24 56       	subi	r18, 0x64	; 100
    66d0:	3d 4e       	sbci	r19, 0xED	; 237
    66d2:	c8 01       	movw	r24, r16
    66d4:	69 2d       	mov	r22, r9
    66d6:	70 e0       	ldi	r23, 0x00	; 0
    66d8:	0e 94 05 7f 	call	0xfe0a	; 0xfe0a <__divmodhi4>
    66dc:	f7 01       	movw	r30, r14
    66de:	e8 0f       	add	r30, r24
    66e0:	f1 1d       	adc	r31, r1
    66e2:	40 81       	ld	r20, Z
    66e4:	f9 01       	movw	r30, r18
    66e6:	80 81       	ld	r24, Z
    66e8:	48 0f       	add	r20, r24
    66ea:	c8 01       	movw	r24, r16
    66ec:	04 96       	adiw	r24, 0x04	; 4
    66ee:	69 2d       	mov	r22, r9
    66f0:	70 e0       	ldi	r23, 0x00	; 0
    66f2:	0e 94 05 7f 	call	0xfe0a	; 0xfe0a <__divmodhi4>
    66f6:	e8 0e       	add	r14, r24
    66f8:	f1 1c       	adc	r15, r1
    66fa:	d7 01       	movw	r26, r14
    66fc:	8c 91       	ld	r24, X
    66fe:	48 1b       	sub	r20, r24
    6700:	40 83       	st	Z, r20
	mov_avg_filter (&filtro[motor_index], &load[pata][anillo], 4);         // aplica un moving average de 4 puntos
	cli(); 
    6702:	f8 94       	cli
	all_timers_off (RESTORE);
    6704:	81 e0       	ldi	r24, 0x01	; 1
    6706:	0e 94 3f 70 	call	0xe07e	; 0xe07e <_Z14all_timers_offb>
	motor_index ++;
	motor_index %= 18;
    670a:	80 91 5b 13 	lds	r24, 0x135B
    670e:	8f 5f       	subi	r24, 0xFF	; 255
    6710:	62 e1       	ldi	r22, 0x12	; 18
    6712:	0e 94 e5 7e 	call	0xfdca	; 0xfdca <__udivmodqi4>
    6716:	90 93 5b 13 	sts	0x135B, r25
	
	idle ++;
    671a:	80 91 b2 12 	lds	r24, 0x12B2
    671e:	90 91 b3 12 	lds	r25, 0x12B3
    6722:	01 96       	adiw	r24, 0x01	; 1
    6724:	90 93 b3 12 	sts	0x12B3, r25
    6728:	80 93 b2 12 	sts	0x12B2, r24
}
    672c:	df 91       	pop	r29
    672e:	cf 91       	pop	r28
    6730:	1f 91       	pop	r17
    6732:	0f 91       	pop	r16
    6734:	ff 90       	pop	r15
    6736:	ef 90       	pop	r14
    6738:	df 90       	pop	r13
    673a:	cf 90       	pop	r12
    673c:	bf 90       	pop	r11
    673e:	af 90       	pop	r10
    6740:	9f 90       	pop	r9
    6742:	08 95       	ret

00006744 <_Z10motor_inithh>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                               inicialización motores                                                            //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int motor_init (byte pata, byte anillo) {                    
    6744:	0f 93       	push	r16
    6746:	1f 93       	push	r17
    6748:	cf 93       	push	r28
    674a:	df 93       	push	r29
    674c:	08 2f       	mov	r16, r24
    674e:	16 2f       	mov	r17, r22
  
	motors[pata][anillo].writeInfo (LED, 1);               // prende led
    6750:	83 e0       	ldi	r24, 0x03	; 3
    6752:	68 9f       	mul	r22, r24
    6754:	e0 01       	movw	r28, r0
    6756:	11 24       	eor	r1, r1
    6758:	89 e0       	ldi	r24, 0x09	; 9
    675a:	08 9f       	mul	r16, r24
    675c:	c0 01       	movw	r24, r0
    675e:	11 24       	eor	r1, r1
    6760:	c8 0f       	add	r28, r24
    6762:	d9 1f       	adc	r29, r25
    6764:	cd 52       	subi	r28, 0x2D	; 45
    6766:	de 4e       	sbci	r29, 0xEE	; 238
    6768:	ce 01       	movw	r24, r28
    676a:	69 e1       	ldi	r22, 0x19	; 25
    676c:	41 e0       	ldi	r20, 0x01	; 1
    676e:	50 e0       	ldi	r21, 0x00	; 0
    6770:	20 e0       	ldi	r18, 0x00	; 0
    6772:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <_ZN4AX129writeInfoEhib>
	}	
	
	/* CW_COMPLIANCE_MARGIN y  CCW_COMPLIANCE_MARGIN
  Expresan el error mínimo de posición a partir del cual el motor empieza a hacer fuerza 
  (CW y CCW es en cada una de las direcciones) */
  motors[pata][anillo].writeInfo (CW_COMPLIANCE_MARGIN, 1);
    6776:	ce 01       	movw	r24, r28
    6778:	6a e1       	ldi	r22, 0x1A	; 26
    677a:	41 e0       	ldi	r20, 0x01	; 1
    677c:	50 e0       	ldi	r21, 0x00	; 0
    677e:	20 e0       	ldi	r18, 0x00	; 0
    6780:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <_ZN4AX129writeInfoEhib>
  motors[pata][anillo].writeInfo (CCW_COMPLIANCE_MARGIN, 1);
    6784:	ce 01       	movw	r24, r28
    6786:	6b e1       	ldi	r22, 0x1B	; 27
    6788:	41 e0       	ldi	r20, 0x01	; 1
    678a:	50 e0       	ldi	r21, 0x00	; 0
    678c:	20 e0       	ldi	r18, 0x00	; 0
    678e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <_ZN4AX129writeInfoEhib>
  
  /* CW_COMPLIANCE_SLOPE y  CCW_COMPLIANCE_SLOPE
  Determinan cómo aumenta el torque a medida que aumenta el error de posición. 
  Valores pequeños indican más aumento a menor error */
  if (anillo==0) {
    6792:	11 23       	and	r17, r17
    6794:	a9 f0       	breq	.+42     	; 0x67c0 <_Z10motor_inithh+0x7c>
    motors[pata][anillo].writeInfo (CW_COMPLIANCE_SLOPE, 64);
    motors[pata][anillo].writeInfo (CCW_COMPLIANCE_SLOPE, 64);
  } else if (anillo==1) {
    6796:	11 30       	cpi	r17, 0x01	; 1
    6798:	99 f4       	brne	.+38     	; 0x67c0 <_Z10motor_inithh+0x7c>
    if (pata<=2) {
    679a:	03 30       	cpi	r16, 0x03	; 3
    679c:	60 f4       	brcc	.+24     	; 0x67b6 <_Z10motor_inithh+0x72>
      motors[pata][anillo].writeInfo (CW_COMPLIANCE_SLOPE, 64);
    679e:	ce 01       	movw	r24, r28
    67a0:	6c e1       	ldi	r22, 0x1C	; 28
    67a2:	40 e4       	ldi	r20, 0x40	; 64
    67a4:	50 e0       	ldi	r21, 0x00	; 0
    67a6:	20 e0       	ldi	r18, 0x00	; 0
    67a8:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <_ZN4AX129writeInfoEhib>
      motors[pata][anillo].writeInfo (CCW_COMPLIANCE_SLOPE, 128);
    67ac:	ce 01       	movw	r24, r28
    67ae:	6d e1       	ldi	r22, 0x1D	; 29
    67b0:	40 e8       	ldi	r20, 0x80	; 128
    67b2:	50 e0       	ldi	r21, 0x00	; 0
    67b4:	10 c0       	rjmp	.+32     	; 0x67d6 <_Z10motor_inithh+0x92>
    } else {
      motors[pata][anillo].writeInfo (CW_COMPLIANCE_SLOPE, 128);
    67b6:	ce 01       	movw	r24, r28
    67b8:	6c e1       	ldi	r22, 0x1C	; 28
    67ba:	40 e8       	ldi	r20, 0x80	; 128
    67bc:	50 e0       	ldi	r21, 0x00	; 0
    67be:	04 c0       	rjmp	.+8      	; 0x67c8 <_Z10motor_inithh+0x84>
      motors[pata][anillo].writeInfo (CCW_COMPLIANCE_SLOPE, 64);
    }
  } else {
    motors[pata][anillo].writeInfo (CW_COMPLIANCE_SLOPE, 64);
    67c0:	ce 01       	movw	r24, r28
    67c2:	6c e1       	ldi	r22, 0x1C	; 28
    67c4:	40 e4       	ldi	r20, 0x40	; 64
    67c6:	50 e0       	ldi	r21, 0x00	; 0
    67c8:	20 e0       	ldi	r18, 0x00	; 0
    67ca:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <_ZN4AX129writeInfoEhib>
    motors[pata][anillo].writeInfo (CCW_COMPLIANCE_SLOPE, 64);
    67ce:	ce 01       	movw	r24, r28
    67d0:	6d e1       	ldi	r22, 0x1D	; 29
    67d2:	40 e4       	ldi	r20, 0x40	; 64
    67d4:	50 e0       	ldi	r21, 0x00	; 0
    67d6:	20 e0       	ldi	r18, 0x00	; 0
    67d8:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <_ZN4AX129writeInfoEhib>
  }
    
	/* PUNCH Indica la fuerza mínima que el motor hace cuando comienza a actuar, es decir, 
  la fuerza de la que parte la curva, la fuerza que el motor hace ante el error de posición indicado por COMPLIANCE_MARGIN. 
  A partir de ahí, si el error de posición aumenta, la fuerza también aumenta, tan lentamente como se lo indique COMPLIANCE_SLOPE */
	motors[pata][anillo].writeInfo (PUNCH, 32);
    67dc:	ce 01       	movw	r24, r28
    67de:	60 e3       	ldi	r22, 0x30	; 48
    67e0:	40 e2       	ldi	r20, 0x20	; 32
    67e2:	50 e0       	ldi	r21, 0x00	; 0
    67e4:	20 e0       	ldi	r18, 0x00	; 0
    67e6:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <_ZN4AX129writeInfoEhib>
    
 	motors[pata][anillo].writeInfo (LED, 0);                // apaga led
    67ea:	ce 01       	movw	r24, r28
    67ec:	69 e1       	ldi	r22, 0x19	; 25
    67ee:	40 e0       	ldi	r20, 0x00	; 0
    67f0:	50 e0       	ldi	r21, 0x00	; 0
    67f2:	20 e0       	ldi	r18, 0x00	; 0
    67f4:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <_ZN4AX129writeInfoEhib>
void inline disable_ovf2() {TIMSK2 &= ~_BV(TOIE2);}               // deshabilita el Overflow Interrupt (timer2)
void inline enable_ovf0() {TIMSK0 |= _BV(TOIE0);}                 // habilita el Overflow Interrupt (timer0)
    67f8:	80 91 6e 00 	lds	r24, 0x006E
    67fc:	81 60       	ori	r24, 0x01	; 1
    67fe:	80 93 6e 00 	sts	0x006E, r24
		
	enable_ovf0();           // esto permite que el tiempo sea registrado
	delay (41);             // este delay es necesario, no sé por qué 
    6802:	69 e2       	ldi	r22, 0x29	; 41
    6804:	70 e0       	ldi	r23, 0x00	; 0
    6806:	80 e0       	ldi	r24, 0x00	; 0
    6808:	90 e0       	ldi	r25, 0x00	; 0
    680a:	0e 94 69 70 	call	0xe0d2	; 0xe0d2 <_Z5delaym>
void inline disable_ovf0() {TIMSK0 &= ~_BV(TOIE0);}               // deshabilita el Overflow Interrupt (timer0)
    680e:	80 91 6e 00 	lds	r24, 0x006E
    6812:	8e 7f       	andi	r24, 0xFE	; 254
    6814:	80 93 6e 00 	sts	0x006E, r24
	disable_ovf0();          // vuelve a apagar la interrupción del timer0
	
	return motors[pata][anillo].ping();      // testea a ver si el motor responde a un ping
    6818:	ce 01       	movw	r24, r28
    681a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <_ZN4AX124pingEv>

}
    681e:	df 91       	pop	r29
    6820:	cf 91       	pop	r28
    6822:	1f 91       	pop	r17
    6824:	0f 91       	pop	r16
    6826:	08 95       	ret

00006828 <_Z12motor_updatev>:
      pos_ang (pata, A, m.duracion);           // es siempre absoluta, en este punto
    }                   
  }
}

byte motor_update () {                                       // actualiza los servos
    6828:	2f 92       	push	r2
    682a:	3f 92       	push	r3
    682c:	4f 92       	push	r4
    682e:	5f 92       	push	r5
    6830:	6f 92       	push	r6
    6832:	7f 92       	push	r7
    6834:	8f 92       	push	r8
    6836:	9f 92       	push	r9
    6838:	af 92       	push	r10
    683a:	bf 92       	push	r11
    683c:	cf 92       	push	r12
    683e:	df 92       	push	r13
    6840:	ef 92       	push	r14
    6842:	ff 92       	push	r15
    6844:	0f 93       	push	r16
    6846:	1f 93       	push	r17
    6848:	df 93       	push	r29
    684a:	cf 93       	push	r28
    684c:	cd b7       	in	r28, 0x3d	; 61
    684e:	de b7       	in	r29, 0x3e	; 62
    6850:	c0 56       	subi	r28, 0x60	; 96
    6852:	d0 40       	sbci	r29, 0x00	; 0
    6854:	0f b6       	in	r0, 0x3f	; 63
    6856:	f8 94       	cli
    6858:	de bf       	out	0x3e, r29	; 62
    685a:	0f be       	out	0x3f, r0	; 63
    685c:	cd bf       	out	0x3d, r28	; 61
    685e:	22 e6       	ldi	r18, 0x62	; 98
    6860:	33 e1       	ldi	r19, 0x13	; 19
    6862:	6f 96       	adiw	r28, 0x1f	; 31
    6864:	3f af       	std	Y+63, r19	; 0x3f
    6866:	2e af       	std	Y+62, r18	; 0x3e
    6868:	6f 97       	sbiw	r28, 0x1f	; 31
    686a:	33 24       	eor	r3, r3
    686c:	aa 24       	eor	r10, r10
    686e:	bb 24       	eor	r11, r11
    6870:	b1 c0       	rjmp	.+354    	; 0x69d4 <_Z12motor_updatev+0x1ac>
	static int ang_act [6][3];                                  // ángulo actual de los 18 servos
	byte targetlength = 0;
	byte targets [18]; int posvalues[18]; int velvalues[18];
	for (byte pata=0; pata<6; pata++) {
		for (byte anillo=0; anillo<3; anillo++) {
			int diff = ang_act[pata][anillo] - ang_des[pata][anillo];
    6872:	d6 01       	movw	r26, r12
    6874:	0d 91       	ld	r16, X+
    6876:	1c 91       	ld	r17, X
    6878:	f4 01       	movw	r30, r8
    687a:	80 81       	ld	r24, Z
    687c:	91 81       	ldd	r25, Z+1	; 0x01
    687e:	08 1b       	sub	r16, r24
    6880:	19 0b       	sbc	r17, r25
			if (diff != 0) {
    6882:	09 f4       	brne	.+2      	; 0x6886 <_Z12motor_updatev+0x5e>
    6884:	87 c0       	rjmp	.+270    	; 0x6994 <_Z12motor_updatev+0x16c>
				targets [targetlength] = ids [pata][anillo];
    6886:	23 2d       	mov	r18, r3
    6888:	30 e0       	ldi	r19, 0x00	; 0
    688a:	a1 96       	adiw	r28, 0x21	; 33
    688c:	3f af       	std	Y+63, r19	; 0x3f
    688e:	2e af       	std	Y+62, r18	; 0x3e
    6890:	a1 97       	sbiw	r28, 0x21	; 33
    6892:	e1 e0       	ldi	r30, 0x01	; 1
    6894:	f0 e0       	ldi	r31, 0x00	; 0
    6896:	ec 0f       	add	r30, r28
    6898:	fd 1f       	adc	r31, r29
    689a:	e2 0f       	add	r30, r18
    689c:	f3 1f       	adc	r31, r19
    689e:	d2 01       	movw	r26, r4
    68a0:	8c 91       	ld	r24, X
    68a2:	80 83       	st	Z, r24
				// posvalues [targetlength] = ANG_ZERO + bin2sign(pata>2) * (ang_des[pata][anillo] + offset[anillo]);   // versión con offset 
				posvalues [targetlength] = ANG_ZERO + bin2sign(pata>2) * ang_des[pata][anillo];                  // acá no habría que poner un constrain??
    68a4:	80 e0       	ldi	r24, 0x00	; 0
    68a6:	b2 e0       	ldi	r27, 0x02	; 2
    68a8:	ba 15       	cp	r27, r10
    68aa:	08 f4       	brcc	.+2      	; 0x68ae <_Z12motor_updatev+0x86>
    68ac:	81 e0       	ldi	r24, 0x01	; 1
    68ae:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z8bin2signb>
    68b2:	28 2e       	mov	r2, r24
    68b4:	f4 01       	movw	r30, r8
    68b6:	01 90       	ld	r0, Z+
    68b8:	f0 81       	ld	r31, Z
    68ba:	e0 2d       	mov	r30, r0
    68bc:	6d 96       	adiw	r28, 0x1d	; 29
    68be:	ff af       	std	Y+63, r31	; 0x3f
    68c0:	ee af       	std	Y+62, r30	; 0x3e
    68c2:	6d 97       	sbiw	r28, 0x1d	; 29
				velvalues [targetlength] = constrain(vel_scale*abs(diff)/dur_des [pata][anillo], 1, 1023);                
    68c4:	98 01       	movw	r18, r16
    68c6:	17 ff       	sbrs	r17, 7
    68c8:	03 c0       	rjmp	.+6      	; 0x68d0 <_Z12motor_updatev+0xa8>
    68ca:	30 95       	com	r19
    68cc:	21 95       	neg	r18
    68ce:	3f 4f       	sbci	r19, 0xFF	; 255
    68d0:	b9 01       	movw	r22, r18
    68d2:	88 27       	eor	r24, r24
    68d4:	77 fd       	sbrc	r23, 7
    68d6:	80 95       	com	r24
    68d8:	98 2f       	mov	r25, r24
    68da:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    68de:	29 e5       	ldi	r18, 0x59	; 89
    68e0:	3c e4       	ldi	r19, 0x4C	; 76
    68e2:	4b ed       	ldi	r20, 0xDB	; 219
    68e4:	52 e4       	ldi	r21, 0x42	; 66
    68e6:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    68ea:	7b 01       	movw	r14, r22
    68ec:	8c 01       	movw	r16, r24
    68ee:	d3 01       	movw	r26, r6
    68f0:	6d 91       	ld	r22, X+
    68f2:	7c 91       	ld	r23, X
    68f4:	88 27       	eor	r24, r24
    68f6:	77 fd       	sbrc	r23, 7
    68f8:	80 95       	com	r24
    68fa:	98 2f       	mov	r25, r24
    68fc:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    6900:	9b 01       	movw	r18, r22
    6902:	ac 01       	movw	r20, r24
    6904:	c8 01       	movw	r24, r16
    6906:	b7 01       	movw	r22, r14
    6908:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    690c:	7b 01       	movw	r14, r22
    690e:	8c 01       	movw	r16, r24
    6910:	20 e0       	ldi	r18, 0x00	; 0
    6912:	30 e0       	ldi	r19, 0x00	; 0
    6914:	40 e8       	ldi	r20, 0x80	; 128
    6916:	5f e3       	ldi	r21, 0x3F	; 63
    6918:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    691c:	88 23       	and	r24, r24
    691e:	1c f4       	brge	.+6      	; 0x6926 <_Z12motor_updatev+0xfe>
    6920:	61 e0       	ldi	r22, 0x01	; 1
    6922:	70 e0       	ldi	r23, 0x00	; 0
    6924:	11 c0       	rjmp	.+34     	; 0x6948 <_Z12motor_updatev+0x120>
    6926:	c8 01       	movw	r24, r16
    6928:	b7 01       	movw	r22, r14
    692a:	20 e0       	ldi	r18, 0x00	; 0
    692c:	30 ec       	ldi	r19, 0xC0	; 192
    692e:	4f e7       	ldi	r20, 0x7F	; 127
    6930:	54 e4       	ldi	r21, 0x44	; 68
    6932:	0e 94 8c 7c 	call	0xf918	; 0xf918 <__gesf2>
    6936:	18 16       	cp	r1, r24
    6938:	1c f4       	brge	.+6      	; 0x6940 <_Z12motor_updatev+0x118>
    693a:	6f ef       	ldi	r22, 0xFF	; 255
    693c:	73 e0       	ldi	r23, 0x03	; 3
    693e:	04 c0       	rjmp	.+8      	; 0x6948 <_Z12motor_updatev+0x120>
    6940:	c8 01       	movw	r24, r16
    6942:	b7 01       	movw	r22, r14
    6944:	0e 94 30 7b 	call	0xf660	; 0xf660 <__fixsfsi>
		for (byte anillo=0; anillo<3; anillo++) {
			int diff = ang_act[pata][anillo] - ang_des[pata][anillo];
			if (diff != 0) {
				targets [targetlength] = ids [pata][anillo];
				// posvalues [targetlength] = ANG_ZERO + bin2sign(pata>2) * (ang_des[pata][anillo] + offset[anillo]);   // versión con offset 
				posvalues [targetlength] = ANG_ZERO + bin2sign(pata>2) * ang_des[pata][anillo];                  // acá no habría que poner un constrain??
    6948:	a1 96       	adiw	r28, 0x21	; 33
    694a:	ee ad       	ldd	r30, Y+62	; 0x3e
    694c:	ff ad       	ldd	r31, Y+63	; 0x3f
    694e:	a1 97       	sbiw	r28, 0x21	; 33
    6950:	ee 0f       	add	r30, r30
    6952:	ff 1f       	adc	r31, r31
    6954:	21 e0       	ldi	r18, 0x01	; 1
    6956:	30 e0       	ldi	r19, 0x00	; 0
    6958:	2c 0f       	add	r18, r28
    695a:	3d 1f       	adc	r19, r29
    695c:	e2 0f       	add	r30, r18
    695e:	f3 1f       	adc	r31, r19
    6960:	82 2d       	mov	r24, r2
    6962:	99 27       	eor	r25, r25
    6964:	87 fd       	sbrc	r24, 7
    6966:	90 95       	com	r25
    6968:	ac 01       	movw	r20, r24
    696a:	6d 96       	adiw	r28, 0x1d	; 29
    696c:	ae ad       	ldd	r26, Y+62	; 0x3e
    696e:	bf ad       	ldd	r27, Y+63	; 0x3f
    6970:	6d 97       	sbiw	r28, 0x1d	; 29
    6972:	4a 9f       	mul	r20, r26
    6974:	c0 01       	movw	r24, r0
    6976:	4b 9f       	mul	r20, r27
    6978:	90 0d       	add	r25, r0
    697a:	5a 9f       	mul	r21, r26
    697c:	90 0d       	add	r25, r0
    697e:	11 24       	eor	r1, r1
    6980:	8a 5f       	subi	r24, 0xFA	; 250
    6982:	9d 4f       	sbci	r25, 0xFD	; 253
    6984:	93 8b       	std	Z+19, r25	; 0x13
    6986:	82 8b       	std	Z+18, r24	; 0x12
				velvalues [targetlength] = constrain(vel_scale*abs(diff)/dur_des [pata][anillo], 1, 1023);                
    6988:	77 ab       	std	Z+55, r23	; 0x37
    698a:	66 ab       	std	Z+54, r22	; 0x36
				// podemos mandar los mensajes individuales (para minimizar errores)...
				// motors[pata][anillo].setPosVel (posvalues [targetlength], velvalues [targetlength]);
				// (en ese caso no se justifica que haya una "update"; lo ideal es usar el gran mensajón)
				targetlength ++;
    698c:	33 94       	inc	r3
				ang_act[pata][anillo] = ang_des[pata][anillo];
    698e:	f6 01       	movw	r30, r12
    6990:	b1 83       	std	Z+1, r27	; 0x01
    6992:	a0 83       	st	Z, r26
    6994:	22 e0       	ldi	r18, 0x02	; 2
    6996:	30 e0       	ldi	r19, 0x00	; 0
    6998:	c2 0e       	add	r12, r18
    699a:	d3 1e       	adc	r13, r19
    699c:	82 0e       	add	r8, r18
    699e:	93 1e       	adc	r9, r19
    69a0:	08 94       	sec
    69a2:	41 1c       	adc	r4, r1
    69a4:	51 1c       	adc	r5, r1
    69a6:	62 0e       	add	r6, r18
    69a8:	73 1e       	adc	r7, r19
byte motor_update () {                                       // actualiza los servos
	static int ang_act [6][3];                                  // ángulo actual de los 18 servos
	byte targetlength = 0;
	byte targets [18]; int posvalues[18]; int velvalues[18];
	for (byte pata=0; pata<6; pata++) {
		for (byte anillo=0; anillo<3; anillo++) {
    69aa:	6f 96       	adiw	r28, 0x1f	; 31
    69ac:	4e ad       	ldd	r20, Y+62	; 0x3e
    69ae:	5f ad       	ldd	r21, Y+63	; 0x3f
    69b0:	6f 97       	sbiw	r28, 0x1f	; 31
    69b2:	c4 16       	cp	r12, r20
    69b4:	d5 06       	cpc	r13, r21
    69b6:	09 f0       	breq	.+2      	; 0x69ba <_Z12motor_updatev+0x192>
    69b8:	5c cf       	rjmp	.-328    	; 0x6872 <_Z12motor_updatev+0x4a>
    69ba:	08 94       	sec
    69bc:	a1 1c       	adc	r10, r1
    69be:	b1 1c       	adc	r11, r1
    69c0:	c6 01       	movw	r24, r12
    69c2:	06 96       	adiw	r24, 0x06	; 6
    69c4:	6f 96       	adiw	r28, 0x1f	; 31
    69c6:	9f af       	std	Y+63, r25	; 0x3f
    69c8:	8e af       	std	Y+62, r24	; 0x3e
    69ca:	6f 97       	sbiw	r28, 0x1f	; 31

byte motor_update () {                                       // actualiza los servos
	static int ang_act [6][3];                                  // ángulo actual de los 18 servos
	byte targetlength = 0;
	byte targets [18]; int posvalues[18]; int velvalues[18];
	for (byte pata=0; pata<6; pata++) {
    69cc:	96 e0       	ldi	r25, 0x06	; 6
    69ce:	a9 16       	cp	r10, r25
    69d0:	b1 04       	cpc	r11, r1
    69d2:	09 f1       	breq	.+66     	; 0x6a16 <_Z12motor_updatev+0x1ee>
    69d4:	c5 01       	movw	r24, r10
    69d6:	88 0f       	add	r24, r24
    69d8:	99 1f       	adc	r25, r25
    69da:	8a 0d       	add	r24, r10
    69dc:	9b 1d       	adc	r25, r11
    69de:	9c 01       	movw	r18, r24
    69e0:	22 0f       	add	r18, r18
    69e2:	33 1f       	adc	r19, r19
    69e4:	7c e5       	ldi	r23, 0x5C	; 92
    69e6:	c7 2e       	mov	r12, r23
    69e8:	73 e1       	ldi	r23, 0x13	; 19
    69ea:	d7 2e       	mov	r13, r23
    69ec:	c2 0e       	add	r12, r18
    69ee:	d3 1e       	adc	r13, r19
    69f0:	6c e0       	ldi	r22, 0x0C	; 12
    69f2:	86 2e       	mov	r8, r22
    69f4:	62 e1       	ldi	r22, 0x12	; 18
    69f6:	96 2e       	mov	r9, r22
    69f8:	82 0e       	add	r8, r18
    69fa:	93 1e       	adc	r9, r19
    69fc:	5e e6       	ldi	r21, 0x6E	; 110
    69fe:	45 2e       	mov	r4, r21
    6a00:	54 e0       	ldi	r21, 0x04	; 4
    6a02:	55 2e       	mov	r5, r21
    6a04:	48 0e       	add	r4, r24
    6a06:	59 1e       	adc	r5, r25
    6a08:	40 e3       	ldi	r20, 0x30	; 48
    6a0a:	64 2e       	mov	r6, r20
    6a0c:	42 e1       	ldi	r20, 0x12	; 18
    6a0e:	74 2e       	mov	r7, r20
    6a10:	62 0e       	add	r6, r18
    6a12:	73 1e       	adc	r7, r19
    6a14:	2e cf       	rjmp	.-420    	; 0x6872 <_Z12motor_updatev+0x4a>
				targetlength ++;
				ang_act[pata][anillo] = ang_des[pata][anillo];
			}
		}
	}
	if (targetlength > 0) {                               // por las dudas
    6a16:	33 20       	and	r3, r3
    6a18:	61 f0       	breq	.+24     	; 0x6a32 <_Z12motor_updatev+0x20a>
	  // .. o podemos mandar el gran mensajón:
		AX12::setMultiPosVel (targetlength, targets, posvalues, velvalues);     // gran mensajón  
    6a1a:	83 2d       	mov	r24, r3
    6a1c:	be 01       	movw	r22, r28
    6a1e:	6f 5f       	subi	r22, 0xFF	; 255
    6a20:	7f 4f       	sbci	r23, 0xFF	; 255
    6a22:	ae 01       	movw	r20, r28
    6a24:	4d 5e       	subi	r20, 0xED	; 237
    6a26:	5f 4f       	sbci	r21, 0xFF	; 255
    6a28:	9e 01       	movw	r18, r28
    6a2a:	29 5c       	subi	r18, 0xC9	; 201
    6a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    6a2e:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZN4AX1214setMultiPosVelEhPhPiS1_>
		// .. otra alternativa es separarlo en 2 mensajotes: 
		// AX12::setMultiVel (targetlength, targets, velvalues);
		// AX12::setMultiPos (targetlength, targets, posvalues);
	} 
	return targetlength;
}
    6a32:	83 2d       	mov	r24, r3
    6a34:	c0 5a       	subi	r28, 0xA0	; 160
    6a36:	df 4f       	sbci	r29, 0xFF	; 255
    6a38:	0f b6       	in	r0, 0x3f	; 63
    6a3a:	f8 94       	cli
    6a3c:	de bf       	out	0x3e, r29	; 62
    6a3e:	0f be       	out	0x3f, r0	; 63
    6a40:	cd bf       	out	0x3d, r28	; 61
    6a42:	cf 91       	pop	r28
    6a44:	df 91       	pop	r29
    6a46:	1f 91       	pop	r17
    6a48:	0f 91       	pop	r16
    6a4a:	ff 90       	pop	r15
    6a4c:	ef 90       	pop	r14
    6a4e:	df 90       	pop	r13
    6a50:	cf 90       	pop	r12
    6a52:	bf 90       	pop	r11
    6a54:	af 90       	pop	r10
    6a56:	9f 90       	pop	r9
    6a58:	8f 90       	pop	r8
    6a5a:	7f 90       	pop	r7
    6a5c:	6f 90       	pop	r6
    6a5e:	5f 90       	pop	r5
    6a60:	4f 90       	pop	r4
    6a62:	3f 90       	pop	r3
    6a64:	2f 90       	pop	r2
    6a66:	08 95       	ret

00006a68 <_Z3xyzPi>:
  A.beta = ANG_SCALE/2 - ANG_SCALE*acos(cosbeta)/PI;
  
  return A;  
}

COORD3D xyz (int angulos[]) {                   // "cinemática directa"
    6a68:	2f 92       	push	r2
    6a6a:	3f 92       	push	r3
    6a6c:	4f 92       	push	r4
    6a6e:	5f 92       	push	r5
    6a70:	6f 92       	push	r6
    6a72:	7f 92       	push	r7
    6a74:	8f 92       	push	r8
    6a76:	9f 92       	push	r9
    6a78:	af 92       	push	r10
    6a7a:	bf 92       	push	r11
    6a7c:	cf 92       	push	r12
    6a7e:	df 92       	push	r13
    6a80:	ef 92       	push	r14
    6a82:	ff 92       	push	r15
    6a84:	0f 93       	push	r16
    6a86:	1f 93       	push	r17
    6a88:	df 93       	push	r29
    6a8a:	cf 93       	push	r28
    6a8c:	cd b7       	in	r28, 0x3d	; 61
    6a8e:	de b7       	in	r29, 0x3e	; 62
    6a90:	62 97       	sbiw	r28, 0x12	; 18
    6a92:	0f b6       	in	r0, 0x3f	; 63
    6a94:	f8 94       	cli
    6a96:	de bf       	out	0x3e, r29	; 62
    6a98:	0f be       	out	0x3f, r0	; 63
    6a9a:	cd bf       	out	0x3d, r28	; 61
    6a9c:	9e 87       	std	Y+14, r25	; 0x0e
    6a9e:	8d 87       	std	Y+13, r24	; 0x0d
    6aa0:	7b 01       	movw	r14, r22
    6aa2:	8e 01       	movw	r16, r28
    6aa4:	0f 5f       	subi	r16, 0xFF	; 255
    6aa6:	1f 4f       	sbci	r17, 0xFF	; 255
  float rad [3]; 
  for (byte i=0; i<3; i++) {
    6aa8:	bd e0       	ldi	r27, 0x0D	; 13
    6aaa:	cb 2e       	mov	r12, r27
    6aac:	d1 2c       	mov	r13, r1
    6aae:	cc 0e       	add	r12, r28
    6ab0:	dd 1e       	adc	r13, r29
    rad[i] = PI * angulos[i] / ANG_SCALE;        // convierte a radianes
    6ab2:	f7 01       	movw	r30, r14
    6ab4:	61 91       	ld	r22, Z+
    6ab6:	71 91       	ld	r23, Z+
    6ab8:	7f 01       	movw	r14, r30
    6aba:	88 27       	eor	r24, r24
    6abc:	77 fd       	sbrc	r23, 7
    6abe:	80 95       	com	r24
    6ac0:	98 2f       	mov	r25, r24
    6ac2:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    6ac6:	2b ed       	ldi	r18, 0xDB	; 219
    6ac8:	3f e0       	ldi	r19, 0x0F	; 15
    6aca:	49 e4       	ldi	r20, 0x49	; 73
    6acc:	50 e4       	ldi	r21, 0x40	; 64
    6ace:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    6ad2:	20 e0       	ldi	r18, 0x00	; 0
    6ad4:	30 e8       	ldi	r19, 0x80	; 128
    6ad6:	49 e1       	ldi	r20, 0x19	; 25
    6ad8:	54 e4       	ldi	r21, 0x44	; 68
    6ada:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    6ade:	f8 01       	movw	r30, r16
    6ae0:	61 93       	st	Z+, r22
    6ae2:	71 93       	st	Z+, r23
    6ae4:	81 93       	st	Z+, r24
    6ae6:	91 93       	st	Z+, r25
    6ae8:	8f 01       	movw	r16, r30
  return A;  
}

COORD3D xyz (int angulos[]) {                   // "cinemática directa"
  float rad [3]; 
  for (byte i=0; i<3; i++) {
    6aea:	ec 15       	cp	r30, r12
    6aec:	fd 05       	cpc	r31, r13
    6aee:	09 f7       	brne	.-62     	; 0x6ab2 <_Z3xyzPi+0x4a>
    rad[i] = PI * angulos[i] / ANG_SCALE;        // convierte a radianes
  }
  // rad[0] = gama; rad[1] = alfa; rad[2] = beta 
  float sqc = sqaplussqb - (doubleab * cos(rad[2]-HALF_PI));
    6af0:	69 85       	ldd	r22, Y+9	; 0x09
    6af2:	7a 85       	ldd	r23, Y+10	; 0x0a
    6af4:	8b 85       	ldd	r24, Y+11	; 0x0b
    6af6:	9c 85       	ldd	r25, Y+12	; 0x0c
    6af8:	2b ed       	ldi	r18, 0xDB	; 219
    6afa:	3f e0       	ldi	r19, 0x0F	; 15
    6afc:	49 ec       	ldi	r20, 0xC9	; 201
    6afe:	5f e3       	ldi	r21, 0x3F	; 63
    6b00:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    6b04:	0e 94 94 7a 	call	0xf528	; 0xf528 <cos>
    6b08:	27 e4       	ldi	r18, 0x47	; 71
    6b0a:	31 ee       	ldi	r19, 0xE1	; 225
    6b0c:	4f e3       	ldi	r20, 0x3F	; 63
    6b0e:	53 ec       	ldi	r21, 0xC3	; 195
    6b10:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    6b14:	28 e4       	ldi	r18, 0x48	; 72
    6b16:	31 e2       	ldi	r19, 0x21	; 33
    6b18:	4c e4       	ldi	r20, 0x4C	; 76
    6b1a:	53 e4       	ldi	r21, 0x43	; 67
    6b1c:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    6b20:	7b 01       	movw	r14, r22
    6b22:	8c 01       	movw	r16, r24
  float c = sqrt(sqc);
    6b24:	0e 94 5f 7e 	call	0xfcbe	; 0xfcbe <sqrt>
    6b28:	3b 01       	movw	r6, r22
    6b2a:	4c 01       	movw	r8, r24
  float cosalfa = (sqc + sqaminussqb) / (doublea*c);
  float delta = rad[1] - acos(cosalfa);
    6b2c:	c8 01       	movw	r24, r16
    6b2e:	b7 01       	movw	r22, r14
    6b30:	2d ec       	ldi	r18, 0xCD	; 205
    6b32:	3c e4       	ldi	r19, 0x4C	; 76
    6b34:	4b e8       	ldi	r20, 0x8B	; 139
    6b36:	52 e4       	ldi	r21, 0x42	; 66
    6b38:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    6b3c:	7b 01       	movw	r14, r22
    6b3e:	8c 01       	movw	r16, r24
    6b40:	c4 01       	movw	r24, r8
    6b42:	b3 01       	movw	r22, r6
    6b44:	23 e3       	ldi	r18, 0x33	; 51
    6b46:	33 e3       	ldi	r19, 0x33	; 51
    6b48:	43 e8       	ldi	r20, 0x83	; 131
    6b4a:	51 e4       	ldi	r21, 0x41	; 65
    6b4c:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    6b50:	9b 01       	movw	r18, r22
    6b52:	ac 01       	movw	r20, r24
    6b54:	c8 01       	movw	r24, r16
    6b56:	b7 01       	movw	r22, r14
    6b58:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    6b5c:	0e 94 bb 79 	call	0xf376	; 0xf376 <acos>
    6b60:	9b 01       	movw	r18, r22
    6b62:	ac 01       	movw	r20, r24
    6b64:	6d 81       	ldd	r22, Y+5	; 0x05
    6b66:	7e 81       	ldd	r23, Y+6	; 0x06
    6b68:	8f 81       	ldd	r24, Y+7	; 0x07
    6b6a:	98 85       	ldd	r25, Y+8	; 0x08
    6b6c:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    6b70:	7b 01       	movw	r14, r22
    6b72:	8c 01       	movw	r16, r24
  float x = c * cos(delta);
    6b74:	c8 01       	movw	r24, r16
    6b76:	0e 94 94 7a 	call	0xf528	; 0xf528 <cos>
    6b7a:	9b 01       	movw	r18, r22
    6b7c:	ac 01       	movw	r20, r24
  return (COORD3D) {(x+COXA)*cos(rad[0]), c*sin(delta), (x+COXA)*sin(rad[0])};
    6b7e:	c4 01       	movw	r24, r8
    6b80:	b3 01       	movw	r22, r6
    6b82:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    6b86:	20 e0       	ldi	r18, 0x00	; 0
    6b88:	30 e0       	ldi	r19, 0x00	; 0
    6b8a:	40 ea       	ldi	r20, 0xA0	; 160
    6b8c:	50 e4       	ldi	r21, 0x40	; 64
    6b8e:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    6b92:	6f 87       	std	Y+15, r22	; 0x0f
    6b94:	78 8b       	std	Y+16, r23	; 0x10
    6b96:	89 8b       	std	Y+17, r24	; 0x11
    6b98:	9a 8b       	std	Y+18, r25	; 0x12
    6b9a:	a9 80       	ldd	r10, Y+1	; 0x01
    6b9c:	ba 80       	ldd	r11, Y+2	; 0x02
    6b9e:	cb 80       	ldd	r12, Y+3	; 0x03
    6ba0:	dc 80       	ldd	r13, Y+4	; 0x04
    6ba2:	c6 01       	movw	r24, r12
    6ba4:	b5 01       	movw	r22, r10
    6ba6:	0e 94 94 7a 	call	0xf528	; 0xf528 <cos>
    6baa:	1b 01       	movw	r2, r22
    6bac:	2c 01       	movw	r4, r24
    6bae:	b7 01       	movw	r22, r14
    6bb0:	c8 01       	movw	r24, r16
    6bb2:	0e 94 55 7e 	call	0xfcaa	; 0xfcaa <sin>
    6bb6:	7b 01       	movw	r14, r22
    6bb8:	8c 01       	movw	r16, r24
    6bba:	c6 01       	movw	r24, r12
    6bbc:	b5 01       	movw	r22, r10
    6bbe:	0e 94 55 7e 	call	0xfcaa	; 0xfcaa <sin>
    6bc2:	5b 01       	movw	r10, r22
    6bc4:	6c 01       	movw	r12, r24
    6bc6:	6f 85       	ldd	r22, Y+15	; 0x0f
    6bc8:	78 89       	ldd	r23, Y+16	; 0x10
    6bca:	89 89       	ldd	r24, Y+17	; 0x11
    6bcc:	9a 89       	ldd	r25, Y+18	; 0x12
    6bce:	a2 01       	movw	r20, r4
    6bd0:	91 01       	movw	r18, r2
    6bd2:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    6bd6:	ed 85       	ldd	r30, Y+13	; 0x0d
    6bd8:	fe 85       	ldd	r31, Y+14	; 0x0e
    6bda:	60 83       	st	Z, r22
    6bdc:	71 83       	std	Z+1, r23	; 0x01
    6bde:	82 83       	std	Z+2, r24	; 0x02
    6be0:	93 83       	std	Z+3, r25	; 0x03
    6be2:	c4 01       	movw	r24, r8
    6be4:	b3 01       	movw	r22, r6
    6be6:	a8 01       	movw	r20, r16
    6be8:	97 01       	movw	r18, r14
    6bea:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    6bee:	ed 85       	ldd	r30, Y+13	; 0x0d
    6bf0:	fe 85       	ldd	r31, Y+14	; 0x0e
    6bf2:	64 83       	std	Z+4, r22	; 0x04
    6bf4:	75 83       	std	Z+5, r23	; 0x05
    6bf6:	86 83       	std	Z+6, r24	; 0x06
    6bf8:	97 83       	std	Z+7, r25	; 0x07
    6bfa:	6f 85       	ldd	r22, Y+15	; 0x0f
    6bfc:	78 89       	ldd	r23, Y+16	; 0x10
    6bfe:	89 89       	ldd	r24, Y+17	; 0x11
    6c00:	9a 89       	ldd	r25, Y+18	; 0x12
    6c02:	a6 01       	movw	r20, r12
    6c04:	95 01       	movw	r18, r10
    6c06:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    6c0a:	ed 85       	ldd	r30, Y+13	; 0x0d
    6c0c:	fe 85       	ldd	r31, Y+14	; 0x0e
    6c0e:	60 87       	std	Z+8, r22	; 0x08
    6c10:	71 87       	std	Z+9, r23	; 0x09
    6c12:	82 87       	std	Z+10, r24	; 0x0a
    6c14:	93 87       	std	Z+11, r25	; 0x0b
}
    6c16:	cf 01       	movw	r24, r30
    6c18:	62 96       	adiw	r28, 0x12	; 18
    6c1a:	0f b6       	in	r0, 0x3f	; 63
    6c1c:	f8 94       	cli
    6c1e:	de bf       	out	0x3e, r29	; 62
    6c20:	0f be       	out	0x3f, r0	; 63
    6c22:	cd bf       	out	0x3d, r28	; 61
    6c24:	cf 91       	pop	r28
    6c26:	df 91       	pop	r29
    6c28:	1f 91       	pop	r17
    6c2a:	0f 91       	pop	r16
    6c2c:	ff 90       	pop	r15
    6c2e:	ef 90       	pop	r14
    6c30:	df 90       	pop	r13
    6c32:	cf 90       	pop	r12
    6c34:	bf 90       	pop	r11
    6c36:	af 90       	pop	r10
    6c38:	9f 90       	pop	r9
    6c3a:	8f 90       	pop	r8
    6c3c:	7f 90       	pop	r7
    6c3e:	6f 90       	pop	r6
    6c40:	5f 90       	pop	r5
    6c42:	4f 90       	pop	r4
    6c44:	3f 90       	pop	r3
    6c46:	2f 90       	pop	r2
    6c48:	08 95       	ret

00006c4a <_Z9get_coordh>:
		// AX12::setMultiPos (targetlength, targets, posvalues);
	} 
	return targetlength;
}

COORD3D get_coord (byte pata) {    
    6c4a:	4f 92       	push	r4
    6c4c:	5f 92       	push	r5
    6c4e:	6f 92       	push	r6
    6c50:	7f 92       	push	r7
    6c52:	8f 92       	push	r8
    6c54:	9f 92       	push	r9
    6c56:	af 92       	push	r10
    6c58:	bf 92       	push	r11
    6c5a:	cf 92       	push	r12
    6c5c:	df 92       	push	r13
    6c5e:	ef 92       	push	r14
    6c60:	ff 92       	push	r15
    6c62:	0f 93       	push	r16
    6c64:	1f 93       	push	r17
    6c66:	df 93       	push	r29
    6c68:	cf 93       	push	r28
    6c6a:	cd b7       	in	r28, 0x3d	; 61
    6c6c:	de b7       	in	r29, 0x3e	; 62
    6c6e:	62 97       	sbiw	r28, 0x12	; 18
    6c70:	0f b6       	in	r0, 0x3f	; 63
    6c72:	f8 94       	cli
    6c74:	de bf       	out	0x3e, r29	; 62
    6c76:	0f be       	out	0x3f, r0	; 63
    6c78:	cd bf       	out	0x3d, r28	; 61
    6c7a:	2c 01       	movw	r4, r24
    6c7c:	66 2e       	mov	r6, r22
  int angulos [3];
  all_timers_off ();
    6c7e:	80 e0       	ldi	r24, 0x00	; 0
    6c80:	0e 94 3f 70 	call	0xe07e	; 0xe07e <_Z14all_timers_offb>
    6c84:	6e 01       	movw	r12, r28
    6c86:	08 94       	sec
    6c88:	c1 1c       	adc	r12, r1
    6c8a:	d1 1c       	adc	r13, r1
    6c8c:	00 e0       	ldi	r16, 0x00	; 0
    6c8e:	10 e0       	ldi	r17, 0x00	; 0
  for (byte i=0; i<3; i++) {
    angulos[i] = (motors[pata][i].getPos() - ANG_ZERO) * bin2sign(pata>2);       // los motores no tienen la propiedad "inverse"
    6c90:	89 e0       	ldi	r24, 0x09	; 9
    6c92:	68 9e       	mul	r6, r24
    6c94:	40 01       	movw	r8, r0
    6c96:	11 24       	eor	r1, r1
    6c98:	c8 01       	movw	r24, r16
    6c9a:	88 0f       	add	r24, r24
    6c9c:	99 1f       	adc	r25, r25
    6c9e:	80 0f       	add	r24, r16
    6ca0:	91 1f       	adc	r25, r17
    6ca2:	88 0d       	add	r24, r8
    6ca4:	99 1d       	adc	r25, r9
    6ca6:	8d 52       	subi	r24, 0x2D	; 45
    6ca8:	9e 4e       	sbci	r25, 0xEE	; 238
    6caa:	64 e2       	ldi	r22, 0x24	; 36
    6cac:	0e 94 ce 04 	call	0x99c	; 0x99c <_ZN4AX128readInfoEh>
    6cb0:	ac 01       	movw	r20, r24
    6cb2:	8a ef       	ldi	r24, 0xFA	; 250
    6cb4:	e8 2e       	mov	r14, r24
    6cb6:	8d ef       	ldi	r24, 0xFD	; 253
    6cb8:	f8 2e       	mov	r15, r24
    6cba:	e4 0e       	add	r14, r20
    6cbc:	f5 1e       	adc	r15, r21
    6cbe:	aa 24       	eor	r10, r10
    6cc0:	22 e0       	ldi	r18, 0x02	; 2
    6cc2:	26 15       	cp	r18, r6
    6cc4:	10 f4       	brcc	.+4      	; 0x6cca <_Z9get_coordh+0x80>
    6cc6:	aa 24       	eor	r10, r10
    6cc8:	a3 94       	inc	r10
    6cca:	8a 2d       	mov	r24, r10
    6ccc:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z8bin2signb>
    6cd0:	99 27       	eor	r25, r25
    6cd2:	87 fd       	sbrc	r24, 7
    6cd4:	90 95       	com	r25
    6cd6:	fc 01       	movw	r30, r24
    6cd8:	ee 9d       	mul	r30, r14
    6cda:	c0 01       	movw	r24, r0
    6cdc:	ef 9d       	mul	r30, r15
    6cde:	90 0d       	add	r25, r0
    6ce0:	fe 9d       	mul	r31, r14
    6ce2:	90 0d       	add	r25, r0
    6ce4:	11 24       	eor	r1, r1
    6ce6:	f6 01       	movw	r30, r12
    6ce8:	81 93       	st	Z+, r24
    6cea:	91 93       	st	Z+, r25
    6cec:	6f 01       	movw	r12, r30
    6cee:	0f 5f       	subi	r16, 0xFF	; 255
    6cf0:	1f 4f       	sbci	r17, 0xFF	; 255
}

COORD3D get_coord (byte pata) {    
  int angulos [3];
  all_timers_off ();
  for (byte i=0; i<3; i++) {
    6cf2:	03 30       	cpi	r16, 0x03	; 3
    6cf4:	11 05       	cpc	r17, r1
    6cf6:	81 f6       	brne	.-96     	; 0x6c98 <_Z9get_coordh+0x4e>
    angulos[i] = (motors[pata][i].getPos() - ANG_ZERO) * bin2sign(pata>2);       // los motores no tienen la propiedad "inverse"
  } 
  all_timers_off (RESTORE);
    6cf8:	81 e0       	ldi	r24, 0x01	; 1
    6cfa:	0e 94 3f 70 	call	0xe07e	; 0xe07e <_Z14all_timers_offb>
  COORD3D P = xyz (angulos);
    6cfe:	ce 01       	movw	r24, r28
    6d00:	07 96       	adiw	r24, 0x07	; 7
    6d02:	be 01       	movw	r22, r28
    6d04:	6f 5f       	subi	r22, 0xFF	; 255
    6d06:	7f 4f       	sbci	r23, 0xFF	; 255
    6d08:	0e 94 34 35 	call	0x6a68	; 0x6a68 <_Z3xyzPi>
  return (COORD3D) {P.x*bin2sign(pata>2), P.y, P.z};   
    6d0c:	ef 80       	ldd	r14, Y+7	; 0x07
    6d0e:	f8 84       	ldd	r15, Y+8	; 0x08
    6d10:	09 85       	ldd	r16, Y+9	; 0x09
    6d12:	1a 85       	ldd	r17, Y+10	; 0x0a
    6d14:	8a 2d       	mov	r24, r10
    6d16:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z8bin2signb>
    6d1a:	ab 84       	ldd	r10, Y+11	; 0x0b
    6d1c:	bc 84       	ldd	r11, Y+12	; 0x0c
    6d1e:	cd 84       	ldd	r12, Y+13	; 0x0d
    6d20:	de 84       	ldd	r13, Y+14	; 0x0e
    6d22:	6f 84       	ldd	r6, Y+15	; 0x0f
    6d24:	78 88       	ldd	r7, Y+16	; 0x10
    6d26:	89 88       	ldd	r8, Y+17	; 0x11
    6d28:	9a 88       	ldd	r9, Y+18	; 0x12
    6d2a:	99 27       	eor	r25, r25
    6d2c:	87 fd       	sbrc	r24, 7
    6d2e:	90 95       	com	r25
    6d30:	a9 2f       	mov	r26, r25
    6d32:	b9 2f       	mov	r27, r25
    6d34:	bc 01       	movw	r22, r24
    6d36:	cd 01       	movw	r24, r26
    6d38:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    6d3c:	9b 01       	movw	r18, r22
    6d3e:	ac 01       	movw	r20, r24
    6d40:	c8 01       	movw	r24, r16
    6d42:	b7 01       	movw	r22, r14
    6d44:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    6d48:	f2 01       	movw	r30, r4
    6d4a:	60 83       	st	Z, r22
    6d4c:	71 83       	std	Z+1, r23	; 0x01
    6d4e:	82 83       	std	Z+2, r24	; 0x02
    6d50:	93 83       	std	Z+3, r25	; 0x03
    6d52:	a4 82       	std	Z+4, r10	; 0x04
    6d54:	b5 82       	std	Z+5, r11	; 0x05
    6d56:	c6 82       	std	Z+6, r12	; 0x06
    6d58:	d7 82       	std	Z+7, r13	; 0x07
    6d5a:	60 86       	std	Z+8, r6	; 0x08
    6d5c:	71 86       	std	Z+9, r7	; 0x09
    6d5e:	82 86       	std	Z+10, r8	; 0x0a
    6d60:	93 86       	std	Z+11, r9	; 0x0b
}
    6d62:	c2 01       	movw	r24, r4
    6d64:	62 96       	adiw	r28, 0x12	; 18
    6d66:	0f b6       	in	r0, 0x3f	; 63
    6d68:	f8 94       	cli
    6d6a:	de bf       	out	0x3e, r29	; 62
    6d6c:	0f be       	out	0x3f, r0	; 63
    6d6e:	cd bf       	out	0x3d, r28	; 61
    6d70:	cf 91       	pop	r28
    6d72:	df 91       	pop	r29
    6d74:	1f 91       	pop	r17
    6d76:	0f 91       	pop	r16
    6d78:	ff 90       	pop	r15
    6d7a:	ef 90       	pop	r14
    6d7c:	df 90       	pop	r13
    6d7e:	cf 90       	pop	r12
    6d80:	bf 90       	pop	r11
    6d82:	af 90       	pop	r10
    6d84:	9f 90       	pop	r9
    6d86:	8f 90       	pop	r8
    6d88:	7f 90       	pop	r7
    6d8a:	6f 90       	pop	r6
    6d8c:	5f 90       	pop	r5
    6d8e:	4f 90       	pop	r4
    6d90:	08 95       	ret

00006d92 <_Z11motor_setupv>:
	
	return motors[pata][anillo].ping();      // testea a ver si el motor responde a un ping

}

void motor_setup ()   {                
    6d92:	2f 92       	push	r2
    6d94:	3f 92       	push	r3
    6d96:	4f 92       	push	r4
    6d98:	5f 92       	push	r5
    6d9a:	6f 92       	push	r6
    6d9c:	7f 92       	push	r7
    6d9e:	8f 92       	push	r8
    6da0:	9f 92       	push	r9
    6da2:	af 92       	push	r10
    6da4:	bf 92       	push	r11
    6da6:	cf 92       	push	r12
    6da8:	df 92       	push	r13
    6daa:	ef 92       	push	r14
    6dac:	ff 92       	push	r15
    6dae:	0f 93       	push	r16
    6db0:	1f 93       	push	r17
    6db2:	df 93       	push	r29
    6db4:	cf 93       	push	r28
    6db6:	cd b7       	in	r28, 0x3d	; 61
    6db8:	de b7       	in	r29, 0x3e	; 62
    6dba:	e9 97       	sbiw	r28, 0x39	; 57
    6dbc:	0f b6       	in	r0, 0x3f	; 63
    6dbe:	f8 94       	cli
    6dc0:	de bf       	out	0x3e, r29	; 62
    6dc2:	0f be       	out	0x3f, r0	; 63
    6dc4:	cd bf       	out	0x3d, r28	; 61
	AX12::init (BAUDRATE);                             // inicializa la biblioteca AX12 al baudrate indicado
    6dc6:	60 e4       	ldi	r22, 0x40	; 64
    6dc8:	72 e4       	ldi	r23, 0x42	; 66
    6dca:	8f e0       	ldi	r24, 0x0F	; 15
    6dcc:	90 e0       	ldi	r25, 0x00	; 0
    6dce:	0e 94 17 03 	call	0x62e	; 0x62e <_ZN4AX124initEl>
    6dd2:	cc 24       	eor	r12, r12
    6dd4:	dd 24       	eor	r13, r13
    6dd6:	86 e0       	ldi	r24, 0x06	; 6
    6dd8:	88 2e       	mov	r8, r24
    6dda:	4c 2c       	mov	r4, r12
	for (byte pata=0; pata<6; pata++) {
		all_timers_off ();
    6ddc:	80 e0       	ldi	r24, 0x00	; 0
    6dde:	0e 94 3f 70 	call	0xe07e	; 0xe07e <_Z14all_timers_offb>
    6de2:	76 01       	movw	r14, r12
    6de4:	ee 0c       	add	r14, r14
    6de6:	ff 1c       	adc	r15, r15
    6de8:	ec 0c       	add	r14, r12
    6dea:	fd 1c       	adc	r15, r13
    6dec:	8e e6       	ldi	r24, 0x6E	; 110
    6dee:	94 e0       	ldi	r25, 0x04	; 4
    6df0:	e8 0e       	add	r14, r24
    6df2:	f9 1e       	adc	r15, r25
    6df4:	c6 01       	movw	r24, r12
    6df6:	13 e0       	ldi	r17, 0x03	; 3
    6df8:	88 0f       	add	r24, r24
    6dfa:	99 1f       	adc	r25, r25
    6dfc:	1a 95       	dec	r17
    6dfe:	e1 f7       	brne	.-8      	; 0x6df8 <_Z11motor_setupv+0x66>
    6e00:	8c 0d       	add	r24, r12
    6e02:	9d 1d       	adc	r25, r13
    6e04:	8c 01       	movw	r16, r24
    6e06:	0d 52       	subi	r16, 0x2D	; 45
    6e08:	1e 4e       	sbci	r17, 0xEE	; 238
    6e0a:	22 24       	eor	r2, r2
    6e0c:	33 24       	eor	r3, r3
					enable_ovf0();                                              // esto habilita el delay() y el scrollText() 
					pantalla.setColor (DEGRADE_H, RGB(3, 0, 1), RGB(3, 2, 0));        
					String msg = "error pata " + String (pata, DEC) + ", motor " + String (anillo, DEC);
					for (;;) {pantalla.scrollText (msg.toCharArray(), 70); delay (6900);}                // loop indefinido
				} else {
					motors[pata][anillo].torqueOn;                                     // habilita el torque
    6e0e:	3c 01       	movw	r6, r24
}

void motor_setup ()   {                
	AX12::init (BAUDRATE);                             // inicializa la biblioteca AX12 al baudrate indicado
	for (byte pata=0; pata<6; pata++) {
		all_timers_off ();
    6e10:	a2 2c       	mov	r10, r2
		for (byte anillo=0; anillo<3; anillo++) {
			motors [pata][anillo] = AX12(ids[pata][anillo]);   // asigna los IDs
    6e12:	ce 01       	movw	r24, r28
    6e14:	01 96       	adiw	r24, 0x01	; 1
    6e16:	f7 01       	movw	r30, r14
    6e18:	60 81       	ld	r22, Z
    6e1a:	0e 94 36 03 	call	0x66c	; 0x66c <_ZN4AX12C1Eh>
    6e1e:	d8 01       	movw	r26, r16
    6e20:	fe 01       	movw	r30, r28
    6e22:	31 96       	adiw	r30, 0x01	; 1
    6e24:	83 e0       	ldi	r24, 0x03	; 3
    6e26:	01 90       	ld	r0, Z+
    6e28:	0d 92       	st	X+, r0
    6e2a:	81 50       	subi	r24, 0x01	; 1
    6e2c:	e1 f7       	brne	.-8      	; 0x6e26 <_Z11motor_setupv+0x94>
			int error = motor_init (pata, anillo);
    6e2e:	84 2d       	mov	r24, r4
    6e30:	6a 2d       	mov	r22, r10
    6e32:	0e 94 a2 33 	call	0x6744	; 0x6744 <_Z10motor_inithh>
			if (MOTORS_ENABLE) {
				if (error) {
    6e36:	89 2b       	or	r24, r25
    6e38:	09 f4       	brne	.+2      	; 0x6e3c <_Z11motor_setupv+0xaa>
    6e3a:	7e c0       	rjmp	.+252    	; 0x6f38 <_Z11motor_setupv+0x1a6>

extern volatile byte timer0_int_flag;                // permite registrar y desregistrar tareas en la interrupción del timer0

void inline enable_ovf2() {TIMSK2 |= _BV(TOIE2);}                 // habilita el Overflow Interrupt (timer2)
void inline disable_ovf2() {TIMSK2 &= ~_BV(TOIE2);}               // deshabilita el Overflow Interrupt (timer2)
void inline enable_ovf0() {TIMSK0 |= _BV(TOIE0);}                 // habilita el Overflow Interrupt (timer0)
    6e3c:	80 91 6e 00 	lds	r24, 0x006E
    6e40:	81 60       	ori	r24, 0x01	; 1
    6e42:	80 93 6e 00 	sts	0x006E, r24
				// en caso de error en algun motor
					enable_ovf0();                                              // esto habilita el delay() y el scrollText() 
					pantalla.setColor (DEGRADE_H, RGB(3, 0, 1), RGB(3, 2, 0));        
    6e46:	83 ea       	ldi	r24, 0xA3	; 163
    6e48:	93 e1       	ldi	r25, 0x13	; 19
    6e4a:	62 e0       	ldi	r22, 0x02	; 2
    6e4c:	41 e3       	ldi	r20, 0x31	; 49
    6e4e:	28 e3       	ldi	r18, 0x38	; 56
    6e50:	0e 94 25 50 	call	0xa04a	; 0xa04a <_ZN7Display8setColorEhhh>
					String msg = "error pata " + String (pata, DEC) + ", motor " + String (anillo, DEC);
    6e54:	b0 e1       	ldi	r27, 0x10	; 16
    6e56:	4b 2e       	mov	r4, r27
    6e58:	51 2c       	mov	r5, r1
    6e5a:	4c 0e       	add	r4, r28
    6e5c:	5d 1e       	adc	r5, r29
    6e5e:	c2 01       	movw	r24, r4
    6e60:	62 e0       	ldi	r22, 0x02	; 2
    6e62:	72 e0       	ldi	r23, 0x02	; 2
    6e64:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    6e68:	aa e0       	ldi	r26, 0x0A	; 10
    6e6a:	6a 2e       	mov	r6, r26
    6e6c:	71 2c       	mov	r7, r1
    6e6e:	6c 0e       	add	r6, r28
    6e70:	7d 1e       	adc	r7, r29
    6e72:	c3 01       	movw	r24, r6
    6e74:	b6 01       	movw	r22, r12
    6e76:	4a e0       	ldi	r20, 0x0A	; 10
    6e78:	50 e0       	ldi	r21, 0x00	; 0
    6e7a:	0e 94 7f 79 	call	0xf2fe	; 0xf2fe <_ZN6StringC1Eii>
    6e7e:	f6 e1       	ldi	r31, 0x16	; 22
    6e80:	8f 2e       	mov	r8, r31
    6e82:	91 2c       	mov	r9, r1
    6e84:	8c 0e       	add	r8, r28
    6e86:	9d 1e       	adc	r9, r29
    6e88:	c4 01       	movw	r24, r8
    6e8a:	b2 01       	movw	r22, r4
    6e8c:	a3 01       	movw	r20, r6
    6e8e:	0e 94 98 32 	call	0x6530	; 0x6530 <_Zpl6StringRKS_>
    6e92:	ec e1       	ldi	r30, 0x1C	; 28
    6e94:	ae 2e       	mov	r10, r30
    6e96:	b1 2c       	mov	r11, r1
    6e98:	ac 0e       	add	r10, r28
    6e9a:	bd 1e       	adc	r11, r29
    6e9c:	c5 01       	movw	r24, r10
    6e9e:	6e e0       	ldi	r22, 0x0E	; 14
    6ea0:	72 e0       	ldi	r23, 0x02	; 2
    6ea2:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    6ea6:	72 e2       	ldi	r23, 0x22	; 34
    6ea8:	c7 2e       	mov	r12, r23
    6eaa:	d1 2c       	mov	r13, r1
    6eac:	cc 0e       	add	r12, r28
    6eae:	dd 1e       	adc	r13, r29
    6eb0:	c6 01       	movw	r24, r12
    6eb2:	b4 01       	movw	r22, r8
    6eb4:	a5 01       	movw	r20, r10
    6eb6:	0e 94 98 32 	call	0x6530	; 0x6530 <_Zpl6StringRKS_>
    6eba:	8e 01       	movw	r16, r28
    6ebc:	08 5d       	subi	r16, 0xD8	; 216
    6ebe:	1f 4f       	sbci	r17, 0xFF	; 255
    6ec0:	c8 01       	movw	r24, r16
    6ec2:	b1 01       	movw	r22, r2
    6ec4:	4a e0       	ldi	r20, 0x0A	; 10
    6ec6:	50 e0       	ldi	r21, 0x00	; 0
    6ec8:	0e 94 7f 79 	call	0xf2fe	; 0xf2fe <_ZN6StringC1Eii>
    6ecc:	64 e0       	ldi	r22, 0x04	; 4
    6ece:	e6 2e       	mov	r14, r22
    6ed0:	f1 2c       	mov	r15, r1
    6ed2:	ec 0e       	add	r14, r28
    6ed4:	fd 1e       	adc	r15, r29
    6ed6:	c7 01       	movw	r24, r14
    6ed8:	b6 01       	movw	r22, r12
    6eda:	a8 01       	movw	r20, r16
    6edc:	0e 94 98 32 	call	0x6530	; 0x6530 <_Zpl6StringRKS_>
    6ee0:	c8 01       	movw	r24, r16
    6ee2:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    6ee6:	c6 01       	movw	r24, r12
    6ee8:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    6eec:	c5 01       	movw	r24, r10
    6eee:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    6ef2:	c4 01       	movw	r24, r8
    6ef4:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    6ef8:	c3 01       	movw	r24, r6
    6efa:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    6efe:	c2 01       	movw	r24, r4
    6f00:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
					for (;;) {pantalla.scrollText (msg.toCharArray(), 70); delay (6900);}                // loop indefinido
    6f04:	de 2c       	mov	r13, r14
    6f06:	1f 2d       	mov	r17, r15
    6f08:	8d 2d       	mov	r24, r13
    6f0a:	91 2f       	mov	r25, r17
    6f0c:	0e 94 89 78 	call	0xf112	; 0xf112 <_ZN6String11toCharArrayEv>
    6f10:	bc 01       	movw	r22, r24
    6f12:	83 ea       	ldi	r24, 0xA3	; 163
    6f14:	93 e1       	ldi	r25, 0x13	; 19
    6f16:	46 e4       	ldi	r20, 0x46	; 70
    6f18:	50 e0       	ldi	r21, 0x00	; 0
    6f1a:	20 e0       	ldi	r18, 0x00	; 0
    6f1c:	30 e0       	ldi	r19, 0x00	; 0
    6f1e:	01 e0       	ldi	r16, 0x01	; 1
    6f20:	ee 24       	eor	r14, r14
    6f22:	ea 94       	dec	r14
    6f24:	fe 2c       	mov	r15, r14
    6f26:	0e 94 3b 50 	call	0xa076	; 0xa076 <_ZN7Display10scrollTextEPKciici>
    6f2a:	64 ef       	ldi	r22, 0xF4	; 244
    6f2c:	7a e1       	ldi	r23, 0x1A	; 26
    6f2e:	80 e0       	ldi	r24, 0x00	; 0
    6f30:	90 e0       	ldi	r25, 0x00	; 0
    6f32:	0e 94 69 70 	call	0xe0d2	; 0xe0d2 <_Z5delaym>
    6f36:	e8 cf       	rjmp	.-48     	; 0x6f08 <_Z11motor_setupv+0x176>
				} else {
					motors[pata][anillo].torqueOn;                                     // habilita el torque
    6f38:	c1 01       	movw	r24, r2
    6f3a:	88 0f       	add	r24, r24
    6f3c:	99 1f       	adc	r25, r25
    6f3e:	82 0d       	add	r24, r2
    6f40:	93 1d       	adc	r25, r3
    6f42:	86 0d       	add	r24, r6
    6f44:	97 1d       	adc	r25, r7
    6f46:	8d 52       	subi	r24, 0x2D	; 45
    6f48:	9e 4e       	sbci	r25, 0xEE	; 238
    6f4a:	68 e1       	ldi	r22, 0x18	; 24
    6f4c:	41 e0       	ldi	r20, 0x01	; 1
    6f4e:	50 e0       	ldi	r21, 0x00	; 0
    6f50:	20 e0       	ldi	r18, 0x00	; 0
    6f52:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <_ZN4AX129writeInfoEhib>
					pantalla.setPixel(anillo+3,6-pata);                                 // motor testeado y configurado OK
    6f56:	f3 e0       	ldi	r31, 0x03	; 3
    6f58:	af 0e       	add	r10, r31
    6f5a:	83 ea       	ldi	r24, 0xA3	; 163
    6f5c:	93 e1       	ldi	r25, 0x13	; 19
    6f5e:	6a 2d       	mov	r22, r10
    6f60:	48 2d       	mov	r20, r8
    6f62:	0e 94 10 50 	call	0xa020	; 0xa020 <_ZN7Display8setPixelEhh>
    6f66:	08 94       	sec
    6f68:	21 1c       	adc	r2, r1
    6f6a:	31 1c       	adc	r3, r1
    6f6c:	08 94       	sec
    6f6e:	e1 1c       	adc	r14, r1
    6f70:	f1 1c       	adc	r15, r1
    6f72:	0d 5f       	subi	r16, 0xFD	; 253
    6f74:	1f 4f       	sbci	r17, 0xFF	; 255

void motor_setup ()   {                
	AX12::init (BAUDRATE);                             // inicializa la biblioteca AX12 al baudrate indicado
	for (byte pata=0; pata<6; pata++) {
		all_timers_off ();
		for (byte anillo=0; anillo<3; anillo++) {
    6f76:	83 e0       	ldi	r24, 0x03	; 3
    6f78:	28 16       	cp	r2, r24
    6f7a:	31 04       	cpc	r3, r1
    6f7c:	09 f0       	breq	.+2      	; 0x6f80 <_Z11motor_setupv+0x1ee>
    6f7e:	48 cf       	rjmp	.-368    	; 0x6e10 <_Z11motor_setupv+0x7e>
			} else {
				//motors[pata][anillo].torqueOff;                                              // esto no tiene ningún efecto, debido a un bug en la documentación de los AX12
			  motors[pata][anillo].writeInfo(TORQUE_LIMIT, 0);                       // en su lugar usamos esto que tiene el mismo efecto 
			}      
		}
		all_timers_off (RESTORE);
    6f80:	81 e0       	ldi	r24, 0x01	; 1
    6f82:	0e 94 3f 70 	call	0xe07e	; 0xe07e <_Z14all_timers_offb>
		pos_des [pata] = get_coord (pata);         // setea la "posición actual" a la posición real 
    6f86:	86 01       	movw	r16, r12
    6f88:	00 0f       	add	r16, r16
    6f8a:	11 1f       	adc	r17, r17
    6f8c:	0c 0d       	add	r16, r12
    6f8e:	1d 1d       	adc	r17, r13
    6f90:	00 0f       	add	r16, r16
    6f92:	11 1f       	adc	r17, r17
    6f94:	00 0f       	add	r16, r16
    6f96:	11 1f       	adc	r17, r17
    6f98:	0c 5a       	subi	r16, 0xAC	; 172
    6f9a:	1d 4e       	sbci	r17, 0xED	; 237
    6f9c:	ce 01       	movw	r24, r28
    6f9e:	8e 96       	adiw	r24, 0x2e	; 46
    6fa0:	64 2d       	mov	r22, r4
    6fa2:	0e 94 25 36 	call	0x6c4a	; 0x6c4a <_Z9get_coordh>
    6fa6:	d8 01       	movw	r26, r16
    6fa8:	fe 01       	movw	r30, r28
    6faa:	be 96       	adiw	r30, 0x2e	; 46
    6fac:	8c e0       	ldi	r24, 0x0C	; 12
    6fae:	01 90       	ld	r0, Z+
    6fb0:	0d 92       	st	X+, r0
    6fb2:	81 50       	subi	r24, 0x01	; 1
    6fb4:	e1 f7       	brne	.-8      	; 0x6fae <_Z11motor_setupv+0x21c>
    6fb6:	08 94       	sec
    6fb8:	c1 1c       	adc	r12, r1
    6fba:	d1 1c       	adc	r13, r1
    6fbc:	8a 94       	dec	r8

}

void motor_setup ()   {                
	AX12::init (BAUDRATE);                             // inicializa la biblioteca AX12 al baudrate indicado
	for (byte pata=0; pata<6; pata++) {
    6fbe:	09 f0       	breq	.+2      	; 0x6fc2 <_Z11motor_setupv+0x230>
    6fc0:	0c cf       	rjmp	.-488    	; 0x6dda <_Z11motor_setupv+0x48>
			}      
		}
		all_timers_off (RESTORE);
		pos_des [pata] = get_coord (pata);         // setea la "posición actual" a la posición real 
	}
}
    6fc2:	e9 96       	adiw	r28, 0x39	; 57
    6fc4:	0f b6       	in	r0, 0x3f	; 63
    6fc6:	f8 94       	cli
    6fc8:	de bf       	out	0x3e, r29	; 62
    6fca:	0f be       	out	0x3f, r0	; 63
    6fcc:	cd bf       	out	0x3d, r28	; 61
    6fce:	cf 91       	pop	r28
    6fd0:	df 91       	pop	r29
    6fd2:	1f 91       	pop	r17
    6fd4:	0f 91       	pop	r16
    6fd6:	ff 90       	pop	r15
    6fd8:	ef 90       	pop	r14
    6fda:	df 90       	pop	r13
    6fdc:	cf 90       	pop	r12
    6fde:	bf 90       	pop	r11
    6fe0:	af 90       	pop	r10
    6fe2:	9f 90       	pop	r9
    6fe4:	8f 90       	pop	r8
    6fe6:	7f 90       	pop	r7
    6fe8:	6f 90       	pop	r6
    6fea:	5f 90       	pop	r5
    6fec:	4f 90       	pop	r4
    6fee:	3f 90       	pop	r3
    6ff0:	2f 90       	pop	r2
    6ff2:	08 95       	ret

00006ff4 <_Z12alfabetagama7COORD3D>:
  servo (pata, 0, A.gama, duracion);                           
  servo (pata, 1, A.alfa, duracion);                          
  servo (pata, 2, A.beta, duracion);    
}

ANGULOS alfabetagama (COORD3D P) {     
    6ff4:	2f 92       	push	r2
    6ff6:	3f 92       	push	r3
    6ff8:	4f 92       	push	r4
    6ffa:	5f 92       	push	r5
    6ffc:	6f 92       	push	r6
    6ffe:	7f 92       	push	r7
    7000:	8f 92       	push	r8
    7002:	9f 92       	push	r9
    7004:	af 92       	push	r10
    7006:	bf 92       	push	r11
    7008:	cf 92       	push	r12
    700a:	df 92       	push	r13
    700c:	ef 92       	push	r14
    700e:	ff 92       	push	r15
    7010:	0f 93       	push	r16
    7012:	1f 93       	push	r17
    7014:	df 93       	push	r29
    7016:	cf 93       	push	r28
    7018:	cd b7       	in	r28, 0x3d	; 61
    701a:	de b7       	in	r29, 0x3e	; 62
    701c:	6e 97       	sbiw	r28, 0x1e	; 30
    701e:	0f b6       	in	r0, 0x3f	; 63
    7020:	f8 94       	cli
    7022:	de bf       	out	0x3e, r29	; 62
    7024:	0f be       	out	0x3f, r0	; 63
    7026:	cd bf       	out	0x3d, r28	; 61
    7028:	ef 82       	std	Y+7, r14	; 0x07
    702a:	f8 86       	std	Y+8, r15	; 0x08
    702c:	09 87       	std	Y+9, r16	; 0x09
    702e:	1a 87       	std	Y+10, r17	; 0x0a
    7030:	2b 87       	std	Y+11, r18	; 0x0b
    7032:	3c 87       	std	Y+12, r19	; 0x0c
    7034:	4d 87       	std	Y+13, r20	; 0x0d
    7036:	5e 87       	std	Y+14, r21	; 0x0e
    7038:	6f 87       	std	Y+15, r22	; 0x0f
    703a:	78 8b       	std	Y+16, r23	; 0x10
    703c:	89 8b       	std	Y+17, r24	; 0x11
    703e:	9a 8b       	std	Y+18, r25	; 0x12
    7040:	ef 80       	ldd	r14, Y+7	; 0x07
    7042:	f8 84       	ldd	r15, Y+8	; 0x08
    7044:	09 85       	ldd	r16, Y+9	; 0x09
    7046:	1a 85       	ldd	r17, Y+10	; 0x0a
    7048:	af 84       	ldd	r10, Y+15	; 0x0f
    704a:	b8 88       	ldd	r11, Y+16	; 0x10
    704c:	c9 88       	ldd	r12, Y+17	; 0x11
    704e:	da 88       	ldd	r13, Y+18	; 0x12
    7050:	8b 85       	ldd	r24, Y+11	; 0x0b
    7052:	9c 85       	ldd	r25, Y+12	; 0x0c
    7054:	ad 85       	ldd	r26, Y+13	; 0x0d
    7056:	be 85       	ldd	r27, Y+14	; 0x0e
    7058:	8b 8b       	std	Y+19, r24	; 0x13
    705a:	9c 8b       	std	Y+20, r25	; 0x14
    705c:	ad 8b       	std	Y+21, r26	; 0x15
    705e:	be 8b       	std	Y+22, r27	; 0x16
  // convierte las coordenadas cartesianas en los ángulos correspondientes
  // recibe: xn, y, z; devuelve: gama (ángulo cuerpo|coxa), alfa (ángulo coxa|femur), beta (ángulo femur|tibia)  
  // fundamento: teorema de pitágoras + teorema del coseno (ver figura) 
  
  P.x = abs (P.x);        // pequeño truco para abarajar la simetría del eje x 
    7060:	c8 01       	movw	r24, r16
    7062:	b7 01       	movw	r22, r14
    7064:	20 e0       	ldi	r18, 0x00	; 0
    7066:	30 e0       	ldi	r19, 0x00	; 0
    7068:	40 e0       	ldi	r20, 0x00	; 0
    706a:	50 e0       	ldi	r21, 0x00	; 0
    706c:	0e 94 8c 7c 	call	0xf918	; 0xf918 <__gesf2>
    7070:	87 ff       	sbrs	r24, 7
    7072:	04 c0       	rjmp	.+8      	; 0x707c <_Z12alfabetagama7COORD3D+0x88>
    7074:	17 fb       	bst	r17, 7
    7076:	10 95       	com	r17
    7078:	17 f9       	bld	r17, 7
    707a:	10 95       	com	r17
  ANGULOS A;
  
  // fase 1, calculamos "x" y el ángulo "gama"
  // COXA es la distancia entre el eje del primer motor y el segundo
  float x = hypot (P.z, P.x) - COXA;   // P.x = xn (esto es confuso)                          
    707c:	c6 01       	movw	r24, r12
    707e:	b5 01       	movw	r22, r10
    7080:	a8 01       	movw	r20, r16
    7082:	97 01       	movw	r18, r14
    7084:	0e 94 99 7c 	call	0xf932	; 0xf932 <hypot>
    7088:	20 e0       	ldi	r18, 0x00	; 0
    708a:	30 e0       	ldi	r19, 0x00	; 0
    708c:	40 ea       	ldi	r20, 0xA0	; 160
    708e:	50 e4       	ldi	r21, 0x40	; 64
    7090:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    7094:	3b 01       	movw	r6, r22
    7096:	4c 01       	movw	r8, r24
  A.gama = ANG_SCALE*(atan(P.z/P.x))/PI;                   
    7098:	c6 01       	movw	r24, r12
    709a:	b5 01       	movw	r22, r10
    709c:	a8 01       	movw	r20, r16
    709e:	97 01       	movw	r18, r14
    70a0:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    70a4:	0e 94 68 7a 	call	0xf4d0	; 0xf4d0 <atan>
    70a8:	6f 8b       	std	Y+23, r22	; 0x17
    70aa:	78 8f       	std	Y+24, r23	; 0x18
    70ac:	89 8f       	std	Y+25, r24	; 0x19
    70ae:	9a 8f       	std	Y+26, r25	; 0x1a
  
  // fase 2, calculamos alfa y beta
  // ver constantes definidas al principio
  float sqx = sq(x); float sqy = sq(P.y);
    70b0:	c4 01       	movw	r24, r8
    70b2:	b3 01       	movw	r22, r6
    70b4:	a4 01       	movw	r20, r8
    70b6:	93 01       	movw	r18, r6
    70b8:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    70bc:	1b 01       	movw	r2, r22
    70be:	2c 01       	movw	r4, r24
    70c0:	6b 89       	ldd	r22, Y+19	; 0x13
    70c2:	7c 89       	ldd	r23, Y+20	; 0x14
    70c4:	8d 89       	ldd	r24, Y+21	; 0x15
    70c6:	9e 89       	ldd	r25, Y+22	; 0x16
    70c8:	9b 01       	movw	r18, r22
    70ca:	ac 01       	movw	r20, r24
    70cc:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    70d0:	6b 8f       	std	Y+27, r22	; 0x1b
    70d2:	7c 8f       	std	Y+28, r23	; 0x1c
    70d4:	8d 8f       	std	Y+29, r24	; 0x1d
    70d6:	9e 8f       	std	Y+30, r25	; 0x1e
  float cosalfa = (sqx + sqy + sqaminussqb) / (doublea*sqrt(sqx + sqy));          // coseno del angulo que forman el "femur" y la hipotenusa
    70d8:	c2 01       	movw	r24, r4
    70da:	b1 01       	movw	r22, r2
    70dc:	2b 8d       	ldd	r18, Y+27	; 0x1b
    70de:	3c 8d       	ldd	r19, Y+28	; 0x1c
    70e0:	4d 8d       	ldd	r20, Y+29	; 0x1d
    70e2:	5e 8d       	ldd	r21, Y+30	; 0x1e
    70e4:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    70e8:	7b 01       	movw	r14, r22
    70ea:	8c 01       	movw	r16, r24
    70ec:	0e 94 5f 7e 	call	0xfcbe	; 0xfcbe <sqrt>
    70f0:	5b 01       	movw	r10, r22
    70f2:	6c 01       	movw	r12, r24
  float cosbeta = (sqaplussqb - sqx - sqy) / doubleab;                         // coseno del angulo que forman "femur" y "tibia"
  A.alfa = ANG_SCALE*(acos(cosalfa) + atan(P.y/x))/PI;
    70f4:	c8 01       	movw	r24, r16
    70f6:	b7 01       	movw	r22, r14
    70f8:	2d ec       	ldi	r18, 0xCD	; 205
    70fa:	3c e4       	ldi	r19, 0x4C	; 76
    70fc:	4b e8       	ldi	r20, 0x8B	; 139
    70fe:	52 e4       	ldi	r21, 0x42	; 66
    7100:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    7104:	7b 01       	movw	r14, r22
    7106:	8c 01       	movw	r16, r24
    7108:	c6 01       	movw	r24, r12
    710a:	b5 01       	movw	r22, r10
    710c:	23 e3       	ldi	r18, 0x33	; 51
    710e:	33 e3       	ldi	r19, 0x33	; 51
    7110:	43 e8       	ldi	r20, 0x83	; 131
    7112:	51 e4       	ldi	r21, 0x41	; 65
    7114:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    7118:	9b 01       	movw	r18, r22
    711a:	ac 01       	movw	r20, r24
    711c:	c8 01       	movw	r24, r16
    711e:	b7 01       	movw	r22, r14
    7120:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    7124:	0e 94 bb 79 	call	0xf376	; 0xf376 <acos>
    7128:	5b 01       	movw	r10, r22
    712a:	6c 01       	movw	r12, r24
    712c:	6b 89       	ldd	r22, Y+19	; 0x13
    712e:	7c 89       	ldd	r23, Y+20	; 0x14
    7130:	8d 89       	ldd	r24, Y+21	; 0x15
    7132:	9e 89       	ldd	r25, Y+22	; 0x16
    7134:	a4 01       	movw	r20, r8
    7136:	93 01       	movw	r18, r6
    7138:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    713c:	0e 94 68 7a 	call	0xf4d0	; 0xf4d0 <atan>
    7140:	7b 01       	movw	r14, r22
    7142:	8c 01       	movw	r16, r24
  A.beta = ANG_SCALE/2 - ANG_SCALE*acos(cosbeta)/PI;
    7144:	68 e4       	ldi	r22, 0x48	; 72
    7146:	71 e2       	ldi	r23, 0x21	; 33
    7148:	8c e4       	ldi	r24, 0x4C	; 76
    714a:	93 e4       	ldi	r25, 0x43	; 67
    714c:	a2 01       	movw	r20, r4
    714e:	91 01       	movw	r18, r2
    7150:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    7154:	2b 8d       	ldd	r18, Y+27	; 0x1b
    7156:	3c 8d       	ldd	r19, Y+28	; 0x1c
    7158:	4d 8d       	ldd	r20, Y+29	; 0x1d
    715a:	5e 8d       	ldd	r21, Y+30	; 0x1e
    715c:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    7160:	27 e4       	ldi	r18, 0x47	; 71
    7162:	31 ee       	ldi	r19, 0xE1	; 225
    7164:	4f e3       	ldi	r20, 0x3F	; 63
    7166:	53 e4       	ldi	r21, 0x43	; 67
    7168:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    716c:	0e 94 bb 79 	call	0xf376	; 0xf376 <acos>
  
  return A;  
    7170:	20 e0       	ldi	r18, 0x00	; 0
    7172:	30 e8       	ldi	r19, 0x80	; 128
    7174:	49 e1       	ldi	r20, 0x19	; 25
    7176:	54 e4       	ldi	r21, 0x44	; 68
    7178:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    717c:	2b ed       	ldi	r18, 0xDB	; 219
    717e:	3f e0       	ldi	r19, 0x0F	; 15
    7180:	49 e4       	ldi	r20, 0x49	; 73
    7182:	50 ec       	ldi	r21, 0xC0	; 192
    7184:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    7188:	20 e0       	ldi	r18, 0x00	; 0
    718a:	30 e8       	ldi	r19, 0x80	; 128
    718c:	49 e9       	ldi	r20, 0x99	; 153
    718e:	53 e4       	ldi	r21, 0x43	; 67
    7190:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    7194:	0e 94 30 7b 	call	0xf660	; 0xf660 <__fixsfsi>
    7198:	7e 83       	std	Y+6, r23	; 0x06
    719a:	6d 83       	std	Y+5, r22	; 0x05
    719c:	c6 01       	movw	r24, r12
    719e:	b5 01       	movw	r22, r10
    71a0:	a8 01       	movw	r20, r16
    71a2:	97 01       	movw	r18, r14
    71a4:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    71a8:	20 e0       	ldi	r18, 0x00	; 0
    71aa:	30 e8       	ldi	r19, 0x80	; 128
    71ac:	49 e1       	ldi	r20, 0x19	; 25
    71ae:	54 e4       	ldi	r21, 0x44	; 68
    71b0:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    71b4:	2b ed       	ldi	r18, 0xDB	; 219
    71b6:	3f e0       	ldi	r19, 0x0F	; 15
    71b8:	49 e4       	ldi	r20, 0x49	; 73
    71ba:	50 e4       	ldi	r21, 0x40	; 64
    71bc:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    71c0:	0e 94 30 7b 	call	0xf660	; 0xf660 <__fixsfsi>
    71c4:	7c 83       	std	Y+4, r23	; 0x04
    71c6:	6b 83       	std	Y+3, r22	; 0x03
    71c8:	6f 89       	ldd	r22, Y+23	; 0x17
    71ca:	78 8d       	ldd	r23, Y+24	; 0x18
    71cc:	89 8d       	ldd	r24, Y+25	; 0x19
    71ce:	9a 8d       	ldd	r25, Y+26	; 0x1a
    71d0:	20 e0       	ldi	r18, 0x00	; 0
    71d2:	30 e8       	ldi	r19, 0x80	; 128
    71d4:	49 e1       	ldi	r20, 0x19	; 25
    71d6:	54 e4       	ldi	r21, 0x44	; 68
    71d8:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    71dc:	2b ed       	ldi	r18, 0xDB	; 219
    71de:	3f e0       	ldi	r19, 0x0F	; 15
    71e0:	49 e4       	ldi	r20, 0x49	; 73
    71e2:	50 e4       	ldi	r21, 0x40	; 64
    71e4:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    71e8:	0e 94 30 7b 	call	0xf660	; 0xf660 <__fixsfsi>
    71ec:	7a 83       	std	Y+2, r23	; 0x02
    71ee:	69 83       	std	Y+1, r22	; 0x01
    71f0:	29 81       	ldd	r18, Y+1	; 0x01
    71f2:	3a 81       	ldd	r19, Y+2	; 0x02
    71f4:	4b 81       	ldd	r20, Y+3	; 0x03
    71f6:	5c 81       	ldd	r21, Y+4	; 0x04
    71f8:	6d 81       	ldd	r22, Y+5	; 0x05
    71fa:	7e 81       	ldd	r23, Y+6	; 0x06
}
    71fc:	80 e0       	ldi	r24, 0x00	; 0
    71fe:	90 e0       	ldi	r25, 0x00	; 0
    7200:	6e 96       	adiw	r28, 0x1e	; 30
    7202:	0f b6       	in	r0, 0x3f	; 63
    7204:	f8 94       	cli
    7206:	de bf       	out	0x3e, r29	; 62
    7208:	0f be       	out	0x3f, r0	; 63
    720a:	cd bf       	out	0x3d, r28	; 61
    720c:	cf 91       	pop	r28
    720e:	df 91       	pop	r29
    7210:	1f 91       	pop	r17
    7212:	0f 91       	pop	r16
    7214:	ff 90       	pop	r15
    7216:	ef 90       	pop	r14
    7218:	df 90       	pop	r13
    721a:	cf 90       	pop	r12
    721c:	bf 90       	pop	r11
    721e:	af 90       	pop	r10
    7220:	9f 90       	pop	r9
    7222:	8f 90       	pop	r8
    7224:	7f 90       	pop	r7
    7226:	6f 90       	pop	r6
    7228:	5f 90       	pop	r5
    722a:	4f 90       	pop	r4
    722c:	3f 90       	pop	r3
    722e:	2f 90       	pop	r2
    7230:	08 95       	ret

00007232 <_Z9set_coordR7MOVDATA>:
  float delta = rad[1] - acos(cosalfa);
  float x = c * cos(delta);
  return (COORD3D) {(x+COXA)*cos(rad[0]), c*sin(delta), (x+COXA)*sin(rad[0])};
}

void set_coord (MOVDATA &m) {     
    7232:	2f 92       	push	r2
    7234:	3f 92       	push	r3
    7236:	4f 92       	push	r4
    7238:	5f 92       	push	r5
    723a:	6f 92       	push	r6
    723c:	7f 92       	push	r7
    723e:	8f 92       	push	r8
    7240:	9f 92       	push	r9
    7242:	af 92       	push	r10
    7244:	bf 92       	push	r11
    7246:	cf 92       	push	r12
    7248:	df 92       	push	r13
    724a:	ef 92       	push	r14
    724c:	ff 92       	push	r15
    724e:	0f 93       	push	r16
    7250:	1f 93       	push	r17
    7252:	df 93       	push	r29
    7254:	cf 93       	push	r28
    7256:	cd b7       	in	r28, 0x3d	; 61
    7258:	de b7       	in	r29, 0x3e	; 62
    725a:	60 97       	sbiw	r28, 0x10	; 16
    725c:	0f b6       	in	r0, 0x3f	; 63
    725e:	f8 94       	cli
    7260:	de bf       	out	0x3e, r29	; 62
    7262:	0f be       	out	0x3f, r0	; 63
    7264:	cd bf       	out	0x3d, r28	; 61
    7266:	4c 01       	movw	r8, r24
  // mueve x patas con coordenadas cartesianas
  // el byte "patas" indica en binario qué patas van
  ANGULOS A;
  if (m.absolute) {A = alfabetagama (m.coord);}
    7268:	fc 01       	movw	r30, r24
    726a:	87 85       	ldd	r24, Z+15	; 0x0f
    726c:	88 23       	and	r24, r24
    726e:	e9 f0       	breq	.+58     	; 0x72aa <_Z9set_coordR7MOVDATA+0x78>
    7270:	e1 80       	ldd	r14, Z+1	; 0x01
    7272:	f2 80       	ldd	r15, Z+2	; 0x02
    7274:	03 81       	ldd	r16, Z+3	; 0x03
    7276:	14 81       	ldd	r17, Z+4	; 0x04
    7278:	25 81       	ldd	r18, Z+5	; 0x05
    727a:	36 81       	ldd	r19, Z+6	; 0x06
    727c:	47 81       	ldd	r20, Z+7	; 0x07
    727e:	50 85       	ldd	r21, Z+8	; 0x08
    7280:	61 85       	ldd	r22, Z+9	; 0x09
    7282:	72 85       	ldd	r23, Z+10	; 0x0a
    7284:	83 85       	ldd	r24, Z+11	; 0x0b
    7286:	94 85       	ldd	r25, Z+12	; 0x0c
    7288:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <_Z12alfabetagama7COORD3D>
    728c:	2f 83       	std	Y+7, r18	; 0x07
    728e:	38 87       	std	Y+8, r19	; 0x08
    7290:	49 87       	std	Y+9, r20	; 0x09
    7292:	5a 87       	std	Y+10, r21	; 0x0a
    7294:	6b 87       	std	Y+11, r22	; 0x0b
    7296:	7c 87       	std	Y+12, r23	; 0x0c
    7298:	de 01       	movw	r26, r28
    729a:	11 96       	adiw	r26, 0x01	; 1
    729c:	fe 01       	movw	r30, r28
    729e:	37 96       	adiw	r30, 0x07	; 7
    72a0:	86 e0       	ldi	r24, 0x06	; 6
    72a2:	01 90       	ld	r0, Z+
    72a4:	0d 92       	st	X+, r0
    72a6:	81 50       	subi	r24, 0x01	; 1
    72a8:	e1 f7       	brne	.-8      	; 0x72a2 <_Z9set_coordR7MOVDATA+0x70>
    72aa:	4c e0       	ldi	r20, 0x0C	; 12
    72ac:	24 2e       	mov	r2, r20
    72ae:	42 e1       	ldi	r20, 0x12	; 18
    72b0:	34 2e       	mov	r3, r20
    72b2:	30 e3       	ldi	r19, 0x30	; 48
    72b4:	43 2e       	mov	r4, r19
    72b6:	32 e1       	ldi	r19, 0x12	; 18
    72b8:	53 2e       	mov	r5, r19
    72ba:	84 e5       	ldi	r24, 0x54	; 84
    72bc:	92 e1       	ldi	r25, 0x12	; 18
    72be:	9e 87       	std	Y+14, r25	; 0x0e
    72c0:	8d 87       	std	Y+13, r24	; 0x0d
    72c2:	66 24       	eor	r6, r6
    72c4:	77 24       	eor	r7, r7
  for (byte pata=0; pata<6; pata++) {
    if ((m.patas>>pata)&1) {
      if (m.absolute) {
        pos_des [pata] = m.coord;
    72c6:	f4 01       	movw	r30, r8
    72c8:	31 96       	adiw	r30, 0x01	; 1
    72ca:	f8 8b       	std	Y+16, r31	; 0x10
    72cc:	ef 87       	std	Y+15, r30	; 0x0f
  // mueve x patas con coordenadas cartesianas
  // el byte "patas" indica en binario qué patas van
  ANGULOS A;
  if (m.absolute) {A = alfabetagama (m.coord);}
  for (byte pata=0; pata<6; pata++) {
    if ((m.patas>>pata)&1) {
    72ce:	f4 01       	movw	r30, r8
    72d0:	80 81       	ld	r24, Z
    72d2:	90 e0       	ldi	r25, 0x00	; 0
    72d4:	06 2c       	mov	r0, r6
    72d6:	02 c0       	rjmp	.+4      	; 0x72dc <_Z9set_coordR7MOVDATA+0xaa>
    72d8:	95 95       	asr	r25
    72da:	87 95       	ror	r24
    72dc:	0a 94       	dec	r0
    72de:	e2 f7       	brpl	.-8      	; 0x72d8 <_Z9set_coordR7MOVDATA+0xa6>
    72e0:	80 ff       	sbrs	r24, 0
    72e2:	63 c0       	rjmp	.+198    	; 0x73aa <_Z9set_coordR7MOVDATA+0x178>
      if (m.absolute) {
    72e4:	87 85       	ldd	r24, Z+15	; 0x0f
    72e6:	88 23       	and	r24, r24
    72e8:	51 f0       	breq	.+20     	; 0x72fe <_Z9set_coordR7MOVDATA+0xcc>
        pos_des [pata] = m.coord;
    72ea:	ad 85       	ldd	r26, Y+13	; 0x0d
    72ec:	be 85       	ldd	r27, Y+14	; 0x0e
    72ee:	ef 85       	ldd	r30, Y+15	; 0x0f
    72f0:	f8 89       	ldd	r31, Y+16	; 0x10
    72f2:	8c e0       	ldi	r24, 0x0C	; 12
    72f4:	01 90       	ld	r0, Z+
    72f6:	0d 92       	st	X+, r0
    72f8:	81 50       	subi	r24, 0x01	; 1
    72fa:	e1 f7       	brne	.-8      	; 0x72f4 <_Z9set_coordR7MOVDATA+0xc2>
    72fc:	3b c0       	rjmp	.+118    	; 0x7374 <_Z9set_coordR7MOVDATA+0x142>
      } else {
        sumasigna (&pos_des[pata], m.coord);
    72fe:	53 01       	movw	r10, r6
    7300:	aa 0c       	add	r10, r10
    7302:	bb 1c       	adc	r11, r11
    7304:	a6 0c       	add	r10, r6
    7306:	b7 1c       	adc	r11, r7
    7308:	aa 0c       	add	r10, r10
    730a:	bb 1c       	adc	r11, r11
    730c:	aa 0c       	add	r10, r10
    730e:	bb 1c       	adc	r11, r11
    7310:	84 e5       	ldi	r24, 0x54	; 84
    7312:	92 e1       	ldi	r25, 0x12	; 18
    7314:	a8 0e       	add	r10, r24
    7316:	b9 1e       	adc	r11, r25
    7318:	c5 01       	movw	r24, r10
    731a:	f4 01       	movw	r30, r8
    731c:	c1 80       	ldd	r12, Z+1	; 0x01
    731e:	d2 80       	ldd	r13, Z+2	; 0x02
    7320:	e3 80       	ldd	r14, Z+3	; 0x03
    7322:	f4 80       	ldd	r15, Z+4	; 0x04
    7324:	05 81       	ldd	r16, Z+5	; 0x05
    7326:	16 81       	ldd	r17, Z+6	; 0x06
    7328:	27 81       	ldd	r18, Z+7	; 0x07
    732a:	30 85       	ldd	r19, Z+8	; 0x08
    732c:	41 85       	ldd	r20, Z+9	; 0x09
    732e:	52 85       	ldd	r21, Z+10	; 0x0a
    7330:	63 85       	ldd	r22, Z+11	; 0x0b
    7332:	74 85       	ldd	r23, Z+12	; 0x0c
    7334:	0e 94 c6 3e 	call	0x7d8c	; 0x7d8c <_Z9sumasignaP7COORD3DS_>
        A = alfabetagama (pos_des [pata]);
    7338:	f5 01       	movw	r30, r10
    733a:	e0 80       	ld	r14, Z
    733c:	f1 80       	ldd	r15, Z+1	; 0x01
    733e:	02 81       	ldd	r16, Z+2	; 0x02
    7340:	13 81       	ldd	r17, Z+3	; 0x03
    7342:	24 81       	ldd	r18, Z+4	; 0x04
    7344:	35 81       	ldd	r19, Z+5	; 0x05
    7346:	46 81       	ldd	r20, Z+6	; 0x06
    7348:	57 81       	ldd	r21, Z+7	; 0x07
    734a:	60 85       	ldd	r22, Z+8	; 0x08
    734c:	71 85       	ldd	r23, Z+9	; 0x09
    734e:	82 85       	ldd	r24, Z+10	; 0x0a
    7350:	93 85       	ldd	r25, Z+11	; 0x0b
    7352:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <_Z12alfabetagama7COORD3D>
    7356:	2f 83       	std	Y+7, r18	; 0x07
    7358:	38 87       	std	Y+8, r19	; 0x08
    735a:	49 87       	std	Y+9, r20	; 0x09
    735c:	5a 87       	std	Y+10, r21	; 0x0a
    735e:	6b 87       	std	Y+11, r22	; 0x0b
    7360:	7c 87       	std	Y+12, r23	; 0x0c
    7362:	de 01       	movw	r26, r28
    7364:	11 96       	adiw	r26, 0x01	; 1
    7366:	fe 01       	movw	r30, r28
    7368:	37 96       	adiw	r30, 0x07	; 7
    736a:	86 e0       	ldi	r24, 0x06	; 6
    736c:	01 90       	ld	r0, Z+
    736e:	0d 92       	st	X+, r0
    7370:	81 50       	subi	r24, 0x01	; 1
    7372:	e1 f7       	brne	.-8      	; 0x736c <_Z9set_coordR7MOVDATA+0x13a>
      }      
      pos_ang (pata, A, m.duracion);           // es siempre absoluta, en este punto
    7374:	f4 01       	movw	r30, r8
    7376:	25 85       	ldd	r18, Z+13	; 0x0d
    7378:	36 85       	ldd	r19, Z+14	; 0x0e
    737a:	4b 81       	ldd	r20, Y+3	; 0x03
    737c:	5c 81       	ldd	r21, Y+4	; 0x04
    737e:	6d 81       	ldd	r22, Y+5	; 0x05
    7380:	7e 81       	ldd	r23, Y+6	; 0x06
COORD3D pos_des [6];                                         // posición destino de cada pata  
char load [6][3];                                            // carga de los motores
volatile int sns_fuerza, sns_angulo;                             // sensores analógicos (de cuerdita)

void servo (byte pata, byte anillo, int angulo, int duracion) {                 
  ang_des [pata][anillo] = angulo;    
    7382:	89 81       	ldd	r24, Y+1	; 0x01
    7384:	9a 81       	ldd	r25, Y+2	; 0x02
    7386:	f1 01       	movw	r30, r2
    7388:	91 83       	std	Z+1, r25	; 0x01
    738a:	80 83       	st	Z, r24
  dur_des [pata][anillo] = duracion;
    738c:	f2 01       	movw	r30, r4
    738e:	31 83       	std	Z+1, r19	; 0x01
    7390:	20 83       	st	Z, r18
COORD3D pos_des [6];                                         // posición destino de cada pata  
char load [6][3];                                            // carga de los motores
volatile int sns_fuerza, sns_angulo;                             // sensores analógicos (de cuerdita)

void servo (byte pata, byte anillo, int angulo, int duracion) {                 
  ang_des [pata][anillo] = angulo;    
    7392:	f1 01       	movw	r30, r2
    7394:	53 83       	std	Z+3, r21	; 0x03
    7396:	42 83       	std	Z+2, r20	; 0x02
  dur_des [pata][anillo] = duracion;
    7398:	f2 01       	movw	r30, r4
    739a:	33 83       	std	Z+3, r19	; 0x03
    739c:	22 83       	std	Z+2, r18	; 0x02
COORD3D pos_des [6];                                         // posición destino de cada pata  
char load [6][3];                                            // carga de los motores
volatile int sns_fuerza, sns_angulo;                             // sensores analógicos (de cuerdita)

void servo (byte pata, byte anillo, int angulo, int duracion) {                 
  ang_des [pata][anillo] = angulo;    
    739e:	f1 01       	movw	r30, r2
    73a0:	75 83       	std	Z+5, r23	; 0x05
    73a2:	64 83       	std	Z+4, r22	; 0x04
  dur_des [pata][anillo] = duracion;
    73a4:	f2 01       	movw	r30, r4
    73a6:	35 83       	std	Z+5, r19	; 0x05
    73a8:	24 83       	std	Z+4, r18	; 0x04
    73aa:	08 94       	sec
    73ac:	61 1c       	adc	r6, r1
    73ae:	71 1c       	adc	r7, r1
    73b0:	86 e0       	ldi	r24, 0x06	; 6
    73b2:	90 e0       	ldi	r25, 0x00	; 0
    73b4:	28 0e       	add	r2, r24
    73b6:	39 1e       	adc	r3, r25
    73b8:	48 0e       	add	r4, r24
    73ba:	59 1e       	adc	r5, r25
    73bc:	ed 85       	ldd	r30, Y+13	; 0x0d
    73be:	fe 85       	ldd	r31, Y+14	; 0x0e
    73c0:	3c 96       	adiw	r30, 0x0c	; 12
    73c2:	fe 87       	std	Y+14, r31	; 0x0e
    73c4:	ed 87       	std	Y+13, r30	; 0x0d
void set_coord (MOVDATA &m) {     
  // mueve x patas con coordenadas cartesianas
  // el byte "patas" indica en binario qué patas van
  ANGULOS A;
  if (m.absolute) {A = alfabetagama (m.coord);}
  for (byte pata=0; pata<6; pata++) {
    73c6:	f6 e0       	ldi	r31, 0x06	; 6
    73c8:	6f 16       	cp	r6, r31
    73ca:	71 04       	cpc	r7, r1
    73cc:	09 f0       	breq	.+2      	; 0x73d0 <_Z9set_coordR7MOVDATA+0x19e>
    73ce:	7f cf       	rjmp	.-258    	; 0x72ce <_Z9set_coordR7MOVDATA+0x9c>
        A = alfabetagama (pos_des [pata]);
      }      
      pos_ang (pata, A, m.duracion);           // es siempre absoluta, en este punto
    }                   
  }
}
    73d0:	60 96       	adiw	r28, 0x10	; 16
    73d2:	0f b6       	in	r0, 0x3f	; 63
    73d4:	f8 94       	cli
    73d6:	de bf       	out	0x3e, r29	; 62
    73d8:	0f be       	out	0x3f, r0	; 63
    73da:	cd bf       	out	0x3d, r28	; 61
    73dc:	cf 91       	pop	r28
    73de:	df 91       	pop	r29
    73e0:	1f 91       	pop	r17
    73e2:	0f 91       	pop	r16
    73e4:	ff 90       	pop	r15
    73e6:	ef 90       	pop	r14
    73e8:	df 90       	pop	r13
    73ea:	cf 90       	pop	r12
    73ec:	bf 90       	pop	r11
    73ee:	af 90       	pop	r10
    73f0:	9f 90       	pop	r9
    73f2:	8f 90       	pop	r8
    73f4:	7f 90       	pop	r7
    73f6:	6f 90       	pop	r6
    73f8:	5f 90       	pop	r5
    73fa:	4f 90       	pop	r4
    73fc:	3f 90       	pop	r3
    73fe:	2f 90       	pop	r2
    7400:	08 95       	ret

00007402 <_Z6bezierffff>:

/***********************************************
** rutinas puramente geométricas (abstractas) **
***********************************************/

float bezier (float p0, float p1, float p2, float t) {
    7402:	2f 92       	push	r2
    7404:	3f 92       	push	r3
    7406:	4f 92       	push	r4
    7408:	5f 92       	push	r5
    740a:	6f 92       	push	r6
    740c:	7f 92       	push	r7
    740e:	8f 92       	push	r8
    7410:	9f 92       	push	r9
    7412:	af 92       	push	r10
    7414:	bf 92       	push	r11
    7416:	cf 92       	push	r12
    7418:	df 92       	push	r13
    741a:	ef 92       	push	r14
    741c:	ff 92       	push	r15
    741e:	0f 93       	push	r16
    7420:	1f 93       	push	r17
    7422:	df 93       	push	r29
    7424:	cf 93       	push	r28
    7426:	00 d0       	rcall	.+0      	; 0x7428 <_Z6bezierffff+0x26>
    7428:	00 d0       	rcall	.+0      	; 0x742a <_Z6bezierffff+0x28>
    742a:	cd b7       	in	r28, 0x3d	; 61
    742c:	de b7       	in	r29, 0x3e	; 62
    742e:	1b 01       	movw	r2, r22
    7430:	2c 01       	movw	r4, r24
    7432:	29 83       	std	Y+1, r18	; 0x01
    7434:	3a 83       	std	Y+2, r19	; 0x02
    7436:	4b 83       	std	Y+3, r20	; 0x03
    7438:	5c 83       	std	Y+4, r21	; 0x04
  return sq(1-t)*p0 + 2*t*(1-t)*p1 + sq(t)*p2;
    743a:	60 e0       	ldi	r22, 0x00	; 0
    743c:	70 e0       	ldi	r23, 0x00	; 0
    743e:	80 e8       	ldi	r24, 0x80	; 128
    7440:	9f e3       	ldi	r25, 0x3F	; 63
    7442:	a6 01       	movw	r20, r12
    7444:	95 01       	movw	r18, r10
    7446:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    744a:	3b 01       	movw	r6, r22
    744c:	4c 01       	movw	r8, r24
    744e:	a4 01       	movw	r20, r8
    7450:	93 01       	movw	r18, r6
    7452:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    7456:	a2 01       	movw	r20, r4
    7458:	91 01       	movw	r18, r2
    745a:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    745e:	1b 01       	movw	r2, r22
    7460:	2c 01       	movw	r4, r24
    7462:	c6 01       	movw	r24, r12
    7464:	b5 01       	movw	r22, r10
    7466:	a6 01       	movw	r20, r12
    7468:	95 01       	movw	r18, r10
    746a:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    746e:	a4 01       	movw	r20, r8
    7470:	93 01       	movw	r18, r6
    7472:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    7476:	29 81       	ldd	r18, Y+1	; 0x01
    7478:	3a 81       	ldd	r19, Y+2	; 0x02
    747a:	4b 81       	ldd	r20, Y+3	; 0x03
    747c:	5c 81       	ldd	r21, Y+4	; 0x04
    747e:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    7482:	9b 01       	movw	r18, r22
    7484:	ac 01       	movw	r20, r24
    7486:	c2 01       	movw	r24, r4
    7488:	b1 01       	movw	r22, r2
    748a:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    748e:	3b 01       	movw	r6, r22
    7490:	4c 01       	movw	r8, r24
    7492:	c6 01       	movw	r24, r12
    7494:	b5 01       	movw	r22, r10
    7496:	a6 01       	movw	r20, r12
    7498:	95 01       	movw	r18, r10
    749a:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    749e:	a8 01       	movw	r20, r16
    74a0:	97 01       	movw	r18, r14
    74a2:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    74a6:	9b 01       	movw	r18, r22
    74a8:	ac 01       	movw	r20, r24
    74aa:	c4 01       	movw	r24, r8
    74ac:	b3 01       	movw	r22, r6
    74ae:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
}
    74b2:	0f 90       	pop	r0
    74b4:	0f 90       	pop	r0
    74b6:	0f 90       	pop	r0
    74b8:	0f 90       	pop	r0
    74ba:	cf 91       	pop	r28
    74bc:	df 91       	pop	r29
    74be:	1f 91       	pop	r17
    74c0:	0f 91       	pop	r16
    74c2:	ff 90       	pop	r15
    74c4:	ef 90       	pop	r14
    74c6:	df 90       	pop	r13
    74c8:	cf 90       	pop	r12
    74ca:	bf 90       	pop	r11
    74cc:	af 90       	pop	r10
    74ce:	9f 90       	pop	r9
    74d0:	8f 90       	pop	r8
    74d2:	7f 90       	pop	r7
    74d4:	6f 90       	pop	r6
    74d6:	5f 90       	pop	r5
    74d8:	4f 90       	pop	r4
    74da:	3f 90       	pop	r3
    74dc:	2f 90       	pop	r2
    74de:	08 95       	ret

000074e0 <_Z4suma7COORD3DS_>:

COORD3D suma (COORD3D punto1, COORD3D punto2) {
    74e0:	8f 92       	push	r8
    74e2:	9f 92       	push	r9
    74e4:	af 92       	push	r10
    74e6:	bf 92       	push	r11
    74e8:	cf 92       	push	r12
    74ea:	df 92       	push	r13
    74ec:	ef 92       	push	r14
    74ee:	ff 92       	push	r15
    74f0:	0f 93       	push	r16
    74f2:	1f 93       	push	r17
    74f4:	df 93       	push	r29
    74f6:	cf 93       	push	r28
    74f8:	cd b7       	in	r28, 0x3d	; 61
    74fa:	de b7       	in	r29, 0x3e	; 62
    74fc:	2c 97       	sbiw	r28, 0x0c	; 12
    74fe:	0f b6       	in	r0, 0x3f	; 63
    7500:	f8 94       	cli
    7502:	de bf       	out	0x3e, r29	; 62
    7504:	0f be       	out	0x3f, r0	; 63
    7506:	cd bf       	out	0x3d, r28	; 61
    7508:	4c 01       	movw	r8, r24
    750a:	c9 82       	std	Y+1, r12	; 0x01
    750c:	da 82       	std	Y+2, r13	; 0x02
    750e:	eb 82       	std	Y+3, r14	; 0x03
    7510:	fc 82       	std	Y+4, r15	; 0x04
    7512:	0d 83       	std	Y+5, r16	; 0x05
    7514:	1e 83       	std	Y+6, r17	; 0x06
    7516:	2f 83       	std	Y+7, r18	; 0x07
    7518:	38 87       	std	Y+8, r19	; 0x08
    751a:	49 87       	std	Y+9, r20	; 0x09
    751c:	5a 87       	std	Y+10, r21	; 0x0a
    751e:	6b 87       	std	Y+11, r22	; 0x0b
    7520:	7c 87       	std	Y+12, r23	; 0x0c
  return (COORD3D) {punto1.x + punto2.x, punto1.y + punto2.y, punto1.z + punto2.z}; 
    7522:	6d 81       	ldd	r22, Y+5	; 0x05
    7524:	7e 81       	ldd	r23, Y+6	; 0x06
    7526:	8f 81       	ldd	r24, Y+7	; 0x07
    7528:	98 85       	ldd	r25, Y+8	; 0x08
    752a:	2f 8d       	ldd	r18, Y+31	; 0x1f
    752c:	38 a1       	ldd	r19, Y+32	; 0x20
    752e:	49 a1       	ldd	r20, Y+33	; 0x21
    7530:	5a a1       	ldd	r21, Y+34	; 0x22
    7532:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    7536:	7b 01       	movw	r14, r22
    7538:	8c 01       	movw	r16, r24
    753a:	69 85       	ldd	r22, Y+9	; 0x09
    753c:	7a 85       	ldd	r23, Y+10	; 0x0a
    753e:	8b 85       	ldd	r24, Y+11	; 0x0b
    7540:	9c 85       	ldd	r25, Y+12	; 0x0c
    7542:	2b a1       	ldd	r18, Y+35	; 0x23
    7544:	3c a1       	ldd	r19, Y+36	; 0x24
    7546:	4d a1       	ldd	r20, Y+37	; 0x25
    7548:	5e a1       	ldd	r21, Y+38	; 0x26
    754a:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    754e:	5b 01       	movw	r10, r22
    7550:	6c 01       	movw	r12, r24
    7552:	69 81       	ldd	r22, Y+1	; 0x01
    7554:	7a 81       	ldd	r23, Y+2	; 0x02
    7556:	8b 81       	ldd	r24, Y+3	; 0x03
    7558:	9c 81       	ldd	r25, Y+4	; 0x04
    755a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    755c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    755e:	4d 8d       	ldd	r20, Y+29	; 0x1d
    7560:	5e 8d       	ldd	r21, Y+30	; 0x1e
    7562:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    7566:	f4 01       	movw	r30, r8
    7568:	60 83       	st	Z, r22
    756a:	71 83       	std	Z+1, r23	; 0x01
    756c:	82 83       	std	Z+2, r24	; 0x02
    756e:	93 83       	std	Z+3, r25	; 0x03
    7570:	c7 01       	movw	r24, r14
    7572:	d8 01       	movw	r26, r16
    7574:	84 83       	std	Z+4, r24	; 0x04
    7576:	95 83       	std	Z+5, r25	; 0x05
    7578:	a6 83       	std	Z+6, r26	; 0x06
    757a:	b7 83       	std	Z+7, r27	; 0x07
    757c:	c5 01       	movw	r24, r10
    757e:	d6 01       	movw	r26, r12
    7580:	80 87       	std	Z+8, r24	; 0x08
    7582:	91 87       	std	Z+9, r25	; 0x09
    7584:	a2 87       	std	Z+10, r26	; 0x0a
    7586:	b3 87       	std	Z+11, r27	; 0x0b
}
    7588:	c4 01       	movw	r24, r8
    758a:	2c 96       	adiw	r28, 0x0c	; 12
    758c:	0f b6       	in	r0, 0x3f	; 63
    758e:	f8 94       	cli
    7590:	de bf       	out	0x3e, r29	; 62
    7592:	0f be       	out	0x3f, r0	; 63
    7594:	cd bf       	out	0x3d, r28	; 61
    7596:	cf 91       	pop	r28
    7598:	df 91       	pop	r29
    759a:	1f 91       	pop	r17
    759c:	0f 91       	pop	r16
    759e:	ff 90       	pop	r15
    75a0:	ef 90       	pop	r14
    75a2:	df 90       	pop	r13
    75a4:	cf 90       	pop	r12
    75a6:	bf 90       	pop	r11
    75a8:	af 90       	pop	r10
    75aa:	9f 90       	pop	r9
    75ac:	8f 90       	pop	r8
    75ae:	08 95       	ret

000075b0 <_Z4suma7COORD2DS_>:

COORD2D suma (COORD2D punto1, COORD2D punto2) {
    75b0:	af 92       	push	r10
    75b2:	bf 92       	push	r11
    75b4:	cf 92       	push	r12
    75b6:	df 92       	push	r13
    75b8:	ef 92       	push	r14
    75ba:	ff 92       	push	r15
    75bc:	0f 93       	push	r16
    75be:	1f 93       	push	r17
    75c0:	df 93       	push	r29
    75c2:	cf 93       	push	r28
    75c4:	cd b7       	in	r28, 0x3d	; 61
    75c6:	de b7       	in	r29, 0x3e	; 62
    75c8:	68 97       	sbiw	r28, 0x18	; 24
    75ca:	0f b6       	in	r0, 0x3f	; 63
    75cc:	f8 94       	cli
    75ce:	de bf       	out	0x3e, r29	; 62
    75d0:	0f be       	out	0x3f, r0	; 63
    75d2:	cd bf       	out	0x3d, r28	; 61
    75d4:	29 87       	std	Y+9, r18	; 0x09
    75d6:	3a 87       	std	Y+10, r19	; 0x0a
    75d8:	4b 87       	std	Y+11, r20	; 0x0b
    75da:	5c 87       	std	Y+12, r21	; 0x0c
    75dc:	6d 87       	std	Y+13, r22	; 0x0d
    75de:	7e 87       	std	Y+14, r23	; 0x0e
    75e0:	8f 87       	std	Y+15, r24	; 0x0f
    75e2:	98 8b       	std	Y+16, r25	; 0x10
    75e4:	a9 8a       	std	Y+17, r10	; 0x11
    75e6:	ba 8a       	std	Y+18, r11	; 0x12
    75e8:	cb 8a       	std	Y+19, r12	; 0x13
    75ea:	dc 8a       	std	Y+20, r13	; 0x14
    75ec:	ed 8a       	std	Y+21, r14	; 0x15
    75ee:	fe 8a       	std	Y+22, r15	; 0x16
    75f0:	0f 8b       	std	Y+23, r16	; 0x17
    75f2:	18 8f       	std	Y+24, r17	; 0x18
  return (COORD2D) {punto1.x + punto2.x, punto1.z + punto2.z}; 
    75f4:	6d 85       	ldd	r22, Y+13	; 0x0d
    75f6:	7e 85       	ldd	r23, Y+14	; 0x0e
    75f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    75fa:	98 89       	ldd	r25, Y+16	; 0x10
    75fc:	2d 89       	ldd	r18, Y+21	; 0x15
    75fe:	3e 89       	ldd	r19, Y+22	; 0x16
    7600:	4f 89       	ldd	r20, Y+23	; 0x17
    7602:	58 8d       	ldd	r21, Y+24	; 0x18
    7604:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    7608:	7b 01       	movw	r14, r22
    760a:	8c 01       	movw	r16, r24
    760c:	69 85       	ldd	r22, Y+9	; 0x09
    760e:	7a 85       	ldd	r23, Y+10	; 0x0a
    7610:	8b 85       	ldd	r24, Y+11	; 0x0b
    7612:	9c 85       	ldd	r25, Y+12	; 0x0c
    7614:	29 89       	ldd	r18, Y+17	; 0x11
    7616:	3a 89       	ldd	r19, Y+18	; 0x12
    7618:	4b 89       	ldd	r20, Y+19	; 0x13
    761a:	5c 89       	ldd	r21, Y+20	; 0x14
    761c:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    7620:	69 83       	std	Y+1, r22	; 0x01
    7622:	7a 83       	std	Y+2, r23	; 0x02
    7624:	8b 83       	std	Y+3, r24	; 0x03
    7626:	9c 83       	std	Y+4, r25	; 0x04
    7628:	c7 01       	movw	r24, r14
    762a:	d8 01       	movw	r26, r16
    762c:	8d 83       	std	Y+5, r24	; 0x05
    762e:	9e 83       	std	Y+6, r25	; 0x06
    7630:	af 83       	std	Y+7, r26	; 0x07
    7632:	b8 87       	std	Y+8, r27	; 0x08
    7634:	29 81       	ldd	r18, Y+1	; 0x01
    7636:	3a 81       	ldd	r19, Y+2	; 0x02
    7638:	4b 81       	ldd	r20, Y+3	; 0x03
    763a:	5c 81       	ldd	r21, Y+4	; 0x04
    763c:	6d 81       	ldd	r22, Y+5	; 0x05
    763e:	7e 81       	ldd	r23, Y+6	; 0x06
}
    7640:	8f 81       	ldd	r24, Y+7	; 0x07
    7642:	98 85       	ldd	r25, Y+8	; 0x08
    7644:	68 96       	adiw	r28, 0x18	; 24
    7646:	0f b6       	in	r0, 0x3f	; 63
    7648:	f8 94       	cli
    764a:	de bf       	out	0x3e, r29	; 62
    764c:	0f be       	out	0x3f, r0	; 63
    764e:	cd bf       	out	0x3d, r28	; 61
    7650:	cf 91       	pop	r28
    7652:	df 91       	pop	r29
    7654:	1f 91       	pop	r17
    7656:	0f 91       	pop	r16
    7658:	ff 90       	pop	r15
    765a:	ef 90       	pop	r14
    765c:	df 90       	pop	r13
    765e:	cf 90       	pop	r12
    7660:	bf 90       	pop	r11
    7662:	af 90       	pop	r10
    7664:	08 95       	ret

00007666 <_Z5resta7COORD3DS_>:

COORD3D resta (COORD3D punto1, COORD3D punto2) {
    7666:	8f 92       	push	r8
    7668:	9f 92       	push	r9
    766a:	af 92       	push	r10
    766c:	bf 92       	push	r11
    766e:	cf 92       	push	r12
    7670:	df 92       	push	r13
    7672:	ef 92       	push	r14
    7674:	ff 92       	push	r15
    7676:	0f 93       	push	r16
    7678:	1f 93       	push	r17
    767a:	df 93       	push	r29
    767c:	cf 93       	push	r28
    767e:	cd b7       	in	r28, 0x3d	; 61
    7680:	de b7       	in	r29, 0x3e	; 62
    7682:	2c 97       	sbiw	r28, 0x0c	; 12
    7684:	0f b6       	in	r0, 0x3f	; 63
    7686:	f8 94       	cli
    7688:	de bf       	out	0x3e, r29	; 62
    768a:	0f be       	out	0x3f, r0	; 63
    768c:	cd bf       	out	0x3d, r28	; 61
    768e:	4c 01       	movw	r8, r24
    7690:	c9 82       	std	Y+1, r12	; 0x01
    7692:	da 82       	std	Y+2, r13	; 0x02
    7694:	eb 82       	std	Y+3, r14	; 0x03
    7696:	fc 82       	std	Y+4, r15	; 0x04
    7698:	0d 83       	std	Y+5, r16	; 0x05
    769a:	1e 83       	std	Y+6, r17	; 0x06
    769c:	2f 83       	std	Y+7, r18	; 0x07
    769e:	38 87       	std	Y+8, r19	; 0x08
    76a0:	49 87       	std	Y+9, r20	; 0x09
    76a2:	5a 87       	std	Y+10, r21	; 0x0a
    76a4:	6b 87       	std	Y+11, r22	; 0x0b
    76a6:	7c 87       	std	Y+12, r23	; 0x0c
  return (COORD3D) {punto1.x - punto2.x, punto1.y - punto2.y, punto1.z - punto2.z}; 
    76a8:	6d 81       	ldd	r22, Y+5	; 0x05
    76aa:	7e 81       	ldd	r23, Y+6	; 0x06
    76ac:	8f 81       	ldd	r24, Y+7	; 0x07
    76ae:	98 85       	ldd	r25, Y+8	; 0x08
    76b0:	2f 8d       	ldd	r18, Y+31	; 0x1f
    76b2:	38 a1       	ldd	r19, Y+32	; 0x20
    76b4:	49 a1       	ldd	r20, Y+33	; 0x21
    76b6:	5a a1       	ldd	r21, Y+34	; 0x22
    76b8:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    76bc:	7b 01       	movw	r14, r22
    76be:	8c 01       	movw	r16, r24
    76c0:	69 85       	ldd	r22, Y+9	; 0x09
    76c2:	7a 85       	ldd	r23, Y+10	; 0x0a
    76c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    76c6:	9c 85       	ldd	r25, Y+12	; 0x0c
    76c8:	2b a1       	ldd	r18, Y+35	; 0x23
    76ca:	3c a1       	ldd	r19, Y+36	; 0x24
    76cc:	4d a1       	ldd	r20, Y+37	; 0x25
    76ce:	5e a1       	ldd	r21, Y+38	; 0x26
    76d0:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    76d4:	5b 01       	movw	r10, r22
    76d6:	6c 01       	movw	r12, r24
    76d8:	69 81       	ldd	r22, Y+1	; 0x01
    76da:	7a 81       	ldd	r23, Y+2	; 0x02
    76dc:	8b 81       	ldd	r24, Y+3	; 0x03
    76de:	9c 81       	ldd	r25, Y+4	; 0x04
    76e0:	2b 8d       	ldd	r18, Y+27	; 0x1b
    76e2:	3c 8d       	ldd	r19, Y+28	; 0x1c
    76e4:	4d 8d       	ldd	r20, Y+29	; 0x1d
    76e6:	5e 8d       	ldd	r21, Y+30	; 0x1e
    76e8:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    76ec:	f4 01       	movw	r30, r8
    76ee:	60 83       	st	Z, r22
    76f0:	71 83       	std	Z+1, r23	; 0x01
    76f2:	82 83       	std	Z+2, r24	; 0x02
    76f4:	93 83       	std	Z+3, r25	; 0x03
    76f6:	c7 01       	movw	r24, r14
    76f8:	d8 01       	movw	r26, r16
    76fa:	84 83       	std	Z+4, r24	; 0x04
    76fc:	95 83       	std	Z+5, r25	; 0x05
    76fe:	a6 83       	std	Z+6, r26	; 0x06
    7700:	b7 83       	std	Z+7, r27	; 0x07
    7702:	c5 01       	movw	r24, r10
    7704:	d6 01       	movw	r26, r12
    7706:	80 87       	std	Z+8, r24	; 0x08
    7708:	91 87       	std	Z+9, r25	; 0x09
    770a:	a2 87       	std	Z+10, r26	; 0x0a
    770c:	b3 87       	std	Z+11, r27	; 0x0b
}
    770e:	c4 01       	movw	r24, r8
    7710:	2c 96       	adiw	r28, 0x0c	; 12
    7712:	0f b6       	in	r0, 0x3f	; 63
    7714:	f8 94       	cli
    7716:	de bf       	out	0x3e, r29	; 62
    7718:	0f be       	out	0x3f, r0	; 63
    771a:	cd bf       	out	0x3d, r28	; 61
    771c:	cf 91       	pop	r28
    771e:	df 91       	pop	r29
    7720:	1f 91       	pop	r17
    7722:	0f 91       	pop	r16
    7724:	ff 90       	pop	r15
    7726:	ef 90       	pop	r14
    7728:	df 90       	pop	r13
    772a:	cf 90       	pop	r12
    772c:	bf 90       	pop	r11
    772e:	af 90       	pop	r10
    7730:	9f 90       	pop	r9
    7732:	8f 90       	pop	r8
    7734:	08 95       	ret

00007736 <_Z5resta7COORD2DS_>:

COORD2D resta (COORD2D punto1, COORD2D punto2) {
    7736:	af 92       	push	r10
    7738:	bf 92       	push	r11
    773a:	cf 92       	push	r12
    773c:	df 92       	push	r13
    773e:	ef 92       	push	r14
    7740:	ff 92       	push	r15
    7742:	0f 93       	push	r16
    7744:	1f 93       	push	r17
    7746:	df 93       	push	r29
    7748:	cf 93       	push	r28
    774a:	cd b7       	in	r28, 0x3d	; 61
    774c:	de b7       	in	r29, 0x3e	; 62
    774e:	68 97       	sbiw	r28, 0x18	; 24
    7750:	0f b6       	in	r0, 0x3f	; 63
    7752:	f8 94       	cli
    7754:	de bf       	out	0x3e, r29	; 62
    7756:	0f be       	out	0x3f, r0	; 63
    7758:	cd bf       	out	0x3d, r28	; 61
    775a:	29 87       	std	Y+9, r18	; 0x09
    775c:	3a 87       	std	Y+10, r19	; 0x0a
    775e:	4b 87       	std	Y+11, r20	; 0x0b
    7760:	5c 87       	std	Y+12, r21	; 0x0c
    7762:	6d 87       	std	Y+13, r22	; 0x0d
    7764:	7e 87       	std	Y+14, r23	; 0x0e
    7766:	8f 87       	std	Y+15, r24	; 0x0f
    7768:	98 8b       	std	Y+16, r25	; 0x10
    776a:	a9 8a       	std	Y+17, r10	; 0x11
    776c:	ba 8a       	std	Y+18, r11	; 0x12
    776e:	cb 8a       	std	Y+19, r12	; 0x13
    7770:	dc 8a       	std	Y+20, r13	; 0x14
    7772:	ed 8a       	std	Y+21, r14	; 0x15
    7774:	fe 8a       	std	Y+22, r15	; 0x16
    7776:	0f 8b       	std	Y+23, r16	; 0x17
    7778:	18 8f       	std	Y+24, r17	; 0x18
  return (COORD2D) {punto1.x - punto2.x, punto1.z - punto2.z}; 
    777a:	6d 85       	ldd	r22, Y+13	; 0x0d
    777c:	7e 85       	ldd	r23, Y+14	; 0x0e
    777e:	8f 85       	ldd	r24, Y+15	; 0x0f
    7780:	98 89       	ldd	r25, Y+16	; 0x10
    7782:	2d 89       	ldd	r18, Y+21	; 0x15
    7784:	3e 89       	ldd	r19, Y+22	; 0x16
    7786:	4f 89       	ldd	r20, Y+23	; 0x17
    7788:	58 8d       	ldd	r21, Y+24	; 0x18
    778a:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    778e:	7b 01       	movw	r14, r22
    7790:	8c 01       	movw	r16, r24
    7792:	69 85       	ldd	r22, Y+9	; 0x09
    7794:	7a 85       	ldd	r23, Y+10	; 0x0a
    7796:	8b 85       	ldd	r24, Y+11	; 0x0b
    7798:	9c 85       	ldd	r25, Y+12	; 0x0c
    779a:	29 89       	ldd	r18, Y+17	; 0x11
    779c:	3a 89       	ldd	r19, Y+18	; 0x12
    779e:	4b 89       	ldd	r20, Y+19	; 0x13
    77a0:	5c 89       	ldd	r21, Y+20	; 0x14
    77a2:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    77a6:	69 83       	std	Y+1, r22	; 0x01
    77a8:	7a 83       	std	Y+2, r23	; 0x02
    77aa:	8b 83       	std	Y+3, r24	; 0x03
    77ac:	9c 83       	std	Y+4, r25	; 0x04
    77ae:	c7 01       	movw	r24, r14
    77b0:	d8 01       	movw	r26, r16
    77b2:	8d 83       	std	Y+5, r24	; 0x05
    77b4:	9e 83       	std	Y+6, r25	; 0x06
    77b6:	af 83       	std	Y+7, r26	; 0x07
    77b8:	b8 87       	std	Y+8, r27	; 0x08
    77ba:	29 81       	ldd	r18, Y+1	; 0x01
    77bc:	3a 81       	ldd	r19, Y+2	; 0x02
    77be:	4b 81       	ldd	r20, Y+3	; 0x03
    77c0:	5c 81       	ldd	r21, Y+4	; 0x04
    77c2:	6d 81       	ldd	r22, Y+5	; 0x05
    77c4:	7e 81       	ldd	r23, Y+6	; 0x06
}
    77c6:	8f 81       	ldd	r24, Y+7	; 0x07
    77c8:	98 85       	ldd	r25, Y+8	; 0x08
    77ca:	68 96       	adiw	r28, 0x18	; 24
    77cc:	0f b6       	in	r0, 0x3f	; 63
    77ce:	f8 94       	cli
    77d0:	de bf       	out	0x3e, r29	; 62
    77d2:	0f be       	out	0x3f, r0	; 63
    77d4:	cd bf       	out	0x3d, r28	; 61
    77d6:	cf 91       	pop	r28
    77d8:	df 91       	pop	r29
    77da:	1f 91       	pop	r17
    77dc:	0f 91       	pop	r16
    77de:	ff 90       	pop	r15
    77e0:	ef 90       	pop	r14
    77e2:	df 90       	pop	r13
    77e4:	cf 90       	pop	r12
    77e6:	bf 90       	pop	r11
    77e8:	af 90       	pop	r10
    77ea:	08 95       	ret

000077ec <_Z8producto7COORD3Df>:

COORD3D producto (COORD3D vector, float numero) {
    77ec:	2f 92       	push	r2
    77ee:	3f 92       	push	r3
    77f0:	4f 92       	push	r4
    77f2:	5f 92       	push	r5
    77f4:	6f 92       	push	r6
    77f6:	7f 92       	push	r7
    77f8:	8f 92       	push	r8
    77fa:	9f 92       	push	r9
    77fc:	af 92       	push	r10
    77fe:	bf 92       	push	r11
    7800:	cf 92       	push	r12
    7802:	df 92       	push	r13
    7804:	ef 92       	push	r14
    7806:	ff 92       	push	r15
    7808:	0f 93       	push	r16
    780a:	1f 93       	push	r17
    780c:	df 93       	push	r29
    780e:	cf 93       	push	r28
    7810:	cd b7       	in	r28, 0x3d	; 61
    7812:	de b7       	in	r29, 0x3e	; 62
    7814:	2c 97       	sbiw	r28, 0x0c	; 12
    7816:	0f b6       	in	r0, 0x3f	; 63
    7818:	f8 94       	cli
    781a:	de bf       	out	0x3e, r29	; 62
    781c:	0f be       	out	0x3f, r0	; 63
    781e:	cd bf       	out	0x3d, r28	; 61
    7820:	1c 01       	movw	r2, r24
    7822:	c9 82       	std	Y+1, r12	; 0x01
    7824:	da 82       	std	Y+2, r13	; 0x02
    7826:	eb 82       	std	Y+3, r14	; 0x03
    7828:	fc 82       	std	Y+4, r15	; 0x04
    782a:	0d 83       	std	Y+5, r16	; 0x05
    782c:	1e 83       	std	Y+6, r17	; 0x06
    782e:	2f 83       	std	Y+7, r18	; 0x07
    7830:	38 87       	std	Y+8, r19	; 0x08
    7832:	49 87       	std	Y+9, r20	; 0x09
    7834:	5a 87       	std	Y+10, r21	; 0x0a
    7836:	6b 87       	std	Y+11, r22	; 0x0b
    7838:	7c 87       	std	Y+12, r23	; 0x0c
  return (COORD3D) {numero*vector.x, numero*vector.y, numero*vector.z}; 
    783a:	c5 01       	movw	r24, r10
    783c:	b4 01       	movw	r22, r8
    783e:	2d 81       	ldd	r18, Y+5	; 0x05
    7840:	3e 81       	ldd	r19, Y+6	; 0x06
    7842:	4f 81       	ldd	r20, Y+7	; 0x07
    7844:	58 85       	ldd	r21, Y+8	; 0x08
    7846:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    784a:	7b 01       	movw	r14, r22
    784c:	8c 01       	movw	r16, r24
    784e:	c5 01       	movw	r24, r10
    7850:	b4 01       	movw	r22, r8
    7852:	29 85       	ldd	r18, Y+9	; 0x09
    7854:	3a 85       	ldd	r19, Y+10	; 0x0a
    7856:	4b 85       	ldd	r20, Y+11	; 0x0b
    7858:	5c 85       	ldd	r21, Y+12	; 0x0c
    785a:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    785e:	2b 01       	movw	r4, r22
    7860:	3c 01       	movw	r6, r24
    7862:	c5 01       	movw	r24, r10
    7864:	b4 01       	movw	r22, r8
    7866:	29 81       	ldd	r18, Y+1	; 0x01
    7868:	3a 81       	ldd	r19, Y+2	; 0x02
    786a:	4b 81       	ldd	r20, Y+3	; 0x03
    786c:	5c 81       	ldd	r21, Y+4	; 0x04
    786e:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    7872:	f1 01       	movw	r30, r2
    7874:	60 83       	st	Z, r22
    7876:	71 83       	std	Z+1, r23	; 0x01
    7878:	82 83       	std	Z+2, r24	; 0x02
    787a:	93 83       	std	Z+3, r25	; 0x03
    787c:	c7 01       	movw	r24, r14
    787e:	d8 01       	movw	r26, r16
    7880:	84 83       	std	Z+4, r24	; 0x04
    7882:	95 83       	std	Z+5, r25	; 0x05
    7884:	a6 83       	std	Z+6, r26	; 0x06
    7886:	b7 83       	std	Z+7, r27	; 0x07
    7888:	c2 01       	movw	r24, r4
    788a:	d3 01       	movw	r26, r6
    788c:	80 87       	std	Z+8, r24	; 0x08
    788e:	91 87       	std	Z+9, r25	; 0x09
    7890:	a2 87       	std	Z+10, r26	; 0x0a
    7892:	b3 87       	std	Z+11, r27	; 0x0b
}
    7894:	c1 01       	movw	r24, r2
    7896:	2c 96       	adiw	r28, 0x0c	; 12
    7898:	0f b6       	in	r0, 0x3f	; 63
    789a:	f8 94       	cli
    789c:	de bf       	out	0x3e, r29	; 62
    789e:	0f be       	out	0x3f, r0	; 63
    78a0:	cd bf       	out	0x3d, r28	; 61
    78a2:	cf 91       	pop	r28
    78a4:	df 91       	pop	r29
    78a6:	1f 91       	pop	r17
    78a8:	0f 91       	pop	r16
    78aa:	ff 90       	pop	r15
    78ac:	ef 90       	pop	r14
    78ae:	df 90       	pop	r13
    78b0:	cf 90       	pop	r12
    78b2:	bf 90       	pop	r11
    78b4:	af 90       	pop	r10
    78b6:	9f 90       	pop	r9
    78b8:	8f 90       	pop	r8
    78ba:	7f 90       	pop	r7
    78bc:	6f 90       	pop	r6
    78be:	5f 90       	pop	r5
    78c0:	4f 90       	pop	r4
    78c2:	3f 90       	pop	r3
    78c4:	2f 90       	pop	r2
    78c6:	08 95       	ret

000078c8 <_Z8producto7COORD2Df>:

COORD2D producto (COORD2D vector, float numero) {
    78c8:	af 92       	push	r10
    78ca:	bf 92       	push	r11
    78cc:	cf 92       	push	r12
    78ce:	df 92       	push	r13
    78d0:	ef 92       	push	r14
    78d2:	ff 92       	push	r15
    78d4:	0f 93       	push	r16
    78d6:	1f 93       	push	r17
    78d8:	df 93       	push	r29
    78da:	cf 93       	push	r28
    78dc:	cd b7       	in	r28, 0x3d	; 61
    78de:	de b7       	in	r29, 0x3e	; 62
    78e0:	60 97       	sbiw	r28, 0x10	; 16
    78e2:	0f b6       	in	r0, 0x3f	; 63
    78e4:	f8 94       	cli
    78e6:	de bf       	out	0x3e, r29	; 62
    78e8:	0f be       	out	0x3f, r0	; 63
    78ea:	cd bf       	out	0x3d, r28	; 61
    78ec:	29 87       	std	Y+9, r18	; 0x09
    78ee:	3a 87       	std	Y+10, r19	; 0x0a
    78f0:	4b 87       	std	Y+11, r20	; 0x0b
    78f2:	5c 87       	std	Y+12, r21	; 0x0c
    78f4:	6d 87       	std	Y+13, r22	; 0x0d
    78f6:	7e 87       	std	Y+14, r23	; 0x0e
    78f8:	8f 87       	std	Y+15, r24	; 0x0f
    78fa:	98 8b       	std	Y+16, r25	; 0x10
  return (COORD2D) {numero*vector.x, numero*vector.z}; 
    78fc:	c8 01       	movw	r24, r16
    78fe:	b7 01       	movw	r22, r14
    7900:	2d 85       	ldd	r18, Y+13	; 0x0d
    7902:	3e 85       	ldd	r19, Y+14	; 0x0e
    7904:	4f 85       	ldd	r20, Y+15	; 0x0f
    7906:	58 89       	ldd	r21, Y+16	; 0x10
    7908:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    790c:	5b 01       	movw	r10, r22
    790e:	6c 01       	movw	r12, r24
    7910:	c8 01       	movw	r24, r16
    7912:	b7 01       	movw	r22, r14
    7914:	29 85       	ldd	r18, Y+9	; 0x09
    7916:	3a 85       	ldd	r19, Y+10	; 0x0a
    7918:	4b 85       	ldd	r20, Y+11	; 0x0b
    791a:	5c 85       	ldd	r21, Y+12	; 0x0c
    791c:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    7920:	69 83       	std	Y+1, r22	; 0x01
    7922:	7a 83       	std	Y+2, r23	; 0x02
    7924:	8b 83       	std	Y+3, r24	; 0x03
    7926:	9c 83       	std	Y+4, r25	; 0x04
    7928:	c5 01       	movw	r24, r10
    792a:	d6 01       	movw	r26, r12
    792c:	8d 83       	std	Y+5, r24	; 0x05
    792e:	9e 83       	std	Y+6, r25	; 0x06
    7930:	af 83       	std	Y+7, r26	; 0x07
    7932:	b8 87       	std	Y+8, r27	; 0x08
    7934:	29 81       	ldd	r18, Y+1	; 0x01
    7936:	3a 81       	ldd	r19, Y+2	; 0x02
    7938:	4b 81       	ldd	r20, Y+3	; 0x03
    793a:	5c 81       	ldd	r21, Y+4	; 0x04
    793c:	6d 81       	ldd	r22, Y+5	; 0x05
    793e:	7e 81       	ldd	r23, Y+6	; 0x06
}
    7940:	8f 81       	ldd	r24, Y+7	; 0x07
    7942:	98 85       	ldd	r25, Y+8	; 0x08
    7944:	60 96       	adiw	r28, 0x10	; 16
    7946:	0f b6       	in	r0, 0x3f	; 63
    7948:	f8 94       	cli
    794a:	de bf       	out	0x3e, r29	; 62
    794c:	0f be       	out	0x3f, r0	; 63
    794e:	cd bf       	out	0x3d, r28	; 61
    7950:	cf 91       	pop	r28
    7952:	df 91       	pop	r29
    7954:	1f 91       	pop	r17
    7956:	0f 91       	pop	r16
    7958:	ff 90       	pop	r15
    795a:	ef 90       	pop	r14
    795c:	df 90       	pop	r13
    795e:	cf 90       	pop	r12
    7960:	bf 90       	pop	r11
    7962:	af 90       	pop	r10
    7964:	08 95       	ret

00007966 <_Z6xz2xyz7COORD2D>:

COORD3D xz2xyz (COORD2D vector) {
    7966:	0f 93       	push	r16
    7968:	1f 93       	push	r17
    796a:	df 93       	push	r29
    796c:	cf 93       	push	r28
    796e:	cd b7       	in	r28, 0x3d	; 61
    7970:	de b7       	in	r29, 0x3e	; 62
    7972:	28 97       	sbiw	r28, 0x08	; 8
    7974:	0f b6       	in	r0, 0x3f	; 63
    7976:	f8 94       	cli
    7978:	de bf       	out	0x3e, r29	; 62
    797a:	0f be       	out	0x3f, r0	; 63
    797c:	cd bf       	out	0x3d, r28	; 61
    797e:	fc 01       	movw	r30, r24
    7980:	09 83       	std	Y+1, r16	; 0x01
    7982:	1a 83       	std	Y+2, r17	; 0x02
    7984:	2b 83       	std	Y+3, r18	; 0x03
    7986:	3c 83       	std	Y+4, r19	; 0x04
    7988:	4d 83       	std	Y+5, r20	; 0x05
    798a:	5e 83       	std	Y+6, r21	; 0x06
    798c:	6f 83       	std	Y+7, r22	; 0x07
    798e:	78 87       	std	Y+8, r23	; 0x08
    7990:	2d 81       	ldd	r18, Y+5	; 0x05
    7992:	3e 81       	ldd	r19, Y+6	; 0x06
    7994:	4f 81       	ldd	r20, Y+7	; 0x07
    7996:	58 85       	ldd	r21, Y+8	; 0x08
  return (COORD3D) {vector.x, 0, vector.z}; 
    7998:	89 81       	ldd	r24, Y+1	; 0x01
    799a:	9a 81       	ldd	r25, Y+2	; 0x02
    799c:	ab 81       	ldd	r26, Y+3	; 0x03
    799e:	bc 81       	ldd	r27, Y+4	; 0x04
    79a0:	80 83       	st	Z, r24
    79a2:	91 83       	std	Z+1, r25	; 0x01
    79a4:	a2 83       	std	Z+2, r26	; 0x02
    79a6:	b3 83       	std	Z+3, r27	; 0x03
    79a8:	80 e0       	ldi	r24, 0x00	; 0
    79aa:	90 e0       	ldi	r25, 0x00	; 0
    79ac:	a0 e0       	ldi	r26, 0x00	; 0
    79ae:	b0 e0       	ldi	r27, 0x00	; 0
    79b0:	84 83       	std	Z+4, r24	; 0x04
    79b2:	95 83       	std	Z+5, r25	; 0x05
    79b4:	a6 83       	std	Z+6, r26	; 0x06
    79b6:	b7 83       	std	Z+7, r27	; 0x07
    79b8:	20 87       	std	Z+8, r18	; 0x08
    79ba:	31 87       	std	Z+9, r19	; 0x09
    79bc:	42 87       	std	Z+10, r20	; 0x0a
    79be:	53 87       	std	Z+11, r21	; 0x0b
}
    79c0:	cf 01       	movw	r24, r30
    79c2:	28 96       	adiw	r28, 0x08	; 8
    79c4:	0f b6       	in	r0, 0x3f	; 63
    79c6:	f8 94       	cli
    79c8:	de bf       	out	0x3e, r29	; 62
    79ca:	0f be       	out	0x3f, r0	; 63
    79cc:	cd bf       	out	0x3d, r28	; 61
    79ce:	cf 91       	pop	r28
    79d0:	df 91       	pop	r29
    79d2:	1f 91       	pop	r17
    79d4:	0f 91       	pop	r16
    79d6:	08 95       	ret

000079d8 <_Z6xyz2xz7COORD3D>:

COORD2D xyz2xz (COORD3D vector) {
    79d8:	ef 92       	push	r14
    79da:	ff 92       	push	r15
    79dc:	0f 93       	push	r16
    79de:	1f 93       	push	r17
    79e0:	df 93       	push	r29
    79e2:	cf 93       	push	r28
    79e4:	cd b7       	in	r28, 0x3d	; 61
    79e6:	de b7       	in	r29, 0x3e	; 62
    79e8:	64 97       	sbiw	r28, 0x14	; 20
    79ea:	0f b6       	in	r0, 0x3f	; 63
    79ec:	f8 94       	cli
    79ee:	de bf       	out	0x3e, r29	; 62
    79f0:	0f be       	out	0x3f, r0	; 63
    79f2:	cd bf       	out	0x3d, r28	; 61
    79f4:	e9 86       	std	Y+9, r14	; 0x09
    79f6:	fa 86       	std	Y+10, r15	; 0x0a
    79f8:	0b 87       	std	Y+11, r16	; 0x0b
    79fa:	1c 87       	std	Y+12, r17	; 0x0c
    79fc:	69 8b       	std	Y+17, r22	; 0x11
    79fe:	7a 8b       	std	Y+18, r23	; 0x12
    7a00:	8b 8b       	std	Y+19, r24	; 0x13
    7a02:	9c 8b       	std	Y+20, r25	; 0x14
    7a04:	29 89       	ldd	r18, Y+17	; 0x11
    7a06:	3a 89       	ldd	r19, Y+18	; 0x12
    7a08:	4b 89       	ldd	r20, Y+19	; 0x13
    7a0a:	5c 89       	ldd	r21, Y+20	; 0x14
  return (COORD2D) {vector.x, vector.z}; 
    7a0c:	89 85       	ldd	r24, Y+9	; 0x09
    7a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7a10:	ab 85       	ldd	r26, Y+11	; 0x0b
    7a12:	bc 85       	ldd	r27, Y+12	; 0x0c
    7a14:	89 83       	std	Y+1, r24	; 0x01
    7a16:	9a 83       	std	Y+2, r25	; 0x02
    7a18:	ab 83       	std	Y+3, r26	; 0x03
    7a1a:	bc 83       	std	Y+4, r27	; 0x04
    7a1c:	2d 83       	std	Y+5, r18	; 0x05
    7a1e:	3e 83       	std	Y+6, r19	; 0x06
    7a20:	4f 83       	std	Y+7, r20	; 0x07
    7a22:	58 87       	std	Y+8, r21	; 0x08
    7a24:	29 81       	ldd	r18, Y+1	; 0x01
    7a26:	3a 81       	ldd	r19, Y+2	; 0x02
    7a28:	4b 81       	ldd	r20, Y+3	; 0x03
    7a2a:	5c 81       	ldd	r21, Y+4	; 0x04
    7a2c:	6d 81       	ldd	r22, Y+5	; 0x05
    7a2e:	7e 81       	ldd	r23, Y+6	; 0x06
}
    7a30:	8f 81       	ldd	r24, Y+7	; 0x07
    7a32:	98 85       	ldd	r25, Y+8	; 0x08
    7a34:	64 96       	adiw	r28, 0x14	; 20
    7a36:	0f b6       	in	r0, 0x3f	; 63
    7a38:	f8 94       	cli
    7a3a:	de bf       	out	0x3e, r29	; 62
    7a3c:	0f be       	out	0x3f, r0	; 63
    7a3e:	cd bf       	out	0x3d, r28	; 61
    7a40:	cf 91       	pop	r28
    7a42:	df 91       	pop	r29
    7a44:	1f 91       	pop	r17
    7a46:	0f 91       	pop	r16
    7a48:	ff 90       	pop	r15
    7a4a:	ef 90       	pop	r14
    7a4c:	08 95       	ret

00007a4e <_Z11applyMatrix7COORD3DPS_>:

float sumaproducto (COORD3D vector1, COORD3D vector2) {
	return vector1.x*vector2.x + vector1.y*vector2.y + vector1.z*vector2.z;
}

COORD3D applyMatrix (COORD3D P, COORD3D * matrix) {
    7a4e:	2f 92       	push	r2
    7a50:	3f 92       	push	r3
    7a52:	4f 92       	push	r4
    7a54:	5f 92       	push	r5
    7a56:	6f 92       	push	r6
    7a58:	7f 92       	push	r7
    7a5a:	8f 92       	push	r8
    7a5c:	9f 92       	push	r9
    7a5e:	af 92       	push	r10
    7a60:	bf 92       	push	r11
    7a62:	cf 92       	push	r12
    7a64:	df 92       	push	r13
    7a66:	ef 92       	push	r14
    7a68:	ff 92       	push	r15
    7a6a:	0f 93       	push	r16
    7a6c:	1f 93       	push	r17
    7a6e:	df 93       	push	r29
    7a70:	cf 93       	push	r28
    7a72:	cd b7       	in	r28, 0x3d	; 61
    7a74:	de b7       	in	r29, 0x3e	; 62
    7a76:	68 97       	sbiw	r28, 0x18	; 24
    7a78:	0f b6       	in	r0, 0x3f	; 63
    7a7a:	f8 94       	cli
    7a7c:	de bf       	out	0x3e, r29	; 62
    7a7e:	0f be       	out	0x3f, r0	; 63
    7a80:	cd bf       	out	0x3d, r28	; 61
    7a82:	1c 01       	movw	r2, r24
    7a84:	c9 82       	std	Y+1, r12	; 0x01
    7a86:	da 82       	std	Y+2, r13	; 0x02
    7a88:	eb 82       	std	Y+3, r14	; 0x03
    7a8a:	fc 82       	std	Y+4, r15	; 0x04
    7a8c:	0d 83       	std	Y+5, r16	; 0x05
    7a8e:	1e 83       	std	Y+6, r17	; 0x06
    7a90:	2f 83       	std	Y+7, r18	; 0x07
    7a92:	38 87       	std	Y+8, r19	; 0x08
    7a94:	49 87       	std	Y+9, r20	; 0x09
    7a96:	5a 87       	std	Y+10, r21	; 0x0a
    7a98:	6b 87       	std	Y+11, r22	; 0x0b
    7a9a:	7c 87       	std	Y+12, r23	; 0x0c
    7a9c:	25 01       	movw	r4, r10
    7a9e:	89 81       	ldd	r24, Y+1	; 0x01
    7aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    7aa2:	ab 81       	ldd	r26, Y+3	; 0x03
    7aa4:	bc 81       	ldd	r27, Y+4	; 0x04
    7aa6:	8d 8b       	std	Y+21, r24	; 0x15
    7aa8:	9e 8b       	std	Y+22, r25	; 0x16
    7aaa:	af 8b       	std	Y+23, r26	; 0x17
    7aac:	b8 8f       	std	Y+24, r27	; 0x18
    7aae:	8d 81       	ldd	r24, Y+5	; 0x05
    7ab0:	9e 81       	ldd	r25, Y+6	; 0x06
    7ab2:	af 81       	ldd	r26, Y+7	; 0x07
    7ab4:	b8 85       	ldd	r27, Y+8	; 0x08
    7ab6:	89 8b       	std	Y+17, r24	; 0x11
    7ab8:	9a 8b       	std	Y+18, r25	; 0x12
    7aba:	ab 8b       	std	Y+19, r26	; 0x13
    7abc:	bc 8b       	std	Y+20, r27	; 0x14
    7abe:	89 85       	ldd	r24, Y+9	; 0x09
    7ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
    7ac2:	ab 85       	ldd	r26, Y+11	; 0x0b
    7ac4:	bc 85       	ldd	r27, Y+12	; 0x0c
    7ac6:	8d 87       	std	Y+13, r24	; 0x0d
    7ac8:	9e 87       	std	Y+14, r25	; 0x0e
    7aca:	af 87       	std	Y+15, r26	; 0x0f
    7acc:	b8 8b       	std	Y+16, r27	; 0x10
  float x = P.x*matrix[0].x + P.y*matrix[1].x + P.z*matrix[2].x;    
    7ace:	9c e0       	ldi	r25, 0x0C	; 12
    7ad0:	c9 2e       	mov	r12, r25
    7ad2:	d1 2c       	mov	r13, r1
    7ad4:	ca 0c       	add	r12, r10
    7ad6:	db 1c       	adc	r13, r11
    7ad8:	88 e1       	ldi	r24, 0x18	; 24
    7ada:	a8 2e       	mov	r10, r24
    7adc:	b1 2c       	mov	r11, r1
    7ade:	a4 0c       	add	r10, r4
    7ae0:	b5 1c       	adc	r11, r5
  float y = P.x*matrix[0].y + P.y*matrix[1].y + P.z*matrix[2].y;  
    7ae2:	6d 89       	ldd	r22, Y+21	; 0x15
    7ae4:	7e 89       	ldd	r23, Y+22	; 0x16
    7ae6:	8f 89       	ldd	r24, Y+23	; 0x17
    7ae8:	98 8d       	ldd	r25, Y+24	; 0x18
    7aea:	d2 01       	movw	r26, r4
    7aec:	14 96       	adiw	r26, 0x04	; 4
    7aee:	2d 91       	ld	r18, X+
    7af0:	3d 91       	ld	r19, X+
    7af2:	4d 91       	ld	r20, X+
    7af4:	5c 91       	ld	r21, X
    7af6:	17 97       	sbiw	r26, 0x07	; 7
    7af8:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    7afc:	7b 01       	movw	r14, r22
    7afe:	8c 01       	movw	r16, r24
    7b00:	69 89       	ldd	r22, Y+17	; 0x11
    7b02:	7a 89       	ldd	r23, Y+18	; 0x12
    7b04:	8b 89       	ldd	r24, Y+19	; 0x13
    7b06:	9c 89       	ldd	r25, Y+20	; 0x14
    7b08:	f6 01       	movw	r30, r12
    7b0a:	24 81       	ldd	r18, Z+4	; 0x04
    7b0c:	35 81       	ldd	r19, Z+5	; 0x05
    7b0e:	46 81       	ldd	r20, Z+6	; 0x06
    7b10:	57 81       	ldd	r21, Z+7	; 0x07
    7b12:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    7b16:	9b 01       	movw	r18, r22
    7b18:	ac 01       	movw	r20, r24
    7b1a:	c8 01       	movw	r24, r16
    7b1c:	b7 01       	movw	r22, r14
    7b1e:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    7b22:	7b 01       	movw	r14, r22
    7b24:	8c 01       	movw	r16, r24
    7b26:	6d 85       	ldd	r22, Y+13	; 0x0d
    7b28:	7e 85       	ldd	r23, Y+14	; 0x0e
    7b2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    7b2c:	98 89       	ldd	r25, Y+16	; 0x10
    7b2e:	d5 01       	movw	r26, r10
    7b30:	14 96       	adiw	r26, 0x04	; 4
    7b32:	2d 91       	ld	r18, X+
    7b34:	3d 91       	ld	r19, X+
    7b36:	4d 91       	ld	r20, X+
    7b38:	5c 91       	ld	r21, X
    7b3a:	17 97       	sbiw	r26, 0x07	; 7
    7b3c:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    7b40:	9b 01       	movw	r18, r22
    7b42:	ac 01       	movw	r20, r24
    7b44:	c8 01       	movw	r24, r16
    7b46:	b7 01       	movw	r22, r14
    7b48:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    7b4c:	3b 01       	movw	r6, r22
    7b4e:	4c 01       	movw	r8, r24
  float z = P.x*matrix[0].z + P.y*matrix[1].z + P.z*matrix[2].z;  
    7b50:	6d 89       	ldd	r22, Y+21	; 0x15
    7b52:	7e 89       	ldd	r23, Y+22	; 0x16
    7b54:	8f 89       	ldd	r24, Y+23	; 0x17
    7b56:	98 8d       	ldd	r25, Y+24	; 0x18
    7b58:	f2 01       	movw	r30, r4
    7b5a:	20 85       	ldd	r18, Z+8	; 0x08
    7b5c:	31 85       	ldd	r19, Z+9	; 0x09
    7b5e:	42 85       	ldd	r20, Z+10	; 0x0a
    7b60:	53 85       	ldd	r21, Z+11	; 0x0b
    7b62:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    7b66:	7b 01       	movw	r14, r22
    7b68:	8c 01       	movw	r16, r24
    7b6a:	69 89       	ldd	r22, Y+17	; 0x11
    7b6c:	7a 89       	ldd	r23, Y+18	; 0x12
    7b6e:	8b 89       	ldd	r24, Y+19	; 0x13
    7b70:	9c 89       	ldd	r25, Y+20	; 0x14
    7b72:	d6 01       	movw	r26, r12
    7b74:	18 96       	adiw	r26, 0x08	; 8
    7b76:	2d 91       	ld	r18, X+
    7b78:	3d 91       	ld	r19, X+
    7b7a:	4d 91       	ld	r20, X+
    7b7c:	5c 91       	ld	r21, X
    7b7e:	1b 97       	sbiw	r26, 0x0b	; 11
    7b80:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    7b84:	9b 01       	movw	r18, r22
    7b86:	ac 01       	movw	r20, r24
    7b88:	c8 01       	movw	r24, r16
    7b8a:	b7 01       	movw	r22, r14
    7b8c:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    7b90:	7b 01       	movw	r14, r22
    7b92:	8c 01       	movw	r16, r24
    7b94:	6d 85       	ldd	r22, Y+13	; 0x0d
    7b96:	7e 85       	ldd	r23, Y+14	; 0x0e
    7b98:	8f 85       	ldd	r24, Y+15	; 0x0f
    7b9a:	98 89       	ldd	r25, Y+16	; 0x10
    7b9c:	f5 01       	movw	r30, r10
    7b9e:	20 85       	ldd	r18, Z+8	; 0x08
    7ba0:	31 85       	ldd	r19, Z+9	; 0x09
    7ba2:	42 85       	ldd	r20, Z+10	; 0x0a
    7ba4:	53 85       	ldd	r21, Z+11	; 0x0b
    7ba6:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    7baa:	9b 01       	movw	r18, r22
    7bac:	ac 01       	movw	r20, r24
    7bae:	c8 01       	movw	r24, r16
    7bb0:	b7 01       	movw	r22, r14
    7bb2:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    7bb6:	5b 01       	movw	r10, r22
    7bb8:	6c 01       	movw	r12, r24
  return (COORD3D) {x, y, z};
    7bba:	6d 89       	ldd	r22, Y+21	; 0x15
    7bbc:	7e 89       	ldd	r23, Y+22	; 0x16
    7bbe:	8f 89       	ldd	r24, Y+23	; 0x17
    7bc0:	98 8d       	ldd	r25, Y+24	; 0x18
    7bc2:	d2 01       	movw	r26, r4
    7bc4:	2d 91       	ld	r18, X+
    7bc6:	3d 91       	ld	r19, X+
    7bc8:	4d 91       	ld	r20, X+
    7bca:	5c 91       	ld	r21, X
    7bcc:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    7bd0:	7b 01       	movw	r14, r22
    7bd2:	8c 01       	movw	r16, r24
    7bd4:	69 89       	ldd	r22, Y+17	; 0x11
    7bd6:	7a 89       	ldd	r23, Y+18	; 0x12
    7bd8:	8b 89       	ldd	r24, Y+19	; 0x13
    7bda:	9c 89       	ldd	r25, Y+20	; 0x14
    7bdc:	f2 01       	movw	r30, r4
    7bde:	24 85       	ldd	r18, Z+12	; 0x0c
    7be0:	35 85       	ldd	r19, Z+13	; 0x0d
    7be2:	46 85       	ldd	r20, Z+14	; 0x0e
    7be4:	57 85       	ldd	r21, Z+15	; 0x0f
    7be6:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    7bea:	9b 01       	movw	r18, r22
    7bec:	ac 01       	movw	r20, r24
    7bee:	c8 01       	movw	r24, r16
    7bf0:	b7 01       	movw	r22, r14
    7bf2:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    7bf6:	7b 01       	movw	r14, r22
    7bf8:	8c 01       	movw	r16, r24
    7bfa:	6d 85       	ldd	r22, Y+13	; 0x0d
    7bfc:	7e 85       	ldd	r23, Y+14	; 0x0e
    7bfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    7c00:	98 89       	ldd	r25, Y+16	; 0x10
    7c02:	d2 01       	movw	r26, r4
    7c04:	58 96       	adiw	r26, 0x18	; 24
    7c06:	2d 91       	ld	r18, X+
    7c08:	3d 91       	ld	r19, X+
    7c0a:	4d 91       	ld	r20, X+
    7c0c:	5c 91       	ld	r21, X
    7c0e:	5b 97       	sbiw	r26, 0x1b	; 27
    7c10:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    7c14:	9b 01       	movw	r18, r22
    7c16:	ac 01       	movw	r20, r24
    7c18:	c8 01       	movw	r24, r16
    7c1a:	b7 01       	movw	r22, r14
    7c1c:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    7c20:	f1 01       	movw	r30, r2
    7c22:	60 83       	st	Z, r22
    7c24:	71 83       	std	Z+1, r23	; 0x01
    7c26:	82 83       	std	Z+2, r24	; 0x02
    7c28:	93 83       	std	Z+3, r25	; 0x03
    7c2a:	c3 01       	movw	r24, r6
    7c2c:	d4 01       	movw	r26, r8
    7c2e:	84 83       	std	Z+4, r24	; 0x04
    7c30:	95 83       	std	Z+5, r25	; 0x05
    7c32:	a6 83       	std	Z+6, r26	; 0x06
    7c34:	b7 83       	std	Z+7, r27	; 0x07
    7c36:	c5 01       	movw	r24, r10
    7c38:	d6 01       	movw	r26, r12
    7c3a:	80 87       	std	Z+8, r24	; 0x08
    7c3c:	91 87       	std	Z+9, r25	; 0x09
    7c3e:	a2 87       	std	Z+10, r26	; 0x0a
    7c40:	b3 87       	std	Z+11, r27	; 0x0b
}
    7c42:	c1 01       	movw	r24, r2
    7c44:	68 96       	adiw	r28, 0x18	; 24
    7c46:	0f b6       	in	r0, 0x3f	; 63
    7c48:	f8 94       	cli
    7c4a:	de bf       	out	0x3e, r29	; 62
    7c4c:	0f be       	out	0x3f, r0	; 63
    7c4e:	cd bf       	out	0x3d, r28	; 61
    7c50:	cf 91       	pop	r28
    7c52:	df 91       	pop	r29
    7c54:	1f 91       	pop	r17
    7c56:	0f 91       	pop	r16
    7c58:	ff 90       	pop	r15
    7c5a:	ef 90       	pop	r14
    7c5c:	df 90       	pop	r13
    7c5e:	cf 90       	pop	r12
    7c60:	bf 90       	pop	r11
    7c62:	af 90       	pop	r10
    7c64:	9f 90       	pop	r9
    7c66:	8f 90       	pop	r8
    7c68:	7f 90       	pop	r7
    7c6a:	6f 90       	pop	r6
    7c6c:	5f 90       	pop	r5
    7c6e:	4f 90       	pop	r4
    7c70:	3f 90       	pop	r3
    7c72:	2f 90       	pop	r2
    7c74:	08 95       	ret

00007c76 <_Z11applyMatrix7COORD2DPS_>:

COORD2D applyMatrix (COORD2D P, COORD2D * matrix) {
    7c76:	4f 92       	push	r4
    7c78:	5f 92       	push	r5
    7c7a:	6f 92       	push	r6
    7c7c:	7f 92       	push	r7
    7c7e:	8f 92       	push	r8
    7c80:	9f 92       	push	r9
    7c82:	af 92       	push	r10
    7c84:	bf 92       	push	r11
    7c86:	cf 92       	push	r12
    7c88:	df 92       	push	r13
    7c8a:	ef 92       	push	r14
    7c8c:	ff 92       	push	r15
    7c8e:	0f 93       	push	r16
    7c90:	1f 93       	push	r17
    7c92:	df 93       	push	r29
    7c94:	cf 93       	push	r28
    7c96:	cd b7       	in	r28, 0x3d	; 61
    7c98:	de b7       	in	r29, 0x3e	; 62
    7c9a:	60 97       	sbiw	r28, 0x10	; 16
    7c9c:	0f b6       	in	r0, 0x3f	; 63
    7c9e:	f8 94       	cli
    7ca0:	de bf       	out	0x3e, r29	; 62
    7ca2:	0f be       	out	0x3f, r0	; 63
    7ca4:	cd bf       	out	0x3d, r28	; 61
    7ca6:	29 87       	std	Y+9, r18	; 0x09
    7ca8:	3a 87       	std	Y+10, r19	; 0x0a
    7caa:	4b 87       	std	Y+11, r20	; 0x0b
    7cac:	5c 87       	std	Y+12, r21	; 0x0c
    7cae:	6d 87       	std	Y+13, r22	; 0x0d
    7cb0:	7e 87       	std	Y+14, r23	; 0x0e
    7cb2:	8f 87       	std	Y+15, r24	; 0x0f
    7cb4:	98 8b       	std	Y+16, r25	; 0x10
    7cb6:	89 84       	ldd	r8, Y+9	; 0x09
    7cb8:	9a 84       	ldd	r9, Y+10	; 0x0a
    7cba:	ab 84       	ldd	r10, Y+11	; 0x0b
    7cbc:	bc 84       	ldd	r11, Y+12	; 0x0c
    7cbe:	4d 84       	ldd	r4, Y+13	; 0x0d
    7cc0:	5e 84       	ldd	r5, Y+14	; 0x0e
    7cc2:	6f 84       	ldd	r6, Y+15	; 0x0f
    7cc4:	78 88       	ldd	r7, Y+16	; 0x10
  float x = P.x*matrix[0].x + P.z*matrix[1].x;    
  float z = P.x*matrix[0].z + P.z*matrix[1].z;  
    7cc6:	c5 01       	movw	r24, r10
    7cc8:	b4 01       	movw	r22, r8
    7cca:	f8 01       	movw	r30, r16
    7ccc:	24 81       	ldd	r18, Z+4	; 0x04
    7cce:	35 81       	ldd	r19, Z+5	; 0x05
    7cd0:	46 81       	ldd	r20, Z+6	; 0x06
    7cd2:	57 81       	ldd	r21, Z+7	; 0x07
    7cd4:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    7cd8:	6b 01       	movw	r12, r22
    7cda:	7c 01       	movw	r14, r24
    7cdc:	c3 01       	movw	r24, r6
    7cde:	b2 01       	movw	r22, r4
  float z = P.x*matrix[0].z + P.y*matrix[1].z + P.z*matrix[2].z;  
  return (COORD3D) {x, y, z};
}

COORD2D applyMatrix (COORD2D P, COORD2D * matrix) {
  float x = P.x*matrix[0].x + P.z*matrix[1].x;    
    7ce0:	08 5f       	subi	r16, 0xF8	; 248
    7ce2:	1f 4f       	sbci	r17, 0xFF	; 255
  float z = P.x*matrix[0].z + P.z*matrix[1].z;  
    7ce4:	f8 01       	movw	r30, r16
    7ce6:	24 81       	ldd	r18, Z+4	; 0x04
    7ce8:	35 81       	ldd	r19, Z+5	; 0x05
    7cea:	46 81       	ldd	r20, Z+6	; 0x06
    7cec:	57 81       	ldd	r21, Z+7	; 0x07
    7cee:	08 50       	subi	r16, 0x08	; 8
    7cf0:	10 40       	sbci	r17, 0x00	; 0
    7cf2:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    7cf6:	9b 01       	movw	r18, r22
    7cf8:	ac 01       	movw	r20, r24
    7cfa:	c7 01       	movw	r24, r14
    7cfc:	b6 01       	movw	r22, r12
    7cfe:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    7d02:	6b 01       	movw	r12, r22
    7d04:	7c 01       	movw	r14, r24
  return (COORD2D) {x, z};
    7d06:	c5 01       	movw	r24, r10
    7d08:	b4 01       	movw	r22, r8
    7d0a:	f8 01       	movw	r30, r16
    7d0c:	20 81       	ld	r18, Z
    7d0e:	31 81       	ldd	r19, Z+1	; 0x01
    7d10:	42 81       	ldd	r20, Z+2	; 0x02
    7d12:	53 81       	ldd	r21, Z+3	; 0x03
    7d14:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    7d18:	4b 01       	movw	r8, r22
    7d1a:	5c 01       	movw	r10, r24
    7d1c:	c3 01       	movw	r24, r6
    7d1e:	b2 01       	movw	r22, r4
    7d20:	f8 01       	movw	r30, r16
    7d22:	20 85       	ldd	r18, Z+8	; 0x08
    7d24:	31 85       	ldd	r19, Z+9	; 0x09
    7d26:	42 85       	ldd	r20, Z+10	; 0x0a
    7d28:	53 85       	ldd	r21, Z+11	; 0x0b
    7d2a:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    7d2e:	9b 01       	movw	r18, r22
    7d30:	ac 01       	movw	r20, r24
    7d32:	c5 01       	movw	r24, r10
    7d34:	b4 01       	movw	r22, r8
    7d36:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    7d3a:	69 83       	std	Y+1, r22	; 0x01
    7d3c:	7a 83       	std	Y+2, r23	; 0x02
    7d3e:	8b 83       	std	Y+3, r24	; 0x03
    7d40:	9c 83       	std	Y+4, r25	; 0x04
    7d42:	c6 01       	movw	r24, r12
    7d44:	d7 01       	movw	r26, r14
    7d46:	8d 83       	std	Y+5, r24	; 0x05
    7d48:	9e 83       	std	Y+6, r25	; 0x06
    7d4a:	af 83       	std	Y+7, r26	; 0x07
    7d4c:	b8 87       	std	Y+8, r27	; 0x08
    7d4e:	29 81       	ldd	r18, Y+1	; 0x01
    7d50:	3a 81       	ldd	r19, Y+2	; 0x02
    7d52:	4b 81       	ldd	r20, Y+3	; 0x03
    7d54:	5c 81       	ldd	r21, Y+4	; 0x04
    7d56:	6d 81       	ldd	r22, Y+5	; 0x05
    7d58:	7e 81       	ldd	r23, Y+6	; 0x06
}
    7d5a:	8f 81       	ldd	r24, Y+7	; 0x07
    7d5c:	98 85       	ldd	r25, Y+8	; 0x08
    7d5e:	60 96       	adiw	r28, 0x10	; 16
    7d60:	0f b6       	in	r0, 0x3f	; 63
    7d62:	f8 94       	cli
    7d64:	de bf       	out	0x3e, r29	; 62
    7d66:	0f be       	out	0x3f, r0	; 63
    7d68:	cd bf       	out	0x3d, r28	; 61
    7d6a:	cf 91       	pop	r28
    7d6c:	df 91       	pop	r29
    7d6e:	1f 91       	pop	r17
    7d70:	0f 91       	pop	r16
    7d72:	ff 90       	pop	r15
    7d74:	ef 90       	pop	r14
    7d76:	df 90       	pop	r13
    7d78:	cf 90       	pop	r12
    7d7a:	bf 90       	pop	r11
    7d7c:	af 90       	pop	r10
    7d7e:	9f 90       	pop	r9
    7d80:	8f 90       	pop	r8
    7d82:	7f 90       	pop	r7
    7d84:	6f 90       	pop	r6
    7d86:	5f 90       	pop	r5
    7d88:	4f 90       	pop	r4
    7d8a:	08 95       	ret

00007d8c <_Z9sumasignaP7COORD3DS_>:
	producto.y = vector1.z*vector2.x - vector1.x*vector2.z;
	producto.z = vector1.x*vector2.y - vector1.y*vector2.x;
	return producto;
}

void sumasigna (COORD3D *punto, COORD3D vector) {
    7d8c:	6f 92       	push	r6
    7d8e:	7f 92       	push	r7
    7d90:	8f 92       	push	r8
    7d92:	9f 92       	push	r9
    7d94:	af 92       	push	r10
    7d96:	bf 92       	push	r11
    7d98:	cf 92       	push	r12
    7d9a:	df 92       	push	r13
    7d9c:	ef 92       	push	r14
    7d9e:	ff 92       	push	r15
    7da0:	0f 93       	push	r16
    7da2:	1f 93       	push	r17
    7da4:	df 93       	push	r29
    7da6:	cf 93       	push	r28
    7da8:	cd b7       	in	r28, 0x3d	; 61
    7daa:	de b7       	in	r29, 0x3e	; 62
    7dac:	2c 97       	sbiw	r28, 0x0c	; 12
    7dae:	0f b6       	in	r0, 0x3f	; 63
    7db0:	f8 94       	cli
    7db2:	de bf       	out	0x3e, r29	; 62
    7db4:	0f be       	out	0x3f, r0	; 63
    7db6:	cd bf       	out	0x3d, r28	; 61
    7db8:	5c 01       	movw	r10, r24
    7dba:	c9 82       	std	Y+1, r12	; 0x01
    7dbc:	da 82       	std	Y+2, r13	; 0x02
    7dbe:	eb 82       	std	Y+3, r14	; 0x03
    7dc0:	fc 82       	std	Y+4, r15	; 0x04
    7dc2:	0d 83       	std	Y+5, r16	; 0x05
    7dc4:	1e 83       	std	Y+6, r17	; 0x06
    7dc6:	2f 83       	std	Y+7, r18	; 0x07
    7dc8:	38 87       	std	Y+8, r19	; 0x08
    7dca:	49 87       	std	Y+9, r20	; 0x09
    7dcc:	5a 87       	std	Y+10, r21	; 0x0a
    7dce:	6b 87       	std	Y+11, r22	; 0x0b
    7dd0:	7c 87       	std	Y+12, r23	; 0x0c
    7dd2:	ed 80       	ldd	r14, Y+5	; 0x05
    7dd4:	fe 80       	ldd	r15, Y+6	; 0x06
    7dd6:	0f 81       	ldd	r16, Y+7	; 0x07
    7dd8:	18 85       	ldd	r17, Y+8	; 0x08
    7dda:	69 84       	ldd	r6, Y+9	; 0x09
    7ddc:	7a 84       	ldd	r7, Y+10	; 0x0a
    7dde:	8b 84       	ldd	r8, Y+11	; 0x0b
    7de0:	9c 84       	ldd	r9, Y+12	; 0x0c
  (*punto).x += vector.x;
    7de2:	fc 01       	movw	r30, r24
    7de4:	60 81       	ld	r22, Z
    7de6:	71 81       	ldd	r23, Z+1	; 0x01
    7de8:	82 81       	ldd	r24, Z+2	; 0x02
    7dea:	93 81       	ldd	r25, Z+3	; 0x03
    7dec:	29 81       	ldd	r18, Y+1	; 0x01
    7dee:	3a 81       	ldd	r19, Y+2	; 0x02
    7df0:	4b 81       	ldd	r20, Y+3	; 0x03
    7df2:	5c 81       	ldd	r21, Y+4	; 0x04
    7df4:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    7df8:	f5 01       	movw	r30, r10
    7dfa:	60 83       	st	Z, r22
    7dfc:	71 83       	std	Z+1, r23	; 0x01
    7dfe:	82 83       	std	Z+2, r24	; 0x02
    7e00:	93 83       	std	Z+3, r25	; 0x03
  (*punto).y += vector.y;
    7e02:	64 81       	ldd	r22, Z+4	; 0x04
    7e04:	75 81       	ldd	r23, Z+5	; 0x05
    7e06:	86 81       	ldd	r24, Z+6	; 0x06
    7e08:	97 81       	ldd	r25, Z+7	; 0x07
    7e0a:	a8 01       	movw	r20, r16
    7e0c:	97 01       	movw	r18, r14
    7e0e:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    7e12:	f5 01       	movw	r30, r10
    7e14:	64 83       	std	Z+4, r22	; 0x04
    7e16:	75 83       	std	Z+5, r23	; 0x05
    7e18:	86 83       	std	Z+6, r24	; 0x06
    7e1a:	97 83       	std	Z+7, r25	; 0x07
  (*punto).z += vector.z; 
    7e1c:	60 85       	ldd	r22, Z+8	; 0x08
    7e1e:	71 85       	ldd	r23, Z+9	; 0x09
    7e20:	82 85       	ldd	r24, Z+10	; 0x0a
    7e22:	93 85       	ldd	r25, Z+11	; 0x0b
    7e24:	a4 01       	movw	r20, r8
    7e26:	93 01       	movw	r18, r6
    7e28:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    7e2c:	f5 01       	movw	r30, r10
    7e2e:	60 87       	std	Z+8, r22	; 0x08
    7e30:	71 87       	std	Z+9, r23	; 0x09
    7e32:	82 87       	std	Z+10, r24	; 0x0a
    7e34:	93 87       	std	Z+11, r25	; 0x0b
}
    7e36:	2c 96       	adiw	r28, 0x0c	; 12
    7e38:	0f b6       	in	r0, 0x3f	; 63
    7e3a:	f8 94       	cli
    7e3c:	de bf       	out	0x3e, r29	; 62
    7e3e:	0f be       	out	0x3f, r0	; 63
    7e40:	cd bf       	out	0x3d, r28	; 61
    7e42:	cf 91       	pop	r28
    7e44:	df 91       	pop	r29
    7e46:	1f 91       	pop	r17
    7e48:	0f 91       	pop	r16
    7e4a:	ff 90       	pop	r15
    7e4c:	ef 90       	pop	r14
    7e4e:	df 90       	pop	r13
    7e50:	cf 90       	pop	r12
    7e52:	bf 90       	pop	r11
    7e54:	af 90       	pop	r10
    7e56:	9f 90       	pop	r9
    7e58:	8f 90       	pop	r8
    7e5a:	7f 90       	pop	r7
    7e5c:	6f 90       	pop	r6
    7e5e:	08 95       	ret

00007e60 <_Z9sumasignaP7COORD2DS_>:

void sumasigna (COORD2D *punto, COORD2D vector) {
    7e60:	cf 92       	push	r12
    7e62:	df 92       	push	r13
    7e64:	ef 92       	push	r14
    7e66:	ff 92       	push	r15
    7e68:	0f 93       	push	r16
    7e6a:	1f 93       	push	r17
    7e6c:	df 93       	push	r29
    7e6e:	cf 93       	push	r28
    7e70:	cd b7       	in	r28, 0x3d	; 61
    7e72:	de b7       	in	r29, 0x3e	; 62
    7e74:	28 97       	sbiw	r28, 0x08	; 8
    7e76:	0f b6       	in	r0, 0x3f	; 63
    7e78:	f8 94       	cli
    7e7a:	de bf       	out	0x3e, r29	; 62
    7e7c:	0f be       	out	0x3f, r0	; 63
    7e7e:	cd bf       	out	0x3d, r28	; 61
    7e80:	6c 01       	movw	r12, r24
    7e82:	09 83       	std	Y+1, r16	; 0x01
    7e84:	1a 83       	std	Y+2, r17	; 0x02
    7e86:	2b 83       	std	Y+3, r18	; 0x03
    7e88:	3c 83       	std	Y+4, r19	; 0x04
    7e8a:	4d 83       	std	Y+5, r20	; 0x05
    7e8c:	5e 83       	std	Y+6, r21	; 0x06
    7e8e:	6f 83       	std	Y+7, r22	; 0x07
    7e90:	78 87       	std	Y+8, r23	; 0x08
    7e92:	ed 80       	ldd	r14, Y+5	; 0x05
    7e94:	fe 80       	ldd	r15, Y+6	; 0x06
    7e96:	0f 81       	ldd	r16, Y+7	; 0x07
    7e98:	18 85       	ldd	r17, Y+8	; 0x08
  (*punto).x += vector.x;
    7e9a:	fc 01       	movw	r30, r24
    7e9c:	60 81       	ld	r22, Z
    7e9e:	71 81       	ldd	r23, Z+1	; 0x01
    7ea0:	82 81       	ldd	r24, Z+2	; 0x02
    7ea2:	93 81       	ldd	r25, Z+3	; 0x03
    7ea4:	29 81       	ldd	r18, Y+1	; 0x01
    7ea6:	3a 81       	ldd	r19, Y+2	; 0x02
    7ea8:	4b 81       	ldd	r20, Y+3	; 0x03
    7eaa:	5c 81       	ldd	r21, Y+4	; 0x04
    7eac:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    7eb0:	f6 01       	movw	r30, r12
    7eb2:	60 83       	st	Z, r22
    7eb4:	71 83       	std	Z+1, r23	; 0x01
    7eb6:	82 83       	std	Z+2, r24	; 0x02
    7eb8:	93 83       	std	Z+3, r25	; 0x03
  (*punto).z += vector.z; 
    7eba:	64 81       	ldd	r22, Z+4	; 0x04
    7ebc:	75 81       	ldd	r23, Z+5	; 0x05
    7ebe:	86 81       	ldd	r24, Z+6	; 0x06
    7ec0:	97 81       	ldd	r25, Z+7	; 0x07
    7ec2:	a8 01       	movw	r20, r16
    7ec4:	97 01       	movw	r18, r14
    7ec6:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    7eca:	f6 01       	movw	r30, r12
    7ecc:	64 83       	std	Z+4, r22	; 0x04
    7ece:	75 83       	std	Z+5, r23	; 0x05
    7ed0:	86 83       	std	Z+6, r24	; 0x06
    7ed2:	97 83       	std	Z+7, r25	; 0x07
}
    7ed4:	28 96       	adiw	r28, 0x08	; 8
    7ed6:	0f b6       	in	r0, 0x3f	; 63
    7ed8:	f8 94       	cli
    7eda:	de bf       	out	0x3e, r29	; 62
    7edc:	0f be       	out	0x3f, r0	; 63
    7ede:	cd bf       	out	0x3d, r28	; 61
    7ee0:	cf 91       	pop	r28
    7ee2:	df 91       	pop	r29
    7ee4:	1f 91       	pop	r17
    7ee6:	0f 91       	pop	r16
    7ee8:	ff 90       	pop	r15
    7eea:	ef 90       	pop	r14
    7eec:	df 90       	pop	r13
    7eee:	cf 90       	pop	r12
    7ef0:	08 95       	ret

00007ef2 <_Z10patas2patah>:
	abs2rel (puntos);    // nota: hubiera sido más eficiente hacer un memcpy, pero acá la velocidad no es crítica
	abs2rel (plano);
}

// devuelve la primer pata activada de un código binario
byte patas2pata (byte patas) {
    7ef2:	20 e0       	ldi	r18, 0x00	; 0
    7ef4:	30 e0       	ldi	r19, 0x00	; 0
  byte pata;
  for (pata=0; pata<6; pata++) {
    if ((patas>>pata)&1) {break;}
    7ef6:	68 2f       	mov	r22, r24
    7ef8:	70 e0       	ldi	r23, 0x00	; 0
	abs2rel (puntos);    // nota: hubiera sido más eficiente hacer un memcpy, pero acá la velocidad no es crítica
	abs2rel (plano);
}

// devuelve la primer pata activada de un código binario
byte patas2pata (byte patas) {
    7efa:	42 2f       	mov	r20, r18
  byte pata;
  for (pata=0; pata<6; pata++) {
    if ((patas>>pata)&1) {break;}
    7efc:	cb 01       	movw	r24, r22
    7efe:	02 2e       	mov	r0, r18
    7f00:	02 c0       	rjmp	.+4      	; 0x7f06 <_Z10patas2patah+0x14>
    7f02:	95 95       	asr	r25
    7f04:	87 95       	ror	r24
    7f06:	0a 94       	dec	r0
    7f08:	e2 f7       	brpl	.-8      	; 0x7f02 <_Z10patas2patah+0x10>
    7f0a:	80 fd       	sbrc	r24, 0
    7f0c:	06 c0       	rjmp	.+12     	; 0x7f1a <_Z10patas2patah+0x28>
    7f0e:	4f 5f       	subi	r20, 0xFF	; 255
    7f10:	2f 5f       	subi	r18, 0xFF	; 255
    7f12:	3f 4f       	sbci	r19, 0xFF	; 255
}

// devuelve la primer pata activada de un código binario
byte patas2pata (byte patas) {
  byte pata;
  for (pata=0; pata<6; pata++) {
    7f14:	26 30       	cpi	r18, 0x06	; 6
    7f16:	31 05       	cpc	r19, r1
    7f18:	81 f7       	brne	.-32     	; 0x7efa <_Z10patas2patah+0x8>
    if ((patas>>pata)&1) {break;}
  }
  return pata;
}
    7f1a:	84 2f       	mov	r24, r20
    7f1c:	08 95       	ret

00007f1e <_Z8traslateP7COORD3DS_>:
  }
  return posicion;
} 

// traslada una posición con un vector de traslación
POSICION traslate (COORD3D *pos_ref, COORD3D traslacion) {
    7f1e:	2f 92       	push	r2
    7f20:	3f 92       	push	r3
    7f22:	4f 92       	push	r4
    7f24:	5f 92       	push	r5
    7f26:	6f 92       	push	r6
    7f28:	7f 92       	push	r7
    7f2a:	8f 92       	push	r8
    7f2c:	9f 92       	push	r9
    7f2e:	af 92       	push	r10
    7f30:	bf 92       	push	r11
    7f32:	cf 92       	push	r12
    7f34:	df 92       	push	r13
    7f36:	ef 92       	push	r14
    7f38:	ff 92       	push	r15
    7f3a:	0f 93       	push	r16
    7f3c:	1f 93       	push	r17
    7f3e:	df 93       	push	r29
    7f40:	cf 93       	push	r28
    7f42:	cd b7       	in	r28, 0x3d	; 61
    7f44:	de b7       	in	r29, 0x3e	; 62
    7f46:	68 97       	sbiw	r28, 0x18	; 24
    7f48:	0f b6       	in	r0, 0x3f	; 63
    7f4a:	f8 94       	cli
    7f4c:	de bf       	out	0x3e, r29	; 62
    7f4e:	0f be       	out	0x3f, r0	; 63
    7f50:	cd bf       	out	0x3d, r28	; 61
    7f52:	2c 01       	movw	r4, r24
    7f54:	a9 82       	std	Y+1, r10	; 0x01
    7f56:	ba 82       	std	Y+2, r11	; 0x02
    7f58:	cb 82       	std	Y+3, r12	; 0x03
    7f5a:	dc 82       	std	Y+4, r13	; 0x04
    7f5c:	ed 82       	std	Y+5, r14	; 0x05
    7f5e:	fe 82       	std	Y+6, r15	; 0x06
    7f60:	0f 83       	std	Y+7, r16	; 0x07
    7f62:	18 87       	std	Y+8, r17	; 0x08
    7f64:	29 87       	std	Y+9, r18	; 0x09
    7f66:	3a 87       	std	Y+10, r19	; 0x0a
    7f68:	4b 87       	std	Y+11, r20	; 0x0b
    7f6a:	5c 87       	std	Y+12, r21	; 0x0c
    7f6c:	89 85       	ldd	r24, Y+9	; 0x09
    7f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7f70:	ab 85       	ldd	r26, Y+11	; 0x0b
    7f72:	bc 85       	ldd	r27, Y+12	; 0x0c
    7f74:	8d 8b       	std	Y+21, r24	; 0x15
    7f76:	9e 8b       	std	Y+22, r25	; 0x16
    7f78:	af 8b       	std	Y+23, r26	; 0x17
    7f7a:	b8 8f       	std	Y+24, r27	; 0x18
    7f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    7f7e:	9e 81       	ldd	r25, Y+6	; 0x06
    7f80:	af 81       	ldd	r26, Y+7	; 0x07
    7f82:	b8 85       	ldd	r27, Y+8	; 0x08
    7f84:	89 8b       	std	Y+17, r24	; 0x11
    7f86:	9a 8b       	std	Y+18, r25	; 0x12
    7f88:	ab 8b       	std	Y+19, r26	; 0x13
    7f8a:	bc 8b       	std	Y+20, r27	; 0x14
    7f8c:	89 81       	ldd	r24, Y+1	; 0x01
    7f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    7f90:	ab 81       	ldd	r26, Y+3	; 0x03
    7f92:	bc 81       	ldd	r27, Y+4	; 0x04
    7f94:	8d 87       	std	Y+13, r24	; 0x0d
    7f96:	9e 87       	std	Y+14, r25	; 0x0e
    7f98:	af 87       	std	Y+15, r26	; 0x0f
    7f9a:	b8 8b       	std	Y+16, r27	; 0x10
    7f9c:	3b 01       	movw	r6, r22
    7f9e:	42 01       	movw	r8, r4
  POSICION posicion;
  for (byte pata=0; pata<6; pata++) {
    7fa0:	28 e4       	ldi	r18, 0x48	; 72
    7fa2:	22 2e       	mov	r2, r18
    7fa4:	31 2c       	mov	r3, r1
    7fa6:	24 0c       	add	r2, r4
    7fa8:	35 1c       	adc	r3, r5
float bezier (float p0, float p1, float p2, float t) {
  return sq(1-t)*p0 + 2*t*(1-t)*p1 + sq(t)*p2;
}

COORD3D suma (COORD3D punto1, COORD3D punto2) {
  return (COORD3D) {punto1.x + punto2.x, punto1.y + punto2.y, punto1.z + punto2.z}; 
    7faa:	6d 85       	ldd	r22, Y+13	; 0x0d
    7fac:	7e 85       	ldd	r23, Y+14	; 0x0e
    7fae:	8f 85       	ldd	r24, Y+15	; 0x0f
    7fb0:	98 89       	ldd	r25, Y+16	; 0x10
    7fb2:	d3 01       	movw	r26, r6
    7fb4:	2d 91       	ld	r18, X+
    7fb6:	3d 91       	ld	r19, X+
    7fb8:	4d 91       	ld	r20, X+
    7fba:	5c 91       	ld	r21, X
    7fbc:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    7fc0:	5b 01       	movw	r10, r22
    7fc2:	6c 01       	movw	r12, r24
    7fc4:	69 89       	ldd	r22, Y+17	; 0x11
    7fc6:	7a 89       	ldd	r23, Y+18	; 0x12
    7fc8:	8b 89       	ldd	r24, Y+19	; 0x13
    7fca:	9c 89       	ldd	r25, Y+20	; 0x14
    7fcc:	f3 01       	movw	r30, r6
    7fce:	24 81       	ldd	r18, Z+4	; 0x04
    7fd0:	35 81       	ldd	r19, Z+5	; 0x05
    7fd2:	46 81       	ldd	r20, Z+6	; 0x06
    7fd4:	57 81       	ldd	r21, Z+7	; 0x07
    7fd6:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    7fda:	7b 01       	movw	r14, r22
    7fdc:	8c 01       	movw	r16, r24

// traslada una posición con un vector de traslación
POSICION traslate (COORD3D *pos_ref, COORD3D traslacion) {
  POSICION posicion;
  for (byte pata=0; pata<6; pata++) {
    posicion.patas[pata] = suma (pos_ref[pata], traslacion);
    7fde:	d3 01       	movw	r26, r6
    7fe0:	18 96       	adiw	r26, 0x08	; 8
    7fe2:	6d 91       	ld	r22, X+
    7fe4:	7d 91       	ld	r23, X+
    7fe6:	8d 91       	ld	r24, X+
    7fe8:	9c 91       	ld	r25, X
    7fea:	1b 97       	sbiw	r26, 0x0b	; 11
    7fec:	2d 89       	ldd	r18, Y+21	; 0x15
    7fee:	3e 89       	ldd	r19, Y+22	; 0x16
    7ff0:	4f 89       	ldd	r20, Y+23	; 0x17
    7ff2:	58 8d       	ldd	r21, Y+24	; 0x18
    7ff4:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    7ff8:	f4 01       	movw	r30, r8
    7ffa:	60 87       	std	Z+8, r22	; 0x08
    7ffc:	71 87       	std	Z+9, r23	; 0x09
    7ffe:	82 87       	std	Z+10, r24	; 0x0a
    8000:	93 87       	std	Z+11, r25	; 0x0b
    8002:	c7 01       	movw	r24, r14
    8004:	d8 01       	movw	r26, r16
    8006:	84 83       	std	Z+4, r24	; 0x04
    8008:	95 83       	std	Z+5, r25	; 0x05
    800a:	a6 83       	std	Z+6, r26	; 0x06
    800c:	b7 83       	std	Z+7, r27	; 0x07
    800e:	c5 01       	movw	r24, r10
    8010:	d6 01       	movw	r26, r12
    8012:	80 83       	st	Z, r24
    8014:	91 83       	std	Z+1, r25	; 0x01
    8016:	a2 83       	std	Z+2, r26	; 0x02
    8018:	b3 83       	std	Z+3, r27	; 0x03
    801a:	8c e0       	ldi	r24, 0x0C	; 12
    801c:	90 e0       	ldi	r25, 0x00	; 0
    801e:	68 0e       	add	r6, r24
    8020:	79 1e       	adc	r7, r25
    8022:	88 0e       	add	r8, r24
    8024:	99 1e       	adc	r9, r25
} 

// traslada una posición con un vector de traslación
POSICION traslate (COORD3D *pos_ref, COORD3D traslacion) {
  POSICION posicion;
  for (byte pata=0; pata<6; pata++) {
    8026:	82 14       	cp	r8, r2
    8028:	93 04       	cpc	r9, r3
    802a:	09 f0       	breq	.+2      	; 0x802e <_Z8traslateP7COORD3DS_+0x110>
    802c:	be cf       	rjmp	.-132    	; 0x7faa <_Z8traslateP7COORD3DS_+0x8c>
    posicion.patas[pata] = suma (pos_ref[pata], traslacion);
  }
  return posicion;
}
    802e:	c2 01       	movw	r24, r4
    8030:	68 96       	adiw	r28, 0x18	; 24
    8032:	0f b6       	in	r0, 0x3f	; 63
    8034:	f8 94       	cli
    8036:	de bf       	out	0x3e, r29	; 62
    8038:	0f be       	out	0x3f, r0	; 63
    803a:	cd bf       	out	0x3d, r28	; 61
    803c:	cf 91       	pop	r28
    803e:	df 91       	pop	r29
    8040:	1f 91       	pop	r17
    8042:	0f 91       	pop	r16
    8044:	ff 90       	pop	r15
    8046:	ef 90       	pop	r14
    8048:	df 90       	pop	r13
    804a:	cf 90       	pop	r12
    804c:	bf 90       	pop	r11
    804e:	af 90       	pop	r10
    8050:	9f 90       	pop	r9
    8052:	8f 90       	pop	r8
    8054:	7f 90       	pop	r7
    8056:	6f 90       	pop	r6
    8058:	5f 90       	pop	r5
    805a:	4f 90       	pop	r4
    805c:	3f 90       	pop	r3
    805e:	2f 90       	pop	r2
    8060:	08 95       	ret

00008062 <_Z13edit_positionP7COORD3Dffff>:

// actualiza la posición hexagonal de referencia
void edit_position (COORD3D *pos_ref, float altura_inc, float ancho_inc, float largo_inc, float ancho_central_inc) {
    8062:	2f 92       	push	r2
    8064:	3f 92       	push	r3
    8066:	4f 92       	push	r4
    8068:	5f 92       	push	r5
    806a:	6f 92       	push	r6
    806c:	7f 92       	push	r7
    806e:	8f 92       	push	r8
    8070:	9f 92       	push	r9
    8072:	af 92       	push	r10
    8074:	bf 92       	push	r11
    8076:	cf 92       	push	r12
    8078:	df 92       	push	r13
    807a:	ef 92       	push	r14
    807c:	ff 92       	push	r15
    807e:	0f 93       	push	r16
    8080:	1f 93       	push	r17
    8082:	df 93       	push	r29
    8084:	cf 93       	push	r28
    8086:	00 d0       	rcall	.+0      	; 0x8088 <_Z13edit_positionP7COORD3Dffff+0x26>
    8088:	00 d0       	rcall	.+0      	; 0x808a <_Z13edit_positionP7COORD3Dffff+0x28>
    808a:	cd b7       	in	r28, 0x3d	; 61
    808c:	de b7       	in	r29, 0x3e	; 62
    808e:	09 83       	std	Y+1, r16	; 0x01
    8090:	1a 83       	std	Y+2, r17	; 0x02
    8092:	2b 83       	std	Y+3, r18	; 0x03
    8094:	3c 83       	std	Y+4, r19	; 0x04
    8096:	16 01       	movw	r2, r12
    8098:	27 01       	movw	r4, r14
    809a:	34 01       	movw	r6, r8
    809c:	45 01       	movw	r8, r10
    809e:	8c 01       	movw	r16, r24
    80a0:	ff 24       	eor	r15, r15
	return producto;
}

void sumasigna (COORD3D *punto, COORD3D vector) {
  (*punto).x += vector.x;
  (*punto).y += vector.y;
    80a2:	5a 01       	movw	r10, r20
    80a4:	6b 01       	movw	r12, r22
    80a6:	d7 fa       	bst	r13, 7
    80a8:	d0 94       	com	r13
    80aa:	d7 f8       	bld	r13, 7
    80ac:	d0 94       	com	r13
void edit_position (COORD3D *pos_ref, float altura_inc, float ancho_inc, float largo_inc, float ancho_central_inc) {
	COORD3D vector;
	for (byte pata=0; pata<6; pata++) {
		vector.z = (1-(pata%3))*largo_inc;
		vector.y = -altura_inc;
		if (pata==1 || pata==4) {vector.x = ancho_central_inc*bin2sign(pata>2);} else {vector.x = ancho_inc*bin2sign(pata>2);}
    80ae:	81 e0       	ldi	r24, 0x01	; 1
    80b0:	f8 16       	cp	r15, r24
    80b2:	19 f0       	breq	.+6      	; 0x80ba <_Z13edit_positionP7COORD3Dffff+0x58>
    80b4:	94 e0       	ldi	r25, 0x04	; 4
    80b6:	f9 16       	cp	r15, r25
    80b8:	a9 f4       	brne	.+42     	; 0x80e4 <_Z13edit_positionP7COORD3Dffff+0x82>
    80ba:	80 e0       	ldi	r24, 0x00	; 0
    80bc:	e2 e0       	ldi	r30, 0x02	; 2
    80be:	ef 15       	cp	r30, r15
    80c0:	08 f4       	brcc	.+2      	; 0x80c4 <_Z13edit_positionP7COORD3Dffff+0x62>
    80c2:	81 e0       	ldi	r24, 0x01	; 1
    80c4:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z8bin2signb>
    80c8:	99 27       	eor	r25, r25
    80ca:	87 fd       	sbrc	r24, 7
    80cc:	90 95       	com	r25
    80ce:	a9 2f       	mov	r26, r25
    80d0:	b9 2f       	mov	r27, r25
    80d2:	bc 01       	movw	r22, r24
    80d4:	cd 01       	movw	r24, r26
    80d6:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    80da:	9b 01       	movw	r18, r22
    80dc:	ac 01       	movw	r20, r24
    80de:	c4 01       	movw	r24, r8
    80e0:	b3 01       	movw	r22, r6
    80e2:	16 c0       	rjmp	.+44     	; 0x8110 <_Z13edit_positionP7COORD3Dffff+0xae>
    80e4:	80 e0       	ldi	r24, 0x00	; 0
    80e6:	f2 e0       	ldi	r31, 0x02	; 2
    80e8:	ff 15       	cp	r31, r15
    80ea:	08 f4       	brcc	.+2      	; 0x80ee <_Z13edit_positionP7COORD3Dffff+0x8c>
    80ec:	81 e0       	ldi	r24, 0x01	; 1
    80ee:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z8bin2signb>
    80f2:	99 27       	eor	r25, r25
    80f4:	87 fd       	sbrc	r24, 7
    80f6:	90 95       	com	r25
    80f8:	a9 2f       	mov	r26, r25
    80fa:	b9 2f       	mov	r27, r25
    80fc:	bc 01       	movw	r22, r24
    80fe:	cd 01       	movw	r24, r26
    8100:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    8104:	9b 01       	movw	r18, r22
    8106:	ac 01       	movw	r20, r24
    8108:	69 81       	ldd	r22, Y+1	; 0x01
    810a:	7a 81       	ldd	r23, Y+2	; 0x02
    810c:	8b 81       	ldd	r24, Y+3	; 0x03
    810e:	9c 81       	ldd	r25, Y+4	; 0x04
    8110:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    8114:	9b 01       	movw	r18, r22
    8116:	ac 01       	movw	r20, r24
	producto.z = vector1.x*vector2.y - vector1.y*vector2.x;
	return producto;
}

void sumasigna (COORD3D *punto, COORD3D vector) {
  (*punto).x += vector.x;
    8118:	f8 01       	movw	r30, r16
    811a:	60 81       	ld	r22, Z
    811c:	71 81       	ldd	r23, Z+1	; 0x01
    811e:	82 81       	ldd	r24, Z+2	; 0x02
    8120:	93 81       	ldd	r25, Z+3	; 0x03
    8122:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    8126:	f8 01       	movw	r30, r16
    8128:	60 83       	st	Z, r22
    812a:	71 83       	std	Z+1, r23	; 0x01
    812c:	82 83       	std	Z+2, r24	; 0x02
    812e:	93 83       	std	Z+3, r25	; 0x03
  (*punto).y += vector.y;
    8130:	64 81       	ldd	r22, Z+4	; 0x04
    8132:	75 81       	ldd	r23, Z+5	; 0x05
    8134:	86 81       	ldd	r24, Z+6	; 0x06
    8136:	97 81       	ldd	r25, Z+7	; 0x07
    8138:	a6 01       	movw	r20, r12
    813a:	95 01       	movw	r18, r10
    813c:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    8140:	f8 01       	movw	r30, r16
    8142:	64 83       	std	Z+4, r22	; 0x04
    8144:	75 83       	std	Z+5, r23	; 0x05
    8146:	86 83       	std	Z+6, r24	; 0x06
    8148:	97 83       	std	Z+7, r25	; 0x07
  (*punto).z += vector.z; 
    814a:	8f 2d       	mov	r24, r15
    814c:	63 e0       	ldi	r22, 0x03	; 3
    814e:	0e 94 e5 7e 	call	0xfdca	; 0xfdca <__udivmodqi4>
    8152:	61 e0       	ldi	r22, 0x01	; 1
    8154:	70 e0       	ldi	r23, 0x00	; 0
    8156:	69 1b       	sub	r22, r25
    8158:	71 09       	sbc	r23, r1
    815a:	88 27       	eor	r24, r24
    815c:	77 fd       	sbrc	r23, 7
    815e:	80 95       	com	r24
    8160:	98 2f       	mov	r25, r24
    8162:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    8166:	a2 01       	movw	r20, r4
    8168:	91 01       	movw	r18, r2
    816a:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    816e:	9b 01       	movw	r18, r22
    8170:	ac 01       	movw	r20, r24
    8172:	f8 01       	movw	r30, r16
    8174:	60 85       	ldd	r22, Z+8	; 0x08
    8176:	71 85       	ldd	r23, Z+9	; 0x09
    8178:	82 85       	ldd	r24, Z+10	; 0x0a
    817a:	93 85       	ldd	r25, Z+11	; 0x0b
    817c:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    8180:	f8 01       	movw	r30, r16
    8182:	60 87       	std	Z+8, r22	; 0x08
    8184:	71 87       	std	Z+9, r23	; 0x09
    8186:	82 87       	std	Z+10, r24	; 0x0a
    8188:	93 87       	std	Z+11, r25	; 0x0b
}

// actualiza la posición hexagonal de referencia
void edit_position (COORD3D *pos_ref, float altura_inc, float ancho_inc, float largo_inc, float ancho_central_inc) {
	COORD3D vector;
	for (byte pata=0; pata<6; pata++) {
    818a:	f3 94       	inc	r15
    818c:	04 5f       	subi	r16, 0xF4	; 244
    818e:	1f 4f       	sbci	r17, 0xFF	; 255
    8190:	f6 e0       	ldi	r31, 0x06	; 6
    8192:	ff 16       	cp	r15, r31
    8194:	09 f0       	breq	.+2      	; 0x8198 <_Z13edit_positionP7COORD3Dffff+0x136>
    8196:	8b cf       	rjmp	.-234    	; 0x80ae <_Z13edit_positionP7COORD3Dffff+0x4c>
		vector.z = (1-(pata%3))*largo_inc;
		vector.y = -altura_inc;
		if (pata==1 || pata==4) {vector.x = ancho_central_inc*bin2sign(pata>2);} else {vector.x = ancho_inc*bin2sign(pata>2);}
		sumasigna (&pos_ref[pata], vector);
	} 
    8198:	0f 90       	pop	r0
    819a:	0f 90       	pop	r0
    819c:	0f 90       	pop	r0
    819e:	0f 90       	pop	r0
    81a0:	cf 91       	pop	r28
    81a2:	df 91       	pop	r29
    81a4:	1f 91       	pop	r17
    81a6:	0f 91       	pop	r16
    81a8:	ff 90       	pop	r15
    81aa:	ef 90       	pop	r14
    81ac:	df 90       	pop	r13
    81ae:	cf 90       	pop	r12
    81b0:	bf 90       	pop	r11
    81b2:	af 90       	pop	r10
    81b4:	9f 90       	pop	r9
    81b6:	8f 90       	pop	r8
    81b8:	7f 90       	pop	r7
    81ba:	6f 90       	pop	r6
    81bc:	5f 90       	pop	r5
    81be:	4f 90       	pop	r4
    81c0:	3f 90       	pop	r3
    81c2:	2f 90       	pop	r2
    81c4:	08 95       	ret

000081c6 <_Z9getOffseth>:
/*********************************************************
** rutinas vinculadas a la geometría concreta del robot **
*********************************************************/

// devuelve el origen de la pata con respecto al centro del robot
COORD2D getOffset (byte pata) {
    81c6:	1f 93       	push	r17
    81c8:	df 93       	push	r29
    81ca:	cf 93       	push	r28
    81cc:	cd b7       	in	r28, 0x3d	; 61
    81ce:	de b7       	in	r29, 0x3e	; 62
    81d0:	28 97       	sbiw	r28, 0x08	; 8
    81d2:	0f b6       	in	r0, 0x3f	; 63
    81d4:	f8 94       	cli
    81d6:	de bf       	out	0x3e, r29	; 62
    81d8:	0f be       	out	0x3f, r0	; 63
    81da:	cd bf       	out	0x3d, r28	; 61
    81dc:	18 2f       	mov	r17, r24
  return (COORD2D) {ORIGEN*bin2sign(pata>2), (1-(pata%3))*SEPARA};      // nota: las patas de la izquierda son de x negativo
    81de:	80 e0       	ldi	r24, 0x00	; 0
    81e0:	13 30       	cpi	r17, 0x03	; 3
    81e2:	08 f0       	brcs	.+2      	; 0x81e6 <_Z9getOffseth+0x20>
    81e4:	81 e0       	ldi	r24, 0x01	; 1
    81e6:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z8bin2signb>
    81ea:	99 27       	eor	r25, r25
    81ec:	87 fd       	sbrc	r24, 7
    81ee:	90 95       	com	r25
    81f0:	a9 2f       	mov	r26, r25
    81f2:	b9 2f       	mov	r27, r25
    81f4:	bc 01       	movw	r22, r24
    81f6:	cd 01       	movw	r24, r26
    81f8:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    81fc:	23 e3       	ldi	r18, 0x33	; 51
    81fe:	33 e3       	ldi	r19, 0x33	; 51
    8200:	43 e9       	ldi	r20, 0x93	; 147
    8202:	50 e4       	ldi	r21, 0x40	; 64
    8204:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    8208:	69 83       	std	Y+1, r22	; 0x01
    820a:	7a 83       	std	Y+2, r23	; 0x02
    820c:	8b 83       	std	Y+3, r24	; 0x03
    820e:	9c 83       	std	Y+4, r25	; 0x04
    8210:	81 2f       	mov	r24, r17
    8212:	63 e0       	ldi	r22, 0x03	; 3
    8214:	0e 94 e5 7e 	call	0xfdca	; 0xfdca <__udivmodqi4>
    8218:	21 e0       	ldi	r18, 0x01	; 1
    821a:	30 e0       	ldi	r19, 0x00	; 0
    821c:	29 1b       	sub	r18, r25
    821e:	31 09       	sbc	r19, r1
    8220:	44 27       	eor	r20, r20
    8222:	37 fd       	sbrc	r19, 7
    8224:	40 95       	com	r20
    8226:	54 2f       	mov	r21, r20
    8228:	ca 01       	movw	r24, r20
    822a:	b9 01       	movw	r22, r18
    822c:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    8230:	20 e0       	ldi	r18, 0x00	; 0
    8232:	30 e0       	ldi	r19, 0x00	; 0
    8234:	4c e0       	ldi	r20, 0x0C	; 12
    8236:	51 e4       	ldi	r21, 0x41	; 65
    8238:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    823c:	6d 83       	std	Y+5, r22	; 0x05
    823e:	7e 83       	std	Y+6, r23	; 0x06
    8240:	8f 83       	std	Y+7, r24	; 0x07
    8242:	98 87       	std	Y+8, r25	; 0x08
    8244:	29 81       	ldd	r18, Y+1	; 0x01
    8246:	3a 81       	ldd	r19, Y+2	; 0x02
    8248:	4b 81       	ldd	r20, Y+3	; 0x03
    824a:	5c 81       	ldd	r21, Y+4	; 0x04
    824c:	6d 81       	ldd	r22, Y+5	; 0x05
    824e:	7e 81       	ldd	r23, Y+6	; 0x06
}
    8250:	8f 81       	ldd	r24, Y+7	; 0x07
    8252:	98 85       	ldd	r25, Y+8	; 0x08
    8254:	28 96       	adiw	r28, 0x08	; 8
    8256:	0f b6       	in	r0, 0x3f	; 63
    8258:	f8 94       	cli
    825a:	de bf       	out	0x3e, r29	; 62
    825c:	0f be       	out	0x3f, r0	; 63
    825e:	cd bf       	out	0x3d, r28	; 61
    8260:	cf 91       	pop	r28
    8262:	df 91       	pop	r29
    8264:	1f 91       	pop	r17
    8266:	08 95       	ret

00008268 <_Z6rotateP7COORD3DS_S0_>:
  }  
  return posicion;
}

// rota una posición con un centro y una matriz de rotacion
POSICION rotate (COORD3D *pos_ref, COORD3D centro, COORD3D *matrix) {
    8268:	2f 92       	push	r2
    826a:	6f 92       	push	r6
    826c:	7f 92       	push	r7
    826e:	8f 92       	push	r8
    8270:	9f 92       	push	r9
    8272:	af 92       	push	r10
    8274:	bf 92       	push	r11
    8276:	cf 92       	push	r12
    8278:	df 92       	push	r13
    827a:	ef 92       	push	r14
    827c:	ff 92       	push	r15
    827e:	0f 93       	push	r16
    8280:	1f 93       	push	r17
    8282:	df 93       	push	r29
    8284:	cf 93       	push	r28
    8286:	cd b7       	in	r28, 0x3d	; 61
    8288:	de b7       	in	r29, 0x3e	; 62
    828a:	cc 54       	subi	r28, 0x4C	; 76
    828c:	d0 40       	sbci	r29, 0x00	; 0
    828e:	0f b6       	in	r0, 0x3f	; 63
    8290:	f8 94       	cli
    8292:	de bf       	out	0x3e, r29	; 62
    8294:	0f be       	out	0x3f, r0	; 63
    8296:	cd bf       	out	0x3d, r28	; 61
    8298:	2c 96       	adiw	r28, 0x0c	; 12
    829a:	8f af       	std	Y+63, r24	; 0x3f
    829c:	2c 97       	sbiw	r28, 0x0c	; 12
    829e:	2d 96       	adiw	r28, 0x0d	; 13
    82a0:	9f af       	std	Y+63, r25	; 0x3f
    82a2:	2d 97       	sbiw	r28, 0x0d	; 13
    82a4:	a9 a2       	std	Y+33, r10	; 0x21
    82a6:	ba a2       	std	Y+34, r11	; 0x22
    82a8:	cb a2       	std	Y+35, r12	; 0x23
    82aa:	dc a2       	std	Y+36, r13	; 0x24
    82ac:	ed a2       	std	Y+37, r14	; 0x25
    82ae:	fe a2       	std	Y+38, r15	; 0x26
    82b0:	0f a3       	std	Y+39, r16	; 0x27
    82b2:	18 a7       	std	Y+40, r17	; 0x28
    82b4:	29 a7       	std	Y+41, r18	; 0x29
    82b6:	3a a7       	std	Y+42, r19	; 0x2a
    82b8:	4b a7       	std	Y+43, r20	; 0x2b
    82ba:	5c a7       	std	Y+44, r21	; 0x2c
    82bc:	2b 96       	adiw	r28, 0x0b	; 11
    82be:	9f ae       	std	Y+63, r9	; 0x3f
    82c0:	8e ae       	std	Y+62, r8	; 0x3e
    82c2:	2b 97       	sbiw	r28, 0x0b	; 11
    82c4:	89 a5       	ldd	r24, Y+41	; 0x29
    82c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    82c8:	ab a5       	ldd	r26, Y+43	; 0x2b
    82ca:	bc a5       	ldd	r27, Y+44	; 0x2c
    82cc:	25 96       	adiw	r28, 0x05	; 5
    82ce:	8c af       	std	Y+60, r24	; 0x3c
    82d0:	9d af       	std	Y+61, r25	; 0x3d
    82d2:	ae af       	std	Y+62, r26	; 0x3e
    82d4:	bf af       	std	Y+63, r27	; 0x3f
    82d6:	25 97       	sbiw	r28, 0x05	; 5
    82d8:	8d a1       	ldd	r24, Y+37	; 0x25
    82da:	9e a1       	ldd	r25, Y+38	; 0x26
    82dc:	af a1       	ldd	r26, Y+39	; 0x27
    82de:	b8 a5       	ldd	r27, Y+40	; 0x28
    82e0:	21 96       	adiw	r28, 0x01	; 1
    82e2:	8c af       	std	Y+60, r24	; 0x3c
    82e4:	9d af       	std	Y+61, r25	; 0x3d
    82e6:	ae af       	std	Y+62, r26	; 0x3e
    82e8:	bf af       	std	Y+63, r27	; 0x3f
    82ea:	21 97       	sbiw	r28, 0x01	; 1
    82ec:	89 a1       	ldd	r24, Y+33	; 0x21
    82ee:	9a a1       	ldd	r25, Y+34	; 0x22
    82f0:	ab a1       	ldd	r26, Y+35	; 0x23
    82f2:	bc a1       	ldd	r27, Y+36	; 0x24
    82f4:	89 af       	std	Y+57, r24	; 0x39
    82f6:	9a af       	std	Y+58, r25	; 0x3a
    82f8:	ab af       	std	Y+59, r26	; 0x3b
    82fa:	bc af       	std	Y+60, r27	; 0x3c
    82fc:	78 af       	std	Y+56, r23	; 0x38
    82fe:	6f ab       	std	Y+55, r22	; 0x37
    8300:	2c 96       	adiw	r28, 0x0c	; 12
    8302:	2f ad       	ldd	r18, Y+63	; 0x3f
    8304:	2c 97       	sbiw	r28, 0x0c	; 12
    8306:	2d 96       	adiw	r28, 0x0d	; 13
    8308:	3f ad       	ldd	r19, Y+63	; 0x3f
    830a:	2d 97       	sbiw	r28, 0x0d	; 13
    830c:	c9 01       	movw	r24, r18
    830e:	9e ab       	std	Y+54, r25	; 0x36
    8310:	8d ab       	std	Y+53, r24	; 0x35
    8312:	22 24       	eor	r2, r2
  POSICION posicion;
  for (byte pata=0; pata<6; pata++) {
    COORD3D O = xz2xyz (getOffset(pata));
    8314:	82 2d       	mov	r24, r2
    8316:	0e 94 e3 40 	call	0x81c6	; 0x81c6 <_Z9getOffseth>
    831a:	2d a7       	std	Y+45, r18	; 0x2d
    831c:	3e a7       	std	Y+46, r19	; 0x2e
    831e:	4f a7       	std	Y+47, r20	; 0x2f
    8320:	58 ab       	std	Y+48, r21	; 0x30
    8322:	69 ab       	std	Y+49, r22	; 0x31
    8324:	7a ab       	std	Y+50, r23	; 0x32
    8326:	8b ab       	std	Y+51, r24	; 0x33
    8328:	9c ab       	std	Y+52, r25	; 0x34
    832a:	de 01       	movw	r26, r28
    832c:	11 96       	adiw	r26, 0x01	; 1
    832e:	fe 01       	movw	r30, r28
    8330:	bd 96       	adiw	r30, 0x2d	; 45
    8332:	88 e0       	ldi	r24, 0x08	; 8
    8334:	01 90       	ld	r0, Z+
    8336:	0d 92       	st	X+, r0
    8338:	81 50       	subi	r24, 0x01	; 1
    833a:	e1 f7       	brne	.-8      	; 0x8334 <_Z6rotateP7COORD3DS_S0_+0xcc>
    833c:	69 80       	ldd	r6, Y+1	; 0x01
    833e:	7a 80       	ldd	r7, Y+2	; 0x02
    8340:	8b 80       	ldd	r8, Y+3	; 0x03
    8342:	9c 80       	ldd	r9, Y+4	; 0x04
    8344:	8d 81       	ldd	r24, Y+5	; 0x05
    8346:	9e 81       	ldd	r25, Y+6	; 0x06
    8348:	af 81       	ldd	r26, Y+7	; 0x07
    834a:	b8 85       	ldd	r27, Y+8	; 0x08
    834c:	29 96       	adiw	r28, 0x09	; 9
    834e:	8c af       	std	Y+60, r24	; 0x3c
    8350:	9d af       	std	Y+61, r25	; 0x3d
    8352:	ae af       	std	Y+62, r26	; 0x3e
    8354:	bf af       	std	Y+63, r27	; 0x3f
    8356:	29 97       	sbiw	r28, 0x09	; 9
COORD2D suma (COORD2D punto1, COORD2D punto2) {
  return (COORD2D) {punto1.x + punto2.x, punto1.z + punto2.z}; 
}

COORD3D resta (COORD3D punto1, COORD3D punto2) {
  return (COORD3D) {punto1.x - punto2.x, punto1.y - punto2.y, punto1.z - punto2.z}; 
    8358:	af a9       	ldd	r26, Y+55	; 0x37
    835a:	b8 ad       	ldd	r27, Y+56	; 0x38
    835c:	14 96       	adiw	r26, 0x04	; 4
    835e:	6d 91       	ld	r22, X+
    8360:	7d 91       	ld	r23, X+
    8362:	8d 91       	ld	r24, X+
    8364:	9c 91       	ld	r25, X
    8366:	17 97       	sbiw	r26, 0x07	; 7
    8368:	20 e0       	ldi	r18, 0x00	; 0
    836a:	30 e0       	ldi	r19, 0x00	; 0
    836c:	40 e0       	ldi	r20, 0x00	; 0
    836e:	50 e0       	ldi	r21, 0x00	; 0
    8370:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    8374:	21 96       	adiw	r28, 0x01	; 1
    8376:	2c ad       	ldd	r18, Y+60	; 0x3c
    8378:	3d ad       	ldd	r19, Y+61	; 0x3d
    837a:	4e ad       	ldd	r20, Y+62	; 0x3e
    837c:	5f ad       	ldd	r21, Y+63	; 0x3f
    837e:	21 97       	sbiw	r28, 0x01	; 1
    8380:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    8384:	7b 01       	movw	r14, r22
    8386:	8c 01       	movw	r16, r24
    8388:	29 96       	adiw	r28, 0x09	; 9
    838a:	6c ad       	ldd	r22, Y+60	; 0x3c
    838c:	7d ad       	ldd	r23, Y+61	; 0x3d
    838e:	8e ad       	ldd	r24, Y+62	; 0x3e
    8390:	9f ad       	ldd	r25, Y+63	; 0x3f
    8392:	29 97       	sbiw	r28, 0x09	; 9
    8394:	ef a9       	ldd	r30, Y+55	; 0x37
    8396:	f8 ad       	ldd	r31, Y+56	; 0x38
    8398:	20 85       	ldd	r18, Z+8	; 0x08
    839a:	31 85       	ldd	r19, Z+9	; 0x09
    839c:	42 85       	ldd	r20, Z+10	; 0x0a
    839e:	53 85       	ldd	r21, Z+11	; 0x0b
    83a0:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    83a4:	25 96       	adiw	r28, 0x05	; 5
    83a6:	2c ad       	ldd	r18, Y+60	; 0x3c
    83a8:	3d ad       	ldd	r19, Y+61	; 0x3d
    83aa:	4e ad       	ldd	r20, Y+62	; 0x3e
    83ac:	5f ad       	ldd	r21, Y+63	; 0x3f
    83ae:	25 97       	sbiw	r28, 0x05	; 5
    83b0:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    83b4:	5b 01       	movw	r10, r22
    83b6:	6c 01       	movw	r12, r24
    83b8:	c4 01       	movw	r24, r8
    83ba:	b3 01       	movw	r22, r6
    83bc:	af a9       	ldd	r26, Y+55	; 0x37
    83be:	b8 ad       	ldd	r27, Y+56	; 0x38
    83c0:	2d 91       	ld	r18, X+
    83c2:	3d 91       	ld	r19, X+
    83c4:	4d 91       	ld	r20, X+
    83c6:	5c 91       	ld	r21, X
    83c8:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    83cc:	29 ad       	ldd	r18, Y+57	; 0x39
    83ce:	3a ad       	ldd	r19, Y+58	; 0x3a
    83d0:	4b ad       	ldd	r20, Y+59	; 0x3b
    83d2:	5c ad       	ldd	r21, Y+60	; 0x3c
    83d4:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    83d8:	69 87       	std	Y+9, r22	; 0x09
    83da:	7a 87       	std	Y+10, r23	; 0x0a
    83dc:	8b 87       	std	Y+11, r24	; 0x0b
    83de:	9c 87       	std	Y+12, r25	; 0x0c
    83e0:	c7 01       	movw	r24, r14
    83e2:	d8 01       	movw	r26, r16
    83e4:	8d 87       	std	Y+13, r24	; 0x0d
    83e6:	9e 87       	std	Y+14, r25	; 0x0e
    83e8:	af 87       	std	Y+15, r26	; 0x0f
    83ea:	b8 8b       	std	Y+16, r27	; 0x10
    83ec:	c5 01       	movw	r24, r10
    83ee:	d6 01       	movw	r26, r12
    83f0:	89 8b       	std	Y+17, r24	; 0x11
    83f2:	9a 8b       	std	Y+18, r25	; 0x12
    83f4:	ab 8b       	std	Y+19, r26	; 0x13
    83f6:	bc 8b       	std	Y+20, r27	; 0x14
// rota una posición con un centro y una matriz de rotacion
POSICION rotate (COORD3D *pos_ref, COORD3D centro, COORD3D *matrix) {
  POSICION posicion;
  for (byte pata=0; pata<6; pata++) {
    COORD3D O = xz2xyz (getOffset(pata));
    posicion.patas[pata] = resta (suma (applyMatrix (resta (suma (pos_ref[pata], O), centro), matrix), centro), O);
    83f8:	ce 01       	movw	r24, r28
    83fa:	45 96       	adiw	r24, 0x15	; 21
    83fc:	c9 84       	ldd	r12, Y+9	; 0x09
    83fe:	da 84       	ldd	r13, Y+10	; 0x0a
    8400:	eb 84       	ldd	r14, Y+11	; 0x0b
    8402:	fc 84       	ldd	r15, Y+12	; 0x0c
    8404:	0d 85       	ldd	r16, Y+13	; 0x0d
    8406:	1e 85       	ldd	r17, Y+14	; 0x0e
    8408:	2f 85       	ldd	r18, Y+15	; 0x0f
    840a:	38 89       	ldd	r19, Y+16	; 0x10
    840c:	49 89       	ldd	r20, Y+17	; 0x11
    840e:	5a 89       	ldd	r21, Y+18	; 0x12
    8410:	6b 89       	ldd	r22, Y+19	; 0x13
    8412:	7c 89       	ldd	r23, Y+20	; 0x14
    8414:	2b 96       	adiw	r28, 0x0b	; 11
    8416:	ae ac       	ldd	r10, Y+62	; 0x3e
    8418:	bf ac       	ldd	r11, Y+63	; 0x3f
    841a:	2b 97       	sbiw	r28, 0x0b	; 11
    841c:	0e 94 27 3d 	call	0x7a4e	; 0x7a4e <_Z11applyMatrix7COORD3DPS_>
float bezier (float p0, float p1, float p2, float t) {
  return sq(1-t)*p0 + 2*t*(1-t)*p1 + sq(t)*p2;
}

COORD3D suma (COORD3D punto1, COORD3D punto2) {
  return (COORD3D) {punto1.x + punto2.x, punto1.y + punto2.y, punto1.z + punto2.z}; 
    8420:	21 96       	adiw	r28, 0x01	; 1
    8422:	6c ad       	ldd	r22, Y+60	; 0x3c
    8424:	7d ad       	ldd	r23, Y+61	; 0x3d
    8426:	8e ad       	ldd	r24, Y+62	; 0x3e
    8428:	9f ad       	ldd	r25, Y+63	; 0x3f
    842a:	21 97       	sbiw	r28, 0x01	; 1
    842c:	29 8d       	ldd	r18, Y+25	; 0x19
    842e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    8430:	4b 8d       	ldd	r20, Y+27	; 0x1b
    8432:	5c 8d       	ldd	r21, Y+28	; 0x1c
    8434:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    8438:	7b 01       	movw	r14, r22
    843a:	8c 01       	movw	r16, r24
COORD2D suma (COORD2D punto1, COORD2D punto2) {
  return (COORD2D) {punto1.x + punto2.x, punto1.z + punto2.z}; 
}

COORD3D resta (COORD3D punto1, COORD3D punto2) {
  return (COORD3D) {punto1.x - punto2.x, punto1.y - punto2.y, punto1.z - punto2.z}; 
    843c:	69 ad       	ldd	r22, Y+57	; 0x39
    843e:	7a ad       	ldd	r23, Y+58	; 0x3a
    8440:	8b ad       	ldd	r24, Y+59	; 0x3b
    8442:	9c ad       	ldd	r25, Y+60	; 0x3c
    8444:	2d 89       	ldd	r18, Y+21	; 0x15
    8446:	3e 89       	ldd	r19, Y+22	; 0x16
    8448:	4f 89       	ldd	r20, Y+23	; 0x17
    844a:	58 8d       	ldd	r21, Y+24	; 0x18
    844c:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    8450:	a4 01       	movw	r20, r8
    8452:	93 01       	movw	r18, r6
    8454:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    8458:	5b 01       	movw	r10, r22
    845a:	6c 01       	movw	r12, r24
// rota una posición con un centro y una matriz de rotacion
POSICION rotate (COORD3D *pos_ref, COORD3D centro, COORD3D *matrix) {
  POSICION posicion;
  for (byte pata=0; pata<6; pata++) {
    COORD3D O = xz2xyz (getOffset(pata));
    posicion.patas[pata] = resta (suma (applyMatrix (resta (suma (pos_ref[pata], O), centro), matrix), centro), O);
    845c:	25 96       	adiw	r28, 0x05	; 5
    845e:	6c ad       	ldd	r22, Y+60	; 0x3c
    8460:	7d ad       	ldd	r23, Y+61	; 0x3d
    8462:	8e ad       	ldd	r24, Y+62	; 0x3e
    8464:	9f ad       	ldd	r25, Y+63	; 0x3f
    8466:	25 97       	sbiw	r28, 0x05	; 5
    8468:	2d 8d       	ldd	r18, Y+29	; 0x1d
    846a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    846c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    846e:	58 a1       	ldd	r21, Y+32	; 0x20
    8470:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    8474:	29 96       	adiw	r28, 0x09	; 9
    8476:	2c ad       	ldd	r18, Y+60	; 0x3c
    8478:	3d ad       	ldd	r19, Y+61	; 0x3d
    847a:	4e ad       	ldd	r20, Y+62	; 0x3e
    847c:	5f ad       	ldd	r21, Y+63	; 0x3f
    847e:	29 97       	sbiw	r28, 0x09	; 9
    8480:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    8484:	ed a9       	ldd	r30, Y+53	; 0x35
    8486:	fe a9       	ldd	r31, Y+54	; 0x36
    8488:	60 87       	std	Z+8, r22	; 0x08
    848a:	71 87       	std	Z+9, r23	; 0x09
    848c:	82 87       	std	Z+10, r24	; 0x0a
    848e:	93 87       	std	Z+11, r25	; 0x0b
    8490:	c7 01       	movw	r24, r14
    8492:	d8 01       	movw	r26, r16
    8494:	84 83       	std	Z+4, r24	; 0x04
    8496:	95 83       	std	Z+5, r25	; 0x05
    8498:	a6 83       	std	Z+6, r26	; 0x06
    849a:	b7 83       	std	Z+7, r27	; 0x07
    849c:	c5 01       	movw	r24, r10
    849e:	d6 01       	movw	r26, r12
    84a0:	80 83       	st	Z, r24
    84a2:	91 83       	std	Z+1, r25	; 0x01
    84a4:	a2 83       	std	Z+2, r26	; 0x02
    84a6:	b3 83       	std	Z+3, r27	; 0x03
}

// rota una posición con un centro y una matriz de rotacion
POSICION rotate (COORD3D *pos_ref, COORD3D centro, COORD3D *matrix) {
  POSICION posicion;
  for (byte pata=0; pata<6; pata++) {
    84a8:	23 94       	inc	r2
    84aa:	8f a9       	ldd	r24, Y+55	; 0x37
    84ac:	98 ad       	ldd	r25, Y+56	; 0x38
    84ae:	0c 96       	adiw	r24, 0x0c	; 12
    84b0:	98 af       	std	Y+56, r25	; 0x38
    84b2:	8f ab       	std	Y+55, r24	; 0x37
    84b4:	3c 96       	adiw	r30, 0x0c	; 12
    84b6:	fe ab       	std	Y+54, r31	; 0x36
    84b8:	ed ab       	std	Y+53, r30	; 0x35
    84ba:	96 e0       	ldi	r25, 0x06	; 6
    84bc:	29 16       	cp	r2, r25
    84be:	09 f0       	breq	.+2      	; 0x84c2 <_Z6rotateP7COORD3DS_S0_+0x25a>
    84c0:	29 cf       	rjmp	.-430    	; 0x8314 <_Z6rotateP7COORD3DS_S0_+0xac>
    COORD3D O = xz2xyz (getOffset(pata));
    posicion.patas[pata] = resta (suma (applyMatrix (resta (suma (pos_ref[pata], O), centro), matrix), centro), O);
  }
  return posicion;
} 
    84c2:	2c 96       	adiw	r28, 0x0c	; 12
    84c4:	8f ad       	ldd	r24, Y+63	; 0x3f
    84c6:	2c 97       	sbiw	r28, 0x0c	; 12
    84c8:	2d 96       	adiw	r28, 0x0d	; 13
    84ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    84cc:	2d 97       	sbiw	r28, 0x0d	; 13
    84ce:	c4 5b       	subi	r28, 0xB4	; 180
    84d0:	df 4f       	sbci	r29, 0xFF	; 255
    84d2:	0f b6       	in	r0, 0x3f	; 63
    84d4:	f8 94       	cli
    84d6:	de bf       	out	0x3e, r29	; 62
    84d8:	0f be       	out	0x3f, r0	; 63
    84da:	cd bf       	out	0x3d, r28	; 61
    84dc:	cf 91       	pop	r28
    84de:	df 91       	pop	r29
    84e0:	1f 91       	pop	r17
    84e2:	0f 91       	pop	r16
    84e4:	ff 90       	pop	r15
    84e6:	ef 90       	pop	r14
    84e8:	df 90       	pop	r13
    84ea:	cf 90       	pop	r12
    84ec:	bf 90       	pop	r11
    84ee:	af 90       	pop	r10
    84f0:	9f 90       	pop	r9
    84f2:	8f 90       	pop	r8
    84f4:	7f 90       	pop	r7
    84f6:	6f 90       	pop	r6
    84f8:	2f 90       	pop	r2
    84fa:	08 95       	ret

000084fc <_Z7abs2rel7COORD3Dh>:
		P[pata] = rel2abs (P[pata], pata);
	}
}

// transforma coordenadas absolutas (del robot) en relativas (de cada pata)
COORD3D abs2rel (COORD3D P, byte pata) {
    84fc:	4f 92       	push	r4
    84fe:	5f 92       	push	r5
    8500:	6f 92       	push	r6
    8502:	7f 92       	push	r7
    8504:	8f 92       	push	r8
    8506:	9f 92       	push	r9
    8508:	af 92       	push	r10
    850a:	bf 92       	push	r11
    850c:	cf 92       	push	r12
    850e:	df 92       	push	r13
    8510:	ef 92       	push	r14
    8512:	ff 92       	push	r15
    8514:	0f 93       	push	r16
    8516:	1f 93       	push	r17
    8518:	df 93       	push	r29
    851a:	cf 93       	push	r28
    851c:	cd b7       	in	r28, 0x3d	; 61
    851e:	de b7       	in	r29, 0x3e	; 62
    8520:	6c 97       	sbiw	r28, 0x1c	; 28
    8522:	0f b6       	in	r0, 0x3f	; 63
    8524:	f8 94       	cli
    8526:	de bf       	out	0x3e, r29	; 62
    8528:	0f be       	out	0x3f, r0	; 63
    852a:	cd bf       	out	0x3d, r28	; 61
    852c:	4c 01       	movw	r8, r24
    852e:	c9 86       	std	Y+9, r12	; 0x09
    8530:	da 86       	std	Y+10, r13	; 0x0a
    8532:	eb 86       	std	Y+11, r14	; 0x0b
    8534:	fc 86       	std	Y+12, r15	; 0x0c
    8536:	0d 87       	std	Y+13, r16	; 0x0d
    8538:	1e 87       	std	Y+14, r17	; 0x0e
    853a:	2f 87       	std	Y+15, r18	; 0x0f
    853c:	38 8b       	std	Y+16, r19	; 0x10
    853e:	49 8b       	std	Y+17, r20	; 0x11
    8540:	5a 8b       	std	Y+18, r21	; 0x12
    8542:	6b 8b       	std	Y+19, r22	; 0x13
    8544:	7c 8b       	std	Y+20, r23	; 0x14
    8546:	8a 2d       	mov	r24, r10
    8548:	e9 88       	ldd	r14, Y+17	; 0x11
    854a:	fa 88       	ldd	r15, Y+18	; 0x12
    854c:	0b 89       	ldd	r16, Y+19	; 0x13
    854e:	1c 89       	ldd	r17, Y+20	; 0x14
    8550:	4d 84       	ldd	r4, Y+13	; 0x0d
    8552:	5e 84       	ldd	r5, Y+14	; 0x0e
    8554:	6f 84       	ldd	r6, Y+15	; 0x0f
    8556:	78 88       	ldd	r7, Y+16	; 0x10
    8558:	a9 84       	ldd	r10, Y+9	; 0x09
    855a:	ba 84       	ldd	r11, Y+10	; 0x0a
    855c:	cb 84       	ldd	r12, Y+11	; 0x0b
    855e:	dc 84       	ldd	r13, Y+12	; 0x0c
	return resta (P, xz2xyz (getOffset (pata)));
    8560:	0e 94 e3 40 	call	0x81c6	; 0x81c6 <_Z9getOffseth>
    8564:	2d 8b       	std	Y+21, r18	; 0x15
    8566:	3e 8b       	std	Y+22, r19	; 0x16
    8568:	4f 8b       	std	Y+23, r20	; 0x17
    856a:	58 8f       	std	Y+24, r21	; 0x18
    856c:	69 8f       	std	Y+25, r22	; 0x19
    856e:	7a 8f       	std	Y+26, r23	; 0x1a
    8570:	8b 8f       	std	Y+27, r24	; 0x1b
    8572:	9c 8f       	std	Y+28, r25	; 0x1c
    8574:	de 01       	movw	r26, r28
    8576:	11 96       	adiw	r26, 0x01	; 1
    8578:	fe 01       	movw	r30, r28
    857a:	75 96       	adiw	r30, 0x15	; 21
    857c:	88 e0       	ldi	r24, 0x08	; 8
    857e:	01 90       	ld	r0, Z+
    8580:	0d 92       	st	X+, r0
    8582:	81 50       	subi	r24, 0x01	; 1
    8584:	e1 f7       	brne	.-8      	; 0x857e <_Z7abs2rel7COORD3Dh+0x82>
COORD2D suma (COORD2D punto1, COORD2D punto2) {
  return (COORD2D) {punto1.x + punto2.x, punto1.z + punto2.z}; 
}

COORD3D resta (COORD3D punto1, COORD3D punto2) {
  return (COORD3D) {punto1.x - punto2.x, punto1.y - punto2.y, punto1.z - punto2.z}; 
    8586:	c8 01       	movw	r24, r16
    8588:	b7 01       	movw	r22, r14
    858a:	2d 81       	ldd	r18, Y+5	; 0x05
    858c:	3e 81       	ldd	r19, Y+6	; 0x06
    858e:	4f 81       	ldd	r20, Y+7	; 0x07
    8590:	58 85       	ldd	r21, Y+8	; 0x08
    8592:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    8596:	7b 01       	movw	r14, r22
    8598:	8c 01       	movw	r16, r24
    859a:	c6 01       	movw	r24, r12
    859c:	b5 01       	movw	r22, r10
    859e:	29 81       	ldd	r18, Y+1	; 0x01
    85a0:	3a 81       	ldd	r19, Y+2	; 0x02
    85a2:	4b 81       	ldd	r20, Y+3	; 0x03
    85a4:	5c 81       	ldd	r21, Y+4	; 0x04
    85a6:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    85aa:	f4 01       	movw	r30, r8
    85ac:	60 83       	st	Z, r22
    85ae:	71 83       	std	Z+1, r23	; 0x01
    85b0:	82 83       	std	Z+2, r24	; 0x02
    85b2:	93 83       	std	Z+3, r25	; 0x03
    85b4:	44 82       	std	Z+4, r4	; 0x04
    85b6:	55 82       	std	Z+5, r5	; 0x05
    85b8:	66 82       	std	Z+6, r6	; 0x06
    85ba:	77 82       	std	Z+7, r7	; 0x07
    85bc:	c7 01       	movw	r24, r14
    85be:	d8 01       	movw	r26, r16
    85c0:	80 87       	std	Z+8, r24	; 0x08
    85c2:	91 87       	std	Z+9, r25	; 0x09
    85c4:	a2 87       	std	Z+10, r26	; 0x0a
    85c6:	b3 87       	std	Z+11, r27	; 0x0b
}

// transforma coordenadas absolutas (del robot) en relativas (de cada pata)
COORD3D abs2rel (COORD3D P, byte pata) {
	return resta (P, xz2xyz (getOffset (pata)));
}
    85c8:	c4 01       	movw	r24, r8
    85ca:	6c 96       	adiw	r28, 0x1c	; 28
    85cc:	0f b6       	in	r0, 0x3f	; 63
    85ce:	f8 94       	cli
    85d0:	de bf       	out	0x3e, r29	; 62
    85d2:	0f be       	out	0x3f, r0	; 63
    85d4:	cd bf       	out	0x3d, r28	; 61
    85d6:	cf 91       	pop	r28
    85d8:	df 91       	pop	r29
    85da:	1f 91       	pop	r17
    85dc:	0f 91       	pop	r16
    85de:	ff 90       	pop	r15
    85e0:	ef 90       	pop	r14
    85e2:	df 90       	pop	r13
    85e4:	cf 90       	pop	r12
    85e6:	bf 90       	pop	r11
    85e8:	af 90       	pop	r10
    85ea:	9f 90       	pop	r9
    85ec:	8f 90       	pop	r8
    85ee:	7f 90       	pop	r7
    85f0:	6f 90       	pop	r6
    85f2:	5f 90       	pop	r5
    85f4:	4f 90       	pop	r4
    85f6:	08 95       	ret

000085f8 <_Z7abs2relP7COORD3D>:
COORD2D abs2rel (COORD2D P, byte pata) {
	return resta (P, getOffset (pata));
}

// transforma toda una posición a coordenadas relativas
void abs2rel (COORD3D *P) {
    85f8:	6f 92       	push	r6
    85fa:	7f 92       	push	r7
    85fc:	8f 92       	push	r8
    85fe:	9f 92       	push	r9
    8600:	af 92       	push	r10
    8602:	bf 92       	push	r11
    8604:	cf 92       	push	r12
    8606:	df 92       	push	r13
    8608:	ef 92       	push	r14
    860a:	ff 92       	push	r15
    860c:	0f 93       	push	r16
    860e:	1f 93       	push	r17
    8610:	df 93       	push	r29
    8612:	cf 93       	push	r28
    8614:	cd b7       	in	r28, 0x3d	; 61
    8616:	de b7       	in	r29, 0x3e	; 62
    8618:	2c 97       	sbiw	r28, 0x0c	; 12
    861a:	0f b6       	in	r0, 0x3f	; 63
    861c:	f8 94       	cli
    861e:	de bf       	out	0x3e, r29	; 62
    8620:	0f be       	out	0x3f, r0	; 63
    8622:	cd bf       	out	0x3d, r28	; 61
    8624:	4c 01       	movw	r8, r24
    8626:	bb 24       	eor	r11, r11
	for (byte pata=0; pata<6; pata++) {
		P[pata] = abs2rel (P[pata], pata);
    8628:	3e 01       	movw	r6, r28
    862a:	08 94       	sec
    862c:	61 1c       	adc	r6, r1
    862e:	71 1c       	adc	r7, r1
    8630:	c3 01       	movw	r24, r6
    8632:	f4 01       	movw	r30, r8
    8634:	c0 80       	ld	r12, Z
    8636:	d1 80       	ldd	r13, Z+1	; 0x01
    8638:	e2 80       	ldd	r14, Z+2	; 0x02
    863a:	f3 80       	ldd	r15, Z+3	; 0x03
    863c:	04 81       	ldd	r16, Z+4	; 0x04
    863e:	15 81       	ldd	r17, Z+5	; 0x05
    8640:	26 81       	ldd	r18, Z+6	; 0x06
    8642:	37 81       	ldd	r19, Z+7	; 0x07
    8644:	40 85       	ldd	r20, Z+8	; 0x08
    8646:	51 85       	ldd	r21, Z+9	; 0x09
    8648:	62 85       	ldd	r22, Z+10	; 0x0a
    864a:	73 85       	ldd	r23, Z+11	; 0x0b
    864c:	ab 2c       	mov	r10, r11
    864e:	0e 94 7e 42 	call	0x84fc	; 0x84fc <_Z7abs2rel7COORD3Dh>
    8652:	d4 01       	movw	r26, r8
    8654:	f3 01       	movw	r30, r6
    8656:	8c e0       	ldi	r24, 0x0C	; 12
    8658:	01 90       	ld	r0, Z+
    865a:	0d 92       	st	X+, r0
    865c:	81 50       	subi	r24, 0x01	; 1
    865e:	e1 f7       	brne	.-8      	; 0x8658 <_Z7abs2relP7COORD3D+0x60>
	return resta (P, getOffset (pata));
}

// transforma toda una posición a coordenadas relativas
void abs2rel (COORD3D *P) {
	for (byte pata=0; pata<6; pata++) {
    8660:	b3 94       	inc	r11
    8662:	8c e0       	ldi	r24, 0x0C	; 12
    8664:	90 e0       	ldi	r25, 0x00	; 0
    8666:	88 0e       	add	r8, r24
    8668:	99 1e       	adc	r9, r25
    866a:	96 e0       	ldi	r25, 0x06	; 6
    866c:	b9 16       	cp	r11, r25
    866e:	01 f7       	brne	.-64     	; 0x8630 <_Z7abs2relP7COORD3D+0x38>
		P[pata] = abs2rel (P[pata], pata);
	}
}
    8670:	2c 96       	adiw	r28, 0x0c	; 12
    8672:	0f b6       	in	r0, 0x3f	; 63
    8674:	f8 94       	cli
    8676:	de bf       	out	0x3e, r29	; 62
    8678:	0f be       	out	0x3f, r0	; 63
    867a:	cd bf       	out	0x3d, r28	; 61
    867c:	cf 91       	pop	r28
    867e:	df 91       	pop	r29
    8680:	1f 91       	pop	r17
    8682:	0f 91       	pop	r16
    8684:	ff 90       	pop	r15
    8686:	ef 90       	pop	r14
    8688:	df 90       	pop	r13
    868a:	cf 90       	pop	r12
    868c:	bf 90       	pop	r11
    868e:	af 90       	pop	r10
    8690:	9f 90       	pop	r9
    8692:	8f 90       	pop	r8
    8694:	7f 90       	pop	r7
    8696:	6f 90       	pop	r6
    8698:	08 95       	ret

0000869a <_Z7rel2abs7COORD2Dh>:
COORD3D rel2abs (COORD3D P, byte pata) {
	return suma (P, xz2xyz (getOffset (pata)));
}

// transforma coordenadas relativas (de cada pata) en absolutas (del robot)
COORD2D rel2abs (COORD2D P, byte pata) {
    869a:	af 92       	push	r10
    869c:	bf 92       	push	r11
    869e:	cf 92       	push	r12
    86a0:	df 92       	push	r13
    86a2:	ef 92       	push	r14
    86a4:	ff 92       	push	r15
    86a6:	0f 93       	push	r16
    86a8:	1f 93       	push	r17
    86aa:	df 93       	push	r29
    86ac:	cf 93       	push	r28
    86ae:	cd b7       	in	r28, 0x3d	; 61
    86b0:	de b7       	in	r29, 0x3e	; 62
    86b2:	a0 97       	sbiw	r28, 0x20	; 32
    86b4:	0f b6       	in	r0, 0x3f	; 63
    86b6:	f8 94       	cli
    86b8:	de bf       	out	0x3e, r29	; 62
    86ba:	0f be       	out	0x3f, r0	; 63
    86bc:	cd bf       	out	0x3d, r28	; 61
    86be:	29 8b       	std	Y+17, r18	; 0x11
    86c0:	3a 8b       	std	Y+18, r19	; 0x12
    86c2:	4b 8b       	std	Y+19, r20	; 0x13
    86c4:	5c 8b       	std	Y+20, r21	; 0x14
    86c6:	6d 8b       	std	Y+21, r22	; 0x15
    86c8:	7e 8b       	std	Y+22, r23	; 0x16
    86ca:	8f 8b       	std	Y+23, r24	; 0x17
    86cc:	98 8f       	std	Y+24, r25	; 0x18
    86ce:	80 2f       	mov	r24, r16
    86d0:	ad 88       	ldd	r10, Y+21	; 0x15
    86d2:	be 88       	ldd	r11, Y+22	; 0x16
    86d4:	cf 88       	ldd	r12, Y+23	; 0x17
    86d6:	d8 8c       	ldd	r13, Y+24	; 0x18
    86d8:	e9 88       	ldd	r14, Y+17	; 0x11
    86da:	fa 88       	ldd	r15, Y+18	; 0x12
    86dc:	0b 89       	ldd	r16, Y+19	; 0x13
    86de:	1c 89       	ldd	r17, Y+20	; 0x14
	return suma (P, getOffset (pata));
    86e0:	0e 94 e3 40 	call	0x81c6	; 0x81c6 <_Z9getOffseth>
    86e4:	29 8f       	std	Y+25, r18	; 0x19
    86e6:	3a 8f       	std	Y+26, r19	; 0x1a
    86e8:	4b 8f       	std	Y+27, r20	; 0x1b
    86ea:	5c 8f       	std	Y+28, r21	; 0x1c
    86ec:	6d 8f       	std	Y+29, r22	; 0x1d
    86ee:	7e 8f       	std	Y+30, r23	; 0x1e
    86f0:	8f 8f       	std	Y+31, r24	; 0x1f
    86f2:	98 a3       	std	Y+32, r25	; 0x20
    86f4:	de 01       	movw	r26, r28
    86f6:	11 96       	adiw	r26, 0x01	; 1
    86f8:	fe 01       	movw	r30, r28
    86fa:	79 96       	adiw	r30, 0x19	; 25
    86fc:	88 e0       	ldi	r24, 0x08	; 8
    86fe:	01 90       	ld	r0, Z+
    8700:	0d 92       	st	X+, r0
    8702:	81 50       	subi	r24, 0x01	; 1
    8704:	e1 f7       	brne	.-8      	; 0x86fe <_Z7rel2abs7COORD2Dh+0x64>
COORD3D suma (COORD3D punto1, COORD3D punto2) {
  return (COORD3D) {punto1.x + punto2.x, punto1.y + punto2.y, punto1.z + punto2.z}; 
}

COORD2D suma (COORD2D punto1, COORD2D punto2) {
  return (COORD2D) {punto1.x + punto2.x, punto1.z + punto2.z}; 
    8706:	c8 01       	movw	r24, r16
    8708:	b7 01       	movw	r22, r14
    870a:	29 81       	ldd	r18, Y+1	; 0x01
    870c:	3a 81       	ldd	r19, Y+2	; 0x02
    870e:	4b 81       	ldd	r20, Y+3	; 0x03
    8710:	5c 81       	ldd	r21, Y+4	; 0x04
    8712:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    8716:	7b 01       	movw	r14, r22
    8718:	8c 01       	movw	r16, r24
    871a:	c6 01       	movw	r24, r12
    871c:	b5 01       	movw	r22, r10
    871e:	2d 81       	ldd	r18, Y+5	; 0x05
    8720:	3e 81       	ldd	r19, Y+6	; 0x06
    8722:	4f 81       	ldd	r20, Y+7	; 0x07
    8724:	58 85       	ldd	r21, Y+8	; 0x08
    8726:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    872a:	6d 87       	std	Y+13, r22	; 0x0d
    872c:	7e 87       	std	Y+14, r23	; 0x0e
    872e:	8f 87       	std	Y+15, r24	; 0x0f
    8730:	98 8b       	std	Y+16, r25	; 0x10
    8732:	c7 01       	movw	r24, r14
    8734:	d8 01       	movw	r26, r16
    8736:	89 87       	std	Y+9, r24	; 0x09
    8738:	9a 87       	std	Y+10, r25	; 0x0a
    873a:	ab 87       	std	Y+11, r26	; 0x0b
    873c:	bc 87       	std	Y+12, r27	; 0x0c
    873e:	29 85       	ldd	r18, Y+9	; 0x09
    8740:	3a 85       	ldd	r19, Y+10	; 0x0a
    8742:	4b 85       	ldd	r20, Y+11	; 0x0b
    8744:	5c 85       	ldd	r21, Y+12	; 0x0c
    8746:	6d 85       	ldd	r22, Y+13	; 0x0d
    8748:	7e 85       	ldd	r23, Y+14	; 0x0e
}

// transforma coordenadas relativas (de cada pata) en absolutas (del robot)
COORD2D rel2abs (COORD2D P, byte pata) {
	return suma (P, getOffset (pata));
}
    874a:	8f 85       	ldd	r24, Y+15	; 0x0f
    874c:	98 89       	ldd	r25, Y+16	; 0x10
    874e:	a0 96       	adiw	r28, 0x20	; 32
    8750:	0f b6       	in	r0, 0x3f	; 63
    8752:	f8 94       	cli
    8754:	de bf       	out	0x3e, r29	; 62
    8756:	0f be       	out	0x3f, r0	; 63
    8758:	cd bf       	out	0x3d, r28	; 61
    875a:	cf 91       	pop	r28
    875c:	df 91       	pop	r29
    875e:	1f 91       	pop	r17
    8760:	0f 91       	pop	r16
    8762:	ff 90       	pop	r15
    8764:	ef 90       	pop	r14
    8766:	df 90       	pop	r13
    8768:	cf 90       	pop	r12
    876a:	bf 90       	pop	r11
    876c:	af 90       	pop	r10
    876e:	08 95       	ret

00008770 <_Z7rel2abs7COORD3Dh>:
COORD2D getOffset (byte pata) {
  return (COORD2D) {ORIGEN*bin2sign(pata>2), (1-(pata%3))*SEPARA};      // nota: las patas de la izquierda son de x negativo
}

// transforma coordenadas relativas (de cada pata) en absolutas (del robot)
COORD3D rel2abs (COORD3D P, byte pata) {
    8770:	4f 92       	push	r4
    8772:	5f 92       	push	r5
    8774:	6f 92       	push	r6
    8776:	7f 92       	push	r7
    8778:	8f 92       	push	r8
    877a:	9f 92       	push	r9
    877c:	af 92       	push	r10
    877e:	bf 92       	push	r11
    8780:	cf 92       	push	r12
    8782:	df 92       	push	r13
    8784:	ef 92       	push	r14
    8786:	ff 92       	push	r15
    8788:	0f 93       	push	r16
    878a:	1f 93       	push	r17
    878c:	df 93       	push	r29
    878e:	cf 93       	push	r28
    8790:	cd b7       	in	r28, 0x3d	; 61
    8792:	de b7       	in	r29, 0x3e	; 62
    8794:	6c 97       	sbiw	r28, 0x1c	; 28
    8796:	0f b6       	in	r0, 0x3f	; 63
    8798:	f8 94       	cli
    879a:	de bf       	out	0x3e, r29	; 62
    879c:	0f be       	out	0x3f, r0	; 63
    879e:	cd bf       	out	0x3d, r28	; 61
    87a0:	4c 01       	movw	r8, r24
    87a2:	c9 86       	std	Y+9, r12	; 0x09
    87a4:	da 86       	std	Y+10, r13	; 0x0a
    87a6:	eb 86       	std	Y+11, r14	; 0x0b
    87a8:	fc 86       	std	Y+12, r15	; 0x0c
    87aa:	0d 87       	std	Y+13, r16	; 0x0d
    87ac:	1e 87       	std	Y+14, r17	; 0x0e
    87ae:	2f 87       	std	Y+15, r18	; 0x0f
    87b0:	38 8b       	std	Y+16, r19	; 0x10
    87b2:	49 8b       	std	Y+17, r20	; 0x11
    87b4:	5a 8b       	std	Y+18, r21	; 0x12
    87b6:	6b 8b       	std	Y+19, r22	; 0x13
    87b8:	7c 8b       	std	Y+20, r23	; 0x14
    87ba:	8a 2d       	mov	r24, r10
    87bc:	e9 88       	ldd	r14, Y+17	; 0x11
    87be:	fa 88       	ldd	r15, Y+18	; 0x12
    87c0:	0b 89       	ldd	r16, Y+19	; 0x13
    87c2:	1c 89       	ldd	r17, Y+20	; 0x14
    87c4:	4d 84       	ldd	r4, Y+13	; 0x0d
    87c6:	5e 84       	ldd	r5, Y+14	; 0x0e
    87c8:	6f 84       	ldd	r6, Y+15	; 0x0f
    87ca:	78 88       	ldd	r7, Y+16	; 0x10
    87cc:	a9 84       	ldd	r10, Y+9	; 0x09
    87ce:	ba 84       	ldd	r11, Y+10	; 0x0a
    87d0:	cb 84       	ldd	r12, Y+11	; 0x0b
    87d2:	dc 84       	ldd	r13, Y+12	; 0x0c
	return suma (P, xz2xyz (getOffset (pata)));
    87d4:	0e 94 e3 40 	call	0x81c6	; 0x81c6 <_Z9getOffseth>
    87d8:	2d 8b       	std	Y+21, r18	; 0x15
    87da:	3e 8b       	std	Y+22, r19	; 0x16
    87dc:	4f 8b       	std	Y+23, r20	; 0x17
    87de:	58 8f       	std	Y+24, r21	; 0x18
    87e0:	69 8f       	std	Y+25, r22	; 0x19
    87e2:	7a 8f       	std	Y+26, r23	; 0x1a
    87e4:	8b 8f       	std	Y+27, r24	; 0x1b
    87e6:	9c 8f       	std	Y+28, r25	; 0x1c
    87e8:	de 01       	movw	r26, r28
    87ea:	11 96       	adiw	r26, 0x01	; 1
    87ec:	fe 01       	movw	r30, r28
    87ee:	75 96       	adiw	r30, 0x15	; 21
    87f0:	88 e0       	ldi	r24, 0x08	; 8
    87f2:	01 90       	ld	r0, Z+
    87f4:	0d 92       	st	X+, r0
    87f6:	81 50       	subi	r24, 0x01	; 1
    87f8:	e1 f7       	brne	.-8      	; 0x87f2 <_Z7rel2abs7COORD3Dh+0x82>
float bezier (float p0, float p1, float p2, float t) {
  return sq(1-t)*p0 + 2*t*(1-t)*p1 + sq(t)*p2;
}

COORD3D suma (COORD3D punto1, COORD3D punto2) {
  return (COORD3D) {punto1.x + punto2.x, punto1.y + punto2.y, punto1.z + punto2.z}; 
    87fa:	c8 01       	movw	r24, r16
    87fc:	b7 01       	movw	r22, r14
    87fe:	2d 81       	ldd	r18, Y+5	; 0x05
    8800:	3e 81       	ldd	r19, Y+6	; 0x06
    8802:	4f 81       	ldd	r20, Y+7	; 0x07
    8804:	58 85       	ldd	r21, Y+8	; 0x08
    8806:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    880a:	7b 01       	movw	r14, r22
    880c:	8c 01       	movw	r16, r24
    880e:	c6 01       	movw	r24, r12
    8810:	b5 01       	movw	r22, r10
    8812:	29 81       	ldd	r18, Y+1	; 0x01
    8814:	3a 81       	ldd	r19, Y+2	; 0x02
    8816:	4b 81       	ldd	r20, Y+3	; 0x03
    8818:	5c 81       	ldd	r21, Y+4	; 0x04
    881a:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    881e:	f4 01       	movw	r30, r8
    8820:	60 83       	st	Z, r22
    8822:	71 83       	std	Z+1, r23	; 0x01
    8824:	82 83       	std	Z+2, r24	; 0x02
    8826:	93 83       	std	Z+3, r25	; 0x03
    8828:	c3 01       	movw	r24, r6
    882a:	b2 01       	movw	r22, r4
    882c:	20 e0       	ldi	r18, 0x00	; 0
    882e:	30 e0       	ldi	r19, 0x00	; 0
    8830:	40 e0       	ldi	r20, 0x00	; 0
    8832:	50 e0       	ldi	r21, 0x00	; 0
    8834:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    8838:	f4 01       	movw	r30, r8
    883a:	64 83       	std	Z+4, r22	; 0x04
    883c:	75 83       	std	Z+5, r23	; 0x05
    883e:	86 83       	std	Z+6, r24	; 0x06
    8840:	97 83       	std	Z+7, r25	; 0x07
    8842:	c7 01       	movw	r24, r14
    8844:	d8 01       	movw	r26, r16
    8846:	80 87       	std	Z+8, r24	; 0x08
    8848:	91 87       	std	Z+9, r25	; 0x09
    884a:	a2 87       	std	Z+10, r26	; 0x0a
    884c:	b3 87       	std	Z+11, r27	; 0x0b
}

// transforma coordenadas relativas (de cada pata) en absolutas (del robot)
COORD3D rel2abs (COORD3D P, byte pata) {
	return suma (P, xz2xyz (getOffset (pata)));
}
    884e:	c4 01       	movw	r24, r8
    8850:	6c 96       	adiw	r28, 0x1c	; 28
    8852:	0f b6       	in	r0, 0x3f	; 63
    8854:	f8 94       	cli
    8856:	de bf       	out	0x3e, r29	; 62
    8858:	0f be       	out	0x3f, r0	; 63
    885a:	cd bf       	out	0x3d, r28	; 61
    885c:	cf 91       	pop	r28
    885e:	df 91       	pop	r29
    8860:	1f 91       	pop	r17
    8862:	0f 91       	pop	r16
    8864:	ff 90       	pop	r15
    8866:	ef 90       	pop	r14
    8868:	df 90       	pop	r13
    886a:	cf 90       	pop	r12
    886c:	bf 90       	pop	r11
    886e:	af 90       	pop	r10
    8870:	9f 90       	pop	r9
    8872:	8f 90       	pop	r8
    8874:	7f 90       	pop	r7
    8876:	6f 90       	pop	r6
    8878:	5f 90       	pop	r5
    887a:	4f 90       	pop	r4
    887c:	08 95       	ret

0000887e <_Z8ec_planoP7COORD3DS0_Pf>:
		P[pata] = abs2rel (P[pata], pata);
	}
}

// devuelve la ecuación del *plano (el vector normal + el término independiente 'd')
void ec_plano (COORD3D *plano, COORD3D *normal, float *d) { 
    887e:	2f 92       	push	r2
    8880:	3f 92       	push	r3
    8882:	4f 92       	push	r4
    8884:	5f 92       	push	r5
    8886:	6f 92       	push	r6
    8888:	7f 92       	push	r7
    888a:	8f 92       	push	r8
    888c:	9f 92       	push	r9
    888e:	af 92       	push	r10
    8890:	bf 92       	push	r11
    8892:	cf 92       	push	r12
    8894:	df 92       	push	r13
    8896:	ef 92       	push	r14
    8898:	ff 92       	push	r15
    889a:	0f 93       	push	r16
    889c:	1f 93       	push	r17
    889e:	df 93       	push	r29
    88a0:	cf 93       	push	r28
    88a2:	cd b7       	in	r28, 0x3d	; 61
    88a4:	de b7       	in	r29, 0x3e	; 62
    88a6:	ca 54       	subi	r28, 0x4A	; 74
    88a8:	d0 40       	sbci	r29, 0x00	; 0
    88aa:	0f b6       	in	r0, 0x3f	; 63
    88ac:	f8 94       	cli
    88ae:	de bf       	out	0x3e, r29	; 62
    88b0:	0f be       	out	0x3f, r0	; 63
    88b2:	cd bf       	out	0x3d, r28	; 61
    88b4:	4c 01       	movw	r8, r24
    88b6:	1b 01       	movw	r2, r22
    88b8:	5a af       	std	Y+58, r21	; 0x3a
    88ba:	49 af       	std	Y+57, r20	; 0x39
	COORD3D b = rel2abs (plano[4], 4);
    88bc:	ce 01       	movw	r24, r28
    88be:	01 96       	adiw	r24, 0x01	; 1
    88c0:	d4 01       	movw	r26, r8
    88c2:	d0 96       	adiw	r26, 0x30	; 48
    88c4:	cc 90       	ld	r12, X
    88c6:	d0 97       	sbiw	r26, 0x30	; 48
    88c8:	d1 96       	adiw	r26, 0x31	; 49
    88ca:	dc 90       	ld	r13, X
    88cc:	d1 97       	sbiw	r26, 0x31	; 49
    88ce:	d2 96       	adiw	r26, 0x32	; 50
    88d0:	ec 90       	ld	r14, X
    88d2:	d2 97       	sbiw	r26, 0x32	; 50
    88d4:	d3 96       	adiw	r26, 0x33	; 51
    88d6:	fc 90       	ld	r15, X
    88d8:	d3 97       	sbiw	r26, 0x33	; 51
    88da:	d4 96       	adiw	r26, 0x34	; 52
    88dc:	0c 91       	ld	r16, X
    88de:	d4 97       	sbiw	r26, 0x34	; 52
    88e0:	d5 96       	adiw	r26, 0x35	; 53
    88e2:	1c 91       	ld	r17, X
    88e4:	d5 97       	sbiw	r26, 0x35	; 53
    88e6:	d6 96       	adiw	r26, 0x36	; 54
    88e8:	2c 91       	ld	r18, X
    88ea:	d6 97       	sbiw	r26, 0x36	; 54
    88ec:	d7 96       	adiw	r26, 0x37	; 55
    88ee:	3c 91       	ld	r19, X
    88f0:	d7 97       	sbiw	r26, 0x37	; 55
    88f2:	d8 96       	adiw	r26, 0x38	; 56
    88f4:	4c 91       	ld	r20, X
    88f6:	d8 97       	sbiw	r26, 0x38	; 56
    88f8:	d9 96       	adiw	r26, 0x39	; 57
    88fa:	5c 91       	ld	r21, X
    88fc:	d9 97       	sbiw	r26, 0x39	; 57
    88fe:	da 96       	adiw	r26, 0x3a	; 58
    8900:	6c 91       	ld	r22, X
    8902:	da 97       	sbiw	r26, 0x3a	; 58
    8904:	db 96       	adiw	r26, 0x3b	; 59
    8906:	7c 91       	ld	r23, X
    8908:	f4 e0       	ldi	r31, 0x04	; 4
    890a:	af 2e       	mov	r10, r31
    890c:	0e 94 b8 43 	call	0x8770	; 0x8770 <_Z7rel2abs7COORD3Dh>
	// el vector normal es el producto vectorial de los 2 vectores generadores ab y bc
	*normal = producto_vectorial (resta(rel2abs(plano[0],0), b), resta(rel2abs(plano[2],2), b)); 
    8910:	ce 01       	movw	r24, r28
    8912:	0d 96       	adiw	r24, 0x0d	; 13
    8914:	f4 01       	movw	r30, r8
    8916:	c0 80       	ld	r12, Z
    8918:	d1 80       	ldd	r13, Z+1	; 0x01
    891a:	e2 80       	ldd	r14, Z+2	; 0x02
    891c:	f3 80       	ldd	r15, Z+3	; 0x03
    891e:	04 81       	ldd	r16, Z+4	; 0x04
    8920:	15 81       	ldd	r17, Z+5	; 0x05
    8922:	26 81       	ldd	r18, Z+6	; 0x06
    8924:	37 81       	ldd	r19, Z+7	; 0x07
    8926:	40 85       	ldd	r20, Z+8	; 0x08
    8928:	51 85       	ldd	r21, Z+9	; 0x09
    892a:	62 85       	ldd	r22, Z+10	; 0x0a
    892c:	73 85       	ldd	r23, Z+11	; 0x0b
    892e:	aa 24       	eor	r10, r10
    8930:	0e 94 b8 43 	call	0x8770	; 0x8770 <_Z7rel2abs7COORD3Dh>
    8934:	49 80       	ldd	r4, Y+1	; 0x01
    8936:	5a 80       	ldd	r5, Y+2	; 0x02
    8938:	6b 80       	ldd	r6, Y+3	; 0x03
    893a:	7c 80       	ldd	r7, Y+4	; 0x04
    893c:	8d 81       	ldd	r24, Y+5	; 0x05
    893e:	9e 81       	ldd	r25, Y+6	; 0x06
    8940:	af 81       	ldd	r26, Y+7	; 0x07
    8942:	b8 85       	ldd	r27, Y+8	; 0x08
    8944:	8d ab       	std	Y+53, r24	; 0x35
    8946:	9e ab       	std	Y+54, r25	; 0x36
    8948:	af ab       	std	Y+55, r26	; 0x37
    894a:	b8 af       	std	Y+56, r27	; 0x38
    894c:	89 85       	ldd	r24, Y+9	; 0x09
    894e:	9a 85       	ldd	r25, Y+10	; 0x0a
    8950:	ab 85       	ldd	r26, Y+11	; 0x0b
    8952:	bc 85       	ldd	r27, Y+12	; 0x0c
    8954:	89 ab       	std	Y+49, r24	; 0x31
    8956:	9a ab       	std	Y+50, r25	; 0x32
    8958:	ab ab       	std	Y+51, r26	; 0x33
    895a:	bc ab       	std	Y+52, r27	; 0x34
COORD2D suma (COORD2D punto1, COORD2D punto2) {
  return (COORD2D) {punto1.x + punto2.x, punto1.z + punto2.z}; 
}

COORD3D resta (COORD3D punto1, COORD3D punto2) {
  return (COORD3D) {punto1.x - punto2.x, punto1.y - punto2.y, punto1.z - punto2.z}; 
    895c:	6d 85       	ldd	r22, Y+13	; 0x0d
    895e:	7e 85       	ldd	r23, Y+14	; 0x0e
    8960:	8f 85       	ldd	r24, Y+15	; 0x0f
    8962:	98 89       	ldd	r25, Y+16	; 0x10
    8964:	a3 01       	movw	r20, r6
    8966:	92 01       	movw	r18, r4
    8968:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    896c:	6b af       	std	Y+59, r22	; 0x3b
    896e:	7c af       	std	Y+60, r23	; 0x3c
    8970:	8d af       	std	Y+61, r24	; 0x3d
    8972:	9e af       	std	Y+62, r25	; 0x3e
    8974:	69 89       	ldd	r22, Y+17	; 0x11
    8976:	7a 89       	ldd	r23, Y+18	; 0x12
    8978:	8b 89       	ldd	r24, Y+19	; 0x13
    897a:	9c 89       	ldd	r25, Y+20	; 0x14
    897c:	2d a9       	ldd	r18, Y+53	; 0x35
    897e:	3e a9       	ldd	r19, Y+54	; 0x36
    8980:	4f a9       	ldd	r20, Y+55	; 0x37
    8982:	58 ad       	ldd	r21, Y+56	; 0x38
    8984:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    8988:	23 96       	adiw	r28, 0x03	; 3
    898a:	6c af       	std	Y+60, r22	; 0x3c
    898c:	7d af       	std	Y+61, r23	; 0x3d
    898e:	8e af       	std	Y+62, r24	; 0x3e
    8990:	9f af       	std	Y+63, r25	; 0x3f
    8992:	23 97       	sbiw	r28, 0x03	; 3
    8994:	6d 89       	ldd	r22, Y+21	; 0x15
    8996:	7e 89       	ldd	r23, Y+22	; 0x16
    8998:	8f 89       	ldd	r24, Y+23	; 0x17
    899a:	98 8d       	ldd	r25, Y+24	; 0x18
    899c:	29 a9       	ldd	r18, Y+49	; 0x31
    899e:	3a a9       	ldd	r19, Y+50	; 0x32
    89a0:	4b a9       	ldd	r20, Y+51	; 0x33
    89a2:	5c a9       	ldd	r21, Y+52	; 0x34
    89a4:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    89a8:	27 96       	adiw	r28, 0x07	; 7
    89aa:	6c af       	std	Y+60, r22	; 0x3c
    89ac:	7d af       	std	Y+61, r23	; 0x3d
    89ae:	8e af       	std	Y+62, r24	; 0x3e
    89b0:	9f af       	std	Y+63, r25	; 0x3f
    89b2:	27 97       	sbiw	r28, 0x07	; 7

// devuelve la ecuación del *plano (el vector normal + el término independiente 'd')
void ec_plano (COORD3D *plano, COORD3D *normal, float *d) { 
	COORD3D b = rel2abs (plano[4], 4);
	// el vector normal es el producto vectorial de los 2 vectores generadores ab y bc
	*normal = producto_vectorial (resta(rel2abs(plano[0],0), b), resta(rel2abs(plano[2],2), b)); 
    89b4:	ce 01       	movw	r24, r28
    89b6:	49 96       	adiw	r24, 0x19	; 25
    89b8:	d4 01       	movw	r26, r8
    89ba:	58 96       	adiw	r26, 0x18	; 24
    89bc:	cc 90       	ld	r12, X
    89be:	58 97       	sbiw	r26, 0x18	; 24
    89c0:	59 96       	adiw	r26, 0x19	; 25
    89c2:	dc 90       	ld	r13, X
    89c4:	59 97       	sbiw	r26, 0x19	; 25
    89c6:	5a 96       	adiw	r26, 0x1a	; 26
    89c8:	ec 90       	ld	r14, X
    89ca:	5a 97       	sbiw	r26, 0x1a	; 26
    89cc:	5b 96       	adiw	r26, 0x1b	; 27
    89ce:	fc 90       	ld	r15, X
    89d0:	5b 97       	sbiw	r26, 0x1b	; 27
    89d2:	5c 96       	adiw	r26, 0x1c	; 28
    89d4:	0c 91       	ld	r16, X
    89d6:	5c 97       	sbiw	r26, 0x1c	; 28
    89d8:	5d 96       	adiw	r26, 0x1d	; 29
    89da:	1c 91       	ld	r17, X
    89dc:	5d 97       	sbiw	r26, 0x1d	; 29
    89de:	5e 96       	adiw	r26, 0x1e	; 30
    89e0:	2c 91       	ld	r18, X
    89e2:	5e 97       	sbiw	r26, 0x1e	; 30
    89e4:	5f 96       	adiw	r26, 0x1f	; 31
    89e6:	3c 91       	ld	r19, X
    89e8:	5f 97       	sbiw	r26, 0x1f	; 31
    89ea:	90 96       	adiw	r26, 0x20	; 32
    89ec:	4c 91       	ld	r20, X
    89ee:	90 97       	sbiw	r26, 0x20	; 32
    89f0:	91 96       	adiw	r26, 0x21	; 33
    89f2:	5c 91       	ld	r21, X
    89f4:	91 97       	sbiw	r26, 0x21	; 33
    89f6:	92 96       	adiw	r26, 0x22	; 34
    89f8:	6c 91       	ld	r22, X
    89fa:	92 97       	sbiw	r26, 0x22	; 34
    89fc:	93 96       	adiw	r26, 0x23	; 35
    89fe:	7c 91       	ld	r23, X
    8a00:	e2 e0       	ldi	r30, 0x02	; 2
    8a02:	ae 2e       	mov	r10, r30
    8a04:	0e 94 b8 43 	call	0x8770	; 0x8770 <_Z7rel2abs7COORD3Dh>
COORD2D suma (COORD2D punto1, COORD2D punto2) {
  return (COORD2D) {punto1.x + punto2.x, punto1.z + punto2.z}; 
}

COORD3D resta (COORD3D punto1, COORD3D punto2) {
  return (COORD3D) {punto1.x - punto2.x, punto1.y - punto2.y, punto1.z - punto2.z}; 
    8a08:	69 8d       	ldd	r22, Y+25	; 0x19
    8a0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    8a0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    8a0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    8a10:	a3 01       	movw	r20, r6
    8a12:	92 01       	movw	r18, r4
    8a14:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    8a18:	5b 01       	movw	r10, r22
    8a1a:	6c 01       	movw	r12, r24
    8a1c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    8a1e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    8a20:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8a22:	98 a1       	ldd	r25, Y+32	; 0x20
    8a24:	2d a9       	ldd	r18, Y+53	; 0x35
    8a26:	3e a9       	ldd	r19, Y+54	; 0x36
    8a28:	4f a9       	ldd	r20, Y+55	; 0x37
    8a2a:	58 ad       	ldd	r21, Y+56	; 0x38
    8a2c:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    8a30:	2b 96       	adiw	r28, 0x0b	; 11
    8a32:	6c af       	std	Y+60, r22	; 0x3c
    8a34:	7d af       	std	Y+61, r23	; 0x3d
    8a36:	8e af       	std	Y+62, r24	; 0x3e
    8a38:	9f af       	std	Y+63, r25	; 0x3f
    8a3a:	2b 97       	sbiw	r28, 0x0b	; 11
    8a3c:	69 a1       	ldd	r22, Y+33	; 0x21
    8a3e:	7a a1       	ldd	r23, Y+34	; 0x22
    8a40:	8b a1       	ldd	r24, Y+35	; 0x23
    8a42:	9c a1       	ldd	r25, Y+36	; 0x24
    8a44:	29 a9       	ldd	r18, Y+49	; 0x31
    8a46:	3a a9       	ldd	r19, Y+50	; 0x32
    8a48:	4b a9       	ldd	r20, Y+51	; 0x33
    8a4a:	5c a9       	ldd	r21, Y+52	; 0x34
    8a4c:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    8a50:	2b 01       	movw	r4, r22
    8a52:	3c 01       	movw	r6, r24

// devuelve la ecuación del *plano (el vector normal + el término independiente 'd')
void ec_plano (COORD3D *plano, COORD3D *normal, float *d) { 
	COORD3D b = rel2abs (plano[4], 4);
	// el vector normal es el producto vectorial de los 2 vectores generadores ab y bc
	*normal = producto_vectorial (resta(rel2abs(plano[0],0), b), resta(rel2abs(plano[2],2), b)); 
    8a54:	6b ad       	ldd	r22, Y+59	; 0x3b
    8a56:	7c ad       	ldd	r23, Y+60	; 0x3c
    8a58:	8d ad       	ldd	r24, Y+61	; 0x3d
    8a5a:	9e ad       	ldd	r25, Y+62	; 0x3e
    8a5c:	2b 96       	adiw	r28, 0x0b	; 11
    8a5e:	2c ad       	ldd	r18, Y+60	; 0x3c
    8a60:	3d ad       	ldd	r19, Y+61	; 0x3d
    8a62:	4e ad       	ldd	r20, Y+62	; 0x3e
    8a64:	5f ad       	ldd	r21, Y+63	; 0x3f
    8a66:	2b 97       	sbiw	r28, 0x0b	; 11
    8a68:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    8a6c:	7b 01       	movw	r14, r22
    8a6e:	8c 01       	movw	r16, r24
    8a70:	23 96       	adiw	r28, 0x03	; 3
    8a72:	6c ad       	ldd	r22, Y+60	; 0x3c
    8a74:	7d ad       	ldd	r23, Y+61	; 0x3d
    8a76:	8e ad       	ldd	r24, Y+62	; 0x3e
    8a78:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a7a:	23 97       	sbiw	r28, 0x03	; 3
    8a7c:	a6 01       	movw	r20, r12
    8a7e:	95 01       	movw	r18, r10
    8a80:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    8a84:	9b 01       	movw	r18, r22
    8a86:	ac 01       	movw	r20, r24
    8a88:	c8 01       	movw	r24, r16
    8a8a:	b7 01       	movw	r22, r14
    8a8c:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    8a90:	f1 01       	movw	r30, r2
    8a92:	60 87       	std	Z+8, r22	; 0x08
    8a94:	71 87       	std	Z+9, r23	; 0x09
    8a96:	82 87       	std	Z+10, r24	; 0x0a
    8a98:	93 87       	std	Z+11, r25	; 0x0b
    8a9a:	27 96       	adiw	r28, 0x07	; 7
    8a9c:	6c ad       	ldd	r22, Y+60	; 0x3c
    8a9e:	7d ad       	ldd	r23, Y+61	; 0x3d
    8aa0:	8e ad       	ldd	r24, Y+62	; 0x3e
    8aa2:	9f ad       	ldd	r25, Y+63	; 0x3f
    8aa4:	27 97       	sbiw	r28, 0x07	; 7
    8aa6:	a6 01       	movw	r20, r12
    8aa8:	95 01       	movw	r18, r10
    8aaa:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    8aae:	7b 01       	movw	r14, r22
    8ab0:	8c 01       	movw	r16, r24
    8ab2:	6b ad       	ldd	r22, Y+59	; 0x3b
    8ab4:	7c ad       	ldd	r23, Y+60	; 0x3c
    8ab6:	8d ad       	ldd	r24, Y+61	; 0x3d
    8ab8:	9e ad       	ldd	r25, Y+62	; 0x3e
    8aba:	a3 01       	movw	r20, r6
    8abc:	92 01       	movw	r18, r4
    8abe:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    8ac2:	9b 01       	movw	r18, r22
    8ac4:	ac 01       	movw	r20, r24
    8ac6:	c8 01       	movw	r24, r16
    8ac8:	b7 01       	movw	r22, r14
    8aca:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    8ace:	d1 01       	movw	r26, r2
    8ad0:	14 96       	adiw	r26, 0x04	; 4
    8ad2:	6d 93       	st	X+, r22
    8ad4:	7d 93       	st	X+, r23
    8ad6:	8d 93       	st	X+, r24
    8ad8:	9c 93       	st	X, r25
    8ada:	17 97       	sbiw	r26, 0x07	; 7
    8adc:	23 96       	adiw	r28, 0x03	; 3
    8ade:	6c ad       	ldd	r22, Y+60	; 0x3c
    8ae0:	7d ad       	ldd	r23, Y+61	; 0x3d
    8ae2:	8e ad       	ldd	r24, Y+62	; 0x3e
    8ae4:	9f ad       	ldd	r25, Y+63	; 0x3f
    8ae6:	23 97       	sbiw	r28, 0x03	; 3
    8ae8:	a3 01       	movw	r20, r6
    8aea:	92 01       	movw	r18, r4
    8aec:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    8af0:	7b 01       	movw	r14, r22
    8af2:	8c 01       	movw	r16, r24
    8af4:	27 96       	adiw	r28, 0x07	; 7
    8af6:	6c ad       	ldd	r22, Y+60	; 0x3c
    8af8:	7d ad       	ldd	r23, Y+61	; 0x3d
    8afa:	8e ad       	ldd	r24, Y+62	; 0x3e
    8afc:	9f ad       	ldd	r25, Y+63	; 0x3f
    8afe:	27 97       	sbiw	r28, 0x07	; 7
    8b00:	2b 96       	adiw	r28, 0x0b	; 11
    8b02:	2c ad       	ldd	r18, Y+60	; 0x3c
    8b04:	3d ad       	ldd	r19, Y+61	; 0x3d
    8b06:	4e ad       	ldd	r20, Y+62	; 0x3e
    8b08:	5f ad       	ldd	r21, Y+63	; 0x3f
    8b0a:	2b 97       	sbiw	r28, 0x0b	; 11
    8b0c:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    8b10:	9b 01       	movw	r18, r22
    8b12:	ac 01       	movw	r20, r24
    8b14:	c8 01       	movw	r24, r16
    8b16:	b7 01       	movw	r22, r14
    8b18:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    8b1c:	f1 01       	movw	r30, r2
    8b1e:	60 83       	st	Z, r22
    8b20:	71 83       	std	Z+1, r23	; 0x01
    8b22:	82 83       	std	Z+2, r24	; 0x02
    8b24:	93 83       	std	Z+3, r25	; 0x03
	// d es el término independiente. La ecuación sería: ax + by + cz + d = 0
	*d = - sumaproducto (rel2abs(plano[1],1), *normal);
    8b26:	ce 01       	movw	r24, r28
    8b28:	85 96       	adiw	r24, 0x25	; 37
    8b2a:	d4 01       	movw	r26, r8
    8b2c:	1c 96       	adiw	r26, 0x0c	; 12
    8b2e:	cc 90       	ld	r12, X
    8b30:	1c 97       	sbiw	r26, 0x0c	; 12
    8b32:	1d 96       	adiw	r26, 0x0d	; 13
    8b34:	dc 90       	ld	r13, X
    8b36:	1d 97       	sbiw	r26, 0x0d	; 13
    8b38:	1e 96       	adiw	r26, 0x0e	; 14
    8b3a:	ec 90       	ld	r14, X
    8b3c:	1e 97       	sbiw	r26, 0x0e	; 14
    8b3e:	1f 96       	adiw	r26, 0x0f	; 15
    8b40:	fc 90       	ld	r15, X
    8b42:	1f 97       	sbiw	r26, 0x0f	; 15
    8b44:	50 96       	adiw	r26, 0x10	; 16
    8b46:	0c 91       	ld	r16, X
    8b48:	50 97       	sbiw	r26, 0x10	; 16
    8b4a:	51 96       	adiw	r26, 0x11	; 17
    8b4c:	1c 91       	ld	r17, X
    8b4e:	51 97       	sbiw	r26, 0x11	; 17
    8b50:	52 96       	adiw	r26, 0x12	; 18
    8b52:	2c 91       	ld	r18, X
    8b54:	52 97       	sbiw	r26, 0x12	; 18
    8b56:	53 96       	adiw	r26, 0x13	; 19
    8b58:	3c 91       	ld	r19, X
    8b5a:	53 97       	sbiw	r26, 0x13	; 19
    8b5c:	54 96       	adiw	r26, 0x14	; 20
    8b5e:	4c 91       	ld	r20, X
    8b60:	54 97       	sbiw	r26, 0x14	; 20
    8b62:	55 96       	adiw	r26, 0x15	; 21
    8b64:	5c 91       	ld	r21, X
    8b66:	55 97       	sbiw	r26, 0x15	; 21
    8b68:	56 96       	adiw	r26, 0x16	; 22
    8b6a:	6c 91       	ld	r22, X
    8b6c:	56 97       	sbiw	r26, 0x16	; 22
    8b6e:	57 96       	adiw	r26, 0x17	; 23
    8b70:	7c 91       	ld	r23, X
    8b72:	aa 24       	eor	r10, r10
    8b74:	a3 94       	inc	r10
    8b76:	0e 94 b8 43 	call	0x8770	; 0x8770 <_Z7rel2abs7COORD3Dh>
    8b7a:	6d a1       	ldd	r22, Y+37	; 0x25
    8b7c:	7e a1       	ldd	r23, Y+38	; 0x26
    8b7e:	8f a1       	ldd	r24, Y+39	; 0x27
    8b80:	98 a5       	ldd	r25, Y+40	; 0x28
    8b82:	f1 01       	movw	r30, r2
    8b84:	20 81       	ld	r18, Z
    8b86:	31 81       	ldd	r19, Z+1	; 0x01
    8b88:	42 81       	ldd	r20, Z+2	; 0x02
    8b8a:	53 81       	ldd	r21, Z+3	; 0x03
    8b8c:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    8b90:	7b 01       	movw	r14, r22
    8b92:	8c 01       	movw	r16, r24
    8b94:	69 a5       	ldd	r22, Y+41	; 0x29
    8b96:	7a a5       	ldd	r23, Y+42	; 0x2a
    8b98:	8b a5       	ldd	r24, Y+43	; 0x2b
    8b9a:	9c a5       	ldd	r25, Y+44	; 0x2c
    8b9c:	d1 01       	movw	r26, r2
    8b9e:	14 96       	adiw	r26, 0x04	; 4
    8ba0:	2d 91       	ld	r18, X+
    8ba2:	3d 91       	ld	r19, X+
    8ba4:	4d 91       	ld	r20, X+
    8ba6:	5c 91       	ld	r21, X
    8ba8:	17 97       	sbiw	r26, 0x07	; 7
    8baa:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    8bae:	9b 01       	movw	r18, r22
    8bb0:	ac 01       	movw	r20, r24
    8bb2:	c8 01       	movw	r24, r16
    8bb4:	b7 01       	movw	r22, r14
    8bb6:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    8bba:	7b 01       	movw	r14, r22
    8bbc:	8c 01       	movw	r16, r24
    8bbe:	6d a5       	ldd	r22, Y+45	; 0x2d
    8bc0:	7e a5       	ldd	r23, Y+46	; 0x2e
    8bc2:	8f a5       	ldd	r24, Y+47	; 0x2f
    8bc4:	98 a9       	ldd	r25, Y+48	; 0x30
    8bc6:	f1 01       	movw	r30, r2
    8bc8:	20 85       	ldd	r18, Z+8	; 0x08
    8bca:	31 85       	ldd	r19, Z+9	; 0x09
    8bcc:	42 85       	ldd	r20, Z+10	; 0x0a
    8bce:	53 85       	ldd	r21, Z+11	; 0x0b
    8bd0:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    8bd4:	9b 01       	movw	r18, r22
    8bd6:	ac 01       	movw	r20, r24
    8bd8:	c8 01       	movw	r24, r16
    8bda:	b7 01       	movw	r22, r14
    8bdc:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    8be0:	90 58       	subi	r25, 0x80	; 128
    8be2:	a9 ad       	ldd	r26, Y+57	; 0x39
    8be4:	ba ad       	ldd	r27, Y+58	; 0x3a
    8be6:	6d 93       	st	X+, r22
    8be8:	7d 93       	st	X+, r23
    8bea:	8d 93       	st	X+, r24
    8bec:	9c 93       	st	X, r25
    8bee:	13 97       	sbiw	r26, 0x03	; 3
}
    8bf0:	c6 5b       	subi	r28, 0xB6	; 182
    8bf2:	df 4f       	sbci	r29, 0xFF	; 255
    8bf4:	0f b6       	in	r0, 0x3f	; 63
    8bf6:	f8 94       	cli
    8bf8:	de bf       	out	0x3e, r29	; 62
    8bfa:	0f be       	out	0x3f, r0	; 63
    8bfc:	cd bf       	out	0x3d, r28	; 61
    8bfe:	cf 91       	pop	r28
    8c00:	df 91       	pop	r29
    8c02:	1f 91       	pop	r17
    8c04:	0f 91       	pop	r16
    8c06:	ff 90       	pop	r15
    8c08:	ef 90       	pop	r14
    8c0a:	df 90       	pop	r13
    8c0c:	cf 90       	pop	r12
    8c0e:	bf 90       	pop	r11
    8c10:	af 90       	pop	r10
    8c12:	9f 90       	pop	r9
    8c14:	8f 90       	pop	r8
    8c16:	7f 90       	pop	r7
    8c18:	6f 90       	pop	r6
    8c1a:	5f 90       	pop	r5
    8c1c:	4f 90       	pop	r4
    8c1e:	3f 90       	pop	r3
    8c20:	2f 90       	pop	r2
    8c22:	08 95       	ret

00008c24 <_Z7rel2absP7COORD3D>:
COORD2D rel2abs (COORD2D P, byte pata) {
	return suma (P, getOffset (pata));
}

// transforma toda una posición a coordenadas absolutas
void rel2abs (COORD3D *P) {
    8c24:	6f 92       	push	r6
    8c26:	7f 92       	push	r7
    8c28:	8f 92       	push	r8
    8c2a:	9f 92       	push	r9
    8c2c:	af 92       	push	r10
    8c2e:	bf 92       	push	r11
    8c30:	cf 92       	push	r12
    8c32:	df 92       	push	r13
    8c34:	ef 92       	push	r14
    8c36:	ff 92       	push	r15
    8c38:	0f 93       	push	r16
    8c3a:	1f 93       	push	r17
    8c3c:	df 93       	push	r29
    8c3e:	cf 93       	push	r28
    8c40:	cd b7       	in	r28, 0x3d	; 61
    8c42:	de b7       	in	r29, 0x3e	; 62
    8c44:	2c 97       	sbiw	r28, 0x0c	; 12
    8c46:	0f b6       	in	r0, 0x3f	; 63
    8c48:	f8 94       	cli
    8c4a:	de bf       	out	0x3e, r29	; 62
    8c4c:	0f be       	out	0x3f, r0	; 63
    8c4e:	cd bf       	out	0x3d, r28	; 61
    8c50:	4c 01       	movw	r8, r24
    8c52:	bb 24       	eor	r11, r11
	for (byte pata=0; pata<6; pata++) {
		P[pata] = rel2abs (P[pata], pata);
    8c54:	3e 01       	movw	r6, r28
    8c56:	08 94       	sec
    8c58:	61 1c       	adc	r6, r1
    8c5a:	71 1c       	adc	r7, r1
    8c5c:	c3 01       	movw	r24, r6
    8c5e:	f4 01       	movw	r30, r8
    8c60:	c0 80       	ld	r12, Z
    8c62:	d1 80       	ldd	r13, Z+1	; 0x01
    8c64:	e2 80       	ldd	r14, Z+2	; 0x02
    8c66:	f3 80       	ldd	r15, Z+3	; 0x03
    8c68:	04 81       	ldd	r16, Z+4	; 0x04
    8c6a:	15 81       	ldd	r17, Z+5	; 0x05
    8c6c:	26 81       	ldd	r18, Z+6	; 0x06
    8c6e:	37 81       	ldd	r19, Z+7	; 0x07
    8c70:	40 85       	ldd	r20, Z+8	; 0x08
    8c72:	51 85       	ldd	r21, Z+9	; 0x09
    8c74:	62 85       	ldd	r22, Z+10	; 0x0a
    8c76:	73 85       	ldd	r23, Z+11	; 0x0b
    8c78:	ab 2c       	mov	r10, r11
    8c7a:	0e 94 b8 43 	call	0x8770	; 0x8770 <_Z7rel2abs7COORD3Dh>
    8c7e:	d4 01       	movw	r26, r8
    8c80:	f3 01       	movw	r30, r6
    8c82:	8c e0       	ldi	r24, 0x0C	; 12
    8c84:	01 90       	ld	r0, Z+
    8c86:	0d 92       	st	X+, r0
    8c88:	81 50       	subi	r24, 0x01	; 1
    8c8a:	e1 f7       	brne	.-8      	; 0x8c84 <_Z7rel2absP7COORD3D+0x60>
	return suma (P, getOffset (pata));
}

// transforma toda una posición a coordenadas absolutas
void rel2abs (COORD3D *P) {
	for (byte pata=0; pata<6; pata++) {
    8c8c:	b3 94       	inc	r11
    8c8e:	8c e0       	ldi	r24, 0x0C	; 12
    8c90:	90 e0       	ldi	r25, 0x00	; 0
    8c92:	88 0e       	add	r8, r24
    8c94:	99 1e       	adc	r9, r25
    8c96:	96 e0       	ldi	r25, 0x06	; 6
    8c98:	b9 16       	cp	r11, r25
    8c9a:	01 f7       	brne	.-64     	; 0x8c5c <_Z7rel2absP7COORD3D+0x38>
		P[pata] = rel2abs (P[pata], pata);
	}
}
    8c9c:	2c 96       	adiw	r28, 0x0c	; 12
    8c9e:	0f b6       	in	r0, 0x3f	; 63
    8ca0:	f8 94       	cli
    8ca2:	de bf       	out	0x3e, r29	; 62
    8ca4:	0f be       	out	0x3f, r0	; 63
    8ca6:	cd bf       	out	0x3d, r28	; 61
    8ca8:	cf 91       	pop	r28
    8caa:	df 91       	pop	r29
    8cac:	1f 91       	pop	r17
    8cae:	0f 91       	pop	r16
    8cb0:	ff 90       	pop	r15
    8cb2:	ef 90       	pop	r14
    8cb4:	df 90       	pop	r13
    8cb6:	cf 90       	pop	r12
    8cb8:	bf 90       	pop	r11
    8cba:	af 90       	pop	r10
    8cbc:	9f 90       	pop	r9
    8cbe:	8f 90       	pop	r8
    8cc0:	7f 90       	pop	r7
    8cc2:	6f 90       	pop	r6
    8cc4:	08 95       	ret

00008cc6 <_Z10proyeccionP7COORD3DS0_>:
	// d es el término independiente. La ecuación sería: ax + by + cz + d = 0
	*d = - sumaproducto (rel2abs(plano[1],1), *normal);
}

// calcula la proyección de los *puntos sobre el *plano. El resultado es devuelto en *plano
void proyeccion (COORD3D *plano, COORD3D *puntos) {
    8cc6:	2f 92       	push	r2
    8cc8:	6f 92       	push	r6
    8cca:	7f 92       	push	r7
    8ccc:	8f 92       	push	r8
    8cce:	9f 92       	push	r9
    8cd0:	af 92       	push	r10
    8cd2:	bf 92       	push	r11
    8cd4:	cf 92       	push	r12
    8cd6:	df 92       	push	r13
    8cd8:	ef 92       	push	r14
    8cda:	ff 92       	push	r15
    8cdc:	0f 93       	push	r16
    8cde:	1f 93       	push	r17
    8ce0:	df 93       	push	r29
    8ce2:	cf 93       	push	r28
    8ce4:	cd b7       	in	r28, 0x3d	; 61
    8ce6:	de b7       	in	r29, 0x3e	; 62
    8ce8:	e0 97       	sbiw	r28, 0x30	; 48
    8cea:	0f b6       	in	r0, 0x3f	; 63
    8cec:	f8 94       	cli
    8cee:	de bf       	out	0x3e, r29	; 62
    8cf0:	0f be       	out	0x3f, r0	; 63
    8cf2:	cd bf       	out	0x3d, r28	; 61
    8cf4:	8d a7       	std	Y+45, r24	; 0x2d
    8cf6:	9e a7       	std	Y+46, r25	; 0x2e
    8cf8:	6f a7       	std	Y+47, r22	; 0x2f
    8cfa:	78 ab       	std	Y+48, r23	; 0x30
	rel2abs (puntos);
    8cfc:	cb 01       	movw	r24, r22
    8cfe:	0e 94 12 46 	call	0x8c24	; 0x8c24 <_Z7rel2absP7COORD3D>
	COORD3D normal;                 // vector normal al plano
	float d;                      // término independiente de la ecuación del plano
	// calcula la ecuación
	ec_plano (plano, &normal, &d);        
    8d02:	8d a5       	ldd	r24, Y+45	; 0x2d
    8d04:	9e a5       	ldd	r25, Y+46	; 0x2e
    8d06:	be 01       	movw	r22, r28
    8d08:	6b 5f       	subi	r22, 0xFB	; 251
    8d0a:	7f 4f       	sbci	r23, 0xFF	; 255
    8d0c:	ae 01       	movw	r20, r28
    8d0e:	4f 5f       	subi	r20, 0xFF	; 255
    8d10:	5f 4f       	sbci	r21, 0xFF	; 255
    8d12:	0e 94 3f 44 	call	0x887e	; 0x887e <_Z8ec_planoP7COORD3DS0_Pf>
	// precalcula a^2 + b^2 + c^2
	float sqabc = sumaproducto (normal, normal);
    8d16:	2d 81       	ldd	r18, Y+5	; 0x05
    8d18:	3e 81       	ldd	r19, Y+6	; 0x06
    8d1a:	4f 81       	ldd	r20, Y+7	; 0x07
    8d1c:	58 85       	ldd	r21, Y+8	; 0x08
    8d1e:	e9 84       	ldd	r14, Y+9	; 0x09
    8d20:	fa 84       	ldd	r15, Y+10	; 0x0a
    8d22:	0b 85       	ldd	r16, Y+11	; 0x0b
    8d24:	1c 85       	ldd	r17, Y+12	; 0x0c
    8d26:	6d 84       	ldd	r6, Y+13	; 0x0d
    8d28:	7e 84       	ldd	r7, Y+14	; 0x0e
    8d2a:	8f 84       	ldd	r8, Y+15	; 0x0f
    8d2c:	98 88       	ldd	r9, Y+16	; 0x10
COORD2D xyz2xz (COORD3D vector) {
  return (COORD2D) {vector.x, vector.z}; 
}

float sumaproducto (COORD3D vector1, COORD3D vector2) {
	return vector1.x*vector2.x + vector1.y*vector2.y + vector1.z*vector2.z;
    8d2e:	ca 01       	movw	r24, r20
    8d30:	b9 01       	movw	r22, r18
    8d32:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    8d36:	5b 01       	movw	r10, r22
    8d38:	6c 01       	movw	r12, r24
    8d3a:	c8 01       	movw	r24, r16
    8d3c:	b7 01       	movw	r22, r14
    8d3e:	a8 01       	movw	r20, r16
    8d40:	97 01       	movw	r18, r14
    8d42:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    8d46:	9b 01       	movw	r18, r22
    8d48:	ac 01       	movw	r20, r24
    8d4a:	c6 01       	movw	r24, r12
    8d4c:	b5 01       	movw	r22, r10
    8d4e:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    8d52:	7b 01       	movw	r14, r22
    8d54:	8c 01       	movw	r16, r24
    8d56:	c4 01       	movw	r24, r8
    8d58:	b3 01       	movw	r22, r6
    8d5a:	a4 01       	movw	r20, r8
    8d5c:	93 01       	movw	r18, r6
    8d5e:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    8d62:	9b 01       	movw	r18, r22
    8d64:	ac 01       	movw	r20, r24
    8d66:	c8 01       	movw	r24, r16
    8d68:	b7 01       	movw	r22, r14
    8d6a:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    8d6e:	6d a3       	std	Y+37, r22	; 0x25
    8d70:	7e a3       	std	Y+38, r23	; 0x26
    8d72:	8f a3       	std	Y+39, r24	; 0x27
    8d74:	98 a7       	std	Y+40, r25	; 0x28
	ec_plano (plano, &normal, &d);        
	// precalcula a^2 + b^2 + c^2
	float sqabc = sumaproducto (normal, normal);
	// itera en las patas, calcula la proyección y asigna a plano
	for (byte pata=0; pata<6; pata++) {
		float t = (sumaproducto (puntos[pata], normal) + d) / sqabc;
    8d76:	89 81       	ldd	r24, Y+1	; 0x01
    8d78:	9a 81       	ldd	r25, Y+2	; 0x02
    8d7a:	ab 81       	ldd	r26, Y+3	; 0x03
    8d7c:	bc 81       	ldd	r27, Y+4	; 0x04
    8d7e:	89 a7       	std	Y+41, r24	; 0x29
    8d80:	9a a7       	std	Y+42, r25	; 0x2a
    8d82:	ab a7       	std	Y+43, r26	; 0x2b
    8d84:	bc a7       	std	Y+44, r27	; 0x2c
    8d86:	2f a5       	ldd	r18, Y+47	; 0x2f
    8d88:	38 a9       	ldd	r19, Y+48	; 0x30
    8d8a:	c9 01       	movw	r24, r18
    8d8c:	9c 8b       	std	Y+20, r25	; 0x14
    8d8e:	8b 8b       	std	Y+19, r24	; 0x13
    8d90:	2d a5       	ldd	r18, Y+45	; 0x2d
    8d92:	3e a5       	ldd	r19, Y+46	; 0x2e
    8d94:	c9 01       	movw	r24, r18
    8d96:	9a 8b       	std	Y+18, r25	; 0x12
    8d98:	89 8b       	std	Y+17, r24	; 0x11
    8d9a:	22 24       	eor	r2, r2
    8d9c:	ab 89       	ldd	r26, Y+19	; 0x13
    8d9e:	bc 89       	ldd	r27, Y+20	; 0x14
    8da0:	8d 91       	ld	r24, X+
    8da2:	9d 91       	ld	r25, X+
    8da4:	0d 90       	ld	r0, X+
    8da6:	bc 91       	ld	r27, X
    8da8:	a0 2d       	mov	r26, r0
    8daa:	89 a3       	std	Y+33, r24	; 0x21
    8dac:	9a a3       	std	Y+34, r25	; 0x22
    8dae:	ab a3       	std	Y+35, r26	; 0x23
    8db0:	bc a3       	std	Y+36, r27	; 0x24
    8db2:	ab 89       	ldd	r26, Y+19	; 0x13
    8db4:	bc 89       	ldd	r27, Y+20	; 0x14
    8db6:	14 96       	adiw	r26, 0x04	; 4
    8db8:	8d 91       	ld	r24, X+
    8dba:	9d 91       	ld	r25, X+
    8dbc:	0d 90       	ld	r0, X+
    8dbe:	bc 91       	ld	r27, X
    8dc0:	a0 2d       	mov	r26, r0
    8dc2:	8d 8f       	std	Y+29, r24	; 0x1d
    8dc4:	9e 8f       	std	Y+30, r25	; 0x1e
    8dc6:	af 8f       	std	Y+31, r26	; 0x1f
    8dc8:	b8 a3       	std	Y+32, r27	; 0x20
    8dca:	eb 89       	ldd	r30, Y+19	; 0x13
    8dcc:	fc 89       	ldd	r31, Y+20	; 0x14
    8dce:	60 84       	ldd	r6, Z+8	; 0x08
    8dd0:	71 84       	ldd	r7, Z+9	; 0x09
    8dd2:	82 84       	ldd	r8, Z+10	; 0x0a
    8dd4:	93 84       	ldd	r9, Z+11	; 0x0b
    8dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    8dd8:	9e 81       	ldd	r25, Y+6	; 0x06
    8dda:	af 81       	ldd	r26, Y+7	; 0x07
    8ddc:	b8 85       	ldd	r27, Y+8	; 0x08
    8dde:	89 8f       	std	Y+25, r24	; 0x19
    8de0:	9a 8f       	std	Y+26, r25	; 0x1a
    8de2:	ab 8f       	std	Y+27, r26	; 0x1b
    8de4:	bc 8f       	std	Y+28, r27	; 0x1c
    8de6:	89 85       	ldd	r24, Y+9	; 0x09
    8de8:	9a 85       	ldd	r25, Y+10	; 0x0a
    8dea:	ab 85       	ldd	r26, Y+11	; 0x0b
    8dec:	bc 85       	ldd	r27, Y+12	; 0x0c
    8dee:	8d 8b       	std	Y+21, r24	; 0x15
    8df0:	9e 8b       	std	Y+22, r25	; 0x16
    8df2:	af 8b       	std	Y+23, r26	; 0x17
    8df4:	b8 8f       	std	Y+24, r27	; 0x18
    8df6:	ad 84       	ldd	r10, Y+13	; 0x0d
    8df8:	be 84       	ldd	r11, Y+14	; 0x0e
    8dfa:	cf 84       	ldd	r12, Y+15	; 0x0f
    8dfc:	d8 88       	ldd	r13, Y+16	; 0x10
    8dfe:	69 a1       	ldd	r22, Y+33	; 0x21
    8e00:	7a a1       	ldd	r23, Y+34	; 0x22
    8e02:	8b a1       	ldd	r24, Y+35	; 0x23
    8e04:	9c a1       	ldd	r25, Y+36	; 0x24
    8e06:	29 8d       	ldd	r18, Y+25	; 0x19
    8e08:	3a 8d       	ldd	r19, Y+26	; 0x1a
    8e0a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    8e0c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    8e0e:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    8e12:	7b 01       	movw	r14, r22
    8e14:	8c 01       	movw	r16, r24
    8e16:	6d 8d       	ldd	r22, Y+29	; 0x1d
    8e18:	7e 8d       	ldd	r23, Y+30	; 0x1e
    8e1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8e1c:	98 a1       	ldd	r25, Y+32	; 0x20
    8e1e:	2d 89       	ldd	r18, Y+21	; 0x15
    8e20:	3e 89       	ldd	r19, Y+22	; 0x16
    8e22:	4f 89       	ldd	r20, Y+23	; 0x17
    8e24:	58 8d       	ldd	r21, Y+24	; 0x18
    8e26:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    8e2a:	9b 01       	movw	r18, r22
    8e2c:	ac 01       	movw	r20, r24
    8e2e:	c8 01       	movw	r24, r16
    8e30:	b7 01       	movw	r22, r14
    8e32:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    8e36:	7b 01       	movw	r14, r22
    8e38:	8c 01       	movw	r16, r24
    8e3a:	c4 01       	movw	r24, r8
    8e3c:	b3 01       	movw	r22, r6
    8e3e:	a6 01       	movw	r20, r12
    8e40:	95 01       	movw	r18, r10
    8e42:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    8e46:	9b 01       	movw	r18, r22
    8e48:	ac 01       	movw	r20, r24
    8e4a:	c8 01       	movw	r24, r16
    8e4c:	b7 01       	movw	r22, r14
    8e4e:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    8e52:	29 a5       	ldd	r18, Y+41	; 0x29
    8e54:	3a a5       	ldd	r19, Y+42	; 0x2a
    8e56:	4b a5       	ldd	r20, Y+43	; 0x2b
    8e58:	5c a5       	ldd	r21, Y+44	; 0x2c
    8e5a:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    8e5e:	2d a1       	ldd	r18, Y+37	; 0x25
    8e60:	3e a1       	ldd	r19, Y+38	; 0x26
    8e62:	4f a1       	ldd	r20, Y+39	; 0x27
    8e64:	58 a5       	ldd	r21, Y+40	; 0x28
    8e66:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    8e6a:	7b 01       	movw	r14, r22
    8e6c:	8c 01       	movw	r16, r24
		COORD3D V = producto (normal, t);
		plano [pata] = resta (puntos[pata], V);
    8e6e:	a6 01       	movw	r20, r12
    8e70:	95 01       	movw	r18, r10
    8e72:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    8e76:	9b 01       	movw	r18, r22
    8e78:	ac 01       	movw	r20, r24
    8e7a:	c4 01       	movw	r24, r8
    8e7c:	b3 01       	movw	r22, r6
    8e7e:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    8e82:	a9 89       	ldd	r26, Y+17	; 0x11
    8e84:	ba 89       	ldd	r27, Y+18	; 0x12
    8e86:	18 96       	adiw	r26, 0x08	; 8
    8e88:	6d 93       	st	X+, r22
    8e8a:	7d 93       	st	X+, r23
    8e8c:	8d 93       	st	X+, r24
    8e8e:	9c 93       	st	X, r25
    8e90:	1b 97       	sbiw	r26, 0x0b	; 11
    8e92:	c8 01       	movw	r24, r16
    8e94:	b7 01       	movw	r22, r14
    8e96:	2d 89       	ldd	r18, Y+21	; 0x15
    8e98:	3e 89       	ldd	r19, Y+22	; 0x16
    8e9a:	4f 89       	ldd	r20, Y+23	; 0x17
    8e9c:	58 8d       	ldd	r21, Y+24	; 0x18
    8e9e:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    8ea2:	9b 01       	movw	r18, r22
    8ea4:	ac 01       	movw	r20, r24
    8ea6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    8ea8:	7e 8d       	ldd	r23, Y+30	; 0x1e
    8eaa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8eac:	98 a1       	ldd	r25, Y+32	; 0x20
    8eae:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    8eb2:	e9 89       	ldd	r30, Y+17	; 0x11
    8eb4:	fa 89       	ldd	r31, Y+18	; 0x12
    8eb6:	64 83       	std	Z+4, r22	; 0x04
    8eb8:	75 83       	std	Z+5, r23	; 0x05
    8eba:	86 83       	std	Z+6, r24	; 0x06
    8ebc:	97 83       	std	Z+7, r25	; 0x07
    8ebe:	c8 01       	movw	r24, r16
    8ec0:	b7 01       	movw	r22, r14
    8ec2:	29 8d       	ldd	r18, Y+25	; 0x19
    8ec4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    8ec6:	4b 8d       	ldd	r20, Y+27	; 0x1b
    8ec8:	5c 8d       	ldd	r21, Y+28	; 0x1c
    8eca:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    8ece:	9b 01       	movw	r18, r22
    8ed0:	ac 01       	movw	r20, r24
    8ed2:	69 a1       	ldd	r22, Y+33	; 0x21
    8ed4:	7a a1       	ldd	r23, Y+34	; 0x22
    8ed6:	8b a1       	ldd	r24, Y+35	; 0x23
    8ed8:	9c a1       	ldd	r25, Y+36	; 0x24
    8eda:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    8ede:	a9 89       	ldd	r26, Y+17	; 0x11
    8ee0:	ba 89       	ldd	r27, Y+18	; 0x12
    8ee2:	6d 93       	st	X+, r22
    8ee4:	7d 93       	st	X+, r23
    8ee6:	8d 93       	st	X+, r24
    8ee8:	9c 93       	st	X, r25
    8eea:	13 97       	sbiw	r26, 0x03	; 3
	// calcula la ecuación
	ec_plano (plano, &normal, &d);        
	// precalcula a^2 + b^2 + c^2
	float sqabc = sumaproducto (normal, normal);
	// itera en las patas, calcula la proyección y asigna a plano
	for (byte pata=0; pata<6; pata++) {
    8eec:	23 94       	inc	r2
    8eee:	eb 89       	ldd	r30, Y+19	; 0x13
    8ef0:	fc 89       	ldd	r31, Y+20	; 0x14
    8ef2:	3c 96       	adiw	r30, 0x0c	; 12
    8ef4:	fc 8b       	std	Y+20, r31	; 0x14
    8ef6:	eb 8b       	std	Y+19, r30	; 0x13
    8ef8:	1c 96       	adiw	r26, 0x0c	; 12
    8efa:	ba 8b       	std	Y+18, r27	; 0x12
    8efc:	a9 8b       	std	Y+17, r26	; 0x11
    8efe:	f6 e0       	ldi	r31, 0x06	; 6
    8f00:	2f 16       	cp	r2, r31
    8f02:	09 f0       	breq	.+2      	; 0x8f06 <_Z10proyeccionP7COORD3DS0_+0x240>
    8f04:	4b cf       	rjmp	.-362    	; 0x8d9c <_Z10proyeccionP7COORD3DS0_+0xd6>
		float t = (sumaproducto (puntos[pata], normal) + d) / sqabc;
		COORD3D V = producto (normal, t);
		plano [pata] = resta (puntos[pata], V);
	}
	abs2rel (puntos);    // nota: hubiera sido más eficiente hacer un memcpy, pero acá la velocidad no es crítica
    8f06:	8f a5       	ldd	r24, Y+47	; 0x2f
    8f08:	98 a9       	ldd	r25, Y+48	; 0x30
    8f0a:	0e 94 fc 42 	call	0x85f8	; 0x85f8 <_Z7abs2relP7COORD3D>
	abs2rel (plano);
    8f0e:	8d a5       	ldd	r24, Y+45	; 0x2d
    8f10:	9e a5       	ldd	r25, Y+46	; 0x2e
    8f12:	0e 94 fc 42 	call	0x85f8	; 0x85f8 <_Z7abs2relP7COORD3D>
}
    8f16:	e0 96       	adiw	r28, 0x30	; 48
    8f18:	0f b6       	in	r0, 0x3f	; 63
    8f1a:	f8 94       	cli
    8f1c:	de bf       	out	0x3e, r29	; 62
    8f1e:	0f be       	out	0x3f, r0	; 63
    8f20:	cd bf       	out	0x3d, r28	; 61
    8f22:	cf 91       	pop	r28
    8f24:	df 91       	pop	r29
    8f26:	1f 91       	pop	r17
    8f28:	0f 91       	pop	r16
    8f2a:	ff 90       	pop	r15
    8f2c:	ef 90       	pop	r14
    8f2e:	df 90       	pop	r13
    8f30:	cf 90       	pop	r12
    8f32:	bf 90       	pop	r11
    8f34:	af 90       	pop	r10
    8f36:	9f 90       	pop	r9
    8f38:	8f 90       	pop	r8
    8f3a:	7f 90       	pop	r7
    8f3c:	6f 90       	pop	r6
    8f3e:	2f 90       	pop	r2
    8f40:	08 95       	ret

00008f42 <_Z8hexagonoffff>:
  }
  return pata;
}

// genera una posición hexagonal semi-regular
POSICION hexagono (float altura, float ancho, float largo, float ancho_central) {
    8f42:	2f 92       	push	r2
    8f44:	3f 92       	push	r3
    8f46:	4f 92       	push	r4
    8f48:	5f 92       	push	r5
    8f4a:	6f 92       	push	r6
    8f4c:	7f 92       	push	r7
    8f4e:	8f 92       	push	r8
    8f50:	9f 92       	push	r9
    8f52:	af 92       	push	r10
    8f54:	bf 92       	push	r11
    8f56:	cf 92       	push	r12
    8f58:	df 92       	push	r13
    8f5a:	ef 92       	push	r14
    8f5c:	ff 92       	push	r15
    8f5e:	0f 93       	push	r16
    8f60:	1f 93       	push	r17
    8f62:	df 93       	push	r29
    8f64:	cf 93       	push	r28
    8f66:	cd b7       	in	r28, 0x3d	; 61
    8f68:	de b7       	in	r29, 0x3e	; 62
    8f6a:	a9 97       	sbiw	r28, 0x29	; 41
    8f6c:	0f b6       	in	r0, 0x3f	; 63
    8f6e:	f8 94       	cli
    8f70:	de bf       	out	0x3e, r29	; 62
    8f72:	0f be       	out	0x3f, r0	; 63
    8f74:	cd bf       	out	0x3d, r28	; 61
    8f76:	8c a3       	std	Y+36, r24	; 0x24
    8f78:	9d a3       	std	Y+37, r25	; 0x25
    8f7a:	08 8f       	std	Y+24, r16	; 0x18
    8f7c:	19 8f       	std	Y+25, r17	; 0x19
    8f7e:	2a 8f       	std	Y+26, r18	; 0x1a
    8f80:	3b 8f       	std	Y+27, r19	; 0x1b
    8f82:	cc 8e       	std	Y+28, r12	; 0x1c
    8f84:	dd 8e       	std	Y+29, r13	; 0x1d
    8f86:	ee 8e       	std	Y+30, r14	; 0x1e
    8f88:	ff 8e       	std	Y+31, r15	; 0x1f
    8f8a:	88 a2       	std	Y+32, r8	; 0x20
    8f8c:	99 a2       	std	Y+33, r9	; 0x21
    8f8e:	aa a2       	std	Y+34, r10	; 0x22
    8f90:	bb a2       	std	Y+35, r11	; 0x23
    8f92:	9a 8b       	std	Y+18, r25	; 0x12
    8f94:	89 8b       	std	Y+17, r24	; 0x11
    8f96:	1f 8a       	std	Y+23, r1	; 0x17
  POSICION posicion;
  for (byte pata=0; pata<6; pata++) {
    COORD2D P = getOffset (pata);
    posicion.patas[pata] = (COORD3D) {(ancho+(ancho_central-ancho)*(P.z==0))*sign(P.x)/2 - P.x, -altura, largo*sign(P.z)/2 - P.z};
    8f98:	db 01       	movw	r26, r22
    8f9a:	ca 01       	movw	r24, r20
    8f9c:	b0 58       	subi	r27, 0x80	; 128
    8f9e:	8e a3       	std	Y+38, r24	; 0x26
    8fa0:	9f a3       	std	Y+39, r25	; 0x27
    8fa2:	a8 a7       	std	Y+40, r26	; 0x28
    8fa4:	b9 a7       	std	Y+41, r27	; 0x29

// genera una posición hexagonal semi-regular
POSICION hexagono (float altura, float ancho, float largo, float ancho_central) {
  POSICION posicion;
  for (byte pata=0; pata<6; pata++) {
    COORD2D P = getOffset (pata);
    8fa6:	8f 89       	ldd	r24, Y+23	; 0x17
    8fa8:	0e 94 e3 40 	call	0x81c6	; 0x81c6 <_Z9getOffseth>
    8fac:	29 87       	std	Y+9, r18	; 0x09
    8fae:	3a 87       	std	Y+10, r19	; 0x0a
    8fb0:	4b 87       	std	Y+11, r20	; 0x0b
    8fb2:	5c 87       	std	Y+12, r21	; 0x0c
    8fb4:	6d 87       	std	Y+13, r22	; 0x0d
    8fb6:	7e 87       	std	Y+14, r23	; 0x0e
    8fb8:	8f 87       	std	Y+15, r24	; 0x0f
    8fba:	98 8b       	std	Y+16, r25	; 0x10
    8fbc:	de 01       	movw	r26, r28
    8fbe:	11 96       	adiw	r26, 0x01	; 1
    8fc0:	fe 01       	movw	r30, r28
    8fc2:	39 96       	adiw	r30, 0x09	; 9
    8fc4:	88 e0       	ldi	r24, 0x08	; 8
    8fc6:	01 90       	ld	r0, Z+
    8fc8:	0d 92       	st	X+, r0
    8fca:	81 50       	subi	r24, 0x01	; 1
    8fcc:	e1 f7       	brne	.-8      	; 0x8fc6 <_Z8hexagonoffff+0x84>
    8fce:	89 81       	ldd	r24, Y+1	; 0x01
    8fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    8fd2:	ab 81       	ldd	r26, Y+3	; 0x03
    8fd4:	bc 81       	ldd	r27, Y+4	; 0x04
    8fd6:	8b 8b       	std	Y+19, r24	; 0x13
    8fd8:	9c 8b       	std	Y+20, r25	; 0x14
    8fda:	ad 8b       	std	Y+21, r26	; 0x15
    8fdc:	be 8b       	std	Y+22, r27	; 0x16
    8fde:	2d 80       	ldd	r2, Y+5	; 0x05
    8fe0:	3e 80       	ldd	r3, Y+6	; 0x06
    8fe2:	4f 80       	ldd	r4, Y+7	; 0x07
    8fe4:	58 84       	ldd	r5, Y+8	; 0x08
    posicion.patas[pata] = (COORD3D) {(ancho+(ancho_central-ancho)*(P.z==0))*sign(P.x)/2 - P.x, -altura, largo*sign(P.z)/2 - P.z};
    8fe6:	c2 01       	movw	r24, r4
    8fe8:	b1 01       	movw	r22, r2
    8fea:	20 e0       	ldi	r18, 0x00	; 0
    8fec:	30 e0       	ldi	r19, 0x00	; 0
    8fee:	40 e0       	ldi	r20, 0x00	; 0
    8ff0:	50 e0       	ldi	r21, 0x00	; 0
    8ff2:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    8ff6:	88 23       	and	r24, r24
    8ff8:	59 f0       	breq	.+22     	; 0x9010 <_Z8hexagonoffff+0xce>
    8ffa:	0f 2e       	mov	r0, r31
    8ffc:	f0 e0       	ldi	r31, 0x00	; 0
    8ffe:	af 2e       	mov	r10, r31
    9000:	f0 e0       	ldi	r31, 0x00	; 0
    9002:	bf 2e       	mov	r11, r31
    9004:	f0 e0       	ldi	r31, 0x00	; 0
    9006:	cf 2e       	mov	r12, r31
    9008:	f0 e0       	ldi	r31, 0x00	; 0
    900a:	df 2e       	mov	r13, r31
    900c:	f0 2d       	mov	r31, r0
    900e:	0a c0       	rjmp	.+20     	; 0x9024 <_Z8hexagonoffff+0xe2>
    9010:	0f 2e       	mov	r0, r31
    9012:	f0 e0       	ldi	r31, 0x00	; 0
    9014:	af 2e       	mov	r10, r31
    9016:	f0 e0       	ldi	r31, 0x00	; 0
    9018:	bf 2e       	mov	r11, r31
    901a:	f0 e8       	ldi	r31, 0x80	; 128
    901c:	cf 2e       	mov	r12, r31
    901e:	ff e3       	ldi	r31, 0x3F	; 63
    9020:	df 2e       	mov	r13, r31
    9022:	f0 2d       	mov	r31, r0
    9024:	6b 89       	ldd	r22, Y+19	; 0x13
    9026:	7c 89       	ldd	r23, Y+20	; 0x14
    9028:	8d 89       	ldd	r24, Y+21	; 0x15
    902a:	9e 89       	ldd	r25, Y+22	; 0x16
    902c:	0e 94 30 7b 	call	0xf660	; 0xf660 <__fixsfsi>
    9030:	dc 01       	movw	r26, r24
    9032:	cb 01       	movw	r24, r22
    9034:	0e 94 86 71 	call	0xe30c	; 0xe30c <_Z4signi>
    9038:	e8 2e       	mov	r14, r24
    903a:	c2 01       	movw	r24, r4
    903c:	b1 01       	movw	r22, r2
    903e:	0e 94 30 7b 	call	0xf660	; 0xf660 <__fixsfsi>
    9042:	dc 01       	movw	r26, r24
    9044:	cb 01       	movw	r24, r22
    9046:	0e 94 86 71 	call	0xe30c	; 0xe30c <_Z4signi>
    904a:	68 2e       	mov	r6, r24
    904c:	68 a1       	ldd	r22, Y+32	; 0x20
    904e:	79 a1       	ldd	r23, Y+33	; 0x21
    9050:	8a a1       	ldd	r24, Y+34	; 0x22
    9052:	9b a1       	ldd	r25, Y+35	; 0x23
    9054:	28 8d       	ldd	r18, Y+24	; 0x18
    9056:	39 8d       	ldd	r19, Y+25	; 0x19
    9058:	4a 8d       	ldd	r20, Y+26	; 0x1a
    905a:	5b 8d       	ldd	r21, Y+27	; 0x1b
    905c:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    9060:	a6 01       	movw	r20, r12
    9062:	95 01       	movw	r18, r10
    9064:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    9068:	9b 01       	movw	r18, r22
    906a:	ac 01       	movw	r20, r24
    906c:	68 8d       	ldd	r22, Y+24	; 0x18
    906e:	79 8d       	ldd	r23, Y+25	; 0x19
    9070:	8a 8d       	ldd	r24, Y+26	; 0x1a
    9072:	9b 8d       	ldd	r25, Y+27	; 0x1b
    9074:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    9078:	5b 01       	movw	r10, r22
    907a:	6c 01       	movw	r12, r24
    907c:	ff 24       	eor	r15, r15
    907e:	e7 fc       	sbrc	r14, 7
    9080:	f0 94       	com	r15
    9082:	0f 2d       	mov	r16, r15
    9084:	1f 2d       	mov	r17, r15
    9086:	c8 01       	movw	r24, r16
    9088:	b7 01       	movw	r22, r14
    908a:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    908e:	9b 01       	movw	r18, r22
    9090:	ac 01       	movw	r20, r24
    9092:	c6 01       	movw	r24, r12
    9094:	b5 01       	movw	r22, r10
    9096:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    909a:	20 e0       	ldi	r18, 0x00	; 0
    909c:	30 e0       	ldi	r19, 0x00	; 0
    909e:	40 e0       	ldi	r20, 0x00	; 0
    90a0:	5f e3       	ldi	r21, 0x3F	; 63
    90a2:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    90a6:	2b 89       	ldd	r18, Y+19	; 0x13
    90a8:	3c 89       	ldd	r19, Y+20	; 0x14
    90aa:	4d 89       	ldd	r20, Y+21	; 0x15
    90ac:	5e 89       	ldd	r21, Y+22	; 0x16
    90ae:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    90b2:	a9 89       	ldd	r26, Y+17	; 0x11
    90b4:	ba 89       	ldd	r27, Y+18	; 0x12
    90b6:	6d 93       	st	X+, r22
    90b8:	7d 93       	st	X+, r23
    90ba:	8d 93       	st	X+, r24
    90bc:	9c 93       	st	X, r25
    90be:	13 97       	sbiw	r26, 0x03	; 3
    90c0:	8e a1       	ldd	r24, Y+38	; 0x26
    90c2:	9f a1       	ldd	r25, Y+39	; 0x27
    90c4:	a8 a5       	ldd	r26, Y+40	; 0x28
    90c6:	b9 a5       	ldd	r27, Y+41	; 0x29
    90c8:	e9 89       	ldd	r30, Y+17	; 0x11
    90ca:	fa 89       	ldd	r31, Y+18	; 0x12
    90cc:	84 83       	std	Z+4, r24	; 0x04
    90ce:	95 83       	std	Z+5, r25	; 0x05
    90d0:	a6 83       	std	Z+6, r26	; 0x06
    90d2:	b7 83       	std	Z+7, r27	; 0x07
    90d4:	77 24       	eor	r7, r7
    90d6:	67 fc       	sbrc	r6, 7
    90d8:	70 94       	com	r7
    90da:	87 2c       	mov	r8, r7
    90dc:	97 2c       	mov	r9, r7
    90de:	c4 01       	movw	r24, r8
    90e0:	b3 01       	movw	r22, r6
    90e2:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    90e6:	9b 01       	movw	r18, r22
    90e8:	ac 01       	movw	r20, r24
    90ea:	6c 8d       	ldd	r22, Y+28	; 0x1c
    90ec:	7d 8d       	ldd	r23, Y+29	; 0x1d
    90ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    90f0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    90f2:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    90f6:	20 e0       	ldi	r18, 0x00	; 0
    90f8:	30 e0       	ldi	r19, 0x00	; 0
    90fa:	40 e0       	ldi	r20, 0x00	; 0
    90fc:	5f e3       	ldi	r21, 0x3F	; 63
    90fe:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    9102:	a2 01       	movw	r20, r4
    9104:	91 01       	movw	r18, r2
    9106:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    910a:	a9 89       	ldd	r26, Y+17	; 0x11
    910c:	ba 89       	ldd	r27, Y+18	; 0x12
    910e:	18 96       	adiw	r26, 0x08	; 8
    9110:	6d 93       	st	X+, r22
    9112:	7d 93       	st	X+, r23
    9114:	8d 93       	st	X+, r24
    9116:	9c 93       	st	X, r25
    9118:	1b 97       	sbiw	r26, 0x0b	; 11
}

// genera una posición hexagonal semi-regular
POSICION hexagono (float altura, float ancho, float largo, float ancho_central) {
  POSICION posicion;
  for (byte pata=0; pata<6; pata++) {
    911a:	bf 89       	ldd	r27, Y+23	; 0x17
    911c:	bf 5f       	subi	r27, 0xFF	; 255
    911e:	bf 8b       	std	Y+23, r27	; 0x17
    9120:	e9 89       	ldd	r30, Y+17	; 0x11
    9122:	fa 89       	ldd	r31, Y+18	; 0x12
    9124:	3c 96       	adiw	r30, 0x0c	; 12
    9126:	fa 8b       	std	Y+18, r31	; 0x12
    9128:	e9 8b       	std	Y+17, r30	; 0x11
    912a:	b6 30       	cpi	r27, 0x06	; 6
    912c:	09 f0       	breq	.+2      	; 0x9130 <_Z8hexagonoffff+0x1ee>
    912e:	3b cf       	rjmp	.-394    	; 0x8fa6 <_Z8hexagonoffff+0x64>
    COORD2D P = getOffset (pata);
    posicion.patas[pata] = (COORD3D) {(ancho+(ancho_central-ancho)*(P.z==0))*sign(P.x)/2 - P.x, -altura, largo*sign(P.z)/2 - P.z};
  }  
  return posicion;
}
    9130:	8c a1       	ldd	r24, Y+36	; 0x24
    9132:	9d a1       	ldd	r25, Y+37	; 0x25
    9134:	a9 96       	adiw	r28, 0x29	; 41
    9136:	0f b6       	in	r0, 0x3f	; 63
    9138:	f8 94       	cli
    913a:	de bf       	out	0x3e, r29	; 62
    913c:	0f be       	out	0x3f, r0	; 63
    913e:	cd bf       	out	0x3d, r28	; 61
    9140:	cf 91       	pop	r28
    9142:	df 91       	pop	r29
    9144:	1f 91       	pop	r17
    9146:	0f 91       	pop	r16
    9148:	ff 90       	pop	r15
    914a:	ef 90       	pop	r14
    914c:	df 90       	pop	r13
    914e:	cf 90       	pop	r12
    9150:	bf 90       	pop	r11
    9152:	af 90       	pop	r10
    9154:	9f 90       	pop	r9
    9156:	8f 90       	pop	r8
    9158:	7f 90       	pop	r7
    915a:	6f 90       	pop	r6
    915c:	5f 90       	pop	r5
    915e:	4f 90       	pop	r4
    9160:	3f 90       	pop	r3
    9162:	2f 90       	pop	r2
    9164:	08 95       	ret

00009166 <_Z9distancia7COORD2DS_>:
void sumasigna (COORD2D *punto, COORD2D vector) {
  (*punto).x += vector.x;
  (*punto).z += vector.z; 
}

float distancia (COORD2D a, COORD2D b) {
    9166:	af 92       	push	r10
    9168:	bf 92       	push	r11
    916a:	cf 92       	push	r12
    916c:	df 92       	push	r13
    916e:	ef 92       	push	r14
    9170:	ff 92       	push	r15
    9172:	0f 93       	push	r16
    9174:	1f 93       	push	r17
    9176:	df 93       	push	r29
    9178:	cf 93       	push	r28
    917a:	cd b7       	in	r28, 0x3d	; 61
    917c:	de b7       	in	r29, 0x3e	; 62
    917e:	60 97       	sbiw	r28, 0x10	; 16
    9180:	0f b6       	in	r0, 0x3f	; 63
    9182:	f8 94       	cli
    9184:	de bf       	out	0x3e, r29	; 62
    9186:	0f be       	out	0x3f, r0	; 63
    9188:	cd bf       	out	0x3d, r28	; 61
    918a:	29 83       	std	Y+1, r18	; 0x01
    918c:	3a 83       	std	Y+2, r19	; 0x02
    918e:	4b 83       	std	Y+3, r20	; 0x03
    9190:	5c 83       	std	Y+4, r21	; 0x04
    9192:	6d 83       	std	Y+5, r22	; 0x05
    9194:	7e 83       	std	Y+6, r23	; 0x06
    9196:	8f 83       	std	Y+7, r24	; 0x07
    9198:	98 87       	std	Y+8, r25	; 0x08
    919a:	a9 86       	std	Y+9, r10	; 0x09
    919c:	ba 86       	std	Y+10, r11	; 0x0a
    919e:	cb 86       	std	Y+11, r12	; 0x0b
    91a0:	dc 86       	std	Y+12, r13	; 0x0c
    91a2:	ed 86       	std	Y+13, r14	; 0x0d
    91a4:	fe 86       	std	Y+14, r15	; 0x0e
    91a6:	0f 87       	std	Y+15, r16	; 0x0f
    91a8:	18 8b       	std	Y+16, r17	; 0x10
  return hypot (a.x - b.x, a.z - b.z);
    91aa:	69 81       	ldd	r22, Y+1	; 0x01
    91ac:	7a 81       	ldd	r23, Y+2	; 0x02
    91ae:	8b 81       	ldd	r24, Y+3	; 0x03
    91b0:	9c 81       	ldd	r25, Y+4	; 0x04
    91b2:	29 85       	ldd	r18, Y+9	; 0x09
    91b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    91b6:	4b 85       	ldd	r20, Y+11	; 0x0b
    91b8:	5c 85       	ldd	r21, Y+12	; 0x0c
    91ba:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    91be:	7b 01       	movw	r14, r22
    91c0:	8c 01       	movw	r16, r24
    91c2:	6d 81       	ldd	r22, Y+5	; 0x05
    91c4:	7e 81       	ldd	r23, Y+6	; 0x06
    91c6:	8f 81       	ldd	r24, Y+7	; 0x07
    91c8:	98 85       	ldd	r25, Y+8	; 0x08
    91ca:	2d 85       	ldd	r18, Y+13	; 0x0d
    91cc:	3e 85       	ldd	r19, Y+14	; 0x0e
    91ce:	4f 85       	ldd	r20, Y+15	; 0x0f
    91d0:	58 89       	ldd	r21, Y+16	; 0x10
    91d2:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    91d6:	9b 01       	movw	r18, r22
    91d8:	ac 01       	movw	r20, r24
    91da:	c8 01       	movw	r24, r16
    91dc:	b7 01       	movw	r22, r14
    91de:	0e 94 99 7c 	call	0xf932	; 0xf932 <hypot>
}
    91e2:	60 96       	adiw	r28, 0x10	; 16
    91e4:	0f b6       	in	r0, 0x3f	; 63
    91e6:	f8 94       	cli
    91e8:	de bf       	out	0x3e, r29	; 62
    91ea:	0f be       	out	0x3f, r0	; 63
    91ec:	cd bf       	out	0x3d, r28	; 61
    91ee:	cf 91       	pop	r28
    91f0:	df 91       	pop	r29
    91f2:	1f 91       	pop	r17
    91f4:	0f 91       	pop	r16
    91f6:	ff 90       	pop	r15
    91f8:	ef 90       	pop	r14
    91fa:	df 90       	pop	r13
    91fc:	cf 90       	pop	r12
    91fe:	bf 90       	pop	r11
    9200:	af 90       	pop	r10
    9202:	08 95       	ret

00009204 <_Z17getRotationMatrixP7COORD2Df>:
  matrix[0].x = cosy*cosz;  matrix[1].x = cosy*sinz; matrix[2].x = -siny;  
  matrix[0].y = -cosx*sinz+sinx*siny*cosz;  matrix[1].y = cosx*cosz+sinx*siny*sinz; matrix[2].y = sinx*cosy;
  matrix[0].z = sinx*sinz+cosx*siny*cosz;  matrix[1].z = -sinx*cosz+cosx*siny*sinz; matrix[2].z = cosx*cosy;
}

void getRotationMatrix (COORD2D * matrix, float angulo) {
    9204:	8f 92       	push	r8
    9206:	9f 92       	push	r9
    9208:	af 92       	push	r10
    920a:	bf 92       	push	r11
    920c:	cf 92       	push	r12
    920e:	df 92       	push	r13
    9210:	ef 92       	push	r14
    9212:	ff 92       	push	r15
    9214:	0f 93       	push	r16
    9216:	1f 93       	push	r17
    9218:	4c 01       	movw	r8, r24
    921a:	7a 01       	movw	r14, r20
    921c:	8b 01       	movw	r16, r22
  float seno = sin (angulo);
    921e:	cb 01       	movw	r24, r22
    9220:	ba 01       	movw	r22, r20
    9222:	0e 94 55 7e 	call	0xfcaa	; 0xfcaa <sin>
    9226:	5b 01       	movw	r10, r22
    9228:	6c 01       	movw	r12, r24
  float coseno = cos (angulo);
    922a:	c8 01       	movw	r24, r16
    922c:	b7 01       	movw	r22, r14
    922e:	0e 94 94 7a 	call	0xf528	; 0xf528 <cos>
  matrix[0].x = coseno;  matrix[1].x = -seno;
    9232:	f4 01       	movw	r30, r8
    9234:	60 83       	st	Z, r22
    9236:	71 83       	std	Z+1, r23	; 0x01
    9238:	82 83       	std	Z+2, r24	; 0x02
    923a:	93 83       	std	Z+3, r25	; 0x03
    923c:	a6 01       	movw	r20, r12
    923e:	95 01       	movw	r18, r10
    9240:	50 58       	subi	r21, 0x80	; 128
    9242:	20 87       	std	Z+8, r18	; 0x08
    9244:	31 87       	std	Z+9, r19	; 0x09
    9246:	42 87       	std	Z+10, r20	; 0x0a
    9248:	53 87       	std	Z+11, r21	; 0x0b
  matrix[0].z = seno;  matrix[1].z = coseno;  
    924a:	a4 82       	std	Z+4, r10	; 0x04
    924c:	b5 82       	std	Z+5, r11	; 0x05
    924e:	c6 82       	std	Z+6, r12	; 0x06
    9250:	d7 82       	std	Z+7, r13	; 0x07
    9252:	64 87       	std	Z+12, r22	; 0x0c
    9254:	75 87       	std	Z+13, r23	; 0x0d
    9256:	86 87       	std	Z+14, r24	; 0x0e
    9258:	97 87       	std	Z+15, r25	; 0x0f
}
    925a:	1f 91       	pop	r17
    925c:	0f 91       	pop	r16
    925e:	ff 90       	pop	r15
    9260:	ef 90       	pop	r14
    9262:	df 90       	pop	r13
    9264:	cf 90       	pop	r12
    9266:	bf 90       	pop	r11
    9268:	af 90       	pop	r10
    926a:	9f 90       	pop	r9
    926c:	8f 90       	pop	r8
    926e:	08 95       	ret

00009270 <_Z17getRotationMatrixP7COORD3Dfff>:
  float x = P.x*matrix[0].x + P.z*matrix[1].x;    
  float z = P.x*matrix[0].z + P.z*matrix[1].z;  
  return (COORD2D) {x, z};
}

void getRotationMatrix (COORD3D * matrix, float angulox, float anguloy, float anguloz) {
    9270:	2f 92       	push	r2
    9272:	3f 92       	push	r3
    9274:	4f 92       	push	r4
    9276:	5f 92       	push	r5
    9278:	6f 92       	push	r6
    927a:	7f 92       	push	r7
    927c:	8f 92       	push	r8
    927e:	9f 92       	push	r9
    9280:	af 92       	push	r10
    9282:	bf 92       	push	r11
    9284:	cf 92       	push	r12
    9286:	df 92       	push	r13
    9288:	ef 92       	push	r14
    928a:	ff 92       	push	r15
    928c:	0f 93       	push	r16
    928e:	1f 93       	push	r17
    9290:	df 93       	push	r29
    9292:	cf 93       	push	r28
    9294:	cd b7       	in	r28, 0x3d	; 61
    9296:	de b7       	in	r29, 0x3e	; 62
    9298:	66 97       	sbiw	r28, 0x16	; 22
    929a:	0f b6       	in	r0, 0x3f	; 63
    929c:	f8 94       	cli
    929e:	de bf       	out	0x3e, r29	; 62
    92a0:	0f be       	out	0x3f, r0	; 63
    92a2:	cd bf       	out	0x3d, r28	; 61
    92a4:	9e 8b       	std	Y+22, r25	; 0x16
    92a6:	8d 8b       	std	Y+21, r24	; 0x15
    92a8:	4a 01       	movw	r8, r20
    92aa:	5b 01       	movw	r10, r22
    92ac:	28 01       	movw	r4, r16
    92ae:	39 01       	movw	r6, r18
  float sinx = sin (angulox); float cosx = cos (angulox);  
    92b0:	cb 01       	movw	r24, r22
    92b2:	ba 01       	movw	r22, r20
    92b4:	0e 94 55 7e 	call	0xfcaa	; 0xfcaa <sin>
    92b8:	6d 87       	std	Y+13, r22	; 0x0d
    92ba:	7e 87       	std	Y+14, r23	; 0x0e
    92bc:	8f 87       	std	Y+15, r24	; 0x0f
    92be:	98 8b       	std	Y+16, r25	; 0x10
    92c0:	c5 01       	movw	r24, r10
    92c2:	b4 01       	movw	r22, r8
    92c4:	0e 94 94 7a 	call	0xf528	; 0xf528 <cos>
    92c8:	69 87       	std	Y+9, r22	; 0x09
    92ca:	7a 87       	std	Y+10, r23	; 0x0a
    92cc:	8b 87       	std	Y+11, r24	; 0x0b
    92ce:	9c 87       	std	Y+12, r25	; 0x0c
  float siny = sin (anguloy); float cosy = cos (anguloy);  
    92d0:	c3 01       	movw	r24, r6
    92d2:	b2 01       	movw	r22, r4
    92d4:	0e 94 55 7e 	call	0xfcaa	; 0xfcaa <sin>
    92d8:	6d 83       	std	Y+5, r22	; 0x05
    92da:	7e 83       	std	Y+6, r23	; 0x06
    92dc:	8f 83       	std	Y+7, r24	; 0x07
    92de:	98 87       	std	Y+8, r25	; 0x08
    92e0:	c3 01       	movw	r24, r6
    92e2:	b2 01       	movw	r22, r4
    92e4:	0e 94 94 7a 	call	0xf528	; 0xf528 <cos>
    92e8:	69 83       	std	Y+1, r22	; 0x01
    92ea:	7a 83       	std	Y+2, r23	; 0x02
    92ec:	8b 83       	std	Y+3, r24	; 0x03
    92ee:	9c 83       	std	Y+4, r25	; 0x04
  float sinz = sin (anguloz); float cosz = cos (anguloz); 
    92f0:	c7 01       	movw	r24, r14
    92f2:	b6 01       	movw	r22, r12
    92f4:	0e 94 55 7e 	call	0xfcaa	; 0xfcaa <sin>
    92f8:	1b 01       	movw	r2, r22
    92fa:	2c 01       	movw	r4, r24
    92fc:	c7 01       	movw	r24, r14
    92fe:	b6 01       	movw	r22, r12
    9300:	0e 94 94 7a 	call	0xf528	; 0xf528 <cos>
    9304:	5b 01       	movw	r10, r22
    9306:	6c 01       	movw	r12, r24
  matrix[0].x = cosy*cosz;  matrix[1].x = cosy*sinz; matrix[2].x = -siny;  
    9308:	69 81       	ldd	r22, Y+1	; 0x01
    930a:	7a 81       	ldd	r23, Y+2	; 0x02
    930c:	8b 81       	ldd	r24, Y+3	; 0x03
    930e:	9c 81       	ldd	r25, Y+4	; 0x04
    9310:	a6 01       	movw	r20, r12
    9312:	95 01       	movw	r18, r10
    9314:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    9318:	ed 89       	ldd	r30, Y+21	; 0x15
    931a:	fe 89       	ldd	r31, Y+22	; 0x16
    931c:	60 83       	st	Z, r22
    931e:	71 83       	std	Z+1, r23	; 0x01
    9320:	82 83       	std	Z+2, r24	; 0x02
    9322:	93 83       	std	Z+3, r25	; 0x03
    9324:	3c 96       	adiw	r30, 0x0c	; 12
    9326:	fc 8b       	std	Y+20, r31	; 0x14
    9328:	eb 8b       	std	Y+19, r30	; 0x13
    932a:	69 81       	ldd	r22, Y+1	; 0x01
    932c:	7a 81       	ldd	r23, Y+2	; 0x02
    932e:	8b 81       	ldd	r24, Y+3	; 0x03
    9330:	9c 81       	ldd	r25, Y+4	; 0x04
    9332:	a2 01       	movw	r20, r4
    9334:	91 01       	movw	r18, r2
    9336:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    933a:	ed 89       	ldd	r30, Y+21	; 0x15
    933c:	fe 89       	ldd	r31, Y+22	; 0x16
    933e:	64 87       	std	Z+12, r22	; 0x0c
    9340:	75 87       	std	Z+13, r23	; 0x0d
    9342:	86 87       	std	Z+14, r24	; 0x0e
    9344:	97 87       	std	Z+15, r25	; 0x0f
    9346:	78 96       	adiw	r30, 0x18	; 24
    9348:	fa 8b       	std	Y+18, r31	; 0x12
    934a:	e9 8b       	std	Y+17, r30	; 0x11
    934c:	8d 81       	ldd	r24, Y+5	; 0x05
    934e:	9e 81       	ldd	r25, Y+6	; 0x06
    9350:	af 81       	ldd	r26, Y+7	; 0x07
    9352:	b8 85       	ldd	r27, Y+8	; 0x08
    9354:	b0 58       	subi	r27, 0x80	; 128
    9356:	ed 89       	ldd	r30, Y+21	; 0x15
    9358:	fe 89       	ldd	r31, Y+22	; 0x16
    935a:	80 8f       	std	Z+24, r24	; 0x18
    935c:	91 8f       	std	Z+25, r25	; 0x19
    935e:	a2 8f       	std	Z+26, r26	; 0x1a
    9360:	b3 8f       	std	Z+27, r27	; 0x1b
  matrix[0].y = -cosx*sinz+sinx*siny*cosz;  matrix[1].y = cosx*cosz+sinx*siny*sinz; matrix[2].y = sinx*cosy;
    9362:	6d 85       	ldd	r22, Y+13	; 0x0d
    9364:	7e 85       	ldd	r23, Y+14	; 0x0e
    9366:	8f 85       	ldd	r24, Y+15	; 0x0f
    9368:	98 89       	ldd	r25, Y+16	; 0x10
    936a:	2d 81       	ldd	r18, Y+5	; 0x05
    936c:	3e 81       	ldd	r19, Y+6	; 0x06
    936e:	4f 81       	ldd	r20, Y+7	; 0x07
    9370:	58 85       	ldd	r21, Y+8	; 0x08
    9372:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    9376:	3b 01       	movw	r6, r22
    9378:	4c 01       	movw	r8, r24
    937a:	69 85       	ldd	r22, Y+9	; 0x09
    937c:	7a 85       	ldd	r23, Y+10	; 0x0a
    937e:	8b 85       	ldd	r24, Y+11	; 0x0b
    9380:	9c 85       	ldd	r25, Y+12	; 0x0c
    9382:	90 58       	subi	r25, 0x80	; 128
    9384:	a2 01       	movw	r20, r4
    9386:	91 01       	movw	r18, r2
    9388:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    938c:	7b 01       	movw	r14, r22
    938e:	8c 01       	movw	r16, r24
    9390:	c4 01       	movw	r24, r8
    9392:	b3 01       	movw	r22, r6
    9394:	a6 01       	movw	r20, r12
    9396:	95 01       	movw	r18, r10
    9398:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    939c:	9b 01       	movw	r18, r22
    939e:	ac 01       	movw	r20, r24
    93a0:	c8 01       	movw	r24, r16
    93a2:	b7 01       	movw	r22, r14
    93a4:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    93a8:	ed 89       	ldd	r30, Y+21	; 0x15
    93aa:	fe 89       	ldd	r31, Y+22	; 0x16
    93ac:	64 83       	std	Z+4, r22	; 0x04
    93ae:	75 83       	std	Z+5, r23	; 0x05
    93b0:	86 83       	std	Z+6, r24	; 0x06
    93b2:	97 83       	std	Z+7, r25	; 0x07
    93b4:	69 85       	ldd	r22, Y+9	; 0x09
    93b6:	7a 85       	ldd	r23, Y+10	; 0x0a
    93b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    93ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    93bc:	a6 01       	movw	r20, r12
    93be:	95 01       	movw	r18, r10
    93c0:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    93c4:	7b 01       	movw	r14, r22
    93c6:	8c 01       	movw	r16, r24
    93c8:	c4 01       	movw	r24, r8
    93ca:	b3 01       	movw	r22, r6
    93cc:	a2 01       	movw	r20, r4
    93ce:	91 01       	movw	r18, r2
    93d0:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    93d4:	9b 01       	movw	r18, r22
    93d6:	ac 01       	movw	r20, r24
    93d8:	c8 01       	movw	r24, r16
    93da:	b7 01       	movw	r22, r14
    93dc:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    93e0:	eb 89       	ldd	r30, Y+19	; 0x13
    93e2:	fc 89       	ldd	r31, Y+20	; 0x14
    93e4:	64 83       	std	Z+4, r22	; 0x04
    93e6:	75 83       	std	Z+5, r23	; 0x05
    93e8:	86 83       	std	Z+6, r24	; 0x06
    93ea:	97 83       	std	Z+7, r25	; 0x07
    93ec:	6d 85       	ldd	r22, Y+13	; 0x0d
    93ee:	7e 85       	ldd	r23, Y+14	; 0x0e
    93f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    93f2:	98 89       	ldd	r25, Y+16	; 0x10
    93f4:	29 81       	ldd	r18, Y+1	; 0x01
    93f6:	3a 81       	ldd	r19, Y+2	; 0x02
    93f8:	4b 81       	ldd	r20, Y+3	; 0x03
    93fa:	5c 81       	ldd	r21, Y+4	; 0x04
    93fc:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    9400:	e9 89       	ldd	r30, Y+17	; 0x11
    9402:	fa 89       	ldd	r31, Y+18	; 0x12
    9404:	64 83       	std	Z+4, r22	; 0x04
    9406:	75 83       	std	Z+5, r23	; 0x05
    9408:	86 83       	std	Z+6, r24	; 0x06
    940a:	97 83       	std	Z+7, r25	; 0x07
  matrix[0].z = sinx*sinz+cosx*siny*cosz;  matrix[1].z = -sinx*cosz+cosx*siny*sinz; matrix[2].z = cosx*cosy;
    940c:	69 85       	ldd	r22, Y+9	; 0x09
    940e:	7a 85       	ldd	r23, Y+10	; 0x0a
    9410:	8b 85       	ldd	r24, Y+11	; 0x0b
    9412:	9c 85       	ldd	r25, Y+12	; 0x0c
    9414:	2d 81       	ldd	r18, Y+5	; 0x05
    9416:	3e 81       	ldd	r19, Y+6	; 0x06
    9418:	4f 81       	ldd	r20, Y+7	; 0x07
    941a:	58 85       	ldd	r21, Y+8	; 0x08
    941c:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    9420:	3b 01       	movw	r6, r22
    9422:	4c 01       	movw	r8, r24
    9424:	6d 85       	ldd	r22, Y+13	; 0x0d
    9426:	7e 85       	ldd	r23, Y+14	; 0x0e
    9428:	8f 85       	ldd	r24, Y+15	; 0x0f
    942a:	98 89       	ldd	r25, Y+16	; 0x10
    942c:	a2 01       	movw	r20, r4
    942e:	91 01       	movw	r18, r2
    9430:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    9434:	7b 01       	movw	r14, r22
    9436:	8c 01       	movw	r16, r24
    9438:	c4 01       	movw	r24, r8
    943a:	b3 01       	movw	r22, r6
    943c:	a6 01       	movw	r20, r12
    943e:	95 01       	movw	r18, r10
    9440:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    9444:	9b 01       	movw	r18, r22
    9446:	ac 01       	movw	r20, r24
    9448:	c8 01       	movw	r24, r16
    944a:	b7 01       	movw	r22, r14
    944c:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    9450:	ed 89       	ldd	r30, Y+21	; 0x15
    9452:	fe 89       	ldd	r31, Y+22	; 0x16
    9454:	60 87       	std	Z+8, r22	; 0x08
    9456:	71 87       	std	Z+9, r23	; 0x09
    9458:	82 87       	std	Z+10, r24	; 0x0a
    945a:	93 87       	std	Z+11, r25	; 0x0b
    945c:	6d 85       	ldd	r22, Y+13	; 0x0d
    945e:	7e 85       	ldd	r23, Y+14	; 0x0e
    9460:	8f 85       	ldd	r24, Y+15	; 0x0f
    9462:	98 89       	ldd	r25, Y+16	; 0x10
    9464:	90 58       	subi	r25, 0x80	; 128
    9466:	a6 01       	movw	r20, r12
    9468:	95 01       	movw	r18, r10
    946a:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    946e:	7b 01       	movw	r14, r22
    9470:	8c 01       	movw	r16, r24
    9472:	c4 01       	movw	r24, r8
    9474:	b3 01       	movw	r22, r6
    9476:	a2 01       	movw	r20, r4
    9478:	91 01       	movw	r18, r2
    947a:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    947e:	9b 01       	movw	r18, r22
    9480:	ac 01       	movw	r20, r24
    9482:	c8 01       	movw	r24, r16
    9484:	b7 01       	movw	r22, r14
    9486:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    948a:	eb 89       	ldd	r30, Y+19	; 0x13
    948c:	fc 89       	ldd	r31, Y+20	; 0x14
    948e:	60 87       	std	Z+8, r22	; 0x08
    9490:	71 87       	std	Z+9, r23	; 0x09
    9492:	82 87       	std	Z+10, r24	; 0x0a
    9494:	93 87       	std	Z+11, r25	; 0x0b
    9496:	69 85       	ldd	r22, Y+9	; 0x09
    9498:	7a 85       	ldd	r23, Y+10	; 0x0a
    949a:	8b 85       	ldd	r24, Y+11	; 0x0b
    949c:	9c 85       	ldd	r25, Y+12	; 0x0c
    949e:	29 81       	ldd	r18, Y+1	; 0x01
    94a0:	3a 81       	ldd	r19, Y+2	; 0x02
    94a2:	4b 81       	ldd	r20, Y+3	; 0x03
    94a4:	5c 81       	ldd	r21, Y+4	; 0x04
    94a6:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    94aa:	e9 89       	ldd	r30, Y+17	; 0x11
    94ac:	fa 89       	ldd	r31, Y+18	; 0x12
    94ae:	60 87       	std	Z+8, r22	; 0x08
    94b0:	71 87       	std	Z+9, r23	; 0x09
    94b2:	82 87       	std	Z+10, r24	; 0x0a
    94b4:	93 87       	std	Z+11, r25	; 0x0b
}
    94b6:	66 96       	adiw	r28, 0x16	; 22
    94b8:	0f b6       	in	r0, 0x3f	; 63
    94ba:	f8 94       	cli
    94bc:	de bf       	out	0x3e, r29	; 62
    94be:	0f be       	out	0x3f, r0	; 63
    94c0:	cd bf       	out	0x3d, r28	; 61
    94c2:	cf 91       	pop	r28
    94c4:	df 91       	pop	r29
    94c6:	1f 91       	pop	r17
    94c8:	0f 91       	pop	r16
    94ca:	ff 90       	pop	r15
    94cc:	ef 90       	pop	r14
    94ce:	df 90       	pop	r13
    94d0:	cf 90       	pop	r12
    94d2:	bf 90       	pop	r11
    94d4:	af 90       	pop	r10
    94d6:	9f 90       	pop	r9
    94d8:	8f 90       	pop	r8
    94da:	7f 90       	pop	r7
    94dc:	6f 90       	pop	r6
    94de:	5f 90       	pop	r5
    94e0:	4f 90       	pop	r4
    94e2:	3f 90       	pop	r3
    94e4:	2f 90       	pop	r2
    94e6:	08 95       	ret

000094e8 <_ZN9Bluetooth12blue_processEhhPh>:
	return 0;
}
		
void Bluetooth::blue_process (byte instruccion, byte largo, byte* data) {
	
    94e8:	08 95       	ret

000094ea <_ZN9Bluetooth9ATcommandEPKcihz>:
		}
	}
	return false;
}

byte Bluetooth::ATcommand (const char *command, int timeout, byte numstrings, ...) {
    94ea:	2f 92       	push	r2
    94ec:	3f 92       	push	r3
    94ee:	4f 92       	push	r4
    94f0:	5f 92       	push	r5
    94f2:	6f 92       	push	r6
    94f4:	7f 92       	push	r7
    94f6:	8f 92       	push	r8
    94f8:	9f 92       	push	r9
    94fa:	af 92       	push	r10
    94fc:	bf 92       	push	r11
    94fe:	cf 92       	push	r12
    9500:	df 92       	push	r13
    9502:	ef 92       	push	r14
    9504:	ff 92       	push	r15
    9506:	0f 93       	push	r16
    9508:	1f 93       	push	r17
    950a:	df 93       	push	r29
    950c:	cf 93       	push	r28
    950e:	cd b7       	in	r28, 0x3d	; 61
    9510:	de b7       	in	r29, 0x3e	; 62
    9512:	2c 97       	sbiw	r28, 0x0c	; 12
    9514:	0f b6       	in	r0, 0x3f	; 63
    9516:	f8 94       	cli
    9518:	de bf       	out	0x3e, r29	; 62
    951a:	0f be       	out	0x3f, r0	; 63
    951c:	cd bf       	out	0x3d, r28	; 61
    951e:	4f a0       	ldd	r4, Y+39	; 0x27
		for (byte f=0; f<numstrings; f++) {
			if (R.indexOf(key[f])>-1) {return f+1;}
		}
	}
	return 0;
}
    9520:	2d b6       	in	r2, 0x3d	; 61
    9522:	3e b6       	in	r3, 0x3e	; 62
	return false;
}

byte Bluetooth::ATcommand (const char *command, int timeout, byte numstrings, ...) {
	// capturar parámetros
	String key [numstrings];
    9524:	84 2c       	mov	r8, r4
    9526:	99 24       	eor	r9, r9
    9528:	c4 01       	movw	r24, r8
    952a:	88 0f       	add	r24, r24
    952c:	99 1f       	adc	r25, r25
    952e:	88 0d       	add	r24, r8
    9530:	99 1d       	adc	r25, r9
    9532:	88 0f       	add	r24, r24
    9534:	99 1f       	adc	r25, r25
    9536:	2d b7       	in	r18, 0x3d	; 61
    9538:	3e b7       	in	r19, 0x3e	; 62
    953a:	28 1b       	sub	r18, r24
    953c:	39 0b       	sbc	r19, r25
    953e:	0f b6       	in	r0, 0x3f	; 63
    9540:	f8 94       	cli
    9542:	3e bf       	out	0x3e, r19	; 62
    9544:	0f be       	out	0x3f, r0	; 63
    9546:	2d bf       	out	0x3d, r18	; 61
    9548:	6d b6       	in	r6, 0x3d	; 61
    954a:	7e b6       	in	r7, 0x3e	; 62
    954c:	08 94       	sec
    954e:	61 1c       	adc	r6, r1
    9550:	71 1c       	adc	r7, r1
    9552:	83 01       	movw	r16, r6
    9554:	ee 24       	eor	r14, r14
    9556:	ff 24       	eor	r15, r15
    9558:	64 01       	movw	r12, r8
    955a:	08 94       	sec
    955c:	c1 1c       	adc	r12, r1
    955e:	d1 1c       	adc	r13, r1
    9560:	04 c0       	rjmp	.+8      	; 0x956a <_ZN9Bluetooth9ATcommandEPKcihz+0x80>
    9562:	67 e1       	ldi	r22, 0x17	; 23
    9564:	72 e0       	ldi	r23, 0x02	; 2
    9566:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    956a:	c8 01       	movw	r24, r16
    956c:	08 94       	sec
    956e:	e1 1c       	adc	r14, r1
    9570:	f1 1c       	adc	r15, r1
    9572:	0a 5f       	subi	r16, 0xFA	; 250
    9574:	1f 4f       	sbci	r17, 0xFF	; 255
    9576:	ec 14       	cp	r14, r12
    9578:	fd 04       	cpc	r15, r13
    957a:	99 f7       	brne	.-26     	; 0x9562 <_ZN9Bluetooth9ATcommandEPKcihz+0x78>
		}
	}
	return false;
}

byte Bluetooth::ATcommand (const char *command, int timeout, byte numstrings, ...) {
    957c:	ce 01       	movw	r24, r28
    957e:	88 96       	adiw	r24, 0x28	; 40
    9580:	6c 01       	movw	r12, r24
    9582:	10 e0       	ldi	r17, 0x00	; 0
	// capturar parámetros
	String key [numstrings];
	va_list args;
	va_start (args, numstrings);
	for (byte f=0; f<numstrings; f++) {
		key [f] = String (va_arg(args,const char*));
    9584:	7e 01       	movw	r14, r28
    9586:	08 94       	sec
    9588:	e1 1c       	adc	r14, r1
    958a:	f1 1c       	adc	r15, r1
    958c:	06 e0       	ldi	r16, 0x06	; 6
    958e:	13 c0       	rjmp	.+38     	; 0x95b6 <_ZN9Bluetooth9ATcommandEPKcihz+0xcc>
    9590:	f6 01       	movw	r30, r12
    9592:	61 91       	ld	r22, Z+
    9594:	71 91       	ld	r23, Z+
    9596:	6f 01       	movw	r12, r30
    9598:	c7 01       	movw	r24, r14
    959a:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    959e:	10 9f       	mul	r17, r16
    95a0:	c0 01       	movw	r24, r0
    95a2:	11 24       	eor	r1, r1
    95a4:	86 0d       	add	r24, r6
    95a6:	97 1d       	adc	r25, r7
    95a8:	b7 01       	movw	r22, r14
    95aa:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    95ae:	c7 01       	movw	r24, r14
    95b0:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
byte Bluetooth::ATcommand (const char *command, int timeout, byte numstrings, ...) {
	// capturar parámetros
	String key [numstrings];
	va_list args;
	va_start (args, numstrings);
	for (byte f=0; f<numstrings; f++) {
    95b4:	1f 5f       	subi	r17, 0xFF	; 255
    95b6:	14 15       	cp	r17, r4
    95b8:	58 f3       	brcs	.-42     	; 0x9590 <_ZN9Bluetooth9ATcommandEPKcihz+0xa6>
		key [f] = String (va_arg(args,const char*));
	}
	va_end(args);
	// enviar comando
	Serial.flush();
    95ba:	89 e9       	ldi	r24, 0x99	; 153
    95bc:	94 e1       	ldi	r25, 0x14	; 20
    95be:	0e 94 69 75 	call	0xead2	; 0xead2 <_ZN14HardwareSerial5flushEv>
	Serial.print (command); 
    95c2:	89 e9       	ldi	r24, 0x99	; 153
    95c4:	94 e1       	ldi	r25, 0x14	; 20
    95c6:	6b a1       	ldd	r22, Y+35	; 0x23
    95c8:	7c a1       	ldd	r23, Y+36	; 0x24
    95ca:	0e 94 2b 76 	call	0xec56	; 0xec56 <_ZN5Print5printEPKc>
	delay (timeout);            // wait response
    95ce:	6d a1       	ldd	r22, Y+37	; 0x25
    95d0:	7e a1       	ldd	r23, Y+38	; 0x26
    95d2:	88 27       	eor	r24, r24
    95d4:	77 fd       	sbrc	r23, 7
    95d6:	80 95       	com	r24
    95d8:	98 2f       	mov	r25, r24
    95da:	0e 94 69 70 	call	0xe0d2	; 0xe0d2 <_Z5delaym>
	// leer respuesta
	byte len = Serial.available();
    95de:	89 e9       	ldi	r24, 0x99	; 153
    95e0:	94 e1       	ldi	r25, 0x14	; 20
    95e2:	0e 94 34 75 	call	0xea68	; 0xea68 <_ZN14HardwareSerial9availableEv>
    95e6:	b8 2e       	mov	r11, r24
	if (len > 0) {
    95e8:	88 23       	and	r24, r24
    95ea:	09 f4       	brne	.+2      	; 0x95ee <_ZN9Bluetooth9ATcommandEPKcihz+0x104>
    95ec:	58 c0       	rjmp	.+176    	; 0x969e <_ZN9Bluetooth9ATcommandEPKcihz+0x1b4>
    95ee:	ad b6       	in	r10, 0x3d	; 61
    95f0:	5e b6       	in	r5, 0x3e	; 62
		char respuesta[len+1];
    95f2:	e8 2e       	mov	r14, r24
    95f4:	ff 24       	eor	r15, r15
    95f6:	c7 01       	movw	r24, r14
    95f8:	01 96       	adiw	r24, 0x01	; 1
    95fa:	2d b7       	in	r18, 0x3d	; 61
    95fc:	3e b7       	in	r19, 0x3e	; 62
    95fe:	28 1b       	sub	r18, r24
    9600:	39 0b       	sbc	r19, r25
    9602:	0f b6       	in	r0, 0x3f	; 63
    9604:	f8 94       	cli
    9606:	3e bf       	out	0x3e, r19	; 62
    9608:	0f be       	out	0x3f, r0	; 63
    960a:	2d bf       	out	0x3d, r18	; 61
    960c:	cd b6       	in	r12, 0x3d	; 61
    960e:	de b6       	in	r13, 0x3e	; 62
    9610:	08 94       	sec
    9612:	c1 1c       	adc	r12, r1
    9614:	d1 1c       	adc	r13, r1
    9616:	00 e0       	ldi	r16, 0x00	; 0
    9618:	10 e0       	ldi	r17, 0x00	; 0
		for (byte f=0; f<len; f++){
			respuesta[f] = Serial.read();
    961a:	89 e9       	ldi	r24, 0x99	; 153
    961c:	94 e1       	ldi	r25, 0x14	; 20
    961e:	0e 94 45 75 	call	0xea8a	; 0xea8a <_ZN14HardwareSerial4readEv>
    9622:	f6 01       	movw	r30, r12
    9624:	e0 0f       	add	r30, r16
    9626:	f1 1f       	adc	r31, r17
    9628:	80 83       	st	Z, r24
    962a:	0f 5f       	subi	r16, 0xFF	; 255
    962c:	1f 4f       	sbci	r17, 0xFF	; 255
	delay (timeout);            // wait response
	// leer respuesta
	byte len = Serial.available();
	if (len > 0) {
		char respuesta[len+1];
		for (byte f=0; f<len; f++){
    962e:	0b 15       	cp	r16, r11
    9630:	a0 f3       	brcs	.-24     	; 0x961a <_ZN9Bluetooth9ATcommandEPKcihz+0x130>
			respuesta[f] = Serial.read();
		}
		respuesta[len] = NULL;
    9632:	ec 0c       	add	r14, r12
    9634:	fd 1c       	adc	r15, r13
    9636:	f7 01       	movw	r30, r14
    9638:	10 82       	st	Z, r1
		String R = String (respuesta);
    963a:	8e 01       	movw	r16, r28
    963c:	09 5f       	subi	r16, 0xF9	; 249
    963e:	1f 4f       	sbci	r17, 0xFF	; 255
    9640:	c8 01       	movw	r24, r16
    9642:	b6 01       	movw	r22, r12
    9644:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    9648:	ff 24       	eor	r15, r15
		// comparar con cada uno de los argumentos
		for (byte f=0; f<numstrings; f++) {
			if (R.indexOf(key[f])>-1) {return f+1;}
    964a:	26 e0       	ldi	r18, 0x06	; 6
    964c:	e2 2e       	mov	r14, r18
    964e:	1a c0       	rjmp	.+52     	; 0x9684 <_ZN9Bluetooth9ATcommandEPKcihz+0x19a>
    9650:	fe 9c       	mul	r15, r14
    9652:	b0 01       	movw	r22, r0
    9654:	11 24       	eor	r1, r1
    9656:	66 0d       	add	r22, r6
    9658:	77 1d       	adc	r23, r7
    965a:	c8 01       	movw	r24, r16
    965c:	0e 94 bb 78 	call	0xf176	; 0xf176 <_ZNK6String7indexOfERKS_>
    9660:	2f 2d       	mov	r18, r15
    9662:	2f 5f       	subi	r18, 0xFF	; 255
    9664:	97 fd       	sbrc	r25, 7
    9666:	0d c0       	rjmp	.+26     	; 0x9682 <_ZN9Bluetooth9ATcommandEPKcihz+0x198>
    9668:	f2 2e       	mov	r15, r18
		}
    966a:	c8 01       	movw	r24, r16
    966c:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    9670:	8a 2d       	mov	r24, r10
    9672:	95 2d       	mov	r25, r5
    9674:	9c 01       	movw	r18, r24
    9676:	0f b6       	in	r0, 0x3f	; 63
    9678:	f8 94       	cli
    967a:	3e bf       	out	0x3e, r19	; 62
    967c:	0f be       	out	0x3f, r0	; 63
    967e:	2d bf       	out	0x3d, r18	; 61
    9680:	0f c0       	rjmp	.+30     	; 0x96a0 <_ZN9Bluetooth9ATcommandEPKcihz+0x1b6>
			respuesta[f] = Serial.read();
		}
		respuesta[len] = NULL;
		String R = String (respuesta);
		// comparar con cada uno de los argumentos
		for (byte f=0; f<numstrings; f++) {
    9682:	f2 2e       	mov	r15, r18
    9684:	f4 14       	cp	r15, r4
    9686:	20 f3       	brcs	.-56     	; 0x9650 <_ZN9Bluetooth9ATcommandEPKcihz+0x166>
			if (R.indexOf(key[f])>-1) {return f+1;}
		}
    9688:	c8 01       	movw	r24, r16
    968a:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    968e:	8a 2d       	mov	r24, r10
    9690:	95 2d       	mov	r25, r5
    9692:	9c 01       	movw	r18, r24
    9694:	0f b6       	in	r0, 0x3f	; 63
    9696:	f8 94       	cli
    9698:	3e bf       	out	0x3e, r19	; 62
    969a:	0f be       	out	0x3f, r0	; 63
    969c:	2d bf       	out	0x3d, r18	; 61
    969e:	ff 24       	eor	r15, r15
	}
	return 0;
    96a0:	84 01       	movw	r16, r8
    96a2:	00 0f       	add	r16, r16
    96a4:	11 1f       	adc	r17, r17
    96a6:	08 0d       	add	r16, r8
    96a8:	19 1d       	adc	r17, r9
    96aa:	00 0f       	add	r16, r16
    96ac:	11 1f       	adc	r17, r17
    96ae:	06 0d       	add	r16, r6
    96b0:	17 1d       	adc	r17, r7
    96b2:	06 15       	cp	r16, r6
    96b4:	17 05       	cpc	r17, r7
    96b6:	31 f0       	breq	.+12     	; 0x96c4 <_ZN9Bluetooth9ATcommandEPKcihz+0x1da>
    96b8:	06 50       	subi	r16, 0x06	; 6
    96ba:	10 40       	sbci	r17, 0x00	; 0
    96bc:	c8 01       	movw	r24, r16
    96be:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    96c2:	f7 cf       	rjmp	.-18     	; 0x96b2 <_ZN9Bluetooth9ATcommandEPKcihz+0x1c8>
}
    96c4:	8f 2d       	mov	r24, r15
    96c6:	0f b6       	in	r0, 0x3f	; 63
    96c8:	f8 94       	cli
    96ca:	3e be       	out	0x3e, r3	; 62
    96cc:	0f be       	out	0x3f, r0	; 63
    96ce:	2d be       	out	0x3d, r2	; 61
    96d0:	2c 96       	adiw	r28, 0x0c	; 12
    96d2:	0f b6       	in	r0, 0x3f	; 63
    96d4:	f8 94       	cli
    96d6:	de bf       	out	0x3e, r29	; 62
    96d8:	0f be       	out	0x3f, r0	; 63
    96da:	cd bf       	out	0x3d, r28	; 61
    96dc:	cf 91       	pop	r28
    96de:	df 91       	pop	r29
    96e0:	1f 91       	pop	r17
    96e2:	0f 91       	pop	r16
    96e4:	ff 90       	pop	r15
    96e6:	ef 90       	pop	r14
    96e8:	df 90       	pop	r13
    96ea:	cf 90       	pop	r12
    96ec:	bf 90       	pop	r11
    96ee:	af 90       	pop	r10
    96f0:	9f 90       	pop	r9
    96f2:	8f 90       	pop	r8
    96f4:	7f 90       	pop	r7
    96f6:	6f 90       	pop	r6
    96f8:	5f 90       	pop	r5
    96fa:	4f 90       	pop	r4
    96fc:	3f 90       	pop	r3
    96fe:	2f 90       	pop	r2
    9700:	08 95       	ret

00009702 <_ZN9Bluetooth7connectEv>:
	if (status == MODE_FAST) {blue_serial.send_msg (instruccion, largo, data);}
}

// maquinita de estados que gestiona la conexión al otro módulo bluetooth
// puede ser invocada en cualquier momento, por ejemplo si la conexión fue establecida desde afuera
bool Bluetooth::connect () {
    9702:	2f 92       	push	r2
    9704:	3f 92       	push	r3
    9706:	4f 92       	push	r4
    9708:	5f 92       	push	r5
    970a:	6f 92       	push	r6
    970c:	7f 92       	push	r7
    970e:	8f 92       	push	r8
    9710:	9f 92       	push	r9
    9712:	af 92       	push	r10
    9714:	bf 92       	push	r11
    9716:	cf 92       	push	r12
    9718:	df 92       	push	r13
    971a:	ef 92       	push	r14
    971c:	ff 92       	push	r15
    971e:	0f 93       	push	r16
    9720:	1f 93       	push	r17
    9722:	cf 93       	push	r28
    9724:	df 93       	push	r29
    9726:	ec 01       	movw	r28, r24
    9728:	04 e0       	ldi	r16, 0x04	; 4
	byte retries = 4;                                 // poner un #define
	while (retries > 0) {
		switch (status) {
			case NOT_PRESENT:
				if (ATcommand("+++\r", 300, 1, "OK")) {status = CONNECTED;}       // esto contempla la posibilidad de que ya esté conectado, 
    972a:	b8 e1       	ldi	r27, 0x18	; 24
    972c:	8b 2e       	mov	r8, r27
    972e:	b2 e0       	ldi	r27, 0x02	; 2
    9730:	9b 2e       	mov	r9, r27
    9732:	ac e2       	ldi	r26, 0x2C	; 44
    9734:	ea 2e       	mov	r14, r26
    9736:	a1 e0       	ldi	r26, 0x01	; 1
    9738:	fa 2e       	mov	r15, r26
    973a:	bb 24       	eor	r11, r11
    973c:	b3 94       	inc	r11
    973e:	fd e1       	ldi	r31, 0x1D	; 29
    9740:	cf 2e       	mov	r12, r31
    9742:	f2 e0       	ldi	r31, 0x02	; 2
    9744:	df 2e       	mov	r13, r31
																																						 // pero nunca en modo "fast" 
				else if (ATcommand("AT\r", 300, 1, "OK")) {                    // está vivo
					if (ATcommand("ATSI,3\r", 500, 1, ",1")) {status = CONNECTED;}
    9746:	e2 e0       	ldi	r30, 0x02	; 2
    9748:	ae 2e       	mov	r10, r30
				}
				else {retries --;}
				break;
			case UNCONNECTED: {
				retries --;
				byte conn = ATcommand("ATDM,00066601574D,1101\r", 3800, 2, "CONNECT", "NO ANSWER");    // bien hardcodeado el mac address, otro #define
    974a:	78 ed       	ldi	r23, 0xD8	; 216
    974c:	27 2e       	mov	r2, r23
    974e:	7e e0       	ldi	r23, 0x0E	; 14
    9750:	37 2e       	mov	r3, r23
    9752:	67 e4       	ldi	r22, 0x47	; 71
    9754:	46 2e       	mov	r4, r22
    9756:	62 e0       	ldi	r22, 0x02	; 2
    9758:	56 2e       	mov	r5, r22
    975a:	5f e4       	ldi	r21, 0x4F	; 79
    975c:	65 2e       	mov	r6, r21
    975e:	52 e0       	ldi	r21, 0x02	; 2
    9760:	75 2e       	mov	r7, r21
// maquinita de estados que gestiona la conexión al otro módulo bluetooth
// puede ser invocada en cualquier momento, por ejemplo si la conexión fue establecida desde afuera
bool Bluetooth::connect () {
	byte retries = 4;                                 // poner un #define
	while (retries > 0) {
		switch (status) {
    9762:	1d 85       	ldd	r17, Y+13	; 0x0d
    9764:	11 30       	cpi	r17, 0x01	; 1
    9766:	09 f4       	brne	.+2      	; 0x976a <_ZN9Bluetooth7connectEv+0x68>
    9768:	87 c0       	rjmp	.+270    	; 0x9878 <_ZN9Bluetooth7connectEv+0x176>
    976a:	11 30       	cpi	r17, 0x01	; 1
    976c:	38 f0       	brcs	.+14     	; 0x977c <_ZN9Bluetooth7connectEv+0x7a>
    976e:	12 30       	cpi	r17, 0x02	; 2
    9770:	09 f4       	brne	.+2      	; 0x9774 <_ZN9Bluetooth7connectEv+0x72>
    9772:	b8 c0       	rjmp	.+368    	; 0x98e4 <_ZN9Bluetooth7connectEv+0x1e2>
    9774:	13 30       	cpi	r17, 0x03	; 3
    9776:	a9 f7       	brne	.-22     	; 0x9762 <_ZN9Bluetooth7connectEv+0x60>
    9778:	81 e0       	ldi	r24, 0x01	; 1
    977a:	fe c0       	rjmp	.+508    	; 0x9978 <_ZN9Bluetooth7connectEv+0x276>
			case NOT_PRESENT:
				if (ATcommand("+++\r", 300, 1, "OK")) {status = CONNECTED;}       // esto contempla la posibilidad de que ya esté conectado, 
    977c:	2d b7       	in	r18, 0x3d	; 61
    977e:	3e b7       	in	r19, 0x3e	; 62
    9780:	29 50       	subi	r18, 0x09	; 9
    9782:	30 40       	sbci	r19, 0x00	; 0
    9784:	0f b6       	in	r0, 0x3f	; 63
    9786:	f8 94       	cli
    9788:	3e bf       	out	0x3e, r19	; 62
    978a:	0f be       	out	0x3f, r0	; 63
    978c:	2d bf       	out	0x3d, r18	; 61
    978e:	ed b7       	in	r30, 0x3d	; 61
    9790:	fe b7       	in	r31, 0x3e	; 62
    9792:	31 96       	adiw	r30, 0x01	; 1
    9794:	ad b7       	in	r26, 0x3d	; 61
    9796:	be b7       	in	r27, 0x3e	; 62
    9798:	12 96       	adiw	r26, 0x02	; 2
    979a:	dc 93       	st	X, r29
    979c:	ce 93       	st	-X, r28
    979e:	11 97       	sbiw	r26, 0x01	; 1
    97a0:	93 82       	std	Z+3, r9	; 0x03
    97a2:	82 82       	std	Z+2, r8	; 0x02
    97a4:	f5 82       	std	Z+5, r15	; 0x05
    97a6:	e4 82       	std	Z+4, r14	; 0x04
    97a8:	b6 82       	std	Z+6, r11	; 0x06
    97aa:	d0 86       	std	Z+8, r13	; 0x08
    97ac:	c7 82       	std	Z+7, r12	; 0x07
    97ae:	0e 94 75 4a 	call	0x94ea	; 0x94ea <_ZN9Bluetooth9ATcommandEPKcihz>
    97b2:	2d b7       	in	r18, 0x3d	; 61
    97b4:	3e b7       	in	r19, 0x3e	; 62
    97b6:	27 5f       	subi	r18, 0xF7	; 247
    97b8:	3f 4f       	sbci	r19, 0xFF	; 255
    97ba:	0f b6       	in	r0, 0x3f	; 63
    97bc:	f8 94       	cli
    97be:	3e bf       	out	0x3e, r19	; 62
    97c0:	0f be       	out	0x3f, r0	; 63
    97c2:	2d bf       	out	0x3d, r18	; 61
    97c4:	88 23       	and	r24, r24
    97c6:	09 f0       	breq	.+2      	; 0x97ca <_ZN9Bluetooth7connectEv+0xc8>
    97c8:	53 c0       	rjmp	.+166    	; 0x9870 <_ZN9Bluetooth7connectEv+0x16e>
																																						 // pero nunca en modo "fast" 
				else if (ATcommand("AT\r", 300, 1, "OK")) {                    // está vivo
    97ca:	8d b7       	in	r24, 0x3d	; 61
    97cc:	9e b7       	in	r25, 0x3e	; 62
    97ce:	09 97       	sbiw	r24, 0x09	; 9
    97d0:	0f b6       	in	r0, 0x3f	; 63
    97d2:	f8 94       	cli
    97d4:	9e bf       	out	0x3e, r25	; 62
    97d6:	0f be       	out	0x3f, r0	; 63
    97d8:	8d bf       	out	0x3d, r24	; 61
    97da:	ed b7       	in	r30, 0x3d	; 61
    97dc:	fe b7       	in	r31, 0x3e	; 62
    97de:	31 96       	adiw	r30, 0x01	; 1
    97e0:	ad b7       	in	r26, 0x3d	; 61
    97e2:	be b7       	in	r27, 0x3e	; 62
    97e4:	12 96       	adiw	r26, 0x02	; 2
    97e6:	dc 93       	st	X, r29
    97e8:	ce 93       	st	-X, r28
    97ea:	11 97       	sbiw	r26, 0x01	; 1
    97ec:	20 e2       	ldi	r18, 0x20	; 32
    97ee:	32 e0       	ldi	r19, 0x02	; 2
    97f0:	33 83       	std	Z+3, r19	; 0x03
    97f2:	22 83       	std	Z+2, r18	; 0x02
    97f4:	f5 82       	std	Z+5, r15	; 0x05
    97f6:	e4 82       	std	Z+4, r14	; 0x04
    97f8:	b6 82       	std	Z+6, r11	; 0x06
    97fa:	d0 86       	std	Z+8, r13	; 0x08
    97fc:	c7 82       	std	Z+7, r12	; 0x07
    97fe:	0e 94 75 4a 	call	0x94ea	; 0x94ea <_ZN9Bluetooth9ATcommandEPKcihz>
    9802:	ad b7       	in	r26, 0x3d	; 61
    9804:	be b7       	in	r27, 0x3e	; 62
    9806:	19 96       	adiw	r26, 0x09	; 9
    9808:	0f b6       	in	r0, 0x3f	; 63
    980a:	f8 94       	cli
    980c:	be bf       	out	0x3e, r27	; 62
    980e:	0f be       	out	0x3f, r0	; 63
    9810:	ad bf       	out	0x3d, r26	; 61
    9812:	88 23       	and	r24, r24
    9814:	79 f1       	breq	.+94     	; 0x9874 <_ZN9Bluetooth7connectEv+0x172>
					if (ATcommand("ATSI,3\r", 500, 1, ",1")) {status = CONNECTED;}
    9816:	2d b7       	in	r18, 0x3d	; 61
    9818:	3e b7       	in	r19, 0x3e	; 62
    981a:	29 50       	subi	r18, 0x09	; 9
    981c:	30 40       	sbci	r19, 0x00	; 0
    981e:	0f b6       	in	r0, 0x3f	; 63
    9820:	f8 94       	cli
    9822:	3e bf       	out	0x3e, r19	; 62
    9824:	0f be       	out	0x3f, r0	; 63
    9826:	2d bf       	out	0x3d, r18	; 61
    9828:	ed b7       	in	r30, 0x3d	; 61
    982a:	fe b7       	in	r31, 0x3e	; 62
    982c:	31 96       	adiw	r30, 0x01	; 1
    982e:	ad b7       	in	r26, 0x3d	; 61
    9830:	be b7       	in	r27, 0x3e	; 62
    9832:	12 96       	adiw	r26, 0x02	; 2
    9834:	dc 93       	st	X, r29
    9836:	ce 93       	st	-X, r28
    9838:	11 97       	sbiw	r26, 0x01	; 1
    983a:	24 e2       	ldi	r18, 0x24	; 36
    983c:	32 e0       	ldi	r19, 0x02	; 2
    983e:	33 83       	std	Z+3, r19	; 0x03
    9840:	22 83       	std	Z+2, r18	; 0x02
    9842:	84 ef       	ldi	r24, 0xF4	; 244
    9844:	91 e0       	ldi	r25, 0x01	; 1
    9846:	95 83       	std	Z+5, r25	; 0x05
    9848:	84 83       	std	Z+4, r24	; 0x04
    984a:	b6 82       	std	Z+6, r11	; 0x06
    984c:	ac e2       	ldi	r26, 0x2C	; 44
    984e:	b2 e0       	ldi	r27, 0x02	; 2
    9850:	b0 87       	std	Z+8, r27	; 0x08
    9852:	a7 83       	std	Z+7, r26	; 0x07
    9854:	0e 94 75 4a 	call	0x94ea	; 0x94ea <_ZN9Bluetooth9ATcommandEPKcihz>
    9858:	2d b7       	in	r18, 0x3d	; 61
    985a:	3e b7       	in	r19, 0x3e	; 62
    985c:	27 5f       	subi	r18, 0xF7	; 247
    985e:	3f 4f       	sbci	r19, 0xFF	; 255
    9860:	0f b6       	in	r0, 0x3f	; 63
    9862:	f8 94       	cli
    9864:	3e bf       	out	0x3e, r19	; 62
    9866:	0f be       	out	0x3f, r0	; 63
    9868:	2d bf       	out	0x3d, r18	; 61
    986a:	88 23       	and	r24, r24
    986c:	09 f4       	brne	.+2      	; 0x9870 <_ZN9Bluetooth7connectEv+0x16e>
    986e:	7c c0       	rjmp	.+248    	; 0x9968 <_ZN9Bluetooth7connectEv+0x266>
    9870:	ad 86       	std	Y+13, r10	; 0x0d
    9872:	77 cf       	rjmp	.-274    	; 0x9762 <_ZN9Bluetooth7connectEv+0x60>
					else {status = UNCONNECTED;}
				}
				else {retries --;}
    9874:	01 50       	subi	r16, 0x01	; 1
    9876:	7c c0       	rjmp	.+248    	; 0x9970 <_ZN9Bluetooth7connectEv+0x26e>
				break;
			case UNCONNECTED: {
				retries --;
    9878:	01 50       	subi	r16, 0x01	; 1
				byte conn = ATcommand("ATDM,00066601574D,1101\r", 3800, 2, "CONNECT", "NO ANSWER");    // bien hardcodeado el mac address, otro #define
    987a:	8d b7       	in	r24, 0x3d	; 61
    987c:	9e b7       	in	r25, 0x3e	; 62
    987e:	0b 97       	sbiw	r24, 0x0b	; 11
    9880:	0f b6       	in	r0, 0x3f	; 63
    9882:	f8 94       	cli
    9884:	9e bf       	out	0x3e, r25	; 62
    9886:	0f be       	out	0x3f, r0	; 63
    9888:	8d bf       	out	0x3d, r24	; 61
    988a:	ed b7       	in	r30, 0x3d	; 61
    988c:	fe b7       	in	r31, 0x3e	; 62
    988e:	31 96       	adiw	r30, 0x01	; 1
    9890:	ad b7       	in	r26, 0x3d	; 61
    9892:	be b7       	in	r27, 0x3e	; 62
    9894:	12 96       	adiw	r26, 0x02	; 2
    9896:	dc 93       	st	X, r29
    9898:	ce 93       	st	-X, r28
    989a:	11 97       	sbiw	r26, 0x01	; 1
    989c:	2f e2       	ldi	r18, 0x2F	; 47
    989e:	32 e0       	ldi	r19, 0x02	; 2
    98a0:	33 83       	std	Z+3, r19	; 0x03
    98a2:	22 83       	std	Z+2, r18	; 0x02
    98a4:	35 82       	std	Z+5, r3	; 0x05
    98a6:	24 82       	std	Z+4, r2	; 0x04
    98a8:	a6 82       	std	Z+6, r10	; 0x06
    98aa:	50 86       	std	Z+8, r5	; 0x08
    98ac:	47 82       	std	Z+7, r4	; 0x07
    98ae:	72 86       	std	Z+10, r7	; 0x0a
    98b0:	61 86       	std	Z+9, r6	; 0x09
    98b2:	0e 94 75 4a 	call	0x94ea	; 0x94ea <_ZN9Bluetooth9ATcommandEPKcihz>
				if (conn == 1) {status = CONNECTED;}
    98b6:	ad b7       	in	r26, 0x3d	; 61
    98b8:	be b7       	in	r27, 0x3e	; 62
    98ba:	1b 96       	adiw	r26, 0x0b	; 11
    98bc:	0f b6       	in	r0, 0x3f	; 63
    98be:	f8 94       	cli
    98c0:	be bf       	out	0x3e, r27	; 62
    98c2:	0f be       	out	0x3f, r0	; 63
    98c4:	ad bf       	out	0x3d, r26	; 61
    98c6:	81 30       	cpi	r24, 0x01	; 1
    98c8:	11 f4       	brne	.+4      	; 0x98ce <_ZN9Bluetooth7connectEv+0x1cc>
    98ca:	ad 86       	std	Y+13, r10	; 0x0d
    98cc:	51 c0       	rjmp	.+162    	; 0x9970 <_ZN9Bluetooth7connectEv+0x26e>
				else if (conn == 0) {
    98ce:	88 23       	and	r24, r24
    98d0:	09 f0       	breq	.+2      	; 0x98d4 <_ZN9Bluetooth7connectEv+0x1d2>
    98d2:	4e c0       	rjmp	.+156    	; 0x9970 <_ZN9Bluetooth7connectEv+0x26e>
					delay (300);
    98d4:	6c e2       	ldi	r22, 0x2C	; 44
    98d6:	71 e0       	ldi	r23, 0x01	; 1
    98d8:	80 e0       	ldi	r24, 0x00	; 0
    98da:	90 e0       	ldi	r25, 0x00	; 0
    98dc:	0e 94 69 70 	call	0xe0d2	; 0xe0d2 <_Z5delaym>
					status = NOT_PRESENT;
    98e0:	1d 86       	std	Y+13, r1	; 0x0d
    98e2:	46 c0       	rjmp	.+140    	; 0x9970 <_ZN9Bluetooth7connectEv+0x26e>
				}
				break;
			}
			case CONNECTED: {
				ATcommand("+++\r", 300, 0);
    98e4:	2d b7       	in	r18, 0x3d	; 61
    98e6:	3e b7       	in	r19, 0x3e	; 62
    98e8:	27 50       	subi	r18, 0x07	; 7
    98ea:	30 40       	sbci	r19, 0x00	; 0
    98ec:	0f b6       	in	r0, 0x3f	; 63
    98ee:	f8 94       	cli
    98f0:	3e bf       	out	0x3e, r19	; 62
    98f2:	0f be       	out	0x3f, r0	; 63
    98f4:	2d bf       	out	0x3d, r18	; 61
    98f6:	ed b7       	in	r30, 0x3d	; 61
    98f8:	fe b7       	in	r31, 0x3e	; 62
    98fa:	31 96       	adiw	r30, 0x01	; 1
    98fc:	ad b7       	in	r26, 0x3d	; 61
    98fe:	be b7       	in	r27, 0x3e	; 62
    9900:	12 96       	adiw	r26, 0x02	; 2
    9902:	dc 93       	st	X, r29
    9904:	ce 93       	st	-X, r28
    9906:	11 97       	sbiw	r26, 0x01	; 1
    9908:	93 82       	std	Z+3, r9	; 0x03
    990a:	82 82       	std	Z+2, r8	; 0x02
    990c:	f5 82       	std	Z+5, r15	; 0x05
    990e:	e4 82       	std	Z+4, r14	; 0x04
    9910:	16 82       	std	Z+6, r1	; 0x06
    9912:	0e 94 75 4a 	call	0x94ea	; 0x94ea <_ZN9Bluetooth9ATcommandEPKcihz>
				byte mf = ATcommand("ATMF\r", 300, 2, "OK", "NO CARRIER");
    9916:	00 d0       	rcall	.+0      	; 0x9918 <_ZN9Bluetooth7connectEv+0x216>
    9918:	00 d0       	rcall	.+0      	; 0x991a <_ZN9Bluetooth7connectEv+0x218>
    991a:	ed b7       	in	r30, 0x3d	; 61
    991c:	fe b7       	in	r31, 0x3e	; 62
    991e:	31 96       	adiw	r30, 0x01	; 1
    9920:	ad b7       	in	r26, 0x3d	; 61
    9922:	be b7       	in	r27, 0x3e	; 62
    9924:	12 96       	adiw	r26, 0x02	; 2
    9926:	dc 93       	st	X, r29
    9928:	ce 93       	st	-X, r28
    992a:	11 97       	sbiw	r26, 0x01	; 1
    992c:	29 e5       	ldi	r18, 0x59	; 89
    992e:	32 e0       	ldi	r19, 0x02	; 2
    9930:	33 83       	std	Z+3, r19	; 0x03
    9932:	22 83       	std	Z+2, r18	; 0x02
    9934:	f5 82       	std	Z+5, r15	; 0x05
    9936:	e4 82       	std	Z+4, r14	; 0x04
    9938:	16 83       	std	Z+6, r17	; 0x06
    993a:	d0 86       	std	Z+8, r13	; 0x08
    993c:	c7 82       	std	Z+7, r12	; 0x07
    993e:	8f e5       	ldi	r24, 0x5F	; 95
    9940:	92 e0       	ldi	r25, 0x02	; 2
    9942:	92 87       	std	Z+10, r25	; 0x0a
    9944:	81 87       	std	Z+9, r24	; 0x09
    9946:	0e 94 75 4a 	call	0x94ea	; 0x94ea <_ZN9Bluetooth9ATcommandEPKcihz>
				if (mf == 1) {status = MODE_FAST;}
    994a:	ad b7       	in	r26, 0x3d	; 61
    994c:	be b7       	in	r27, 0x3e	; 62
    994e:	1b 96       	adiw	r26, 0x0b	; 11
    9950:	0f b6       	in	r0, 0x3f	; 63
    9952:	f8 94       	cli
    9954:	be bf       	out	0x3e, r27	; 62
    9956:	0f be       	out	0x3f, r0	; 63
    9958:	ad bf       	out	0x3d, r26	; 61
    995a:	81 30       	cpi	r24, 0x01	; 1
    995c:	19 f4       	brne	.+6      	; 0x9964 <_ZN9Bluetooth7connectEv+0x262>
    995e:	b3 e0       	ldi	r27, 0x03	; 3
    9960:	bd 87       	std	Y+13, r27	; 0x0d
    9962:	ff ce       	rjmp	.-514    	; 0x9762 <_ZN9Bluetooth7connectEv+0x60>
				else if (mf == 2) {status = UNCONNECTED;}
    9964:	82 30       	cpi	r24, 0x02	; 2
    9966:	11 f4       	brne	.+4      	; 0x996c <_ZN9Bluetooth7connectEv+0x26a>
    9968:	bd 86       	std	Y+13, r11	; 0x0d
    996a:	fb ce       	rjmp	.-522    	; 0x9762 <_ZN9Bluetooth7connectEv+0x60>
				else {status = NOT_PRESENT;}
    996c:	1d 86       	std	Y+13, r1	; 0x0d
    996e:	f9 ce       	rjmp	.-526    	; 0x9762 <_ZN9Bluetooth7connectEv+0x60>

// maquinita de estados que gestiona la conexión al otro módulo bluetooth
// puede ser invocada en cualquier momento, por ejemplo si la conexión fue establecida desde afuera
bool Bluetooth::connect () {
	byte retries = 4;                                 // poner un #define
	while (retries > 0) {
    9970:	00 23       	and	r16, r16
    9972:	09 f0       	breq	.+2      	; 0x9976 <_ZN9Bluetooth7connectEv+0x274>
    9974:	f6 ce       	rjmp	.-532    	; 0x9762 <_ZN9Bluetooth7connectEv+0x60>
    9976:	80 e0       	ldi	r24, 0x00	; 0
			case MODE_FAST:
				return true;
		}
	}
	return false;
}
    9978:	df 91       	pop	r29
    997a:	cf 91       	pop	r28
    997c:	1f 91       	pop	r17
    997e:	0f 91       	pop	r16
    9980:	ff 90       	pop	r15
    9982:	ef 90       	pop	r14
    9984:	df 90       	pop	r13
    9986:	cf 90       	pop	r12
    9988:	bf 90       	pop	r11
    998a:	af 90       	pop	r10
    998c:	9f 90       	pop	r9
    998e:	8f 90       	pop	r8
    9990:	7f 90       	pop	r7
    9992:	6f 90       	pop	r6
    9994:	5f 90       	pop	r5
    9996:	4f 90       	pop	r4
    9998:	3f 90       	pop	r3
    999a:	2f 90       	pop	r2
    999c:	08 95       	ret

0000999e <_ZN9BluetoothC1Ev>:
#include "util.h"
#include "display.h"

Bluetooth blue;              // objeto bluetooth

Bluetooth::Bluetooth () {
    999e:	8f 92       	push	r8
    99a0:	9f 92       	push	r9
    99a2:	af 92       	push	r10
    99a4:	bf 92       	push	r11
    99a6:	cf 92       	push	r12
    99a8:	df 92       	push	r13
    99aa:	ef 92       	push	r14
    99ac:	0f 93       	push	r16
    99ae:	df 93       	push	r29
    99b0:	cf 93       	push	r28
    99b2:	cd b7       	in	r28, 0x3d	; 61
    99b4:	de b7       	in	r29, 0x3e	; 62
    99b6:	2d 97       	sbiw	r28, 0x0d	; 13
    99b8:	0f b6       	in	r0, 0x3f	; 63
    99ba:	f8 94       	cli
    99bc:	de bf       	out	0x3e, r29	; 62
    99be:	0f be       	out	0x3f, r0	; 63
    99c0:	cd bf       	out	0x3d, r28	; 61
    99c2:	4c 01       	movw	r8, r24
    99c4:	0e 94 1c 69 	call	0xd238	; 0xd238 <_ZN10SerialcommC1Ev>
	blue_serial = Serialcomm (&Serial, 115200, 3, 2, &blue_process);									// 3 bit instrucción, 2 bits largo
    99c8:	5e 01       	movw	r10, r28
    99ca:	08 94       	sec
    99cc:	a1 1c       	adc	r10, r1
    99ce:	b1 1c       	adc	r11, r1
    99d0:	c5 01       	movw	r24, r10
    99d2:	69 e9       	ldi	r22, 0x99	; 153
    99d4:	74 e1       	ldi	r23, 0x14	; 20
    99d6:	20 e0       	ldi	r18, 0x00	; 0
    99d8:	32 ec       	ldi	r19, 0xC2	; 194
    99da:	41 e0       	ldi	r20, 0x01	; 1
    99dc:	50 e0       	ldi	r21, 0x00	; 0
    99de:	03 e0       	ldi	r16, 0x03	; 3
    99e0:	f2 e0       	ldi	r31, 0x02	; 2
    99e2:	ef 2e       	mov	r14, r31
    99e4:	e4 e7       	ldi	r30, 0x74	; 116
    99e6:	ce 2e       	mov	r12, r30
    99e8:	ea e4       	ldi	r30, 0x4A	; 74
    99ea:	de 2e       	mov	r13, r30
    99ec:	0e 94 c9 69 	call	0xd392	; 0xd392 <_ZN10SerialcommC1EP14HardwareSeriallhhPFvhhPhE>
    99f0:	d4 01       	movw	r26, r8
    99f2:	f5 01       	movw	r30, r10
    99f4:	8d e0       	ldi	r24, 0x0D	; 13
    99f6:	01 90       	ld	r0, Z+
    99f8:	0d 92       	st	X+, r0
    99fa:	81 50       	subi	r24, 0x01	; 1
    99fc:	e1 f7       	brne	.-8      	; 0x99f6 <_ZN9BluetoothC1Ev+0x58>
	status = NOT_PRESENT;
    99fe:	f4 01       	movw	r30, r8
    9a00:	15 86       	std	Z+13, r1	; 0x0d
}
    9a02:	2d 96       	adiw	r28, 0x0d	; 13
    9a04:	0f b6       	in	r0, 0x3f	; 63
    9a06:	f8 94       	cli
    9a08:	de bf       	out	0x3e, r29	; 62
    9a0a:	0f be       	out	0x3f, r0	; 63
    9a0c:	cd bf       	out	0x3d, r28	; 61
    9a0e:	cf 91       	pop	r28
    9a10:	df 91       	pop	r29
    9a12:	0f 91       	pop	r16
    9a14:	ef 90       	pop	r14
    9a16:	df 90       	pop	r13
    9a18:	cf 90       	pop	r12
    9a1a:	bf 90       	pop	r11
    9a1c:	af 90       	pop	r10
    9a1e:	9f 90       	pop	r9
    9a20:	8f 90       	pop	r8
    9a22:	08 95       	ret

00009a24 <_GLOBAL__I_blue>:
#include <stdarg.h>
#include "mov_bajo_nivel.h"
#include "util.h"
#include "display.h"

Bluetooth blue;              // objeto bluetooth
    9a24:	80 e8       	ldi	r24, 0x80	; 128
    9a26:	93 e1       	ldi	r25, 0x13	; 19
    9a28:	0e 94 cf 4c 	call	0x999e	; 0x999e <_ZN9BluetoothC1Ev>
	return 0;
}
		
void Bluetooth::blue_process (byte instruccion, byte largo, byte* data) {
	
    9a2c:	08 95       	ret

00009a2e <_ZN6Cabeza8callbackEhhPh>:
	otro nivel de polling sobre las variables para ver si ocurrió algun evento o no. */
	
/* IMPLEMENTAR: que haya "modos" de respuesta al llamado, 
  por ejemplo, mientras el robot está andando, todos los llamados provocarían un stop() */
	
void Cabeza::callback (byte instruccion, byte largo, byte* data) {
    9a2e:	da 01       	movw	r26, r20
	
	// combina instrucción y largo, dando una combinación única
	instruccion += 8*largo;                        
    9a30:	66 0f       	add	r22, r22
    9a32:	66 0f       	add	r22, r22
    9a34:	66 0f       	add	r22, r22
    9a36:	68 0f       	add	r22, r24
	
	switch (instruccion) {
    9a38:	6d 30       	cpi	r22, 0x0D	; 13
    9a3a:	30 f4       	brcc	.+12     	; 0x9a48 <_ZN6Cabeza8callbackEhhPh+0x1a>
    9a3c:	69 30       	cpi	r22, 0x09	; 9
    9a3e:	a0 f4       	brcc	.+40     	; 0x9a68 <_ZN6Cabeza8callbackEhhPh+0x3a>
    9a40:	68 30       	cpi	r22, 0x08	; 8
    9a42:	09 f0       	breq	.+2      	; 0x9a46 <_ZN6Cabeza8callbackEhhPh+0x18>
    9a44:	5b c0       	rjmp	.+182    	; 0x9afc <_ZN6Cabeza8callbackEhhPh+0xce>
    9a46:	09 c0       	rjmp	.+18     	; 0x9a5a <_ZN6Cabeza8callbackEhhPh+0x2c>
    9a48:	60 31       	cpi	r22, 0x10	; 16
    9a4a:	a1 f1       	breq	.+104    	; 0x9ab4 <_ZN6Cabeza8callbackEhhPh+0x86>
    9a4c:	6f 31       	cpi	r22, 0x1F	; 31
    9a4e:	09 f4       	brne	.+2      	; 0x9a52 <_ZN6Cabeza8callbackEhhPh+0x24>
    9a50:	47 c0       	rjmp	.+142    	; 0x9ae0 <_ZN6Cabeza8callbackEhhPh+0xb2>
    9a52:	6f 30       	cpi	r22, 0x0F	; 15
    9a54:	09 f0       	breq	.+2      	; 0x9a58 <_ZN6Cabeza8callbackEhhPh+0x2a>
    9a56:	52 c0       	rjmp	.+164    	; 0x9afc <_ZN6Cabeza8callbackEhhPh+0xce>
    9a58:	27 c0       	rjmp	.+78     	; 0x9aa8 <_ZN6Cabeza8callbackEhhPh+0x7a>
		case 8:                                          // distancia cm (1 byte)
			cm_dist = data[0];
    9a5a:	8c 91       	ld	r24, X
    9a5c:	80 93 9b 13 	sts	0x139B, r24
			flag |= 1;                                     // bit 0 de flag
    9a60:	80 91 a2 13 	lds	r24, 0x13A2
    9a64:	81 60       	ori	r24, 0x01	; 1
    9a66:	39 c0       	rjmp	.+114    	; 0x9ada <_ZN6Cabeza8callbackEhhPh+0xac>
			break;
		case 9: case 10: case 11: case 12:                    // vel, lat, evnt_vel y evnt_lat (1 byte con signo)
			*values[instruccion-9] = data[0] - 100;
    9a68:	26 2f       	mov	r18, r22
    9a6a:	30 e0       	ldi	r19, 0x00	; 0
    9a6c:	f9 01       	movw	r30, r18
    9a6e:	ee 0f       	add	r30, r30
    9a70:	ff 1f       	adc	r31, r31
    9a72:	e4 51       	subi	r30, 0x14	; 20
    9a74:	fc 4f       	sbci	r31, 0xFC	; 252
    9a76:	01 90       	ld	r0, Z+
    9a78:	f0 81       	ld	r31, Z
    9a7a:	e0 2d       	mov	r30, r0
    9a7c:	8c 91       	ld	r24, X
    9a7e:	84 56       	subi	r24, 0x64	; 100
    9a80:	80 83       	st	Z, r24
			bitSet (flag, instruccion-8);                      // bits 1, 2, 3 y 4 de flag
    9a82:	40 91 a2 13 	lds	r20, 0x13A2
    9a86:	28 50       	subi	r18, 0x08	; 8
    9a88:	30 40       	sbci	r19, 0x00	; 0
    9a8a:	81 e0       	ldi	r24, 0x01	; 1
    9a8c:	90 e0       	ldi	r25, 0x00	; 0
    9a8e:	a0 e0       	ldi	r26, 0x00	; 0
    9a90:	b0 e0       	ldi	r27, 0x00	; 0
    9a92:	04 c0       	rjmp	.+8      	; 0x9a9c <_ZN6Cabeza8callbackEhhPh+0x6e>
    9a94:	88 0f       	add	r24, r24
    9a96:	99 1f       	adc	r25, r25
    9a98:	aa 1f       	adc	r26, r26
    9a9a:	bb 1f       	adc	r27, r27
    9a9c:	2a 95       	dec	r18
    9a9e:	d2 f7       	brpl	.-12     	; 0x9a94 <_ZN6Cabeza8callbackEhhPh+0x66>
    9aa0:	48 2b       	or	r20, r24
    9aa2:	40 93 a2 13 	sts	0x13A2, r20
    9aa6:	08 95       	ret
			
			break;
		case 15:                                          // comando IR
			/* El comando IR llama directamente a la acción. Los otros 
			eventos, en cambio, se limitan a setear variables  */
			rc.procesar_comando (data[0]);
    9aa8:	83 eb       	ldi	r24, 0xB3	; 179
    9aaa:	93 e1       	ldi	r25, 0x13	; 19
    9aac:	6c 91       	ld	r22, X
    9aae:	0e 94 7e 65 	call	0xcafc	; 0xcafc <_ZN13RemoteControl16procesar_comandoEh>
    9ab2:	08 95       	ret
	return angulo_act [servo];
}
*/

int Cabeza::twobyte2int (byte* data) {          // transforma 2 bytes de 7 bits en un int
  return 128*data[0] + data[1];
    9ab4:	11 96       	adiw	r26, 0x01	; 1
    9ab6:	8c 91       	ld	r24, X
    9ab8:	11 97       	sbiw	r26, 0x01	; 1
    9aba:	2c 91       	ld	r18, X
    9abc:	30 e0       	ldi	r19, 0x00	; 0
    9abe:	36 95       	lsr	r19
    9ac0:	32 2f       	mov	r19, r18
    9ac2:	22 27       	eor	r18, r18
    9ac4:	37 95       	ror	r19
    9ac6:	27 95       	ror	r18
    9ac8:	28 0f       	add	r18, r24
    9aca:	31 1d       	adc	r19, r1
			/* El comando IR llama directamente a la acción. Los otros 
			eventos, en cambio, se limitan a setear variables  */
			rc.procesar_comando (data[0]);
			break;
		case 16:                                          // distancia en mm (2 bytes)
			mm_dist = twobyte2int (data);
    9acc:	30 93 a1 13 	sts	0x13A1, r19
    9ad0:	20 93 a0 13 	sts	0x13A0, r18
			bitSet (flag, 5);                                // bit 5 de flag
    9ad4:	80 91 a2 13 	lds	r24, 0x13A2
    9ad8:	80 62       	ori	r24, 0x20	; 32
    9ada:	80 93 a2 13 	sts	0x13A2, r24
    9ade:	08 95       	ret
			break; 
		case 31:                                         // send all (distancia cm + vel + lat)
			cm_dist = data[0];
    9ae0:	8c 91       	ld	r24, X
    9ae2:	80 93 9b 13 	sts	0x139B, r24
			vel = data[1] - 100;                             // nota: el send_all no modifica flag
    9ae6:	11 96       	adiw	r26, 0x01	; 1
    9ae8:	8c 91       	ld	r24, X
    9aea:	11 97       	sbiw	r26, 0x01	; 1
    9aec:	84 56       	subi	r24, 0x64	; 100
    9aee:	80 93 9c 13 	sts	0x139C, r24
			lat = data[2] - 100;
    9af2:	12 96       	adiw	r26, 0x02	; 2
    9af4:	8c 91       	ld	r24, X
    9af6:	84 56       	subi	r24, 0x64	; 100
    9af8:	80 93 9d 13 	sts	0x139D, r24
    9afc:	08 95       	ret

00009afe <_ZN6Cabeza16disable_send_allEv>:
void Cabeza::enable_send_all () {    // nota: esto cambió en la v4 del firmware cabeza
	byte value = true;
	comm.send_msg (7, 1, &value);
}               

void Cabeza::disable_send_all () {    // nota: esto cambió en la v4 del firmware cabeza
    9afe:	df 93       	push	r29
    9b00:	cf 93       	push	r28
    9b02:	0f 92       	push	r0
    9b04:	cd b7       	in	r28, 0x3d	; 61
    9b06:	de b7       	in	r29, 0x3e	; 62
	byte value = false;
    9b08:	19 82       	std	Y+1, r1	; 0x01
	comm.send_msg (7, 1, &value);
    9b0a:	67 e0       	ldi	r22, 0x07	; 7
    9b0c:	41 e0       	ldi	r20, 0x01	; 1
    9b0e:	9e 01       	movw	r18, r28
    9b10:	2f 5f       	subi	r18, 0xFF	; 255
    9b12:	3f 4f       	sbci	r19, 0xFF	; 255
    9b14:	0e 94 1d 69 	call	0xd23a	; 0xd23a <_ZN10Serialcomm8send_msgEhhPh>
}               
    9b18:	0f 90       	pop	r0
    9b1a:	cf 91       	pop	r28
    9b1c:	df 91       	pop	r29
    9b1e:	08 95       	ret

00009b20 <_ZN6Cabeza8set_timeEh>:
	} else if (parametro == MM_DIST) {
		comm.send_2byte_msg (0, valor);
	}     
} 

void Cabeza::set_time (byte ms) {    // período de muestreo. Valor por defecto 10ms
    9b20:	df 93       	push	r29
    9b22:	cf 93       	push	r28
    9b24:	0f 92       	push	r0
    9b26:	cd b7       	in	r28, 0x3d	; 61
    9b28:	de b7       	in	r29, 0x3e	; 62
    9b2a:	69 83       	std	Y+1, r22	; 0x01
  comm.send_msg (5, 1, &ms);
    9b2c:	65 e0       	ldi	r22, 0x05	; 5
    9b2e:	41 e0       	ldi	r20, 0x01	; 1
    9b30:	9e 01       	movw	r18, r28
    9b32:	2f 5f       	subi	r18, 0xFF	; 255
    9b34:	3f 4f       	sbci	r19, 0xFF	; 255
    9b36:	0e 94 1d 69 	call	0xd23a	; 0xd23a <_ZN10Serialcomm8send_msgEhhPh>
}
    9b3a:	0f 90       	pop	r0
    9b3c:	cf 91       	pop	r28
    9b3e:	df 91       	pop	r29
    9b40:	08 95       	ret

00009b42 <_ZN6Cabeza7requestEh>:
  return 128*data[0] + data[1];
} 

// usar esta rutina cuando está habilitado el polling (por defecto)
void Cabeza::request (byte parametro) {
	comm.send_msg (parametro, 0, NULL);      // los requests son todos de 0 byte
    9b42:	40 e0       	ldi	r20, 0x00	; 0
    9b44:	20 e0       	ldi	r18, 0x00	; 0
    9b46:	30 e0       	ldi	r19, 0x00	; 0
    9b48:	0e 94 1d 69 	call	0xd23a	; 0xd23a <_ZN10Serialcomm8send_msgEhhPh>
}
    9b4c:	08 95       	ret

00009b4e <_ZN6Cabeza13set_thresholdEhj>:

/* setear los umbrales:
CM_DIST y MM_DIST el umbral por defecto es 0, y se activan cuando la distancia es MENOR que el umbral
El resto de los parámetros, el umbral por defecto es 127, y se activan cuando |valor| > umbral      */

void Cabeza::set_threshold (byte parametro, unsigned int valor) {
    9b4e:	df 93       	push	r29
    9b50:	cf 93       	push	r28
    9b52:	0f 92       	push	r0
    9b54:	cd b7       	in	r28, 0x3d	; 61
    9b56:	de b7       	in	r29, 0x3e	; 62
	if (parametro < MM_DIST) {
    9b58:	65 30       	cpi	r22, 0x05	; 5
    9b5a:	40 f4       	brcc	.+16     	; 0x9b6c <_ZN6Cabeza13set_thresholdEhj+0x1e>
		byte value = valor;
    9b5c:	49 83       	std	Y+1, r20	; 0x01
		comm.send_msg (parametro, 1, &value);
    9b5e:	41 e0       	ldi	r20, 0x01	; 1
    9b60:	9e 01       	movw	r18, r28
    9b62:	2f 5f       	subi	r18, 0xFF	; 255
    9b64:	3f 4f       	sbci	r19, 0xFF	; 255
    9b66:	0e 94 1d 69 	call	0xd23a	; 0xd23a <_ZN10Serialcomm8send_msgEhhPh>
    9b6a:	05 c0       	rjmp	.+10     	; 0x9b76 <_ZN6Cabeza13set_thresholdEhj+0x28>
	} else if (parametro == MM_DIST) {
    9b6c:	65 30       	cpi	r22, 0x05	; 5
    9b6e:	19 f4       	brne	.+6      	; 0x9b76 <_ZN6Cabeza13set_thresholdEhj+0x28>
		comm.send_2byte_msg (0, valor);
    9b70:	60 e0       	ldi	r22, 0x00	; 0
    9b72:	0e 94 9a 69 	call	0xd334	; 0xd334 <_ZN10Serialcomm14send_2byte_msgEhj>
	}     
} 
    9b76:	0f 90       	pop	r0
    9b78:	cf 91       	pop	r28
    9b7a:	df 91       	pop	r29
    9b7c:	08 95       	ret

00009b7e <_ZN6Cabeza8umbralesEv>:
	enable_send_all ();             // habilita la lectura automática de sensores (aka "muestreo")
	// ATENCION: si se usa el send all, hay una probabilidad de falla debida al running_status
	// para reducirla, hay que requestar de vez en cuando otra cosa
}

void Cabeza::umbrales () {
    9b7e:	0f 93       	push	r16
    9b80:	1f 93       	push	r17
    9b82:	8c 01       	movw	r16, r24
	set_threshold (VEL, 2);        // habilita el umbral de velocidad, lo que equivale a notificar cada vez que hay un cambio de distancia
    9b84:	61 e0       	ldi	r22, 0x01	; 1
    9b86:	42 e0       	ldi	r20, 0x02	; 2
    9b88:	50 e0       	ldi	r21, 0x00	; 0
    9b8a:	0e 94 a7 4d 	call	0x9b4e	; 0x9b4e <_ZN6Cabeza13set_thresholdEhj>
	set_threshold (MM_DIST, 280);   // umbral de distancias en mm cuando es menor a 28cm
    9b8e:	c8 01       	movw	r24, r16
    9b90:	65 e0       	ldi	r22, 0x05	; 5
    9b92:	48 e1       	ldi	r20, 0x18	; 24
    9b94:	51 e0       	ldi	r21, 0x01	; 1
    9b96:	0e 94 a7 4d 	call	0x9b4e	; 0x9b4e <_ZN6Cabeza13set_thresholdEhj>
	set_threshold (EVNT_VEL, 3);    // evento de velocidad
    9b9a:	c8 01       	movw	r24, r16
    9b9c:	63 e0       	ldi	r22, 0x03	; 3
    9b9e:	43 e0       	ldi	r20, 0x03	; 3
    9ba0:	50 e0       	ldi	r21, 0x00	; 0
    9ba2:	0e 94 a7 4d 	call	0x9b4e	; 0x9b4e <_ZN6Cabeza13set_thresholdEhj>
	set_threshold (EVNT_LAT, 3);    // evento lateral
    9ba6:	c8 01       	movw	r24, r16
    9ba8:	64 e0       	ldi	r22, 0x04	; 4
    9baa:	43 e0       	ldi	r20, 0x03	; 3
    9bac:	50 e0       	ldi	r21, 0x00	; 0
    9bae:	0e 94 a7 4d 	call	0x9b4e	; 0x9b4e <_ZN6Cabeza13set_thresholdEhj>
	set_threshold (LAT, 1);        // umbral lateral
    9bb2:	c8 01       	movw	r24, r16
    9bb4:	62 e0       	ldi	r22, 0x02	; 2
    9bb6:	41 e0       	ldi	r20, 0x01	; 1
    9bb8:	50 e0       	ldi	r21, 0x00	; 0
    9bba:	0e 94 a7 4d 	call	0x9b4e	; 0x9b4e <_ZN6Cabeza13set_thresholdEhj>
	// el único umbral que no se define es el de CM_DIST, que se opta por leerlo manualmente
	set_time (1);                // período de 1 milisegundo; máxima respuesta para el modo umbrales	
    9bbe:	c8 01       	movw	r24, r16
    9bc0:	61 e0       	ldi	r22, 0x01	; 1
    9bc2:	0e 94 90 4d 	call	0x9b20	; 0x9b20 <_ZN6Cabeza8set_timeEh>
}
    9bc6:	1f 91       	pop	r17
    9bc8:	0f 91       	pop	r16
    9bca:	08 95       	ret

00009bcc <_ZN6Cabeza10threshModeEv>:
	comm.send_msg (7, 1, &value);
}               

// los siguientes son presets de umbrales y modos de operación asociados a ellos

void Cabeza::threshMode () {
    9bcc:	0f 93       	push	r16
    9bce:	1f 93       	push	r17
    9bd0:	8c 01       	movw	r16, r24
	disable_send_all ();          // deshabilita la lectura automática de sensores
    9bd2:	0e 94 7f 4d 	call	0x9afe	; 0x9afe <_ZN6Cabeza16disable_send_allEv>
	umbrales ();                // habilita los umbrales 
    9bd6:	c8 01       	movw	r24, r16
    9bd8:	0e 94 bf 4d 	call	0x9b7e	; 0x9b7e <_ZN6Cabeza8umbralesEv>
	// flag = 0;
}
    9bdc:	1f 91       	pop	r17
    9bde:	0f 91       	pop	r16
    9be0:	08 95       	ret

00009be2 <_ZN6CabezaC1Ev>:
volatile char* Cabeza::values[4] = {&vel, &lat, &evnt_vel, &evnt_lat};    // array de punteros a las variables, para indexarlas
volatile byte Cabeza::flag;
//volatile byte Cabeza::fastDistanceBuffer [100];
//RingBuffer <volatile byte> Cabeza::fastDistance = RingBuffer <volatile byte> (fastDistanceBuffer, 100);      // esto no sé si se va a usar...

Cabeza::Cabeza () {
    9be2:	af 92       	push	r10
    9be4:	bf 92       	push	r11
    9be6:	cf 92       	push	r12
    9be8:	df 92       	push	r13
    9bea:	ef 92       	push	r14
    9bec:	ff 92       	push	r15
    9bee:	0f 93       	push	r16
    9bf0:	1f 93       	push	r17
    9bf2:	df 93       	push	r29
    9bf4:	cf 93       	push	r28
    9bf6:	cd b7       	in	r28, 0x3d	; 61
    9bf8:	de b7       	in	r29, 0x3e	; 62
    9bfa:	2d 97       	sbiw	r28, 0x0d	; 13
    9bfc:	0f b6       	in	r0, 0x3f	; 63
    9bfe:	f8 94       	cli
    9c00:	de bf       	out	0x3e, r29	; 62
    9c02:	0f be       	out	0x3f, r0	; 63
    9c04:	cd bf       	out	0x3d, r28	; 61
    9c06:	18 2f       	mov	r17, r24
    9c08:	f9 2e       	mov	r15, r25
    9c0a:	0e 94 1c 69 	call	0xd238	; 0xd238 <_ZN10SerialcommC1Ev>
	comm = Serialcomm (&Serial2, 115200, 3, 2, &callback);    // objeto Serialcomm
    9c0e:	5e 01       	movw	r10, r28
    9c10:	08 94       	sec
    9c12:	a1 1c       	adc	r10, r1
    9c14:	b1 1c       	adc	r11, r1
    9c16:	c5 01       	movw	r24, r10
    9c18:	6c ea       	ldi	r22, 0xAC	; 172
    9c1a:	74 e1       	ldi	r23, 0x14	; 20
    9c1c:	20 e0       	ldi	r18, 0x00	; 0
    9c1e:	32 ec       	ldi	r19, 0xC2	; 194
    9c20:	41 e0       	ldi	r20, 0x01	; 1
    9c22:	50 e0       	ldi	r21, 0x00	; 0
    9c24:	03 e0       	ldi	r16, 0x03	; 3
    9c26:	f2 e0       	ldi	r31, 0x02	; 2
    9c28:	ef 2e       	mov	r14, r31
    9c2a:	e7 e1       	ldi	r30, 0x17	; 23
    9c2c:	ce 2e       	mov	r12, r30
    9c2e:	ed e4       	ldi	r30, 0x4D	; 77
    9c30:	de 2e       	mov	r13, r30
    9c32:	0e 94 c9 69 	call	0xd392	; 0xd392 <_ZN10SerialcommC1EP14HardwareSeriallhhPFvhhPhE>
    9c36:	21 2f       	mov	r18, r17
    9c38:	3f 2d       	mov	r19, r15
    9c3a:	c9 01       	movw	r24, r18
    9c3c:	dc 01       	movw	r26, r24
    9c3e:	f5 01       	movw	r30, r10
    9c40:	8d e0       	ldi	r24, 0x0D	; 13
    9c42:	01 90       	ld	r0, Z+
    9c44:	0d 92       	st	X+, r0
    9c46:	81 50       	subi	r24, 0x01	; 1
    9c48:	e1 f7       	brne	.-8      	; 0x9c42 <_ZN6CabezaC1Ev+0x60>
	flag = 0;
    9c4a:	10 92 a2 13 	sts	0x13A2, r1
}
    9c4e:	2d 96       	adiw	r28, 0x0d	; 13
    9c50:	0f b6       	in	r0, 0x3f	; 63
    9c52:	f8 94       	cli
    9c54:	de bf       	out	0x3e, r29	; 62
    9c56:	0f be       	out	0x3f, r0	; 63
    9c58:	cd bf       	out	0x3d, r28	; 61
    9c5a:	cf 91       	pop	r28
    9c5c:	df 91       	pop	r29
    9c5e:	1f 91       	pop	r17
    9c60:	0f 91       	pop	r16
    9c62:	ff 90       	pop	r15
    9c64:	ef 90       	pop	r14
    9c66:	df 90       	pop	r13
    9c68:	cf 90       	pop	r12
    9c6a:	bf 90       	pop	r11
    9c6c:	af 90       	pop	r10
    9c6e:	08 95       	ret

00009c70 <_GLOBAL__I_kbza>:
#include "remote_control.h"
#include "bluetooth.h"
#include "display.h"
#include "settings.h"

Cabeza kbza;                                                      // objeto Cabeza
    9c70:	8e e8       	ldi	r24, 0x8E	; 142
    9c72:	93 e1       	ldi	r25, 0x13	; 19
    9c74:	0e 94 f1 4d 	call	0x9be2	; 0x9be2 <_ZN6CabezaC1Ev>
			if (TEST_SENSOR) {blue.send_msg (instruccion, largo, data);}       // para testear con el osciloscopio
			// termina provisorio   
			break;
	} 

}
    9c78:	08 95       	ret

00009c7a <_ZN7Display6conwayEii>:

void Display::conway () {
  SPIsendMsg (16, 0, NULL);
}

void Display::conway (int pausa_, int ciclos) {
    9c7a:	fc 01       	movw	r30, r24
  pausa = pausa_;
    9c7c:	73 83       	std	Z+3, r23	; 0x03
    9c7e:	62 83       	std	Z+2, r22	; 0x02
  index = ciclos;
    9c80:	56 83       	std	Z+6, r21	; 0x06
    9c82:	45 83       	std	Z+5, r20	; 0x05
  retardo = 0;
    9c84:	12 86       	std	Z+10, r1	; 0x0a
    9c86:	11 86       	std	Z+9, r1	; 0x09
  mode = CONWAY;
    9c88:	89 e0       	ldi	r24, 0x09	; 9
    9c8a:	80 87       	std	Z+8, r24	; 0x08
}
    9c8c:	08 95       	ret

00009c8e <_ZN7Display5anchoEc>:
}

// rutinas auxiliares
byte Display::ancho (char chr) {                                     // tabla de anchos de los caracteres
  byte anch;
  switch (chr) {
    9c8e:	77 27       	eor	r23, r23
    9c90:	67 fd       	sbrc	r22, 7
    9c92:	70 95       	com	r23
    9c94:	87 2f       	mov	r24, r23
    9c96:	97 2f       	mov	r25, r23
    9c98:	fb 01       	movw	r30, r22
    9c9a:	b0 97       	sbiw	r30, 0x20	; 32
    9c9c:	ef 35       	cpi	r30, 0x5F	; 95
    9c9e:	f1 05       	cpc	r31, r1
    9ca0:	a0 f4       	brcc	.+40     	; 0x9cca <_ZN7Display5anchoEc+0x3c>
    9ca2:	ef 52       	subi	r30, 0x2F	; 47
    9ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    9ca6:	ee 0f       	add	r30, r30
    9ca8:	ff 1f       	adc	r31, r31
    9caa:	05 90       	lpm	r0, Z+
    9cac:	f4 91       	lpm	r31, Z+
    9cae:	e0 2d       	mov	r30, r0
    9cb0:	09 94       	ijmp
    9cb2:	84 e0       	ldi	r24, 0x04	; 4
    9cb4:	08 95       	ret
    9cb6:	85 e0       	ldi	r24, 0x05	; 5
    9cb8:	08 95       	ret
    9cba:	82 e0       	ldi	r24, 0x02	; 2
    9cbc:	08 95       	ret
    case 'a': case 'b': case 'c': case 'd': case 'e': case 'g': case 'h': case 'k': 
    case 'n': case 'o': case 'p': case 'q': case 's': case 'u': case 'y': case 'z': 
    case '!': case '&': case '-': case '0': case '2': case '3': case '4': case '5': 
    case '6': case '7': case '8': case '9': case '=': case '?': case '{': case '}': anch=5; break;
    case 'f': case 'r': case 't': case '/': anch=4; break;
    case 'I': case 'i': case 'l': case ' ': anch=2; break;
    9cbe:	83 e0       	ldi	r24, 0x03	; 3
    9cc0:	08 95       	ret
    case 'j': case '(': case ')': case ',': case '.': case '1': case ':': case ';': anch=3; break;
    9cc2:	87 e0       	ldi	r24, 0x07	; 7
    9cc4:	08 95       	ret
    case '%': anch=7; break;       
    9cc6:	88 e0       	ldi	r24, 0x08	; 8
    9cc8:	08 95       	ret
    case '@': case '*': case 'W': case '~': case '<': case '>': case '[': case ']': case '^': case '_': case '|': anch=8; break;
    9cca:	86 e0       	ldi	r24, 0x06	; 6
    default: anch=6; break;
  }
  return anch;
}
    9ccc:	08 95       	ret

00009cce <_ZN7Display6offsetEc>:

byte Display::offset (char chr) {                                          // tabla de "offsets" de los caracteres
  byte offs;
  switch (chr) {
    9cce:	77 27       	eor	r23, r23
    9cd0:	67 fd       	sbrc	r22, 7
    9cd2:	70 95       	com	r23
    9cd4:	87 2f       	mov	r24, r23
    9cd6:	97 2f       	mov	r25, r23
    9cd8:	fb 01       	movw	r30, r22
    9cda:	b0 97       	sbiw	r30, 0x20	; 32
    9cdc:	ee 35       	cpi	r30, 0x5E	; 94
    9cde:	f1 05       	cpc	r31, r1
    9ce0:	60 f4       	brcc	.+24     	; 0x9cfa <_ZN7Display6offsetEc+0x2c>
    9ce2:	e0 5d       	subi	r30, 0xD0	; 208
    9ce4:	fe 4f       	sbci	r31, 0xFE	; 254
    9ce6:	ee 0f       	add	r30, r30
    9ce8:	ff 1f       	adc	r31, r31
    9cea:	05 90       	lpm	r0, Z+
    9cec:	f4 91       	lpm	r31, Z+
    9cee:	e0 2d       	mov	r30, r0
    9cf0:	09 94       	ijmp
    9cf2:	82 e0       	ldi	r24, 0x02	; 2
    9cf4:	08 95       	ret
    9cf6:	81 e0       	ldi	r24, 0x01	; 1
    9cf8:	08 95       	ret
    9cfa:	80 e0       	ldi	r24, 0x00	; 0
    case 'j': case '(': case ')': case ',': case '.': case '1': case ':': case ';': 
    case 'I': case 'i': case 'l': case ' ': offs=2; break;
    default: offs=0; break;
  }
  return offs;
}
    9cfc:	08 95       	ret

00009cfe <_ZN7Display6isBusyEv>:
			break;
		}
	}
}

bool Display::isBusy () {
    9cfe:	fc 01       	movw	r30, r24
	return (mode == SCROLL_TEXT && retardo == 0);
    9d00:	80 85       	ldd	r24, Z+8	; 0x08
    9d02:	88 30       	cpi	r24, 0x08	; 8
    9d04:	11 f0       	breq	.+4      	; 0x9d0a <_ZN7Display6isBusyEv+0xc>
    9d06:	20 e0       	ldi	r18, 0x00	; 0
    9d08:	06 c0       	rjmp	.+12     	; 0x9d16 <_ZN7Display6isBusyEv+0x18>
    9d0a:	20 e0       	ldi	r18, 0x00	; 0
    9d0c:	81 85       	ldd	r24, Z+9	; 0x09
    9d0e:	92 85       	ldd	r25, Z+10	; 0x0a
    9d10:	89 2b       	or	r24, r25
    9d12:	09 f4       	brne	.+2      	; 0x9d16 <_ZN7Display6isBusyEv+0x18>
    9d14:	21 e0       	ldi	r18, 0x01	; 1
    9d16:	82 2f       	mov	r24, r18
    9d18:	08 95       	ret

00009d1a <_GLOBAL__I_pantalla>:
#include <string.h>

Display pantalla;                  // preinstanciado

Display::Display () {               // constructor
  text = NULL;
    9d1a:	10 92 a4 13 	sts	0x13A4, r1
    9d1e:	10 92 a3 13 	sts	0x13A3, r1
  mode = DISPLAY_OFF;
    9d22:	8a e0       	ldi	r24, 0x0A	; 10
    9d24:	80 93 ab 13 	sts	0x13AB, r24
	}
}

bool Display::isBusy () {
	return (mode == SCROLL_TEXT && retardo == 0);
    9d28:	08 95       	ret

00009d2a <_ZN7Display10SPIsendMsgEhhPh>:
    default: offs=0; break;
  }
  return offs;
}

byte Display::SPIsendMsg (byte instruccion, byte largo, byte* data) {        // manda los mensajes via SPI al display
    9d2a:	ef 92       	push	r14
    9d2c:	ff 92       	push	r15
    9d2e:	0f 93       	push	r16
    9d30:	1f 93       	push	r17
    9d32:	cf 93       	push	r28
    9d34:	df 93       	push	r29
    9d36:	16 2f       	mov	r17, r22
    9d38:	e4 2e       	mov	r14, r20
    9d3a:	02 2f       	mov	r16, r18
    9d3c:	f3 2e       	mov	r15, r19
  digitalWrite(SS, LOW);
    9d3e:	85 e3       	ldi	r24, 0x35	; 53
    9d40:	60 e0       	ldi	r22, 0x00	; 0
    9d42:	0e 94 54 78 	call	0xf0a8	; 0xf0a8 <digitalWrite>
  SPItransfer (128+(instruccion<<2)+largo);             // byte de cabecera, con 5 bits de instrucción y 2 bits de largo (no tiene "running status")
    9d46:	11 0f       	add	r17, r17
    9d48:	11 0f       	add	r17, r17
    9d4a:	1e 0d       	add	r17, r14
    9d4c:	81 2f       	mov	r24, r17
    9d4e:	80 58       	subi	r24, 0x80	; 128
    9d50:	0e 94 35 70 	call	0xe06a	; 0xe06a <_Z11SPItransferh>
    9d54:	20 2f       	mov	r18, r16
    9d56:	3f 2d       	mov	r19, r15
    9d58:	c9 01       	movw	r24, r18
    9d5a:	ec 01       	movw	r28, r24
    9d5c:	10 e0       	ldi	r17, 0x00	; 0
    9d5e:	04 c0       	rjmp	.+8      	; 0x9d68 <_ZN7Display10SPIsendMsgEhhPh+0x3e>
  for (byte i=0; i<largo; i++) {
    SPItransfer (data[i]);
    9d60:	89 91       	ld	r24, Y+
    9d62:	0e 94 35 70 	call	0xe06a	; 0xe06a <_Z11SPItransferh>
}

byte Display::SPIsendMsg (byte instruccion, byte largo, byte* data) {        // manda los mensajes via SPI al display
  digitalWrite(SS, LOW);
  SPItransfer (128+(instruccion<<2)+largo);             // byte de cabecera, con 5 bits de instrucción y 2 bits de largo (no tiene "running status")
  for (byte i=0; i<largo; i++) {
    9d66:	1f 5f       	subi	r17, 0xFF	; 255
    9d68:	1e 15       	cp	r17, r14
    9d6a:	d0 f3       	brcs	.-12     	; 0x9d60 <_ZN7Display10SPIsendMsgEhhPh+0x36>
    SPItransfer (data[i]);
  }  
  digitalWrite(SS, HIGH);
    9d6c:	85 e3       	ldi	r24, 0x35	; 53
    9d6e:	61 e0       	ldi	r22, 0x01	; 1
    9d70:	0e 94 54 78 	call	0xf0a8	; 0xf0a8 <digitalWrite>
  return 0;                                       // falta implementar la recepción
}
    9d74:	80 e0       	ldi	r24, 0x00	; 0
    9d76:	df 91       	pop	r29
    9d78:	cf 91       	pop	r28
    9d7a:	1f 91       	pop	r17
    9d7c:	0f 91       	pop	r16
    9d7e:	ff 90       	pop	r15
    9d80:	ef 90       	pop	r14
    9d82:	08 95       	ret

00009d84 <_ZN7Display3lsmEcc>:

void Display::rotaciones (byte modo) {
  SPIsendMsg (23, 1, (byte[]) {modo});
}

void Display::lsm (char chr, char sc) {                                       // "load - scroll - merge"
    9d84:	df 93       	push	r29
    9d86:	cf 93       	push	r28
    9d88:	00 d0       	rcall	.+0      	; 0x9d8a <_ZN7Display3lsmEcc+0x6>
    9d8a:	cd b7       	in	r28, 0x3d	; 61
    9d8c:	de b7       	in	r29, 0x3e	; 62
  SPIsendMsg (24, 2, (byte[]) {chr, sc+10});
    9d8e:	69 83       	std	Y+1, r22	; 0x01
    9d90:	46 5f       	subi	r20, 0xF6	; 246
    9d92:	4a 83       	std	Y+2, r20	; 0x02
    9d94:	68 e1       	ldi	r22, 0x18	; 24
    9d96:	42 e0       	ldi	r20, 0x02	; 2
    9d98:	9e 01       	movw	r18, r28
    9d9a:	2f 5f       	subi	r18, 0xFF	; 255
    9d9c:	3f 4f       	sbci	r19, 0xFF	; 255
    9d9e:	0e 94 95 4e 	call	0x9d2a	; 0x9d2a <_ZN7Display10SPIsendMsgEhhPh>
}
    9da2:	0f 90       	pop	r0
    9da4:	0f 90       	pop	r0
    9da6:	cf 91       	pop	r28
    9da8:	df 91       	pop	r29
    9daa:	08 95       	ret

00009dac <_ZN7Display7lsm_intEcc>:
  index = index_;
  mode = SCROLL_TEXT;
  init = true;
}

void Display::lsm_int (char index_, char sc_) {                  // "load - scroll - merge" (interna)
    9dac:	cf 93       	push	r28
    9dae:	df 93       	push	r29
  if (index_ < strlen(text) && index_ >= 0) {
    9db0:	26 2f       	mov	r18, r22
    9db2:	33 27       	eor	r19, r19
    9db4:	27 fd       	sbrc	r18, 7
    9db6:	30 95       	com	r19
    9db8:	fc 01       	movw	r30, r24
    9dba:	c0 81       	ld	r28, Z
    9dbc:	d1 81       	ldd	r29, Z+1	; 0x01
    9dbe:	fe 01       	movw	r30, r28
    9dc0:	01 90       	ld	r0, Z+
    9dc2:	00 20       	and	r0, r0
    9dc4:	e9 f7       	brne	.-6      	; 0x9dc0 <_ZN7Display7lsm_intEcc+0x14>
    9dc6:	31 97       	sbiw	r30, 0x01	; 1
    9dc8:	ec 1b       	sub	r30, r28
    9dca:	fd 0b       	sbc	r31, r29
    9dcc:	2e 17       	cp	r18, r30
    9dce:	3f 07       	cpc	r19, r31
    9dd0:	30 f4       	brcc	.+12     	; 0x9dde <_ZN7Display7lsm_intEcc+0x32>
    9dd2:	67 fd       	sbrc	r22, 7
    9dd4:	04 c0       	rjmp	.+8      	; 0x9dde <_ZN7Display7lsm_intEcc+0x32>
    lsm (text[index_], sc_);
    9dd6:	c2 0f       	add	r28, r18
    9dd8:	d3 1f       	adc	r29, r19
    9dda:	68 81       	ld	r22, Y
    9ddc:	01 c0       	rjmp	.+2      	; 0x9de0 <_ZN7Display7lsm_intEcc+0x34>
  } else {lsm (' ', sc_);} 
    9dde:	60 e2       	ldi	r22, 0x20	; 32
    9de0:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <_ZN7Display3lsmEcc>
}
    9de4:	df 91       	pop	r29
    9de6:	cf 91       	pop	r28
    9de8:	08 95       	ret

00009dea <_ZN7Display6scrollEccbb>:
// buffer advanced (fx, text, etc) 
void Display::loadChr (byte chr) {                                                          
  SPIsendMsg (21, 1, (byte[]) {chr});
}

void Display::scroll (char desplazamientoH, char desplazamientoV, bool circular, bool isRW) {
    9dea:	0f 93       	push	r16
    9dec:	df 93       	push	r29
    9dee:	cf 93       	push	r28
    9df0:	00 d0       	rcall	.+0      	; 0x9df2 <_ZN7Display6scrollEccbb+0x8>
    9df2:	0f 92       	push	r0
    9df4:	cd b7       	in	r28, 0x3d	; 61
    9df6:	de b7       	in	r29, 0x3e	; 62
  SPIsendMsg (22, 3, (byte[]) {10+desplazamientoH, 10+desplazamientoV, circular + 2*isRW});
    9df8:	66 5f       	subi	r22, 0xF6	; 246
    9dfa:	69 83       	std	Y+1, r22	; 0x01
    9dfc:	46 5f       	subi	r20, 0xF6	; 246
    9dfe:	4a 83       	std	Y+2, r20	; 0x02
    9e00:	00 0f       	add	r16, r16
    9e02:	02 0f       	add	r16, r18
    9e04:	0b 83       	std	Y+3, r16	; 0x03
    9e06:	66 e1       	ldi	r22, 0x16	; 22
    9e08:	43 e0       	ldi	r20, 0x03	; 3
    9e0a:	9e 01       	movw	r18, r28
    9e0c:	2f 5f       	subi	r18, 0xFF	; 255
    9e0e:	3f 4f       	sbci	r19, 0xFF	; 255
    9e10:	0e 94 95 4e 	call	0x9d2a	; 0x9d2a <_ZN7Display10SPIsendMsgEhhPh>
}
    9e14:	0f 90       	pop	r0
    9e16:	0f 90       	pop	r0
    9e18:	0f 90       	pop	r0
    9e1a:	cf 91       	pop	r28
    9e1c:	df 91       	pop	r29
    9e1e:	0f 91       	pop	r16
    9e20:	08 95       	ret

00009e22 <_ZN7Display6conwayEv>:
void Display::circulo (byte x, byte y, byte diametro) {
  SPIsendMsg (15, 2, (byte[]) {xy2byte(x, y), diametro});
}

void Display::conway () {
  SPIsendMsg (16, 0, NULL);
    9e22:	60 e1       	ldi	r22, 0x10	; 16
    9e24:	40 e0       	ldi	r20, 0x00	; 0
    9e26:	20 e0       	ldi	r18, 0x00	; 0
    9e28:	30 e0       	ldi	r19, 0x00	; 0
    9e2a:	0e 94 95 4e 	call	0x9d2a	; 0x9d2a <_ZN7Display10SPIsendMsgEhhPh>
}
    9e2e:	08 95       	ret

00009e30 <_ZN7Display6updateEm>:
byte Display::xy2byte (byte x, byte y) {        // codifica las coordenadas como 1 solo byte
  return y + 8*x;
}

// runtime
void Display::update (unsigned long milis) {
    9e30:	df 92       	push	r13
    9e32:	ef 92       	push	r14
    9e34:	ff 92       	push	r15
    9e36:	0f 93       	push	r16
    9e38:	1f 93       	push	r17
    9e3a:	cf 93       	push	r28
    9e3c:	df 93       	push	r29
    9e3e:	ec 01       	movw	r28, r24
    9e40:	7a 01       	movw	r14, r20
    9e42:	8b 01       	movw	r16, r22
	
	// variables de control
	static char sc;                    // sc es la posición actual de la letra
	static unsigned long timer = 0;
	
	if (milis-timer < pausa) {return;}    // verifica si pasó x tiempo desde la última vez, y si no, retorna sin hacer nada
    9e44:	80 91 ae 13 	lds	r24, 0x13AE
    9e48:	90 91 af 13 	lds	r25, 0x13AF
    9e4c:	a0 91 b0 13 	lds	r26, 0x13B0
    9e50:	b0 91 b1 13 	lds	r27, 0x13B1
    9e54:	9a 01       	movw	r18, r20
    9e56:	ab 01       	movw	r20, r22
    9e58:	28 1b       	sub	r18, r24
    9e5a:	39 0b       	sbc	r19, r25
    9e5c:	4a 0b       	sbc	r20, r26
    9e5e:	5b 0b       	sbc	r21, r27
    9e60:	8a 81       	ldd	r24, Y+2	; 0x02
    9e62:	9b 81       	ldd	r25, Y+3	; 0x03
    9e64:	aa 27       	eor	r26, r26
    9e66:	97 fd       	sbrc	r25, 7
    9e68:	a0 95       	com	r26
    9e6a:	ba 2f       	mov	r27, r26
    9e6c:	28 17       	cp	r18, r24
    9e6e:	39 07       	cpc	r19, r25
    9e70:	4a 07       	cpc	r20, r26
    9e72:	5b 07       	cpc	r21, r27
    9e74:	08 f4       	brcc	.+2      	; 0x9e78 <_ZN7Display6updateEm+0x48>
    9e76:	cc c0       	rjmp	.+408    	; 0xa010 <_ZN7Display6updateEm+0x1e0>
			
	timer = milis;
    9e78:	e0 92 ae 13 	sts	0x13AE, r14
    9e7c:	f0 92 af 13 	sts	0x13AF, r15
    9e80:	00 93 b0 13 	sts	0x13B0, r16
    9e84:	10 93 b1 13 	sts	0x13B1, r17
	
	if (retardo > 0) {retardo--; return;}   // retardo
    9e88:	89 85       	ldd	r24, Y+9	; 0x09
    9e8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    9e8c:	18 16       	cp	r1, r24
    9e8e:	19 06       	cpc	r1, r25
    9e90:	24 f4       	brge	.+8      	; 0x9e9a <_ZN7Display6updateEm+0x6a>
    9e92:	01 97       	sbiw	r24, 0x01	; 1
    9e94:	9a 87       	std	Y+10, r25	; 0x0a
    9e96:	89 87       	std	Y+9, r24	; 0x09
    9e98:	bb c0       	rjmp	.+374    	; 0xa010 <_ZN7Display6updateEm+0x1e0>
	
	if (init) {            // init es el flag que indica que se deben actualizar las variables de control 
    9e9a:	8f 81       	ldd	r24, Y+7	; 0x07
    9e9c:	88 23       	and	r24, r24
    9e9e:	19 f0       	breq	.+6      	; 0x9ea6 <_ZN7Display6updateEm+0x76>
		sc = 0; 
    9ea0:	10 92 b2 13 	sts	0x13B2, r1
		init = false;
    9ea4:	1f 82       	std	Y+7, r1	; 0x07
	}
	
	// empieza el loop
	switch (mode) {
    9ea6:	88 85       	ldd	r24, Y+8	; 0x08
    9ea8:	88 30       	cpi	r24, 0x08	; 8
    9eaa:	21 f0       	breq	.+8      	; 0x9eb4 <_ZN7Display6updateEm+0x84>
    9eac:	89 30       	cpi	r24, 0x09	; 9
    9eae:	09 f0       	breq	.+2      	; 0x9eb2 <_ZN7Display6updateEm+0x82>
    9eb0:	af c0       	rjmp	.+350    	; 0xa010 <_ZN7Display6updateEm+0x1e0>
    9eb2:	a2 c0       	rjmp	.+324    	; 0x9ff8 <_ZN7Display6updateEm+0x1c8>
		case DISPLAY_OFF: return;
		case SCROLL_TEXT: {
			sc -= sentido;                                           
    9eb4:	d0 90 b2 13 	lds	r13, 0x13B2
    9eb8:	8c 81       	ldd	r24, Y+4	; 0x04
    9eba:	d8 1a       	sub	r13, r24
    9ebc:	d0 92 b2 13 	sts	0x13B2, r13
			if (sc == ancho(text[index-1])) {index--; sc=0;} 
    9ec0:	0d 81       	ldd	r16, Y+5	; 0x05
    9ec2:	1e 81       	ldd	r17, Y+6	; 0x06
    9ec4:	e8 80       	ld	r14, Y
    9ec6:	f9 80       	ldd	r15, Y+1	; 0x01
    9ec8:	f7 01       	movw	r30, r14
    9eca:	e0 0f       	add	r30, r16
    9ecc:	f1 1f       	adc	r31, r17
    9ece:	31 97       	sbiw	r30, 0x01	; 1
    9ed0:	ce 01       	movw	r24, r28
    9ed2:	60 81       	ld	r22, Z
    9ed4:	0e 94 47 4e 	call	0x9c8e	; 0x9c8e <_ZN7Display5anchoEc>
    9ed8:	2d 2d       	mov	r18, r13
    9eda:	33 27       	eor	r19, r19
    9edc:	27 fd       	sbrc	r18, 7
    9ede:	30 95       	com	r19
    9ee0:	90 e0       	ldi	r25, 0x00	; 0
    9ee2:	28 17       	cp	r18, r24
    9ee4:	39 07       	cpc	r19, r25
    9ee6:	39 f4       	brne	.+14     	; 0x9ef6 <_ZN7Display6updateEm+0xc6>
    9ee8:	01 50       	subi	r16, 0x01	; 1
    9eea:	10 40       	sbci	r17, 0x00	; 0
    9eec:	1e 83       	std	Y+6, r17	; 0x06
    9eee:	0d 83       	std	Y+5, r16	; 0x05
    9ef0:	10 92 b2 13 	sts	0x13B2, r1
    9ef4:	13 c0       	rjmp	.+38     	; 0x9f1c <_ZN7Display6updateEm+0xec>
			else if (sc < 0) {index++; sc=ancho(text[index-1])-1;}              
    9ef6:	d7 fe       	sbrs	r13, 7
    9ef8:	11 c0       	rjmp	.+34     	; 0x9f1c <_ZN7Display6updateEm+0xec>
    9efa:	c8 01       	movw	r24, r16
    9efc:	01 96       	adiw	r24, 0x01	; 1
    9efe:	9e 83       	std	Y+6, r25	; 0x06
    9f00:	8d 83       	std	Y+5, r24	; 0x05
    9f02:	e8 0e       	add	r14, r24
    9f04:	f9 1e       	adc	r15, r25
    9f06:	08 94       	sec
    9f08:	e1 08       	sbc	r14, r1
    9f0a:	f1 08       	sbc	r15, r1
    9f0c:	ce 01       	movw	r24, r28
    9f0e:	f7 01       	movw	r30, r14
    9f10:	60 81       	ld	r22, Z
    9f12:	0e 94 47 4e 	call	0x9c8e	; 0x9c8e <_ZN7Display5anchoEc>
    9f16:	81 50       	subi	r24, 0x01	; 1
    9f18:	80 93 b2 13 	sts	0x13B2, r24
			scroll (sentido, 0, 0, true);                               
    9f1c:	ce 01       	movw	r24, r28
    9f1e:	6c 81       	ldd	r22, Y+4	; 0x04
    9f20:	40 e0       	ldi	r20, 0x00	; 0
    9f22:	20 e0       	ldi	r18, 0x00	; 0
    9f24:	01 e0       	ldi	r16, 0x01	; 1
    9f26:	0e 94 f5 4e 	call	0x9dea	; 0x9dea <_ZN7Display6scrollEccbb>
			switch (sentido) {
    9f2a:	8c 81       	ldd	r24, Y+4	; 0x04
    9f2c:	8f 3f       	cpi	r24, 0xFF	; 255
    9f2e:	c1 f1       	breq	.+112    	; 0x9fa0 <_ZN7Display6updateEm+0x170>
    9f30:	81 30       	cpi	r24, 0x01	; 1
    9f32:	09 f0       	breq	.+2      	; 0x9f36 <_ZN7Display6updateEm+0x106>
    9f34:	50 c0       	rjmp	.+160    	; 0x9fd6 <_ZN7Display6updateEm+0x1a6>
				case 1:  
					lsm_int (index, offset(text[index])-sc);
    9f36:	0d 81       	ldd	r16, Y+5	; 0x05
    9f38:	1e 81       	ldd	r17, Y+6	; 0x06
    9f3a:	e8 81       	ld	r30, Y
    9f3c:	f9 81       	ldd	r31, Y+1	; 0x01
    9f3e:	e0 0f       	add	r30, r16
    9f40:	f1 1f       	adc	r31, r17
    9f42:	ce 01       	movw	r24, r28
    9f44:	60 81       	ld	r22, Z
    9f46:	0e 94 67 4e 	call	0x9cce	; 0x9cce <_ZN7Display6offsetEc>
    9f4a:	90 91 b2 13 	lds	r25, 0x13B2
    9f4e:	48 2f       	mov	r20, r24
    9f50:	49 1b       	sub	r20, r25
    9f52:	ce 01       	movw	r24, r28
    9f54:	60 2f       	mov	r22, r16
    9f56:	0e 94 d6 4e 	call	0x9dac	; 0x9dac <_ZN7Display7lsm_intEcc>
					if (sc + ancho(text[index]) < 7) {lsm_int (index+1, offset(text[index+1])-ancho(text[index])-sc);}
    9f5a:	d0 90 b2 13 	lds	r13, 0x13B2
    9f5e:	08 81       	ld	r16, Y
    9f60:	19 81       	ldd	r17, Y+1	; 0x01
    9f62:	fd 80       	ldd	r15, Y+5	; 0x05
    9f64:	8f 2d       	mov	r24, r15
    9f66:	9e 81       	ldd	r25, Y+6	; 0x06
    9f68:	08 0f       	add	r16, r24
    9f6a:	19 1f       	adc	r17, r25
    9f6c:	ce 01       	movw	r24, r28
    9f6e:	f8 01       	movw	r30, r16
    9f70:	60 81       	ld	r22, Z
    9f72:	0e 94 47 4e 	call	0x9c8e	; 0x9c8e <_ZN7Display5anchoEc>
    9f76:	e8 2e       	mov	r14, r24
    9f78:	8d 2d       	mov	r24, r13
    9f7a:	99 27       	eor	r25, r25
    9f7c:	87 fd       	sbrc	r24, 7
    9f7e:	90 95       	com	r25
    9f80:	8e 0d       	add	r24, r14
    9f82:	91 1d       	adc	r25, r1
    9f84:	07 97       	sbiw	r24, 0x07	; 7
    9f86:	3c f5       	brge	.+78     	; 0x9fd6 <_ZN7Display6updateEm+0x1a6>
    9f88:	ce 01       	movw	r24, r28
    9f8a:	f8 01       	movw	r30, r16
    9f8c:	61 81       	ldd	r22, Z+1	; 0x01
    9f8e:	0e 94 67 4e 	call	0x9cce	; 0x9cce <_ZN7Display6offsetEc>
    9f92:	f3 94       	inc	r15
    9f94:	48 2f       	mov	r20, r24
    9f96:	4e 19       	sub	r20, r14
    9f98:	4d 19       	sub	r20, r13
    9f9a:	ce 01       	movw	r24, r28
    9f9c:	6f 2d       	mov	r22, r15
    9f9e:	19 c0       	rjmp	.+50     	; 0x9fd2 <_ZN7Display6updateEm+0x1a2>
					break;      
				case -1:
					lsm_int (index-1, offset(text[index-1])+ancho(text[index-1])-sc);
    9fa0:	ed 80       	ldd	r14, Y+5	; 0x05
    9fa2:	fe 80       	ldd	r15, Y+6	; 0x06
    9fa4:	e8 81       	ld	r30, Y
    9fa6:	f9 81       	ldd	r31, Y+1	; 0x01
    9fa8:	ee 0d       	add	r30, r14
    9faa:	ff 1d       	adc	r31, r15
    9fac:	31 97       	sbiw	r30, 0x01	; 1
    9fae:	00 81       	ld	r16, Z
    9fb0:	ce 01       	movw	r24, r28
    9fb2:	60 2f       	mov	r22, r16
    9fb4:	0e 94 67 4e 	call	0x9cce	; 0x9cce <_ZN7Display6offsetEc>
    9fb8:	18 2f       	mov	r17, r24
    9fba:	ce 01       	movw	r24, r28
    9fbc:	60 2f       	mov	r22, r16
    9fbe:	0e 94 47 4e 	call	0x9c8e	; 0x9c8e <_ZN7Display5anchoEc>
    9fc2:	ea 94       	dec	r14
    9fc4:	18 0f       	add	r17, r24
    9fc6:	80 91 b2 13 	lds	r24, 0x13B2
    9fca:	18 1b       	sub	r17, r24
    9fcc:	ce 01       	movw	r24, r28
    9fce:	6e 2d       	mov	r22, r14
    9fd0:	41 2f       	mov	r20, r17
    9fd2:	0e 94 d6 4e 	call	0x9dac	; 0x9dac <_ZN7Display7lsm_intEcc>
					break;      
			}
			if (index >= strlen(text) || index < 0) {mode = DISPLAY_OFF;}
    9fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    9fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    9fda:	a8 81       	ld	r26, Y
    9fdc:	b9 81       	ldd	r27, Y+1	; 0x01
    9fde:	fd 01       	movw	r30, r26
    9fe0:	01 90       	ld	r0, Z+
    9fe2:	00 20       	and	r0, r0
    9fe4:	e9 f7       	brne	.-6      	; 0x9fe0 <_ZN7Display6updateEm+0x1b0>
    9fe6:	31 97       	sbiw	r30, 0x01	; 1
    9fe8:	ea 1b       	sub	r30, r26
    9fea:	fb 0b       	sbc	r31, r27
    9fec:	8e 17       	cp	r24, r30
    9fee:	9f 07       	cpc	r25, r31
    9ff0:	68 f4       	brcc	.+26     	; 0xa00c <_ZN7Display6updateEm+0x1dc>
    9ff2:	97 ff       	sbrs	r25, 7
    9ff4:	0d c0       	rjmp	.+26     	; 0xa010 <_ZN7Display6updateEm+0x1e0>
    9ff6:	0a c0       	rjmp	.+20     	; 0xa00c <_ZN7Display6updateEm+0x1dc>
			break;
		}
		case CONWAY: {
			conway ();
    9ff8:	ce 01       	movw	r24, r28
    9ffa:	0e 94 11 4f 	call	0x9e22	; 0x9e22 <_ZN7Display6conwayEv>
			index --;
    9ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    a000:	9e 81       	ldd	r25, Y+6	; 0x06
    a002:	01 97       	sbiw	r24, 0x01	; 1
    a004:	9e 83       	std	Y+6, r25	; 0x06
    a006:	8d 83       	std	Y+5, r24	; 0x05
			if (index == 0) {mode = DISPLAY_OFF;}
    a008:	89 2b       	or	r24, r25
    a00a:	11 f4       	brne	.+4      	; 0xa010 <_ZN7Display6updateEm+0x1e0>
    a00c:	8a e0       	ldi	r24, 0x0A	; 10
    a00e:	88 87       	std	Y+8, r24	; 0x08
			break;
		}
	}
}
    a010:	df 91       	pop	r29
    a012:	cf 91       	pop	r28
    a014:	1f 91       	pop	r17
    a016:	0f 91       	pop	r16
    a018:	ff 90       	pop	r15
    a01a:	ef 90       	pop	r14
    a01c:	df 90       	pop	r13
    a01e:	08 95       	ret

0000a020 <_ZN7Display8setPixelEhh>:

byte Display::readPixel (byte columna, byte fila) {
  return SPIsendMsg (7, 1, (byte[]) {xy2byte(columna, fila)});       // esto no está implementado en el firmware del display
}

void Display::setPixel (byte columna, byte fila) {
    a020:	df 93       	push	r29
    a022:	cf 93       	push	r28
    a024:	0f 92       	push	r0
    a026:	cd b7       	in	r28, 0x3d	; 61
    a028:	de b7       	in	r29, 0x3e	; 62
  SPIsendMsg (8, 1, (byte[]) {xy2byte(columna, fila)});
    a02a:	66 0f       	add	r22, r22
    a02c:	66 0f       	add	r22, r22
    a02e:	66 0f       	add	r22, r22
    a030:	64 0f       	add	r22, r20
    a032:	69 83       	std	Y+1, r22	; 0x01
    a034:	68 e0       	ldi	r22, 0x08	; 8
    a036:	41 e0       	ldi	r20, 0x01	; 1
    a038:	9e 01       	movw	r18, r28
    a03a:	2f 5f       	subi	r18, 0xFF	; 255
    a03c:	3f 4f       	sbci	r19, 0xFF	; 255
    a03e:	0e 94 95 4e 	call	0x9d2a	; 0x9d2a <_ZN7Display10SPIsendMsgEhhPh>
}
    a042:	0f 90       	pop	r0
    a044:	cf 91       	pop	r28
    a046:	df 91       	pop	r29
    a048:	08 95       	ret

0000a04a <_ZN7Display8setColorEhhh>:

void Display::borraCuadrante (byte cuadrante) {
  SPIsendMsg (2, 1, (byte[]) {cuadrante});
}

void Display::setColor (byte colorMode, byte colorMin, byte colorMax) {
    a04a:	df 93       	push	r29
    a04c:	cf 93       	push	r28
    a04e:	00 d0       	rcall	.+0      	; 0xa050 <_ZN7Display8setColorEhhh+0x6>
    a050:	0f 92       	push	r0
    a052:	cd b7       	in	r28, 0x3d	; 61
    a054:	de b7       	in	r29, 0x3e	; 62
  SPIsendMsg (3, 3, (byte[]) {colorMode, colorMin, colorMax});
    a056:	69 83       	std	Y+1, r22	; 0x01
    a058:	4a 83       	std	Y+2, r20	; 0x02
    a05a:	2b 83       	std	Y+3, r18	; 0x03
    a05c:	63 e0       	ldi	r22, 0x03	; 3
    a05e:	43 e0       	ldi	r20, 0x03	; 3
    a060:	9e 01       	movw	r18, r28
    a062:	2f 5f       	subi	r18, 0xFF	; 255
    a064:	3f 4f       	sbci	r19, 0xFF	; 255
    a066:	0e 94 95 4e 	call	0x9d2a	; 0x9d2a <_ZN7Display10SPIsendMsgEhhPh>
}
    a06a:	0f 90       	pop	r0
    a06c:	0f 90       	pop	r0
    a06e:	0f 90       	pop	r0
    a070:	cf 91       	pop	r28
    a072:	df 91       	pop	r29
    a074:	08 95       	ret

0000a076 <_ZN7Display10scrollTextEPKciici>:
void Display::lsm (char chr, char sc) {                                       // "load - scroll - merge"
  SPIsendMsg (24, 2, (byte[]) {chr, sc+10});
}

// rutinas de alto nivel (locales)
void Display::scrollText (const char *text_, int pausa_, int retardo_, char sentido_, int index_) {  // presenta un texto en movimiento (al estilo cutcsa) 
    a076:	9f 92       	push	r9
    a078:	af 92       	push	r10
    a07a:	bf 92       	push	r11
    a07c:	cf 92       	push	r12
    a07e:	df 92       	push	r13
    a080:	ef 92       	push	r14
    a082:	ff 92       	push	r15
    a084:	0f 93       	push	r16
    a086:	1f 93       	push	r17
    a088:	cf 93       	push	r28
    a08a:	df 93       	push	r29
    a08c:	ec 01       	movw	r28, r24
    a08e:	16 2f       	mov	r17, r22
    a090:	97 2e       	mov	r9, r23
    a092:	6a 01       	movw	r12, r20
    a094:	59 01       	movw	r10, r18
																																													            // sentido: 0 manual; 1 izquierda; -1 derecha
                                                                                    // index es la letra actual. Al comienzo debe ser -1. 
																																					                         // pausa en milisegundos | reatardo en 'pausas'
  if (text != NULL) {
    a096:	88 81       	ld	r24, Y
    a098:	99 81       	ldd	r25, Y+1	; 0x01
    a09a:	00 97       	sbiw	r24, 0x00	; 0
    a09c:	11 f0       	breq	.+4      	; 0xa0a2 <_ZN7Display10scrollTextEPKciici+0x2c>
    free (text);
    a09e:	0e 94 08 80 	call	0x10010	; 0x10010 <free>
  }
  text = (char*) malloc (strlen(text_)+1);
    a0a2:	e1 2f       	mov	r30, r17
    a0a4:	f9 2d       	mov	r31, r9
    a0a6:	df 01       	movw	r26, r30
    a0a8:	0d 90       	ld	r0, X+
    a0aa:	00 20       	and	r0, r0
    a0ac:	e9 f7       	brne	.-6      	; 0xa0a8 <_ZN7Display10scrollTextEPKciici+0x32>
    a0ae:	cd 01       	movw	r24, r26
    a0b0:	8e 1b       	sub	r24, r30
    a0b2:	9f 0b       	sbc	r25, r31
    a0b4:	0e 94 5b 7f 	call	0xfeb6	; 0xfeb6 <malloc>
    a0b8:	88 83       	st	Y, r24
    a0ba:	99 83       	std	Y+1, r25	; 0x01
  strcpy (text, text_);
    a0bc:	61 2f       	mov	r22, r17
    a0be:	79 2d       	mov	r23, r9
    a0c0:	0e 94 bb 81 	call	0x10376	; 0x10376 <strcpy>
  pausa = pausa_;
    a0c4:	db 82       	std	Y+3, r13	; 0x03
    a0c6:	ca 82       	std	Y+2, r12	; 0x02
  retardo = retardo_;
    a0c8:	ba 86       	std	Y+10, r11	; 0x0a
    a0ca:	a9 86       	std	Y+9, r10	; 0x09
  sentido = sentido_;
    a0cc:	0c 83       	std	Y+4, r16	; 0x04
  index = index_;
    a0ce:	fe 82       	std	Y+6, r15	; 0x06
    a0d0:	ed 82       	std	Y+5, r14	; 0x05
  mode = SCROLL_TEXT;
    a0d2:	88 e0       	ldi	r24, 0x08	; 8
    a0d4:	88 87       	std	Y+8, r24	; 0x08
  init = true;
    a0d6:	81 e0       	ldi	r24, 0x01	; 1
    a0d8:	8f 83       	std	Y+7, r24	; 0x07
}
    a0da:	df 91       	pop	r29
    a0dc:	cf 91       	pop	r28
    a0de:	1f 91       	pop	r17
    a0e0:	0f 91       	pop	r16
    a0e2:	ff 90       	pop	r15
    a0e4:	ef 90       	pop	r14
    a0e6:	df 90       	pop	r13
    a0e8:	cf 90       	pop	r12
    a0ea:	bf 90       	pop	r11
    a0ec:	af 90       	pop	r10
    a0ee:	9f 90       	pop	r9
    a0f0:	08 95       	ret

0000a0f2 <_ZN13RemoteControl11displayTextEv>:

void RemoteControl::displayText () {
    a0f2:	ef 92       	push	r14
    a0f4:	ff 92       	push	r15
    a0f6:	0f 93       	push	r16
    a0f8:	cf 93       	push	r28
    a0fa:	df 93       	push	r29
    a0fc:	ec 01       	movw	r28, r24
	if (!pantalla.isBusy()) {
    a0fe:	83 ea       	ldi	r24, 0xA3	; 163
    a100:	93 e1       	ldi	r25, 0x13	; 19
    a102:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    a106:	88 23       	and	r24, r24
    a108:	f9 f4       	brne	.+62     	; 0xa148 <_ZN13RemoteControl11displayTextEv+0x56>
		pantalla.setColor (LISO, color1, color1);
    a10a:	2c a9       	ldd	r18, Y+52	; 0x34
    a10c:	83 ea       	ldi	r24, 0xA3	; 163
    a10e:	93 e1       	ldi	r25, 0x13	; 19
    a110:	60 e0       	ldi	r22, 0x00	; 0
    a112:	42 2f       	mov	r20, r18
    a114:	0e 94 25 50 	call	0xa04a	; 0xa04a <_ZN7Display8setColorEhhh>
		pantalla.scrollText (texto1.toCharArray(), 53, retardo*6);  // el retardo permite apretar varias veces un botón
    a118:	ce 01       	movw	r24, r28
    a11a:	88 96       	adiw	r24, 0x28	; 40
    a11c:	0e 94 89 78 	call	0xf112	; 0xf112 <_ZN6String11toCharArrayEv>
    a120:	bc 01       	movw	r22, r24
    a122:	8e a9       	ldd	r24, Y+54	; 0x36
    a124:	90 e0       	ldi	r25, 0x00	; 0
    a126:	9c 01       	movw	r18, r24
    a128:	22 0f       	add	r18, r18
    a12a:	33 1f       	adc	r19, r19
    a12c:	28 0f       	add	r18, r24
    a12e:	39 1f       	adc	r19, r25
    a130:	22 0f       	add	r18, r18
    a132:	33 1f       	adc	r19, r19
    a134:	83 ea       	ldi	r24, 0xA3	; 163
    a136:	93 e1       	ldi	r25, 0x13	; 19
    a138:	45 e3       	ldi	r20, 0x35	; 53
    a13a:	50 e0       	ldi	r21, 0x00	; 0
    a13c:	01 e0       	ldi	r16, 0x01	; 1
    a13e:	ee 24       	eor	r14, r14
    a140:	ea 94       	dec	r14
    a142:	fe 2c       	mov	r15, r14
    a144:	0e 94 3b 50 	call	0xa076	; 0xa076 <_ZN7Display10scrollTextEPKciici>
	}			                                             // harcodeo en la velocidad del scroll
	retardo = false;
    a148:	1e aa       	std	Y+54, r1	; 0x36
    a14a:	df 91       	pop	r29
    a14c:	cf 91       	pop	r28
    a14e:	0f 91       	pop	r16
    a150:	ff 90       	pop	r15
    a152:	ef 90       	pop	r14
    a154:	08 95       	ret

0000a156 <_ZN13RemoteControlC1Ev>:
#include "ax12.h"               // por el eterno bin2sign()


RemoteControl rc;                     // ojebto

RemoteControl::RemoteControl () {
    a156:	cf 93       	push	r28
    a158:	df 93       	push	r29
    a15a:	ec 01       	movw	r28, r24
    a15c:	88 96       	adiw	r24, 0x28	; 40
    a15e:	6a e6       	ldi	r22, 0x6A	; 106
    a160:	72 e0       	ldi	r23, 0x02	; 2
    a162:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    a166:	ce 01       	movw	r24, r28
    a168:	8e 96       	adiw	r24, 0x2e	; 46
    a16a:	6a e6       	ldi	r22, 0x6A	; 106
    a16c:	72 e0       	ldi	r23, 0x02	; 2
    a16e:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
	velocidad = 8.0;
    a172:	80 e0       	ldi	r24, 0x00	; 0
    a174:	90 e0       	ldi	r25, 0x00	; 0
    a176:	a0 e0       	ldi	r26, 0x00	; 0
    a178:	b1 e4       	ldi	r27, 0x41	; 65
    a17a:	88 83       	st	Y, r24
    a17c:	99 83       	std	Y+1, r25	; 0x01
    a17e:	aa 83       	std	Y+2, r26	; 0x02
    a180:	bb 83       	std	Y+3, r27	; 0x03
	marcha = 1;
    a182:	81 e0       	ldi	r24, 0x01	; 1
    a184:	8c 83       	std	Y+4, r24	; 0x04
	angulo_offset = 0;
    a186:	80 e0       	ldi	r24, 0x00	; 0
    a188:	90 e0       	ldi	r25, 0x00	; 0
    a18a:	a0 e0       	ldi	r26, 0x00	; 0
    a18c:	b0 e0       	ldi	r27, 0x00	; 0
    a18e:	89 87       	std	Y+9, r24	; 0x09
    a190:	9a 87       	std	Y+10, r25	; 0x0a
    a192:	ab 87       	std	Y+11, r26	; 0x0b
    a194:	bc 87       	std	Y+12, r27	; 0x0c
	largo_pasos = 0;
    a196:	8d 87       	std	Y+13, r24	; 0x0d
    a198:	9e 87       	std	Y+14, r25	; 0x0e
    a19a:	af 87       	std	Y+15, r26	; 0x0f
    a19c:	b8 8b       	std	Y+16, r27	; 0x10
	desplazamiento = -1;                 // esto? podría cambiar?
    a19e:	80 e0       	ldi	r24, 0x00	; 0
    a1a0:	90 e0       	ldi	r25, 0x00	; 0
    a1a2:	a0 e8       	ldi	r26, 0x80	; 128
    a1a4:	bf eb       	ldi	r27, 0xBF	; 191
    a1a6:	8d 8b       	std	Y+21, r24	; 0x15
    a1a8:	9e 8b       	std	Y+22, r25	; 0x16
    a1aa:	af 8b       	std	Y+23, r26	; 0x17
    a1ac:	b8 8f       	std	Y+24, r27	; 0x18
	centro_caminata = (COORD2D) {0, 0};
    a1ae:	de 01       	movw	r26, r28
    a1b0:	59 96       	adiw	r26, 0x19	; 25
    a1b2:	e0 ea       	ldi	r30, 0xA0	; 160
    a1b4:	f4 e0       	ldi	r31, 0x04	; 4
    a1b6:	88 e0       	ldi	r24, 0x08	; 8
    a1b8:	01 90       	ld	r0, Z+
    a1ba:	0d 92       	st	X+, r0
    a1bc:	81 50       	subi	r24, 0x01	; 1
    a1be:	e1 f7       	brne	.-8      	; 0xa1b8 <_ZN13RemoteControlC1Ev+0x62>
	inc = .5;                          // incremento para todas las variables
    a1c0:	20 e0       	ldi	r18, 0x00	; 0
    a1c2:	30 e0       	ldi	r19, 0x00	; 0
    a1c4:	40 e0       	ldi	r20, 0x00	; 0
    a1c6:	5f e3       	ldi	r21, 0x3F	; 63
    a1c8:	29 a3       	std	Y+33, r18	; 0x21
    a1ca:	3a a3       	std	Y+34, r19	; 0x22
    a1cc:	4b a3       	std	Y+35, r20	; 0x23
    a1ce:	5c a3       	std	Y+36, r21	; 0x24
	color1 = RGB(2, 3, 2);
    a1d0:	8e e2       	ldi	r24, 0x2E	; 46
    a1d2:	8c ab       	std	Y+52, r24	; 0x34
	modo = REMOTE_OFF;                   // máquina de estados
    a1d4:	1e a2       	std	Y+38, r1	; 0x26
	isMoving = false;
    a1d6:	1d a2       	std	Y+37, r1	; 0x25
	retardo = false;
    a1d8:	1e aa       	std	Y+54, r1	; 0x36
	step = .5;
    a1da:	29 8b       	std	Y+17, r18	; 0x11
    a1dc:	3a 8b       	std	Y+18, r19	; 0x12
    a1de:	4b 8b       	std	Y+19, r20	; 0x13
    a1e0:	5c 8b       	std	Y+20, r21	; 0x14
	pagina = 0;
    a1e2:	1f a2       	std	Y+39, r1	; 0x27
}	
    a1e4:	df 91       	pop	r29
    a1e6:	cf 91       	pop	r28
    a1e8:	08 95       	ret

0000a1ea <_Z41__static_initialization_and_destruction_0ii>:
	if (!pantalla.isBusy()) {
		pantalla.setColor (LISO, color1, color1);
		pantalla.scrollText (texto1.toCharArray(), 53, retardo*6);  // el retardo permite apretar varias veces un botón
	}			                                             // harcodeo en la velocidad del scroll
	retardo = false;
    a1ea:	81 30       	cpi	r24, 0x01	; 1
    a1ec:	91 05       	cpc	r25, r1
    a1ee:	41 f4       	brne	.+16     	; 0xa200 <_Z41__static_initialization_and_destruction_0ii+0x16>
    a1f0:	6f 5f       	subi	r22, 0xFF	; 255
    a1f2:	7f 4f       	sbci	r23, 0xFF	; 255
    a1f4:	91 f4       	brne	.+36     	; 0xa21a <_Z41__static_initialization_and_destruction_0ii+0x30>
#include "Display.h"
#include "string.h"
#include "ax12.h"               // por el eterno bin2sign()


RemoteControl rc;                     // ojebto
    a1f6:	83 eb       	ldi	r24, 0xB3	; 179
    a1f8:	93 e1       	ldi	r25, 0x13	; 19
    a1fa:	0e 94 ab 50 	call	0xa156	; 0xa156 <_ZN13RemoteControlC1Ev>
    a1fe:	08 95       	ret
    a200:	89 2b       	or	r24, r25
    a202:	59 f4       	brne	.+22     	; 0xa21a <_Z41__static_initialization_and_destruction_0ii+0x30>
    a204:	6f 5f       	subi	r22, 0xFF	; 255
    a206:	7f 4f       	sbci	r23, 0xFF	; 255
    a208:	41 f4       	brne	.+16     	; 0xa21a <_Z41__static_initialization_and_destruction_0ii+0x30>

// modos del control remoto
enum {REMOTE_OFF, CAMINATAS1, CAMINATAS2, TRASLACIONES, ROTACIONES, EDITAR_CENTRO, EDITAR_POS, OSCILADORES1,  OSCILADORES2, OSCILADORES3, CONDUCTAS};


class RemoteControl {
    a20a:	81 ee       	ldi	r24, 0xE1	; 225
    a20c:	93 e1       	ldi	r25, 0x13	; 19
    a20e:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    a212:	8b ed       	ldi	r24, 0xDB	; 219
    a214:	93 e1       	ldi	r25, 0x13	; 19
    a216:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    a21a:	08 95       	ret

0000a21c <_GLOBAL__D_rc>:
	if (!pantalla.isBusy()) {
		pantalla.setColor (LISO, color1, color1);
		pantalla.scrollText (texto1.toCharArray(), 53, retardo*6);  // el retardo permite apretar varias veces un botón
	}			                                             // harcodeo en la velocidad del scroll
	retardo = false;
    a21c:	80 e0       	ldi	r24, 0x00	; 0
    a21e:	90 e0       	ldi	r25, 0x00	; 0
    a220:	6f ef       	ldi	r22, 0xFF	; 255
    a222:	7f ef       	ldi	r23, 0xFF	; 255
    a224:	0e 94 f5 50 	call	0xa1ea	; 0xa1ea <_Z41__static_initialization_and_destruction_0ii>
    a228:	08 95       	ret

0000a22a <_GLOBAL__I_rc>:
    a22a:	81 e0       	ldi	r24, 0x01	; 1
    a22c:	90 e0       	ldi	r25, 0x00	; 0
    a22e:	6f ef       	ldi	r22, 0xFF	; 255
    a230:	7f ef       	ldi	r23, 0xFF	; 255
    a232:	0e 94 f5 50 	call	0xa1ea	; 0xa1ea <_Z41__static_initialization_and_destruction_0ii>
    a236:	08 95       	ret

0000a238 <_ZN13RemoteControl11osciladoresEh>:
			
	}
	
}

void RemoteControl::osciladores (byte comando) {
    a238:	6f 92       	push	r6
    a23a:	7f 92       	push	r7
    a23c:	8f 92       	push	r8
    a23e:	9f 92       	push	r9
    a240:	af 92       	push	r10
    a242:	bf 92       	push	r11
    a244:	cf 92       	push	r12
    a246:	df 92       	push	r13
    a248:	ef 92       	push	r14
    a24a:	ff 92       	push	r15
    a24c:	0f 93       	push	r16
    a24e:	1f 93       	push	r17
    a250:	df 93       	push	r29
    a252:	cf 93       	push	r28
    a254:	cd b7       	in	r28, 0x3d	; 61
    a256:	de b7       	in	r29, 0x3e	; 62
    a258:	c1 59       	subi	r28, 0x91	; 145
    a25a:	d0 40       	sbci	r29, 0x00	; 0
    a25c:	0f b6       	in	r0, 0x3f	; 63
    a25e:	f8 94       	cli
    a260:	de bf       	out	0x3e, r29	; 62
    a262:	0f be       	out	0x3f, r0	; 63
    a264:	cd bf       	out	0x3d, r28	; 61
    a266:	3c 01       	movw	r6, r24
		
	static byte parametro = TRASL_X;
	byte sub_parametro;
	char increment = 0;
		
	switch (comando) {
    a268:	6f 31       	cpi	r22, 0x1F	; 31
    a26a:	09 f4       	brne	.+2      	; 0xa26e <_ZN13RemoteControl11osciladoresEh+0x36>
    a26c:	69 c1       	rjmp	.+722    	; 0xa540 <_ZN13RemoteControl11osciladoresEh+0x308>
    a26e:	60 32       	cpi	r22, 0x20	; 32
    a270:	c8 f4       	brcc	.+50     	; 0xa2a4 <_ZN13RemoteControl11osciladoresEh+0x6c>
    a272:	63 31       	cpi	r22, 0x13	; 19
    a274:	09 f4       	brne	.+2      	; 0xa278 <_ZN13RemoteControl11osciladoresEh+0x40>
    a276:	60 c0       	rjmp	.+192    	; 0xa338 <_ZN13RemoteControl11osciladoresEh+0x100>
    a278:	64 31       	cpi	r22, 0x14	; 20
    a27a:	50 f4       	brcc	.+20     	; 0xa290 <_ZN13RemoteControl11osciladoresEh+0x58>
    a27c:	61 30       	cpi	r22, 0x01	; 1
    a27e:	09 f4       	brne	.+2      	; 0xa282 <_ZN13RemoteControl11osciladoresEh+0x4a>
    a280:	f3 c0       	rjmp	.+486    	; 0xa468 <_ZN13RemoteControl11osciladoresEh+0x230>
    a282:	61 30       	cpi	r22, 0x01	; 1
    a284:	08 f4       	brcc	.+2      	; 0xa288 <_ZN13RemoteControl11osciladoresEh+0x50>
    a286:	d6 c0       	rjmp	.+428    	; 0xa434 <_ZN13RemoteControl11osciladoresEh+0x1fc>
    a288:	60 31       	cpi	r22, 0x10	; 16
    a28a:	09 f0       	breq	.+2      	; 0xa28e <_ZN13RemoteControl11osciladoresEh+0x56>
    a28c:	2d c3       	rjmp	.+1626   	; 0xa8e8 <_ZN13RemoteControl11osciladoresEh+0x6b0>
    a28e:	61 c0       	rjmp	.+194    	; 0xa352 <_ZN13RemoteControl11osciladoresEh+0x11a>
    a290:	6b 31       	cpi	r22, 0x1B	; 27
    a292:	09 f4       	brne	.+2      	; 0xa296 <_ZN13RemoteControl11osciladoresEh+0x5e>
    a294:	3f c1       	rjmp	.+638    	; 0xa514 <_ZN13RemoteControl11osciladoresEh+0x2dc>
    a296:	6e 31       	cpi	r22, 0x1E	; 30
    a298:	09 f4       	brne	.+2      	; 0xa29c <_ZN13RemoteControl11osciladoresEh+0x64>
    a29a:	28 c1       	rjmp	.+592    	; 0xa4ec <_ZN13RemoteControl11osciladoresEh+0x2b4>
    a29c:	6a 31       	cpi	r22, 0x1A	; 26
    a29e:	09 f0       	breq	.+2      	; 0xa2a2 <_ZN13RemoteControl11osciladoresEh+0x6a>
    a2a0:	23 c3       	rjmp	.+1606   	; 0xa8e8 <_ZN13RemoteControl11osciladoresEh+0x6b0>
    a2a2:	10 c1       	rjmp	.+544    	; 0xa4c4 <_ZN13RemoteControl11osciladoresEh+0x28c>
    a2a4:	6c 35       	cpi	r22, 0x5C	; 92
    a2a6:	a1 f0       	breq	.+40     	; 0xa2d0 <_ZN13RemoteControl11osciladoresEh+0x98>
    a2a8:	6d 35       	cpi	r22, 0x5D	; 93
    a2aa:	50 f4       	brcc	.+20     	; 0xa2c0 <_ZN13RemoteControl11osciladoresEh+0x88>
    a2ac:	6f 34       	cpi	r22, 0x4F	; 79
    a2ae:	09 f4       	brne	.+2      	; 0xa2b2 <_ZN13RemoteControl11osciladoresEh+0x7a>
    a2b0:	5d c0       	rjmp	.+186    	; 0xa36c <_ZN13RemoteControl11osciladoresEh+0x134>
    a2b2:	63 35       	cpi	r22, 0x53	; 83
    a2b4:	09 f4       	brne	.+2      	; 0xa2b8 <_ZN13RemoteControl11osciladoresEh+0x80>
    a2b6:	82 c0       	rjmp	.+260    	; 0xa3bc <_ZN13RemoteControl11osciladoresEh+0x184>
    a2b8:	6e 34       	cpi	r22, 0x4E	; 78
    a2ba:	09 f0       	breq	.+2      	; 0xa2be <_ZN13RemoteControl11osciladoresEh+0x86>
    a2bc:	15 c3       	rjmp	.+1578   	; 0xa8e8 <_ZN13RemoteControl11osciladoresEh+0x6b0>
    a2be:	6a c0       	rjmp	.+212    	; 0xa394 <_ZN13RemoteControl11osciladoresEh+0x15c>
    a2c0:	6e 35       	cpi	r22, 0x5E	; 94
    a2c2:	f1 f0       	breq	.+60     	; 0xa300 <_ZN13RemoteControl11osciladoresEh+0xc8>
    a2c4:	6e 35       	cpi	r22, 0x5E	; 94
    a2c6:	50 f1       	brcs	.+84     	; 0xa31c <_ZN13RemoteControl11osciladoresEh+0xe4>
    a2c8:	6f 35       	cpi	r22, 0x5F	; 95
    a2ca:	09 f0       	breq	.+2      	; 0xa2ce <_ZN13RemoteControl11osciladoresEh+0x96>
    a2cc:	0d c3       	rjmp	.+1562   	; 0xa8e8 <_ZN13RemoteControl11osciladoresEh+0x6b0>
    a2ce:	0c c0       	rjmp	.+24     	; 0xa2e8 <_ZN13RemoteControl11osciladoresEh+0xb0>
		case RC_UP:
			if (pantalla.isBusy()) {break;}
    a2d0:	83 ea       	ldi	r24, 0xA3	; 163
    a2d2:	93 e1       	ldi	r25, 0x13	; 19
    a2d4:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    a2d8:	88 23       	and	r24, r24
    a2da:	09 f0       	breq	.+2      	; 0xa2de <_ZN13RemoteControl11osciladoresEh+0xa6>
    a2dc:	05 c3       	rjmp	.+1546   	; 0xa8e8 <_ZN13RemoteControl11osciladoresEh+0x6b0>
			retardo = true;
    a2de:	81 e0       	ldi	r24, 0x01	; 1
    a2e0:	f3 01       	movw	r30, r6
    a2e2:	86 ab       	std	Z+54, r24	; 0x36
			parametro = TRASL_Z;
    a2e4:	82 e0       	ldi	r24, 0x02	; 2
    a2e6:	3f c0       	rjmp	.+126    	; 0xa366 <_ZN13RemoteControl11osciladoresEh+0x12e>
			sub_parametro = AMP;
			increment = 1;
			break;
		
		case RC_DOWN:
			if (pantalla.isBusy()) {break;}
    a2e8:	83 ea       	ldi	r24, 0xA3	; 163
    a2ea:	93 e1       	ldi	r25, 0x13	; 19
    a2ec:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    a2f0:	88 23       	and	r24, r24
    a2f2:	09 f0       	breq	.+2      	; 0xa2f6 <_ZN13RemoteControl11osciladoresEh+0xbe>
    a2f4:	f9 c2       	rjmp	.+1522   	; 0xa8e8 <_ZN13RemoteControl11osciladoresEh+0x6b0>
			retardo = true;
    a2f6:	81 e0       	ldi	r24, 0x01	; 1
    a2f8:	f3 01       	movw	r30, r6
    a2fa:	86 ab       	std	Z+54, r24	; 0x36
			parametro = TRASL_Z;
    a2fc:	82 e0       	ldi	r24, 0x02	; 2
    a2fe:	26 c0       	rjmp	.+76     	; 0xa34c <_ZN13RemoteControl11osciladoresEh+0x114>
			sub_parametro = AMP;
			increment = -1;
			break;
		
		case RC_RIGHT:
			if (pantalla.isBusy()) {break;}
    a300:	83 ea       	ldi	r24, 0xA3	; 163
    a302:	93 e1       	ldi	r25, 0x13	; 19
    a304:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    a308:	88 23       	and	r24, r24
    a30a:	09 f0       	breq	.+2      	; 0xa30e <_ZN13RemoteControl11osciladoresEh+0xd6>
    a30c:	ed c2       	rjmp	.+1498   	; 0xa8e8 <_ZN13RemoteControl11osciladoresEh+0x6b0>
			retardo = true;
    a30e:	81 e0       	ldi	r24, 0x01	; 1
    a310:	f3 01       	movw	r30, r6
    a312:	86 ab       	std	Z+54, r24	; 0x36
			parametro = TRASL_X;
    a314:	10 92 ea 13 	sts	0x13EA, r1
    a318:	ee 24       	eor	r14, r14
    a31a:	0f c1       	rjmp	.+542    	; 0xa53a <_ZN13RemoteControl11osciladoresEh+0x302>
			sub_parametro = AMP;
			increment = 1;
			break;
	
		case RC_LEFT:
			if (pantalla.isBusy()) {break;}
    a31c:	83 ea       	ldi	r24, 0xA3	; 163
    a31e:	93 e1       	ldi	r25, 0x13	; 19
    a320:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    a324:	88 23       	and	r24, r24
    a326:	09 f0       	breq	.+2      	; 0xa32a <_ZN13RemoteControl11osciladoresEh+0xf2>
    a328:	df c2       	rjmp	.+1470   	; 0xa8e8 <_ZN13RemoteControl11osciladoresEh+0x6b0>
			retardo = true;
    a32a:	81 e0       	ldi	r24, 0x01	; 1
    a32c:	f3 01       	movw	r30, r6
    a32e:	86 ab       	std	Z+54, r24	; 0x36
			parametro = TRASL_X;
    a330:	10 92 ea 13 	sts	0x13EA, r1
    a334:	ee 24       	eor	r14, r14
    a336:	17 c1       	rjmp	.+558    	; 0xa566 <_ZN13RemoteControl11osciladoresEh+0x32e>
			sub_parametro = AMP;
			increment = -1;
			break;

		case RC_MTS:
			if (pantalla.isBusy()) {break;}
    a338:	83 ea       	ldi	r24, 0xA3	; 163
    a33a:	93 e1       	ldi	r25, 0x13	; 19
    a33c:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    a340:	88 23       	and	r24, r24
    a342:	09 f0       	breq	.+2      	; 0xa346 <_ZN13RemoteControl11osciladoresEh+0x10e>
    a344:	d1 c2       	rjmp	.+1442   	; 0xa8e8 <_ZN13RemoteControl11osciladoresEh+0x6b0>
			retardo = true;
    a346:	81 e0       	ldi	r24, 0x01	; 1
    a348:	f3 01       	movw	r30, r6
    a34a:	86 ab       	std	Z+54, r24	; 0x36
			parametro = TRASL_Y;
    a34c:	80 93 ea 13 	sts	0x13EA, r24
    a350:	f1 cf       	rjmp	.-30     	; 0xa334 <_ZN13RemoteControl11osciladoresEh+0xfc>
			sub_parametro = AMP;
			increment = -1;
			break;
			
		case RC_MENU:
			if (pantalla.isBusy()) {break;}
    a352:	83 ea       	ldi	r24, 0xA3	; 163
    a354:	93 e1       	ldi	r25, 0x13	; 19
    a356:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    a35a:	88 23       	and	r24, r24
    a35c:	09 f0       	breq	.+2      	; 0xa360 <_ZN13RemoteControl11osciladoresEh+0x128>
    a35e:	c4 c2       	rjmp	.+1416   	; 0xa8e8 <_ZN13RemoteControl11osciladoresEh+0x6b0>
			retardo = true;
    a360:	81 e0       	ldi	r24, 0x01	; 1
    a362:	f3 01       	movw	r30, r6
    a364:	86 ab       	std	Z+54, r24	; 0x36
			parametro = TRASL_Y;
    a366:	80 93 ea 13 	sts	0x13EA, r24
    a36a:	d6 cf       	rjmp	.-84     	; 0xa318 <_ZN13RemoteControl11osciladoresEh+0xe0>
			sub_parametro = AMP;
			increment = 1;
			break;
			
		case RC_CCTTX:
			if (pantalla.isBusy()) {break;}
    a36c:	83 ea       	ldi	r24, 0xA3	; 163
    a36e:	93 e1       	ldi	r25, 0x13	; 19
    a370:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    a374:	88 23       	and	r24, r24
    a376:	09 f0       	breq	.+2      	; 0xa37a <_ZN13RemoteControl11osciladoresEh+0x142>
    a378:	b7 c2       	rjmp	.+1390   	; 0xa8e8 <_ZN13RemoteControl11osciladoresEh+0x6b0>
			retardo = true;
    a37a:	81 e0       	ldi	r24, 0x01	; 1
    a37c:	f3 01       	movw	r30, r6
    a37e:	86 ab       	std	Z+54, r24	; 0x36
			parametro %= 3;
    a380:	80 91 ea 13 	lds	r24, 0x13EA
    a384:	63 e0       	ldi	r22, 0x03	; 3
    a386:	0e 94 e5 7e 	call	0xfdca	; 0xfdca <__udivmodqi4>
    a38a:	90 93 ea 13 	sts	0x13EA, r25
    a38e:	b3 e0       	ldi	r27, 0x03	; 3
    a390:	eb 2e       	mov	r14, r27
    a392:	e9 c0       	rjmp	.+466    	; 0xa566 <_ZN13RemoteControl11osciladoresEh+0x32e>
			sub_parametro = BROWN;
			increment = -1;
			break;
			
		case RC_EXIT:
			if (pantalla.isBusy()) {break;}
    a394:	83 ea       	ldi	r24, 0xA3	; 163
    a396:	93 e1       	ldi	r25, 0x13	; 19
    a398:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    a39c:	88 23       	and	r24, r24
    a39e:	09 f0       	breq	.+2      	; 0xa3a2 <_ZN13RemoteControl11osciladoresEh+0x16a>
    a3a0:	a3 c2       	rjmp	.+1350   	; 0xa8e8 <_ZN13RemoteControl11osciladoresEh+0x6b0>
			retardo = true;
    a3a2:	81 e0       	ldi	r24, 0x01	; 1
    a3a4:	f3 01       	movw	r30, r6
    a3a6:	86 ab       	std	Z+54, r24	; 0x36
			parametro %= 3;
    a3a8:	80 91 ea 13 	lds	r24, 0x13EA
    a3ac:	63 e0       	ldi	r22, 0x03	; 3
    a3ae:	0e 94 e5 7e 	call	0xfdca	; 0xfdca <__udivmodqi4>
    a3b2:	90 93 ea 13 	sts	0x13EA, r25
    a3b6:	a3 e0       	ldi	r26, 0x03	; 3
    a3b8:	ea 2e       	mov	r14, r26
    a3ba:	bf c0       	rjmp	.+382    	; 0xa53a <_ZN13RemoteControl11osciladoresEh+0x302>
			sub_parametro = BROWN;
			increment = 1;
			break;
			
		case RC_ENTER1:
			if (!isMoving) {
    a3bc:	fc 01       	movw	r30, r24
    a3be:	85 a1       	ldd	r24, Z+37	; 0x25
    a3c0:	f8 e2       	ldi	r31, 0x28	; 40
    a3c2:	cf 2e       	mov	r12, r31
    a3c4:	d1 2c       	mov	r13, r1
    a3c6:	c6 0c       	add	r12, r6
    a3c8:	d7 1c       	adc	r13, r7
    a3ca:	88 23       	and	r24, r24
    a3cc:	e9 f4       	brne	.+58     	; 0xa408 <_ZN13RemoteControl11osciladoresEh+0x1d0>
				texto1 = "PLAY";
    a3ce:	8e 01       	movw	r16, r28
    a3d0:	0f 5f       	subi	r16, 0xFF	; 255
    a3d2:	1f 4f       	sbci	r17, 0xFF	; 255
    a3d4:	c8 01       	movw	r24, r16
    a3d6:	6b e6       	ldi	r22, 0x6B	; 107
    a3d8:	72 e0       	ldi	r23, 0x02	; 2
    a3da:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    a3de:	c6 01       	movw	r24, r12
    a3e0:	b8 01       	movw	r22, r16
    a3e2:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    a3e6:	c8 01       	movw	r24, r16
    a3e8:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
				mov.oscilador (1, 32767);
    a3ec:	85 ee       	ldi	r24, 0xE5	; 229
    a3ee:	9f e0       	ldi	r25, 0x0F	; 15
    a3f0:	40 e0       	ldi	r20, 0x00	; 0
    a3f2:	50 e0       	ldi	r21, 0x00	; 0
    a3f4:	60 e8       	ldi	r22, 0x80	; 128
    a3f6:	7f e3       	ldi	r23, 0x3F	; 63
    a3f8:	2f ef       	ldi	r18, 0xFF	; 255
    a3fa:	3f e7       	ldi	r19, 0x7F	; 127
    a3fc:	0e 94 32 10 	call	0x2064	; 0x2064 <_ZN10Movimiento9osciladorEfi>
				isMoving = true;
    a400:	81 e0       	ldi	r24, 0x01	; 1
    a402:	f3 01       	movw	r30, r6
    a404:	85 a3       	std	Z+37, r24	; 0x25
    a406:	70 c2       	rjmp	.+1248   	; 0xa8e8 <_ZN13RemoteControl11osciladoresEh+0x6b0>
			} else {
				texto1 = "STOP";
    a408:	8e 01       	movw	r16, r28
    a40a:	09 5f       	subi	r16, 0xF9	; 249
    a40c:	1f 4f       	sbci	r17, 0xFF	; 255
    a40e:	c8 01       	movw	r24, r16
    a410:	60 e7       	ldi	r22, 0x70	; 112
    a412:	72 e0       	ldi	r23, 0x02	; 2
    a414:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    a418:	c6 01       	movw	r24, r12
    a41a:	b8 01       	movw	r22, r16
    a41c:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    a420:	c8 01       	movw	r24, r16
    a422:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
				mov.stop();
    a426:	85 ee       	ldi	r24, 0xE5	; 229
    a428:	9f e0       	ldi	r25, 0x0F	; 15
    a42a:	0e 94 28 15 	call	0x2a50	; 0x2a50 <_ZN10Movimiento4stopEv>
				isMoving = false;
    a42e:	f3 01       	movw	r30, r6
    a430:	15 a2       	std	Z+37, r1	; 0x25
    a432:	5a c2       	rjmp	.+1204   	; 0xa8e8 <_ZN13RemoteControl11osciladoresEh+0x6b0>
			break;

		/* esto es más provisorio */
		////////////////////////////
		case 0:
			if (!isMoving) {
    a434:	fc 01       	movw	r30, r24
    a436:	85 a1       	ldd	r24, Z+37	; 0x25
    a438:	88 23       	and	r24, r24
    a43a:	09 f0       	breq	.+2      	; 0xa43e <_ZN13RemoteControl11osciladoresEh+0x206>
    a43c:	55 c2       	rjmp	.+1194   	; 0xa8e8 <_ZN13RemoteControl11osciladoresEh+0x6b0>
				texto1 = "Reset";
    a43e:	8e 01       	movw	r16, r28
    a440:	03 5f       	subi	r16, 0xF3	; 243
    a442:	1f 4f       	sbci	r17, 0xFF	; 255
    a444:	c8 01       	movw	r24, r16
    a446:	65 e7       	ldi	r22, 0x75	; 117
    a448:	72 e0       	ldi	r23, 0x02	; 2
    a44a:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    a44e:	c3 01       	movw	r24, r6
    a450:	88 96       	adiw	r24, 0x28	; 40
    a452:	b8 01       	movw	r22, r16
    a454:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    a458:	c8 01       	movw	r24, r16
    a45a:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
				mov.osc_reset ();
    a45e:	85 ee       	ldi	r24, 0xE5	; 229
    a460:	9f e0       	ldi	r25, 0x0F	; 15
    a462:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZN10Movimiento9osc_resetEv>
    a466:	40 c2       	rjmp	.+1152   	; 0xa8e8 <_ZN13RemoteControl11osciladoresEh+0x6b0>
			} 
			break;
		
		case 1:
			if (!isMoving) {
    a468:	fc 01       	movw	r30, r24
    a46a:	85 a1       	ldd	r24, Z+37	; 0x25
    a46c:	88 23       	and	r24, r24
    a46e:	09 f0       	breq	.+2      	; 0xa472 <_ZN13RemoteControl11osciladoresEh+0x23a>
    a470:	3b c2       	rjmp	.+1142   	; 0xa8e8 <_ZN13RemoteControl11osciladoresEh+0x6b0>
				texto1 = "Random";    
    a472:	8e 01       	movw	r16, r28
    a474:	0d 5e       	subi	r16, 0xED	; 237
    a476:	1f 4f       	sbci	r17, 0xFF	; 255
    a478:	c8 01       	movw	r24, r16
    a47a:	6b e7       	ldi	r22, 0x7B	; 123
    a47c:	72 e0       	ldi	r23, 0x02	; 2
    a47e:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    a482:	c3 01       	movw	r24, r6
    a484:	88 96       	adiw	r24, 0x28	; 40
    a486:	b8 01       	movw	r22, r16
    a488:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    a48c:	c8 01       	movw	r24, r16
    a48e:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
				mov.osc_randomize (3, 1);      // en el futuro va a haber randomize sólo traslación, sólo rotación, etc
    a492:	85 ee       	ldi	r24, 0xE5	; 229
    a494:	9f e0       	ldi	r25, 0x0F	; 15
    a496:	40 e0       	ldi	r20, 0x00	; 0
    a498:	50 e0       	ldi	r21, 0x00	; 0
    a49a:	60 e4       	ldi	r22, 0x40	; 64
    a49c:	70 e4       	ldi	r23, 0x40	; 64
    a49e:	00 e0       	ldi	r16, 0x00	; 0
    a4a0:	10 e0       	ldi	r17, 0x00	; 0
    a4a2:	20 e8       	ldi	r18, 0x80	; 128
    a4a4:	3f e3       	ldi	r19, 0x3F	; 63
    a4a6:	e5 e0       	ldi	r30, 0x05	; 5
    a4a8:	ee 2e       	mov	r14, r30
    a4aa:	0f 2e       	mov	r0, r31
    a4ac:	f0 e0       	ldi	r31, 0x00	; 0
    a4ae:	af 2e       	mov	r10, r31
    a4b0:	f0 e0       	ldi	r31, 0x00	; 0
    a4b2:	bf 2e       	mov	r11, r31
    a4b4:	f0 e0       	ldi	r31, 0x00	; 0
    a4b6:	cf 2e       	mov	r12, r31
    a4b8:	f0 e4       	ldi	r31, 0x40	; 64
    a4ba:	df 2e       	mov	r13, r31
    a4bc:	f0 2d       	mov	r31, r0
    a4be:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <_ZN10Movimiento13osc_randomizeEffhf>
    a4c2:	12 c2       	rjmp	.+1060   	; 0xa8e8 <_ZN13RemoteControl11osciladoresEh+0x6b0>
			break;
		/////////////////////////////	
		/* termina zona de números */	
			
		case RC_CH_UP:
			if (pantalla.isBusy()) {break;}
    a4c4:	83 ea       	ldi	r24, 0xA3	; 163
    a4c6:	93 e1       	ldi	r25, 0x13	; 19
    a4c8:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    a4cc:	88 23       	and	r24, r24
    a4ce:	09 f0       	breq	.+2      	; 0xa4d2 <_ZN13RemoteControl11osciladoresEh+0x29a>
    a4d0:	0b c2       	rjmp	.+1046   	; 0xa8e8 <_ZN13RemoteControl11osciladoresEh+0x6b0>
			retardo = true;
    a4d2:	81 e0       	ldi	r24, 0x01	; 1
    a4d4:	f3 01       	movw	r30, r6
    a4d6:	86 ab       	std	Z+54, r24	; 0x36
			parametro %= 3;
    a4d8:	80 91 ea 13 	lds	r24, 0x13EA
    a4dc:	63 e0       	ldi	r22, 0x03	; 3
    a4de:	0e 94 e5 7e 	call	0xfdca	; 0xfdca <__udivmodqi4>
    a4e2:	90 93 ea 13 	sts	0x13EA, r25
    a4e6:	52 e0       	ldi	r21, 0x02	; 2
    a4e8:	e5 2e       	mov	r14, r21
    a4ea:	27 c0       	rjmp	.+78     	; 0xa53a <_ZN13RemoteControl11osciladoresEh+0x302>
			sub_parametro = PHASE;
			increment = 1;
			break;
			
		case RC_CH_DN:
			if (pantalla.isBusy()) {break;}
    a4ec:	83 ea       	ldi	r24, 0xA3	; 163
    a4ee:	93 e1       	ldi	r25, 0x13	; 19
    a4f0:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    a4f4:	88 23       	and	r24, r24
    a4f6:	09 f0       	breq	.+2      	; 0xa4fa <_ZN13RemoteControl11osciladoresEh+0x2c2>
    a4f8:	f7 c1       	rjmp	.+1006   	; 0xa8e8 <_ZN13RemoteControl11osciladoresEh+0x6b0>
			retardo = true;
    a4fa:	81 e0       	ldi	r24, 0x01	; 1
    a4fc:	f3 01       	movw	r30, r6
    a4fe:	86 ab       	std	Z+54, r24	; 0x36
			parametro %= 3;
    a500:	80 91 ea 13 	lds	r24, 0x13EA
    a504:	63 e0       	ldi	r22, 0x03	; 3
    a506:	0e 94 e5 7e 	call	0xfdca	; 0xfdca <__udivmodqi4>
    a50a:	90 93 ea 13 	sts	0x13EA, r25
    a50e:	42 e0       	ldi	r20, 0x02	; 2
    a510:	e4 2e       	mov	r14, r20
    a512:	29 c0       	rjmp	.+82     	; 0xa566 <_ZN13RemoteControl11osciladoresEh+0x32e>
			sub_parametro = PHASE;
			increment = -1;
			break;
		
		case RC_VOL_UP:
			if (pantalla.isBusy()) {break;}
    a514:	83 ea       	ldi	r24, 0xA3	; 163
    a516:	93 e1       	ldi	r25, 0x13	; 19
    a518:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    a51c:	88 23       	and	r24, r24
    a51e:	09 f0       	breq	.+2      	; 0xa522 <_ZN13RemoteControl11osciladoresEh+0x2ea>
    a520:	e3 c1       	rjmp	.+966    	; 0xa8e8 <_ZN13RemoteControl11osciladoresEh+0x6b0>
			retardo = true;
    a522:	81 e0       	ldi	r24, 0x01	; 1
    a524:	f3 01       	movw	r30, r6
    a526:	86 ab       	std	Z+54, r24	; 0x36
			parametro %= 3;
    a528:	80 91 ea 13 	lds	r24, 0x13EA
    a52c:	63 e0       	ldi	r22, 0x03	; 3
    a52e:	0e 94 e5 7e 	call	0xfdca	; 0xfdca <__udivmodqi4>
    a532:	90 93 ea 13 	sts	0x13EA, r25
    a536:	ee 24       	eor	r14, r14
    a538:	e3 94       	inc	r14
    a53a:	88 24       	eor	r8, r8
    a53c:	83 94       	inc	r8
    a53e:	b7 c1       	rjmp	.+878    	; 0xa8ae <_ZN13RemoteControl11osciladoresEh+0x676>
			sub_parametro = FREQ;
			increment = 1;
			break;
			
		case RC_VOL_DN:
			if (pantalla.isBusy()) {break;}
    a540:	83 ea       	ldi	r24, 0xA3	; 163
    a542:	93 e1       	ldi	r25, 0x13	; 19
    a544:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    a548:	88 23       	and	r24, r24
    a54a:	09 f0       	breq	.+2      	; 0xa54e <_ZN13RemoteControl11osciladoresEh+0x316>
    a54c:	cd c1       	rjmp	.+922    	; 0xa8e8 <_ZN13RemoteControl11osciladoresEh+0x6b0>
			retardo = true;
    a54e:	81 e0       	ldi	r24, 0x01	; 1
    a550:	f3 01       	movw	r30, r6
    a552:	86 ab       	std	Z+54, r24	; 0x36
			parametro %= 3;
    a554:	80 91 ea 13 	lds	r24, 0x13EA
    a558:	63 e0       	ldi	r22, 0x03	; 3
    a55a:	0e 94 e5 7e 	call	0xfdca	; 0xfdca <__udivmodqi4>
    a55e:	90 93 ea 13 	sts	0x13EA, r25
    a562:	ee 24       	eor	r14, r14
    a564:	e3 94       	inc	r14
    a566:	88 24       	eor	r8, r8
    a568:	8a 94       	dec	r8
    a56a:	a1 c1       	rjmp	.+834    	; 0xa8ae <_ZN13RemoteControl11osciladoresEh+0x676>
	if (increment != 0) {
		float value = increment * inc;
		switch (modo) {
			case OSCILADORES1:
				parametro += TRASL_X;
				texto1 = "T.";
    a56c:	8e 01       	movw	r16, r28
    a56e:	07 5e       	subi	r16, 0xE7	; 231
    a570:	1f 4f       	sbci	r17, 0xFF	; 255
    a572:	c8 01       	movw	r24, r16
    a574:	62 e8       	ldi	r22, 0x82	; 130
    a576:	72 e0       	ldi	r23, 0x02	; 2
    a578:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    a57c:	c3 01       	movw	r24, r6
    a57e:	88 96       	adiw	r24, 0x28	; 40
    a580:	b8 01       	movw	r22, r16
    a582:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    a586:	c8 01       	movw	r24, r16
    a588:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    a58c:	40 c0       	rjmp	.+128    	; 0xa60e <_ZN13RemoteControl11osciladoresEh+0x3d6>
				break;
			case OSCILADORES2:
				parametro += CENTRO_X;
    a58e:	80 91 ea 13 	lds	r24, 0x13EA
    a592:	8d 5f       	subi	r24, 0xFD	; 253
    a594:	80 93 ea 13 	sts	0x13EA, r24
				texto1 = "C.";
    a598:	8e 01       	movw	r16, r28
    a59a:	01 5e       	subi	r16, 0xE1	; 225
    a59c:	1f 4f       	sbci	r17, 0xFF	; 255
    a59e:	c8 01       	movw	r24, r16
    a5a0:	65 e8       	ldi	r22, 0x85	; 133
    a5a2:	72 e0       	ldi	r23, 0x02	; 2
    a5a4:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    a5a8:	c3 01       	movw	r24, r6
    a5aa:	88 96       	adiw	r24, 0x28	; 40
    a5ac:	b8 01       	movw	r22, r16
    a5ae:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    a5b2:	c8 01       	movw	r24, r16
    a5b4:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
				if (sub_parametro == AMP) {value *= 2;}         // ?
    a5b8:	ee 20       	and	r14, r14
    a5ba:	49 f5       	brne	.+82     	; 0xa60e <_ZN13RemoteControl11osciladoresEh+0x3d6>
    a5bc:	c6 01       	movw	r24, r12
    a5be:	b5 01       	movw	r22, r10
    a5c0:	a6 01       	movw	r20, r12
    a5c2:	95 01       	movw	r18, r10
    a5c4:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    a5c8:	20 c0       	rjmp	.+64     	; 0xa60a <_ZN13RemoteControl11osciladoresEh+0x3d2>
				break;
			case OSCILADORES3:
				parametro = 2-parametro;   // esto invierte los ejes X y Z 
				parametro += ROT_X;
    a5ca:	80 91 ea 13 	lds	r24, 0x13EA
    a5ce:	81 95       	neg	r24
    a5d0:	88 5f       	subi	r24, 0xF8	; 248
    a5d2:	80 93 ea 13 	sts	0x13EA, r24
				texto1 = "R.";
    a5d6:	8e 01       	movw	r16, r28
    a5d8:	0b 5d       	subi	r16, 0xDB	; 219
    a5da:	1f 4f       	sbci	r17, 0xFF	; 255
    a5dc:	c8 01       	movw	r24, r16
    a5de:	68 e8       	ldi	r22, 0x88	; 136
    a5e0:	72 e0       	ldi	r23, 0x02	; 2
    a5e2:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    a5e6:	c3 01       	movw	r24, r6
    a5e8:	88 96       	adiw	r24, 0x28	; 40
    a5ea:	b8 01       	movw	r22, r16
    a5ec:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    a5f0:	c8 01       	movw	r24, r16
    a5f2:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
				if (sub_parametro == AMP) {value /= 15;}         // antes era * .1 (el 15 podría ser un #define, ya que aparece muchas veces)
    a5f6:	ee 20       	and	r14, r14
    a5f8:	51 f4       	brne	.+20     	; 0xa60e <_ZN13RemoteControl11osciladoresEh+0x3d6>
    a5fa:	c6 01       	movw	r24, r12
    a5fc:	b5 01       	movw	r22, r10
    a5fe:	20 e0       	ldi	r18, 0x00	; 0
    a600:	30 e0       	ldi	r19, 0x00	; 0
    a602:	40 e7       	ldi	r20, 0x70	; 112
    a604:	51 e4       	ldi	r21, 0x41	; 65
    a606:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    a60a:	5b 01       	movw	r10, r22
    a60c:	6c 01       	movw	r12, r24
				break;
		}
		switch (parametro % 3) {
    a60e:	80 91 ea 13 	lds	r24, 0x13EA
    a612:	63 e0       	ldi	r22, 0x03	; 3
    a614:	0e 94 e5 7e 	call	0xfdca	; 0xfdca <__udivmodqi4>
    a618:	91 30       	cpi	r25, 0x01	; 1
    a61a:	61 f0       	breq	.+24     	; 0xa634 <_ZN13RemoteControl11osciladoresEh+0x3fc>
    a61c:	91 30       	cpi	r25, 0x01	; 1
    a61e:	18 f0       	brcs	.+6      	; 0xa626 <_ZN13RemoteControl11osciladoresEh+0x3ee>
    a620:	92 30       	cpi	r25, 0x02	; 2
    a622:	f9 f4       	brne	.+62     	; 0xa662 <_ZN13RemoteControl11osciladoresEh+0x42a>
    a624:	0e c0       	rjmp	.+28     	; 0xa642 <_ZN13RemoteControl11osciladoresEh+0x40a>
			case TRASL_X: texto1 += "X."; break;
    a626:	8e 01       	movw	r16, r28
    a628:	05 5d       	subi	r16, 0xD5	; 213
    a62a:	1f 4f       	sbci	r17, 0xFF	; 255
    a62c:	c8 01       	movw	r24, r16
    a62e:	6b e8       	ldi	r22, 0x8B	; 139
    a630:	72 e0       	ldi	r23, 0x02	; 2
    a632:	0d c0       	rjmp	.+26     	; 0xa64e <_ZN13RemoteControl11osciladoresEh+0x416>
			case TRASL_Y: texto1 += "Y."; break;
    a634:	8e 01       	movw	r16, r28
    a636:	0f 5c       	subi	r16, 0xCF	; 207
    a638:	1f 4f       	sbci	r17, 0xFF	; 255
    a63a:	c8 01       	movw	r24, r16
    a63c:	6e e8       	ldi	r22, 0x8E	; 142
    a63e:	72 e0       	ldi	r23, 0x02	; 2
    a640:	06 c0       	rjmp	.+12     	; 0xa64e <_ZN13RemoteControl11osciladoresEh+0x416>
			case TRASL_Z: texto1 += "Z."; break;
    a642:	8e 01       	movw	r16, r28
    a644:	09 5c       	subi	r16, 0xC9	; 201
    a646:	1f 4f       	sbci	r17, 0xFF	; 255
    a648:	c8 01       	movw	r24, r16
    a64a:	61 e9       	ldi	r22, 0x91	; 145
    a64c:	72 e0       	ldi	r23, 0x02	; 2
    a64e:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    a652:	c3 01       	movw	r24, r6
    a654:	88 96       	adiw	r24, 0x28	; 40
    a656:	b8 01       	movw	r22, r16
    a658:	0e 94 c0 78 	call	0xf180	; 0xf180 <_ZN6StringpLERKS_>
    a65c:	c8 01       	movw	r24, r16
    a65e:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
		}
		OSCILATOR osc = mov.get_oscilador (parametro);
    a662:	8e 01       	movw	r16, r28
    a664:	0b 57       	subi	r16, 0x7B	; 123
    a666:	1f 4f       	sbci	r17, 0xFF	; 255
    a668:	c8 01       	movw	r24, r16
    a66a:	65 ee       	ldi	r22, 0xE5	; 229
    a66c:	7f e0       	ldi	r23, 0x0F	; 15
    a66e:	40 91 ea 13 	lds	r20, 0x13EA
    a672:	0e 94 ca 09 	call	0x1394	; 0x1394 <_ZN10Movimiento13get_osciladorEh>
		switch (sub_parametro) {
    a676:	f1 e0       	ldi	r31, 0x01	; 1
    a678:	ef 16       	cp	r14, r31
    a67a:	09 f4       	brne	.+2      	; 0xa67e <_ZN13RemoteControl11osciladoresEh+0x446>
    a67c:	4d c0       	rjmp	.+154    	; 0xa718 <_ZN13RemoteControl11osciladoresEh+0x4e0>
    a67e:	ef 16       	cp	r14, r31
    a680:	48 f0       	brcs	.+18     	; 0xa694 <_ZN13RemoteControl11osciladoresEh+0x45c>
    a682:	82 e0       	ldi	r24, 0x02	; 2
    a684:	e8 16       	cp	r14, r24
    a686:	09 f4       	brne	.+2      	; 0xa68a <_ZN13RemoteControl11osciladoresEh+0x452>
    a688:	8f c0       	rjmp	.+286    	; 0xa7a8 <_ZN13RemoteControl11osciladoresEh+0x570>
    a68a:	e3 e0       	ldi	r30, 0x03	; 3
    a68c:	ee 16       	cp	r14, r30
    a68e:	09 f0       	breq	.+2      	; 0xa692 <_ZN13RemoteControl11osciladoresEh+0x45a>
    a690:	2b c1       	rjmp	.+598    	; 0xa8e8 <_ZN13RemoteControl11osciladoresEh+0x6b0>
    a692:	d2 c0       	rjmp	.+420    	; 0xa838 <_ZN13RemoteControl11osciladoresEh+0x600>
			case AMP: 
				value += osc.amp;
    a694:	c6 01       	movw	r24, r12
    a696:	b5 01       	movw	r22, r10
    a698:	f8 01       	movw	r30, r16
    a69a:	20 81       	ld	r18, Z
    a69c:	31 81       	ldd	r19, Z+1	; 0x01
    a69e:	42 81       	ldd	r20, Z+2	; 0x02
    a6a0:	53 81       	ldd	r21, Z+3	; 0x03
    a6a2:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    a6a6:	7b 01       	movw	r14, r22
    a6a8:	8c 01       	movw	r16, r24
				texto1 += ("amp " + float2string (value)); 
    a6aa:	33 e4       	ldi	r19, 0x43	; 67
    a6ac:	83 2e       	mov	r8, r19
    a6ae:	91 2c       	mov	r9, r1
    a6b0:	8c 0e       	add	r8, r28
    a6b2:	9d 1e       	adc	r9, r29
    a6b4:	c4 01       	movw	r24, r8
    a6b6:	64 e9       	ldi	r22, 0x94	; 148
    a6b8:	72 e0       	ldi	r23, 0x02	; 2
    a6ba:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    a6be:	2d e3       	ldi	r18, 0x3D	; 61
    a6c0:	a2 2e       	mov	r10, r18
    a6c2:	b1 2c       	mov	r11, r1
    a6c4:	ac 0e       	add	r10, r28
    a6c6:	bd 1e       	adc	r11, r29
    a6c8:	c5 01       	movw	r24, r10
    a6ca:	a7 01       	movw	r20, r14
    a6cc:	b8 01       	movw	r22, r16
    a6ce:	0e 94 8b 72 	call	0xe516	; 0xe516 <_Z12float2stringf>
    a6d2:	99 e4       	ldi	r25, 0x49	; 73
    a6d4:	c9 2e       	mov	r12, r25
    a6d6:	d1 2c       	mov	r13, r1
    a6d8:	cc 0e       	add	r12, r28
    a6da:	dd 1e       	adc	r13, r29
    a6dc:	c6 01       	movw	r24, r12
    a6de:	b4 01       	movw	r22, r8
    a6e0:	a5 01       	movw	r20, r10
    a6e2:	0e 94 98 32 	call	0x6530	; 0x6530 <_Zpl6StringRKS_>
    a6e6:	c3 01       	movw	r24, r6
    a6e8:	88 96       	adiw	r24, 0x28	; 40
    a6ea:	b6 01       	movw	r22, r12
    a6ec:	0e 94 c0 78 	call	0xf180	; 0xf180 <_ZN6StringpLERKS_>
    a6f0:	c6 01       	movw	r24, r12
    a6f2:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    a6f6:	c5 01       	movw	r24, r10
    a6f8:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    a6fc:	c4 01       	movw	r24, r8
    a6fe:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
				mov.set_amp (parametro, value);
    a702:	85 ee       	ldi	r24, 0xE5	; 229
    a704:	9f e0       	ldi	r25, 0x0F	; 15
    a706:	60 91 ea 13 	lds	r22, 0x13EA
    a70a:	2e 2d       	mov	r18, r14
    a70c:	3f 2d       	mov	r19, r15
    a70e:	40 2f       	mov	r20, r16
    a710:	51 2f       	mov	r21, r17
    a712:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <_ZN10Movimiento7set_ampEhf>
    a716:	e8 c0       	rjmp	.+464    	; 0xa8e8 <_ZN13RemoteControl11osciladoresEh+0x6b0>
				break;
			case FREQ: 
				value /= 5;
    a718:	c6 01       	movw	r24, r12
    a71a:	b5 01       	movw	r22, r10
    a71c:	20 e0       	ldi	r18, 0x00	; 0
    a71e:	30 e0       	ldi	r19, 0x00	; 0
    a720:	40 ea       	ldi	r20, 0xA0	; 160
    a722:	50 e4       	ldi	r21, 0x40	; 64
    a724:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
				value += osc.freq;
    a728:	f8 01       	movw	r30, r16
    a72a:	24 81       	ldd	r18, Z+4	; 0x04
    a72c:	35 81       	ldd	r19, Z+5	; 0x05
    a72e:	46 81       	ldd	r20, Z+6	; 0x06
    a730:	57 81       	ldd	r21, Z+7	; 0x07
    a732:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    a736:	7b 01       	movw	r14, r22
    a738:	8c 01       	movw	r16, r24
				texto1 += ("frq " + float2string (value)); 
    a73a:	85 e5       	ldi	r24, 0x55	; 85
    a73c:	88 2e       	mov	r8, r24
    a73e:	91 2c       	mov	r9, r1
    a740:	8c 0e       	add	r8, r28
    a742:	9d 1e       	adc	r9, r29
    a744:	c4 01       	movw	r24, r8
    a746:	69 e9       	ldi	r22, 0x99	; 153
    a748:	72 e0       	ldi	r23, 0x02	; 2
    a74a:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    a74e:	bf e4       	ldi	r27, 0x4F	; 79
    a750:	ab 2e       	mov	r10, r27
    a752:	b1 2c       	mov	r11, r1
    a754:	ac 0e       	add	r10, r28
    a756:	bd 1e       	adc	r11, r29
    a758:	c5 01       	movw	r24, r10
    a75a:	a7 01       	movw	r20, r14
    a75c:	b8 01       	movw	r22, r16
    a75e:	0e 94 8b 72 	call	0xe516	; 0xe516 <_Z12float2stringf>
    a762:	ab e5       	ldi	r26, 0x5B	; 91
    a764:	ca 2e       	mov	r12, r26
    a766:	d1 2c       	mov	r13, r1
    a768:	cc 0e       	add	r12, r28
    a76a:	dd 1e       	adc	r13, r29
    a76c:	c6 01       	movw	r24, r12
    a76e:	b4 01       	movw	r22, r8
    a770:	a5 01       	movw	r20, r10
    a772:	0e 94 98 32 	call	0x6530	; 0x6530 <_Zpl6StringRKS_>
    a776:	c3 01       	movw	r24, r6
    a778:	88 96       	adiw	r24, 0x28	; 40
    a77a:	b6 01       	movw	r22, r12
    a77c:	0e 94 c0 78 	call	0xf180	; 0xf180 <_ZN6StringpLERKS_>
    a780:	c6 01       	movw	r24, r12
    a782:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    a786:	c5 01       	movw	r24, r10
    a788:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    a78c:	c4 01       	movw	r24, r8
    a78e:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
				mov.set_freq (parametro, value);
    a792:	85 ee       	ldi	r24, 0xE5	; 229
    a794:	9f e0       	ldi	r25, 0x0F	; 15
    a796:	60 91 ea 13 	lds	r22, 0x13EA
    a79a:	2e 2d       	mov	r18, r14
    a79c:	3f 2d       	mov	r19, r15
    a79e:	40 2f       	mov	r20, r16
    a7a0:	51 2f       	mov	r21, r17
    a7a2:	0e 94 fd 09 	call	0x13fa	; 0x13fa <_ZN10Movimiento8set_freqEhf>
    a7a6:	a0 c0       	rjmp	.+320    	; 0xa8e8 <_ZN13RemoteControl11osciladoresEh+0x6b0>
				break;
			case PHASE: 
				value /= 5;
    a7a8:	c6 01       	movw	r24, r12
    a7aa:	b5 01       	movw	r22, r10
    a7ac:	20 e0       	ldi	r18, 0x00	; 0
    a7ae:	30 e0       	ldi	r19, 0x00	; 0
    a7b0:	40 ea       	ldi	r20, 0xA0	; 160
    a7b2:	50 e4       	ldi	r21, 0x40	; 64
    a7b4:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
				value += osc.phase;
    a7b8:	f8 01       	movw	r30, r16
    a7ba:	20 85       	ldd	r18, Z+8	; 0x08
    a7bc:	31 85       	ldd	r19, Z+9	; 0x09
    a7be:	42 85       	ldd	r20, Z+10	; 0x0a
    a7c0:	53 85       	ldd	r21, Z+11	; 0x0b
    a7c2:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    a7c6:	7b 01       	movw	r14, r22
    a7c8:	8c 01       	movw	r16, r24
				texto1 += ("phs " + float2string (value)); 
    a7ca:	f7 e6       	ldi	r31, 0x67	; 103
    a7cc:	8f 2e       	mov	r8, r31
    a7ce:	91 2c       	mov	r9, r1
    a7d0:	8c 0e       	add	r8, r28
    a7d2:	9d 1e       	adc	r9, r29
    a7d4:	c4 01       	movw	r24, r8
    a7d6:	6e e9       	ldi	r22, 0x9E	; 158
    a7d8:	72 e0       	ldi	r23, 0x02	; 2
    a7da:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    a7de:	e1 e6       	ldi	r30, 0x61	; 97
    a7e0:	ae 2e       	mov	r10, r30
    a7e2:	b1 2c       	mov	r11, r1
    a7e4:	ac 0e       	add	r10, r28
    a7e6:	bd 1e       	adc	r11, r29
    a7e8:	c5 01       	movw	r24, r10
    a7ea:	a7 01       	movw	r20, r14
    a7ec:	b8 01       	movw	r22, r16
    a7ee:	0e 94 8b 72 	call	0xe516	; 0xe516 <_Z12float2stringf>
    a7f2:	7d e6       	ldi	r23, 0x6D	; 109
    a7f4:	c7 2e       	mov	r12, r23
    a7f6:	d1 2c       	mov	r13, r1
    a7f8:	cc 0e       	add	r12, r28
    a7fa:	dd 1e       	adc	r13, r29
    a7fc:	c6 01       	movw	r24, r12
    a7fe:	b4 01       	movw	r22, r8
    a800:	a5 01       	movw	r20, r10
    a802:	0e 94 98 32 	call	0x6530	; 0x6530 <_Zpl6StringRKS_>
    a806:	c3 01       	movw	r24, r6
    a808:	88 96       	adiw	r24, 0x28	; 40
    a80a:	b6 01       	movw	r22, r12
    a80c:	0e 94 c0 78 	call	0xf180	; 0xf180 <_ZN6StringpLERKS_>
    a810:	c6 01       	movw	r24, r12
    a812:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    a816:	c5 01       	movw	r24, r10
    a818:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    a81c:	c4 01       	movw	r24, r8
    a81e:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
				mov.set_phase (parametro, value);
    a822:	85 ee       	ldi	r24, 0xE5	; 229
    a824:	9f e0       	ldi	r25, 0x0F	; 15
    a826:	60 91 ea 13 	lds	r22, 0x13EA
    a82a:	2e 2d       	mov	r18, r14
    a82c:	3f 2d       	mov	r19, r15
    a82e:	40 2f       	mov	r20, r16
    a830:	51 2f       	mov	r21, r17
    a832:	0e 94 0f 0a 	call	0x141e	; 0x141e <_ZN10Movimiento9set_phaseEhf>
    a836:	58 c0       	rjmp	.+176    	; 0xa8e8 <_ZN13RemoteControl11osciladoresEh+0x6b0>
				break;
			case BROWN: 
				bool brown = sign2bin (increment);
    a838:	88 2d       	mov	r24, r8
    a83a:	99 27       	eor	r25, r25
    a83c:	87 fd       	sbrc	r24, 7
    a83e:	90 95       	com	r25
    a840:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <_Z8sign2bini>
    a844:	b8 2e       	mov	r11, r24
				texto1 += ("brw " + String (brown, BIN)); 
    a846:	69 e7       	ldi	r22, 0x79	; 121
    a848:	c6 2e       	mov	r12, r22
    a84a:	d1 2c       	mov	r13, r1
    a84c:	cc 0e       	add	r12, r28
    a84e:	dd 1e       	adc	r13, r29
    a850:	c6 01       	movw	r24, r12
    a852:	63 ea       	ldi	r22, 0xA3	; 163
    a854:	72 e0       	ldi	r23, 0x02	; 2
    a856:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    a85a:	53 e7       	ldi	r21, 0x73	; 115
    a85c:	e5 2e       	mov	r14, r21
    a85e:	f1 2c       	mov	r15, r1
    a860:	ec 0e       	add	r14, r28
    a862:	fd 1e       	adc	r15, r29
    a864:	c7 01       	movw	r24, r14
    a866:	6b 2d       	mov	r22, r11
    a868:	70 e0       	ldi	r23, 0x00	; 0
    a86a:	42 e0       	ldi	r20, 0x02	; 2
    a86c:	50 e0       	ldi	r21, 0x00	; 0
    a86e:	0e 94 7f 79 	call	0xf2fe	; 0xf2fe <_ZN6StringC1Eii>
    a872:	8e 01       	movw	r16, r28
    a874:	01 58       	subi	r16, 0x81	; 129
    a876:	1f 4f       	sbci	r17, 0xFF	; 255
    a878:	c8 01       	movw	r24, r16
    a87a:	b6 01       	movw	r22, r12
    a87c:	a7 01       	movw	r20, r14
    a87e:	0e 94 98 32 	call	0x6530	; 0x6530 <_Zpl6StringRKS_>
    a882:	c3 01       	movw	r24, r6
    a884:	88 96       	adiw	r24, 0x28	; 40
    a886:	b8 01       	movw	r22, r16
    a888:	0e 94 c0 78 	call	0xf180	; 0xf180 <_ZN6StringpLERKS_>
    a88c:	c8 01       	movw	r24, r16
    a88e:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    a892:	c7 01       	movw	r24, r14
    a894:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    a898:	c6 01       	movw	r24, r12
    a89a:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
				mov.set_brown (parametro, brown);
    a89e:	85 ee       	ldi	r24, 0xE5	; 229
    a8a0:	9f e0       	ldi	r25, 0x0F	; 15
    a8a2:	60 91 ea 13 	lds	r22, 0x13EA
    a8a6:	4b 2d       	mov	r20, r11
    a8a8:	0e 94 21 0a 	call	0x1442	; 0x1442 <_ZN10Movimiento9set_brownEhb>
    a8ac:	1d c0       	rjmp	.+58     	; 0xa8e8 <_ZN13RemoteControl11osciladoresEh+0x6b0>
			break;
			
	}
	
	if (increment != 0) {
		float value = increment * inc;
    a8ae:	68 2d       	mov	r22, r8
    a8b0:	77 27       	eor	r23, r23
    a8b2:	67 fd       	sbrc	r22, 7
    a8b4:	70 95       	com	r23
    a8b6:	87 2f       	mov	r24, r23
    a8b8:	97 2f       	mov	r25, r23
    a8ba:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    a8be:	f3 01       	movw	r30, r6
    a8c0:	21 a1       	ldd	r18, Z+33	; 0x21
    a8c2:	32 a1       	ldd	r19, Z+34	; 0x22
    a8c4:	43 a1       	ldd	r20, Z+35	; 0x23
    a8c6:	54 a1       	ldd	r21, Z+36	; 0x24
    a8c8:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    a8cc:	5b 01       	movw	r10, r22
    a8ce:	6c 01       	movw	r12, r24
		switch (modo) {
    a8d0:	f3 01       	movw	r30, r6
    a8d2:	86 a1       	ldd	r24, Z+38	; 0x26
    a8d4:	88 30       	cpi	r24, 0x08	; 8
    a8d6:	09 f4       	brne	.+2      	; 0xa8da <_ZN13RemoteControl11osciladoresEh+0x6a2>
    a8d8:	5a ce       	rjmp	.-844    	; 0xa58e <_ZN13RemoteControl11osciladoresEh+0x356>
    a8da:	89 30       	cpi	r24, 0x09	; 9
    a8dc:	09 f4       	brne	.+2      	; 0xa8e0 <_ZN13RemoteControl11osciladoresEh+0x6a8>
    a8de:	75 ce       	rjmp	.-790    	; 0xa5ca <_ZN13RemoteControl11osciladoresEh+0x392>
    a8e0:	87 30       	cpi	r24, 0x07	; 7
    a8e2:	09 f0       	breq	.+2      	; 0xa8e6 <_ZN13RemoteControl11osciladoresEh+0x6ae>
    a8e4:	94 ce       	rjmp	.-728    	; 0xa60e <_ZN13RemoteControl11osciladoresEh+0x3d6>
    a8e6:	42 ce       	rjmp	.-892    	; 0xa56c <_ZN13RemoteControl11osciladoresEh+0x334>
				mov.set_brown (parametro, brown);
				break;
		}
	}

}
    a8e8:	cf 56       	subi	r28, 0x6F	; 111
    a8ea:	df 4f       	sbci	r29, 0xFF	; 255
    a8ec:	0f b6       	in	r0, 0x3f	; 63
    a8ee:	f8 94       	cli
    a8f0:	de bf       	out	0x3e, r29	; 62
    a8f2:	0f be       	out	0x3f, r0	; 63
    a8f4:	cd bf       	out	0x3d, r28	; 61
    a8f6:	cf 91       	pop	r28
    a8f8:	df 91       	pop	r29
    a8fa:	1f 91       	pop	r17
    a8fc:	0f 91       	pop	r16
    a8fe:	ff 90       	pop	r15
    a900:	ef 90       	pop	r14
    a902:	df 90       	pop	r13
    a904:	cf 90       	pop	r12
    a906:	bf 90       	pop	r11
    a908:	af 90       	pop	r10
    a90a:	9f 90       	pop	r9
    a90c:	8f 90       	pop	r8
    a90e:	7f 90       	pop	r7
    a910:	6f 90       	pop	r6
    a912:	08 95       	ret

0000a914 <_ZN13RemoteControl13editar_centroEh>:
			retardo = true;
			break;
	}
}

void RemoteControl::editar_centro (byte comando) {
    a914:	af 92       	push	r10
    a916:	bf 92       	push	r11
    a918:	cf 92       	push	r12
    a91a:	df 92       	push	r13
    a91c:	ef 92       	push	r14
    a91e:	ff 92       	push	r15
    a920:	0f 93       	push	r16
    a922:	1f 93       	push	r17
    a924:	df 93       	push	r29
    a926:	cf 93       	push	r28
    a928:	cd b7       	in	r28, 0x3d	; 61
    a92a:	de b7       	in	r29, 0x3e	; 62
    a92c:	c0 59       	subi	r28, 0x90	; 144
    a92e:	d0 40       	sbci	r29, 0x00	; 0
    a930:	0f b6       	in	r0, 0x3f	; 63
    a932:	f8 94       	cli
    a934:	de bf       	out	0x3e, r29	; 62
    a936:	0f be       	out	0x3f, r0	; 63
    a938:	cd bf       	out	0x3d, r28	; 61
    a93a:	5c 01       	movw	r10, r24
	
	switch (comando) {
    a93c:	6e 34       	cpi	r22, 0x4E	; 78
    a93e:	09 f4       	brne	.+2      	; 0xa942 <_ZN13RemoteControl13editar_centroEh+0x2e>
    a940:	50 c1       	rjmp	.+672    	; 0xabe2 <_ZN13RemoteControl13editar_centroEh+0x2ce>
    a942:	6f 34       	cpi	r22, 0x4F	; 79
    a944:	80 f4       	brcc	.+32     	; 0xa966 <_ZN13RemoteControl13editar_centroEh+0x52>
    a946:	63 31       	cpi	r22, 0x13	; 19
    a948:	09 f4       	brne	.+2      	; 0xa94c <_ZN13RemoteControl13editar_centroEh+0x38>
    a94a:	0f c1       	rjmp	.+542    	; 0xab6a <_ZN13RemoteControl13editar_centroEh+0x256>
    a94c:	64 31       	cpi	r22, 0x14	; 20
    a94e:	20 f4       	brcc	.+8      	; 0xa958 <_ZN13RemoteControl13editar_centroEh+0x44>
    a950:	60 31       	cpi	r22, 0x10	; 16
    a952:	09 f0       	breq	.+2      	; 0xa956 <_ZN13RemoteControl13editar_centroEh+0x42>
    a954:	53 c2       	rjmp	.+1190   	; 0xadfc <_ZN13RemoteControl13editar_centroEh+0x4e8>
    a956:	45 c1       	rjmp	.+650    	; 0xabe2 <_ZN13RemoteControl13editar_centroEh+0x2ce>
    a958:	6a 31       	cpi	r22, 0x1A	; 26
    a95a:	09 f4       	brne	.+2      	; 0xa95e <_ZN13RemoteControl13editar_centroEh+0x4a>
    a95c:	7e c1       	rjmp	.+764    	; 0xac5a <_ZN13RemoteControl13editar_centroEh+0x346>
    a95e:	6e 31       	cpi	r22, 0x1E	; 30
    a960:	09 f0       	breq	.+2      	; 0xa964 <_ZN13RemoteControl13editar_centroEh+0x50>
    a962:	4c c2       	rjmp	.+1176   	; 0xadfc <_ZN13RemoteControl13editar_centroEh+0x4e8>
    a964:	d8 c1       	rjmp	.+944    	; 0xad16 <_ZN13RemoteControl13editar_centroEh+0x402>
    a966:	6d 35       	cpi	r22, 0x5D	; 93
    a968:	09 f4       	brne	.+2      	; 0xa96c <_ZN13RemoteControl13editar_centroEh+0x58>
    a96a:	c3 c0       	rjmp	.+390    	; 0xaaf2 <_ZN13RemoteControl13editar_centroEh+0x1de>
    a96c:	6e 35       	cpi	r22, 0x5E	; 94
    a96e:	38 f4       	brcc	.+14     	; 0xa97e <_ZN13RemoteControl13editar_centroEh+0x6a>
    a970:	6f 34       	cpi	r22, 0x4F	; 79
    a972:	09 f4       	brne	.+2      	; 0xa976 <_ZN13RemoteControl13editar_centroEh+0x62>
    a974:	fa c0       	rjmp	.+500    	; 0xab6a <_ZN13RemoteControl13editar_centroEh+0x256>
    a976:	6c 35       	cpi	r22, 0x5C	; 92
    a978:	09 f0       	breq	.+2      	; 0xa97c <_ZN13RemoteControl13editar_centroEh+0x68>
    a97a:	40 c2       	rjmp	.+1152   	; 0xadfc <_ZN13RemoteControl13editar_centroEh+0x4e8>
    a97c:	07 c0       	rjmp	.+14     	; 0xa98c <_ZN13RemoteControl13editar_centroEh+0x78>
    a97e:	6e 35       	cpi	r22, 0x5E	; 94
    a980:	09 f4       	brne	.+2      	; 0xa984 <_ZN13RemoteControl13editar_centroEh+0x70>
    a982:	7b c0       	rjmp	.+246    	; 0xaa7a <_ZN13RemoteControl13editar_centroEh+0x166>
    a984:	6f 35       	cpi	r22, 0x5F	; 95
    a986:	09 f0       	breq	.+2      	; 0xa98a <_ZN13RemoteControl13editar_centroEh+0x76>
    a988:	39 c2       	rjmp	.+1138   	; 0xadfc <_ZN13RemoteControl13editar_centroEh+0x4e8>
    a98a:	3b c0       	rjmp	.+118    	; 0xaa02 <_ZN13RemoteControl13editar_centroEh+0xee>
		case RC_UP:
			if (pantalla.isBusy()) {break;}
    a98c:	83 ea       	ldi	r24, 0xA3	; 163
    a98e:	93 e1       	ldi	r25, 0x13	; 19
    a990:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    a994:	88 23       	and	r24, r24
    a996:	09 f0       	breq	.+2      	; 0xa99a <_ZN13RemoteControl13editar_centroEh+0x86>
    a998:	31 c2       	rjmp	.+1122   	; 0xadfc <_ZN13RemoteControl13editar_centroEh+0x4e8>
			mov.bd.centro_ref.z += step;
    a99a:	60 91 8a 10 	lds	r22, 0x108A
    a99e:	70 91 8b 10 	lds	r23, 0x108B
    a9a2:	80 91 8c 10 	lds	r24, 0x108C
    a9a6:	90 91 8d 10 	lds	r25, 0x108D
    a9aa:	f5 01       	movw	r30, r10
    a9ac:	21 89       	ldd	r18, Z+17	; 0x11
    a9ae:	32 89       	ldd	r19, Z+18	; 0x12
    a9b0:	43 89       	ldd	r20, Z+19	; 0x13
    a9b2:	54 89       	ldd	r21, Z+20	; 0x14
    a9b4:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    a9b8:	60 93 8a 10 	sts	0x108A, r22
    a9bc:	70 93 8b 10 	sts	0x108B, r23
    a9c0:	80 93 8c 10 	sts	0x108C, r24
    a9c4:	90 93 8d 10 	sts	0x108D, r25
			texto1 = "Z = " + float2string (mov.bd.centro_ref.z);
    a9c8:	17 e0       	ldi	r17, 0x07	; 7
    a9ca:	c1 2e       	mov	r12, r17
    a9cc:	d1 2c       	mov	r13, r1
    a9ce:	cc 0e       	add	r12, r28
    a9d0:	dd 1e       	adc	r13, r29
    a9d2:	c6 01       	movw	r24, r12
    a9d4:	68 ea       	ldi	r22, 0xA8	; 168
    a9d6:	72 e0       	ldi	r23, 0x02	; 2
    a9d8:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    a9dc:	40 91 8a 10 	lds	r20, 0x108A
    a9e0:	50 91 8b 10 	lds	r21, 0x108B
    a9e4:	60 91 8c 10 	lds	r22, 0x108C
    a9e8:	70 91 8d 10 	lds	r23, 0x108D
    a9ec:	7e 01       	movw	r14, r28
    a9ee:	08 94       	sec
    a9f0:	e1 1c       	adc	r14, r1
    a9f2:	f1 1c       	adc	r15, r1
    a9f4:	c7 01       	movw	r24, r14
    a9f6:	0e 94 8b 72 	call	0xe516	; 0xe516 <_Z12float2stringf>
    a9fa:	8e 01       	movw	r16, r28
    a9fc:	03 5f       	subi	r16, 0xF3	; 243
    a9fe:	1f 4f       	sbci	r17, 0xFF	; 255
    aa00:	e7 c1       	rjmp	.+974    	; 0xadd0 <_ZN13RemoteControl13editar_centroEh+0x4bc>
			retardo = true;
			break;
		
		case RC_DOWN:
			if (pantalla.isBusy()) {break;}
    aa02:	83 ea       	ldi	r24, 0xA3	; 163
    aa04:	93 e1       	ldi	r25, 0x13	; 19
    aa06:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    aa0a:	88 23       	and	r24, r24
    aa0c:	09 f0       	breq	.+2      	; 0xaa10 <_ZN13RemoteControl13editar_centroEh+0xfc>
    aa0e:	f6 c1       	rjmp	.+1004   	; 0xadfc <_ZN13RemoteControl13editar_centroEh+0x4e8>
			mov.bd.centro_ref.z -= step;
    aa10:	60 91 8a 10 	lds	r22, 0x108A
    aa14:	70 91 8b 10 	lds	r23, 0x108B
    aa18:	80 91 8c 10 	lds	r24, 0x108C
    aa1c:	90 91 8d 10 	lds	r25, 0x108D
    aa20:	f5 01       	movw	r30, r10
    aa22:	21 89       	ldd	r18, Z+17	; 0x11
    aa24:	32 89       	ldd	r19, Z+18	; 0x12
    aa26:	43 89       	ldd	r20, Z+19	; 0x13
    aa28:	54 89       	ldd	r21, Z+20	; 0x14
    aa2a:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    aa2e:	60 93 8a 10 	sts	0x108A, r22
    aa32:	70 93 8b 10 	sts	0x108B, r23
    aa36:	80 93 8c 10 	sts	0x108C, r24
    aa3a:	90 93 8d 10 	sts	0x108D, r25
			texto1 = "Z = " + float2string (mov.bd.centro_ref.z);
    aa3e:	b9 e1       	ldi	r27, 0x19	; 25
    aa40:	cb 2e       	mov	r12, r27
    aa42:	d1 2c       	mov	r13, r1
    aa44:	cc 0e       	add	r12, r28
    aa46:	dd 1e       	adc	r13, r29
    aa48:	c6 01       	movw	r24, r12
    aa4a:	68 ea       	ldi	r22, 0xA8	; 168
    aa4c:	72 e0       	ldi	r23, 0x02	; 2
    aa4e:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    aa52:	a3 e1       	ldi	r26, 0x13	; 19
    aa54:	ea 2e       	mov	r14, r26
    aa56:	f1 2c       	mov	r15, r1
    aa58:	ec 0e       	add	r14, r28
    aa5a:	fd 1e       	adc	r15, r29
    aa5c:	40 91 8a 10 	lds	r20, 0x108A
    aa60:	50 91 8b 10 	lds	r21, 0x108B
    aa64:	60 91 8c 10 	lds	r22, 0x108C
    aa68:	70 91 8d 10 	lds	r23, 0x108D
    aa6c:	c7 01       	movw	r24, r14
    aa6e:	0e 94 8b 72 	call	0xe516	; 0xe516 <_Z12float2stringf>
    aa72:	8e 01       	movw	r16, r28
    aa74:	01 5e       	subi	r16, 0xE1	; 225
    aa76:	1f 4f       	sbci	r17, 0xFF	; 255
    aa78:	ab c1       	rjmp	.+854    	; 0xadd0 <_ZN13RemoteControl13editar_centroEh+0x4bc>
			retardo = true;
			break;
		
		case RC_RIGHT:
			if (pantalla.isBusy()) {break;}
    aa7a:	83 ea       	ldi	r24, 0xA3	; 163
    aa7c:	93 e1       	ldi	r25, 0x13	; 19
    aa7e:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    aa82:	88 23       	and	r24, r24
    aa84:	09 f0       	breq	.+2      	; 0xaa88 <_ZN13RemoteControl13editar_centroEh+0x174>
    aa86:	ba c1       	rjmp	.+884    	; 0xadfc <_ZN13RemoteControl13editar_centroEh+0x4e8>
			mov.bd.centro_ref.x += step;
    aa88:	60 91 82 10 	lds	r22, 0x1082
    aa8c:	70 91 83 10 	lds	r23, 0x1083
    aa90:	80 91 84 10 	lds	r24, 0x1084
    aa94:	90 91 85 10 	lds	r25, 0x1085
    aa98:	f5 01       	movw	r30, r10
    aa9a:	21 89       	ldd	r18, Z+17	; 0x11
    aa9c:	32 89       	ldd	r19, Z+18	; 0x12
    aa9e:	43 89       	ldd	r20, Z+19	; 0x13
    aaa0:	54 89       	ldd	r21, Z+20	; 0x14
    aaa2:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    aaa6:	60 93 82 10 	sts	0x1082, r22
    aaaa:	70 93 83 10 	sts	0x1083, r23
    aaae:	80 93 84 10 	sts	0x1084, r24
    aab2:	90 93 85 10 	sts	0x1085, r25
			texto1 = "X = " + float2string (mov.bd.centro_ref.x);
    aab6:	fb e2       	ldi	r31, 0x2B	; 43
    aab8:	cf 2e       	mov	r12, r31
    aaba:	d1 2c       	mov	r13, r1
    aabc:	cc 0e       	add	r12, r28
    aabe:	dd 1e       	adc	r13, r29
    aac0:	c6 01       	movw	r24, r12
    aac2:	6d ea       	ldi	r22, 0xAD	; 173
    aac4:	72 e0       	ldi	r23, 0x02	; 2
    aac6:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    aaca:	e5 e2       	ldi	r30, 0x25	; 37
    aacc:	ee 2e       	mov	r14, r30
    aace:	f1 2c       	mov	r15, r1
    aad0:	ec 0e       	add	r14, r28
    aad2:	fd 1e       	adc	r15, r29
    aad4:	40 91 82 10 	lds	r20, 0x1082
    aad8:	50 91 83 10 	lds	r21, 0x1083
    aadc:	60 91 84 10 	lds	r22, 0x1084
    aae0:	70 91 85 10 	lds	r23, 0x1085
    aae4:	c7 01       	movw	r24, r14
    aae6:	0e 94 8b 72 	call	0xe516	; 0xe516 <_Z12float2stringf>
    aaea:	8e 01       	movw	r16, r28
    aaec:	0f 5c       	subi	r16, 0xCF	; 207
    aaee:	1f 4f       	sbci	r17, 0xFF	; 255
    aaf0:	6f c1       	rjmp	.+734    	; 0xadd0 <_ZN13RemoteControl13editar_centroEh+0x4bc>
			retardo = true;
			break;
	
		case RC_LEFT:
			if (pantalla.isBusy()) {break;}
    aaf2:	83 ea       	ldi	r24, 0xA3	; 163
    aaf4:	93 e1       	ldi	r25, 0x13	; 19
    aaf6:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    aafa:	88 23       	and	r24, r24
    aafc:	09 f0       	breq	.+2      	; 0xab00 <_ZN13RemoteControl13editar_centroEh+0x1ec>
    aafe:	7e c1       	rjmp	.+764    	; 0xadfc <_ZN13RemoteControl13editar_centroEh+0x4e8>
			mov.bd.centro_ref.x -= step;
    ab00:	60 91 82 10 	lds	r22, 0x1082
    ab04:	70 91 83 10 	lds	r23, 0x1083
    ab08:	80 91 84 10 	lds	r24, 0x1084
    ab0c:	90 91 85 10 	lds	r25, 0x1085
    ab10:	f5 01       	movw	r30, r10
    ab12:	21 89       	ldd	r18, Z+17	; 0x11
    ab14:	32 89       	ldd	r19, Z+18	; 0x12
    ab16:	43 89       	ldd	r20, Z+19	; 0x13
    ab18:	54 89       	ldd	r21, Z+20	; 0x14
    ab1a:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    ab1e:	60 93 82 10 	sts	0x1082, r22
    ab22:	70 93 83 10 	sts	0x1083, r23
    ab26:	80 93 84 10 	sts	0x1084, r24
    ab2a:	90 93 85 10 	sts	0x1085, r25
			texto1 = "X = " + float2string (mov.bd.centro_ref.x);
    ab2e:	7d e3       	ldi	r23, 0x3D	; 61
    ab30:	c7 2e       	mov	r12, r23
    ab32:	d1 2c       	mov	r13, r1
    ab34:	cc 0e       	add	r12, r28
    ab36:	dd 1e       	adc	r13, r29
    ab38:	c6 01       	movw	r24, r12
    ab3a:	6d ea       	ldi	r22, 0xAD	; 173
    ab3c:	72 e0       	ldi	r23, 0x02	; 2
    ab3e:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    ab42:	67 e3       	ldi	r22, 0x37	; 55
    ab44:	e6 2e       	mov	r14, r22
    ab46:	f1 2c       	mov	r15, r1
    ab48:	ec 0e       	add	r14, r28
    ab4a:	fd 1e       	adc	r15, r29
    ab4c:	40 91 82 10 	lds	r20, 0x1082
    ab50:	50 91 83 10 	lds	r21, 0x1083
    ab54:	60 91 84 10 	lds	r22, 0x1084
    ab58:	70 91 85 10 	lds	r23, 0x1085
    ab5c:	c7 01       	movw	r24, r14
    ab5e:	0e 94 8b 72 	call	0xe516	; 0xe516 <_Z12float2stringf>
    ab62:	8e 01       	movw	r16, r28
    ab64:	0d 5b       	subi	r16, 0xBD	; 189
    ab66:	1f 4f       	sbci	r17, 0xFF	; 255
    ab68:	33 c1       	rjmp	.+614    	; 0xadd0 <_ZN13RemoteControl13editar_centroEh+0x4bc>
			retardo = true;
			break;

		case RC_CCTTX: case RC_MTS:
			if (pantalla.isBusy()) {break;}
    ab6a:	83 ea       	ldi	r24, 0xA3	; 163
    ab6c:	93 e1       	ldi	r25, 0x13	; 19
    ab6e:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    ab72:	88 23       	and	r24, r24
    ab74:	09 f0       	breq	.+2      	; 0xab78 <_ZN13RemoteControl13editar_centroEh+0x264>
    ab76:	42 c1       	rjmp	.+644    	; 0xadfc <_ZN13RemoteControl13editar_centroEh+0x4e8>
			mov.bd.centro_ref.y -= step;
    ab78:	60 91 86 10 	lds	r22, 0x1086
    ab7c:	70 91 87 10 	lds	r23, 0x1087
    ab80:	80 91 88 10 	lds	r24, 0x1088
    ab84:	90 91 89 10 	lds	r25, 0x1089
    ab88:	f5 01       	movw	r30, r10
    ab8a:	21 89       	ldd	r18, Z+17	; 0x11
    ab8c:	32 89       	ldd	r19, Z+18	; 0x12
    ab8e:	43 89       	ldd	r20, Z+19	; 0x13
    ab90:	54 89       	ldd	r21, Z+20	; 0x14
    ab92:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    ab96:	60 93 86 10 	sts	0x1086, r22
    ab9a:	70 93 87 10 	sts	0x1087, r23
    ab9e:	80 93 88 10 	sts	0x1088, r24
    aba2:	90 93 89 10 	sts	0x1089, r25
			texto1 = "Y = " + float2string (mov.bd.centro_ref.y);
    aba6:	5f e4       	ldi	r21, 0x4F	; 79
    aba8:	c5 2e       	mov	r12, r21
    abaa:	d1 2c       	mov	r13, r1
    abac:	cc 0e       	add	r12, r28
    abae:	dd 1e       	adc	r13, r29
    abb0:	c6 01       	movw	r24, r12
    abb2:	62 eb       	ldi	r22, 0xB2	; 178
    abb4:	72 e0       	ldi	r23, 0x02	; 2
    abb6:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    abba:	49 e4       	ldi	r20, 0x49	; 73
    abbc:	e4 2e       	mov	r14, r20
    abbe:	f1 2c       	mov	r15, r1
    abc0:	ec 0e       	add	r14, r28
    abc2:	fd 1e       	adc	r15, r29
    abc4:	40 91 86 10 	lds	r20, 0x1086
    abc8:	50 91 87 10 	lds	r21, 0x1087
    abcc:	60 91 88 10 	lds	r22, 0x1088
    abd0:	70 91 89 10 	lds	r23, 0x1089
    abd4:	c7 01       	movw	r24, r14
    abd6:	0e 94 8b 72 	call	0xe516	; 0xe516 <_Z12float2stringf>
    abda:	8e 01       	movw	r16, r28
    abdc:	0b 5a       	subi	r16, 0xAB	; 171
    abde:	1f 4f       	sbci	r17, 0xFF	; 255
    abe0:	f7 c0       	rjmp	.+494    	; 0xadd0 <_ZN13RemoteControl13editar_centroEh+0x4bc>
			retardo = true;
			break;
			
		case RC_EXIT: case RC_MENU:
			if (pantalla.isBusy()) {break;}
    abe2:	83 ea       	ldi	r24, 0xA3	; 163
    abe4:	93 e1       	ldi	r25, 0x13	; 19
    abe6:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    abea:	88 23       	and	r24, r24
    abec:	09 f0       	breq	.+2      	; 0xabf0 <_ZN13RemoteControl13editar_centroEh+0x2dc>
    abee:	06 c1       	rjmp	.+524    	; 0xadfc <_ZN13RemoteControl13editar_centroEh+0x4e8>
			mov.bd.centro_ref.y += step;
    abf0:	60 91 86 10 	lds	r22, 0x1086
    abf4:	70 91 87 10 	lds	r23, 0x1087
    abf8:	80 91 88 10 	lds	r24, 0x1088
    abfc:	90 91 89 10 	lds	r25, 0x1089
    ac00:	f5 01       	movw	r30, r10
    ac02:	21 89       	ldd	r18, Z+17	; 0x11
    ac04:	32 89       	ldd	r19, Z+18	; 0x12
    ac06:	43 89       	ldd	r20, Z+19	; 0x13
    ac08:	54 89       	ldd	r21, Z+20	; 0x14
    ac0a:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    ac0e:	60 93 86 10 	sts	0x1086, r22
    ac12:	70 93 87 10 	sts	0x1087, r23
    ac16:	80 93 88 10 	sts	0x1088, r24
    ac1a:	90 93 89 10 	sts	0x1089, r25
			texto1 = "Y = " + float2string (mov.bd.centro_ref.y);
    ac1e:	31 e6       	ldi	r19, 0x61	; 97
    ac20:	c3 2e       	mov	r12, r19
    ac22:	d1 2c       	mov	r13, r1
    ac24:	cc 0e       	add	r12, r28
    ac26:	dd 1e       	adc	r13, r29
    ac28:	c6 01       	movw	r24, r12
    ac2a:	62 eb       	ldi	r22, 0xB2	; 178
    ac2c:	72 e0       	ldi	r23, 0x02	; 2
    ac2e:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    ac32:	2b e5       	ldi	r18, 0x5B	; 91
    ac34:	e2 2e       	mov	r14, r18
    ac36:	f1 2c       	mov	r15, r1
    ac38:	ec 0e       	add	r14, r28
    ac3a:	fd 1e       	adc	r15, r29
    ac3c:	40 91 86 10 	lds	r20, 0x1086
    ac40:	50 91 87 10 	lds	r21, 0x1087
    ac44:	60 91 88 10 	lds	r22, 0x1088
    ac48:	70 91 89 10 	lds	r23, 0x1089
    ac4c:	c7 01       	movw	r24, r14
    ac4e:	0e 94 8b 72 	call	0xe516	; 0xe516 <_Z12float2stringf>
    ac52:	8e 01       	movw	r16, r28
    ac54:	09 59       	subi	r16, 0x99	; 153
    ac56:	1f 4f       	sbci	r17, 0xFF	; 255
    ac58:	bb c0       	rjmp	.+374    	; 0xadd0 <_ZN13RemoteControl13editar_centroEh+0x4bc>
			retardo = true;
			break;
			
		// esto también se repite
		case RC_CH_UP:
			if (pantalla.isBusy()) {break;}
    ac5a:	83 ea       	ldi	r24, 0xA3	; 163
    ac5c:	93 e1       	ldi	r25, 0x13	; 19
    ac5e:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    ac62:	88 23       	and	r24, r24
    ac64:	09 f0       	breq	.+2      	; 0xac68 <_ZN13RemoteControl13editar_centroEh+0x354>
    ac66:	ca c0       	rjmp	.+404    	; 0xadfc <_ZN13RemoteControl13editar_centroEh+0x4e8>
			if (!isMoving) {step = constrain (step+inc, .5, 5);}
    ac68:	f5 01       	movw	r30, r10
    ac6a:	85 a1       	ldd	r24, Z+37	; 0x25
    ac6c:	88 23       	and	r24, r24
    ac6e:	c1 f5       	brne	.+112    	; 0xace0 <_ZN13RemoteControl13editar_centroEh+0x3cc>
    ac70:	61 89       	ldd	r22, Z+17	; 0x11
    ac72:	72 89       	ldd	r23, Z+18	; 0x12
    ac74:	83 89       	ldd	r24, Z+19	; 0x13
    ac76:	94 89       	ldd	r25, Z+20	; 0x14
    ac78:	21 a1       	ldd	r18, Z+33	; 0x21
    ac7a:	32 a1       	ldd	r19, Z+34	; 0x22
    ac7c:	43 a1       	ldd	r20, Z+35	; 0x23
    ac7e:	54 a1       	ldd	r21, Z+36	; 0x24
    ac80:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    ac84:	7b 01       	movw	r14, r22
    ac86:	8c 01       	movw	r16, r24
    ac88:	20 e0       	ldi	r18, 0x00	; 0
    ac8a:	30 e0       	ldi	r19, 0x00	; 0
    ac8c:	40 e0       	ldi	r20, 0x00	; 0
    ac8e:	5f e3       	ldi	r21, 0x3F	; 63
    ac90:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    ac94:	88 23       	and	r24, r24
    ac96:	5c f4       	brge	.+22     	; 0xacae <_ZN13RemoteControl13editar_centroEh+0x39a>
    ac98:	0f 2e       	mov	r0, r31
    ac9a:	f0 e0       	ldi	r31, 0x00	; 0
    ac9c:	ef 2e       	mov	r14, r31
    ac9e:	f0 e0       	ldi	r31, 0x00	; 0
    aca0:	ff 2e       	mov	r15, r31
    aca2:	f0 e0       	ldi	r31, 0x00	; 0
    aca4:	0f 2f       	mov	r16, r31
    aca6:	ff e3       	ldi	r31, 0x3F	; 63
    aca8:	1f 2f       	mov	r17, r31
    acaa:	f0 2d       	mov	r31, r0
    acac:	14 c0       	rjmp	.+40     	; 0xacd6 <_ZN13RemoteControl13editar_centroEh+0x3c2>
    acae:	c8 01       	movw	r24, r16
    acb0:	b7 01       	movw	r22, r14
    acb2:	20 e0       	ldi	r18, 0x00	; 0
    acb4:	30 e0       	ldi	r19, 0x00	; 0
    acb6:	40 ea       	ldi	r20, 0xA0	; 160
    acb8:	50 e4       	ldi	r21, 0x40	; 64
    acba:	0e 94 8c 7c 	call	0xf918	; 0xf918 <__gesf2>
    acbe:	18 16       	cp	r1, r24
    acc0:	54 f4       	brge	.+20     	; 0xacd6 <_ZN13RemoteControl13editar_centroEh+0x3c2>
    acc2:	0f 2e       	mov	r0, r31
    acc4:	f0 e0       	ldi	r31, 0x00	; 0
    acc6:	ef 2e       	mov	r14, r31
    acc8:	f0 e0       	ldi	r31, 0x00	; 0
    acca:	ff 2e       	mov	r15, r31
    accc:	f0 ea       	ldi	r31, 0xA0	; 160
    acce:	0f 2f       	mov	r16, r31
    acd0:	f0 e4       	ldi	r31, 0x40	; 64
    acd2:	1f 2f       	mov	r17, r31
    acd4:	f0 2d       	mov	r31, r0
    acd6:	f5 01       	movw	r30, r10
    acd8:	e1 8a       	std	Z+17, r14	; 0x11
    acda:	f2 8a       	std	Z+18, r15	; 0x12
    acdc:	03 8b       	std	Z+19, r16	; 0x13
    acde:	14 8b       	std	Z+20, r17	; 0x14
			texto1 = "Step " + float2string (step);
    ace0:	93 e7       	ldi	r25, 0x73	; 115
    ace2:	c9 2e       	mov	r12, r25
    ace4:	d1 2c       	mov	r13, r1
    ace6:	cc 0e       	add	r12, r28
    ace8:	dd 1e       	adc	r13, r29
    acea:	c6 01       	movw	r24, r12
    acec:	67 eb       	ldi	r22, 0xB7	; 183
    acee:	72 e0       	ldi	r23, 0x02	; 2
    acf0:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    acf4:	8d e6       	ldi	r24, 0x6D	; 109
    acf6:	e8 2e       	mov	r14, r24
    acf8:	f1 2c       	mov	r15, r1
    acfa:	ec 0e       	add	r14, r28
    acfc:	fd 1e       	adc	r15, r29
    acfe:	f5 01       	movw	r30, r10
    ad00:	41 89       	ldd	r20, Z+17	; 0x11
    ad02:	52 89       	ldd	r21, Z+18	; 0x12
    ad04:	63 89       	ldd	r22, Z+19	; 0x13
    ad06:	74 89       	ldd	r23, Z+20	; 0x14
    ad08:	c7 01       	movw	r24, r14
    ad0a:	0e 94 8b 72 	call	0xe516	; 0xe516 <_Z12float2stringf>
    ad0e:	8e 01       	movw	r16, r28
    ad10:	07 58       	subi	r16, 0x87	; 135
    ad12:	1f 4f       	sbci	r17, 0xFF	; 255
    ad14:	5d c0       	rjmp	.+186    	; 0xadd0 <_ZN13RemoteControl13editar_centroEh+0x4bc>
			retardo = true;
			break;
			
		case RC_CH_DN:
			if (pantalla.isBusy()) {break;}
    ad16:	83 ea       	ldi	r24, 0xA3	; 163
    ad18:	93 e1       	ldi	r25, 0x13	; 19
    ad1a:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    ad1e:	88 23       	and	r24, r24
    ad20:	09 f0       	breq	.+2      	; 0xad24 <_ZN13RemoteControl13editar_centroEh+0x410>
    ad22:	6c c0       	rjmp	.+216    	; 0xadfc <_ZN13RemoteControl13editar_centroEh+0x4e8>
			if (!isMoving) {step = constrain (step-inc, .5, 5);}
    ad24:	f5 01       	movw	r30, r10
    ad26:	85 a1       	ldd	r24, Z+37	; 0x25
    ad28:	88 23       	and	r24, r24
    ad2a:	c1 f5       	brne	.+112    	; 0xad9c <_ZN13RemoteControl13editar_centroEh+0x488>
    ad2c:	61 89       	ldd	r22, Z+17	; 0x11
    ad2e:	72 89       	ldd	r23, Z+18	; 0x12
    ad30:	83 89       	ldd	r24, Z+19	; 0x13
    ad32:	94 89       	ldd	r25, Z+20	; 0x14
    ad34:	21 a1       	ldd	r18, Z+33	; 0x21
    ad36:	32 a1       	ldd	r19, Z+34	; 0x22
    ad38:	43 a1       	ldd	r20, Z+35	; 0x23
    ad3a:	54 a1       	ldd	r21, Z+36	; 0x24
    ad3c:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    ad40:	7b 01       	movw	r14, r22
    ad42:	8c 01       	movw	r16, r24
    ad44:	20 e0       	ldi	r18, 0x00	; 0
    ad46:	30 e0       	ldi	r19, 0x00	; 0
    ad48:	40 e0       	ldi	r20, 0x00	; 0
    ad4a:	5f e3       	ldi	r21, 0x3F	; 63
    ad4c:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    ad50:	88 23       	and	r24, r24
    ad52:	5c f4       	brge	.+22     	; 0xad6a <_ZN13RemoteControl13editar_centroEh+0x456>
    ad54:	0f 2e       	mov	r0, r31
    ad56:	f0 e0       	ldi	r31, 0x00	; 0
    ad58:	ef 2e       	mov	r14, r31
    ad5a:	f0 e0       	ldi	r31, 0x00	; 0
    ad5c:	ff 2e       	mov	r15, r31
    ad5e:	f0 e0       	ldi	r31, 0x00	; 0
    ad60:	0f 2f       	mov	r16, r31
    ad62:	ff e3       	ldi	r31, 0x3F	; 63
    ad64:	1f 2f       	mov	r17, r31
    ad66:	f0 2d       	mov	r31, r0
    ad68:	14 c0       	rjmp	.+40     	; 0xad92 <_ZN13RemoteControl13editar_centroEh+0x47e>
    ad6a:	c8 01       	movw	r24, r16
    ad6c:	b7 01       	movw	r22, r14
    ad6e:	20 e0       	ldi	r18, 0x00	; 0
    ad70:	30 e0       	ldi	r19, 0x00	; 0
    ad72:	40 ea       	ldi	r20, 0xA0	; 160
    ad74:	50 e4       	ldi	r21, 0x40	; 64
    ad76:	0e 94 8c 7c 	call	0xf918	; 0xf918 <__gesf2>
    ad7a:	18 16       	cp	r1, r24
    ad7c:	54 f4       	brge	.+20     	; 0xad92 <_ZN13RemoteControl13editar_centroEh+0x47e>
    ad7e:	0f 2e       	mov	r0, r31
    ad80:	f0 e0       	ldi	r31, 0x00	; 0
    ad82:	ef 2e       	mov	r14, r31
    ad84:	f0 e0       	ldi	r31, 0x00	; 0
    ad86:	ff 2e       	mov	r15, r31
    ad88:	f0 ea       	ldi	r31, 0xA0	; 160
    ad8a:	0f 2f       	mov	r16, r31
    ad8c:	f0 e4       	ldi	r31, 0x40	; 64
    ad8e:	1f 2f       	mov	r17, r31
    ad90:	f0 2d       	mov	r31, r0
    ad92:	f5 01       	movw	r30, r10
    ad94:	e1 8a       	std	Z+17, r14	; 0x11
    ad96:	f2 8a       	std	Z+18, r15	; 0x12
    ad98:	03 8b       	std	Z+19, r16	; 0x13
    ad9a:	14 8b       	std	Z+20, r17	; 0x14
			texto1 = "Step " + float2string (step);
    ad9c:	05 e8       	ldi	r16, 0x85	; 133
    ad9e:	c0 2e       	mov	r12, r16
    ada0:	d1 2c       	mov	r13, r1
    ada2:	cc 0e       	add	r12, r28
    ada4:	dd 1e       	adc	r13, r29
    ada6:	c6 01       	movw	r24, r12
    ada8:	67 eb       	ldi	r22, 0xB7	; 183
    adaa:	72 e0       	ldi	r23, 0x02	; 2
    adac:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    adb0:	1f e7       	ldi	r17, 0x7F	; 127
    adb2:	e1 2e       	mov	r14, r17
    adb4:	f1 2c       	mov	r15, r1
    adb6:	ec 0e       	add	r14, r28
    adb8:	fd 1e       	adc	r15, r29
    adba:	f5 01       	movw	r30, r10
    adbc:	41 89       	ldd	r20, Z+17	; 0x11
    adbe:	52 89       	ldd	r21, Z+18	; 0x12
    adc0:	63 89       	ldd	r22, Z+19	; 0x13
    adc2:	74 89       	ldd	r23, Z+20	; 0x14
    adc4:	c7 01       	movw	r24, r14
    adc6:	0e 94 8b 72 	call	0xe516	; 0xe516 <_Z12float2stringf>
    adca:	8e 01       	movw	r16, r28
    adcc:	05 57       	subi	r16, 0x75	; 117
    adce:	1f 4f       	sbci	r17, 0xFF	; 255
    add0:	c8 01       	movw	r24, r16
    add2:	b6 01       	movw	r22, r12
    add4:	a7 01       	movw	r20, r14
    add6:	0e 94 98 32 	call	0x6530	; 0x6530 <_Zpl6StringRKS_>
    adda:	c5 01       	movw	r24, r10
    addc:	88 96       	adiw	r24, 0x28	; 40
    adde:	b8 01       	movw	r22, r16
    ade0:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    ade4:	c8 01       	movw	r24, r16
    ade6:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    adea:	c7 01       	movw	r24, r14
    adec:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    adf0:	c6 01       	movw	r24, r12
    adf2:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			retardo = true;
    adf6:	81 e0       	ldi	r24, 0x01	; 1
    adf8:	f5 01       	movw	r30, r10
    adfa:	86 ab       	std	Z+54, r24	; 0x36
			break;
	}
}
    adfc:	c0 57       	subi	r28, 0x70	; 112
    adfe:	df 4f       	sbci	r29, 0xFF	; 255
    ae00:	0f b6       	in	r0, 0x3f	; 63
    ae02:	f8 94       	cli
    ae04:	de bf       	out	0x3e, r29	; 62
    ae06:	0f be       	out	0x3f, r0	; 63
    ae08:	cd bf       	out	0x3d, r28	; 61
    ae0a:	cf 91       	pop	r28
    ae0c:	df 91       	pop	r29
    ae0e:	1f 91       	pop	r17
    ae10:	0f 91       	pop	r16
    ae12:	ff 90       	pop	r15
    ae14:	ef 90       	pop	r14
    ae16:	df 90       	pop	r13
    ae18:	cf 90       	pop	r12
    ae1a:	bf 90       	pop	r11
    ae1c:	af 90       	pop	r10
    ae1e:	08 95       	ret

0000ae20 <_ZN13RemoteControl10editar_posEh>:

void RemoteControl::editar_pos (byte comando) {
    ae20:	6f 92       	push	r6
    ae22:	7f 92       	push	r7
    ae24:	8f 92       	push	r8
    ae26:	9f 92       	push	r9
    ae28:	af 92       	push	r10
    ae2a:	bf 92       	push	r11
    ae2c:	cf 92       	push	r12
    ae2e:	df 92       	push	r13
    ae30:	ef 92       	push	r14
    ae32:	ff 92       	push	r15
    ae34:	0f 93       	push	r16
    ae36:	1f 93       	push	r17
    ae38:	df 93       	push	r29
    ae3a:	cf 93       	push	r28
    ae3c:	cd b7       	in	r28, 0x3d	; 61
    ae3e:	de b7       	in	r29, 0x3e	; 62
    ae40:	cc 56       	subi	r28, 0x6C	; 108
    ae42:	d0 40       	sbci	r29, 0x00	; 0
    ae44:	0f b6       	in	r0, 0x3f	; 63
    ae46:	f8 94       	cli
    ae48:	de bf       	out	0x3e, r29	; 62
    ae4a:	0f be       	out	0x3f, r0	; 63
    ae4c:	cd bf       	out	0x3d, r28	; 61
    ae4e:	3c 01       	movw	r6, r24
	#define EXTREMOS 0
	#define MEDIOS 1
	
	static byte edit_pos_modo = EXTREMOS;
	
	switch (comando) {
    ae50:	6e 34       	cpi	r22, 0x4E	; 78
    ae52:	09 f4       	brne	.+2      	; 0xae56 <_ZN13RemoteControl10editar_posEh+0x36>
    ae54:	01 c1       	rjmp	.+514    	; 0xb058 <_ZN13RemoteControl10editar_posEh+0x238>
    ae56:	6f 34       	cpi	r22, 0x4F	; 79
    ae58:	80 f4       	brcc	.+32     	; 0xae7a <_ZN13RemoteControl10editar_posEh+0x5a>
    ae5a:	63 31       	cpi	r22, 0x13	; 19
    ae5c:	09 f4       	brne	.+2      	; 0xae60 <_ZN13RemoteControl10editar_posEh+0x40>
    ae5e:	e8 c0       	rjmp	.+464    	; 0xb030 <_ZN13RemoteControl10editar_posEh+0x210>
    ae60:	64 31       	cpi	r22, 0x14	; 20
    ae62:	20 f4       	brcc	.+8      	; 0xae6c <_ZN13RemoteControl10editar_posEh+0x4c>
    ae64:	60 31       	cpi	r22, 0x10	; 16
    ae66:	09 f0       	breq	.+2      	; 0xae6a <_ZN13RemoteControl10editar_posEh+0x4a>
    ae68:	72 c2       	rjmp	.+1252   	; 0xb34e <_ZN13RemoteControl10editar_posEh+0x52e>
    ae6a:	cf c0       	rjmp	.+414    	; 0xb00a <_ZN13RemoteControl10editar_posEh+0x1ea>
    ae6c:	6a 31       	cpi	r22, 0x1A	; 26
    ae6e:	09 f4       	brne	.+2      	; 0xae72 <_ZN13RemoteControl10editar_posEh+0x52>
    ae70:	9d c1       	rjmp	.+826    	; 0xb1ac <_ZN13RemoteControl10editar_posEh+0x38c>
    ae72:	6e 31       	cpi	r22, 0x1E	; 30
    ae74:	09 f0       	breq	.+2      	; 0xae78 <_ZN13RemoteControl10editar_posEh+0x58>
    ae76:	6b c2       	rjmp	.+1238   	; 0xb34e <_ZN13RemoteControl10editar_posEh+0x52e>
    ae78:	f7 c1       	rjmp	.+1006   	; 0xb268 <_ZN13RemoteControl10editar_posEh+0x448>
    ae7a:	6d 35       	cpi	r22, 0x5D	; 93
    ae7c:	09 f4       	brne	.+2      	; 0xae80 <_ZN13RemoteControl10editar_posEh+0x60>
    ae7e:	88 c0       	rjmp	.+272    	; 0xaf90 <_ZN13RemoteControl10editar_posEh+0x170>
    ae80:	6e 35       	cpi	r22, 0x5E	; 94
    ae82:	38 f4       	brcc	.+14     	; 0xae92 <_ZN13RemoteControl10editar_posEh+0x72>
    ae84:	6f 34       	cpi	r22, 0x4F	; 79
    ae86:	09 f4       	brne	.+2      	; 0xae8a <_ZN13RemoteControl10editar_posEh+0x6a>
    ae88:	26 c1       	rjmp	.+588    	; 0xb0d6 <_ZN13RemoteControl10editar_posEh+0x2b6>
    ae8a:	6c 35       	cpi	r22, 0x5C	; 92
    ae8c:	09 f0       	breq	.+2      	; 0xae90 <_ZN13RemoteControl10editar_posEh+0x70>
    ae8e:	5f c2       	rjmp	.+1214   	; 0xb34e <_ZN13RemoteControl10editar_posEh+0x52e>
    ae90:	07 c0       	rjmp	.+14     	; 0xaea0 <_ZN13RemoteControl10editar_posEh+0x80>
    ae92:	6e 35       	cpi	r22, 0x5E	; 94
    ae94:	09 f4       	brne	.+2      	; 0xae98 <_ZN13RemoteControl10editar_posEh+0x78>
    ae96:	54 c0       	rjmp	.+168    	; 0xaf40 <_ZN13RemoteControl10editar_posEh+0x120>
    ae98:	6f 35       	cpi	r22, 0x5F	; 95
    ae9a:	09 f0       	breq	.+2      	; 0xae9e <_ZN13RemoteControl10editar_posEh+0x7e>
    ae9c:	58 c2       	rjmp	.+1200   	; 0xb34e <_ZN13RemoteControl10editar_posEh+0x52e>
    ae9e:	1f c0       	rjmp	.+62     	; 0xaede <_ZN13RemoteControl10editar_posEh+0xbe>
		case RC_UP:
			texto1 = "|";
    aea0:	8e 01       	movw	r16, r28
    aea2:	0f 5f       	subi	r16, 0xFF	; 255
    aea4:	1f 4f       	sbci	r17, 0xFF	; 255
    aea6:	c8 01       	movw	r24, r16
    aea8:	6d eb       	ldi	r22, 0xBD	; 189
    aeaa:	72 e0       	ldi	r23, 0x02	; 2
    aeac:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    aeb0:	c3 01       	movw	r24, r6
    aeb2:	88 96       	adiw	r24, 0x28	; 40
    aeb4:	b8 01       	movw	r22, r16
    aeb6:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    aeba:	c8 01       	movw	r24, r16
    aebc:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			if (edit_pos_modo==EXTREMOS) {
    aec0:	80 91 eb 13 	lds	r24, 0x13EB
    aec4:	88 23       	and	r24, r24
    aec6:	09 f0       	breq	.+2      	; 0xaeca <_ZN13RemoteControl10editar_posEh+0xaa>
    aec8:	42 c2       	rjmp	.+1156   	; 0xb34e <_ZN13RemoteControl10editar_posEh+0x52e>
				edit_position (mov.get_pos_ref(), 0, 0, step, 0);
    aeca:	85 ee       	ldi	r24, 0xE5	; 229
    aecc:	9f e0       	ldi	r25, 0x0F	; 15
    aece:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <_ZN10Movimiento11get_pos_refEv>
    aed2:	f3 01       	movw	r30, r6
    aed4:	c1 88       	ldd	r12, Z+17	; 0x11
    aed6:	d2 88       	ldd	r13, Z+18	; 0x12
    aed8:	e3 88       	ldd	r14, Z+19	; 0x13
    aeda:	f4 88       	ldd	r15, Z+20	; 0x14
    aedc:	22 c0       	rjmp	.+68     	; 0xaf22 <_ZN13RemoteControl10editar_posEh+0x102>
				mov.goto_pos_ref();
			}
			break;
		
		case RC_DOWN:
			texto1 = "^";
    aede:	8e 01       	movw	r16, r28
    aee0:	09 5f       	subi	r16, 0xF9	; 249
    aee2:	1f 4f       	sbci	r17, 0xFF	; 255
    aee4:	c8 01       	movw	r24, r16
    aee6:	6f eb       	ldi	r22, 0xBF	; 191
    aee8:	72 e0       	ldi	r23, 0x02	; 2
    aeea:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    aeee:	c3 01       	movw	r24, r6
    aef0:	88 96       	adiw	r24, 0x28	; 40
    aef2:	b8 01       	movw	r22, r16
    aef4:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    aef8:	c8 01       	movw	r24, r16
    aefa:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			if (edit_pos_modo==EXTREMOS) {
    aefe:	80 91 eb 13 	lds	r24, 0x13EB
    af02:	88 23       	and	r24, r24
    af04:	09 f0       	breq	.+2      	; 0xaf08 <_ZN13RemoteControl10editar_posEh+0xe8>
    af06:	23 c2       	rjmp	.+1094   	; 0xb34e <_ZN13RemoteControl10editar_posEh+0x52e>
				edit_position (mov.get_pos_ref(), 0, 0, -step, 0);
    af08:	85 ee       	ldi	r24, 0xE5	; 229
    af0a:	9f e0       	ldi	r25, 0x0F	; 15
    af0c:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <_ZN10Movimiento11get_pos_refEv>
    af10:	f3 01       	movw	r30, r6
    af12:	c1 88       	ldd	r12, Z+17	; 0x11
    af14:	d2 88       	ldd	r13, Z+18	; 0x12
    af16:	e3 88       	ldd	r14, Z+19	; 0x13
    af18:	f4 88       	ldd	r15, Z+20	; 0x14
    af1a:	f7 fa       	bst	r15, 7
    af1c:	f0 94       	com	r15
    af1e:	f7 f8       	bld	r15, 7
    af20:	f0 94       	com	r15
    af22:	40 e0       	ldi	r20, 0x00	; 0
    af24:	50 e0       	ldi	r21, 0x00	; 0
    af26:	60 e0       	ldi	r22, 0x00	; 0
    af28:	70 e0       	ldi	r23, 0x00	; 0
    af2a:	8a 01       	movw	r16, r20
    af2c:	9b 01       	movw	r18, r22
    af2e:	4a 01       	movw	r8, r20
    af30:	5b 01       	movw	r10, r22
    af32:	0e 94 31 40 	call	0x8062	; 0x8062 <_Z13edit_positionP7COORD3Dffff>
				mov.goto_pos_ref();
    af36:	85 ee       	ldi	r24, 0xE5	; 229
    af38:	9f e0       	ldi	r25, 0x0F	; 15
    af3a:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <_ZN10Movimiento12goto_pos_refEv>
    af3e:	07 c2       	rjmp	.+1038   	; 0xb34e <_ZN13RemoteControl10editar_posEh+0x52e>
			}
			break;
		
		case RC_RIGHT:
			texto1 = "<";
    af40:	8e 01       	movw	r16, r28
    af42:	03 5f       	subi	r16, 0xF3	; 243
    af44:	1f 4f       	sbci	r17, 0xFF	; 255
    af46:	c8 01       	movw	r24, r16
    af48:	61 ec       	ldi	r22, 0xC1	; 193
    af4a:	72 e0       	ldi	r23, 0x02	; 2
    af4c:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    af50:	c3 01       	movw	r24, r6
    af52:	88 96       	adiw	r24, 0x28	; 40
    af54:	b8 01       	movw	r22, r16
    af56:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    af5a:	c8 01       	movw	r24, r16
    af5c:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			if (edit_pos_modo==EXTREMOS) {
    af60:	80 91 eb 13 	lds	r24, 0x13EB
    af64:	88 23       	and	r24, r24
    af66:	51 f4       	brne	.+20     	; 0xaf7c <_ZN13RemoteControl10editar_posEh+0x15c>
				edit_position (mov.get_pos_ref(), 0, step, 0, 0);
    af68:	85 ee       	ldi	r24, 0xE5	; 229
    af6a:	9f e0       	ldi	r25, 0x0F	; 15
    af6c:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <_ZN10Movimiento11get_pos_refEv>
    af70:	f3 01       	movw	r30, r6
    af72:	01 89       	ldd	r16, Z+17	; 0x11
    af74:	12 89       	ldd	r17, Z+18	; 0x12
    af76:	23 89       	ldd	r18, Z+19	; 0x13
    af78:	34 89       	ldd	r19, Z+20	; 0x14
    af7a:	28 c0       	rjmp	.+80     	; 0xafcc <_ZN13RemoteControl10editar_posEh+0x1ac>
			} else {
				edit_position (mov.get_pos_ref(), 0, 0, 0, step);
    af7c:	85 ee       	ldi	r24, 0xE5	; 229
    af7e:	9f e0       	ldi	r25, 0x0F	; 15
    af80:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <_ZN10Movimiento11get_pos_refEv>
    af84:	f3 01       	movw	r30, r6
    af86:	81 88       	ldd	r8, Z+17	; 0x11
    af88:	92 88       	ldd	r9, Z+18	; 0x12
    af8a:	a3 88       	ldd	r10, Z+19	; 0x13
    af8c:	b4 88       	ldd	r11, Z+20	; 0x14
    af8e:	34 c0       	rjmp	.+104    	; 0xaff8 <_ZN13RemoteControl10editar_posEh+0x1d8>
			}
			mov.goto_pos_ref();
			break;
	
		case RC_LEFT:
			texto1 = ">";
    af90:	8e 01       	movw	r16, r28
    af92:	0d 5e       	subi	r16, 0xED	; 237
    af94:	1f 4f       	sbci	r17, 0xFF	; 255
    af96:	c8 01       	movw	r24, r16
    af98:	63 ec       	ldi	r22, 0xC3	; 195
    af9a:	72 e0       	ldi	r23, 0x02	; 2
    af9c:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    afa0:	c3 01       	movw	r24, r6
    afa2:	88 96       	adiw	r24, 0x28	; 40
    afa4:	b8 01       	movw	r22, r16
    afa6:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    afaa:	c8 01       	movw	r24, r16
    afac:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			if (edit_pos_modo==EXTREMOS) {
    afb0:	80 91 eb 13 	lds	r24, 0x13EB
    afb4:	88 23       	and	r24, r24
    afb6:	99 f4       	brne	.+38     	; 0xafde <_ZN13RemoteControl10editar_posEh+0x1be>
				edit_position (mov.get_pos_ref(), 0, -step, 0, 0);
    afb8:	85 ee       	ldi	r24, 0xE5	; 229
    afba:	9f e0       	ldi	r25, 0x0F	; 15
    afbc:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <_ZN10Movimiento11get_pos_refEv>
    afc0:	f3 01       	movw	r30, r6
    afc2:	01 89       	ldd	r16, Z+17	; 0x11
    afc4:	12 89       	ldd	r17, Z+18	; 0x12
    afc6:	23 89       	ldd	r18, Z+19	; 0x13
    afc8:	34 89       	ldd	r19, Z+20	; 0x14
    afca:	30 58       	subi	r19, 0x80	; 128
    afcc:	40 e0       	ldi	r20, 0x00	; 0
    afce:	50 e0       	ldi	r21, 0x00	; 0
    afd0:	60 e0       	ldi	r22, 0x00	; 0
    afd2:	70 e0       	ldi	r23, 0x00	; 0
    afd4:	6a 01       	movw	r12, r20
    afd6:	7b 01       	movw	r14, r22
    afd8:	4a 01       	movw	r8, r20
    afda:	5b 01       	movw	r10, r22
    afdc:	aa cf       	rjmp	.-172    	; 0xaf32 <_ZN13RemoteControl10editar_posEh+0x112>
			} else {
				edit_position (mov.get_pos_ref(), 0, 0, 0, -step);
    afde:	85 ee       	ldi	r24, 0xE5	; 229
    afe0:	9f e0       	ldi	r25, 0x0F	; 15
    afe2:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <_ZN10Movimiento11get_pos_refEv>
    afe6:	f3 01       	movw	r30, r6
    afe8:	81 88       	ldd	r8, Z+17	; 0x11
    afea:	92 88       	ldd	r9, Z+18	; 0x12
    afec:	a3 88       	ldd	r10, Z+19	; 0x13
    afee:	b4 88       	ldd	r11, Z+20	; 0x14
    aff0:	b7 fa       	bst	r11, 7
    aff2:	b0 94       	com	r11
    aff4:	b7 f8       	bld	r11, 7
    aff6:	b0 94       	com	r11
    aff8:	40 e0       	ldi	r20, 0x00	; 0
    affa:	50 e0       	ldi	r21, 0x00	; 0
    affc:	60 e0       	ldi	r22, 0x00	; 0
    affe:	70 e0       	ldi	r23, 0x00	; 0
    b000:	8a 01       	movw	r16, r20
    b002:	9b 01       	movw	r18, r22
    b004:	6a 01       	movw	r12, r20
    b006:	7b 01       	movw	r14, r22
    b008:	94 cf       	rjmp	.-216    	; 0xaf32 <_ZN13RemoteControl10editar_posEh+0x112>
			}
			mov.goto_pos_ref();
			break;

		case RC_MENU: 
			texto1 = "EXTREMOS";
    b00a:	8e 01       	movw	r16, r28
    b00c:	07 5e       	subi	r16, 0xE7	; 231
    b00e:	1f 4f       	sbci	r17, 0xFF	; 255
    b010:	c8 01       	movw	r24, r16
    b012:	65 ec       	ldi	r22, 0xC5	; 197
    b014:	72 e0       	ldi	r23, 0x02	; 2
    b016:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    b01a:	c3 01       	movw	r24, r6
    b01c:	88 96       	adiw	r24, 0x28	; 40
    b01e:	b8 01       	movw	r22, r16
    b020:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    b024:	c8 01       	movw	r24, r16
    b026:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			edit_pos_modo = EXTREMOS; 
    b02a:	10 92 eb 13 	sts	0x13EB, r1
    b02e:	8f c1       	rjmp	.+798    	; 0xb34e <_ZN13RemoteControl10editar_posEh+0x52e>
			break;
			
		case RC_MTS:
			texto1 = "MEDIOS";
    b030:	8e 01       	movw	r16, r28
    b032:	01 5e       	subi	r16, 0xE1	; 225
    b034:	1f 4f       	sbci	r17, 0xFF	; 255
    b036:	c8 01       	movw	r24, r16
    b038:	6e ec       	ldi	r22, 0xCE	; 206
    b03a:	72 e0       	ldi	r23, 0x02	; 2
    b03c:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    b040:	c3 01       	movw	r24, r6
    b042:	88 96       	adiw	r24, 0x28	; 40
    b044:	b8 01       	movw	r22, r16
    b046:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    b04a:	c8 01       	movw	r24, r16
    b04c:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			edit_pos_modo = MEDIOS;  
    b050:	81 e0       	ldi	r24, 0x01	; 1
    b052:	80 93 eb 13 	sts	0x13EB, r24
    b056:	7b c1       	rjmp	.+758    	; 0xb34e <_ZN13RemoteControl10editar_posEh+0x52e>
			break;
		
		case RC_EXIT:
			texto1 = "h-";
    b058:	8e 01       	movw	r16, r28
    b05a:	0b 5d       	subi	r16, 0xDB	; 219
    b05c:	1f 4f       	sbci	r17, 0xFF	; 255
    b05e:	c8 01       	movw	r24, r16
    b060:	65 ed       	ldi	r22, 0xD5	; 213
    b062:	72 e0       	ldi	r23, 0x02	; 2
    b064:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    b068:	c3 01       	movw	r24, r6
    b06a:	88 96       	adiw	r24, 0x28	; 40
    b06c:	b8 01       	movw	r22, r16
    b06e:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    b072:	c8 01       	movw	r24, r16
    b074:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			edit_position (mov.get_pos_ref(), step, 0, 0, 0);
    b078:	85 ee       	ldi	r24, 0xE5	; 229
    b07a:	9f e0       	ldi	r25, 0x0F	; 15
    b07c:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <_ZN10Movimiento11get_pos_refEv>
    b080:	f3 01       	movw	r30, r6
    b082:	41 89       	ldd	r20, Z+17	; 0x11
    b084:	52 89       	ldd	r21, Z+18	; 0x12
    b086:	63 89       	ldd	r22, Z+19	; 0x13
    b088:	74 89       	ldd	r23, Z+20	; 0x14
    b08a:	00 e0       	ldi	r16, 0x00	; 0
    b08c:	10 e0       	ldi	r17, 0x00	; 0
    b08e:	20 e0       	ldi	r18, 0x00	; 0
    b090:	30 e0       	ldi	r19, 0x00	; 0
    b092:	68 01       	movw	r12, r16
    b094:	79 01       	movw	r14, r18
    b096:	48 01       	movw	r8, r16
    b098:	59 01       	movw	r10, r18
    b09a:	0e 94 31 40 	call	0x8062	; 0x8062 <_Z13edit_positionP7COORD3Dffff>
			mov.translation ((COORD3D) {0, step, 0}, step/(velocidad*TICK));  // sustituir la fórmula de velocidad por un número concreto
    b09e:	f3 01       	movw	r30, r6
    b0a0:	e1 88       	ldd	r14, Z+17	; 0x11
    b0a2:	f2 88       	ldd	r15, Z+18	; 0x12
    b0a4:	03 89       	ldd	r16, Z+19	; 0x13
    b0a6:	14 89       	ldd	r17, Z+20	; 0x14
    b0a8:	45 e5       	ldi	r20, 0x55	; 85
    b0aa:	a4 2e       	mov	r10, r20
    b0ac:	b1 2c       	mov	r11, r1
    b0ae:	ac 0e       	add	r10, r28
    b0b0:	bd 1e       	adc	r11, r29
    b0b2:	80 e0       	ldi	r24, 0x00	; 0
    b0b4:	90 e0       	ldi	r25, 0x00	; 0
    b0b6:	a0 e0       	ldi	r26, 0x00	; 0
    b0b8:	b0 e0       	ldi	r27, 0x00	; 0
    b0ba:	f5 01       	movw	r30, r10
    b0bc:	80 83       	st	Z, r24
    b0be:	91 83       	std	Z+1, r25	; 0x01
    b0c0:	a2 83       	std	Z+2, r26	; 0x02
    b0c2:	b3 83       	std	Z+3, r27	; 0x03
    b0c4:	e4 82       	std	Z+4, r14	; 0x04
    b0c6:	f5 82       	std	Z+5, r15	; 0x05
    b0c8:	06 83       	std	Z+6, r16	; 0x06
    b0ca:	17 83       	std	Z+7, r17	; 0x07
    b0cc:	80 87       	std	Z+8, r24	; 0x08
    b0ce:	91 87       	std	Z+9, r25	; 0x09
    b0d0:	a2 87       	std	Z+10, r26	; 0x0a
    b0d2:	b3 87       	std	Z+11, r27	; 0x0b
    b0d4:	42 c0       	rjmp	.+132    	; 0xb15a <_ZN13RemoteControl10editar_posEh+0x33a>
			break;
			
		case RC_CCTTX:
			texto1 = "h+";
    b0d6:	8e 01       	movw	r16, r28
    b0d8:	05 5d       	subi	r16, 0xD5	; 213
    b0da:	1f 4f       	sbci	r17, 0xFF	; 255
    b0dc:	c8 01       	movw	r24, r16
    b0de:	68 ed       	ldi	r22, 0xD8	; 216
    b0e0:	72 e0       	ldi	r23, 0x02	; 2
    b0e2:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    b0e6:	c3 01       	movw	r24, r6
    b0e8:	88 96       	adiw	r24, 0x28	; 40
    b0ea:	b8 01       	movw	r22, r16
    b0ec:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    b0f0:	c8 01       	movw	r24, r16
    b0f2:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			edit_position (mov.get_pos_ref(), -step, 0, 0, 0);  
    b0f6:	85 ee       	ldi	r24, 0xE5	; 229
    b0f8:	9f e0       	ldi	r25, 0x0F	; 15
    b0fa:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <_ZN10Movimiento11get_pos_refEv>
    b0fe:	f3 01       	movw	r30, r6
    b100:	41 89       	ldd	r20, Z+17	; 0x11
    b102:	52 89       	ldd	r21, Z+18	; 0x12
    b104:	63 89       	ldd	r22, Z+19	; 0x13
    b106:	74 89       	ldd	r23, Z+20	; 0x14
    b108:	70 58       	subi	r23, 0x80	; 128
    b10a:	00 e0       	ldi	r16, 0x00	; 0
    b10c:	10 e0       	ldi	r17, 0x00	; 0
    b10e:	20 e0       	ldi	r18, 0x00	; 0
    b110:	30 e0       	ldi	r19, 0x00	; 0
    b112:	68 01       	movw	r12, r16
    b114:	79 01       	movw	r14, r18
    b116:	48 01       	movw	r8, r16
    b118:	59 01       	movw	r10, r18
    b11a:	0e 94 31 40 	call	0x8062	; 0x8062 <_Z13edit_positionP7COORD3Dffff>
			mov.translation ((COORD3D) {0, -step, 0}, step/(velocidad*TICK)); 
    b11e:	f3 01       	movw	r30, r6
    b120:	e1 88       	ldd	r14, Z+17	; 0x11
    b122:	f2 88       	ldd	r15, Z+18	; 0x12
    b124:	03 89       	ldd	r16, Z+19	; 0x13
    b126:	14 89       	ldd	r17, Z+20	; 0x14
    b128:	31 e6       	ldi	r19, 0x61	; 97
    b12a:	a3 2e       	mov	r10, r19
    b12c:	b1 2c       	mov	r11, r1
    b12e:	ac 0e       	add	r10, r28
    b130:	bd 1e       	adc	r11, r29
    b132:	20 e0       	ldi	r18, 0x00	; 0
    b134:	30 e0       	ldi	r19, 0x00	; 0
    b136:	40 e0       	ldi	r20, 0x00	; 0
    b138:	50 e0       	ldi	r21, 0x00	; 0
    b13a:	f5 01       	movw	r30, r10
    b13c:	20 83       	st	Z, r18
    b13e:	31 83       	std	Z+1, r19	; 0x01
    b140:	42 83       	std	Z+2, r20	; 0x02
    b142:	53 83       	std	Z+3, r21	; 0x03
    b144:	d8 01       	movw	r26, r16
    b146:	c7 01       	movw	r24, r14
    b148:	b0 58       	subi	r27, 0x80	; 128
    b14a:	84 83       	std	Z+4, r24	; 0x04
    b14c:	95 83       	std	Z+5, r25	; 0x05
    b14e:	a6 83       	std	Z+6, r26	; 0x06
    b150:	b7 83       	std	Z+7, r27	; 0x07
    b152:	20 87       	std	Z+8, r18	; 0x08
    b154:	31 87       	std	Z+9, r19	; 0x09
    b156:	42 87       	std	Z+10, r20	; 0x0a
    b158:	53 87       	std	Z+11, r21	; 0x0b
    b15a:	f3 01       	movw	r30, r6
    b15c:	60 81       	ld	r22, Z
    b15e:	71 81       	ldd	r23, Z+1	; 0x01
    b160:	82 81       	ldd	r24, Z+2	; 0x02
    b162:	93 81       	ldd	r25, Z+3	; 0x03
    b164:	2f e6       	ldi	r18, 0x6F	; 111
    b166:	32 e1       	ldi	r19, 0x12	; 18
    b168:	43 e8       	ldi	r20, 0x83	; 131
    b16a:	5b e3       	ldi	r21, 0x3B	; 59
    b16c:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    b170:	9b 01       	movw	r18, r22
    b172:	ac 01       	movw	r20, r24
    b174:	c8 01       	movw	r24, r16
    b176:	b7 01       	movw	r22, r14
    b178:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    b17c:	0e 94 30 7b 	call	0xf660	; 0xf660 <__fixsfsi>
    b180:	3b 01       	movw	r6, r22
    b182:	4c 01       	movw	r8, r24
    b184:	85 ee       	ldi	r24, 0xE5	; 229
    b186:	9f e0       	ldi	r25, 0x0F	; 15
    b188:	f5 01       	movw	r30, r10
    b18a:	c0 80       	ld	r12, Z
    b18c:	d1 80       	ldd	r13, Z+1	; 0x01
    b18e:	e2 80       	ldd	r14, Z+2	; 0x02
    b190:	f3 80       	ldd	r15, Z+3	; 0x03
    b192:	04 81       	ldd	r16, Z+4	; 0x04
    b194:	15 81       	ldd	r17, Z+5	; 0x05
    b196:	26 81       	ldd	r18, Z+6	; 0x06
    b198:	37 81       	ldd	r19, Z+7	; 0x07
    b19a:	40 85       	ldd	r20, Z+8	; 0x08
    b19c:	51 85       	ldd	r21, Z+9	; 0x09
    b19e:	62 85       	ldd	r22, Z+10	; 0x0a
    b1a0:	73 85       	ldd	r23, Z+11	; 0x0b
    b1a2:	53 01       	movw	r10, r6
    b1a4:	88 24       	eor	r8, r8
    b1a6:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN10Movimiento11translationE7COORD3Dih>
    b1aa:	d1 c0       	rjmp	.+418    	; 0xb34e <_ZN13RemoteControl10editar_posEh+0x52e>
			break;
	
		// esto también se repite
		case RC_CH_UP:
			if (pantalla.isBusy()) {break;}
    b1ac:	83 ea       	ldi	r24, 0xA3	; 163
    b1ae:	93 e1       	ldi	r25, 0x13	; 19
    b1b0:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    b1b4:	88 23       	and	r24, r24
    b1b6:	09 f0       	breq	.+2      	; 0xb1ba <_ZN13RemoteControl10editar_posEh+0x39a>
    b1b8:	ca c0       	rjmp	.+404    	; 0xb34e <_ZN13RemoteControl10editar_posEh+0x52e>
			if (!isMoving) {step = constrain (step+inc, .5, 5);}
    b1ba:	f3 01       	movw	r30, r6
    b1bc:	85 a1       	ldd	r24, Z+37	; 0x25
    b1be:	88 23       	and	r24, r24
    b1c0:	c1 f5       	brne	.+112    	; 0xb232 <_ZN13RemoteControl10editar_posEh+0x412>
    b1c2:	61 89       	ldd	r22, Z+17	; 0x11
    b1c4:	72 89       	ldd	r23, Z+18	; 0x12
    b1c6:	83 89       	ldd	r24, Z+19	; 0x13
    b1c8:	94 89       	ldd	r25, Z+20	; 0x14
    b1ca:	21 a1       	ldd	r18, Z+33	; 0x21
    b1cc:	32 a1       	ldd	r19, Z+34	; 0x22
    b1ce:	43 a1       	ldd	r20, Z+35	; 0x23
    b1d0:	54 a1       	ldd	r21, Z+36	; 0x24
    b1d2:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    b1d6:	7b 01       	movw	r14, r22
    b1d8:	8c 01       	movw	r16, r24
    b1da:	20 e0       	ldi	r18, 0x00	; 0
    b1dc:	30 e0       	ldi	r19, 0x00	; 0
    b1de:	40 e0       	ldi	r20, 0x00	; 0
    b1e0:	5f e3       	ldi	r21, 0x3F	; 63
    b1e2:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    b1e6:	88 23       	and	r24, r24
    b1e8:	5c f4       	brge	.+22     	; 0xb200 <_ZN13RemoteControl10editar_posEh+0x3e0>
    b1ea:	0f 2e       	mov	r0, r31
    b1ec:	f0 e0       	ldi	r31, 0x00	; 0
    b1ee:	ef 2e       	mov	r14, r31
    b1f0:	f0 e0       	ldi	r31, 0x00	; 0
    b1f2:	ff 2e       	mov	r15, r31
    b1f4:	f0 e0       	ldi	r31, 0x00	; 0
    b1f6:	0f 2f       	mov	r16, r31
    b1f8:	ff e3       	ldi	r31, 0x3F	; 63
    b1fa:	1f 2f       	mov	r17, r31
    b1fc:	f0 2d       	mov	r31, r0
    b1fe:	14 c0       	rjmp	.+40     	; 0xb228 <_ZN13RemoteControl10editar_posEh+0x408>
    b200:	c8 01       	movw	r24, r16
    b202:	b7 01       	movw	r22, r14
    b204:	20 e0       	ldi	r18, 0x00	; 0
    b206:	30 e0       	ldi	r19, 0x00	; 0
    b208:	40 ea       	ldi	r20, 0xA0	; 160
    b20a:	50 e4       	ldi	r21, 0x40	; 64
    b20c:	0e 94 8c 7c 	call	0xf918	; 0xf918 <__gesf2>
    b210:	18 16       	cp	r1, r24
    b212:	54 f4       	brge	.+20     	; 0xb228 <_ZN13RemoteControl10editar_posEh+0x408>
    b214:	0f 2e       	mov	r0, r31
    b216:	f0 e0       	ldi	r31, 0x00	; 0
    b218:	ef 2e       	mov	r14, r31
    b21a:	f0 e0       	ldi	r31, 0x00	; 0
    b21c:	ff 2e       	mov	r15, r31
    b21e:	f0 ea       	ldi	r31, 0xA0	; 160
    b220:	0f 2f       	mov	r16, r31
    b222:	f0 e4       	ldi	r31, 0x40	; 64
    b224:	1f 2f       	mov	r17, r31
    b226:	f0 2d       	mov	r31, r0
    b228:	f3 01       	movw	r30, r6
    b22a:	e1 8a       	std	Z+17, r14	; 0x11
    b22c:	f2 8a       	std	Z+18, r15	; 0x12
    b22e:	03 8b       	std	Z+19, r16	; 0x13
    b230:	14 8b       	std	Z+20, r17	; 0x14
			texto1 = "Step " + float2string (step);
    b232:	27 e3       	ldi	r18, 0x37	; 55
    b234:	c2 2e       	mov	r12, r18
    b236:	d1 2c       	mov	r13, r1
    b238:	cc 0e       	add	r12, r28
    b23a:	dd 1e       	adc	r13, r29
    b23c:	c6 01       	movw	r24, r12
    b23e:	67 eb       	ldi	r22, 0xB7	; 183
    b240:	72 e0       	ldi	r23, 0x02	; 2
    b242:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    b246:	91 e3       	ldi	r25, 0x31	; 49
    b248:	e9 2e       	mov	r14, r25
    b24a:	f1 2c       	mov	r15, r1
    b24c:	ec 0e       	add	r14, r28
    b24e:	fd 1e       	adc	r15, r29
    b250:	f3 01       	movw	r30, r6
    b252:	41 89       	ldd	r20, Z+17	; 0x11
    b254:	52 89       	ldd	r21, Z+18	; 0x12
    b256:	63 89       	ldd	r22, Z+19	; 0x13
    b258:	74 89       	ldd	r23, Z+20	; 0x14
    b25a:	c7 01       	movw	r24, r14
    b25c:	0e 94 8b 72 	call	0xe516	; 0xe516 <_Z12float2stringf>
    b260:	8e 01       	movw	r16, r28
    b262:	03 5c       	subi	r16, 0xC3	; 195
    b264:	1f 4f       	sbci	r17, 0xFF	; 255
    b266:	5d c0       	rjmp	.+186    	; 0xb322 <_ZN13RemoteControl10editar_posEh+0x502>
			retardo = true;
			break;
			
		case RC_CH_DN:
			if (pantalla.isBusy()) {break;}
    b268:	83 ea       	ldi	r24, 0xA3	; 163
    b26a:	93 e1       	ldi	r25, 0x13	; 19
    b26c:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    b270:	88 23       	and	r24, r24
    b272:	09 f0       	breq	.+2      	; 0xb276 <_ZN13RemoteControl10editar_posEh+0x456>
    b274:	6c c0       	rjmp	.+216    	; 0xb34e <_ZN13RemoteControl10editar_posEh+0x52e>
			if (!isMoving) {step = constrain (step-inc, .5, 5);}
    b276:	f3 01       	movw	r30, r6
    b278:	85 a1       	ldd	r24, Z+37	; 0x25
    b27a:	88 23       	and	r24, r24
    b27c:	c1 f5       	brne	.+112    	; 0xb2ee <_ZN13RemoteControl10editar_posEh+0x4ce>
    b27e:	61 89       	ldd	r22, Z+17	; 0x11
    b280:	72 89       	ldd	r23, Z+18	; 0x12
    b282:	83 89       	ldd	r24, Z+19	; 0x13
    b284:	94 89       	ldd	r25, Z+20	; 0x14
    b286:	21 a1       	ldd	r18, Z+33	; 0x21
    b288:	32 a1       	ldd	r19, Z+34	; 0x22
    b28a:	43 a1       	ldd	r20, Z+35	; 0x23
    b28c:	54 a1       	ldd	r21, Z+36	; 0x24
    b28e:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    b292:	7b 01       	movw	r14, r22
    b294:	8c 01       	movw	r16, r24
    b296:	20 e0       	ldi	r18, 0x00	; 0
    b298:	30 e0       	ldi	r19, 0x00	; 0
    b29a:	40 e0       	ldi	r20, 0x00	; 0
    b29c:	5f e3       	ldi	r21, 0x3F	; 63
    b29e:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    b2a2:	88 23       	and	r24, r24
    b2a4:	5c f4       	brge	.+22     	; 0xb2bc <_ZN13RemoteControl10editar_posEh+0x49c>
    b2a6:	0f 2e       	mov	r0, r31
    b2a8:	f0 e0       	ldi	r31, 0x00	; 0
    b2aa:	ef 2e       	mov	r14, r31
    b2ac:	f0 e0       	ldi	r31, 0x00	; 0
    b2ae:	ff 2e       	mov	r15, r31
    b2b0:	f0 e0       	ldi	r31, 0x00	; 0
    b2b2:	0f 2f       	mov	r16, r31
    b2b4:	ff e3       	ldi	r31, 0x3F	; 63
    b2b6:	1f 2f       	mov	r17, r31
    b2b8:	f0 2d       	mov	r31, r0
    b2ba:	14 c0       	rjmp	.+40     	; 0xb2e4 <_ZN13RemoteControl10editar_posEh+0x4c4>
    b2bc:	c8 01       	movw	r24, r16
    b2be:	b7 01       	movw	r22, r14
    b2c0:	20 e0       	ldi	r18, 0x00	; 0
    b2c2:	30 e0       	ldi	r19, 0x00	; 0
    b2c4:	40 ea       	ldi	r20, 0xA0	; 160
    b2c6:	50 e4       	ldi	r21, 0x40	; 64
    b2c8:	0e 94 8c 7c 	call	0xf918	; 0xf918 <__gesf2>
    b2cc:	18 16       	cp	r1, r24
    b2ce:	54 f4       	brge	.+20     	; 0xb2e4 <_ZN13RemoteControl10editar_posEh+0x4c4>
    b2d0:	0f 2e       	mov	r0, r31
    b2d2:	f0 e0       	ldi	r31, 0x00	; 0
    b2d4:	ef 2e       	mov	r14, r31
    b2d6:	f0 e0       	ldi	r31, 0x00	; 0
    b2d8:	ff 2e       	mov	r15, r31
    b2da:	f0 ea       	ldi	r31, 0xA0	; 160
    b2dc:	0f 2f       	mov	r16, r31
    b2de:	f0 e4       	ldi	r31, 0x40	; 64
    b2e0:	1f 2f       	mov	r17, r31
    b2e2:	f0 2d       	mov	r31, r0
    b2e4:	f3 01       	movw	r30, r6
    b2e6:	e1 8a       	std	Z+17, r14	; 0x11
    b2e8:	f2 8a       	std	Z+18, r15	; 0x12
    b2ea:	03 8b       	std	Z+19, r16	; 0x13
    b2ec:	14 8b       	std	Z+20, r17	; 0x14
			texto1 = "Step " + float2string (step);
    b2ee:	89 e4       	ldi	r24, 0x49	; 73
    b2f0:	c8 2e       	mov	r12, r24
    b2f2:	d1 2c       	mov	r13, r1
    b2f4:	cc 0e       	add	r12, r28
    b2f6:	dd 1e       	adc	r13, r29
    b2f8:	c6 01       	movw	r24, r12
    b2fa:	67 eb       	ldi	r22, 0xB7	; 183
    b2fc:	72 e0       	ldi	r23, 0x02	; 2
    b2fe:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    b302:	03 e4       	ldi	r16, 0x43	; 67
    b304:	e0 2e       	mov	r14, r16
    b306:	f1 2c       	mov	r15, r1
    b308:	ec 0e       	add	r14, r28
    b30a:	fd 1e       	adc	r15, r29
    b30c:	f3 01       	movw	r30, r6
    b30e:	41 89       	ldd	r20, Z+17	; 0x11
    b310:	52 89       	ldd	r21, Z+18	; 0x12
    b312:	63 89       	ldd	r22, Z+19	; 0x13
    b314:	74 89       	ldd	r23, Z+20	; 0x14
    b316:	c7 01       	movw	r24, r14
    b318:	0e 94 8b 72 	call	0xe516	; 0xe516 <_Z12float2stringf>
    b31c:	8e 01       	movw	r16, r28
    b31e:	01 5b       	subi	r16, 0xB1	; 177
    b320:	1f 4f       	sbci	r17, 0xFF	; 255
    b322:	c8 01       	movw	r24, r16
    b324:	b6 01       	movw	r22, r12
    b326:	a7 01       	movw	r20, r14
    b328:	0e 94 98 32 	call	0x6530	; 0x6530 <_Zpl6StringRKS_>
    b32c:	c3 01       	movw	r24, r6
    b32e:	88 96       	adiw	r24, 0x28	; 40
    b330:	b8 01       	movw	r22, r16
    b332:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    b336:	c8 01       	movw	r24, r16
    b338:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    b33c:	c7 01       	movw	r24, r14
    b33e:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    b342:	c6 01       	movw	r24, r12
    b344:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			retardo = true;
    b348:	81 e0       	ldi	r24, 0x01	; 1
    b34a:	f3 01       	movw	r30, r6
    b34c:	86 ab       	std	Z+54, r24	; 0x36
			break;
			
	}
	
}
    b34e:	c4 59       	subi	r28, 0x94	; 148
    b350:	df 4f       	sbci	r29, 0xFF	; 255
    b352:	0f b6       	in	r0, 0x3f	; 63
    b354:	f8 94       	cli
    b356:	de bf       	out	0x3e, r29	; 62
    b358:	0f be       	out	0x3f, r0	; 63
    b35a:	cd bf       	out	0x3d, r28	; 61
    b35c:	cf 91       	pop	r28
    b35e:	df 91       	pop	r29
    b360:	1f 91       	pop	r17
    b362:	0f 91       	pop	r16
    b364:	ff 90       	pop	r15
    b366:	ef 90       	pop	r14
    b368:	df 90       	pop	r13
    b36a:	cf 90       	pop	r12
    b36c:	bf 90       	pop	r11
    b36e:	af 90       	pop	r10
    b370:	9f 90       	pop	r9
    b372:	8f 90       	pop	r8
    b374:	7f 90       	pop	r7
    b376:	6f 90       	pop	r6
    b378:	08 95       	ret

0000b37a <_ZN13RemoteControl10rotacionesEh>:
			break;
	}

}

void RemoteControl::rotaciones (byte comando) {
    b37a:	2f 92       	push	r2
    b37c:	3f 92       	push	r3
    b37e:	4f 92       	push	r4
    b380:	5f 92       	push	r5
    b382:	6f 92       	push	r6
    b384:	7f 92       	push	r7
    b386:	8f 92       	push	r8
    b388:	9f 92       	push	r9
    b38a:	af 92       	push	r10
    b38c:	bf 92       	push	r11
    b38e:	cf 92       	push	r12
    b390:	df 92       	push	r13
    b392:	ef 92       	push	r14
    b394:	ff 92       	push	r15
    b396:	0f 93       	push	r16
    b398:	1f 93       	push	r17
    b39a:	df 93       	push	r29
    b39c:	cf 93       	push	r28
    b39e:	cd b7       	in	r28, 0x3d	; 61
    b3a0:	de b7       	in	r29, 0x3e	; 62
    b3a2:	c2 57       	subi	r28, 0x72	; 114
    b3a4:	d0 40       	sbci	r29, 0x00	; 0
    b3a6:	0f b6       	in	r0, 0x3f	; 63
    b3a8:	f8 94       	cli
    b3aa:	de bf       	out	0x3e, r29	; 62
    b3ac:	0f be       	out	0x3f, r0	; 63
    b3ae:	cd bf       	out	0x3d, r28	; 61
    b3b0:	1c 01       	movw	r2, r24
	
	switch (comando) {
    b3b2:	60 35       	cpi	r22, 0x50	; 80
    b3b4:	c8 f4       	brcc	.+50     	; 0xb3e8 <_ZN13RemoteControl10rotacionesEh+0x6e>
    b3b6:	6e 34       	cpi	r22, 0x4E	; 78
    b3b8:	08 f0       	brcs	.+2      	; 0xb3bc <_ZN13RemoteControl10rotacionesEh+0x42>
    b3ba:	fd c0       	rjmp	.+506    	; 0xb5b6 <_ZN13RemoteControl10rotacionesEh+0x23c>
    b3bc:	6a 31       	cpi	r22, 0x1A	; 26
    b3be:	09 f4       	brne	.+2      	; 0xb3c2 <_ZN13RemoteControl10rotacionesEh+0x48>
    b3c0:	04 c2       	rjmp	.+1032   	; 0xb7ca <_ZN13RemoteControl10rotacionesEh+0x450>
    b3c2:	6b 31       	cpi	r22, 0x1B	; 27
    b3c4:	38 f4       	brcc	.+14     	; 0xb3d4 <_ZN13RemoteControl10rotacionesEh+0x5a>
    b3c6:	60 31       	cpi	r22, 0x10	; 16
    b3c8:	09 f4       	brne	.+2      	; 0xb3cc <_ZN13RemoteControl10rotacionesEh+0x52>
    b3ca:	d9 c0       	rjmp	.+434    	; 0xb57e <_ZN13RemoteControl10rotacionesEh+0x204>
    b3cc:	63 31       	cpi	r22, 0x13	; 19
    b3ce:	09 f0       	breq	.+2      	; 0xb3d2 <_ZN13RemoteControl10rotacionesEh+0x58>
    b3d0:	cd c2       	rjmp	.+1434   	; 0xb96c <_ZN13RemoteControl10rotacionesEh+0x5f2>
    b3d2:	d5 c0       	rjmp	.+426    	; 0xb57e <_ZN13RemoteControl10rotacionesEh+0x204>
    b3d4:	6e 31       	cpi	r22, 0x1E	; 30
    b3d6:	09 f4       	brne	.+2      	; 0xb3da <_ZN13RemoteControl10rotacionesEh+0x60>
    b3d8:	56 c2       	rjmp	.+1196   	; 0xb886 <_ZN13RemoteControl10rotacionesEh+0x50c>
    b3da:	6f 31       	cpi	r22, 0x1F	; 31
    b3dc:	09 f4       	brne	.+2      	; 0xb3e0 <_ZN13RemoteControl10rotacionesEh+0x66>
    b3de:	9a c1       	rjmp	.+820    	; 0xb714 <_ZN13RemoteControl10rotacionesEh+0x39a>
    b3e0:	6b 31       	cpi	r22, 0x1B	; 27
    b3e2:	09 f0       	breq	.+2      	; 0xb3e6 <_ZN13RemoteControl10rotacionesEh+0x6c>
    b3e4:	c3 c2       	rjmp	.+1414   	; 0xb96c <_ZN13RemoteControl10rotacionesEh+0x5f2>
    b3e6:	3b c1       	rjmp	.+630    	; 0xb65e <_ZN13RemoteControl10rotacionesEh+0x2e4>
    b3e8:	6d 35       	cpi	r22, 0x5D	; 93
    b3ea:	09 f4       	brne	.+2      	; 0xb3ee <_ZN13RemoteControl10rotacionesEh+0x74>
    b3ec:	8b c0       	rjmp	.+278    	; 0xb504 <_ZN13RemoteControl10rotacionesEh+0x18a>
    b3ee:	6e 35       	cpi	r22, 0x5E	; 94
    b3f0:	38 f4       	brcc	.+14     	; 0xb400 <_ZN13RemoteControl10rotacionesEh+0x86>
    b3f2:	63 35       	cpi	r22, 0x53	; 83
    b3f4:	09 f4       	brne	.+2      	; 0xb3f8 <_ZN13RemoteControl10rotacionesEh+0x7e>
    b3f6:	1e c1       	rjmp	.+572    	; 0xb634 <_ZN13RemoteControl10rotacionesEh+0x2ba>
    b3f8:	6c 35       	cpi	r22, 0x5C	; 92
    b3fa:	09 f0       	breq	.+2      	; 0xb3fe <_ZN13RemoteControl10rotacionesEh+0x84>
    b3fc:	b7 c2       	rjmp	.+1390   	; 0xb96c <_ZN13RemoteControl10rotacionesEh+0x5f2>
    b3fe:	07 c0       	rjmp	.+14     	; 0xb40e <_ZN13RemoteControl10rotacionesEh+0x94>
    b400:	6e 35       	cpi	r22, 0x5E	; 94
    b402:	09 f4       	brne	.+2      	; 0xb406 <_ZN13RemoteControl10rotacionesEh+0x8c>
    b404:	63 c0       	rjmp	.+198    	; 0xb4cc <_ZN13RemoteControl10rotacionesEh+0x152>
    b406:	6f 35       	cpi	r22, 0x5F	; 95
    b408:	09 f0       	breq	.+2      	; 0xb40c <_ZN13RemoteControl10rotacionesEh+0x92>
    b40a:	b0 c2       	rjmp	.+1376   	; 0xb96c <_ZN13RemoteControl10rotacionesEh+0x5f2>
    b40c:	1c c0       	rjmp	.+56     	; 0xb446 <_ZN13RemoteControl10rotacionesEh+0xcc>
		case RC_UP:
			texto1 = "|";
    b40e:	8e 01       	movw	r16, r28
    b410:	0f 5f       	subi	r16, 0xFF	; 255
    b412:	1f 4f       	sbci	r17, 0xFF	; 255
    b414:	c8 01       	movw	r24, r16
    b416:	6d eb       	ldi	r22, 0xBD	; 189
    b418:	72 e0       	ldi	r23, 0x02	; 2
    b41a:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    b41e:	c1 01       	movw	r24, r2
    b420:	88 96       	adiw	r24, 0x28	; 40
    b422:	b8 01       	movw	r22, r16
    b424:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    b428:	c8 01       	movw	r24, r16
    b42a:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			mov.rotation (-step/15, 0, 0, step/(velocidad*TICK));  // radio = 15
    b42e:	f1 01       	movw	r30, r2
    b430:	e1 88       	ldd	r14, Z+17	; 0x11
    b432:	f2 88       	ldd	r15, Z+18	; 0x12
    b434:	03 89       	ldd	r16, Z+19	; 0x13
    b436:	14 89       	ldd	r17, Z+20	; 0x14
    b438:	c8 01       	movw	r24, r16
    b43a:	b7 01       	movw	r22, r14
    b43c:	20 e0       	ldi	r18, 0x00	; 0
    b43e:	30 e0       	ldi	r19, 0x00	; 0
    b440:	40 e7       	ldi	r20, 0x70	; 112
    b442:	51 ec       	ldi	r21, 0xC1	; 193
    b444:	1b c0       	rjmp	.+54     	; 0xb47c <_ZN13RemoteControl10rotacionesEh+0x102>
			break;
		
		case RC_DOWN:
			texto1 = "^";
    b446:	8e 01       	movw	r16, r28
    b448:	09 5f       	subi	r16, 0xF9	; 249
    b44a:	1f 4f       	sbci	r17, 0xFF	; 255
    b44c:	c8 01       	movw	r24, r16
    b44e:	6f eb       	ldi	r22, 0xBF	; 191
    b450:	72 e0       	ldi	r23, 0x02	; 2
    b452:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    b456:	c1 01       	movw	r24, r2
    b458:	88 96       	adiw	r24, 0x28	; 40
    b45a:	b8 01       	movw	r22, r16
    b45c:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    b460:	c8 01       	movw	r24, r16
    b462:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			mov.rotation (step/15, 0, 0, step/(velocidad*TICK));  // radio = 15
    b466:	f1 01       	movw	r30, r2
    b468:	e1 88       	ldd	r14, Z+17	; 0x11
    b46a:	f2 88       	ldd	r15, Z+18	; 0x12
    b46c:	03 89       	ldd	r16, Z+19	; 0x13
    b46e:	14 89       	ldd	r17, Z+20	; 0x14
    b470:	c8 01       	movw	r24, r16
    b472:	b7 01       	movw	r22, r14
    b474:	20 e0       	ldi	r18, 0x00	; 0
    b476:	30 e0       	ldi	r19, 0x00	; 0
    b478:	40 e7       	ldi	r20, 0x70	; 112
    b47a:	51 e4       	ldi	r21, 0x41	; 65
    b47c:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    b480:	2b 01       	movw	r4, r22
    b482:	3c 01       	movw	r6, r24
    b484:	f1 01       	movw	r30, r2
    b486:	60 81       	ld	r22, Z
    b488:	71 81       	ldd	r23, Z+1	; 0x01
    b48a:	82 81       	ldd	r24, Z+2	; 0x02
    b48c:	93 81       	ldd	r25, Z+3	; 0x03
    b48e:	2f e6       	ldi	r18, 0x6F	; 111
    b490:	32 e1       	ldi	r19, 0x12	; 18
    b492:	43 e8       	ldi	r20, 0x83	; 131
    b494:	5b e3       	ldi	r21, 0x3B	; 59
    b496:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    b49a:	9b 01       	movw	r18, r22
    b49c:	ac 01       	movw	r20, r24
    b49e:	c8 01       	movw	r24, r16
    b4a0:	b7 01       	movw	r22, r14
    b4a2:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    b4a6:	0e 94 30 7b 	call	0xf660	; 0xf660 <__fixsfsi>
    b4aa:	4b 01       	movw	r8, r22
    b4ac:	5c 01       	movw	r10, r24
    b4ae:	85 ee       	ldi	r24, 0xE5	; 229
    b4b0:	9f e0       	ldi	r25, 0x0F	; 15
    b4b2:	b3 01       	movw	r22, r6
    b4b4:	a2 01       	movw	r20, r4
    b4b6:	00 e0       	ldi	r16, 0x00	; 0
    b4b8:	10 e0       	ldi	r17, 0x00	; 0
    b4ba:	20 e0       	ldi	r18, 0x00	; 0
    b4bc:	30 e0       	ldi	r19, 0x00	; 0
    b4be:	68 01       	movw	r12, r16
    b4c0:	79 01       	movw	r14, r18
    b4c2:	54 01       	movw	r10, r8
    b4c4:	88 24       	eor	r8, r8
    b4c6:	0e 94 ae 13 	call	0x275c	; 0x275c <_ZN10Movimiento8rotationEfffih>
    b4ca:	50 c2       	rjmp	.+1184   	; 0xb96c <_ZN13RemoteControl10rotacionesEh+0x5f2>
			break;
		
		case RC_RIGHT:
			texto1 = "<";
    b4cc:	8e 01       	movw	r16, r28
    b4ce:	03 5f       	subi	r16, 0xF3	; 243
    b4d0:	1f 4f       	sbci	r17, 0xFF	; 255
    b4d2:	c8 01       	movw	r24, r16
    b4d4:	61 ec       	ldi	r22, 0xC1	; 193
    b4d6:	72 e0       	ldi	r23, 0x02	; 2
    b4d8:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    b4dc:	c1 01       	movw	r24, r2
    b4de:	88 96       	adiw	r24, 0x28	; 40
    b4e0:	b8 01       	movw	r22, r16
    b4e2:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    b4e6:	c8 01       	movw	r24, r16
    b4e8:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			mov.rotation (0, 0, step/15, step/(velocidad*TICK));  // radio = 15
    b4ec:	f1 01       	movw	r30, r2
    b4ee:	81 88       	ldd	r8, Z+17	; 0x11
    b4f0:	92 88       	ldd	r9, Z+18	; 0x12
    b4f2:	a3 88       	ldd	r10, Z+19	; 0x13
    b4f4:	b4 88       	ldd	r11, Z+20	; 0x14
    b4f6:	c5 01       	movw	r24, r10
    b4f8:	b4 01       	movw	r22, r8
    b4fa:	20 e0       	ldi	r18, 0x00	; 0
    b4fc:	30 e0       	ldi	r19, 0x00	; 0
    b4fe:	40 e7       	ldi	r20, 0x70	; 112
    b500:	51 e4       	ldi	r21, 0x41	; 65
    b502:	1b c0       	rjmp	.+54     	; 0xb53a <_ZN13RemoteControl10rotacionesEh+0x1c0>
			break;
	
		case RC_LEFT:
			texto1 = ">";
    b504:	8e 01       	movw	r16, r28
    b506:	0d 5e       	subi	r16, 0xED	; 237
    b508:	1f 4f       	sbci	r17, 0xFF	; 255
    b50a:	c8 01       	movw	r24, r16
    b50c:	63 ec       	ldi	r22, 0xC3	; 195
    b50e:	72 e0       	ldi	r23, 0x02	; 2
    b510:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    b514:	c1 01       	movw	r24, r2
    b516:	88 96       	adiw	r24, 0x28	; 40
    b518:	b8 01       	movw	r22, r16
    b51a:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    b51e:	c8 01       	movw	r24, r16
    b520:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			mov.rotation (0, 0, -step/15, step/(velocidad*TICK));  // radio = 15
    b524:	f1 01       	movw	r30, r2
    b526:	81 88       	ldd	r8, Z+17	; 0x11
    b528:	92 88       	ldd	r9, Z+18	; 0x12
    b52a:	a3 88       	ldd	r10, Z+19	; 0x13
    b52c:	b4 88       	ldd	r11, Z+20	; 0x14
    b52e:	c5 01       	movw	r24, r10
    b530:	b4 01       	movw	r22, r8
    b532:	20 e0       	ldi	r18, 0x00	; 0
    b534:	30 e0       	ldi	r19, 0x00	; 0
    b536:	40 e7       	ldi	r20, 0x70	; 112
    b538:	51 ec       	ldi	r21, 0xC1	; 193
    b53a:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    b53e:	6b 01       	movw	r12, r22
    b540:	7c 01       	movw	r14, r24
    b542:	f1 01       	movw	r30, r2
    b544:	60 81       	ld	r22, Z
    b546:	71 81       	ldd	r23, Z+1	; 0x01
    b548:	82 81       	ldd	r24, Z+2	; 0x02
    b54a:	93 81       	ldd	r25, Z+3	; 0x03
    b54c:	2f e6       	ldi	r18, 0x6F	; 111
    b54e:	32 e1       	ldi	r19, 0x12	; 18
    b550:	43 e8       	ldi	r20, 0x83	; 131
    b552:	5b e3       	ldi	r21, 0x3B	; 59
    b554:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    b558:	9b 01       	movw	r18, r22
    b55a:	ac 01       	movw	r20, r24
    b55c:	c5 01       	movw	r24, r10
    b55e:	b4 01       	movw	r22, r8
    b560:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    b564:	0e 94 30 7b 	call	0xf660	; 0xf660 <__fixsfsi>
    b568:	4b 01       	movw	r8, r22
    b56a:	5c 01       	movw	r10, r24
    b56c:	85 ee       	ldi	r24, 0xE5	; 229
    b56e:	9f e0       	ldi	r25, 0x0F	; 15
    b570:	40 e0       	ldi	r20, 0x00	; 0
    b572:	50 e0       	ldi	r21, 0x00	; 0
    b574:	60 e0       	ldi	r22, 0x00	; 0
    b576:	70 e0       	ldi	r23, 0x00	; 0
    b578:	8a 01       	movw	r16, r20
    b57a:	9b 01       	movw	r18, r22
    b57c:	a2 cf       	rjmp	.-188    	; 0xb4c2 <_ZN13RemoteControl10rotacionesEh+0x148>
			break;

		case RC_MENU: case RC_MTS:
			texto1 = "h-";
    b57e:	8e 01       	movw	r16, r28
    b580:	07 5e       	subi	r16, 0xE7	; 231
    b582:	1f 4f       	sbci	r17, 0xFF	; 255
    b584:	c8 01       	movw	r24, r16
    b586:	65 ed       	ldi	r22, 0xD5	; 213
    b588:	72 e0       	ldi	r23, 0x02	; 2
    b58a:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    b58e:	c1 01       	movw	r24, r2
    b590:	88 96       	adiw	r24, 0x28	; 40
    b592:	b8 01       	movw	r22, r16
    b594:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    b598:	c8 01       	movw	r24, r16
    b59a:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			mov.rotation (0, step/15, 0, step/(velocidad*TICK));  // radio = 15
    b59e:	f1 01       	movw	r30, r2
    b5a0:	e1 88       	ldd	r14, Z+17	; 0x11
    b5a2:	f2 88       	ldd	r15, Z+18	; 0x12
    b5a4:	03 89       	ldd	r16, Z+19	; 0x13
    b5a6:	14 89       	ldd	r17, Z+20	; 0x14
    b5a8:	c8 01       	movw	r24, r16
    b5aa:	b7 01       	movw	r22, r14
    b5ac:	20 e0       	ldi	r18, 0x00	; 0
    b5ae:	30 e0       	ldi	r19, 0x00	; 0
    b5b0:	40 e7       	ldi	r20, 0x70	; 112
    b5b2:	51 e4       	ldi	r21, 0x41	; 65
    b5b4:	1b c0       	rjmp	.+54     	; 0xb5ec <_ZN13RemoteControl10rotacionesEh+0x272>
			break;
			
		case RC_EXIT: case RC_CCTTX:
			texto1 = "h+";
    b5b6:	8e 01       	movw	r16, r28
    b5b8:	01 5e       	subi	r16, 0xE1	; 225
    b5ba:	1f 4f       	sbci	r17, 0xFF	; 255
    b5bc:	c8 01       	movw	r24, r16
    b5be:	68 ed       	ldi	r22, 0xD8	; 216
    b5c0:	72 e0       	ldi	r23, 0x02	; 2
    b5c2:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    b5c6:	c1 01       	movw	r24, r2
    b5c8:	88 96       	adiw	r24, 0x28	; 40
    b5ca:	b8 01       	movw	r22, r16
    b5cc:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    b5d0:	c8 01       	movw	r24, r16
    b5d2:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			mov.rotation (0, -step/15, 0, step/(velocidad*TICK));  // radio = 15
    b5d6:	f1 01       	movw	r30, r2
    b5d8:	e1 88       	ldd	r14, Z+17	; 0x11
    b5da:	f2 88       	ldd	r15, Z+18	; 0x12
    b5dc:	03 89       	ldd	r16, Z+19	; 0x13
    b5de:	14 89       	ldd	r17, Z+20	; 0x14
    b5e0:	c8 01       	movw	r24, r16
    b5e2:	b7 01       	movw	r22, r14
    b5e4:	20 e0       	ldi	r18, 0x00	; 0
    b5e6:	30 e0       	ldi	r19, 0x00	; 0
    b5e8:	40 e7       	ldi	r20, 0x70	; 112
    b5ea:	51 ec       	ldi	r21, 0xC1	; 193
    b5ec:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    b5f0:	2b 01       	movw	r4, r22
    b5f2:	3c 01       	movw	r6, r24
    b5f4:	f1 01       	movw	r30, r2
    b5f6:	60 81       	ld	r22, Z
    b5f8:	71 81       	ldd	r23, Z+1	; 0x01
    b5fa:	82 81       	ldd	r24, Z+2	; 0x02
    b5fc:	93 81       	ldd	r25, Z+3	; 0x03
    b5fe:	2f e6       	ldi	r18, 0x6F	; 111
    b600:	32 e1       	ldi	r19, 0x12	; 18
    b602:	43 e8       	ldi	r20, 0x83	; 131
    b604:	5b e3       	ldi	r21, 0x3B	; 59
    b606:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    b60a:	9b 01       	movw	r18, r22
    b60c:	ac 01       	movw	r20, r24
    b60e:	c8 01       	movw	r24, r16
    b610:	b7 01       	movw	r22, r14
    b612:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    b616:	0e 94 30 7b 	call	0xf660	; 0xf660 <__fixsfsi>
    b61a:	4b 01       	movw	r8, r22
    b61c:	5c 01       	movw	r10, r24
    b61e:	85 ee       	ldi	r24, 0xE5	; 229
    b620:	9f e0       	ldi	r25, 0x0F	; 15
    b622:	40 e0       	ldi	r20, 0x00	; 0
    b624:	50 e0       	ldi	r21, 0x00	; 0
    b626:	60 e0       	ldi	r22, 0x00	; 0
    b628:	70 e0       	ldi	r23, 0x00	; 0
    b62a:	93 01       	movw	r18, r6
    b62c:	82 01       	movw	r16, r4
    b62e:	6a 01       	movw	r12, r20
    b630:	7b 01       	movw	r14, r22
    b632:	47 cf       	rjmp	.-370    	; 0xb4c2 <_ZN13RemoteControl10rotacionesEh+0x148>
			break;
			
		// de acá al final es exactamente lo mismo que "traslaciones"... lo de arriba es bastante parecido también
		case RC_ENTER1:
			texto1 = "STORE";
    b634:	8e 01       	movw	r16, r28
    b636:	0b 5d       	subi	r16, 0xDB	; 219
    b638:	1f 4f       	sbci	r17, 0xFF	; 255
    b63a:	c8 01       	movw	r24, r16
    b63c:	6b ed       	ldi	r22, 0xDB	; 219
    b63e:	72 e0       	ldi	r23, 0x02	; 2
    b640:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    b644:	c1 01       	movw	r24, r2
    b646:	88 96       	adiw	r24, 0x28	; 40
    b648:	b8 01       	movw	r22, r16
    b64a:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    b64e:	c8 01       	movw	r24, r16
    b650:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			mov.actual_pos_ref ();
    b654:	85 ee       	ldi	r24, 0xE5	; 229
    b656:	9f e0       	ldi	r25, 0x0F	; 15
    b658:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <_ZN10Movimiento14actual_pos_refEv>
    b65c:	87 c1       	rjmp	.+782    	; 0xb96c <_ZN13RemoteControl10rotacionesEh+0x5f2>
			break;
			
		case RC_VOL_UP:
			if (pantalla.isBusy()) {break;}
    b65e:	83 ea       	ldi	r24, 0xA3	; 163
    b660:	93 e1       	ldi	r25, 0x13	; 19
    b662:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    b666:	88 23       	and	r24, r24
    b668:	09 f0       	breq	.+2      	; 0xb66c <_ZN13RemoteControl10rotacionesEh+0x2f2>
    b66a:	80 c1       	rjmp	.+768    	; 0xb96c <_ZN13RemoteControl10rotacionesEh+0x5f2>
			velocidad = constrain (velocidad+inc, 1, 50);
    b66c:	f1 01       	movw	r30, r2
    b66e:	60 81       	ld	r22, Z
    b670:	71 81       	ldd	r23, Z+1	; 0x01
    b672:	82 81       	ldd	r24, Z+2	; 0x02
    b674:	93 81       	ldd	r25, Z+3	; 0x03
    b676:	21 a1       	ldd	r18, Z+33	; 0x21
    b678:	32 a1       	ldd	r19, Z+34	; 0x22
    b67a:	43 a1       	ldd	r20, Z+35	; 0x23
    b67c:	54 a1       	ldd	r21, Z+36	; 0x24
    b67e:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    b682:	7b 01       	movw	r14, r22
    b684:	8c 01       	movw	r16, r24
    b686:	20 e0       	ldi	r18, 0x00	; 0
    b688:	30 e0       	ldi	r19, 0x00	; 0
    b68a:	40 e8       	ldi	r20, 0x80	; 128
    b68c:	5f e3       	ldi	r21, 0x3F	; 63
    b68e:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    b692:	88 23       	and	r24, r24
    b694:	5c f4       	brge	.+22     	; 0xb6ac <_ZN13RemoteControl10rotacionesEh+0x332>
    b696:	0f 2e       	mov	r0, r31
    b698:	f0 e0       	ldi	r31, 0x00	; 0
    b69a:	ef 2e       	mov	r14, r31
    b69c:	f0 e0       	ldi	r31, 0x00	; 0
    b69e:	ff 2e       	mov	r15, r31
    b6a0:	f0 e8       	ldi	r31, 0x80	; 128
    b6a2:	0f 2f       	mov	r16, r31
    b6a4:	ff e3       	ldi	r31, 0x3F	; 63
    b6a6:	1f 2f       	mov	r17, r31
    b6a8:	f0 2d       	mov	r31, r0
    b6aa:	14 c0       	rjmp	.+40     	; 0xb6d4 <_ZN13RemoteControl10rotacionesEh+0x35a>
    b6ac:	c8 01       	movw	r24, r16
    b6ae:	b7 01       	movw	r22, r14
    b6b0:	20 e0       	ldi	r18, 0x00	; 0
    b6b2:	30 e0       	ldi	r19, 0x00	; 0
    b6b4:	48 e4       	ldi	r20, 0x48	; 72
    b6b6:	52 e4       	ldi	r21, 0x42	; 66
    b6b8:	0e 94 8c 7c 	call	0xf918	; 0xf918 <__gesf2>
    b6bc:	18 16       	cp	r1, r24
    b6be:	54 f4       	brge	.+20     	; 0xb6d4 <_ZN13RemoteControl10rotacionesEh+0x35a>
    b6c0:	0f 2e       	mov	r0, r31
    b6c2:	f0 e0       	ldi	r31, 0x00	; 0
    b6c4:	ef 2e       	mov	r14, r31
    b6c6:	f0 e0       	ldi	r31, 0x00	; 0
    b6c8:	ff 2e       	mov	r15, r31
    b6ca:	f8 e4       	ldi	r31, 0x48	; 72
    b6cc:	0f 2f       	mov	r16, r31
    b6ce:	f2 e4       	ldi	r31, 0x42	; 66
    b6d0:	1f 2f       	mov	r17, r31
    b6d2:	f0 2d       	mov	r31, r0
    b6d4:	f1 01       	movw	r30, r2
    b6d6:	e0 82       	st	Z, r14
    b6d8:	f1 82       	std	Z+1, r15	; 0x01
    b6da:	02 83       	std	Z+2, r16	; 0x02
    b6dc:	13 83       	std	Z+3, r17	; 0x03
			texto1 = "Vel " + float2string (velocidad);
    b6de:	11 e3       	ldi	r17, 0x31	; 49
    b6e0:	c1 2e       	mov	r12, r17
    b6e2:	d1 2c       	mov	r13, r1
    b6e4:	cc 0e       	add	r12, r28
    b6e6:	dd 1e       	adc	r13, r29
    b6e8:	c6 01       	movw	r24, r12
    b6ea:	61 ee       	ldi	r22, 0xE1	; 225
    b6ec:	72 e0       	ldi	r23, 0x02	; 2
    b6ee:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    b6f2:	bb e2       	ldi	r27, 0x2B	; 43
    b6f4:	eb 2e       	mov	r14, r27
    b6f6:	f1 2c       	mov	r15, r1
    b6f8:	ec 0e       	add	r14, r28
    b6fa:	fd 1e       	adc	r15, r29
    b6fc:	f1 01       	movw	r30, r2
    b6fe:	40 81       	ld	r20, Z
    b700:	51 81       	ldd	r21, Z+1	; 0x01
    b702:	62 81       	ldd	r22, Z+2	; 0x02
    b704:	73 81       	ldd	r23, Z+3	; 0x03
    b706:	c7 01       	movw	r24, r14
    b708:	0e 94 8b 72 	call	0xe516	; 0xe516 <_Z12float2stringf>
    b70c:	8e 01       	movw	r16, r28
    b70e:	09 5c       	subi	r16, 0xC9	; 201
    b710:	1f 4f       	sbci	r17, 0xFF	; 255
    b712:	16 c1       	rjmp	.+556    	; 0xb940 <_ZN13RemoteControl10rotacionesEh+0x5c6>
			retardo = true;
			break;
			
		case RC_VOL_DN:
			if (pantalla.isBusy()) {break;}
    b714:	83 ea       	ldi	r24, 0xA3	; 163
    b716:	93 e1       	ldi	r25, 0x13	; 19
    b718:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    b71c:	88 23       	and	r24, r24
    b71e:	09 f0       	breq	.+2      	; 0xb722 <_ZN13RemoteControl10rotacionesEh+0x3a8>
    b720:	25 c1       	rjmp	.+586    	; 0xb96c <_ZN13RemoteControl10rotacionesEh+0x5f2>
			velocidad = constrain (velocidad-inc, 1, 50);
    b722:	f1 01       	movw	r30, r2
    b724:	60 81       	ld	r22, Z
    b726:	71 81       	ldd	r23, Z+1	; 0x01
    b728:	82 81       	ldd	r24, Z+2	; 0x02
    b72a:	93 81       	ldd	r25, Z+3	; 0x03
    b72c:	21 a1       	ldd	r18, Z+33	; 0x21
    b72e:	32 a1       	ldd	r19, Z+34	; 0x22
    b730:	43 a1       	ldd	r20, Z+35	; 0x23
    b732:	54 a1       	ldd	r21, Z+36	; 0x24
    b734:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    b738:	7b 01       	movw	r14, r22
    b73a:	8c 01       	movw	r16, r24
    b73c:	20 e0       	ldi	r18, 0x00	; 0
    b73e:	30 e0       	ldi	r19, 0x00	; 0
    b740:	40 e8       	ldi	r20, 0x80	; 128
    b742:	5f e3       	ldi	r21, 0x3F	; 63
    b744:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    b748:	88 23       	and	r24, r24
    b74a:	5c f4       	brge	.+22     	; 0xb762 <_ZN13RemoteControl10rotacionesEh+0x3e8>
    b74c:	0f 2e       	mov	r0, r31
    b74e:	f0 e0       	ldi	r31, 0x00	; 0
    b750:	ef 2e       	mov	r14, r31
    b752:	f0 e0       	ldi	r31, 0x00	; 0
    b754:	ff 2e       	mov	r15, r31
    b756:	f0 e8       	ldi	r31, 0x80	; 128
    b758:	0f 2f       	mov	r16, r31
    b75a:	ff e3       	ldi	r31, 0x3F	; 63
    b75c:	1f 2f       	mov	r17, r31
    b75e:	f0 2d       	mov	r31, r0
    b760:	14 c0       	rjmp	.+40     	; 0xb78a <_ZN13RemoteControl10rotacionesEh+0x410>
    b762:	c8 01       	movw	r24, r16
    b764:	b7 01       	movw	r22, r14
    b766:	20 e0       	ldi	r18, 0x00	; 0
    b768:	30 e0       	ldi	r19, 0x00	; 0
    b76a:	48 e4       	ldi	r20, 0x48	; 72
    b76c:	52 e4       	ldi	r21, 0x42	; 66
    b76e:	0e 94 8c 7c 	call	0xf918	; 0xf918 <__gesf2>
    b772:	18 16       	cp	r1, r24
    b774:	54 f4       	brge	.+20     	; 0xb78a <_ZN13RemoteControl10rotacionesEh+0x410>
    b776:	0f 2e       	mov	r0, r31
    b778:	f0 e0       	ldi	r31, 0x00	; 0
    b77a:	ef 2e       	mov	r14, r31
    b77c:	f0 e0       	ldi	r31, 0x00	; 0
    b77e:	ff 2e       	mov	r15, r31
    b780:	f8 e4       	ldi	r31, 0x48	; 72
    b782:	0f 2f       	mov	r16, r31
    b784:	f2 e4       	ldi	r31, 0x42	; 66
    b786:	1f 2f       	mov	r17, r31
    b788:	f0 2d       	mov	r31, r0
    b78a:	f1 01       	movw	r30, r2
    b78c:	e0 82       	st	Z, r14
    b78e:	f1 82       	std	Z+1, r15	; 0x01
    b790:	02 83       	std	Z+2, r16	; 0x02
    b792:	13 83       	std	Z+3, r17	; 0x03
			texto1 = "Vel " + float2string (velocidad);
    b794:	a3 e4       	ldi	r26, 0x43	; 67
    b796:	ca 2e       	mov	r12, r26
    b798:	d1 2c       	mov	r13, r1
    b79a:	cc 0e       	add	r12, r28
    b79c:	dd 1e       	adc	r13, r29
    b79e:	c6 01       	movw	r24, r12
    b7a0:	61 ee       	ldi	r22, 0xE1	; 225
    b7a2:	72 e0       	ldi	r23, 0x02	; 2
    b7a4:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    b7a8:	fd e3       	ldi	r31, 0x3D	; 61
    b7aa:	ef 2e       	mov	r14, r31
    b7ac:	f1 2c       	mov	r15, r1
    b7ae:	ec 0e       	add	r14, r28
    b7b0:	fd 1e       	adc	r15, r29
    b7b2:	f1 01       	movw	r30, r2
    b7b4:	40 81       	ld	r20, Z
    b7b6:	51 81       	ldd	r21, Z+1	; 0x01
    b7b8:	62 81       	ldd	r22, Z+2	; 0x02
    b7ba:	73 81       	ldd	r23, Z+3	; 0x03
    b7bc:	c7 01       	movw	r24, r14
    b7be:	0e 94 8b 72 	call	0xe516	; 0xe516 <_Z12float2stringf>
    b7c2:	8e 01       	movw	r16, r28
    b7c4:	07 5b       	subi	r16, 0xB7	; 183
    b7c6:	1f 4f       	sbci	r17, 0xFF	; 255
    b7c8:	bb c0       	rjmp	.+374    	; 0xb940 <_ZN13RemoteControl10rotacionesEh+0x5c6>
			retardo = true;
			break;
			
		case RC_CH_UP:
			if (pantalla.isBusy()) {break;}
    b7ca:	83 ea       	ldi	r24, 0xA3	; 163
    b7cc:	93 e1       	ldi	r25, 0x13	; 19
    b7ce:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    b7d2:	88 23       	and	r24, r24
    b7d4:	09 f0       	breq	.+2      	; 0xb7d8 <_ZN13RemoteControl10rotacionesEh+0x45e>
    b7d6:	ca c0       	rjmp	.+404    	; 0xb96c <_ZN13RemoteControl10rotacionesEh+0x5f2>
			if (!isMoving) {step = constrain (step+inc, .5, 5);}
    b7d8:	f1 01       	movw	r30, r2
    b7da:	85 a1       	ldd	r24, Z+37	; 0x25
    b7dc:	88 23       	and	r24, r24
    b7de:	c1 f5       	brne	.+112    	; 0xb850 <_ZN13RemoteControl10rotacionesEh+0x4d6>
    b7e0:	61 89       	ldd	r22, Z+17	; 0x11
    b7e2:	72 89       	ldd	r23, Z+18	; 0x12
    b7e4:	83 89       	ldd	r24, Z+19	; 0x13
    b7e6:	94 89       	ldd	r25, Z+20	; 0x14
    b7e8:	21 a1       	ldd	r18, Z+33	; 0x21
    b7ea:	32 a1       	ldd	r19, Z+34	; 0x22
    b7ec:	43 a1       	ldd	r20, Z+35	; 0x23
    b7ee:	54 a1       	ldd	r21, Z+36	; 0x24
    b7f0:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    b7f4:	7b 01       	movw	r14, r22
    b7f6:	8c 01       	movw	r16, r24
    b7f8:	20 e0       	ldi	r18, 0x00	; 0
    b7fa:	30 e0       	ldi	r19, 0x00	; 0
    b7fc:	40 e0       	ldi	r20, 0x00	; 0
    b7fe:	5f e3       	ldi	r21, 0x3F	; 63
    b800:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    b804:	88 23       	and	r24, r24
    b806:	5c f4       	brge	.+22     	; 0xb81e <_ZN13RemoteControl10rotacionesEh+0x4a4>
    b808:	0f 2e       	mov	r0, r31
    b80a:	f0 e0       	ldi	r31, 0x00	; 0
    b80c:	ef 2e       	mov	r14, r31
    b80e:	f0 e0       	ldi	r31, 0x00	; 0
    b810:	ff 2e       	mov	r15, r31
    b812:	f0 e0       	ldi	r31, 0x00	; 0
    b814:	0f 2f       	mov	r16, r31
    b816:	ff e3       	ldi	r31, 0x3F	; 63
    b818:	1f 2f       	mov	r17, r31
    b81a:	f0 2d       	mov	r31, r0
    b81c:	14 c0       	rjmp	.+40     	; 0xb846 <_ZN13RemoteControl10rotacionesEh+0x4cc>
    b81e:	c8 01       	movw	r24, r16
    b820:	b7 01       	movw	r22, r14
    b822:	20 e0       	ldi	r18, 0x00	; 0
    b824:	30 e0       	ldi	r19, 0x00	; 0
    b826:	40 ea       	ldi	r20, 0xA0	; 160
    b828:	50 e4       	ldi	r21, 0x40	; 64
    b82a:	0e 94 8c 7c 	call	0xf918	; 0xf918 <__gesf2>
    b82e:	18 16       	cp	r1, r24
    b830:	54 f4       	brge	.+20     	; 0xb846 <_ZN13RemoteControl10rotacionesEh+0x4cc>
    b832:	0f 2e       	mov	r0, r31
    b834:	f0 e0       	ldi	r31, 0x00	; 0
    b836:	ef 2e       	mov	r14, r31
    b838:	f0 e0       	ldi	r31, 0x00	; 0
    b83a:	ff 2e       	mov	r15, r31
    b83c:	f0 ea       	ldi	r31, 0xA0	; 160
    b83e:	0f 2f       	mov	r16, r31
    b840:	f0 e4       	ldi	r31, 0x40	; 64
    b842:	1f 2f       	mov	r17, r31
    b844:	f0 2d       	mov	r31, r0
    b846:	f1 01       	movw	r30, r2
    b848:	e1 8a       	std	Z+17, r14	; 0x11
    b84a:	f2 8a       	std	Z+18, r15	; 0x12
    b84c:	03 8b       	std	Z+19, r16	; 0x13
    b84e:	14 8b       	std	Z+20, r17	; 0x14
			texto1 = "Step " + float2string (step);
    b850:	e5 e5       	ldi	r30, 0x55	; 85
    b852:	ce 2e       	mov	r12, r30
    b854:	d1 2c       	mov	r13, r1
    b856:	cc 0e       	add	r12, r28
    b858:	dd 1e       	adc	r13, r29
    b85a:	c6 01       	movw	r24, r12
    b85c:	67 eb       	ldi	r22, 0xB7	; 183
    b85e:	72 e0       	ldi	r23, 0x02	; 2
    b860:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    b864:	7f e4       	ldi	r23, 0x4F	; 79
    b866:	e7 2e       	mov	r14, r23
    b868:	f1 2c       	mov	r15, r1
    b86a:	ec 0e       	add	r14, r28
    b86c:	fd 1e       	adc	r15, r29
    b86e:	f1 01       	movw	r30, r2
    b870:	41 89       	ldd	r20, Z+17	; 0x11
    b872:	52 89       	ldd	r21, Z+18	; 0x12
    b874:	63 89       	ldd	r22, Z+19	; 0x13
    b876:	74 89       	ldd	r23, Z+20	; 0x14
    b878:	c7 01       	movw	r24, r14
    b87a:	0e 94 8b 72 	call	0xe516	; 0xe516 <_Z12float2stringf>
    b87e:	8e 01       	movw	r16, r28
    b880:	05 5a       	subi	r16, 0xA5	; 165
    b882:	1f 4f       	sbci	r17, 0xFF	; 255
    b884:	5d c0       	rjmp	.+186    	; 0xb940 <_ZN13RemoteControl10rotacionesEh+0x5c6>
			retardo = true;
			break;
			
		case RC_CH_DN:
			if (pantalla.isBusy()) {break;}
    b886:	83 ea       	ldi	r24, 0xA3	; 163
    b888:	93 e1       	ldi	r25, 0x13	; 19
    b88a:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    b88e:	88 23       	and	r24, r24
    b890:	09 f0       	breq	.+2      	; 0xb894 <_ZN13RemoteControl10rotacionesEh+0x51a>
    b892:	6c c0       	rjmp	.+216    	; 0xb96c <_ZN13RemoteControl10rotacionesEh+0x5f2>
			if (!isMoving) {step = constrain (step-inc, .5, 5);}
    b894:	f1 01       	movw	r30, r2
    b896:	85 a1       	ldd	r24, Z+37	; 0x25
    b898:	88 23       	and	r24, r24
    b89a:	c1 f5       	brne	.+112    	; 0xb90c <_ZN13RemoteControl10rotacionesEh+0x592>
    b89c:	61 89       	ldd	r22, Z+17	; 0x11
    b89e:	72 89       	ldd	r23, Z+18	; 0x12
    b8a0:	83 89       	ldd	r24, Z+19	; 0x13
    b8a2:	94 89       	ldd	r25, Z+20	; 0x14
    b8a4:	21 a1       	ldd	r18, Z+33	; 0x21
    b8a6:	32 a1       	ldd	r19, Z+34	; 0x22
    b8a8:	43 a1       	ldd	r20, Z+35	; 0x23
    b8aa:	54 a1       	ldd	r21, Z+36	; 0x24
    b8ac:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    b8b0:	7b 01       	movw	r14, r22
    b8b2:	8c 01       	movw	r16, r24
    b8b4:	20 e0       	ldi	r18, 0x00	; 0
    b8b6:	30 e0       	ldi	r19, 0x00	; 0
    b8b8:	40 e0       	ldi	r20, 0x00	; 0
    b8ba:	5f e3       	ldi	r21, 0x3F	; 63
    b8bc:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    b8c0:	88 23       	and	r24, r24
    b8c2:	5c f4       	brge	.+22     	; 0xb8da <_ZN13RemoteControl10rotacionesEh+0x560>
    b8c4:	0f 2e       	mov	r0, r31
    b8c6:	f0 e0       	ldi	r31, 0x00	; 0
    b8c8:	ef 2e       	mov	r14, r31
    b8ca:	f0 e0       	ldi	r31, 0x00	; 0
    b8cc:	ff 2e       	mov	r15, r31
    b8ce:	f0 e0       	ldi	r31, 0x00	; 0
    b8d0:	0f 2f       	mov	r16, r31
    b8d2:	ff e3       	ldi	r31, 0x3F	; 63
    b8d4:	1f 2f       	mov	r17, r31
    b8d6:	f0 2d       	mov	r31, r0
    b8d8:	14 c0       	rjmp	.+40     	; 0xb902 <_ZN13RemoteControl10rotacionesEh+0x588>
    b8da:	c8 01       	movw	r24, r16
    b8dc:	b7 01       	movw	r22, r14
    b8de:	20 e0       	ldi	r18, 0x00	; 0
    b8e0:	30 e0       	ldi	r19, 0x00	; 0
    b8e2:	40 ea       	ldi	r20, 0xA0	; 160
    b8e4:	50 e4       	ldi	r21, 0x40	; 64
    b8e6:	0e 94 8c 7c 	call	0xf918	; 0xf918 <__gesf2>
    b8ea:	18 16       	cp	r1, r24
    b8ec:	54 f4       	brge	.+20     	; 0xb902 <_ZN13RemoteControl10rotacionesEh+0x588>
    b8ee:	0f 2e       	mov	r0, r31
    b8f0:	f0 e0       	ldi	r31, 0x00	; 0
    b8f2:	ef 2e       	mov	r14, r31
    b8f4:	f0 e0       	ldi	r31, 0x00	; 0
    b8f6:	ff 2e       	mov	r15, r31
    b8f8:	f0 ea       	ldi	r31, 0xA0	; 160
    b8fa:	0f 2f       	mov	r16, r31
    b8fc:	f0 e4       	ldi	r31, 0x40	; 64
    b8fe:	1f 2f       	mov	r17, r31
    b900:	f0 2d       	mov	r31, r0
    b902:	f1 01       	movw	r30, r2
    b904:	e1 8a       	std	Z+17, r14	; 0x11
    b906:	f2 8a       	std	Z+18, r15	; 0x12
    b908:	03 8b       	std	Z+19, r16	; 0x13
    b90a:	14 8b       	std	Z+20, r17	; 0x14
			texto1 = "Step " + float2string (step);
    b90c:	67 e6       	ldi	r22, 0x67	; 103
    b90e:	c6 2e       	mov	r12, r22
    b910:	d1 2c       	mov	r13, r1
    b912:	cc 0e       	add	r12, r28
    b914:	dd 1e       	adc	r13, r29
    b916:	c6 01       	movw	r24, r12
    b918:	67 eb       	ldi	r22, 0xB7	; 183
    b91a:	72 e0       	ldi	r23, 0x02	; 2
    b91c:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    b920:	51 e6       	ldi	r21, 0x61	; 97
    b922:	e5 2e       	mov	r14, r21
    b924:	f1 2c       	mov	r15, r1
    b926:	ec 0e       	add	r14, r28
    b928:	fd 1e       	adc	r15, r29
    b92a:	f1 01       	movw	r30, r2
    b92c:	41 89       	ldd	r20, Z+17	; 0x11
    b92e:	52 89       	ldd	r21, Z+18	; 0x12
    b930:	63 89       	ldd	r22, Z+19	; 0x13
    b932:	74 89       	ldd	r23, Z+20	; 0x14
    b934:	c7 01       	movw	r24, r14
    b936:	0e 94 8b 72 	call	0xe516	; 0xe516 <_Z12float2stringf>
    b93a:	8e 01       	movw	r16, r28
    b93c:	03 59       	subi	r16, 0x93	; 147
    b93e:	1f 4f       	sbci	r17, 0xFF	; 255
    b940:	c8 01       	movw	r24, r16
    b942:	b6 01       	movw	r22, r12
    b944:	a7 01       	movw	r20, r14
    b946:	0e 94 98 32 	call	0x6530	; 0x6530 <_Zpl6StringRKS_>
    b94a:	c1 01       	movw	r24, r2
    b94c:	88 96       	adiw	r24, 0x28	; 40
    b94e:	b8 01       	movw	r22, r16
    b950:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    b954:	c8 01       	movw	r24, r16
    b956:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    b95a:	c7 01       	movw	r24, r14
    b95c:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    b960:	c6 01       	movw	r24, r12
    b962:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			retardo = true;
    b966:	81 e0       	ldi	r24, 0x01	; 1
    b968:	f1 01       	movw	r30, r2
    b96a:	86 ab       	std	Z+54, r24	; 0x36
			break;
	}
}
    b96c:	ce 58       	subi	r28, 0x8E	; 142
    b96e:	df 4f       	sbci	r29, 0xFF	; 255
    b970:	0f b6       	in	r0, 0x3f	; 63
    b972:	f8 94       	cli
    b974:	de bf       	out	0x3e, r29	; 62
    b976:	0f be       	out	0x3f, r0	; 63
    b978:	cd bf       	out	0x3d, r28	; 61
    b97a:	cf 91       	pop	r28
    b97c:	df 91       	pop	r29
    b97e:	1f 91       	pop	r17
    b980:	0f 91       	pop	r16
    b982:	ff 90       	pop	r15
    b984:	ef 90       	pop	r14
    b986:	df 90       	pop	r13
    b988:	cf 90       	pop	r12
    b98a:	bf 90       	pop	r11
    b98c:	af 90       	pop	r10
    b98e:	9f 90       	pop	r9
    b990:	8f 90       	pop	r8
    b992:	7f 90       	pop	r7
    b994:	6f 90       	pop	r6
    b996:	5f 90       	pop	r5
    b998:	4f 90       	pop	r4
    b99a:	3f 90       	pop	r3
    b99c:	2f 90       	pop	r2
    b99e:	08 95       	ret

0000b9a0 <_ZN13RemoteControl12traslacionesEh>:
			break;
	}

}

void RemoteControl::traslaciones (byte comando) {
    b9a0:	6f 92       	push	r6
    b9a2:	7f 92       	push	r7
    b9a4:	8f 92       	push	r8
    b9a6:	9f 92       	push	r9
    b9a8:	af 92       	push	r10
    b9aa:	bf 92       	push	r11
    b9ac:	cf 92       	push	r12
    b9ae:	df 92       	push	r13
    b9b0:	ef 92       	push	r14
    b9b2:	ff 92       	push	r15
    b9b4:	0f 93       	push	r16
    b9b6:	1f 93       	push	r17
    b9b8:	df 93       	push	r29
    b9ba:	cf 93       	push	r28
    b9bc:	cd b7       	in	r28, 0x3d	; 61
    b9be:	de b7       	in	r29, 0x3e	; 62
    b9c0:	ca 5b       	subi	r28, 0xBA	; 186
    b9c2:	d0 40       	sbci	r29, 0x00	; 0
    b9c4:	0f b6       	in	r0, 0x3f	; 63
    b9c6:	f8 94       	cli
    b9c8:	de bf       	out	0x3e, r29	; 62
    b9ca:	0f be       	out	0x3f, r0	; 63
    b9cc:	cd bf       	out	0x3d, r28	; 61
    b9ce:	4c 01       	movw	r8, r24
	
	switch (comando) {
    b9d0:	6e 34       	cpi	r22, 0x4E	; 78
    b9d2:	09 f4       	brne	.+2      	; 0xb9d6 <_ZN13RemoteControl12traslacionesEh+0x36>
    b9d4:	2a c1       	rjmp	.+596    	; 0xbc2a <_ZN13RemoteControl12traslacionesEh+0x28a>
    b9d6:	6f 34       	cpi	r22, 0x4F	; 79
    b9d8:	b0 f4       	brcc	.+44     	; 0xba06 <_ZN13RemoteControl12traslacionesEh+0x66>
    b9da:	6a 31       	cpi	r22, 0x1A	; 26
    b9dc:	09 f4       	brne	.+2      	; 0xb9e0 <_ZN13RemoteControl12traslacionesEh+0x40>
    b9de:	18 c2       	rjmp	.+1072   	; 0xbe10 <_ZN13RemoteControl12traslacionesEh+0x470>
    b9e0:	6b 31       	cpi	r22, 0x1B	; 27
    b9e2:	38 f4       	brcc	.+14     	; 0xb9f2 <_ZN13RemoteControl12traslacionesEh+0x52>
    b9e4:	60 31       	cpi	r22, 0x10	; 16
    b9e6:	09 f4       	brne	.+2      	; 0xb9ea <_ZN13RemoteControl12traslacionesEh+0x4a>
    b9e8:	20 c1       	rjmp	.+576    	; 0xbc2a <_ZN13RemoteControl12traslacionesEh+0x28a>
    b9ea:	63 31       	cpi	r22, 0x13	; 19
    b9ec:	09 f0       	breq	.+2      	; 0xb9f0 <_ZN13RemoteControl12traslacionesEh+0x50>
    b9ee:	e1 c2       	rjmp	.+1474   	; 0xbfb2 <_ZN13RemoteControl12traslacionesEh+0x612>
    b9f0:	ed c0       	rjmp	.+474    	; 0xbbcc <_ZN13RemoteControl12traslacionesEh+0x22c>
    b9f2:	6e 31       	cpi	r22, 0x1E	; 30
    b9f4:	09 f4       	brne	.+2      	; 0xb9f8 <_ZN13RemoteControl12traslacionesEh+0x58>
    b9f6:	6a c2       	rjmp	.+1236   	; 0xbecc <_ZN13RemoteControl12traslacionesEh+0x52c>
    b9f8:	6f 31       	cpi	r22, 0x1F	; 31
    b9fa:	09 f4       	brne	.+2      	; 0xb9fe <_ZN13RemoteControl12traslacionesEh+0x5e>
    b9fc:	ae c1       	rjmp	.+860    	; 0xbd5a <_ZN13RemoteControl12traslacionesEh+0x3ba>
    b9fe:	6b 31       	cpi	r22, 0x1B	; 27
    ba00:	09 f0       	breq	.+2      	; 0xba04 <_ZN13RemoteControl12traslacionesEh+0x64>
    ba02:	d7 c2       	rjmp	.+1454   	; 0xbfb2 <_ZN13RemoteControl12traslacionesEh+0x612>
    ba04:	4f c1       	rjmp	.+670    	; 0xbca4 <_ZN13RemoteControl12traslacionesEh+0x304>
    ba06:	6c 35       	cpi	r22, 0x5C	; 92
    ba08:	99 f0       	breq	.+38     	; 0xba30 <_ZN13RemoteControl12traslacionesEh+0x90>
    ba0a:	6d 35       	cpi	r22, 0x5D	; 93
    ba0c:	38 f4       	brcc	.+14     	; 0xba1c <_ZN13RemoteControl12traslacionesEh+0x7c>
    ba0e:	6f 34       	cpi	r22, 0x4F	; 79
    ba10:	09 f4       	brne	.+2      	; 0xba14 <_ZN13RemoteControl12traslacionesEh+0x74>
    ba12:	dc c0       	rjmp	.+440    	; 0xbbcc <_ZN13RemoteControl12traslacionesEh+0x22c>
    ba14:	63 35       	cpi	r22, 0x53	; 83
    ba16:	09 f0       	breq	.+2      	; 0xba1a <_ZN13RemoteControl12traslacionesEh+0x7a>
    ba18:	cc c2       	rjmp	.+1432   	; 0xbfb2 <_ZN13RemoteControl12traslacionesEh+0x612>
    ba1a:	2f c1       	rjmp	.+606    	; 0xbc7a <_ZN13RemoteControl12traslacionesEh+0x2da>
    ba1c:	6e 35       	cpi	r22, 0x5E	; 94
    ba1e:	09 f4       	brne	.+2      	; 0xba22 <_ZN13RemoteControl12traslacionesEh+0x82>
    ba20:	8a c0       	rjmp	.+276    	; 0xbb36 <_ZN13RemoteControl12traslacionesEh+0x196>
    ba22:	6e 35       	cpi	r22, 0x5E	; 94
    ba24:	08 f4       	brcc	.+2      	; 0xba28 <_ZN13RemoteControl12traslacionesEh+0x88>
    ba26:	a7 c0       	rjmp	.+334    	; 0xbb76 <_ZN13RemoteControl12traslacionesEh+0x1d6>
    ba28:	6f 35       	cpi	r22, 0x5F	; 95
    ba2a:	09 f0       	breq	.+2      	; 0xba2e <_ZN13RemoteControl12traslacionesEh+0x8e>
    ba2c:	c2 c2       	rjmp	.+1412   	; 0xbfb2 <_ZN13RemoteControl12traslacionesEh+0x612>
    ba2e:	2c c0       	rjmp	.+88     	; 0xba88 <_ZN13RemoteControl12traslacionesEh+0xe8>
		case RC_UP:
			texto1 = "|";
    ba30:	8e 01       	movw	r16, r28
    ba32:	0f 5f       	subi	r16, 0xFF	; 255
    ba34:	1f 4f       	sbci	r17, 0xFF	; 255
    ba36:	c8 01       	movw	r24, r16
    ba38:	6d eb       	ldi	r22, 0xBD	; 189
    ba3a:	72 e0       	ldi	r23, 0x02	; 2
    ba3c:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    ba40:	c4 01       	movw	r24, r8
    ba42:	88 96       	adiw	r24, 0x28	; 40
    ba44:	b8 01       	movw	r22, r16
    ba46:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    ba4a:	c8 01       	movw	r24, r16
    ba4c:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			mov.translation ((COORD3D) {0, 0, step}, step/(velocidad*TICK));
    ba50:	f4 01       	movw	r30, r8
    ba52:	e1 88       	ldd	r14, Z+17	; 0x11
    ba54:	f2 88       	ldd	r15, Z+18	; 0x12
    ba56:	03 89       	ldd	r16, Z+19	; 0x13
    ba58:	14 89       	ldd	r17, Z+20	; 0x14
    ba5a:	83 e7       	ldi	r24, 0x73	; 115
    ba5c:	a8 2e       	mov	r10, r24
    ba5e:	b1 2c       	mov	r11, r1
    ba60:	ac 0e       	add	r10, r28
    ba62:	bd 1e       	adc	r11, r29
    ba64:	80 e0       	ldi	r24, 0x00	; 0
    ba66:	90 e0       	ldi	r25, 0x00	; 0
    ba68:	a0 e0       	ldi	r26, 0x00	; 0
    ba6a:	b0 e0       	ldi	r27, 0x00	; 0
    ba6c:	f5 01       	movw	r30, r10
    ba6e:	80 83       	st	Z, r24
    ba70:	91 83       	std	Z+1, r25	; 0x01
    ba72:	a2 83       	std	Z+2, r26	; 0x02
    ba74:	b3 83       	std	Z+3, r27	; 0x03
    ba76:	84 83       	std	Z+4, r24	; 0x04
    ba78:	95 83       	std	Z+5, r25	; 0x05
    ba7a:	a6 83       	std	Z+6, r26	; 0x06
    ba7c:	b7 83       	std	Z+7, r27	; 0x07
    ba7e:	e0 86       	std	Z+8, r14	; 0x08
    ba80:	f1 86       	std	Z+9, r15	; 0x09
    ba82:	02 87       	std	Z+10, r16	; 0x0a
    ba84:	13 87       	std	Z+11, r17	; 0x0b
    ba86:	2e c0       	rjmp	.+92     	; 0xbae4 <_ZN13RemoteControl12traslacionesEh+0x144>
			break;
		
		case RC_DOWN:
			texto1 = "^";
    ba88:	8e 01       	movw	r16, r28
    ba8a:	09 5f       	subi	r16, 0xF9	; 249
    ba8c:	1f 4f       	sbci	r17, 0xFF	; 255
    ba8e:	c8 01       	movw	r24, r16
    ba90:	6f eb       	ldi	r22, 0xBF	; 191
    ba92:	72 e0       	ldi	r23, 0x02	; 2
    ba94:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    ba98:	c4 01       	movw	r24, r8
    ba9a:	88 96       	adiw	r24, 0x28	; 40
    ba9c:	b8 01       	movw	r22, r16
    ba9e:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    baa2:	c8 01       	movw	r24, r16
    baa4:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			mov.translation ((COORD3D) {0, 0, -step}, step/(velocidad*TICK));
    baa8:	f4 01       	movw	r30, r8
    baaa:	e1 88       	ldd	r14, Z+17	; 0x11
    baac:	f2 88       	ldd	r15, Z+18	; 0x12
    baae:	03 89       	ldd	r16, Z+19	; 0x13
    bab0:	14 89       	ldd	r17, Z+20	; 0x14
    bab2:	bf e7       	ldi	r27, 0x7F	; 127
    bab4:	ab 2e       	mov	r10, r27
    bab6:	b1 2c       	mov	r11, r1
    bab8:	ac 0e       	add	r10, r28
    baba:	bd 1e       	adc	r11, r29
    babc:	80 e0       	ldi	r24, 0x00	; 0
    babe:	90 e0       	ldi	r25, 0x00	; 0
    bac0:	a0 e0       	ldi	r26, 0x00	; 0
    bac2:	b0 e0       	ldi	r27, 0x00	; 0
    bac4:	f5 01       	movw	r30, r10
    bac6:	80 83       	st	Z, r24
    bac8:	91 83       	std	Z+1, r25	; 0x01
    baca:	a2 83       	std	Z+2, r26	; 0x02
    bacc:	b3 83       	std	Z+3, r27	; 0x03
    bace:	84 83       	std	Z+4, r24	; 0x04
    bad0:	95 83       	std	Z+5, r25	; 0x05
    bad2:	a6 83       	std	Z+6, r26	; 0x06
    bad4:	b7 83       	std	Z+7, r27	; 0x07
    bad6:	d8 01       	movw	r26, r16
    bad8:	c7 01       	movw	r24, r14
    bada:	b0 58       	subi	r27, 0x80	; 128
    badc:	80 87       	std	Z+8, r24	; 0x08
    bade:	91 87       	std	Z+9, r25	; 0x09
    bae0:	a2 87       	std	Z+10, r26	; 0x0a
    bae2:	b3 87       	std	Z+11, r27	; 0x0b
    bae4:	f4 01       	movw	r30, r8
    bae6:	60 81       	ld	r22, Z
    bae8:	71 81       	ldd	r23, Z+1	; 0x01
    baea:	82 81       	ldd	r24, Z+2	; 0x02
    baec:	93 81       	ldd	r25, Z+3	; 0x03
    baee:	2f e6       	ldi	r18, 0x6F	; 111
    baf0:	32 e1       	ldi	r19, 0x12	; 18
    baf2:	43 e8       	ldi	r20, 0x83	; 131
    baf4:	5b e3       	ldi	r21, 0x3B	; 59
    baf6:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    bafa:	9b 01       	movw	r18, r22
    bafc:	ac 01       	movw	r20, r24
    bafe:	c8 01       	movw	r24, r16
    bb00:	b7 01       	movw	r22, r14
    bb02:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    bb06:	0e 94 30 7b 	call	0xf660	; 0xf660 <__fixsfsi>
    bb0a:	3b 01       	movw	r6, r22
    bb0c:	4c 01       	movw	r8, r24
    bb0e:	85 ee       	ldi	r24, 0xE5	; 229
    bb10:	9f e0       	ldi	r25, 0x0F	; 15
    bb12:	f5 01       	movw	r30, r10
    bb14:	c0 80       	ld	r12, Z
    bb16:	d1 80       	ldd	r13, Z+1	; 0x01
    bb18:	e2 80       	ldd	r14, Z+2	; 0x02
    bb1a:	f3 80       	ldd	r15, Z+3	; 0x03
    bb1c:	04 81       	ldd	r16, Z+4	; 0x04
    bb1e:	15 81       	ldd	r17, Z+5	; 0x05
    bb20:	26 81       	ldd	r18, Z+6	; 0x06
    bb22:	37 81       	ldd	r19, Z+7	; 0x07
    bb24:	40 85       	ldd	r20, Z+8	; 0x08
    bb26:	51 85       	ldd	r21, Z+9	; 0x09
    bb28:	62 85       	ldd	r22, Z+10	; 0x0a
    bb2a:	73 85       	ldd	r23, Z+11	; 0x0b
    bb2c:	53 01       	movw	r10, r6
    bb2e:	88 24       	eor	r8, r8
    bb30:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN10Movimiento11translationE7COORD3Dih>
    bb34:	3e c2       	rjmp	.+1148   	; 0xbfb2 <_ZN13RemoteControl12traslacionesEh+0x612>
			break;
		
		case RC_RIGHT:
			texto1 = "<";
    bb36:	8e 01       	movw	r16, r28
    bb38:	03 5f       	subi	r16, 0xF3	; 243
    bb3a:	1f 4f       	sbci	r17, 0xFF	; 255
    bb3c:	c8 01       	movw	r24, r16
    bb3e:	61 ec       	ldi	r22, 0xC1	; 193
    bb40:	72 e0       	ldi	r23, 0x02	; 2
    bb42:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    bb46:	c4 01       	movw	r24, r8
    bb48:	88 96       	adiw	r24, 0x28	; 40
    bb4a:	b8 01       	movw	r22, r16
    bb4c:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    bb50:	c8 01       	movw	r24, r16
    bb52:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			mov.translation ((COORD3D) {step, 0, 0}, step/(velocidad*TICK));
    bb56:	f4 01       	movw	r30, r8
    bb58:	e1 88       	ldd	r14, Z+17	; 0x11
    bb5a:	f2 88       	ldd	r15, Z+18	; 0x12
    bb5c:	03 89       	ldd	r16, Z+19	; 0x13
    bb5e:	14 89       	ldd	r17, Z+20	; 0x14
    bb60:	ab e8       	ldi	r26, 0x8B	; 139
    bb62:	aa 2e       	mov	r10, r26
    bb64:	b1 2c       	mov	r11, r1
    bb66:	ac 0e       	add	r10, r28
    bb68:	bd 1e       	adc	r11, r29
    bb6a:	f5 01       	movw	r30, r10
    bb6c:	e0 82       	st	Z, r14
    bb6e:	f1 82       	std	Z+1, r15	; 0x01
    bb70:	02 83       	std	Z+2, r16	; 0x02
    bb72:	13 83       	std	Z+3, r17	; 0x03
    bb74:	22 c0       	rjmp	.+68     	; 0xbbba <_ZN13RemoteControl12traslacionesEh+0x21a>
			break;
	
		case RC_LEFT:
			texto1 = ">";
    bb76:	8e 01       	movw	r16, r28
    bb78:	0d 5e       	subi	r16, 0xED	; 237
    bb7a:	1f 4f       	sbci	r17, 0xFF	; 255
    bb7c:	c8 01       	movw	r24, r16
    bb7e:	63 ec       	ldi	r22, 0xC3	; 195
    bb80:	72 e0       	ldi	r23, 0x02	; 2
    bb82:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    bb86:	c4 01       	movw	r24, r8
    bb88:	88 96       	adiw	r24, 0x28	; 40
    bb8a:	b8 01       	movw	r22, r16
    bb8c:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    bb90:	c8 01       	movw	r24, r16
    bb92:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			mov.translation ((COORD3D) {-step, 0, 0}, step/(velocidad*TICK));
    bb96:	f4 01       	movw	r30, r8
    bb98:	e1 88       	ldd	r14, Z+17	; 0x11
    bb9a:	f2 88       	ldd	r15, Z+18	; 0x12
    bb9c:	03 89       	ldd	r16, Z+19	; 0x13
    bb9e:	14 89       	ldd	r17, Z+20	; 0x14
    bba0:	f7 e9       	ldi	r31, 0x97	; 151
    bba2:	af 2e       	mov	r10, r31
    bba4:	b1 2c       	mov	r11, r1
    bba6:	ac 0e       	add	r10, r28
    bba8:	bd 1e       	adc	r11, r29
    bbaa:	d8 01       	movw	r26, r16
    bbac:	c7 01       	movw	r24, r14
    bbae:	b0 58       	subi	r27, 0x80	; 128
    bbb0:	f5 01       	movw	r30, r10
    bbb2:	80 83       	st	Z, r24
    bbb4:	91 83       	std	Z+1, r25	; 0x01
    bbb6:	a2 83       	std	Z+2, r26	; 0x02
    bbb8:	b3 83       	std	Z+3, r27	; 0x03
    bbba:	80 e0       	ldi	r24, 0x00	; 0
    bbbc:	90 e0       	ldi	r25, 0x00	; 0
    bbbe:	a0 e0       	ldi	r26, 0x00	; 0
    bbc0:	b0 e0       	ldi	r27, 0x00	; 0
    bbc2:	84 83       	std	Z+4, r24	; 0x04
    bbc4:	95 83       	std	Z+5, r25	; 0x05
    bbc6:	a6 83       	std	Z+6, r26	; 0x06
    bbc8:	b7 83       	std	Z+7, r27	; 0x07
    bbca:	88 cf       	rjmp	.-240    	; 0xbadc <_ZN13RemoteControl12traslacionesEh+0x13c>
			break;

		case RC_CCTTX: case RC_MTS:
			texto1 = "h-";
    bbcc:	8e 01       	movw	r16, r28
    bbce:	07 5e       	subi	r16, 0xE7	; 231
    bbd0:	1f 4f       	sbci	r17, 0xFF	; 255
    bbd2:	c8 01       	movw	r24, r16
    bbd4:	65 ed       	ldi	r22, 0xD5	; 213
    bbd6:	72 e0       	ldi	r23, 0x02	; 2
    bbd8:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    bbdc:	c4 01       	movw	r24, r8
    bbde:	88 96       	adiw	r24, 0x28	; 40
    bbe0:	b8 01       	movw	r22, r16
    bbe2:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    bbe6:	c8 01       	movw	r24, r16
    bbe8:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			mov.translation ((COORD3D) {0, -step, 0}, step/(velocidad*TICK));
    bbec:	f4 01       	movw	r30, r8
    bbee:	e1 88       	ldd	r14, Z+17	; 0x11
    bbf0:	f2 88       	ldd	r15, Z+18	; 0x12
    bbf2:	03 89       	ldd	r16, Z+19	; 0x13
    bbf4:	14 89       	ldd	r17, Z+20	; 0x14
    bbf6:	e3 ea       	ldi	r30, 0xA3	; 163
    bbf8:	ae 2e       	mov	r10, r30
    bbfa:	b1 2c       	mov	r11, r1
    bbfc:	ac 0e       	add	r10, r28
    bbfe:	bd 1e       	adc	r11, r29
    bc00:	20 e0       	ldi	r18, 0x00	; 0
    bc02:	30 e0       	ldi	r19, 0x00	; 0
    bc04:	40 e0       	ldi	r20, 0x00	; 0
    bc06:	50 e0       	ldi	r21, 0x00	; 0
    bc08:	f5 01       	movw	r30, r10
    bc0a:	20 83       	st	Z, r18
    bc0c:	31 83       	std	Z+1, r19	; 0x01
    bc0e:	42 83       	std	Z+2, r20	; 0x02
    bc10:	53 83       	std	Z+3, r21	; 0x03
    bc12:	d8 01       	movw	r26, r16
    bc14:	c7 01       	movw	r24, r14
    bc16:	b0 58       	subi	r27, 0x80	; 128
    bc18:	84 83       	std	Z+4, r24	; 0x04
    bc1a:	95 83       	std	Z+5, r25	; 0x05
    bc1c:	a6 83       	std	Z+6, r26	; 0x06
    bc1e:	b7 83       	std	Z+7, r27	; 0x07
    bc20:	20 87       	std	Z+8, r18	; 0x08
    bc22:	31 87       	std	Z+9, r19	; 0x09
    bc24:	42 87       	std	Z+10, r20	; 0x0a
    bc26:	53 87       	std	Z+11, r21	; 0x0b
    bc28:	5d cf       	rjmp	.-326    	; 0xbae4 <_ZN13RemoteControl12traslacionesEh+0x144>
			break;
			
		case RC_EXIT: case RC_MENU:
			texto1 = "h+";
    bc2a:	8e 01       	movw	r16, r28
    bc2c:	01 5e       	subi	r16, 0xE1	; 225
    bc2e:	1f 4f       	sbci	r17, 0xFF	; 255
    bc30:	c8 01       	movw	r24, r16
    bc32:	68 ed       	ldi	r22, 0xD8	; 216
    bc34:	72 e0       	ldi	r23, 0x02	; 2
    bc36:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    bc3a:	c4 01       	movw	r24, r8
    bc3c:	88 96       	adiw	r24, 0x28	; 40
    bc3e:	b8 01       	movw	r22, r16
    bc40:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    bc44:	c8 01       	movw	r24, r16
    bc46:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			mov.translation ((COORD3D) {0, step, 0}, step/(velocidad*TICK));     // step/velocidad*TICK hay que precalcularlo
    bc4a:	f4 01       	movw	r30, r8
    bc4c:	e1 88       	ldd	r14, Z+17	; 0x11
    bc4e:	f2 88       	ldd	r15, Z+18	; 0x12
    bc50:	03 89       	ldd	r16, Z+19	; 0x13
    bc52:	14 89       	ldd	r17, Z+20	; 0x14
    bc54:	7f ea       	ldi	r23, 0xAF	; 175
    bc56:	a7 2e       	mov	r10, r23
    bc58:	b1 2c       	mov	r11, r1
    bc5a:	ac 0e       	add	r10, r28
    bc5c:	bd 1e       	adc	r11, r29
    bc5e:	80 e0       	ldi	r24, 0x00	; 0
    bc60:	90 e0       	ldi	r25, 0x00	; 0
    bc62:	a0 e0       	ldi	r26, 0x00	; 0
    bc64:	b0 e0       	ldi	r27, 0x00	; 0
    bc66:	f5 01       	movw	r30, r10
    bc68:	80 83       	st	Z, r24
    bc6a:	91 83       	std	Z+1, r25	; 0x01
    bc6c:	a2 83       	std	Z+2, r26	; 0x02
    bc6e:	b3 83       	std	Z+3, r27	; 0x03
    bc70:	e4 82       	std	Z+4, r14	; 0x04
    bc72:	f5 82       	std	Z+5, r15	; 0x05
    bc74:	06 83       	std	Z+6, r16	; 0x06
    bc76:	17 83       	std	Z+7, r17	; 0x07
    bc78:	31 cf       	rjmp	.-414    	; 0xbadc <_ZN13RemoteControl12traslacionesEh+0x13c>
			break;
			
		case RC_ENTER1:
			texto1 = "STORE";
    bc7a:	8e 01       	movw	r16, r28
    bc7c:	0b 5d       	subi	r16, 0xDB	; 219
    bc7e:	1f 4f       	sbci	r17, 0xFF	; 255
    bc80:	c8 01       	movw	r24, r16
    bc82:	6b ed       	ldi	r22, 0xDB	; 219
    bc84:	72 e0       	ldi	r23, 0x02	; 2
    bc86:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    bc8a:	c4 01       	movw	r24, r8
    bc8c:	88 96       	adiw	r24, 0x28	; 40
    bc8e:	b8 01       	movw	r22, r16
    bc90:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    bc94:	c8 01       	movw	r24, r16
    bc96:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			mov.actual_pos_ref ();
    bc9a:	85 ee       	ldi	r24, 0xE5	; 229
    bc9c:	9f e0       	ldi	r25, 0x0F	; 15
    bc9e:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <_ZN10Movimiento14actual_pos_refEv>
    bca2:	87 c1       	rjmp	.+782    	; 0xbfb2 <_ZN13RemoteControl12traslacionesEh+0x612>
			break;
			
		case RC_VOL_UP:
			if (pantalla.isBusy()) {break;}
    bca4:	83 ea       	ldi	r24, 0xA3	; 163
    bca6:	93 e1       	ldi	r25, 0x13	; 19
    bca8:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    bcac:	88 23       	and	r24, r24
    bcae:	09 f0       	breq	.+2      	; 0xbcb2 <_ZN13RemoteControl12traslacionesEh+0x312>
    bcb0:	80 c1       	rjmp	.+768    	; 0xbfb2 <_ZN13RemoteControl12traslacionesEh+0x612>
			velocidad = constrain (velocidad+inc, 1, 50);
    bcb2:	f4 01       	movw	r30, r8
    bcb4:	60 81       	ld	r22, Z
    bcb6:	71 81       	ldd	r23, Z+1	; 0x01
    bcb8:	82 81       	ldd	r24, Z+2	; 0x02
    bcba:	93 81       	ldd	r25, Z+3	; 0x03
    bcbc:	21 a1       	ldd	r18, Z+33	; 0x21
    bcbe:	32 a1       	ldd	r19, Z+34	; 0x22
    bcc0:	43 a1       	ldd	r20, Z+35	; 0x23
    bcc2:	54 a1       	ldd	r21, Z+36	; 0x24
    bcc4:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    bcc8:	7b 01       	movw	r14, r22
    bcca:	8c 01       	movw	r16, r24
    bccc:	20 e0       	ldi	r18, 0x00	; 0
    bcce:	30 e0       	ldi	r19, 0x00	; 0
    bcd0:	40 e8       	ldi	r20, 0x80	; 128
    bcd2:	5f e3       	ldi	r21, 0x3F	; 63
    bcd4:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    bcd8:	88 23       	and	r24, r24
    bcda:	5c f4       	brge	.+22     	; 0xbcf2 <_ZN13RemoteControl12traslacionesEh+0x352>
    bcdc:	0f 2e       	mov	r0, r31
    bcde:	f0 e0       	ldi	r31, 0x00	; 0
    bce0:	ef 2e       	mov	r14, r31
    bce2:	f0 e0       	ldi	r31, 0x00	; 0
    bce4:	ff 2e       	mov	r15, r31
    bce6:	f0 e8       	ldi	r31, 0x80	; 128
    bce8:	0f 2f       	mov	r16, r31
    bcea:	ff e3       	ldi	r31, 0x3F	; 63
    bcec:	1f 2f       	mov	r17, r31
    bcee:	f0 2d       	mov	r31, r0
    bcf0:	14 c0       	rjmp	.+40     	; 0xbd1a <_ZN13RemoteControl12traslacionesEh+0x37a>
    bcf2:	c8 01       	movw	r24, r16
    bcf4:	b7 01       	movw	r22, r14
    bcf6:	20 e0       	ldi	r18, 0x00	; 0
    bcf8:	30 e0       	ldi	r19, 0x00	; 0
    bcfa:	48 e4       	ldi	r20, 0x48	; 72
    bcfc:	52 e4       	ldi	r21, 0x42	; 66
    bcfe:	0e 94 8c 7c 	call	0xf918	; 0xf918 <__gesf2>
    bd02:	18 16       	cp	r1, r24
    bd04:	54 f4       	brge	.+20     	; 0xbd1a <_ZN13RemoteControl12traslacionesEh+0x37a>
    bd06:	0f 2e       	mov	r0, r31
    bd08:	f0 e0       	ldi	r31, 0x00	; 0
    bd0a:	ef 2e       	mov	r14, r31
    bd0c:	f0 e0       	ldi	r31, 0x00	; 0
    bd0e:	ff 2e       	mov	r15, r31
    bd10:	f8 e4       	ldi	r31, 0x48	; 72
    bd12:	0f 2f       	mov	r16, r31
    bd14:	f2 e4       	ldi	r31, 0x42	; 66
    bd16:	1f 2f       	mov	r17, r31
    bd18:	f0 2d       	mov	r31, r0
    bd1a:	f4 01       	movw	r30, r8
    bd1c:	e0 82       	st	Z, r14
    bd1e:	f1 82       	std	Z+1, r15	; 0x01
    bd20:	02 83       	std	Z+2, r16	; 0x02
    bd22:	13 83       	std	Z+3, r17	; 0x03
			texto1 = "Vel " + float2string (velocidad);
    bd24:	61 e3       	ldi	r22, 0x31	; 49
    bd26:	c6 2e       	mov	r12, r22
    bd28:	d1 2c       	mov	r13, r1
    bd2a:	cc 0e       	add	r12, r28
    bd2c:	dd 1e       	adc	r13, r29
    bd2e:	c6 01       	movw	r24, r12
    bd30:	61 ee       	ldi	r22, 0xE1	; 225
    bd32:	72 e0       	ldi	r23, 0x02	; 2
    bd34:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    bd38:	5b e2       	ldi	r21, 0x2B	; 43
    bd3a:	e5 2e       	mov	r14, r21
    bd3c:	f1 2c       	mov	r15, r1
    bd3e:	ec 0e       	add	r14, r28
    bd40:	fd 1e       	adc	r15, r29
    bd42:	f4 01       	movw	r30, r8
    bd44:	40 81       	ld	r20, Z
    bd46:	51 81       	ldd	r21, Z+1	; 0x01
    bd48:	62 81       	ldd	r22, Z+2	; 0x02
    bd4a:	73 81       	ldd	r23, Z+3	; 0x03
    bd4c:	c7 01       	movw	r24, r14
    bd4e:	0e 94 8b 72 	call	0xe516	; 0xe516 <_Z12float2stringf>
    bd52:	8e 01       	movw	r16, r28
    bd54:	09 5c       	subi	r16, 0xC9	; 201
    bd56:	1f 4f       	sbci	r17, 0xFF	; 255
    bd58:	16 c1       	rjmp	.+556    	; 0xbf86 <_ZN13RemoteControl12traslacionesEh+0x5e6>
			retardo = true;
			break;
			
		case RC_VOL_DN:
			if (pantalla.isBusy()) {break;}
    bd5a:	83 ea       	ldi	r24, 0xA3	; 163
    bd5c:	93 e1       	ldi	r25, 0x13	; 19
    bd5e:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    bd62:	88 23       	and	r24, r24
    bd64:	09 f0       	breq	.+2      	; 0xbd68 <_ZN13RemoteControl12traslacionesEh+0x3c8>
    bd66:	25 c1       	rjmp	.+586    	; 0xbfb2 <_ZN13RemoteControl12traslacionesEh+0x612>
			velocidad = constrain (velocidad-inc, 1, 50);
    bd68:	f4 01       	movw	r30, r8
    bd6a:	60 81       	ld	r22, Z
    bd6c:	71 81       	ldd	r23, Z+1	; 0x01
    bd6e:	82 81       	ldd	r24, Z+2	; 0x02
    bd70:	93 81       	ldd	r25, Z+3	; 0x03
    bd72:	21 a1       	ldd	r18, Z+33	; 0x21
    bd74:	32 a1       	ldd	r19, Z+34	; 0x22
    bd76:	43 a1       	ldd	r20, Z+35	; 0x23
    bd78:	54 a1       	ldd	r21, Z+36	; 0x24
    bd7a:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    bd7e:	7b 01       	movw	r14, r22
    bd80:	8c 01       	movw	r16, r24
    bd82:	20 e0       	ldi	r18, 0x00	; 0
    bd84:	30 e0       	ldi	r19, 0x00	; 0
    bd86:	40 e8       	ldi	r20, 0x80	; 128
    bd88:	5f e3       	ldi	r21, 0x3F	; 63
    bd8a:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    bd8e:	88 23       	and	r24, r24
    bd90:	5c f4       	brge	.+22     	; 0xbda8 <_ZN13RemoteControl12traslacionesEh+0x408>
    bd92:	0f 2e       	mov	r0, r31
    bd94:	f0 e0       	ldi	r31, 0x00	; 0
    bd96:	ef 2e       	mov	r14, r31
    bd98:	f0 e0       	ldi	r31, 0x00	; 0
    bd9a:	ff 2e       	mov	r15, r31
    bd9c:	f0 e8       	ldi	r31, 0x80	; 128
    bd9e:	0f 2f       	mov	r16, r31
    bda0:	ff e3       	ldi	r31, 0x3F	; 63
    bda2:	1f 2f       	mov	r17, r31
    bda4:	f0 2d       	mov	r31, r0
    bda6:	14 c0       	rjmp	.+40     	; 0xbdd0 <_ZN13RemoteControl12traslacionesEh+0x430>
    bda8:	c8 01       	movw	r24, r16
    bdaa:	b7 01       	movw	r22, r14
    bdac:	20 e0       	ldi	r18, 0x00	; 0
    bdae:	30 e0       	ldi	r19, 0x00	; 0
    bdb0:	48 e4       	ldi	r20, 0x48	; 72
    bdb2:	52 e4       	ldi	r21, 0x42	; 66
    bdb4:	0e 94 8c 7c 	call	0xf918	; 0xf918 <__gesf2>
    bdb8:	18 16       	cp	r1, r24
    bdba:	54 f4       	brge	.+20     	; 0xbdd0 <_ZN13RemoteControl12traslacionesEh+0x430>
    bdbc:	0f 2e       	mov	r0, r31
    bdbe:	f0 e0       	ldi	r31, 0x00	; 0
    bdc0:	ef 2e       	mov	r14, r31
    bdc2:	f0 e0       	ldi	r31, 0x00	; 0
    bdc4:	ff 2e       	mov	r15, r31
    bdc6:	f8 e4       	ldi	r31, 0x48	; 72
    bdc8:	0f 2f       	mov	r16, r31
    bdca:	f2 e4       	ldi	r31, 0x42	; 66
    bdcc:	1f 2f       	mov	r17, r31
    bdce:	f0 2d       	mov	r31, r0
    bdd0:	f4 01       	movw	r30, r8
    bdd2:	e0 82       	st	Z, r14
    bdd4:	f1 82       	std	Z+1, r15	; 0x01
    bdd6:	02 83       	std	Z+2, r16	; 0x02
    bdd8:	13 83       	std	Z+3, r17	; 0x03
			texto1 = "Vel " + float2string (velocidad);
    bdda:	43 e4       	ldi	r20, 0x43	; 67
    bddc:	c4 2e       	mov	r12, r20
    bdde:	d1 2c       	mov	r13, r1
    bde0:	cc 0e       	add	r12, r28
    bde2:	dd 1e       	adc	r13, r29
    bde4:	c6 01       	movw	r24, r12
    bde6:	61 ee       	ldi	r22, 0xE1	; 225
    bde8:	72 e0       	ldi	r23, 0x02	; 2
    bdea:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    bdee:	3d e3       	ldi	r19, 0x3D	; 61
    bdf0:	e3 2e       	mov	r14, r19
    bdf2:	f1 2c       	mov	r15, r1
    bdf4:	ec 0e       	add	r14, r28
    bdf6:	fd 1e       	adc	r15, r29
    bdf8:	f4 01       	movw	r30, r8
    bdfa:	40 81       	ld	r20, Z
    bdfc:	51 81       	ldd	r21, Z+1	; 0x01
    bdfe:	62 81       	ldd	r22, Z+2	; 0x02
    be00:	73 81       	ldd	r23, Z+3	; 0x03
    be02:	c7 01       	movw	r24, r14
    be04:	0e 94 8b 72 	call	0xe516	; 0xe516 <_Z12float2stringf>
    be08:	8e 01       	movw	r16, r28
    be0a:	07 5b       	subi	r16, 0xB7	; 183
    be0c:	1f 4f       	sbci	r17, 0xFF	; 255
    be0e:	bb c0       	rjmp	.+374    	; 0xbf86 <_ZN13RemoteControl12traslacionesEh+0x5e6>
			retardo = true;
			break;
			
		case RC_CH_UP:
			if (pantalla.isBusy()) {break;}
    be10:	83 ea       	ldi	r24, 0xA3	; 163
    be12:	93 e1       	ldi	r25, 0x13	; 19
    be14:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    be18:	88 23       	and	r24, r24
    be1a:	09 f0       	breq	.+2      	; 0xbe1e <_ZN13RemoteControl12traslacionesEh+0x47e>
    be1c:	ca c0       	rjmp	.+404    	; 0xbfb2 <_ZN13RemoteControl12traslacionesEh+0x612>
			if (!isMoving) {step = constrain (step+inc, .5, 5);}
    be1e:	f4 01       	movw	r30, r8
    be20:	85 a1       	ldd	r24, Z+37	; 0x25
    be22:	88 23       	and	r24, r24
    be24:	c1 f5       	brne	.+112    	; 0xbe96 <_ZN13RemoteControl12traslacionesEh+0x4f6>
    be26:	61 89       	ldd	r22, Z+17	; 0x11
    be28:	72 89       	ldd	r23, Z+18	; 0x12
    be2a:	83 89       	ldd	r24, Z+19	; 0x13
    be2c:	94 89       	ldd	r25, Z+20	; 0x14
    be2e:	21 a1       	ldd	r18, Z+33	; 0x21
    be30:	32 a1       	ldd	r19, Z+34	; 0x22
    be32:	43 a1       	ldd	r20, Z+35	; 0x23
    be34:	54 a1       	ldd	r21, Z+36	; 0x24
    be36:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    be3a:	7b 01       	movw	r14, r22
    be3c:	8c 01       	movw	r16, r24
    be3e:	20 e0       	ldi	r18, 0x00	; 0
    be40:	30 e0       	ldi	r19, 0x00	; 0
    be42:	40 e0       	ldi	r20, 0x00	; 0
    be44:	5f e3       	ldi	r21, 0x3F	; 63
    be46:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    be4a:	88 23       	and	r24, r24
    be4c:	5c f4       	brge	.+22     	; 0xbe64 <_ZN13RemoteControl12traslacionesEh+0x4c4>
    be4e:	0f 2e       	mov	r0, r31
    be50:	f0 e0       	ldi	r31, 0x00	; 0
    be52:	ef 2e       	mov	r14, r31
    be54:	f0 e0       	ldi	r31, 0x00	; 0
    be56:	ff 2e       	mov	r15, r31
    be58:	f0 e0       	ldi	r31, 0x00	; 0
    be5a:	0f 2f       	mov	r16, r31
    be5c:	ff e3       	ldi	r31, 0x3F	; 63
    be5e:	1f 2f       	mov	r17, r31
    be60:	f0 2d       	mov	r31, r0
    be62:	14 c0       	rjmp	.+40     	; 0xbe8c <_ZN13RemoteControl12traslacionesEh+0x4ec>
    be64:	c8 01       	movw	r24, r16
    be66:	b7 01       	movw	r22, r14
    be68:	20 e0       	ldi	r18, 0x00	; 0
    be6a:	30 e0       	ldi	r19, 0x00	; 0
    be6c:	40 ea       	ldi	r20, 0xA0	; 160
    be6e:	50 e4       	ldi	r21, 0x40	; 64
    be70:	0e 94 8c 7c 	call	0xf918	; 0xf918 <__gesf2>
    be74:	18 16       	cp	r1, r24
    be76:	54 f4       	brge	.+20     	; 0xbe8c <_ZN13RemoteControl12traslacionesEh+0x4ec>
    be78:	0f 2e       	mov	r0, r31
    be7a:	f0 e0       	ldi	r31, 0x00	; 0
    be7c:	ef 2e       	mov	r14, r31
    be7e:	f0 e0       	ldi	r31, 0x00	; 0
    be80:	ff 2e       	mov	r15, r31
    be82:	f0 ea       	ldi	r31, 0xA0	; 160
    be84:	0f 2f       	mov	r16, r31
    be86:	f0 e4       	ldi	r31, 0x40	; 64
    be88:	1f 2f       	mov	r17, r31
    be8a:	f0 2d       	mov	r31, r0
    be8c:	f4 01       	movw	r30, r8
    be8e:	e1 8a       	std	Z+17, r14	; 0x11
    be90:	f2 8a       	std	Z+18, r15	; 0x12
    be92:	03 8b       	std	Z+19, r16	; 0x13
    be94:	14 8b       	std	Z+20, r17	; 0x14
			texto1 = "Step " + float2string (step);
    be96:	25 e5       	ldi	r18, 0x55	; 85
    be98:	c2 2e       	mov	r12, r18
    be9a:	d1 2c       	mov	r13, r1
    be9c:	cc 0e       	add	r12, r28
    be9e:	dd 1e       	adc	r13, r29
    bea0:	c6 01       	movw	r24, r12
    bea2:	67 eb       	ldi	r22, 0xB7	; 183
    bea4:	72 e0       	ldi	r23, 0x02	; 2
    bea6:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    beaa:	9f e4       	ldi	r25, 0x4F	; 79
    beac:	e9 2e       	mov	r14, r25
    beae:	f1 2c       	mov	r15, r1
    beb0:	ec 0e       	add	r14, r28
    beb2:	fd 1e       	adc	r15, r29
    beb4:	f4 01       	movw	r30, r8
    beb6:	41 89       	ldd	r20, Z+17	; 0x11
    beb8:	52 89       	ldd	r21, Z+18	; 0x12
    beba:	63 89       	ldd	r22, Z+19	; 0x13
    bebc:	74 89       	ldd	r23, Z+20	; 0x14
    bebe:	c7 01       	movw	r24, r14
    bec0:	0e 94 8b 72 	call	0xe516	; 0xe516 <_Z12float2stringf>
    bec4:	8e 01       	movw	r16, r28
    bec6:	05 5a       	subi	r16, 0xA5	; 165
    bec8:	1f 4f       	sbci	r17, 0xFF	; 255
    beca:	5d c0       	rjmp	.+186    	; 0xbf86 <_ZN13RemoteControl12traslacionesEh+0x5e6>
			retardo = true;
			break;
			
		case RC_CH_DN:
			if (pantalla.isBusy()) {break;}
    becc:	83 ea       	ldi	r24, 0xA3	; 163
    bece:	93 e1       	ldi	r25, 0x13	; 19
    bed0:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    bed4:	88 23       	and	r24, r24
    bed6:	09 f0       	breq	.+2      	; 0xbeda <_ZN13RemoteControl12traslacionesEh+0x53a>
    bed8:	6c c0       	rjmp	.+216    	; 0xbfb2 <_ZN13RemoteControl12traslacionesEh+0x612>
			if (!isMoving) {step = constrain (step-inc, .5, 5);}
    beda:	f4 01       	movw	r30, r8
    bedc:	85 a1       	ldd	r24, Z+37	; 0x25
    bede:	88 23       	and	r24, r24
    bee0:	c1 f5       	brne	.+112    	; 0xbf52 <_ZN13RemoteControl12traslacionesEh+0x5b2>
    bee2:	61 89       	ldd	r22, Z+17	; 0x11
    bee4:	72 89       	ldd	r23, Z+18	; 0x12
    bee6:	83 89       	ldd	r24, Z+19	; 0x13
    bee8:	94 89       	ldd	r25, Z+20	; 0x14
    beea:	21 a1       	ldd	r18, Z+33	; 0x21
    beec:	32 a1       	ldd	r19, Z+34	; 0x22
    beee:	43 a1       	ldd	r20, Z+35	; 0x23
    bef0:	54 a1       	ldd	r21, Z+36	; 0x24
    bef2:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    bef6:	7b 01       	movw	r14, r22
    bef8:	8c 01       	movw	r16, r24
    befa:	20 e0       	ldi	r18, 0x00	; 0
    befc:	30 e0       	ldi	r19, 0x00	; 0
    befe:	40 e0       	ldi	r20, 0x00	; 0
    bf00:	5f e3       	ldi	r21, 0x3F	; 63
    bf02:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    bf06:	88 23       	and	r24, r24
    bf08:	5c f4       	brge	.+22     	; 0xbf20 <_ZN13RemoteControl12traslacionesEh+0x580>
    bf0a:	0f 2e       	mov	r0, r31
    bf0c:	f0 e0       	ldi	r31, 0x00	; 0
    bf0e:	ef 2e       	mov	r14, r31
    bf10:	f0 e0       	ldi	r31, 0x00	; 0
    bf12:	ff 2e       	mov	r15, r31
    bf14:	f0 e0       	ldi	r31, 0x00	; 0
    bf16:	0f 2f       	mov	r16, r31
    bf18:	ff e3       	ldi	r31, 0x3F	; 63
    bf1a:	1f 2f       	mov	r17, r31
    bf1c:	f0 2d       	mov	r31, r0
    bf1e:	14 c0       	rjmp	.+40     	; 0xbf48 <_ZN13RemoteControl12traslacionesEh+0x5a8>
    bf20:	c8 01       	movw	r24, r16
    bf22:	b7 01       	movw	r22, r14
    bf24:	20 e0       	ldi	r18, 0x00	; 0
    bf26:	30 e0       	ldi	r19, 0x00	; 0
    bf28:	40 ea       	ldi	r20, 0xA0	; 160
    bf2a:	50 e4       	ldi	r21, 0x40	; 64
    bf2c:	0e 94 8c 7c 	call	0xf918	; 0xf918 <__gesf2>
    bf30:	18 16       	cp	r1, r24
    bf32:	54 f4       	brge	.+20     	; 0xbf48 <_ZN13RemoteControl12traslacionesEh+0x5a8>
    bf34:	0f 2e       	mov	r0, r31
    bf36:	f0 e0       	ldi	r31, 0x00	; 0
    bf38:	ef 2e       	mov	r14, r31
    bf3a:	f0 e0       	ldi	r31, 0x00	; 0
    bf3c:	ff 2e       	mov	r15, r31
    bf3e:	f0 ea       	ldi	r31, 0xA0	; 160
    bf40:	0f 2f       	mov	r16, r31
    bf42:	f0 e4       	ldi	r31, 0x40	; 64
    bf44:	1f 2f       	mov	r17, r31
    bf46:	f0 2d       	mov	r31, r0
    bf48:	f4 01       	movw	r30, r8
    bf4a:	e1 8a       	std	Z+17, r14	; 0x11
    bf4c:	f2 8a       	std	Z+18, r15	; 0x12
    bf4e:	03 8b       	std	Z+19, r16	; 0x13
    bf50:	14 8b       	std	Z+20, r17	; 0x14
			texto1 = "Step " + float2string (step);
    bf52:	87 e6       	ldi	r24, 0x67	; 103
    bf54:	c8 2e       	mov	r12, r24
    bf56:	d1 2c       	mov	r13, r1
    bf58:	cc 0e       	add	r12, r28
    bf5a:	dd 1e       	adc	r13, r29
    bf5c:	c6 01       	movw	r24, r12
    bf5e:	67 eb       	ldi	r22, 0xB7	; 183
    bf60:	72 e0       	ldi	r23, 0x02	; 2
    bf62:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    bf66:	01 e6       	ldi	r16, 0x61	; 97
    bf68:	e0 2e       	mov	r14, r16
    bf6a:	f1 2c       	mov	r15, r1
    bf6c:	ec 0e       	add	r14, r28
    bf6e:	fd 1e       	adc	r15, r29
    bf70:	f4 01       	movw	r30, r8
    bf72:	41 89       	ldd	r20, Z+17	; 0x11
    bf74:	52 89       	ldd	r21, Z+18	; 0x12
    bf76:	63 89       	ldd	r22, Z+19	; 0x13
    bf78:	74 89       	ldd	r23, Z+20	; 0x14
    bf7a:	c7 01       	movw	r24, r14
    bf7c:	0e 94 8b 72 	call	0xe516	; 0xe516 <_Z12float2stringf>
    bf80:	8e 01       	movw	r16, r28
    bf82:	03 59       	subi	r16, 0x93	; 147
    bf84:	1f 4f       	sbci	r17, 0xFF	; 255
    bf86:	c8 01       	movw	r24, r16
    bf88:	b6 01       	movw	r22, r12
    bf8a:	a7 01       	movw	r20, r14
    bf8c:	0e 94 98 32 	call	0x6530	; 0x6530 <_Zpl6StringRKS_>
    bf90:	c4 01       	movw	r24, r8
    bf92:	88 96       	adiw	r24, 0x28	; 40
    bf94:	b8 01       	movw	r22, r16
    bf96:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    bf9a:	c8 01       	movw	r24, r16
    bf9c:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    bfa0:	c7 01       	movw	r24, r14
    bfa2:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    bfa6:	c6 01       	movw	r24, r12
    bfa8:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			retardo = true;
    bfac:	81 e0       	ldi	r24, 0x01	; 1
    bfae:	f4 01       	movw	r30, r8
    bfb0:	86 ab       	std	Z+54, r24	; 0x36
			break;
	}

}
    bfb2:	c6 54       	subi	r28, 0x46	; 70
    bfb4:	df 4f       	sbci	r29, 0xFF	; 255
    bfb6:	0f b6       	in	r0, 0x3f	; 63
    bfb8:	f8 94       	cli
    bfba:	de bf       	out	0x3e, r29	; 62
    bfbc:	0f be       	out	0x3f, r0	; 63
    bfbe:	cd bf       	out	0x3d, r28	; 61
    bfc0:	cf 91       	pop	r28
    bfc2:	df 91       	pop	r29
    bfc4:	1f 91       	pop	r17
    bfc6:	0f 91       	pop	r16
    bfc8:	ff 90       	pop	r15
    bfca:	ef 90       	pop	r14
    bfcc:	df 90       	pop	r13
    bfce:	cf 90       	pop	r12
    bfd0:	bf 90       	pop	r11
    bfd2:	af 90       	pop	r10
    bfd4:	9f 90       	pop	r9
    bfd6:	8f 90       	pop	r8
    bfd8:	7f 90       	pop	r7
    bfda:	6f 90       	pop	r6
    bfdc:	08 95       	ret

0000bfde <_ZN13RemoteControl9caminatasEh>:
	
	displayText ();
	
}

void RemoteControl::caminatas (byte comando) {
    bfde:	5f 92       	push	r5
    bfe0:	6f 92       	push	r6
    bfe2:	7f 92       	push	r7
    bfe4:	8f 92       	push	r8
    bfe6:	9f 92       	push	r9
    bfe8:	af 92       	push	r10
    bfea:	bf 92       	push	r11
    bfec:	cf 92       	push	r12
    bfee:	df 92       	push	r13
    bff0:	ef 92       	push	r14
    bff2:	ff 92       	push	r15
    bff4:	0f 93       	push	r16
    bff6:	1f 93       	push	r17
    bff8:	df 93       	push	r29
    bffa:	cf 93       	push	r28
    bffc:	cd b7       	in	r28, 0x3d	; 61
    bffe:	de b7       	in	r29, 0x3e	; 62
    c000:	c2 5c       	subi	r28, 0xC2	; 194
    c002:	d0 40       	sbci	r29, 0x00	; 0
    c004:	0f b6       	in	r0, 0x3f	; 63
    c006:	f8 94       	cli
    c008:	de bf       	out	0x3e, r29	; 62
    c00a:	0f be       	out	0x3f, r0	; 63
    c00c:	cd bf       	out	0x3d, r28	; 61
    c00e:	3c 01       	movw	r6, r24
    c010:	56 2e       	mov	r5, r22
	
	// todo esto está programado como el orto, hay que reorganizarlo
	// por ejemplo este "anguloso"... talvez las otras variables también deban estar acá
	static float anguloso = 0;
	
	if (anguloso != 0) {
    c012:	c0 90 ec 13 	lds	r12, 0x13EC
    c016:	d0 90 ed 13 	lds	r13, 0x13ED
    c01a:	e0 90 ee 13 	lds	r14, 0x13EE
    c01e:	f0 90 ef 13 	lds	r15, 0x13EF
    c022:	c7 01       	movw	r24, r14
    c024:	b6 01       	movw	r22, r12
    c026:	20 e0       	ldi	r18, 0x00	; 0
    c028:	30 e0       	ldi	r19, 0x00	; 0
    c02a:	40 e0       	ldi	r20, 0x00	; 0
    c02c:	50 e0       	ldi	r21, 0x00	; 0
    c02e:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    c032:	88 23       	and	r24, r24
    c034:	b9 f1       	breq	.+110    	; 0xc0a4 <_ZN13RemoteControl9caminatasEh+0xc6>
		COORD2D matrix [2];
		getRotationMatrix (matrix, anguloso);
    c036:	8e 01       	movw	r16, r28
    c038:	0d 54       	subi	r16, 0x4D	; 77
    c03a:	1f 4f       	sbci	r17, 0xFF	; 255
    c03c:	c8 01       	movw	r24, r16
    c03e:	b7 01       	movw	r22, r14
    c040:	a6 01       	movw	r20, r12
    c042:	0e 94 02 49 	call	0x9204	; 0x9204 <_Z17getRotationMatrixP7COORD2Df>
		centro_caminata = applyMatrix (centro_caminata, matrix);
    c046:	d3 01       	movw	r26, r6
    c048:	59 96       	adiw	r26, 0x19	; 25
    c04a:	2c 91       	ld	r18, X
    c04c:	59 97       	sbiw	r26, 0x19	; 25
    c04e:	5a 96       	adiw	r26, 0x1a	; 26
    c050:	3c 91       	ld	r19, X
    c052:	5a 97       	sbiw	r26, 0x1a	; 26
    c054:	5b 96       	adiw	r26, 0x1b	; 27
    c056:	4c 91       	ld	r20, X
    c058:	5b 97       	sbiw	r26, 0x1b	; 27
    c05a:	5c 96       	adiw	r26, 0x1c	; 28
    c05c:	5c 91       	ld	r21, X
    c05e:	5c 97       	sbiw	r26, 0x1c	; 28
    c060:	5d 96       	adiw	r26, 0x1d	; 29
    c062:	6c 91       	ld	r22, X
    c064:	5d 97       	sbiw	r26, 0x1d	; 29
    c066:	5e 96       	adiw	r26, 0x1e	; 30
    c068:	7c 91       	ld	r23, X
    c06a:	5e 97       	sbiw	r26, 0x1e	; 30
    c06c:	5f 96       	adiw	r26, 0x1f	; 31
    c06e:	8c 91       	ld	r24, X
    c070:	5f 97       	sbiw	r26, 0x1f	; 31
    c072:	90 96       	adiw	r26, 0x20	; 32
    c074:	9c 91       	ld	r25, X
    c076:	0e 94 3b 3e 	call	0x7c76	; 0x7c76 <_Z11applyMatrix7COORD2DPS_>
    c07a:	f3 01       	movw	r30, r6
    c07c:	21 8f       	std	Z+25, r18	; 0x19
    c07e:	32 8f       	std	Z+26, r19	; 0x1a
    c080:	43 8f       	std	Z+27, r20	; 0x1b
    c082:	54 8f       	std	Z+28, r21	; 0x1c
    c084:	65 8f       	std	Z+29, r22	; 0x1d
    c086:	76 8f       	std	Z+30, r23	; 0x1e
    c088:	87 8f       	std	Z+31, r24	; 0x1f
    c08a:	90 a3       	std	Z+32, r25	; 0x20
		anguloso = 0;
    c08c:	80 e0       	ldi	r24, 0x00	; 0
    c08e:	90 e0       	ldi	r25, 0x00	; 0
    c090:	a0 e0       	ldi	r26, 0x00	; 0
    c092:	b0 e0       	ldi	r27, 0x00	; 0
    c094:	80 93 ec 13 	sts	0x13EC, r24
    c098:	90 93 ed 13 	sts	0x13ED, r25
    c09c:	a0 93 ee 13 	sts	0x13EE, r26
    c0a0:	b0 93 ef 13 	sts	0x13EF, r27
	}
	
	// switch de seteo
	switch (comando) {
    c0a4:	ff e1       	ldi	r31, 0x1F	; 31
    c0a6:	5f 16       	cp	r5, r31
    c0a8:	09 f4       	brne	.+2      	; 0xc0ac <_ZN13RemoteControl9caminatasEh+0xce>
    c0aa:	00 c3       	rjmp	.+1536   	; 0xc6ac <_ZN13RemoteControl9caminatasEh+0x6ce>
    c0ac:	f5 15       	cp	r31, r5
    c0ae:	d8 f0       	brcs	.+54     	; 0xc0e6 <_ZN13RemoteControl9caminatasEh+0x108>
    c0b0:	83 e1       	ldi	r24, 0x13	; 19
    c0b2:	58 16       	cp	r5, r24
    c0b4:	09 f4       	brne	.+2      	; 0xc0b8 <_ZN13RemoteControl9caminatasEh+0xda>
    c0b6:	c9 c1       	rjmp	.+914    	; 0xc44a <_ZN13RemoteControl9caminatasEh+0x46c>
    c0b8:	85 15       	cp	r24, r5
    c0ba:	40 f0       	brcs	.+16     	; 0xc0cc <_ZN13RemoteControl9caminatasEh+0xee>
    c0bc:	95 e0       	ldi	r25, 0x05	; 5
    c0be:	59 16       	cp	r5, r25
    c0c0:	81 f1       	breq	.+96     	; 0xc122 <_ZN13RemoteControl9caminatasEh+0x144>
    c0c2:	a0 e1       	ldi	r26, 0x10	; 16
    c0c4:	5a 16       	cp	r5, r26
    c0c6:	09 f0       	breq	.+2      	; 0xc0ca <_ZN13RemoteControl9caminatasEh+0xec>
    c0c8:	b3 c4       	rjmp	.+2406   	; 0xca30 <_ZN13RemoteControl9caminatasEh+0xa52>
    c0ca:	4d c1       	rjmp	.+666    	; 0xc366 <_ZN13RemoteControl9caminatasEh+0x388>
    c0cc:	bb e1       	ldi	r27, 0x1B	; 27
    c0ce:	5b 16       	cp	r5, r27
    c0d0:	09 f4       	brne	.+2      	; 0xc0d4 <_ZN13RemoteControl9caminatasEh+0xf6>
    c0d2:	6c c2       	rjmp	.+1240   	; 0xc5ac <_ZN13RemoteControl9caminatasEh+0x5ce>
    c0d4:	ee e1       	ldi	r30, 0x1E	; 30
    c0d6:	5e 16       	cp	r5, r30
    c0d8:	09 f4       	brne	.+2      	; 0xc0dc <_ZN13RemoteControl9caminatasEh+0xfe>
    c0da:	f5 c3       	rjmp	.+2026   	; 0xc8c6 <_ZN13RemoteControl9caminatasEh+0x8e8>
    c0dc:	fa e1       	ldi	r31, 0x1A	; 26
    c0de:	5f 16       	cp	r5, r31
    c0e0:	09 f0       	breq	.+2      	; 0xc0e4 <_ZN13RemoteControl9caminatasEh+0x106>
    c0e2:	a6 c4       	rjmp	.+2380   	; 0xca30 <_ZN13RemoteControl9caminatasEh+0xa52>
    c0e4:	61 c3       	rjmp	.+1730   	; 0xc7a8 <_ZN13RemoteControl9caminatasEh+0x7ca>
    c0e6:	8c e5       	ldi	r24, 0x5C	; 92
    c0e8:	58 16       	cp	r5, r24
    c0ea:	49 f1       	breq	.+82     	; 0xc13e <_ZN13RemoteControl9caminatasEh+0x160>
    c0ec:	85 15       	cp	r24, r5
    c0ee:	68 f0       	brcs	.+26     	; 0xc10a <_ZN13RemoteControl9caminatasEh+0x12c>
    c0f0:	9f e4       	ldi	r25, 0x4F	; 79
    c0f2:	59 16       	cp	r5, r25
    c0f4:	09 f4       	brne	.+2      	; 0xc0f8 <_ZN13RemoteControl9caminatasEh+0x11a>
    c0f6:	dd c1       	rjmp	.+954    	; 0xc4b2 <_ZN13RemoteControl9caminatasEh+0x4d4>
    c0f8:	a3 e5       	ldi	r26, 0x53	; 83
    c0fa:	5a 16       	cp	r5, r26
    c0fc:	09 f4       	brne	.+2      	; 0xc100 <_ZN13RemoteControl9caminatasEh+0x122>
    c0fe:	3e c2       	rjmp	.+1148   	; 0xc57c <_ZN13RemoteControl9caminatasEh+0x59e>
    c100:	be e4       	ldi	r27, 0x4E	; 78
    c102:	5b 16       	cp	r5, r27
    c104:	09 f0       	breq	.+2      	; 0xc108 <_ZN13RemoteControl9caminatasEh+0x12a>
    c106:	94 c4       	rjmp	.+2344   	; 0xca30 <_ZN13RemoteControl9caminatasEh+0xa52>
    c108:	43 c1       	rjmp	.+646    	; 0xc390 <_ZN13RemoteControl9caminatasEh+0x3b2>
    c10a:	ee e5       	ldi	r30, 0x5E	; 94
    c10c:	5e 16       	cp	r5, r30
    c10e:	09 f4       	brne	.+2      	; 0xc112 <_ZN13RemoteControl9caminatasEh+0x134>
    c110:	a7 c0       	rjmp	.+334    	; 0xc260 <_ZN13RemoteControl9caminatasEh+0x282>
    c112:	5e 16       	cp	r5, r30
    c114:	08 f4       	brcc	.+2      	; 0xc118 <_ZN13RemoteControl9caminatasEh+0x13a>
    c116:	49 c0       	rjmp	.+146    	; 0xc1aa <_ZN13RemoteControl9caminatasEh+0x1cc>
    c118:	ff e5       	ldi	r31, 0x5F	; 95
    c11a:	5f 16       	cp	r5, r31
    c11c:	09 f0       	breq	.+2      	; 0xc120 <_ZN13RemoteControl9caminatasEh+0x142>
    c11e:	88 c4       	rjmp	.+2320   	; 0xca30 <_ZN13RemoteControl9caminatasEh+0xa52>
    c120:	28 c0       	rjmp	.+80     	; 0xc172 <_ZN13RemoteControl9caminatasEh+0x194>
		/// mega provisorio
		///////////////////////////
		case 5:
			mov.salto (velocidad, HALF_PI);
    c122:	d3 01       	movw	r26, r6
    c124:	4d 91       	ld	r20, X+
    c126:	5d 91       	ld	r21, X+
    c128:	6d 91       	ld	r22, X+
    c12a:	7c 91       	ld	r23, X
    c12c:	85 ee       	ldi	r24, 0xE5	; 229
    c12e:	9f e0       	ldi	r25, 0x0F	; 15
    c130:	0b ed       	ldi	r16, 0xDB	; 219
    c132:	1f e0       	ldi	r17, 0x0F	; 15
    c134:	29 ec       	ldi	r18, 0xC9	; 201
    c136:	3f e3       	ldi	r19, 0x3F	; 63
    c138:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_ZN10Movimiento5saltoEff>
    c13c:	c8 c4       	rjmp	.+2448   	; 0xcace <_ZN13RemoteControl9caminatasEh+0xaf0>
			break;
		///////////////////////////	
		/// termina mega provisorio
		case RC_UP:
			texto1 = "UP";
    c13e:	8e 01       	movw	r16, r28
    c140:	0f 5f       	subi	r16, 0xFF	; 255
    c142:	1f 4f       	sbci	r17, 0xFF	; 255
    c144:	c8 01       	movw	r24, r16
    c146:	66 ee       	ldi	r22, 0xE6	; 230
    c148:	72 e0       	ldi	r23, 0x02	; 2
    c14a:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    c14e:	c3 01       	movw	r24, r6
    c150:	88 96       	adiw	r24, 0x28	; 40
    c152:	b8 01       	movw	r22, r16
    c154:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    c158:	c8 01       	movw	r24, r16
    c15a:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			angulo = angulo_offset + HALF_PI;     
    c15e:	f3 01       	movw	r30, r6
    c160:	61 85       	ldd	r22, Z+9	; 0x09
    c162:	72 85       	ldd	r23, Z+10	; 0x0a
    c164:	83 85       	ldd	r24, Z+11	; 0x0b
    c166:	94 85       	ldd	r25, Z+12	; 0x0c
    c168:	2b ed       	ldi	r18, 0xDB	; 219
    c16a:	3f e0       	ldi	r19, 0x0F	; 15
    c16c:	49 ec       	ldi	r20, 0xC9	; 201
    c16e:	5f e3       	ldi	r21, 0x3F	; 63
    c170:	38 c0       	rjmp	.+112    	; 0xc1e2 <_ZN13RemoteControl9caminatasEh+0x204>
			break;
		
		case RC_DOWN:
			texto1 = "DN";
    c172:	8e 01       	movw	r16, r28
    c174:	09 5f       	subi	r16, 0xF9	; 249
    c176:	1f 4f       	sbci	r17, 0xFF	; 255
    c178:	c8 01       	movw	r24, r16
    c17a:	69 ee       	ldi	r22, 0xE9	; 233
    c17c:	72 e0       	ldi	r23, 0x02	; 2
    c17e:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    c182:	c3 01       	movw	r24, r6
    c184:	88 96       	adiw	r24, 0x28	; 40
    c186:	b8 01       	movw	r22, r16
    c188:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    c18c:	c8 01       	movw	r24, r16
    c18e:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			angulo = angulo_offset - HALF_PI;
    c192:	f3 01       	movw	r30, r6
    c194:	61 85       	ldd	r22, Z+9	; 0x09
    c196:	72 85       	ldd	r23, Z+10	; 0x0a
    c198:	83 85       	ldd	r24, Z+11	; 0x0b
    c19a:	94 85       	ldd	r25, Z+12	; 0x0c
    c19c:	2b ed       	ldi	r18, 0xDB	; 219
    c19e:	3f e0       	ldi	r19, 0x0F	; 15
    c1a0:	49 ec       	ldi	r20, 0xC9	; 201
    c1a2:	5f e3       	ldi	r21, 0x3F	; 63
    c1a4:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    c1a8:	1e c0       	rjmp	.+60     	; 0xc1e6 <_ZN13RemoteControl9caminatasEh+0x208>
			break;
		
		case RC_LEFT:
			texto1 = "LEFT";
    c1aa:	8e 01       	movw	r16, r28
    c1ac:	03 5f       	subi	r16, 0xF3	; 243
    c1ae:	1f 4f       	sbci	r17, 0xFF	; 255
    c1b0:	c8 01       	movw	r24, r16
    c1b2:	6c ee       	ldi	r22, 0xEC	; 236
    c1b4:	72 e0       	ldi	r23, 0x02	; 2
    c1b6:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    c1ba:	c3 01       	movw	r24, r6
    c1bc:	88 96       	adiw	r24, 0x28	; 40
    c1be:	b8 01       	movw	r22, r16
    c1c0:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    c1c4:	c8 01       	movw	r24, r16
    c1c6:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			if (modo == CAMINATAS1) {
    c1ca:	f3 01       	movw	r30, r6
    c1cc:	86 a1       	ldd	r24, Z+38	; 0x26
    c1ce:	81 30       	cpi	r24, 0x01	; 1
    c1d0:	91 f4       	brne	.+36     	; 0xc1f6 <_ZN13RemoteControl9caminatasEh+0x218>
				angulo = angulo_offset + PI;
    c1d2:	61 85       	ldd	r22, Z+9	; 0x09
    c1d4:	72 85       	ldd	r23, Z+10	; 0x0a
    c1d6:	83 85       	ldd	r24, Z+11	; 0x0b
    c1d8:	94 85       	ldd	r25, Z+12	; 0x0c
    c1da:	2b ed       	ldi	r18, 0xDB	; 219
    c1dc:	3f e0       	ldi	r19, 0x0F	; 15
    c1de:	49 e4       	ldi	r20, 0x49	; 73
    c1e0:	50 e4       	ldi	r21, 0x40	; 64
    c1e2:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    c1e6:	d3 01       	movw	r26, r6
    c1e8:	15 96       	adiw	r26, 0x05	; 5
    c1ea:	6d 93       	st	X+, r22
    c1ec:	7d 93       	st	X+, r23
    c1ee:	8d 93       	st	X+, r24
    c1f0:	9c 93       	st	X, r25
    c1f2:	18 97       	sbiw	r26, 0x08	; 8
    c1f4:	22 c4       	rjmp	.+2116   	; 0xca3a <_ZN13RemoteControl9caminatasEh+0xa5c>
			} else {
				anguloso = 0;
    c1f6:	80 e0       	ldi	r24, 0x00	; 0
    c1f8:	90 e0       	ldi	r25, 0x00	; 0
    c1fa:	a0 e0       	ldi	r26, 0x00	; 0
    c1fc:	b0 e0       	ldi	r27, 0x00	; 0
    c1fe:	80 93 ec 13 	sts	0x13EC, r24
    c202:	90 93 ed 13 	sts	0x13ED, r25
    c206:	a0 93 ee 13 	sts	0x13EE, r26
    c20a:	b0 93 ef 13 	sts	0x13EF, r27
				mov.mon_angulo = &anguloso;       // aca el ángulo offset se usaría para rotar el centro      
    c20e:	8c ee       	ldi	r24, 0xEC	; 236
    c210:	93 e1       	ldi	r25, 0x13	; 19
    c212:	90 93 e6 0f 	sts	0x0FE6, r25
    c216:	80 93 e5 0f 	sts	0x0FE5, r24
				mov.curva (velocidad, desplazamiento, (COORD2D) {0, 0} , CCW, marcha, largo_pasos);
    c21a:	f3 01       	movw	r30, r6
    c21c:	40 81       	ld	r20, Z
    c21e:	51 81       	ldd	r21, Z+1	; 0x01
    c220:	62 81       	ldd	r22, Z+2	; 0x02
    c222:	73 81       	ldd	r23, Z+3	; 0x03
    c224:	e5 88       	ldd	r14, Z+21	; 0x15
    c226:	f6 88       	ldd	r15, Z+22	; 0x16
    c228:	07 89       	ldd	r16, Z+23	; 0x17
    c22a:	10 8d       	ldd	r17, Z+24	; 0x18
    c22c:	de 01       	movw	r26, r28
    c22e:	ad 55       	subi	r26, 0x5D	; 93
    c230:	bf 4f       	sbci	r27, 0xFF	; 255
    c232:	e8 e8       	ldi	r30, 0x88	; 136
    c234:	f4 e0       	ldi	r31, 0x04	; 4
    c236:	88 e0       	ldi	r24, 0x08	; 8
    c238:	01 90       	ld	r0, Z+
    c23a:	0d 92       	st	X+, r0
    c23c:	81 50       	subi	r24, 0x01	; 1
    c23e:	e1 f7       	brne	.-8      	; 0xc238 <_ZN13RemoteControl9caminatasEh+0x25a>
    c240:	00 d0       	rcall	.+0      	; 0xc242 <_ZN13RemoteControl9caminatasEh+0x264>
    c242:	00 d0       	rcall	.+0      	; 0xc244 <_ZN13RemoteControl9caminatasEh+0x266>
    c244:	00 d0       	rcall	.+0      	; 0xc246 <_ZN13RemoteControl9caminatasEh+0x268>
    c246:	2d b7       	in	r18, 0x3d	; 61
    c248:	3e b7       	in	r19, 0x3e	; 62
    c24a:	2f 5f       	subi	r18, 0xFF	; 255
    c24c:	3f 4f       	sbci	r19, 0xFF	; 255
    c24e:	fe 01       	movw	r30, r28
    c250:	ed 55       	subi	r30, 0x5D	; 93
    c252:	ff 4f       	sbci	r31, 0xFF	; 255
    c254:	81 e0       	ldi	r24, 0x01	; 1
    c256:	ad b7       	in	r26, 0x3d	; 61
    c258:	be b7       	in	r27, 0x3e	; 62
    c25a:	11 96       	adiw	r26, 0x01	; 1
    c25c:	8c 93       	st	X, r24
    c25e:	58 c0       	rjmp	.+176    	; 0xc310 <_ZN13RemoteControl9caminatasEh+0x332>
			}
			break;
	
		case RC_RIGHT:
			texto1 = "RIGHT";
    c260:	8e 01       	movw	r16, r28
    c262:	0d 5e       	subi	r16, 0xED	; 237
    c264:	1f 4f       	sbci	r17, 0xFF	; 255
    c266:	c8 01       	movw	r24, r16
    c268:	61 ef       	ldi	r22, 0xF1	; 241
    c26a:	72 e0       	ldi	r23, 0x02	; 2
    c26c:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    c270:	c3 01       	movw	r24, r6
    c272:	88 96       	adiw	r24, 0x28	; 40
    c274:	b8 01       	movw	r22, r16
    c276:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    c27a:	c8 01       	movw	r24, r16
    c27c:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			if (modo == CAMINATAS1) {
    c280:	d3 01       	movw	r26, r6
    c282:	96 96       	adiw	r26, 0x26	; 38
    c284:	8c 91       	ld	r24, X
    c286:	96 97       	sbiw	r26, 0x26	; 38
    c288:	81 30       	cpi	r24, 0x01	; 1
    c28a:	61 f4       	brne	.+24     	; 0xc2a4 <_ZN13RemoteControl9caminatasEh+0x2c6>
				angulo = angulo_offset;
    c28c:	19 96       	adiw	r26, 0x09	; 9
    c28e:	8d 91       	ld	r24, X+
    c290:	9d 91       	ld	r25, X+
    c292:	0d 90       	ld	r0, X+
    c294:	bc 91       	ld	r27, X
    c296:	a0 2d       	mov	r26, r0
    c298:	f3 01       	movw	r30, r6
    c29a:	85 83       	std	Z+5, r24	; 0x05
    c29c:	96 83       	std	Z+6, r25	; 0x06
    c29e:	a7 83       	std	Z+7, r26	; 0x07
    c2a0:	b0 87       	std	Z+8, r27	; 0x08
    c2a2:	cb c3       	rjmp	.+1942   	; 0xca3a <_ZN13RemoteControl9caminatasEh+0xa5c>
			} else {
				anguloso = 0;
    c2a4:	80 e0       	ldi	r24, 0x00	; 0
    c2a6:	90 e0       	ldi	r25, 0x00	; 0
    c2a8:	a0 e0       	ldi	r26, 0x00	; 0
    c2aa:	b0 e0       	ldi	r27, 0x00	; 0
    c2ac:	80 93 ec 13 	sts	0x13EC, r24
    c2b0:	90 93 ed 13 	sts	0x13ED, r25
    c2b4:	a0 93 ee 13 	sts	0x13EE, r26
    c2b8:	b0 93 ef 13 	sts	0x13EF, r27
				mov.mon_angulo = &anguloso;       // aca el ángulo offset se usaría para rotar el centro 
    c2bc:	8c ee       	ldi	r24, 0xEC	; 236
    c2be:	93 e1       	ldi	r25, 0x13	; 19
    c2c0:	90 93 e6 0f 	sts	0x0FE6, r25
    c2c4:	80 93 e5 0f 	sts	0x0FE5, r24
				mov.curva (velocidad, desplazamiento, (COORD2D) {0, 0} , CW, marcha, largo_pasos);
    c2c8:	d3 01       	movw	r26, r6
    c2ca:	4d 91       	ld	r20, X+
    c2cc:	5d 91       	ld	r21, X+
    c2ce:	6d 91       	ld	r22, X+
    c2d0:	7c 91       	ld	r23, X
    c2d2:	13 97       	sbiw	r26, 0x03	; 3
    c2d4:	55 96       	adiw	r26, 0x15	; 21
    c2d6:	ed 90       	ld	r14, X+
    c2d8:	fd 90       	ld	r15, X+
    c2da:	0d 91       	ld	r16, X+
    c2dc:	1c 91       	ld	r17, X
    c2de:	58 97       	sbiw	r26, 0x18	; 24
    c2e0:	de 01       	movw	r26, r28
    c2e2:	a5 55       	subi	r26, 0x55	; 85
    c2e4:	bf 4f       	sbci	r27, 0xFF	; 255
    c2e6:	e0 e8       	ldi	r30, 0x80	; 128
    c2e8:	f4 e0       	ldi	r31, 0x04	; 4
    c2ea:	88 e0       	ldi	r24, 0x08	; 8
    c2ec:	01 90       	ld	r0, Z+
    c2ee:	0d 92       	st	X+, r0
    c2f0:	81 50       	subi	r24, 0x01	; 1
    c2f2:	e1 f7       	brne	.-8      	; 0xc2ec <_ZN13RemoteControl9caminatasEh+0x30e>
    c2f4:	00 d0       	rcall	.+0      	; 0xc2f6 <_ZN13RemoteControl9caminatasEh+0x318>
    c2f6:	00 d0       	rcall	.+0      	; 0xc2f8 <_ZN13RemoteControl9caminatasEh+0x31a>
    c2f8:	00 d0       	rcall	.+0      	; 0xc2fa <_ZN13RemoteControl9caminatasEh+0x31c>
    c2fa:	2d b7       	in	r18, 0x3d	; 61
    c2fc:	3e b7       	in	r19, 0x3e	; 62
    c2fe:	2f 5f       	subi	r18, 0xFF	; 255
    c300:	3f 4f       	sbci	r19, 0xFF	; 255
    c302:	fe 01       	movw	r30, r28
    c304:	e5 55       	subi	r30, 0x55	; 85
    c306:	ff 4f       	sbci	r31, 0xFF	; 255
    c308:	ad b7       	in	r26, 0x3d	; 61
    c30a:	be b7       	in	r27, 0x3e	; 62
    c30c:	11 96       	adiw	r26, 0x01	; 1
    c30e:	1c 92       	st	X, r1
    c310:	d3 01       	movw	r26, r6
    c312:	14 96       	adiw	r26, 0x04	; 4
    c314:	8c 91       	ld	r24, X
    c316:	d9 01       	movw	r26, r18
    c318:	11 96       	adiw	r26, 0x01	; 1
    c31a:	8c 93       	st	X, r24
    c31c:	d3 01       	movw	r26, r6
    c31e:	1d 96       	adiw	r26, 0x0d	; 13
    c320:	ad 90       	ld	r10, X+
    c322:	bd 90       	ld	r11, X+
    c324:	cd 90       	ld	r12, X+
    c326:	dc 90       	ld	r13, X
    c328:	50 97       	sbiw	r26, 0x10	; 16
    c32a:	d9 01       	movw	r26, r18
    c32c:	12 96       	adiw	r26, 0x02	; 2
    c32e:	ad 92       	st	X+, r10
    c330:	bd 92       	st	X+, r11
    c332:	cd 92       	st	X+, r12
    c334:	dc 92       	st	X, r13
    c336:	15 97       	sbiw	r26, 0x05	; 5
    c338:	85 ee       	ldi	r24, 0xE5	; 229
    c33a:	9f e0       	ldi	r25, 0x0F	; 15
    c33c:	98 01       	movw	r18, r16
    c33e:	87 01       	movw	r16, r14
    c340:	80 80       	ld	r8, Z
    c342:	91 80       	ldd	r9, Z+1	; 0x01
    c344:	a2 80       	ldd	r10, Z+2	; 0x02
    c346:	b3 80       	ldd	r11, Z+3	; 0x03
    c348:	c4 80       	ldd	r12, Z+4	; 0x04
    c34a:	d5 80       	ldd	r13, Z+5	; 0x05
    c34c:	e6 80       	ldd	r14, Z+6	; 0x06
    c34e:	f7 80       	ldd	r15, Z+7	; 0x07
    c350:	0e 94 de 31 	call	0x63bc	; 0x63bc <_ZN10Movimiento5curvaEff7COORD2Dbhf>
    c354:	ed b7       	in	r30, 0x3d	; 61
    c356:	fe b7       	in	r31, 0x3e	; 62
    c358:	36 96       	adiw	r30, 0x06	; 6
    c35a:	0f b6       	in	r0, 0x3f	; 63
    c35c:	f8 94       	cli
    c35e:	fe bf       	out	0x3e, r31	; 62
    c360:	0f be       	out	0x3f, r0	; 63
    c362:	ed bf       	out	0x3d, r30	; 61
    c364:	6a c3       	rjmp	.+1748   	; 0xca3a <_ZN13RemoteControl9caminatasEh+0xa5c>
			}
			break;

		case RC_MENU:
			texto1 = "MENU";
    c366:	8e 01       	movw	r16, r28
    c368:	07 5e       	subi	r16, 0xE7	; 231
    c36a:	1f 4f       	sbci	r17, 0xFF	; 255
    c36c:	c8 01       	movw	r24, r16
    c36e:	67 ef       	ldi	r22, 0xF7	; 247
    c370:	72 e0       	ldi	r23, 0x02	; 2
    c372:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    c376:	c3 01       	movw	r24, r6
    c378:	88 96       	adiw	r24, 0x28	; 40
    c37a:	b8 01       	movw	r22, r16
    c37c:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    c380:	c8 01       	movw	r24, r16
    c382:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			mov.mon_angulo = NULL;
    c386:	10 92 e6 0f 	sts	0x0FE6, r1
    c38a:	10 92 e5 0f 	sts	0x0FE5, r1
    c38e:	79 c0       	rjmp	.+242    	; 0xc482 <_ZN13RemoteControl9caminatasEh+0x4a4>
			mov.curva (velocidad, desplazamiento, centro_caminata, CCW, marcha, largo_pasos);
			break;
			
		case RC_EXIT:
			texto1 = "EXIT";
    c390:	8e 01       	movw	r16, r28
    c392:	01 5e       	subi	r16, 0xE1	; 225
    c394:	1f 4f       	sbci	r17, 0xFF	; 255
    c396:	c8 01       	movw	r24, r16
    c398:	6c ef       	ldi	r22, 0xFC	; 252
    c39a:	72 e0       	ldi	r23, 0x02	; 2
    c39c:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    c3a0:	c3 01       	movw	r24, r6
    c3a2:	88 96       	adiw	r24, 0x28	; 40
    c3a4:	b8 01       	movw	r22, r16
    c3a6:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    c3aa:	c8 01       	movw	r24, r16
    c3ac:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			mov.mon_angulo = NULL;
    c3b0:	10 92 e6 0f 	sts	0x0FE6, r1
    c3b4:	10 92 e5 0f 	sts	0x0FE5, r1
			mov.curva (velocidad, desplazamiento, centro_caminata, CW, marcha, largo_pasos);
    c3b8:	00 d0       	rcall	.+0      	; 0xc3ba <_ZN13RemoteControl9caminatasEh+0x3dc>
    c3ba:	00 d0       	rcall	.+0      	; 0xc3bc <_ZN13RemoteControl9caminatasEh+0x3de>
    c3bc:	00 d0       	rcall	.+0      	; 0xc3be <_ZN13RemoteControl9caminatasEh+0x3e0>
    c3be:	ed b7       	in	r30, 0x3d	; 61
    c3c0:	fe b7       	in	r31, 0x3e	; 62
    c3c2:	31 96       	adiw	r30, 0x01	; 1
    c3c4:	d3 01       	movw	r26, r6
    c3c6:	4d 91       	ld	r20, X+
    c3c8:	5d 91       	ld	r21, X+
    c3ca:	6d 91       	ld	r22, X+
    c3cc:	7c 91       	ld	r23, X
    c3ce:	13 97       	sbiw	r26, 0x03	; 3
    c3d0:	55 96       	adiw	r26, 0x15	; 21
    c3d2:	0d 91       	ld	r16, X+
    c3d4:	1d 91       	ld	r17, X+
    c3d6:	2d 91       	ld	r18, X+
    c3d8:	3c 91       	ld	r19, X
    c3da:	58 97       	sbiw	r26, 0x18	; 24
    c3dc:	ad b7       	in	r26, 0x3d	; 61
    c3de:	be b7       	in	r27, 0x3e	; 62
    c3e0:	11 96       	adiw	r26, 0x01	; 1
    c3e2:	1c 92       	st	X, r1
    c3e4:	d3 01       	movw	r26, r6
    c3e6:	14 96       	adiw	r26, 0x04	; 4
    c3e8:	8c 91       	ld	r24, X
    c3ea:	14 97       	sbiw	r26, 0x04	; 4
    c3ec:	81 83       	std	Z+1, r24	; 0x01
    c3ee:	1d 96       	adiw	r26, 0x0d	; 13
    c3f0:	cd 90       	ld	r12, X+
    c3f2:	dd 90       	ld	r13, X+
    c3f4:	ed 90       	ld	r14, X+
    c3f6:	fc 90       	ld	r15, X
    c3f8:	50 97       	sbiw	r26, 0x10	; 16
    c3fa:	c2 82       	std	Z+2, r12	; 0x02
    c3fc:	d3 82       	std	Z+3, r13	; 0x03
    c3fe:	e4 82       	std	Z+4, r14	; 0x04
    c400:	f5 82       	std	Z+5, r15	; 0x05
    c402:	85 ee       	ldi	r24, 0xE5	; 229
    c404:	9f e0       	ldi	r25, 0x0F	; 15
    c406:	59 96       	adiw	r26, 0x19	; 25
    c408:	8c 90       	ld	r8, X
    c40a:	59 97       	sbiw	r26, 0x19	; 25
    c40c:	5a 96       	adiw	r26, 0x1a	; 26
    c40e:	9c 90       	ld	r9, X
    c410:	5a 97       	sbiw	r26, 0x1a	; 26
    c412:	5b 96       	adiw	r26, 0x1b	; 27
    c414:	ac 90       	ld	r10, X
    c416:	5b 97       	sbiw	r26, 0x1b	; 27
    c418:	5c 96       	adiw	r26, 0x1c	; 28
    c41a:	bc 90       	ld	r11, X
    c41c:	5c 97       	sbiw	r26, 0x1c	; 28
    c41e:	5d 96       	adiw	r26, 0x1d	; 29
    c420:	cc 90       	ld	r12, X
    c422:	5d 97       	sbiw	r26, 0x1d	; 29
    c424:	5e 96       	adiw	r26, 0x1e	; 30
    c426:	dc 90       	ld	r13, X
    c428:	5e 97       	sbiw	r26, 0x1e	; 30
    c42a:	5f 96       	adiw	r26, 0x1f	; 31
    c42c:	ec 90       	ld	r14, X
    c42e:	5f 97       	sbiw	r26, 0x1f	; 31
    c430:	90 96       	adiw	r26, 0x20	; 32
    c432:	fc 90       	ld	r15, X
    c434:	0e 94 de 31 	call	0x63bc	; 0x63bc <_ZN10Movimiento5curvaEff7COORD2Dbhf>
    c438:	ed b7       	in	r30, 0x3d	; 61
    c43a:	fe b7       	in	r31, 0x3e	; 62
    c43c:	36 96       	adiw	r30, 0x06	; 6
    c43e:	0f b6       	in	r0, 0x3f	; 63
    c440:	f8 94       	cli
    c442:	fe bf       	out	0x3e, r31	; 62
    c444:	0f be       	out	0x3f, r0	; 63
    c446:	ed bf       	out	0x3d, r30	; 61
    c448:	42 c3       	rjmp	.+1668   	; 0xcace <_ZN13RemoteControl9caminatasEh+0xaf0>
			break;
			
		case RC_MTS:
			texto1 = "MTS";
    c44a:	8e 01       	movw	r16, r28
    c44c:	0b 5d       	subi	r16, 0xDB	; 219
    c44e:	1f 4f       	sbci	r17, 0xFF	; 255
    c450:	c8 01       	movw	r24, r16
    c452:	61 e0       	ldi	r22, 0x01	; 1
    c454:	73 e0       	ldi	r23, 0x03	; 3
    c456:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    c45a:	c3 01       	movw	r24, r6
    c45c:	88 96       	adiw	r24, 0x28	; 40
    c45e:	b8 01       	movw	r22, r16
    c460:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    c464:	c8 01       	movw	r24, r16
    c466:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			mov.mon_angulo = &angulo_offset;
    c46a:	89 e0       	ldi	r24, 0x09	; 9
    c46c:	90 e0       	ldi	r25, 0x00	; 0
    c46e:	68 0e       	add	r6, r24
    c470:	79 1e       	adc	r7, r25
    c472:	70 92 e6 0f 	sts	0x0FE6, r7
    c476:	60 92 e5 0f 	sts	0x0FE5, r6
    c47a:	a7 ef       	ldi	r26, 0xF7	; 247
    c47c:	bf ef       	ldi	r27, 0xFF	; 255
    c47e:	6a 0e       	add	r6, r26
    c480:	7b 1e       	adc	r7, r27
			mov.curva (velocidad, desplazamiento, centro_caminata, CCW, marcha, largo_pasos);
    c482:	00 d0       	rcall	.+0      	; 0xc484 <_ZN13RemoteControl9caminatasEh+0x4a6>
    c484:	00 d0       	rcall	.+0      	; 0xc486 <_ZN13RemoteControl9caminatasEh+0x4a8>
    c486:	00 d0       	rcall	.+0      	; 0xc488 <_ZN13RemoteControl9caminatasEh+0x4aa>
    c488:	ed b7       	in	r30, 0x3d	; 61
    c48a:	fe b7       	in	r31, 0x3e	; 62
    c48c:	31 96       	adiw	r30, 0x01	; 1
    c48e:	d3 01       	movw	r26, r6
    c490:	4d 91       	ld	r20, X+
    c492:	5d 91       	ld	r21, X+
    c494:	6d 91       	ld	r22, X+
    c496:	7c 91       	ld	r23, X
    c498:	13 97       	sbiw	r26, 0x03	; 3
    c49a:	55 96       	adiw	r26, 0x15	; 21
    c49c:	0d 91       	ld	r16, X+
    c49e:	1d 91       	ld	r17, X+
    c4a0:	2d 91       	ld	r18, X+
    c4a2:	3c 91       	ld	r19, X
    c4a4:	58 97       	sbiw	r26, 0x18	; 24
    c4a6:	81 e0       	ldi	r24, 0x01	; 1
    c4a8:	ad b7       	in	r26, 0x3d	; 61
    c4aa:	be b7       	in	r27, 0x3e	; 62
    c4ac:	11 96       	adiw	r26, 0x01	; 1
    c4ae:	8c 93       	st	X, r24
    c4b0:	99 cf       	rjmp	.-206    	; 0xc3e4 <_ZN13RemoteControl9caminatasEh+0x406>
			break;
			
		case RC_CCTTX:
			mov.mon_angulo = &angulo_offset;
    c4b2:	89 e0       	ldi	r24, 0x09	; 9
    c4b4:	90 e0       	ldi	r25, 0x00	; 0
    c4b6:	68 0e       	add	r6, r24
    c4b8:	79 1e       	adc	r7, r25
    c4ba:	70 92 e6 0f 	sts	0x0FE6, r7
    c4be:	60 92 e5 0f 	sts	0x0FE5, r6
    c4c2:	a7 ef       	ldi	r26, 0xF7	; 247
    c4c4:	bf ef       	ldi	r27, 0xFF	; 255
    c4c6:	6a 0e       	add	r6, r26
    c4c8:	7b 1e       	adc	r7, r27
			mov.curva (velocidad, desplazamiento, centro_caminata, CW, marcha, largo_pasos);
    c4ca:	00 d0       	rcall	.+0      	; 0xc4cc <_ZN13RemoteControl9caminatasEh+0x4ee>
    c4cc:	00 d0       	rcall	.+0      	; 0xc4ce <_ZN13RemoteControl9caminatasEh+0x4f0>
    c4ce:	00 d0       	rcall	.+0      	; 0xc4d0 <_ZN13RemoteControl9caminatasEh+0x4f2>
    c4d0:	ed b7       	in	r30, 0x3d	; 61
    c4d2:	fe b7       	in	r31, 0x3e	; 62
    c4d4:	31 96       	adiw	r30, 0x01	; 1
    c4d6:	d3 01       	movw	r26, r6
    c4d8:	4d 91       	ld	r20, X+
    c4da:	5d 91       	ld	r21, X+
    c4dc:	6d 91       	ld	r22, X+
    c4de:	7c 91       	ld	r23, X
    c4e0:	13 97       	sbiw	r26, 0x03	; 3
    c4e2:	55 96       	adiw	r26, 0x15	; 21
    c4e4:	0d 91       	ld	r16, X+
    c4e6:	1d 91       	ld	r17, X+
    c4e8:	2d 91       	ld	r18, X+
    c4ea:	3c 91       	ld	r19, X
    c4ec:	58 97       	sbiw	r26, 0x18	; 24
    c4ee:	ad b7       	in	r26, 0x3d	; 61
    c4f0:	be b7       	in	r27, 0x3e	; 62
    c4f2:	11 96       	adiw	r26, 0x01	; 1
    c4f4:	1c 92       	st	X, r1
    c4f6:	d3 01       	movw	r26, r6
    c4f8:	14 96       	adiw	r26, 0x04	; 4
    c4fa:	8c 91       	ld	r24, X
    c4fc:	14 97       	sbiw	r26, 0x04	; 4
    c4fe:	81 83       	std	Z+1, r24	; 0x01
    c500:	1d 96       	adiw	r26, 0x0d	; 13
    c502:	cd 90       	ld	r12, X+
    c504:	dd 90       	ld	r13, X+
    c506:	ed 90       	ld	r14, X+
    c508:	fc 90       	ld	r15, X
    c50a:	50 97       	sbiw	r26, 0x10	; 16
    c50c:	c2 82       	std	Z+2, r12	; 0x02
    c50e:	d3 82       	std	Z+3, r13	; 0x03
    c510:	e4 82       	std	Z+4, r14	; 0x04
    c512:	f5 82       	std	Z+5, r15	; 0x05
    c514:	85 ee       	ldi	r24, 0xE5	; 229
    c516:	9f e0       	ldi	r25, 0x0F	; 15
    c518:	59 96       	adiw	r26, 0x19	; 25
    c51a:	8c 90       	ld	r8, X
    c51c:	59 97       	sbiw	r26, 0x19	; 25
    c51e:	5a 96       	adiw	r26, 0x1a	; 26
    c520:	9c 90       	ld	r9, X
    c522:	5a 97       	sbiw	r26, 0x1a	; 26
    c524:	5b 96       	adiw	r26, 0x1b	; 27
    c526:	ac 90       	ld	r10, X
    c528:	5b 97       	sbiw	r26, 0x1b	; 27
    c52a:	5c 96       	adiw	r26, 0x1c	; 28
    c52c:	bc 90       	ld	r11, X
    c52e:	5c 97       	sbiw	r26, 0x1c	; 28
    c530:	5d 96       	adiw	r26, 0x1d	; 29
    c532:	cc 90       	ld	r12, X
    c534:	5d 97       	sbiw	r26, 0x1d	; 29
    c536:	5e 96       	adiw	r26, 0x1e	; 30
    c538:	dc 90       	ld	r13, X
    c53a:	5e 97       	sbiw	r26, 0x1e	; 30
    c53c:	5f 96       	adiw	r26, 0x1f	; 31
    c53e:	ec 90       	ld	r14, X
    c540:	5f 97       	sbiw	r26, 0x1f	; 31
    c542:	90 96       	adiw	r26, 0x20	; 32
    c544:	fc 90       	ld	r15, X
    c546:	0e 94 de 31 	call	0x63bc	; 0x63bc <_ZN10Movimiento5curvaEff7COORD2Dbhf>
			texto1 = "CC_TTX";
    c54a:	ed b7       	in	r30, 0x3d	; 61
    c54c:	fe b7       	in	r31, 0x3e	; 62
    c54e:	36 96       	adiw	r30, 0x06	; 6
    c550:	0f b6       	in	r0, 0x3f	; 63
    c552:	f8 94       	cli
    c554:	fe bf       	out	0x3e, r31	; 62
    c556:	0f be       	out	0x3f, r0	; 63
    c558:	ed bf       	out	0x3d, r30	; 61
    c55a:	8e 01       	movw	r16, r28
    c55c:	05 5d       	subi	r16, 0xD5	; 213
    c55e:	1f 4f       	sbci	r17, 0xFF	; 255
    c560:	c8 01       	movw	r24, r16
    c562:	65 e0       	ldi	r22, 0x05	; 5
    c564:	73 e0       	ldi	r23, 0x03	; 3
    c566:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    c56a:	c3 01       	movw	r24, r6
    c56c:	88 96       	adiw	r24, 0x28	; 40
    c56e:	b8 01       	movw	r22, r16
    c570:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    c574:	c8 01       	movw	r24, r16
    c576:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    c57a:	a9 c2       	rjmp	.+1362   	; 0xcace <_ZN13RemoteControl9caminatasEh+0xaf0>
			break;
			
		case RC_ENTER1:
			texto1 = "STOP";
    c57c:	8e 01       	movw	r16, r28
    c57e:	0f 5c       	subi	r16, 0xCF	; 207
    c580:	1f 4f       	sbci	r17, 0xFF	; 255
    c582:	c8 01       	movw	r24, r16
    c584:	60 e7       	ldi	r22, 0x70	; 112
    c586:	72 e0       	ldi	r23, 0x02	; 2
    c588:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    c58c:	c3 01       	movw	r24, r6
    c58e:	88 96       	adiw	r24, 0x28	; 40
    c590:	b8 01       	movw	r22, r16
    c592:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    c596:	c8 01       	movw	r24, r16
    c598:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			mov.stop();
    c59c:	85 ee       	ldi	r24, 0xE5	; 229
    c59e:	9f e0       	ldi	r25, 0x0F	; 15
    c5a0:	0e 94 28 15 	call	0x2a50	; 0x2a50 <_ZN10Movimiento4stopEv>
			isMoving = false;
    c5a4:	d3 01       	movw	r26, r6
    c5a6:	95 96       	adiw	r26, 0x25	; 37
    c5a8:	1c 92       	st	X, r1
    c5aa:	91 c2       	rjmp	.+1314   	; 0xcace <_ZN13RemoteControl9caminatasEh+0xaf0>
			break;
			
		case RC_VOL_UP:
			if (pantalla.isBusy()) {break;}
    c5ac:	83 ea       	ldi	r24, 0xA3	; 163
    c5ae:	93 e1       	ldi	r25, 0x13	; 19
    c5b0:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    c5b4:	88 23       	and	r24, r24
    c5b6:	09 f0       	breq	.+2      	; 0xc5ba <_ZN13RemoteControl9caminatasEh+0x5dc>
    c5b8:	3b c2       	rjmp	.+1142   	; 0xca30 <_ZN13RemoteControl9caminatasEh+0xa52>
			velocidad = constrain (velocidad+inc, 1, 50);
    c5ba:	f3 01       	movw	r30, r6
    c5bc:	60 81       	ld	r22, Z
    c5be:	71 81       	ldd	r23, Z+1	; 0x01
    c5c0:	82 81       	ldd	r24, Z+2	; 0x02
    c5c2:	93 81       	ldd	r25, Z+3	; 0x03
    c5c4:	21 a1       	ldd	r18, Z+33	; 0x21
    c5c6:	32 a1       	ldd	r19, Z+34	; 0x22
    c5c8:	43 a1       	ldd	r20, Z+35	; 0x23
    c5ca:	54 a1       	ldd	r21, Z+36	; 0x24
    c5cc:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    c5d0:	7b 01       	movw	r14, r22
    c5d2:	8c 01       	movw	r16, r24
    c5d4:	20 e0       	ldi	r18, 0x00	; 0
    c5d6:	30 e0       	ldi	r19, 0x00	; 0
    c5d8:	40 e8       	ldi	r20, 0x80	; 128
    c5da:	5f e3       	ldi	r21, 0x3F	; 63
    c5dc:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    c5e0:	88 23       	and	r24, r24
    c5e2:	5c f4       	brge	.+22     	; 0xc5fa <_ZN13RemoteControl9caminatasEh+0x61c>
    c5e4:	0f 2e       	mov	r0, r31
    c5e6:	f0 e0       	ldi	r31, 0x00	; 0
    c5e8:	ef 2e       	mov	r14, r31
    c5ea:	f0 e0       	ldi	r31, 0x00	; 0
    c5ec:	ff 2e       	mov	r15, r31
    c5ee:	f0 e8       	ldi	r31, 0x80	; 128
    c5f0:	0f 2f       	mov	r16, r31
    c5f2:	ff e3       	ldi	r31, 0x3F	; 63
    c5f4:	1f 2f       	mov	r17, r31
    c5f6:	f0 2d       	mov	r31, r0
    c5f8:	14 c0       	rjmp	.+40     	; 0xc622 <_ZN13RemoteControl9caminatasEh+0x644>
    c5fa:	c8 01       	movw	r24, r16
    c5fc:	b7 01       	movw	r22, r14
    c5fe:	20 e0       	ldi	r18, 0x00	; 0
    c600:	30 e0       	ldi	r19, 0x00	; 0
    c602:	48 e4       	ldi	r20, 0x48	; 72
    c604:	52 e4       	ldi	r21, 0x42	; 66
    c606:	0e 94 8c 7c 	call	0xf918	; 0xf918 <__gesf2>
    c60a:	18 16       	cp	r1, r24
    c60c:	54 f4       	brge	.+20     	; 0xc622 <_ZN13RemoteControl9caminatasEh+0x644>
    c60e:	0f 2e       	mov	r0, r31
    c610:	f0 e0       	ldi	r31, 0x00	; 0
    c612:	ef 2e       	mov	r14, r31
    c614:	f0 e0       	ldi	r31, 0x00	; 0
    c616:	ff 2e       	mov	r15, r31
    c618:	f8 e4       	ldi	r31, 0x48	; 72
    c61a:	0f 2f       	mov	r16, r31
    c61c:	f2 e4       	ldi	r31, 0x42	; 66
    c61e:	1f 2f       	mov	r17, r31
    c620:	f0 2d       	mov	r31, r0
    c622:	d3 01       	movw	r26, r6
    c624:	ed 92       	st	X+, r14
    c626:	fd 92       	st	X+, r15
    c628:	0d 93       	st	X+, r16
    c62a:	1c 93       	st	X, r17
    c62c:	13 97       	sbiw	r26, 0x03	; 3
			texto1 = "Vel " + float2string (velocidad);
    c62e:	ad e3       	ldi	r26, 0x3D	; 61
    c630:	ca 2e       	mov	r12, r26
    c632:	d1 2c       	mov	r13, r1
    c634:	cc 0e       	add	r12, r28
    c636:	dd 1e       	adc	r13, r29
    c638:	c6 01       	movw	r24, r12
    c63a:	61 ee       	ldi	r22, 0xE1	; 225
    c63c:	72 e0       	ldi	r23, 0x02	; 2
    c63e:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    c642:	f7 e3       	ldi	r31, 0x37	; 55
    c644:	ef 2e       	mov	r14, r31
    c646:	f1 2c       	mov	r15, r1
    c648:	ec 0e       	add	r14, r28
    c64a:	fd 1e       	adc	r15, r29
    c64c:	f3 01       	movw	r30, r6
    c64e:	40 81       	ld	r20, Z
    c650:	51 81       	ldd	r21, Z+1	; 0x01
    c652:	62 81       	ldd	r22, Z+2	; 0x02
    c654:	73 81       	ldd	r23, Z+3	; 0x03
    c656:	c7 01       	movw	r24, r14
    c658:	0e 94 8b 72 	call	0xe516	; 0xe516 <_Z12float2stringf>
    c65c:	8e 01       	movw	r16, r28
    c65e:	0d 5b       	subi	r16, 0xBD	; 189
    c660:	1f 4f       	sbci	r17, 0xFF	; 255
    c662:	c8 01       	movw	r24, r16
    c664:	b6 01       	movw	r22, r12
    c666:	a7 01       	movw	r20, r14
    c668:	0e 94 98 32 	call	0x6530	; 0x6530 <_Zpl6StringRKS_>
    c66c:	c3 01       	movw	r24, r6
    c66e:	88 96       	adiw	r24, 0x28	; 40
    c670:	b8 01       	movw	r22, r16
    c672:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    c676:	c8 01       	movw	r24, r16
    c678:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    c67c:	c7 01       	movw	r24, r14
    c67e:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    c682:	c6 01       	movw	r24, r12
    c684:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			if (isMoving) {mov.set_vel (velocidad);}
    c688:	d3 01       	movw	r26, r6
    c68a:	95 96       	adiw	r26, 0x25	; 37
    c68c:	8c 91       	ld	r24, X
    c68e:	95 97       	sbiw	r26, 0x25	; 37
    c690:	88 23       	and	r24, r24
    c692:	41 f0       	breq	.+16     	; 0xc6a4 <_ZN13RemoteControl9caminatasEh+0x6c6>
    c694:	4d 91       	ld	r20, X+
    c696:	5d 91       	ld	r21, X+
    c698:	6d 91       	ld	r22, X+
    c69a:	7c 91       	ld	r23, X
    c69c:	85 ee       	ldi	r24, 0xE5	; 229
    c69e:	9f e0       	ldi	r25, 0x0F	; 15
    c6a0:	0e 94 32 30 	call	0x6064	; 0x6064 <_ZN10Movimiento7set_velEf>
			retardo = true;
    c6a4:	81 e0       	ldi	r24, 0x01	; 1
    c6a6:	f3 01       	movw	r30, r6
    c6a8:	86 ab       	std	Z+54, r24	; 0x36
    c6aa:	11 c2       	rjmp	.+1058   	; 0xcace <_ZN13RemoteControl9caminatasEh+0xaf0>
			break;
			
		case RC_VOL_DN:
			if (pantalla.isBusy()) {break;}
    c6ac:	83 ea       	ldi	r24, 0xA3	; 163
    c6ae:	93 e1       	ldi	r25, 0x13	; 19
    c6b0:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    c6b4:	88 23       	and	r24, r24
    c6b6:	09 f0       	breq	.+2      	; 0xc6ba <_ZN13RemoteControl9caminatasEh+0x6dc>
    c6b8:	bb c1       	rjmp	.+886    	; 0xca30 <_ZN13RemoteControl9caminatasEh+0xa52>
			velocidad = constrain (velocidad-inc, 1, 50);
    c6ba:	d3 01       	movw	r26, r6
    c6bc:	6d 91       	ld	r22, X+
    c6be:	7d 91       	ld	r23, X+
    c6c0:	8d 91       	ld	r24, X+
    c6c2:	9c 91       	ld	r25, X
    c6c4:	13 97       	sbiw	r26, 0x03	; 3
    c6c6:	91 96       	adiw	r26, 0x21	; 33
    c6c8:	2d 91       	ld	r18, X+
    c6ca:	3d 91       	ld	r19, X+
    c6cc:	4d 91       	ld	r20, X+
    c6ce:	5c 91       	ld	r21, X
    c6d0:	94 97       	sbiw	r26, 0x24	; 36
    c6d2:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    c6d6:	7b 01       	movw	r14, r22
    c6d8:	8c 01       	movw	r16, r24
    c6da:	20 e0       	ldi	r18, 0x00	; 0
    c6dc:	30 e0       	ldi	r19, 0x00	; 0
    c6de:	40 e8       	ldi	r20, 0x80	; 128
    c6e0:	5f e3       	ldi	r21, 0x3F	; 63
    c6e2:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    c6e6:	88 23       	and	r24, r24
    c6e8:	5c f4       	brge	.+22     	; 0xc700 <_ZN13RemoteControl9caminatasEh+0x722>
    c6ea:	0f 2e       	mov	r0, r31
    c6ec:	f0 e0       	ldi	r31, 0x00	; 0
    c6ee:	ef 2e       	mov	r14, r31
    c6f0:	f0 e0       	ldi	r31, 0x00	; 0
    c6f2:	ff 2e       	mov	r15, r31
    c6f4:	f0 e8       	ldi	r31, 0x80	; 128
    c6f6:	0f 2f       	mov	r16, r31
    c6f8:	ff e3       	ldi	r31, 0x3F	; 63
    c6fa:	1f 2f       	mov	r17, r31
    c6fc:	f0 2d       	mov	r31, r0
    c6fe:	14 c0       	rjmp	.+40     	; 0xc728 <_ZN13RemoteControl9caminatasEh+0x74a>
    c700:	c8 01       	movw	r24, r16
    c702:	b7 01       	movw	r22, r14
    c704:	20 e0       	ldi	r18, 0x00	; 0
    c706:	30 e0       	ldi	r19, 0x00	; 0
    c708:	48 e4       	ldi	r20, 0x48	; 72
    c70a:	52 e4       	ldi	r21, 0x42	; 66
    c70c:	0e 94 8c 7c 	call	0xf918	; 0xf918 <__gesf2>
    c710:	18 16       	cp	r1, r24
    c712:	54 f4       	brge	.+20     	; 0xc728 <_ZN13RemoteControl9caminatasEh+0x74a>
    c714:	0f 2e       	mov	r0, r31
    c716:	f0 e0       	ldi	r31, 0x00	; 0
    c718:	ef 2e       	mov	r14, r31
    c71a:	f0 e0       	ldi	r31, 0x00	; 0
    c71c:	ff 2e       	mov	r15, r31
    c71e:	f8 e4       	ldi	r31, 0x48	; 72
    c720:	0f 2f       	mov	r16, r31
    c722:	f2 e4       	ldi	r31, 0x42	; 66
    c724:	1f 2f       	mov	r17, r31
    c726:	f0 2d       	mov	r31, r0
    c728:	f3 01       	movw	r30, r6
    c72a:	e0 82       	st	Z, r14
    c72c:	f1 82       	std	Z+1, r15	; 0x01
    c72e:	02 83       	std	Z+2, r16	; 0x02
    c730:	13 83       	std	Z+3, r17	; 0x03
			texto1 = "Vel " + float2string (velocidad);
    c732:	ef e4       	ldi	r30, 0x4F	; 79
    c734:	ce 2e       	mov	r12, r30
    c736:	d1 2c       	mov	r13, r1
    c738:	cc 0e       	add	r12, r28
    c73a:	dd 1e       	adc	r13, r29
    c73c:	c6 01       	movw	r24, r12
    c73e:	61 ee       	ldi	r22, 0xE1	; 225
    c740:	72 e0       	ldi	r23, 0x02	; 2
    c742:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    c746:	79 e4       	ldi	r23, 0x49	; 73
    c748:	e7 2e       	mov	r14, r23
    c74a:	f1 2c       	mov	r15, r1
    c74c:	ec 0e       	add	r14, r28
    c74e:	fd 1e       	adc	r15, r29
    c750:	d3 01       	movw	r26, r6
    c752:	4d 91       	ld	r20, X+
    c754:	5d 91       	ld	r21, X+
    c756:	6d 91       	ld	r22, X+
    c758:	7c 91       	ld	r23, X
    c75a:	c7 01       	movw	r24, r14
    c75c:	0e 94 8b 72 	call	0xe516	; 0xe516 <_Z12float2stringf>
    c760:	8e 01       	movw	r16, r28
    c762:	0b 5a       	subi	r16, 0xAB	; 171
    c764:	1f 4f       	sbci	r17, 0xFF	; 255
    c766:	c8 01       	movw	r24, r16
    c768:	b6 01       	movw	r22, r12
    c76a:	a7 01       	movw	r20, r14
    c76c:	0e 94 98 32 	call	0x6530	; 0x6530 <_Zpl6StringRKS_>
    c770:	c3 01       	movw	r24, r6
    c772:	88 96       	adiw	r24, 0x28	; 40
    c774:	b8 01       	movw	r22, r16
    c776:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    c77a:	c8 01       	movw	r24, r16
    c77c:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    c780:	c7 01       	movw	r24, r14
    c782:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    c786:	c6 01       	movw	r24, r12
    c788:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			if (isMoving) {mov.set_vel (velocidad);}
    c78c:	f3 01       	movw	r30, r6
    c78e:	85 a1       	ldd	r24, Z+37	; 0x25
    c790:	88 23       	and	r24, r24
    c792:	09 f4       	brne	.+2      	; 0xc796 <_ZN13RemoteControl9caminatasEh+0x7b8>
    c794:	48 c1       	rjmp	.+656    	; 0xca26 <_ZN13RemoteControl9caminatasEh+0xa48>
    c796:	40 81       	ld	r20, Z
    c798:	51 81       	ldd	r21, Z+1	; 0x01
    c79a:	62 81       	ldd	r22, Z+2	; 0x02
    c79c:	73 81       	ldd	r23, Z+3	; 0x03
    c79e:	85 ee       	ldi	r24, 0xE5	; 229
    c7a0:	9f e0       	ldi	r25, 0x0F	; 15
    c7a2:	0e 94 32 30 	call	0x6064	; 0x6064 <_ZN10Movimiento7set_velEf>
    c7a6:	3f c1       	rjmp	.+638    	; 0xca26 <_ZN13RemoteControl9caminatasEh+0xa48>
			retardo = true;
			break;
			
		case RC_CH_UP:
			if (pantalla.isBusy()) {break;}
    c7a8:	83 ea       	ldi	r24, 0xA3	; 163
    c7aa:	93 e1       	ldi	r25, 0x13	; 19
    c7ac:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    c7b0:	88 23       	and	r24, r24
    c7b2:	09 f0       	breq	.+2      	; 0xc7b6 <_ZN13RemoteControl9caminatasEh+0x7d8>
    c7b4:	3d c1       	rjmp	.+634    	; 0xca30 <_ZN13RemoteControl9caminatasEh+0xa52>
			if (!isMoving) {
    c7b6:	f3 01       	movw	r30, r6
    c7b8:	85 a1       	ldd	r24, Z+37	; 0x25
    c7ba:	88 23       	and	r24, r24
    c7bc:	09 f0       	breq	.+2      	; 0xc7c0 <_ZN13RemoteControl9caminatasEh+0x7e2>
    c7be:	65 c0       	rjmp	.+202    	; 0xc88a <_ZN13RemoteControl9caminatasEh+0x8ac>
				largo_pasos = constrain (largo_pasos+inc, 0, 20);
    c7c0:	65 85       	ldd	r22, Z+13	; 0x0d
    c7c2:	76 85       	ldd	r23, Z+14	; 0x0e
    c7c4:	87 85       	ldd	r24, Z+15	; 0x0f
    c7c6:	90 89       	ldd	r25, Z+16	; 0x10
    c7c8:	21 a1       	ldd	r18, Z+33	; 0x21
    c7ca:	32 a1       	ldd	r19, Z+34	; 0x22
    c7cc:	43 a1       	ldd	r20, Z+35	; 0x23
    c7ce:	54 a1       	ldd	r21, Z+36	; 0x24
    c7d0:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    c7d4:	7b 01       	movw	r14, r22
    c7d6:	8c 01       	movw	r16, r24
    c7d8:	20 e0       	ldi	r18, 0x00	; 0
    c7da:	30 e0       	ldi	r19, 0x00	; 0
    c7dc:	40 e0       	ldi	r20, 0x00	; 0
    c7de:	50 e0       	ldi	r21, 0x00	; 0
    c7e0:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    c7e4:	88 23       	and	r24, r24
    c7e6:	5c f4       	brge	.+22     	; 0xc7fe <_ZN13RemoteControl9caminatasEh+0x820>
    c7e8:	0f 2e       	mov	r0, r31
    c7ea:	f0 e0       	ldi	r31, 0x00	; 0
    c7ec:	ef 2e       	mov	r14, r31
    c7ee:	f0 e0       	ldi	r31, 0x00	; 0
    c7f0:	ff 2e       	mov	r15, r31
    c7f2:	f0 e0       	ldi	r31, 0x00	; 0
    c7f4:	0f 2f       	mov	r16, r31
    c7f6:	f0 e0       	ldi	r31, 0x00	; 0
    c7f8:	1f 2f       	mov	r17, r31
    c7fa:	f0 2d       	mov	r31, r0
    c7fc:	14 c0       	rjmp	.+40     	; 0xc826 <_ZN13RemoteControl9caminatasEh+0x848>
    c7fe:	c8 01       	movw	r24, r16
    c800:	b7 01       	movw	r22, r14
    c802:	20 e0       	ldi	r18, 0x00	; 0
    c804:	30 e0       	ldi	r19, 0x00	; 0
    c806:	40 ea       	ldi	r20, 0xA0	; 160
    c808:	51 e4       	ldi	r21, 0x41	; 65
    c80a:	0e 94 8c 7c 	call	0xf918	; 0xf918 <__gesf2>
    c80e:	18 16       	cp	r1, r24
    c810:	54 f4       	brge	.+20     	; 0xc826 <_ZN13RemoteControl9caminatasEh+0x848>
    c812:	0f 2e       	mov	r0, r31
    c814:	f0 e0       	ldi	r31, 0x00	; 0
    c816:	ef 2e       	mov	r14, r31
    c818:	f0 e0       	ldi	r31, 0x00	; 0
    c81a:	ff 2e       	mov	r15, r31
    c81c:	f0 ea       	ldi	r31, 0xA0	; 160
    c81e:	0f 2f       	mov	r16, r31
    c820:	f1 e4       	ldi	r31, 0x41	; 65
    c822:	1f 2f       	mov	r17, r31
    c824:	f0 2d       	mov	r31, r0
    c826:	d3 01       	movw	r26, r6
    c828:	1d 96       	adiw	r26, 0x0d	; 13
    c82a:	ed 92       	st	X+, r14
    c82c:	fd 92       	st	X+, r15
    c82e:	0d 93       	st	X+, r16
    c830:	1c 93       	st	X, r17
    c832:	50 97       	sbiw	r26, 0x10	; 16
				texto1 = "Paso "; 
    c834:	68 e2       	ldi	r22, 0x28	; 40
    c836:	a6 2e       	mov	r10, r22
    c838:	b1 2c       	mov	r11, r1
    c83a:	a6 0c       	add	r10, r6
    c83c:	b7 1c       	adc	r11, r7
    c83e:	8e 01       	movw	r16, r28
    c840:	05 5a       	subi	r16, 0xA5	; 165
    c842:	1f 4f       	sbci	r17, 0xFF	; 255
    c844:	c8 01       	movw	r24, r16
    c846:	6c e0       	ldi	r22, 0x0C	; 12
    c848:	73 e0       	ldi	r23, 0x03	; 3
    c84a:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    c84e:	c5 01       	movw	r24, r10
    c850:	b8 01       	movw	r22, r16
    c852:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    c856:	c8 01       	movw	r24, r16
    c858:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
				if (largo_pasos == 0) {texto1 += "AUTO";} else {texto1 += float2string (largo_pasos);}
    c85c:	f3 01       	movw	r30, r6
    c85e:	c5 84       	ldd	r12, Z+13	; 0x0d
    c860:	d6 84       	ldd	r13, Z+14	; 0x0e
    c862:	e7 84       	ldd	r14, Z+15	; 0x0f
    c864:	f0 88       	ldd	r15, Z+16	; 0x10
    c866:	c7 01       	movw	r24, r14
    c868:	b6 01       	movw	r22, r12
    c86a:	20 e0       	ldi	r18, 0x00	; 0
    c86c:	30 e0       	ldi	r19, 0x00	; 0
    c86e:	40 e0       	ldi	r20, 0x00	; 0
    c870:	50 e0       	ldi	r21, 0x00	; 0
    c872:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    c876:	88 23       	and	r24, r24
    c878:	21 f4       	brne	.+8      	; 0xc882 <_ZN13RemoteControl9caminatasEh+0x8a4>
    c87a:	8e 01       	movw	r16, r28
    c87c:	0f 59       	subi	r16, 0x9F	; 159
    c87e:	1f 4f       	sbci	r17, 0xFF	; 255
    c880:	8e c0       	rjmp	.+284    	; 0xc99e <_ZN13RemoteControl9caminatasEh+0x9c0>
    c882:	8e 01       	movw	r16, r28
    c884:	09 59       	subi	r16, 0x99	; 153
    c886:	1f 4f       	sbci	r17, 0xFF	; 255
    c888:	93 c0       	rjmp	.+294    	; 0xc9b0 <_ZN13RemoteControl9caminatasEh+0x9d2>
			} else {
				texto1 = "Escala " + String (mov.dec_escala(), DEC);
    c88a:	53 e7       	ldi	r21, 0x73	; 115
    c88c:	c5 2e       	mov	r12, r21
    c88e:	d1 2c       	mov	r13, r1
    c890:	cc 0e       	add	r12, r28
    c892:	dd 1e       	adc	r13, r29
    c894:	c6 01       	movw	r24, r12
    c896:	67 e1       	ldi	r22, 0x17	; 23
    c898:	73 e0       	ldi	r23, 0x03	; 3
    c89a:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    c89e:	85 ee       	ldi	r24, 0xE5	; 229
    c8a0:	9f e0       	ldi	r25, 0x0F	; 15
    c8a2:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <_ZN10Movimiento10dec_escalaEv>
    c8a6:	68 2f       	mov	r22, r24
    c8a8:	4d e6       	ldi	r20, 0x6D	; 109
    c8aa:	e4 2e       	mov	r14, r20
    c8ac:	f1 2c       	mov	r15, r1
    c8ae:	ec 0e       	add	r14, r28
    c8b0:	fd 1e       	adc	r15, r29
    c8b2:	c7 01       	movw	r24, r14
    c8b4:	70 e0       	ldi	r23, 0x00	; 0
    c8b6:	4a e0       	ldi	r20, 0x0A	; 10
    c8b8:	50 e0       	ldi	r21, 0x00	; 0
    c8ba:	0e 94 7f 79 	call	0xf2fe	; 0xf2fe <_ZN6StringC1Eii>
    c8be:	8e 01       	movw	r16, r28
    c8c0:	07 58       	subi	r16, 0x87	; 135
    c8c2:	1f 4f       	sbci	r17, 0xFF	; 255
    c8c4:	9d c0       	rjmp	.+314    	; 0xca00 <_ZN13RemoteControl9caminatasEh+0xa22>
			}
			retardo = true;
			break;
			
		case RC_CH_DN:
			if (pantalla.isBusy()) {break;}
    c8c6:	83 ea       	ldi	r24, 0xA3	; 163
    c8c8:	93 e1       	ldi	r25, 0x13	; 19
    c8ca:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    c8ce:	88 23       	and	r24, r24
    c8d0:	09 f0       	breq	.+2      	; 0xc8d4 <_ZN13RemoteControl9caminatasEh+0x8f6>
    c8d2:	ae c0       	rjmp	.+348    	; 0xca30 <_ZN13RemoteControl9caminatasEh+0xa52>
			if (!isMoving) {
    c8d4:	f3 01       	movw	r30, r6
    c8d6:	85 a1       	ldd	r24, Z+37	; 0x25
    c8d8:	88 23       	and	r24, r24
    c8da:	09 f0       	breq	.+2      	; 0xc8de <_ZN13RemoteControl9caminatasEh+0x900>
    c8dc:	74 c0       	rjmp	.+232    	; 0xc9c6 <_ZN13RemoteControl9caminatasEh+0x9e8>
				largo_pasos = constrain (largo_pasos-inc, 0, 20);
    c8de:	65 85       	ldd	r22, Z+13	; 0x0d
    c8e0:	76 85       	ldd	r23, Z+14	; 0x0e
    c8e2:	87 85       	ldd	r24, Z+15	; 0x0f
    c8e4:	90 89       	ldd	r25, Z+16	; 0x10
    c8e6:	21 a1       	ldd	r18, Z+33	; 0x21
    c8e8:	32 a1       	ldd	r19, Z+34	; 0x22
    c8ea:	43 a1       	ldd	r20, Z+35	; 0x23
    c8ec:	54 a1       	ldd	r21, Z+36	; 0x24
    c8ee:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    c8f2:	7b 01       	movw	r14, r22
    c8f4:	8c 01       	movw	r16, r24
    c8f6:	20 e0       	ldi	r18, 0x00	; 0
    c8f8:	30 e0       	ldi	r19, 0x00	; 0
    c8fa:	40 e0       	ldi	r20, 0x00	; 0
    c8fc:	50 e0       	ldi	r21, 0x00	; 0
    c8fe:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    c902:	88 23       	and	r24, r24
    c904:	5c f4       	brge	.+22     	; 0xc91c <_ZN13RemoteControl9caminatasEh+0x93e>
    c906:	0f 2e       	mov	r0, r31
    c908:	f0 e0       	ldi	r31, 0x00	; 0
    c90a:	ef 2e       	mov	r14, r31
    c90c:	f0 e0       	ldi	r31, 0x00	; 0
    c90e:	ff 2e       	mov	r15, r31
    c910:	f0 e0       	ldi	r31, 0x00	; 0
    c912:	0f 2f       	mov	r16, r31
    c914:	f0 e0       	ldi	r31, 0x00	; 0
    c916:	1f 2f       	mov	r17, r31
    c918:	f0 2d       	mov	r31, r0
    c91a:	14 c0       	rjmp	.+40     	; 0xc944 <_ZN13RemoteControl9caminatasEh+0x966>
    c91c:	c8 01       	movw	r24, r16
    c91e:	b7 01       	movw	r22, r14
    c920:	20 e0       	ldi	r18, 0x00	; 0
    c922:	30 e0       	ldi	r19, 0x00	; 0
    c924:	40 ea       	ldi	r20, 0xA0	; 160
    c926:	51 e4       	ldi	r21, 0x41	; 65
    c928:	0e 94 8c 7c 	call	0xf918	; 0xf918 <__gesf2>
    c92c:	18 16       	cp	r1, r24
    c92e:	54 f4       	brge	.+20     	; 0xc944 <_ZN13RemoteControl9caminatasEh+0x966>
    c930:	0f 2e       	mov	r0, r31
    c932:	f0 e0       	ldi	r31, 0x00	; 0
    c934:	ef 2e       	mov	r14, r31
    c936:	f0 e0       	ldi	r31, 0x00	; 0
    c938:	ff 2e       	mov	r15, r31
    c93a:	f0 ea       	ldi	r31, 0xA0	; 160
    c93c:	0f 2f       	mov	r16, r31
    c93e:	f1 e4       	ldi	r31, 0x41	; 65
    c940:	1f 2f       	mov	r17, r31
    c942:	f0 2d       	mov	r31, r0
    c944:	d3 01       	movw	r26, r6
    c946:	1d 96       	adiw	r26, 0x0d	; 13
    c948:	ed 92       	st	X+, r14
    c94a:	fd 92       	st	X+, r15
    c94c:	0d 93       	st	X+, r16
    c94e:	1c 93       	st	X, r17
    c950:	50 97       	sbiw	r26, 0x10	; 16
				texto1 = "Paso "; 
    c952:	38 e2       	ldi	r19, 0x28	; 40
    c954:	a3 2e       	mov	r10, r19
    c956:	b1 2c       	mov	r11, r1
    c958:	a6 0c       	add	r10, r6
    c95a:	b7 1c       	adc	r11, r7
    c95c:	8e 01       	movw	r16, r28
    c95e:	01 58       	subi	r16, 0x81	; 129
    c960:	1f 4f       	sbci	r17, 0xFF	; 255
    c962:	c8 01       	movw	r24, r16
    c964:	6c e0       	ldi	r22, 0x0C	; 12
    c966:	73 e0       	ldi	r23, 0x03	; 3
    c968:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    c96c:	c5 01       	movw	r24, r10
    c96e:	b8 01       	movw	r22, r16
    c970:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    c974:	c8 01       	movw	r24, r16
    c976:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
				if (largo_pasos == 0) {texto1 += "AUTO";} else {texto1 += float2string (largo_pasos);}
    c97a:	f3 01       	movw	r30, r6
    c97c:	c5 84       	ldd	r12, Z+13	; 0x0d
    c97e:	d6 84       	ldd	r13, Z+14	; 0x0e
    c980:	e7 84       	ldd	r14, Z+15	; 0x0f
    c982:	f0 88       	ldd	r15, Z+16	; 0x10
    c984:	c7 01       	movw	r24, r14
    c986:	b6 01       	movw	r22, r12
    c988:	20 e0       	ldi	r18, 0x00	; 0
    c98a:	30 e0       	ldi	r19, 0x00	; 0
    c98c:	40 e0       	ldi	r20, 0x00	; 0
    c98e:	50 e0       	ldi	r21, 0x00	; 0
    c990:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    c994:	88 23       	and	r24, r24
    c996:	49 f4       	brne	.+18     	; 0xc9aa <_ZN13RemoteControl9caminatasEh+0x9cc>
    c998:	8e 01       	movw	r16, r28
    c99a:	0b 57       	subi	r16, 0x7B	; 123
    c99c:	1f 4f       	sbci	r17, 0xFF	; 255
    c99e:	c8 01       	movw	r24, r16
    c9a0:	62 e1       	ldi	r22, 0x12	; 18
    c9a2:	73 e0       	ldi	r23, 0x03	; 3
    c9a4:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    c9a8:	08 c0       	rjmp	.+16     	; 0xc9ba <_ZN13RemoteControl9caminatasEh+0x9dc>
    c9aa:	8e 01       	movw	r16, r28
    c9ac:	05 57       	subi	r16, 0x75	; 117
    c9ae:	1f 4f       	sbci	r17, 0xFF	; 255
    c9b0:	c8 01       	movw	r24, r16
    c9b2:	b7 01       	movw	r22, r14
    c9b4:	a6 01       	movw	r20, r12
    c9b6:	0e 94 8b 72 	call	0xe516	; 0xe516 <_Z12float2stringf>
    c9ba:	c5 01       	movw	r24, r10
    c9bc:	b8 01       	movw	r22, r16
    c9be:	0e 94 c0 78 	call	0xf180	; 0xf180 <_ZN6StringpLERKS_>
    c9c2:	c8 01       	movw	r24, r16
    c9c4:	2e c0       	rjmp	.+92     	; 0xca22 <_ZN13RemoteControl9caminatasEh+0xa44>
			} else {
				texto1 = "Escala " + String (mov.inc_escala(), DEC);
    c9c6:	27 e9       	ldi	r18, 0x97	; 151
    c9c8:	c2 2e       	mov	r12, r18
    c9ca:	d1 2c       	mov	r13, r1
    c9cc:	cc 0e       	add	r12, r28
    c9ce:	dd 1e       	adc	r13, r29
    c9d0:	c6 01       	movw	r24, r12
    c9d2:	67 e1       	ldi	r22, 0x17	; 23
    c9d4:	73 e0       	ldi	r23, 0x03	; 3
    c9d6:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    c9da:	85 ee       	ldi	r24, 0xE5	; 229
    c9dc:	9f e0       	ldi	r25, 0x0F	; 15
    c9de:	0e 94 93 15 	call	0x2b26	; 0x2b26 <_ZN10Movimiento10inc_escalaEv>
    c9e2:	68 2f       	mov	r22, r24
    c9e4:	91 e9       	ldi	r25, 0x91	; 145
    c9e6:	e9 2e       	mov	r14, r25
    c9e8:	f1 2c       	mov	r15, r1
    c9ea:	ec 0e       	add	r14, r28
    c9ec:	fd 1e       	adc	r15, r29
    c9ee:	c7 01       	movw	r24, r14
    c9f0:	70 e0       	ldi	r23, 0x00	; 0
    c9f2:	4a e0       	ldi	r20, 0x0A	; 10
    c9f4:	50 e0       	ldi	r21, 0x00	; 0
    c9f6:	0e 94 7f 79 	call	0xf2fe	; 0xf2fe <_ZN6StringC1Eii>
    c9fa:	8e 01       	movw	r16, r28
    c9fc:	03 56       	subi	r16, 0x63	; 99
    c9fe:	1f 4f       	sbci	r17, 0xFF	; 255
    ca00:	c8 01       	movw	r24, r16
    ca02:	b6 01       	movw	r22, r12
    ca04:	a7 01       	movw	r20, r14
    ca06:	0e 94 98 32 	call	0x6530	; 0x6530 <_Zpl6StringRKS_>
    ca0a:	c3 01       	movw	r24, r6
    ca0c:	88 96       	adiw	r24, 0x28	; 40
    ca0e:	b8 01       	movw	r22, r16
    ca10:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    ca14:	c8 01       	movw	r24, r16
    ca16:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    ca1a:	c7 01       	movw	r24, r14
    ca1c:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    ca20:	c6 01       	movw	r24, r12
    ca22:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			}
			retardo = true;
    ca26:	81 e0       	ldi	r24, 0x01	; 1
    ca28:	d3 01       	movw	r26, r6
    ca2a:	d6 96       	adiw	r26, 0x36	; 54
    ca2c:	8c 93       	st	X, r24
    ca2e:	4f c0       	rjmp	.+158    	; 0xcace <_ZN13RemoteControl9caminatasEh+0xaf0>
			break;
	}
	
	// switch de ejecución (y puede haber más; talvez la variable swicheada en segunda instancia no sea "comando")
	switch (comando) {
    ca30:	85 2d       	mov	r24, r5
    ca32:	8c 55       	subi	r24, 0x5C	; 92
    ca34:	84 30       	cpi	r24, 0x04	; 4
    ca36:	08 f0       	brcs	.+2      	; 0xca3a <_ZN13RemoteControl9caminatasEh+0xa5c>
    ca38:	4a c0       	rjmp	.+148    	; 0xcace <_ZN13RemoteControl9caminatasEh+0xaf0>
		case RC_UP: case RC_DOWN: case RC_LEFT: case RC_RIGHT:
			if (modo == CAMINATAS1) {mov.mon_desplazamiento = NULL;}
    ca3a:	f3 01       	movw	r30, r6
    ca3c:	86 a1       	ldd	r24, Z+38	; 0x26
    ca3e:	81 30       	cpi	r24, 0x01	; 1
    ca40:	29 f4       	brne	.+10     	; 0xca4c <_ZN13RemoteControl9caminatasEh+0xa6e>
    ca42:	10 92 e8 0f 	sts	0x0FE8, r1
    ca46:	10 92 e7 0f 	sts	0x0FE7, r1
    ca4a:	13 c0       	rjmp	.+38     	; 0xca72 <_ZN13RemoteControl9caminatasEh+0xa94>
			else if (modo == CAMINATAS2) {
    ca4c:	82 30       	cpi	r24, 0x02	; 2
    ca4e:	89 f4       	brne	.+34     	; 0xca72 <_ZN13RemoteControl9caminatasEh+0xa94>
				if (comando == RC_LEFT || comando == RC_RIGHT) {break;}    // la lógica hay que reformularla toda 
    ca50:	f3 ea       	ldi	r31, 0xA3	; 163
    ca52:	5f 0e       	add	r5, r31
    ca54:	81 e0       	ldi	r24, 0x01	; 1
    ca56:	85 15       	cp	r24, r5
    ca58:	d0 f5       	brcc	.+116    	; 0xcace <_ZN13RemoteControl9caminatasEh+0xaf0>
				mov.mon_desplazamiento = &centro_caminata;
    ca5a:	a9 e1       	ldi	r26, 0x19	; 25
    ca5c:	b0 e0       	ldi	r27, 0x00	; 0
    ca5e:	6a 0e       	add	r6, r26
    ca60:	7b 1e       	adc	r7, r27
    ca62:	70 92 e8 0f 	sts	0x0FE8, r7
    ca66:	60 92 e7 0f 	sts	0x0FE7, r6
    ca6a:	e7 ee       	ldi	r30, 0xE7	; 231
    ca6c:	ff ef       	ldi	r31, 0xFF	; 255
    ca6e:	6e 0e       	add	r6, r30
    ca70:	7f 1e       	adc	r7, r31
			}
		  mov.recta (velocidad, desplazamiento, angulo, marcha, largo_pasos);
    ca72:	00 d0       	rcall	.+0      	; 0xca74 <_ZN13RemoteControl9caminatasEh+0xa96>
    ca74:	00 d0       	rcall	.+0      	; 0xca76 <_ZN13RemoteControl9caminatasEh+0xa98>
    ca76:	d3 01       	movw	r26, r6
    ca78:	4d 91       	ld	r20, X+
    ca7a:	5d 91       	ld	r21, X+
    ca7c:	6d 91       	ld	r22, X+
    ca7e:	7c 91       	ld	r23, X
    ca80:	13 97       	sbiw	r26, 0x03	; 3
    ca82:	55 96       	adiw	r26, 0x15	; 21
    ca84:	0d 91       	ld	r16, X+
    ca86:	1d 91       	ld	r17, X+
    ca88:	2d 91       	ld	r18, X+
    ca8a:	3c 91       	ld	r19, X
    ca8c:	58 97       	sbiw	r26, 0x18	; 24
    ca8e:	15 96       	adiw	r26, 0x05	; 5
    ca90:	cd 90       	ld	r12, X+
    ca92:	dd 90       	ld	r13, X+
    ca94:	ed 90       	ld	r14, X+
    ca96:	fc 90       	ld	r15, X
    ca98:	18 97       	sbiw	r26, 0x08	; 8
    ca9a:	1d 96       	adiw	r26, 0x0d	; 13
    ca9c:	8d 91       	ld	r24, X+
    ca9e:	9d 91       	ld	r25, X+
    caa0:	0d 90       	ld	r0, X+
    caa2:	bc 91       	ld	r27, X
    caa4:	a0 2d       	mov	r26, r0
    caa6:	ed b7       	in	r30, 0x3d	; 61
    caa8:	fe b7       	in	r31, 0x3e	; 62
    caaa:	81 83       	std	Z+1, r24	; 0x01
    caac:	92 83       	std	Z+2, r25	; 0x02
    caae:	a3 83       	std	Z+3, r26	; 0x03
    cab0:	b4 83       	std	Z+4, r27	; 0x04
    cab2:	85 ee       	ldi	r24, 0xE5	; 229
    cab4:	9f e0       	ldi	r25, 0x0F	; 15
    cab6:	d3 01       	movw	r26, r6
    cab8:	14 96       	adiw	r26, 0x04	; 4
    caba:	ac 90       	ld	r10, X
    cabc:	0e 94 72 31 	call	0x62e4	; 0x62e4 <_ZN10Movimiento5rectaEfffhf>
			isMoving = true;
    cac0:	81 e0       	ldi	r24, 0x01	; 1
    cac2:	f3 01       	movw	r30, r6
    cac4:	85 a3       	std	Z+37, r24	; 0x25
    cac6:	0f 90       	pop	r0
    cac8:	0f 90       	pop	r0
    caca:	0f 90       	pop	r0
    cacc:	0f 90       	pop	r0
			break;
	}

}
    cace:	ce 53       	subi	r28, 0x3E	; 62
    cad0:	df 4f       	sbci	r29, 0xFF	; 255
    cad2:	0f b6       	in	r0, 0x3f	; 63
    cad4:	f8 94       	cli
    cad6:	de bf       	out	0x3e, r29	; 62
    cad8:	0f be       	out	0x3f, r0	; 63
    cada:	cd bf       	out	0x3d, r28	; 61
    cadc:	cf 91       	pop	r28
    cade:	df 91       	pop	r29
    cae0:	1f 91       	pop	r17
    cae2:	0f 91       	pop	r16
    cae4:	ff 90       	pop	r15
    cae6:	ef 90       	pop	r14
    cae8:	df 90       	pop	r13
    caea:	cf 90       	pop	r12
    caec:	bf 90       	pop	r11
    caee:	af 90       	pop	r10
    caf0:	9f 90       	pop	r9
    caf2:	8f 90       	pop	r8
    caf4:	7f 90       	pop	r7
    caf6:	6f 90       	pop	r6
    caf8:	5f 90       	pop	r5
    cafa:	08 95       	ret

0000cafc <_ZN13RemoteControl16procesar_comandoEh>:
	retardo = false;
	step = .5;
	pagina = 0;
}	

void RemoteControl::procesar_comando (byte comando) {
    cafc:	4f 92       	push	r4
    cafe:	5f 92       	push	r5
    cb00:	6f 92       	push	r6
    cb02:	7f 92       	push	r7
    cb04:	8f 92       	push	r8
    cb06:	9f 92       	push	r9
    cb08:	af 92       	push	r10
    cb0a:	bf 92       	push	r11
    cb0c:	cf 92       	push	r12
    cb0e:	df 92       	push	r13
    cb10:	ef 92       	push	r14
    cb12:	ff 92       	push	r15
    cb14:	0f 93       	push	r16
    cb16:	1f 93       	push	r17
    cb18:	df 93       	push	r29
    cb1a:	cf 93       	push	r28
    cb1c:	cd b7       	in	r28, 0x3d	; 61
    cb1e:	de b7       	in	r29, 0x3e	; 62
    cb20:	c6 5c       	subi	r28, 0xC6	; 198
    cb22:	d0 40       	sbci	r29, 0x00	; 0
    cb24:	0f b6       	in	r0, 0x3f	; 63
    cb26:	f8 94       	cli
    cb28:	de bf       	out	0x3e, r29	; 62
    cb2a:	0f be       	out	0x3f, r0	; 63
    cb2c:	cd bf       	out	0x3d, r28	; 61
    cb2e:	2c 01       	movw	r4, r24
    cb30:	f6 2e       	mov	r15, r22
	
	// acá se procesan las teclas generales, o que tienen una función única
	// las otras son procesadas por la rutina específica de cada modo
	
	texto1 = "def";
    cb32:	28 e2       	ldi	r18, 0x28	; 40
    cb34:	a2 2e       	mov	r10, r18
    cb36:	b1 2c       	mov	r11, r1
    cb38:	a8 0e       	add	r10, r24
    cb3a:	b9 1e       	adc	r11, r25
    cb3c:	8e 01       	movw	r16, r28
    cb3e:	0f 5f       	subi	r16, 0xFF	; 255
    cb40:	1f 4f       	sbci	r17, 0xFF	; 255
    cb42:	c8 01       	movw	r24, r16
    cb44:	6f e1       	ldi	r22, 0x1F	; 31
    cb46:	73 e0       	ldi	r23, 0x03	; 3
    cb48:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    cb4c:	c5 01       	movw	r24, r10
    cb4e:	b8 01       	movw	r22, r16
    cb50:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    cb54:	c8 01       	movw	r24, r16
    cb56:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
	
	switch (comando) {
    cb5a:	8d e4       	ldi	r24, 0x4D	; 77
    cb5c:	f8 16       	cp	r15, r24
    cb5e:	09 f4       	brne	.+2      	; 0xcb62 <_ZN13RemoteControl16procesar_comandoEh+0x66>
    cb60:	0d c2       	rjmp	.+1050   	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cb62:	8f 15       	cp	r24, r15
    cb64:	c8 f0       	brcs	.+50     	; 0xcb98 <_ZN13RemoteControl16procesar_comandoEh+0x9c>
    cb66:	e8 e1       	ldi	r30, 0x18	; 24
    cb68:	ef 15       	cp	r30, r15
    cb6a:	80 f0       	brcs	.+32     	; 0xcb8c <_ZN13RemoteControl16procesar_comandoEh+0x90>
    cb6c:	f6 e1       	ldi	r31, 0x16	; 22
    cb6e:	ff 16       	cp	r15, r31
    cb70:	08 f0       	brcs	.+2      	; 0xcb74 <_ZN13RemoteControl16procesar_comandoEh+0x78>
    cb72:	04 c2       	rjmp	.+1032   	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cb74:	82 e1       	ldi	r24, 0x12	; 18
    cb76:	f8 16       	cp	r15, r24
    cb78:	79 f1       	breq	.+94     	; 0xcbd8 <_ZN13RemoteControl16procesar_comandoEh+0xdc>
    cb7a:	e4 e1       	ldi	r30, 0x14	; 20
    cb7c:	fe 16       	cp	r15, r30
    cb7e:	09 f4       	brne	.+2      	; 0xcb82 <_ZN13RemoteControl16procesar_comandoEh+0x86>
    cb80:	fd c1       	rjmp	.+1018   	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cb82:	fc e0       	ldi	r31, 0x0C	; 12
    cb84:	ff 16       	cp	r15, r31
    cb86:	09 f0       	breq	.+2      	; 0xcb8a <_ZN13RemoteControl16procesar_comandoEh+0x8e>
    cb88:	d8 c0       	rjmp	.+432    	; 0xcd3a <_ZN13RemoteControl16procesar_comandoEh+0x23e>
    cb8a:	f8 c1       	rjmp	.+1008   	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cb8c:	8f 2d       	mov	r24, r15
    cb8e:	88 54       	subi	r24, 0x48	; 72
    cb90:	82 30       	cpi	r24, 0x02	; 2
    cb92:	08 f0       	brcs	.+2      	; 0xcb96 <_ZN13RemoteControl16procesar_comandoEh+0x9a>
    cb94:	d2 c0       	rjmp	.+420    	; 0xcd3a <_ZN13RemoteControl16procesar_comandoEh+0x23e>
    cb96:	f2 c1       	rjmp	.+996    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cb98:	84 e5       	ldi	r24, 0x54	; 84
    cb9a:	f8 16       	cp	r15, r24
    cb9c:	09 f4       	brne	.+2      	; 0xcba0 <_ZN13RemoteControl16procesar_comandoEh+0xa4>
    cb9e:	67 c0       	rjmp	.+206    	; 0xcc6e <_ZN13RemoteControl16procesar_comandoEh+0x172>
    cba0:	8f 15       	cp	r24, r15
    cba2:	68 f0       	brcs	.+26     	; 0xcbbe <_ZN13RemoteControl16procesar_comandoEh+0xc2>
    cba4:	e1 e5       	ldi	r30, 0x51	; 81
    cba6:	fe 16       	cp	r15, r30
    cba8:	09 f4       	brne	.+2      	; 0xcbac <_ZN13RemoteControl16procesar_comandoEh+0xb0>
    cbaa:	e8 c1       	rjmp	.+976    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cbac:	f2 e5       	ldi	r31, 0x52	; 82
    cbae:	ff 16       	cp	r15, r31
    cbb0:	09 f4       	brne	.+2      	; 0xcbb4 <_ZN13RemoteControl16procesar_comandoEh+0xb8>
    cbb2:	4b c0       	rjmp	.+150    	; 0xcc4a <_ZN13RemoteControl16procesar_comandoEh+0x14e>
    cbb4:	80 e5       	ldi	r24, 0x50	; 80
    cbb6:	f8 16       	cp	r15, r24
    cbb8:	09 f0       	breq	.+2      	; 0xcbbc <_ZN13RemoteControl16procesar_comandoEh+0xc0>
    cbba:	bf c0       	rjmp	.+382    	; 0xcd3a <_ZN13RemoteControl16procesar_comandoEh+0x23e>
    cbbc:	39 c0       	rjmp	.+114    	; 0xcc30 <_ZN13RemoteControl16procesar_comandoEh+0x134>
    cbbe:	e9 e5       	ldi	r30, 0x59	; 89
    cbc0:	fe 16       	cp	r15, r30
    cbc2:	09 f4       	brne	.+2      	; 0xcbc6 <_ZN13RemoteControl16procesar_comandoEh+0xca>
    cbc4:	db c1       	rjmp	.+950    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cbc6:	fb e5       	ldi	r31, 0x5B	; 91
    cbc8:	ff 16       	cp	r15, r31
    cbca:	09 f4       	brne	.+2      	; 0xcbce <_ZN13RemoteControl16procesar_comandoEh+0xd2>
    cbcc:	d7 c1       	rjmp	.+942    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cbce:	86 e5       	ldi	r24, 0x56	; 86
    cbd0:	f8 16       	cp	r15, r24
    cbd2:	09 f0       	breq	.+2      	; 0xcbd6 <_ZN13RemoteControl16procesar_comandoEh+0xda>
    cbd4:	b2 c0       	rjmp	.+356    	; 0xcd3a <_ZN13RemoteControl16procesar_comandoEh+0x23e>
    cbd6:	75 c0       	rjmp	.+234    	; 0xccc2 <_ZN13RemoteControl16procesar_comandoEh+0x1c6>
		case RC_POWER: 
			if (isMoving || pantalla.isBusy()) {break;}
    cbd8:	f2 01       	movw	r30, r4
    cbda:	85 a1       	ldd	r24, Z+37	; 0x25
    cbdc:	88 23       	and	r24, r24
    cbde:	09 f0       	breq	.+2      	; 0xcbe2 <_ZN13RemoteControl16procesar_comandoEh+0xe6>
    cbe0:	cd c1       	rjmp	.+922    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cbe2:	83 ea       	ldi	r24, 0xA3	; 163
    cbe4:	93 e1       	ldi	r25, 0x13	; 19
    cbe6:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    cbea:	88 23       	and	r24, r24
    cbec:	09 f0       	breq	.+2      	; 0xcbf0 <_ZN13RemoteControl16procesar_comandoEh+0xf4>
    cbee:	c6 c1       	rjmp	.+908    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cbf0:	e0 c1       	rjmp	.+960    	; 0xcfb2 <_ZN13RemoteControl16procesar_comandoEh+0x4b6>
			if (modo == REMOTE_OFF) {
				color1 = RGB(0, 2, 3);
    cbf2:	8b e0       	ldi	r24, 0x0B	; 11
    cbf4:	f2 01       	movw	r30, r4
    cbf6:	84 ab       	std	Z+52, r24	; 0x34
				texto1 = "REMOTE ON";
    cbf8:	8e 01       	movw	r16, r28
    cbfa:	09 5f       	subi	r16, 0xF9	; 249
    cbfc:	1f 4f       	sbci	r17, 0xFF	; 255
    cbfe:	c8 01       	movw	r24, r16
    cc00:	63 e2       	ldi	r22, 0x23	; 35
    cc02:	73 e0       	ldi	r23, 0x03	; 3
    cc04:	52 c2       	rjmp	.+1188   	; 0xd0aa <_ZN13RemoteControl16procesar_comandoEh+0x5ae>
				modo = CAMINATAS1;
			} else {
				color1 = RGB(2, 3, 2);
    cc06:	8e e2       	ldi	r24, 0x2E	; 46
    cc08:	f2 01       	movw	r30, r4
    cc0a:	84 ab       	std	Z+52, r24	; 0x34
				texto1 = "REMOTE OFF";
    cc0c:	8e 01       	movw	r16, r28
    cc0e:	03 5f       	subi	r16, 0xF3	; 243
    cc10:	1f 4f       	sbci	r17, 0xFF	; 255
    cc12:	c8 01       	movw	r24, r16
    cc14:	6d e2       	ldi	r22, 0x2D	; 45
    cc16:	73 e0       	ldi	r23, 0x03	; 3
    cc18:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    cc1c:	c5 01       	movw	r24, r10
    cc1e:	b8 01       	movw	r22, r16
    cc20:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    cc24:	c8 01       	movw	r24, r16
    cc26:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
				modo = REMOTE_OFF;
    cc2a:	f2 01       	movw	r30, r4
    cc2c:	16 a2       	std	Z+38, r1	; 0x26
    cc2e:	a6 c1       	rjmp	.+844    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
			}
			break;
		case RC_SUSPEND:                                // una de estas tiene que resetear incluso la velocidad, paso, etc. (para facilitar la edicion)
			if (isMoving || pantalla.isBusy()) {break;}
    cc30:	f2 01       	movw	r30, r4
    cc32:	85 a1       	ldd	r24, Z+37	; 0x25
    cc34:	88 23       	and	r24, r24
    cc36:	09 f0       	breq	.+2      	; 0xcc3a <_ZN13RemoteControl16procesar_comandoEh+0x13e>
    cc38:	a1 c1       	rjmp	.+834    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cc3a:	83 ea       	ldi	r24, 0xA3	; 163
    cc3c:	93 e1       	ldi	r25, 0x13	; 19
    cc3e:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    cc42:	88 23       	and	r24, r24
    cc44:	09 f0       	breq	.+2      	; 0xcc48 <_ZN13RemoteControl16procesar_comandoEh+0x14c>
    cc46:	9a c1       	rjmp	.+820    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cc48:	ba c1       	rjmp	.+884    	; 0xcfbe <_ZN13RemoteControl16procesar_comandoEh+0x4c2>
			mov.goto_pos_ref (DEFAULT_POSITION);
			break;
		case RC_SLEEP: 
			break;
		case RC_HOME: 
			if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
    cc4a:	f2 01       	movw	r30, r4
    cc4c:	85 a1       	ldd	r24, Z+37	; 0x25
    cc4e:	88 23       	and	r24, r24
    cc50:	09 f0       	breq	.+2      	; 0xcc54 <_ZN13RemoteControl16procesar_comandoEh+0x158>
    cc52:	94 c1       	rjmp	.+808    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cc54:	83 ea       	ldi	r24, 0xA3	; 163
    cc56:	93 e1       	ldi	r25, 0x13	; 19
    cc58:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    cc5c:	88 23       	and	r24, r24
    cc5e:	09 f0       	breq	.+2      	; 0xcc62 <_ZN13RemoteControl16procesar_comandoEh+0x166>
    cc60:	8d c1       	rjmp	.+794    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cc62:	f2 01       	movw	r30, r4
    cc64:	86 a1       	ldd	r24, Z+38	; 0x26
    cc66:	88 23       	and	r24, r24
    cc68:	09 f4       	brne	.+2      	; 0xcc6c <_ZN13RemoteControl16procesar_comandoEh+0x170>
    cc6a:	88 c1       	rjmp	.+784    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cc6c:	f3 c1       	rjmp	.+998    	; 0xd054 <_ZN13RemoteControl16procesar_comandoEh+0x558>
			centro_caminata = (COORD2D) {0, 0};
			texto1 = "home";
			mov.goto_pos_ref ();
			break;
		case RC_DVD1: 
			pagina = constrain (pagina+1, 0, 10);              // este '10' hay que hacer un #define MAX_PAGINA
    cc6e:	f2 01       	movw	r30, r4
    cc70:	87 a1       	ldd	r24, Z+39	; 0x27
    cc72:	8f 3f       	cpi	r24, 0xFF	; 255
    cc74:	14 f4       	brge	.+4      	; 0xcc7a <_ZN13RemoteControl16procesar_comandoEh+0x17e>
    cc76:	80 e0       	ldi	r24, 0x00	; 0
    cc78:	05 c0       	rjmp	.+10     	; 0xcc84 <_ZN13RemoteControl16procesar_comandoEh+0x188>
    cc7a:	8a 30       	cpi	r24, 0x0A	; 10
    cc7c:	14 f0       	brlt	.+4      	; 0xcc82 <_ZN13RemoteControl16procesar_comandoEh+0x186>
    cc7e:	8a e0       	ldi	r24, 0x0A	; 10
    cc80:	01 c0       	rjmp	.+2      	; 0xcc84 <_ZN13RemoteControl16procesar_comandoEh+0x188>
    cc82:	8f 5f       	subi	r24, 0xFF	; 255
    cc84:	f2 01       	movw	r30, r4
    cc86:	87 a3       	std	Z+39, r24	; 0x27
			texto1 = "Pagina " + String (pagina, DEC);
    cc88:	95 e2       	ldi	r25, 0x25	; 37
    cc8a:	c9 2e       	mov	r12, r25
    cc8c:	d1 2c       	mov	r13, r1
    cc8e:	cc 0e       	add	r12, r28
    cc90:	dd 1e       	adc	r13, r29
    cc92:	c6 01       	movw	r24, r12
    cc94:	68 e3       	ldi	r22, 0x38	; 56
    cc96:	73 e0       	ldi	r23, 0x03	; 3
    cc98:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    cc9c:	8f e1       	ldi	r24, 0x1F	; 31
    cc9e:	e8 2e       	mov	r14, r24
    cca0:	f1 2c       	mov	r15, r1
    cca2:	ec 0e       	add	r14, r28
    cca4:	fd 1e       	adc	r15, r29
    cca6:	f2 01       	movw	r30, r4
    cca8:	67 a1       	ldd	r22, Z+39	; 0x27
    ccaa:	77 27       	eor	r23, r23
    ccac:	67 fd       	sbrc	r22, 7
    ccae:	70 95       	com	r23
    ccb0:	c7 01       	movw	r24, r14
    ccb2:	4a e0       	ldi	r20, 0x0A	; 10
    ccb4:	50 e0       	ldi	r21, 0x00	; 0
    ccb6:	0e 94 7f 79 	call	0xf2fe	; 0xf2fe <_ZN6StringC1Eii>
    ccba:	8e 01       	movw	r16, r28
    ccbc:	05 5d       	subi	r16, 0xD5	; 213
    ccbe:	1f 4f       	sbci	r17, 0xFF	; 255
    ccc0:	29 c0       	rjmp	.+82     	; 0xcd14 <_ZN13RemoteControl16procesar_comandoEh+0x218>
			break;
		case RC_FM: 
			pagina = constrain (pagina-1, 0, 10);              // este '10' hay que hacer un #define MAX_PAGINA
    ccc2:	f2 01       	movw	r30, r4
    ccc4:	87 a1       	ldd	r24, Z+39	; 0x27
    ccc6:	18 16       	cp	r1, r24
    ccc8:	14 f0       	brlt	.+4      	; 0xccce <_ZN13RemoteControl16procesar_comandoEh+0x1d2>
    ccca:	80 e0       	ldi	r24, 0x00	; 0
    cccc:	05 c0       	rjmp	.+10     	; 0xccd8 <_ZN13RemoteControl16procesar_comandoEh+0x1dc>
    ccce:	8c 30       	cpi	r24, 0x0C	; 12
    ccd0:	14 f0       	brlt	.+4      	; 0xccd6 <_ZN13RemoteControl16procesar_comandoEh+0x1da>
    ccd2:	8a e0       	ldi	r24, 0x0A	; 10
    ccd4:	01 c0       	rjmp	.+2      	; 0xccd8 <_ZN13RemoteControl16procesar_comandoEh+0x1dc>
    ccd6:	81 50       	subi	r24, 0x01	; 1
    ccd8:	f2 01       	movw	r30, r4
    ccda:	87 a3       	std	Z+39, r24	; 0x27
			texto1 = "Pagina " + String (pagina, DEC);
    ccdc:	07 e3       	ldi	r16, 0x37	; 55
    ccde:	c0 2e       	mov	r12, r16
    cce0:	d1 2c       	mov	r13, r1
    cce2:	cc 0e       	add	r12, r28
    cce4:	dd 1e       	adc	r13, r29
    cce6:	c6 01       	movw	r24, r12
    cce8:	68 e3       	ldi	r22, 0x38	; 56
    ccea:	73 e0       	ldi	r23, 0x03	; 3
    ccec:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    ccf0:	11 e3       	ldi	r17, 0x31	; 49
    ccf2:	e1 2e       	mov	r14, r17
    ccf4:	f1 2c       	mov	r15, r1
    ccf6:	ec 0e       	add	r14, r28
    ccf8:	fd 1e       	adc	r15, r29
    ccfa:	f2 01       	movw	r30, r4
    ccfc:	67 a1       	ldd	r22, Z+39	; 0x27
    ccfe:	77 27       	eor	r23, r23
    cd00:	67 fd       	sbrc	r22, 7
    cd02:	70 95       	com	r23
    cd04:	c7 01       	movw	r24, r14
    cd06:	4a e0       	ldi	r20, 0x0A	; 10
    cd08:	50 e0       	ldi	r21, 0x00	; 0
    cd0a:	0e 94 7f 79 	call	0xf2fe	; 0xf2fe <_ZN6StringC1Eii>
    cd0e:	8e 01       	movw	r16, r28
    cd10:	03 5c       	subi	r16, 0xC3	; 195
    cd12:	1f 4f       	sbci	r17, 0xFF	; 255
    cd14:	c8 01       	movw	r24, r16
    cd16:	b6 01       	movw	r22, r12
    cd18:	a7 01       	movw	r20, r14
    cd1a:	0e 94 98 32 	call	0x6530	; 0x6530 <_Zpl6StringRKS_>
    cd1e:	c5 01       	movw	r24, r10
    cd20:	b8 01       	movw	r22, r16
    cd22:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    cd26:	c8 01       	movw	r24, r16
    cd28:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    cd2c:	c7 01       	movw	r24, r14
    cd2e:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    cd32:	c6 01       	movw	r24, r12
    cd34:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    cd38:	21 c1       	rjmp	.+578    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
		case RC_PREV: break;
		case RC_STOP: break;
		case RC_NEXT: break;
		default:
			// botones de modo
			if (comando>=RC_TV && comando<=RC_APPLICATION) {
    cd3a:	8f 2d       	mov	r24, r15
    cd3c:	80 54       	subi	r24, 0x40	; 64
    cd3e:	88 30       	cpi	r24, 0x08	; 8
    cd40:	08 f0       	brcs	.+2      	; 0xcd44 <_ZN13RemoteControl16procesar_comandoEh+0x248>
    cd42:	ed c0       	rjmp	.+474    	; 0xcf1e <_ZN13RemoteControl16procesar_comandoEh+0x422>
				switch (comando + 100*pagina) {
    cd44:	f2 01       	movw	r30, r4
    cd46:	97 a1       	ldd	r25, Z+39	; 0x27
    cd48:	84 e6       	ldi	r24, 0x64	; 100
    cd4a:	98 02       	muls	r25, r24
    cd4c:	c0 01       	movw	r24, r0
    cd4e:	11 24       	eor	r1, r1
    cd50:	8f 0d       	add	r24, r15
    cd52:	91 1d       	adc	r25, r1
    cd54:	84 34       	cpi	r24, 0x44	; 68
    cd56:	91 05       	cpc	r25, r1
    cd58:	09 f4       	brne	.+2      	; 0xcd5c <_ZN13RemoteControl16procesar_comandoEh+0x260>
    cd5a:	78 c0       	rjmp	.+240    	; 0xce4c <_ZN13RemoteControl16procesar_comandoEh+0x350>
    cd5c:	85 34       	cpi	r24, 0x45	; 69
    cd5e:	91 05       	cpc	r25, r1
    cd60:	a4 f4       	brge	.+40     	; 0xcd8a <_ZN13RemoteControl16procesar_comandoEh+0x28e>
    cd62:	81 34       	cpi	r24, 0x41	; 65
    cd64:	91 05       	cpc	r25, r1
    cd66:	e1 f1       	breq	.+120    	; 0xcde0 <_ZN13RemoteControl16procesar_comandoEh+0x2e4>
    cd68:	82 34       	cpi	r24, 0x42	; 66
    cd6a:	91 05       	cpc	r25, r1
    cd6c:	2c f4       	brge	.+10     	; 0xcd78 <_ZN13RemoteControl16procesar_comandoEh+0x27c>
    cd6e:	80 34       	cpi	r24, 0x40	; 64
    cd70:	91 05       	cpc	r25, r1
    cd72:	09 f0       	breq	.+2      	; 0xcd76 <_ZN13RemoteControl16procesar_comandoEh+0x27a>
    cd74:	03 c1       	rjmp	.+518    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cd76:	22 c0       	rjmp	.+68     	; 0xcdbc <_ZN13RemoteControl16procesar_comandoEh+0x2c0>
    cd78:	82 34       	cpi	r24, 0x42	; 66
    cd7a:	91 05       	cpc	r25, r1
    cd7c:	09 f4       	brne	.+2      	; 0xcd80 <_ZN13RemoteControl16procesar_comandoEh+0x284>
    cd7e:	42 c0       	rjmp	.+132    	; 0xce04 <_ZN13RemoteControl16procesar_comandoEh+0x308>
    cd80:	83 34       	cpi	r24, 0x43	; 67
    cd82:	91 05       	cpc	r25, r1
    cd84:	09 f0       	breq	.+2      	; 0xcd88 <_ZN13RemoteControl16procesar_comandoEh+0x28c>
    cd86:	fa c0       	rjmp	.+500    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cd88:	4f c0       	rjmp	.+158    	; 0xce28 <_ZN13RemoteControl16procesar_comandoEh+0x32c>
    cd8a:	87 34       	cpi	r24, 0x47	; 71
    cd8c:	91 05       	cpc	r25, r1
    cd8e:	09 f4       	brne	.+2      	; 0xcd92 <_ZN13RemoteControl16procesar_comandoEh+0x296>
    cd90:	93 c0       	rjmp	.+294    	; 0xceb8 <_ZN13RemoteControl16procesar_comandoEh+0x3bc>
    cd92:	88 34       	cpi	r24, 0x48	; 72
    cd94:	91 05       	cpc	r25, r1
    cd96:	4c f4       	brge	.+18     	; 0xcdaa <_ZN13RemoteControl16procesar_comandoEh+0x2ae>
    cd98:	85 34       	cpi	r24, 0x45	; 69
    cd9a:	91 05       	cpc	r25, r1
    cd9c:	09 f4       	brne	.+2      	; 0xcda0 <_ZN13RemoteControl16procesar_comandoEh+0x2a4>
    cd9e:	68 c0       	rjmp	.+208    	; 0xce70 <_ZN13RemoteControl16procesar_comandoEh+0x374>
    cda0:	86 34       	cpi	r24, 0x46	; 70
    cda2:	91 05       	cpc	r25, r1
    cda4:	09 f0       	breq	.+2      	; 0xcda8 <_ZN13RemoteControl16procesar_comandoEh+0x2ac>
    cda6:	ea c0       	rjmp	.+468    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cda8:	75 c0       	rjmp	.+234    	; 0xce94 <_ZN13RemoteControl16procesar_comandoEh+0x398>
    cdaa:	84 3a       	cpi	r24, 0xA4	; 164
    cdac:	91 05       	cpc	r25, r1
    cdae:	09 f4       	brne	.+2      	; 0xcdb2 <_ZN13RemoteControl16procesar_comandoEh+0x2b6>
    cdb0:	95 c0       	rjmp	.+298    	; 0xcedc <_ZN13RemoteControl16procesar_comandoEh+0x3e0>
    cdb2:	85 3a       	cpi	r24, 0xA5	; 165
    cdb4:	91 05       	cpc	r25, r1
    cdb6:	09 f0       	breq	.+2      	; 0xcdba <_ZN13RemoteControl16procesar_comandoEh+0x2be>
    cdb8:	e1 c0       	rjmp	.+450    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cdba:	a2 c0       	rjmp	.+324    	; 0xcf00 <_ZN13RemoteControl16procesar_comandoEh+0x404>
					case RC_TV: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
    cdbc:	f2 01       	movw	r30, r4
    cdbe:	85 a1       	ldd	r24, Z+37	; 0x25
    cdc0:	88 23       	and	r24, r24
    cdc2:	09 f0       	breq	.+2      	; 0xcdc6 <_ZN13RemoteControl16procesar_comandoEh+0x2ca>
    cdc4:	db c0       	rjmp	.+438    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cdc6:	83 ea       	ldi	r24, 0xA3	; 163
    cdc8:	93 e1       	ldi	r25, 0x13	; 19
    cdca:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    cdce:	88 23       	and	r24, r24
    cdd0:	09 f0       	breq	.+2      	; 0xcdd4 <_ZN13RemoteControl16procesar_comandoEh+0x2d8>
    cdd2:	d4 c0       	rjmp	.+424    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cdd4:	f2 01       	movw	r30, r4
    cdd6:	86 a1       	ldd	r24, Z+38	; 0x26
    cdd8:	88 23       	and	r24, r24
    cdda:	09 f4       	brne	.+2      	; 0xcdde <_ZN13RemoteControl16procesar_comandoEh+0x2e2>
    cddc:	cf c0       	rjmp	.+414    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cdde:	5c c1       	rjmp	.+696    	; 0xd098 <_ZN13RemoteControl16procesar_comandoEh+0x59c>
						color1 = RGB(0, 2, 3);
						texto1 = "caminatas 1";
						modo = CAMINATAS1;
						break;
					case RC_FMRADIO: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
    cde0:	f2 01       	movw	r30, r4
    cde2:	85 a1       	ldd	r24, Z+37	; 0x25
    cde4:	88 23       	and	r24, r24
    cde6:	09 f0       	breq	.+2      	; 0xcdea <_ZN13RemoteControl16procesar_comandoEh+0x2ee>
    cde8:	c9 c0       	rjmp	.+402    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cdea:	83 ea       	ldi	r24, 0xA3	; 163
    cdec:	93 e1       	ldi	r25, 0x13	; 19
    cdee:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    cdf2:	88 23       	and	r24, r24
    cdf4:	09 f0       	breq	.+2      	; 0xcdf8 <_ZN13RemoteControl16procesar_comandoEh+0x2fc>
    cdf6:	c2 c0       	rjmp	.+388    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cdf8:	f2 01       	movw	r30, r4
    cdfa:	86 a1       	ldd	r24, Z+38	; 0x26
    cdfc:	88 23       	and	r24, r24
    cdfe:	09 f4       	brne	.+2      	; 0xce02 <_ZN13RemoteControl16procesar_comandoEh+0x306>
    ce00:	bd c0       	rjmp	.+378    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    ce02:	5e c1       	rjmp	.+700    	; 0xd0c0 <_ZN13RemoteControl16procesar_comandoEh+0x5c4>
						color1 = RGB(1, 3, 1);
						texto1 = "caminatas 2";
						modo = CAMINATAS2;
						break;
					case RC_MUSIC: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
    ce04:	f2 01       	movw	r30, r4
    ce06:	85 a1       	ldd	r24, Z+37	; 0x25
    ce08:	88 23       	and	r24, r24
    ce0a:	09 f0       	breq	.+2      	; 0xce0e <_ZN13RemoteControl16procesar_comandoEh+0x312>
    ce0c:	b7 c0       	rjmp	.+366    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    ce0e:	83 ea       	ldi	r24, 0xA3	; 163
    ce10:	93 e1       	ldi	r25, 0x13	; 19
    ce12:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    ce16:	88 23       	and	r24, r24
    ce18:	09 f0       	breq	.+2      	; 0xce1c <_ZN13RemoteControl16procesar_comandoEh+0x320>
    ce1a:	b0 c0       	rjmp	.+352    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    ce1c:	f2 01       	movw	r30, r4
    ce1e:	86 a1       	ldd	r24, Z+38	; 0x26
    ce20:	88 23       	and	r24, r24
    ce22:	09 f4       	brne	.+2      	; 0xce26 <_ZN13RemoteControl16procesar_comandoEh+0x32a>
    ce24:	ab c0       	rjmp	.+342    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    ce26:	60 c1       	rjmp	.+704    	; 0xd0e8 <_ZN13RemoteControl16procesar_comandoEh+0x5ec>
						color1 = RGB(0, 3, 1);
						texto1 = "traslaciones";
						modo = TRASLACIONES;
						break;
					case RC_PICTURES: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
    ce28:	f2 01       	movw	r30, r4
    ce2a:	85 a1       	ldd	r24, Z+37	; 0x25
    ce2c:	88 23       	and	r24, r24
    ce2e:	09 f0       	breq	.+2      	; 0xce32 <_ZN13RemoteControl16procesar_comandoEh+0x336>
    ce30:	a5 c0       	rjmp	.+330    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    ce32:	83 ea       	ldi	r24, 0xA3	; 163
    ce34:	93 e1       	ldi	r25, 0x13	; 19
    ce36:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    ce3a:	88 23       	and	r24, r24
    ce3c:	09 f0       	breq	.+2      	; 0xce40 <_ZN13RemoteControl16procesar_comandoEh+0x344>
    ce3e:	9e c0       	rjmp	.+316    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    ce40:	f2 01       	movw	r30, r4
    ce42:	86 a1       	ldd	r24, Z+38	; 0x26
    ce44:	88 23       	and	r24, r24
    ce46:	09 f4       	brne	.+2      	; 0xce4a <_ZN13RemoteControl16procesar_comandoEh+0x34e>
    ce48:	99 c0       	rjmp	.+306    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    ce4a:	62 c1       	rjmp	.+708    	; 0xd110 <_ZN13RemoteControl16procesar_comandoEh+0x614>
						color1 = RGB(2, 2, 0);
						texto1 = "rotaciones";
						modo = ROTACIONES;
						break;
					case RC_VIDEOCLIP: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
    ce4c:	f2 01       	movw	r30, r4
    ce4e:	85 a1       	ldd	r24, Z+37	; 0x25
    ce50:	88 23       	and	r24, r24
    ce52:	09 f0       	breq	.+2      	; 0xce56 <_ZN13RemoteControl16procesar_comandoEh+0x35a>
    ce54:	93 c0       	rjmp	.+294    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    ce56:	83 ea       	ldi	r24, 0xA3	; 163
    ce58:	93 e1       	ldi	r25, 0x13	; 19
    ce5a:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    ce5e:	88 23       	and	r24, r24
    ce60:	09 f0       	breq	.+2      	; 0xce64 <_ZN13RemoteControl16procesar_comandoEh+0x368>
    ce62:	8c c0       	rjmp	.+280    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    ce64:	f2 01       	movw	r30, r4
    ce66:	86 a1       	ldd	r24, Z+38	; 0x26
    ce68:	88 23       	and	r24, r24
    ce6a:	09 f4       	brne	.+2      	; 0xce6e <_ZN13RemoteControl16procesar_comandoEh+0x372>
    ce6c:	87 c0       	rjmp	.+270    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    ce6e:	64 c1       	rjmp	.+712    	; 0xd138 <_ZN13RemoteControl16procesar_comandoEh+0x63c>
						color1 = RGB(2, 1, 3);
						texto1 = "editar centro";
						modo = EDITAR_CENTRO;
						break;
					case RC_DVD2: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
    ce70:	f2 01       	movw	r30, r4
    ce72:	85 a1       	ldd	r24, Z+37	; 0x25
    ce74:	88 23       	and	r24, r24
    ce76:	09 f0       	breq	.+2      	; 0xce7a <_ZN13RemoteControl16procesar_comandoEh+0x37e>
    ce78:	81 c0       	rjmp	.+258    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    ce7a:	83 ea       	ldi	r24, 0xA3	; 163
    ce7c:	93 e1       	ldi	r25, 0x13	; 19
    ce7e:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    ce82:	88 23       	and	r24, r24
    ce84:	09 f0       	breq	.+2      	; 0xce88 <_ZN13RemoteControl16procesar_comandoEh+0x38c>
    ce86:	7a c0       	rjmp	.+244    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    ce88:	f2 01       	movw	r30, r4
    ce8a:	86 a1       	ldd	r24, Z+38	; 0x26
    ce8c:	88 23       	and	r24, r24
    ce8e:	09 f4       	brne	.+2      	; 0xce92 <_ZN13RemoteControl16procesar_comandoEh+0x396>
    ce90:	75 c0       	rjmp	.+234    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    ce92:	66 c1       	rjmp	.+716    	; 0xd160 <_ZN13RemoteControl16procesar_comandoEh+0x664>
						texto1 = "editar posicion";
						modo = EDITAR_POS;
						mov.goto_pos_ref ();
						break;
					case RC_GAMEZONE: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
    ce94:	f2 01       	movw	r30, r4
    ce96:	85 a1       	ldd	r24, Z+37	; 0x25
    ce98:	88 23       	and	r24, r24
    ce9a:	09 f0       	breq	.+2      	; 0xce9e <_ZN13RemoteControl16procesar_comandoEh+0x3a2>
    ce9c:	6f c0       	rjmp	.+222    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    ce9e:	83 ea       	ldi	r24, 0xA3	; 163
    cea0:	93 e1       	ldi	r25, 0x13	; 19
    cea2:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    cea6:	88 23       	and	r24, r24
    cea8:	09 f0       	breq	.+2      	; 0xceac <_ZN13RemoteControl16procesar_comandoEh+0x3b0>
    ceaa:	68 c0       	rjmp	.+208    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    ceac:	f2 01       	movw	r30, r4
    ceae:	86 a1       	ldd	r24, Z+38	; 0x26
    ceb0:	88 23       	and	r24, r24
    ceb2:	09 f4       	brne	.+2      	; 0xceb6 <_ZN13RemoteControl16procesar_comandoEh+0x3ba>
    ceb4:	63 c0       	rjmp	.+198    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    ceb6:	6e c1       	rjmp	.+732    	; 0xd194 <_ZN13RemoteControl16procesar_comandoEh+0x698>
						color1 = RGB(2, 1, 2);
						texto1 = "osc. traslacion";
						modo = OSCILADORES1;
						break;
					case RC_APPLICATION: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
    ceb8:	f2 01       	movw	r30, r4
    ceba:	85 a1       	ldd	r24, Z+37	; 0x25
    cebc:	88 23       	and	r24, r24
    cebe:	09 f0       	breq	.+2      	; 0xcec2 <_ZN13RemoteControl16procesar_comandoEh+0x3c6>
    cec0:	5d c0       	rjmp	.+186    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cec2:	83 ea       	ldi	r24, 0xA3	; 163
    cec4:	93 e1       	ldi	r25, 0x13	; 19
    cec6:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    ceca:	88 23       	and	r24, r24
    cecc:	09 f0       	breq	.+2      	; 0xced0 <_ZN13RemoteControl16procesar_comandoEh+0x3d4>
    cece:	56 c0       	rjmp	.+172    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    ced0:	f2 01       	movw	r30, r4
    ced2:	86 a1       	ldd	r24, Z+38	; 0x26
    ced4:	88 23       	and	r24, r24
    ced6:	09 f4       	brne	.+2      	; 0xceda <_ZN13RemoteControl16procesar_comandoEh+0x3de>
    ced8:	51 c0       	rjmp	.+162    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    ceda:	70 c1       	rjmp	.+736    	; 0xd1bc <_ZN13RemoteControl16procesar_comandoEh+0x6c0>
						color1 = RGB(1, 0, 3);
						texto1 = "osc. rotacion";
						modo = OSCILADORES3;
						break;
					case RC_TV+100: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
    cedc:	f2 01       	movw	r30, r4
    cede:	85 a1       	ldd	r24, Z+37	; 0x25
    cee0:	88 23       	and	r24, r24
    cee2:	09 f0       	breq	.+2      	; 0xcee6 <_ZN13RemoteControl16procesar_comandoEh+0x3ea>
    cee4:	4b c0       	rjmp	.+150    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cee6:	83 ea       	ldi	r24, 0xA3	; 163
    cee8:	93 e1       	ldi	r25, 0x13	; 19
    ceea:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    ceee:	88 23       	and	r24, r24
    cef0:	09 f0       	breq	.+2      	; 0xcef4 <_ZN13RemoteControl16procesar_comandoEh+0x3f8>
    cef2:	44 c0       	rjmp	.+136    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cef4:	f2 01       	movw	r30, r4
    cef6:	86 a1       	ldd	r24, Z+38	; 0x26
    cef8:	88 23       	and	r24, r24
    cefa:	09 f4       	brne	.+2      	; 0xcefe <_ZN13RemoteControl16procesar_comandoEh+0x402>
    cefc:	3f c0       	rjmp	.+126    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cefe:	72 c1       	rjmp	.+740    	; 0xd1e4 <_ZN13RemoteControl16procesar_comandoEh+0x6e8>
						color1 = RGB(2, 2, 0);
						texto1 = "osc. centro";
						modo = OSCILADORES2;
						break;
					case RC_FMRADIO+100: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
    cf00:	f2 01       	movw	r30, r4
    cf02:	85 a1       	ldd	r24, Z+37	; 0x25
    cf04:	88 23       	and	r24, r24
    cf06:	d1 f5       	brne	.+116    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cf08:	83 ea       	ldi	r24, 0xA3	; 163
    cf0a:	93 e1       	ldi	r25, 0x13	; 19
    cf0c:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    cf10:	88 23       	and	r24, r24
    cf12:	a1 f5       	brne	.+104    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cf14:	f2 01       	movw	r30, r4
    cf16:	86 a1       	ldd	r24, Z+38	; 0x26
    cf18:	88 23       	and	r24, r24
    cf1a:	81 f1       	breq	.+96     	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cf1c:	79 c1       	rjmp	.+754    	; 0xd210 <_ZN13RemoteControl16procesar_comandoEh+0x714>
						texto1 = "conductas";
						modo = CONDUCTAS;
						break;
				}
			} else {
				switch (modo) {
    cf1e:	f2 01       	movw	r30, r4
    cf20:	86 a1       	ldd	r24, Z+38	; 0x26
    cf22:	84 30       	cpi	r24, 0x04	; 4
    cf24:	c1 f0       	breq	.+48     	; 0xcf56 <_ZN13RemoteControl16procesar_comandoEh+0x45a>
    cf26:	85 30       	cpi	r24, 0x05	; 5
    cf28:	28 f4       	brcc	.+10     	; 0xcf34 <_ZN13RemoteControl16procesar_comandoEh+0x438>
    cf2a:	81 30       	cpi	r24, 0x01	; 1
    cf2c:	38 f1       	brcs	.+78     	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cf2e:	83 30       	cpi	r24, 0x03	; 3
    cf30:	40 f0       	brcs	.+16     	; 0xcf42 <_ZN13RemoteControl16procesar_comandoEh+0x446>
    cf32:	0c c0       	rjmp	.+24     	; 0xcf4c <_ZN13RemoteControl16procesar_comandoEh+0x450>
    cf34:	86 30       	cpi	r24, 0x06	; 6
    cf36:	c9 f0       	breq	.+50     	; 0xcf6a <_ZN13RemoteControl16procesar_comandoEh+0x46e>
    cf38:	86 30       	cpi	r24, 0x06	; 6
    cf3a:	90 f0       	brcs	.+36     	; 0xcf60 <_ZN13RemoteControl16procesar_comandoEh+0x464>
    cf3c:	8a 30       	cpi	r24, 0x0A	; 10
    cf3e:	f0 f4       	brcc	.+60     	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
    cf40:	19 c0       	rjmp	.+50     	; 0xcf74 <_ZN13RemoteControl16procesar_comandoEh+0x478>
					case CAMINATAS1: case CAMINATAS2: caminatas (comando); break;
    cf42:	c2 01       	movw	r24, r4
    cf44:	6f 2d       	mov	r22, r15
    cf46:	0e 94 ef 5f 	call	0xbfde	; 0xbfde <_ZN13RemoteControl9caminatasEh>
    cf4a:	18 c0       	rjmp	.+48     	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
					case TRASLACIONES: traslaciones (comando); break;
    cf4c:	c2 01       	movw	r24, r4
    cf4e:	6f 2d       	mov	r22, r15
    cf50:	0e 94 d0 5c 	call	0xb9a0	; 0xb9a0 <_ZN13RemoteControl12traslacionesEh>
    cf54:	13 c0       	rjmp	.+38     	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
					case ROTACIONES: rotaciones (comando); break;
    cf56:	c2 01       	movw	r24, r4
    cf58:	6f 2d       	mov	r22, r15
    cf5a:	0e 94 bd 59 	call	0xb37a	; 0xb37a <_ZN13RemoteControl10rotacionesEh>
    cf5e:	0e c0       	rjmp	.+28     	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
					case EDITAR_CENTRO: editar_centro (comando); break;
    cf60:	c2 01       	movw	r24, r4
    cf62:	6f 2d       	mov	r22, r15
    cf64:	0e 94 8a 54 	call	0xa914	; 0xa914 <_ZN13RemoteControl13editar_centroEh>
    cf68:	09 c0       	rjmp	.+18     	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
					case EDITAR_POS: editar_pos (comando); break;
    cf6a:	c2 01       	movw	r24, r4
    cf6c:	6f 2d       	mov	r22, r15
    cf6e:	0e 94 10 57 	call	0xae20	; 0xae20 <_ZN13RemoteControl10editar_posEh>
    cf72:	04 c0       	rjmp	.+8      	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
					case OSCILADORES1: case OSCILADORES2: case OSCILADORES3: osciladores (comando); break;
    cf74:	c2 01       	movw	r24, r4
    cf76:	6f 2d       	mov	r22, r15
    cf78:	0e 94 1c 51 	call	0xa238	; 0xa238 <_ZN13RemoteControl11osciladoresEh>
					case CONDUCTAS: conductas (comando); break;
				}
			}
	}
	
	displayText ();
    cf7c:	c2 01       	movw	r24, r4
    cf7e:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <_ZN13RemoteControl11displayTextEv>
	
}
    cf82:	ca 53       	subi	r28, 0x3A	; 58
    cf84:	df 4f       	sbci	r29, 0xFF	; 255
    cf86:	0f b6       	in	r0, 0x3f	; 63
    cf88:	f8 94       	cli
    cf8a:	de bf       	out	0x3e, r29	; 62
    cf8c:	0f be       	out	0x3f, r0	; 63
    cf8e:	cd bf       	out	0x3d, r28	; 61
    cf90:	cf 91       	pop	r28
    cf92:	df 91       	pop	r29
    cf94:	1f 91       	pop	r17
    cf96:	0f 91       	pop	r16
    cf98:	ff 90       	pop	r15
    cf9a:	ef 90       	pop	r14
    cf9c:	df 90       	pop	r13
    cf9e:	cf 90       	pop	r12
    cfa0:	bf 90       	pop	r11
    cfa2:	af 90       	pop	r10
    cfa4:	9f 90       	pop	r9
    cfa6:	8f 90       	pop	r8
    cfa8:	7f 90       	pop	r7
    cfaa:	6f 90       	pop	r6
    cfac:	5f 90       	pop	r5
    cfae:	4f 90       	pop	r4
    cfb0:	08 95       	ret
	texto1 = "def";
	
	switch (comando) {
		case RC_POWER: 
			if (isMoving || pantalla.isBusy()) {break;}
			if (modo == REMOTE_OFF) {
    cfb2:	f2 01       	movw	r30, r4
    cfb4:	86 a1       	ldd	r24, Z+38	; 0x26
    cfb6:	88 23       	and	r24, r24
    cfb8:	09 f4       	brne	.+2      	; 0xcfbc <_ZN13RemoteControl16procesar_comandoEh+0x4c0>
    cfba:	1b ce       	rjmp	.-970    	; 0xcbf2 <_ZN13RemoteControl16procesar_comandoEh+0xf6>
    cfbc:	24 ce       	rjmp	.-952    	; 0xcc06 <_ZN13RemoteControl16procesar_comandoEh+0x10a>
				modo = REMOTE_OFF;
			}
			break;
		case RC_SUSPEND:                                // una de estas tiene que resetear incluso la velocidad, paso, etc. (para facilitar la edicion)
			if (isMoving || pantalla.isBusy()) {break;}
			angulo_offset = 0;
    cfbe:	80 e0       	ldi	r24, 0x00	; 0
    cfc0:	90 e0       	ldi	r25, 0x00	; 0
    cfc2:	a0 e0       	ldi	r26, 0x00	; 0
    cfc4:	b0 e0       	ldi	r27, 0x00	; 0
    cfc6:	f2 01       	movw	r30, r4
    cfc8:	81 87       	std	Z+9, r24	; 0x09
    cfca:	92 87       	std	Z+10, r25	; 0x0a
    cfcc:	a3 87       	std	Z+11, r26	; 0x0b
    cfce:	b4 87       	std	Z+12, r27	; 0x0c
			centro_caminata = (COORD2D) {0, 0};
    cfd0:	d2 01       	movw	r26, r4
    cfd2:	59 96       	adiw	r26, 0x19	; 25
    cfd4:	e8 e9       	ldi	r30, 0x98	; 152
    cfd6:	f4 e0       	ldi	r31, 0x04	; 4
    cfd8:	88 e0       	ldi	r24, 0x08	; 8
    cfda:	01 90       	ld	r0, Z+
    cfdc:	0d 92       	st	X+, r0
    cfde:	81 50       	subi	r24, 0x01	; 1
    cfe0:	e1 f7       	brne	.-8      	; 0xcfda <_ZN13RemoteControl16procesar_comandoEh+0x4de>
			texto1 = "suspend";
    cfe2:	8e 01       	movw	r16, r28
    cfe4:	0d 5e       	subi	r16, 0xED	; 237
    cfe6:	1f 4f       	sbci	r17, 0xFF	; 255
    cfe8:	c8 01       	movw	r24, r16
    cfea:	60 e4       	ldi	r22, 0x40	; 64
    cfec:	73 e0       	ldi	r23, 0x03	; 3
    cfee:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    cff2:	c5 01       	movw	r24, r10
    cff4:	b8 01       	movw	r22, r16
    cff6:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    cffa:	c8 01       	movw	r24, r16
    cffc:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
			mov.goto_pos_ref (DEFAULT_POSITION);
    d000:	bf e7       	ldi	r27, 0x7F	; 127
    d002:	6b 2e       	mov	r6, r27
    d004:	71 2c       	mov	r7, r1
    d006:	6c 0e       	add	r6, r28
    d008:	7d 1e       	adc	r7, r29
    d00a:	c3 01       	movw	r24, r6
    d00c:	43 e3       	ldi	r20, 0x33	; 51
    d00e:	53 e3       	ldi	r21, 0x33	; 51
    d010:	6b ef       	ldi	r22, 0xFB	; 251
    d012:	70 e4       	ldi	r23, 0x40	; 64
    d014:	03 e3       	ldi	r16, 0x33	; 51
    d016:	13 e3       	ldi	r17, 0x33	; 51
    d018:	23 ef       	ldi	r18, 0xF3	; 243
    d01a:	31 e4       	ldi	r19, 0x41	; 65
    d01c:	0f 2e       	mov	r0, r31
    d01e:	f0 e0       	ldi	r31, 0x00	; 0
    d020:	cf 2e       	mov	r12, r31
    d022:	f0 e0       	ldi	r31, 0x00	; 0
    d024:	df 2e       	mov	r13, r31
    d026:	f0 e1       	ldi	r31, 0x10	; 16
    d028:	ef 2e       	mov	r14, r31
    d02a:	f2 e4       	ldi	r31, 0x42	; 66
    d02c:	ff 2e       	mov	r15, r31
    d02e:	f0 2d       	mov	r31, r0
    d030:	0f 2e       	mov	r0, r31
    d032:	fd ec       	ldi	r31, 0xCD	; 205
    d034:	8f 2e       	mov	r8, r31
    d036:	fc ec       	ldi	r31, 0xCC	; 204
    d038:	9f 2e       	mov	r9, r31
    d03a:	fe e0       	ldi	r31, 0x0E	; 14
    d03c:	af 2e       	mov	r10, r31
    d03e:	f2 e4       	ldi	r31, 0x42	; 66
    d040:	bf 2e       	mov	r11, r31
    d042:	f0 2d       	mov	r31, r0
    d044:	0e 94 a1 47 	call	0x8f42	; 0x8f42 <_Z8hexagonoffff>
    d048:	85 ee       	ldi	r24, 0xE5	; 229
    d04a:	9f e0       	ldi	r25, 0x0F	; 15
    d04c:	b3 01       	movw	r22, r6
    d04e:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <_ZN10Movimiento12goto_pos_refEP7COORD3D>
    d052:	94 cf       	rjmp	.-216    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
			break;
		case RC_SLEEP: 
			break;
		case RC_HOME: 
			if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
			angulo_offset = 0;
    d054:	80 e0       	ldi	r24, 0x00	; 0
    d056:	90 e0       	ldi	r25, 0x00	; 0
    d058:	a0 e0       	ldi	r26, 0x00	; 0
    d05a:	b0 e0       	ldi	r27, 0x00	; 0
    d05c:	f2 01       	movw	r30, r4
    d05e:	81 87       	std	Z+9, r24	; 0x09
    d060:	92 87       	std	Z+10, r25	; 0x0a
    d062:	a3 87       	std	Z+11, r26	; 0x0b
    d064:	b4 87       	std	Z+12, r27	; 0x0c
			centro_caminata = (COORD2D) {0, 0};
    d066:	d2 01       	movw	r26, r4
    d068:	59 96       	adiw	r26, 0x19	; 25
    d06a:	e0 e9       	ldi	r30, 0x90	; 144
    d06c:	f4 e0       	ldi	r31, 0x04	; 4
    d06e:	88 e0       	ldi	r24, 0x08	; 8
    d070:	01 90       	ld	r0, Z+
    d072:	0d 92       	st	X+, r0
    d074:	81 50       	subi	r24, 0x01	; 1
    d076:	e1 f7       	brne	.-8      	; 0xd070 <_ZN13RemoteControl16procesar_comandoEh+0x574>
			texto1 = "home";
    d078:	8e 01       	movw	r16, r28
    d07a:	07 5e       	subi	r16, 0xE7	; 231
    d07c:	1f 4f       	sbci	r17, 0xFF	; 255
    d07e:	c8 01       	movw	r24, r16
    d080:	68 e4       	ldi	r22, 0x48	; 72
    d082:	73 e0       	ldi	r23, 0x03	; 3
    d084:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    d088:	c5 01       	movw	r24, r10
    d08a:	b8 01       	movw	r22, r16
    d08c:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    d090:	c8 01       	movw	r24, r16
    d092:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    d096:	79 c0       	rjmp	.+242    	; 0xd18a <_ZN13RemoteControl16procesar_comandoEh+0x68e>
			// botones de modo
			if (comando>=RC_TV && comando<=RC_APPLICATION) {
				switch (comando + 100*pagina) {
					case RC_TV: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
						color1 = RGB(0, 2, 3);
    d098:	8b e0       	ldi	r24, 0x0B	; 11
    d09a:	f2 01       	movw	r30, r4
    d09c:	84 ab       	std	Z+52, r24	; 0x34
						texto1 = "caminatas 1";
    d09e:	8e 01       	movw	r16, r28
    d0a0:	0d 5b       	subi	r16, 0xBD	; 189
    d0a2:	1f 4f       	sbci	r17, 0xFF	; 255
    d0a4:	c8 01       	movw	r24, r16
    d0a6:	6d e4       	ldi	r22, 0x4D	; 77
    d0a8:	73 e0       	ldi	r23, 0x03	; 3
    d0aa:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    d0ae:	c5 01       	movw	r24, r10
    d0b0:	b8 01       	movw	r22, r16
    d0b2:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    d0b6:	c8 01       	movw	r24, r16
    d0b8:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
						modo = CAMINATAS1;
    d0bc:	81 e0       	ldi	r24, 0x01	; 1
    d0be:	a5 c0       	rjmp	.+330    	; 0xd20a <_ZN13RemoteControl16procesar_comandoEh+0x70e>
						break;
					case RC_FMRADIO: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
						color1 = RGB(1, 3, 1);
    d0c0:	8d e1       	ldi	r24, 0x1D	; 29
    d0c2:	f2 01       	movw	r30, r4
    d0c4:	84 ab       	std	Z+52, r24	; 0x34
						texto1 = "caminatas 2";
    d0c6:	8e 01       	movw	r16, r28
    d0c8:	07 5b       	subi	r16, 0xB7	; 183
    d0ca:	1f 4f       	sbci	r17, 0xFF	; 255
    d0cc:	c8 01       	movw	r24, r16
    d0ce:	69 e5       	ldi	r22, 0x59	; 89
    d0d0:	73 e0       	ldi	r23, 0x03	; 3
    d0d2:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    d0d6:	c5 01       	movw	r24, r10
    d0d8:	b8 01       	movw	r22, r16
    d0da:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    d0de:	c8 01       	movw	r24, r16
    d0e0:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
						modo = CAMINATAS2;
    d0e4:	82 e0       	ldi	r24, 0x02	; 2
    d0e6:	91 c0       	rjmp	.+290    	; 0xd20a <_ZN13RemoteControl16procesar_comandoEh+0x70e>
						break;
					case RC_MUSIC: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
						color1 = RGB(0, 3, 1);
    d0e8:	8d e0       	ldi	r24, 0x0D	; 13
    d0ea:	f2 01       	movw	r30, r4
    d0ec:	84 ab       	std	Z+52, r24	; 0x34
						texto1 = "traslaciones";
    d0ee:	8e 01       	movw	r16, r28
    d0f0:	01 5b       	subi	r16, 0xB1	; 177
    d0f2:	1f 4f       	sbci	r17, 0xFF	; 255
    d0f4:	c8 01       	movw	r24, r16
    d0f6:	65 e6       	ldi	r22, 0x65	; 101
    d0f8:	73 e0       	ldi	r23, 0x03	; 3
    d0fa:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    d0fe:	c5 01       	movw	r24, r10
    d100:	b8 01       	movw	r22, r16
    d102:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    d106:	c8 01       	movw	r24, r16
    d108:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
						modo = TRASLACIONES;
    d10c:	83 e0       	ldi	r24, 0x03	; 3
    d10e:	7d c0       	rjmp	.+250    	; 0xd20a <_ZN13RemoteControl16procesar_comandoEh+0x70e>
						break;
					case RC_PICTURES: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
						color1 = RGB(2, 2, 0);
    d110:	88 e2       	ldi	r24, 0x28	; 40
    d112:	f2 01       	movw	r30, r4
    d114:	84 ab       	std	Z+52, r24	; 0x34
						texto1 = "rotaciones";
    d116:	8e 01       	movw	r16, r28
    d118:	0b 5a       	subi	r16, 0xAB	; 171
    d11a:	1f 4f       	sbci	r17, 0xFF	; 255
    d11c:	c8 01       	movw	r24, r16
    d11e:	62 e7       	ldi	r22, 0x72	; 114
    d120:	73 e0       	ldi	r23, 0x03	; 3
    d122:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    d126:	c5 01       	movw	r24, r10
    d128:	b8 01       	movw	r22, r16
    d12a:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    d12e:	c8 01       	movw	r24, r16
    d130:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
						modo = ROTACIONES;
    d134:	84 e0       	ldi	r24, 0x04	; 4
    d136:	69 c0       	rjmp	.+210    	; 0xd20a <_ZN13RemoteControl16procesar_comandoEh+0x70e>
						break;
					case RC_VIDEOCLIP: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
						color1 = RGB(2, 1, 3);
    d138:	87 e2       	ldi	r24, 0x27	; 39
    d13a:	f2 01       	movw	r30, r4
    d13c:	84 ab       	std	Z+52, r24	; 0x34
						texto1 = "editar centro";
    d13e:	8e 01       	movw	r16, r28
    d140:	05 5a       	subi	r16, 0xA5	; 165
    d142:	1f 4f       	sbci	r17, 0xFF	; 255
    d144:	c8 01       	movw	r24, r16
    d146:	6d e7       	ldi	r22, 0x7D	; 125
    d148:	73 e0       	ldi	r23, 0x03	; 3
    d14a:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    d14e:	c5 01       	movw	r24, r10
    d150:	b8 01       	movw	r22, r16
    d152:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    d156:	c8 01       	movw	r24, r16
    d158:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
						modo = EDITAR_CENTRO;
    d15c:	85 e0       	ldi	r24, 0x05	; 5
    d15e:	55 c0       	rjmp	.+170    	; 0xd20a <_ZN13RemoteControl16procesar_comandoEh+0x70e>
						break;
					case RC_DVD2: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
						color1 = RGB(1, 3, 3);
    d160:	8f e1       	ldi	r24, 0x1F	; 31
    d162:	f2 01       	movw	r30, r4
    d164:	84 ab       	std	Z+52, r24	; 0x34
						texto1 = "editar posicion";
    d166:	8e 01       	movw	r16, r28
    d168:	0f 59       	subi	r16, 0x9F	; 159
    d16a:	1f 4f       	sbci	r17, 0xFF	; 255
    d16c:	c8 01       	movw	r24, r16
    d16e:	6b e8       	ldi	r22, 0x8B	; 139
    d170:	73 e0       	ldi	r23, 0x03	; 3
    d172:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    d176:	c5 01       	movw	r24, r10
    d178:	b8 01       	movw	r22, r16
    d17a:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    d17e:	c8 01       	movw	r24, r16
    d180:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
						modo = EDITAR_POS;
    d184:	86 e0       	ldi	r24, 0x06	; 6
    d186:	f2 01       	movw	r30, r4
    d188:	86 a3       	std	Z+38, r24	; 0x26
						mov.goto_pos_ref ();
    d18a:	85 ee       	ldi	r24, 0xE5	; 229
    d18c:	9f e0       	ldi	r25, 0x0F	; 15
    d18e:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <_ZN10Movimiento12goto_pos_refEv>
    d192:	f4 ce       	rjmp	.-536    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
						break;
					case RC_GAMEZONE: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
						color1 = RGB(2, 1, 2);
    d194:	86 e2       	ldi	r24, 0x26	; 38
    d196:	f2 01       	movw	r30, r4
    d198:	84 ab       	std	Z+52, r24	; 0x34
						texto1 = "osc. traslacion";
    d19a:	8e 01       	movw	r16, r28
    d19c:	09 59       	subi	r16, 0x99	; 153
    d19e:	1f 4f       	sbci	r17, 0xFF	; 255
    d1a0:	c8 01       	movw	r24, r16
    d1a2:	6b e9       	ldi	r22, 0x9B	; 155
    d1a4:	73 e0       	ldi	r23, 0x03	; 3
    d1a6:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    d1aa:	c5 01       	movw	r24, r10
    d1ac:	b8 01       	movw	r22, r16
    d1ae:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    d1b2:	c8 01       	movw	r24, r16
    d1b4:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
						modo = OSCILADORES1;
    d1b8:	87 e0       	ldi	r24, 0x07	; 7
    d1ba:	27 c0       	rjmp	.+78     	; 0xd20a <_ZN13RemoteControl16procesar_comandoEh+0x70e>
						break;
					case RC_APPLICATION: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
						color1 = RGB(1, 0, 3);
    d1bc:	83 e1       	ldi	r24, 0x13	; 19
    d1be:	f2 01       	movw	r30, r4
    d1c0:	84 ab       	std	Z+52, r24	; 0x34
						texto1 = "osc. rotacion";
    d1c2:	8e 01       	movw	r16, r28
    d1c4:	03 59       	subi	r16, 0x93	; 147
    d1c6:	1f 4f       	sbci	r17, 0xFF	; 255
    d1c8:	c8 01       	movw	r24, r16
    d1ca:	6b ea       	ldi	r22, 0xAB	; 171
    d1cc:	73 e0       	ldi	r23, 0x03	; 3
    d1ce:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    d1d2:	c5 01       	movw	r24, r10
    d1d4:	b8 01       	movw	r22, r16
    d1d6:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    d1da:	c8 01       	movw	r24, r16
    d1dc:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
						modo = OSCILADORES3;
    d1e0:	89 e0       	ldi	r24, 0x09	; 9
    d1e2:	13 c0       	rjmp	.+38     	; 0xd20a <_ZN13RemoteControl16procesar_comandoEh+0x70e>
						break;
					case RC_TV+100: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
						color1 = RGB(2, 2, 0);
    d1e4:	88 e2       	ldi	r24, 0x28	; 40
    d1e6:	f2 01       	movw	r30, r4
    d1e8:	84 ab       	std	Z+52, r24	; 0x34
						texto1 = "osc. centro";
    d1ea:	8e 01       	movw	r16, r28
    d1ec:	0d 58       	subi	r16, 0x8D	; 141
    d1ee:	1f 4f       	sbci	r17, 0xFF	; 255
    d1f0:	c8 01       	movw	r24, r16
    d1f2:	69 eb       	ldi	r22, 0xB9	; 185
    d1f4:	73 e0       	ldi	r23, 0x03	; 3
    d1f6:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    d1fa:	c5 01       	movw	r24, r10
    d1fc:	b8 01       	movw	r22, r16
    d1fe:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    d202:	c8 01       	movw	r24, r16
    d204:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
						modo = OSCILADORES2;
    d208:	88 e0       	ldi	r24, 0x08	; 8
    d20a:	f2 01       	movw	r30, r4
    d20c:	86 a3       	std	Z+38, r24	; 0x26
    d20e:	b6 ce       	rjmp	.-660    	; 0xcf7c <_ZN13RemoteControl16procesar_comandoEh+0x480>
						break;
					case RC_FMRADIO+100: 
						if (isMoving || pantalla.isBusy() || modo==REMOTE_OFF) {break;}
						color1 = RGB(1, 2, 1);
    d210:	89 e1       	ldi	r24, 0x19	; 25
    d212:	f2 01       	movw	r30, r4
    d214:	84 ab       	std	Z+52, r24	; 0x34
						texto1 = "conductas";
    d216:	8e 01       	movw	r16, r28
    d218:	07 58       	subi	r16, 0x87	; 135
    d21a:	1f 4f       	sbci	r17, 0xFF	; 255
    d21c:	c8 01       	movw	r24, r16
    d21e:	65 ec       	ldi	r22, 0xC5	; 197
    d220:	73 e0       	ldi	r23, 0x03	; 3
    d222:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    d226:	c5 01       	movw	r24, r10
    d228:	b8 01       	movw	r22, r16
    d22a:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    d22e:	c8 01       	movw	r24, r16
    d230:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
						modo = CONDUCTAS;
    d234:	8a e0       	ldi	r24, 0x0A	; 10
    d236:	e9 cf       	rjmp	.-46     	; 0xd20a <_ZN13RemoteControl16procesar_comandoEh+0x70e>

0000d238 <_ZN10SerialcommC1Ev>:
    d238:	08 95       	ret

0000d23a <_ZN10Serialcomm8send_msgEhhPh>:
		(*callback) (instruccion, largo, data);        // ..lo ejecuta                       
		cont = 0;                               // y resetea cont, lo que produce un "running status" 
	}
}

void Serialcomm::send_msg (byte instruccion_, byte largo_, byte* data_) {
    d23a:	ef 92       	push	r14
    d23c:	ff 92       	push	r15
    d23e:	0f 93       	push	r16
    d240:	1f 93       	push	r17
    d242:	cf 93       	push	r28
    d244:	df 93       	push	r29
    d246:	ec 01       	movw	r28, r24
    d248:	04 2f       	mov	r16, r20
    d24a:	79 01       	movw	r14, r18
  byte head = sync + instruccion_ + (mask+1)*largo_;
    d24c:	9a 85       	ldd	r25, Y+10	; 0x0a
    d24e:	96 0f       	add	r25, r22
    d250:	8b 85       	ldd	r24, Y+11	; 0x0b
    d252:	8f 5f       	subi	r24, 0xFF	; 255
    d254:	84 9f       	mul	r24, r20
    d256:	10 2d       	mov	r17, r0
    d258:	11 24       	eor	r1, r1
    d25a:	19 0f       	add	r17, r25
  if (head != last || largo_ == 0) {                   // el running status no es válido para mensajes de que son sólo head (largo=0)
    d25c:	89 85       	ldd	r24, Y+9	; 0x09
    d25e:	18 17       	cp	r17, r24
    d260:	11 f4       	brne	.+4      	; 0xd266 <_ZN10Serialcomm8send_msgEhhPh+0x2c>
    d262:	44 23       	and	r20, r20
    d264:	51 f4       	brne	.+20     	; 0xd27a <_ZN10Serialcomm8send_msgEhhPh+0x40>
    port->write (head);                                // byte de cabecera (la instrucción no incluye el largo)
    d266:	e8 81       	ld	r30, Y
    d268:	f9 81       	ldd	r31, Y+1	; 0x01
    d26a:	a0 81       	ld	r26, Z
    d26c:	b1 81       	ldd	r27, Z+1	; 0x01
    d26e:	2d 91       	ld	r18, X+
    d270:	3c 91       	ld	r19, X
    d272:	cf 01       	movw	r24, r30
    d274:	61 2f       	mov	r22, r17
    d276:	f9 01       	movw	r30, r18
    d278:	09 95       	icall
  }
  port->write (data_, largo_);
    d27a:	e8 81       	ld	r30, Y
    d27c:	f9 81       	ldd	r31, Y+1	; 0x01
    d27e:	a0 81       	ld	r26, Z
    d280:	b1 81       	ldd	r27, Z+1	; 0x01
    d282:	14 96       	adiw	r26, 0x04	; 4
    d284:	2d 91       	ld	r18, X+
    d286:	3c 91       	ld	r19, X
    d288:	15 97       	sbiw	r26, 0x05	; 5
    d28a:	cf 01       	movw	r24, r30
    d28c:	b7 01       	movw	r22, r14
    d28e:	40 2f       	mov	r20, r16
    d290:	50 e0       	ldi	r21, 0x00	; 0
    d292:	f9 01       	movw	r30, r18
    d294:	09 95       	icall
  last = head;
    d296:	19 87       	std	Y+9, r17	; 0x09
}
    d298:	df 91       	pop	r29
    d29a:	cf 91       	pop	r28
    d29c:	1f 91       	pop	r17
    d29e:	0f 91       	pop	r16
    d2a0:	ff 90       	pop	r15
    d2a2:	ef 90       	pop	r14
    d2a4:	08 95       	ret

0000d2a6 <_ZN10Serialcomm12process_byteEh>:

void Serialcomm::process_byte (byte b) {
    d2a6:	dc 01       	movw	r26, r24
  if (b >= sync) {                                // ...si es un HEAD...
    d2a8:	1a 96       	adiw	r26, 0x0a	; 10
    d2aa:	2c 91       	ld	r18, X
    d2ac:	1a 97       	sbiw	r26, 0x0a	; 10
    d2ae:	62 17       	cp	r22, r18
    d2b0:	d8 f0       	brcs	.+54     	; 0xd2e8 <_ZN10Serialcomm12process_byteEh+0x42>
    instruccion = (b-sync)&mask;                     // hay [mask+1] tipos de mensajes (para cada largo) 
    d2b2:	86 2f       	mov	r24, r22
    d2b4:	82 1b       	sub	r24, r18
    d2b6:	1b 96       	adiw	r26, 0x0b	; 11
    d2b8:	9c 91       	ld	r25, X
    d2ba:	1b 97       	sbiw	r26, 0x0b	; 11
    d2bc:	89 23       	and	r24, r25
    d2be:	15 96       	adiw	r26, 0x05	; 5
    d2c0:	8c 93       	st	X, r24
    d2c2:	15 97       	sbiw	r26, 0x05	; 5
    largo = (b-sync)>>shift;                        // el largo de la data puede ser hasta [shift] bytes
    d2c4:	86 2f       	mov	r24, r22
    d2c6:	90 e0       	ldi	r25, 0x00	; 0
    d2c8:	82 1b       	sub	r24, r18
    d2ca:	91 09       	sbc	r25, r1
    d2cc:	1c 96       	adiw	r26, 0x0c	; 12
    d2ce:	0c 90       	ld	r0, X
    d2d0:	1c 97       	sbiw	r26, 0x0c	; 12
    d2d2:	02 c0       	rjmp	.+4      	; 0xd2d8 <_ZN10Serialcomm12process_byteEh+0x32>
    d2d4:	95 95       	asr	r25
    d2d6:	87 95       	ror	r24
    d2d8:	0a 94       	dec	r0
    d2da:	e2 f7       	brpl	.-8      	; 0xd2d4 <_ZN10Serialcomm12process_byteEh+0x2e>
    d2dc:	14 96       	adiw	r26, 0x04	; 4
    d2de:	8c 93       	st	X, r24
    d2e0:	14 97       	sbiw	r26, 0x04	; 4
    cont = 0;                                    // inicializa el índice del buffer                            
    d2e2:	16 96       	adiw	r26, 0x06	; 6
    d2e4:	1c 92       	st	X, r1
    d2e6:	08 95       	ret
  } else {                                       // ...de lo contrario (si es un DATA)...
    if (cont < largo) {data[cont++] = b;}             // va llenando el buffer
    d2e8:	16 96       	adiw	r26, 0x06	; 6
    d2ea:	9c 91       	ld	r25, X
    d2ec:	16 97       	sbiw	r26, 0x06	; 6
    d2ee:	14 96       	adiw	r26, 0x04	; 4
    d2f0:	8c 91       	ld	r24, X
    d2f2:	14 97       	sbiw	r26, 0x04	; 4
    d2f4:	98 17       	cp	r25, r24
    d2f6:	50 f4       	brcc	.+20     	; 0xd30c <_ZN10Serialcomm12process_byteEh+0x66>
    d2f8:	17 96       	adiw	r26, 0x07	; 7
    d2fa:	ed 91       	ld	r30, X+
    d2fc:	fc 91       	ld	r31, X
    d2fe:	18 97       	sbiw	r26, 0x08	; 8
    d300:	e9 0f       	add	r30, r25
    d302:	f1 1d       	adc	r31, r1
    d304:	60 83       	st	Z, r22
    d306:	9f 5f       	subi	r25, 0xFF	; 255
    d308:	16 96       	adiw	r26, 0x06	; 6
    d30a:	9c 93       	st	X, r25
    d30c:	08 95       	ret

0000d30e <_ZN10Serialcomm11leer_serialEh>:
	memcpy (data_, data, largo_);
	cont = 0;
	return (instruccion == instruccion_ && largo == largo_);
} 

void Serialcomm::leer_serial (byte b) {      // y esta es la 3a. versión, para llamar directo desde el ISP serial, bypasseando la HardwareSerial de Arduino.
    d30e:	cf 93       	push	r28
    d310:	df 93       	push	r29
    d312:	ec 01       	movw	r28, r24
	process_byte (b);                           // ..lo interpreta, etc.
    d314:	0e 94 53 69 	call	0xd2a6	; 0xd2a6 <_ZN10Serialcomm12process_byteEh>
	if (cont == largo) {                        // cuando termina el cuerpo del mensaje..
    d318:	6e 81       	ldd	r22, Y+6	; 0x06
    d31a:	8c 81       	ldd	r24, Y+4	; 0x04
    d31c:	68 17       	cp	r22, r24
    d31e:	39 f4       	brne	.+14     	; 0xd32e <_ZN10Serialcomm11leer_serialEh+0x20>
		(*callback) (instruccion, largo, data);        // ..lo ejecuta                       
    d320:	4f 81       	ldd	r20, Y+7	; 0x07
    d322:	58 85       	ldd	r21, Y+8	; 0x08
    d324:	ea 81       	ldd	r30, Y+2	; 0x02
    d326:	fb 81       	ldd	r31, Y+3	; 0x03
    d328:	8d 81       	ldd	r24, Y+5	; 0x05
    d32a:	09 95       	icall
		cont = 0;                               // y resetea cont, lo que produce un "running status" 
    d32c:	1e 82       	std	Y+6, r1	; 0x06
	}
}
    d32e:	df 91       	pop	r29
    d330:	cf 91       	pop	r28
    d332:	08 95       	ret

0000d334 <_ZN10Serialcomm14send_2byte_msgEhj>:
  } else {                                       // ...de lo contrario (si es un DATA)...
    if (cont < largo) {data[cont++] = b;}             // va llenando el buffer
  }
}

void Serialcomm::send_2byte_msg (byte instruccion_, unsigned int value) {
    d334:	df 93       	push	r29
    d336:	cf 93       	push	r28
    d338:	00 d0       	rcall	.+0      	; 0xd33a <_ZN10Serialcomm14send_2byte_msgEhj+0x6>
    d33a:	cd b7       	in	r28, 0x3d	; 61
    d33c:	de b7       	in	r29, 0x3e	; 62
  send_msg (instruccion_, 2, (byte[]) {value>>7, value&127});               // los valores de 2 bytes son arbitrariamente limitados a 14 bits
    d33e:	9a 01       	movw	r18, r20
    d340:	22 0f       	add	r18, r18
    d342:	23 2f       	mov	r18, r19
    d344:	22 1f       	adc	r18, r18
    d346:	33 0b       	sbc	r19, r19
    d348:	31 95       	neg	r19
    d34a:	29 83       	std	Y+1, r18	; 0x01
    d34c:	4f 77       	andi	r20, 0x7F	; 127
    d34e:	4a 83       	std	Y+2, r20	; 0x02
    d350:	42 e0       	ldi	r20, 0x02	; 2
    d352:	9e 01       	movw	r18, r28
    d354:	2f 5f       	subi	r18, 0xFF	; 255
    d356:	3f 4f       	sbci	r19, 0xFF	; 255
    d358:	0e 94 1d 69 	call	0xd23a	; 0xd23a <_ZN10Serialcomm8send_msgEhhPh>
    d35c:	0f 90       	pop	r0
    d35e:	0f 90       	pop	r0
    d360:	cf 91       	pop	r28
    d362:	df 91       	pop	r29
    d364:	08 95       	ret

0000d366 <_ZN10Serialcomm11leer_serialEv>:
  data = (byte*) malloc (1<<bits_largo); 
  last = 0;
  callback = callback_;
}

void Serialcomm::leer_serial () {                   // esta es la "máquina de estados" que recibe y decodifica los mensajes Seriales 
    d366:	cf 93       	push	r28
    d368:	df 93       	push	r29
    d36a:	ec 01       	movw	r28, r24
    d36c:	08 c0       	rjmp	.+16     	; 0xd37e <_ZN10Serialcomm11leer_serialEv+0x18>
	/* al cambiar el "if" por "while" tiene el efecto de
	vaciar el buffer cada vez que se invoca a esta rutina */ 
	while (port->available() > 0) {                   // si hay al menos 1 byte en el Serial... 
		leer_serial (port->read());                     // ...lo lee y llama a la máquina de estados
    d36e:	88 81       	ld	r24, Y
    d370:	99 81       	ldd	r25, Y+1	; 0x01
    d372:	0e 94 45 75 	call	0xea8a	; 0xea8a <_ZN14HardwareSerial4readEv>
    d376:	68 2f       	mov	r22, r24
    d378:	ce 01       	movw	r24, r28
    d37a:	0e 94 87 69 	call	0xd30e	; 0xd30e <_ZN10Serialcomm11leer_serialEh>
}

void Serialcomm::leer_serial () {                   // esta es la "máquina de estados" que recibe y decodifica los mensajes Seriales 
	/* al cambiar el "if" por "while" tiene el efecto de
	vaciar el buffer cada vez que se invoca a esta rutina */ 
	while (port->available() > 0) {                   // si hay al menos 1 byte en el Serial... 
    d37e:	88 81       	ld	r24, Y
    d380:	99 81       	ldd	r25, Y+1	; 0x01
    d382:	0e 94 34 75 	call	0xea68	; 0xea68 <_ZN14HardwareSerial9availableEv>
    d386:	18 16       	cp	r1, r24
    d388:	19 06       	cpc	r1, r25
    d38a:	8c f3       	brlt	.-30     	; 0xd36e <_ZN10Serialcomm11leer_serialEv+0x8>
		leer_serial (port->read());                     // ...lo lee y llama a la máquina de estados
	}
}
    d38c:	df 91       	pop	r29
    d38e:	cf 91       	pop	r28
    d390:	08 95       	ret

0000d392 <_ZN10SerialcommC1EP14HardwareSeriallhhPFvhhPhE>:

#define TIMEOUT 3000

Serialcomm::Serialcomm () { }   // construtor por defeto

Serialcomm::Serialcomm (HardwareSerial* port_, long baud, byte bits_instruccion, byte bits_largo, void (*callback_) (byte, byte, byte*)) {
    d392:	af 92       	push	r10
    d394:	bf 92       	push	r11
    d396:	cf 92       	push	r12
    d398:	df 92       	push	r13
    d39a:	ef 92       	push	r14
    d39c:	ff 92       	push	r15
    d39e:	0f 93       	push	r16
    d3a0:	5c 01       	movw	r10, r24
    d3a2:	cb 01       	movw	r24, r22
  port = port_;
    d3a4:	f5 01       	movw	r30, r10
    d3a6:	71 83       	std	Z+1, r23	; 0x01
    d3a8:	60 83       	st	Z, r22
  port->begin (baud);
    d3aa:	ba 01       	movw	r22, r20
    d3ac:	a9 01       	movw	r20, r18
    d3ae:	0e 94 d7 74 	call	0xe9ae	; 0xe9ae <_ZN14HardwareSerial5beginEl>
  sync = 256 - 1<<(bits_instruccion+bits_largo);
    d3b2:	20 2f       	mov	r18, r16
    d3b4:	30 e0       	ldi	r19, 0x00	; 0
    d3b6:	ff 24       	eor	r15, r15
    d3b8:	a7 01       	movw	r20, r14
    d3ba:	42 0f       	add	r20, r18
    d3bc:	53 1f       	adc	r21, r19
    d3be:	8f ef       	ldi	r24, 0xFF	; 255
    d3c0:	90 e0       	ldi	r25, 0x00	; 0
    d3c2:	02 c0       	rjmp	.+4      	; 0xd3c8 <_ZN10SerialcommC1EP14HardwareSeriallhhPFvhhPhE+0x36>
    d3c4:	88 0f       	add	r24, r24
    d3c6:	99 1f       	adc	r25, r25
    d3c8:	4a 95       	dec	r20
    d3ca:	e2 f7       	brpl	.-8      	; 0xd3c4 <_ZN10SerialcommC1EP14HardwareSeriallhhPFvhhPhE+0x32>
    d3cc:	f5 01       	movw	r30, r10
    d3ce:	82 87       	std	Z+10, r24	; 0x0a
  mask = (1<<bits_instruccion) - 1;
    d3d0:	81 e0       	ldi	r24, 0x01	; 1
    d3d2:	90 e0       	ldi	r25, 0x00	; 0
    d3d4:	ac 01       	movw	r20, r24
    d3d6:	00 2e       	mov	r0, r16
    d3d8:	02 c0       	rjmp	.+4      	; 0xd3de <_ZN10SerialcommC1EP14HardwareSeriallhhPFvhhPhE+0x4c>
    d3da:	44 0f       	add	r20, r20
    d3dc:	55 1f       	adc	r21, r21
    d3de:	0a 94       	dec	r0
    d3e0:	e2 f7       	brpl	.-8      	; 0xd3da <_ZN10SerialcommC1EP14HardwareSeriallhhPFvhhPhE+0x48>
    d3e2:	9a 01       	movw	r18, r20
    d3e4:	21 50       	subi	r18, 0x01	; 1
    d3e6:	23 87       	std	Z+11, r18	; 0x0b
  shift = bits_instruccion;
    d3e8:	04 87       	std	Z+12, r16	; 0x0c
  data = (byte*) malloc (1<<bits_largo); 
    d3ea:	02 c0       	rjmp	.+4      	; 0xd3f0 <_ZN10SerialcommC1EP14HardwareSeriallhhPFvhhPhE+0x5e>
    d3ec:	88 0f       	add	r24, r24
    d3ee:	99 1f       	adc	r25, r25
    d3f0:	ea 94       	dec	r14
    d3f2:	e2 f7       	brpl	.-8      	; 0xd3ec <_ZN10SerialcommC1EP14HardwareSeriallhhPFvhhPhE+0x5a>
    d3f4:	0e 94 5b 7f 	call	0xfeb6	; 0xfeb6 <malloc>
    d3f8:	f5 01       	movw	r30, r10
    d3fa:	87 83       	std	Z+7, r24	; 0x07
    d3fc:	90 87       	std	Z+8, r25	; 0x08
  last = 0;
    d3fe:	11 86       	std	Z+9, r1	; 0x09
  callback = callback_;
    d400:	d3 82       	std	Z+3, r13	; 0x03
    d402:	c2 82       	std	Z+2, r12	; 0x02
}
    d404:	0f 91       	pop	r16
    d406:	ff 90       	pop	r15
    d408:	ef 90       	pop	r14
    d40a:	df 90       	pop	r13
    d40c:	cf 90       	pop	r12
    d40e:	bf 90       	pop	r11
    d410:	af 90       	pop	r10
    d412:	08 95       	ret

0000d414 <_ZN8Conducta6enableEv>:

void Conducta::enable () {
	enabled = true;
    d414:	21 e0       	ldi	r18, 0x01	; 1
    d416:	fc 01       	movw	r30, r24
    d418:	23 83       	std	Z+3, r18	; 0x03
}
    d41a:	08 95       	ret

0000d41c <_ZN8Conducta7disableEv>:

void Conducta::disable () {
	enabled = false;
    d41c:	fc 01       	movw	r30, r24
    d41e:	13 82       	std	Z+3, r1	; 0x03
}
    d420:	08 95       	ret

0000d422 <_ZN8Conducta5salirEv>:

void Conducta::salir () {
	// por defecto no hace nada al salir
}
    d422:	08 95       	ret

0000d424 <_Z13conducta_mainv>:
}

// actual = "modo" o "conducta a la que se le está dando bola"
// este modo determinaría lo que se muestra en el display, por ejemplo

void conducta_main () {           
    d424:	0f 93       	push	r16
    d426:	1f 93       	push	r17
    d428:	cf 93       	push	r28
    d42a:	df 93       	push	r29
	static byte actual = 0;         // conducta actual; la primera vez no coincide
	
	// cosas generales
	
	// requesta la distancia en cm, todo lo otro se activa por umbrales (en principio)
	kbza.request (CM_DIST);       // esto es para las conductas que usan el sensor inteligente de distacia
    d42c:	8e e8       	ldi	r24, 0x8E	; 142
    d42e:	93 e1       	ldi	r25, 0x13	; 19
    d430:	60 e0       	ldi	r22, 0x00	; 0
    d432:	0e 94 a1 4d 	call	0x9b42	; 0x9b42 <_ZN6Cabeza7requestEh>
	
	if (idle >= IDLE_THRESH) {
    d436:	80 91 b2 12 	lds	r24, 0x12B2
    d43a:	90 91 b3 12 	lds	r25, 0x12B3
    d43e:	8d 3e       	cpi	r24, 0xED	; 237
    d440:	91 05       	cpc	r25, r1
    d442:	10 f0       	brcs	.+4      	; 0xd448 <_Z13conducta_mainv+0x24>
		Conducta::estado = IDLE;    // esto es muy importante porque es un dato que viene del propio robot
    d444:	10 92 f0 13 	sts	0x13F0, r1
	   - tareas simultáneas? porque ocupan distintos "recursos"?
	   - prioridades relativas a cada conducta                                                               */
	
	char selected = -1, max_prioridad = 0;
	for (byte f=0; f<NUM_CONDUCTAS; f++) {
		if (conducta[f]->enabled) {												                         // principio de habilitación de conductas
    d448:	a0 91 06 04 	lds	r26, 0x0406
    d44c:	b0 91 07 04 	lds	r27, 0x0407
    d450:	13 96       	adiw	r26, 0x03	; 3
    d452:	8c 91       	ld	r24, X
    d454:	13 97       	sbiw	r26, 0x03	; 3
    d456:	88 23       	and	r24, r24
    d458:	a1 f0       	breq	.+40     	; 0xd482 <_Z13conducta_mainv+0x5e>
			if (conducta[f]->evaluar() && (conducta[f]->prioridad > max_prioridad)) {    // evalua y compara prioridad
    d45a:	ed 91       	ld	r30, X+
    d45c:	fc 91       	ld	r31, X
    d45e:	11 97       	sbiw	r26, 0x01	; 1
    d460:	01 90       	ld	r0, Z+
    d462:	f0 81       	ld	r31, Z
    d464:	e0 2d       	mov	r30, r0
    d466:	cd 01       	movw	r24, r26
    d468:	09 95       	icall
    d46a:	88 23       	and	r24, r24
    d46c:	51 f0       	breq	.+20     	; 0xd482 <_Z13conducta_mainv+0x5e>
    d46e:	e0 91 06 04 	lds	r30, 0x0406
    d472:	f0 91 07 04 	lds	r31, 0x0407
    d476:	22 81       	ldd	r18, Z+2	; 0x02
    d478:	22 23       	and	r18, r18
    d47a:	19 f0       	breq	.+6      	; 0xd482 <_Z13conducta_mainv+0x5e>
				selected = f;
				max_prioridad = conducta[f]->prioridad;
    d47c:	02 2f       	mov	r16, r18
    d47e:	10 e0       	ldi	r17, 0x00	; 0
    d480:	02 c0       	rjmp	.+4      	; 0xd486 <_Z13conducta_mainv+0x62>
    d482:	1f ef       	ldi	r17, 0xFF	; 255
    d484:	00 e0       	ldi	r16, 0x00	; 0
	   - tareas simultáneas? porque ocupan distintos "recursos"?
	   - prioridades relativas a cada conducta                                                               */
	
	char selected = -1, max_prioridad = 0;
	for (byte f=0; f<NUM_CONDUCTAS; f++) {
		if (conducta[f]->enabled) {												                         // principio de habilitación de conductas
    d486:	a0 91 08 04 	lds	r26, 0x0408
    d48a:	b0 91 09 04 	lds	r27, 0x0409
    d48e:	13 96       	adiw	r26, 0x03	; 3
    d490:	8c 91       	ld	r24, X
    d492:	13 97       	sbiw	r26, 0x03	; 3
    d494:	88 23       	and	r24, r24
    d496:	c9 f0       	breq	.+50     	; 0xd4ca <_Z13conducta_mainv+0xa6>
			if (conducta[f]->evaluar() && (conducta[f]->prioridad > max_prioridad)) {    // evalua y compara prioridad
    d498:	ed 91       	ld	r30, X+
    d49a:	fc 91       	ld	r31, X
    d49c:	11 97       	sbiw	r26, 0x01	; 1
    d49e:	01 90       	ld	r0, Z+
    d4a0:	f0 81       	ld	r31, Z
    d4a2:	e0 2d       	mov	r30, r0
    d4a4:	cd 01       	movw	r24, r26
    d4a6:	09 95       	icall
    d4a8:	88 23       	and	r24, r24
    d4aa:	79 f0       	breq	.+30     	; 0xd4ca <_Z13conducta_mainv+0xa6>
    d4ac:	e0 91 08 04 	lds	r30, 0x0408
    d4b0:	f0 91 09 04 	lds	r31, 0x0409
    d4b4:	82 81       	ldd	r24, Z+2	; 0x02
    d4b6:	90 e0       	ldi	r25, 0x00	; 0
    d4b8:	20 2f       	mov	r18, r16
    d4ba:	33 27       	eor	r19, r19
    d4bc:	27 fd       	sbrc	r18, 7
    d4be:	30 95       	com	r19
    d4c0:	28 17       	cp	r18, r24
    d4c2:	39 07       	cpc	r19, r25
    d4c4:	14 f4       	brge	.+4      	; 0xd4ca <_Z13conducta_mainv+0xa6>
    d4c6:	11 e0       	ldi	r17, 0x01	; 1
    d4c8:	02 c0       	rjmp	.+4      	; 0xd4ce <_Z13conducta_mainv+0xaa>
				max_prioridad = conducta[f]->prioridad;
			}
		}
	}
	
	if (selected == -1) {return;}          // evita que se ejecute nada si todas las conductas retornaron false
    d4ca:	1f 3f       	cpi	r17, 0xFF	; 255
    d4cc:	71 f1       	breq	.+92     	; 0xd52a <_Z13conducta_mainv+0x106>
																		       // también se puede definir una conducta "Idle" con prioridad 0 que retorne siempre true
		
	if (selected != actual) {conducta[actual]->salir();}        // si cambia la conducta, ejecuta salir() en la conducta saliente
    d4ce:	c1 2f       	mov	r28, r17
    d4d0:	dd 27       	eor	r29, r29
    d4d2:	c7 fd       	sbrc	r28, 7
    d4d4:	d0 95       	com	r29
    d4d6:	80 91 04 14 	lds	r24, 0x1404
    d4da:	e8 2f       	mov	r30, r24
    d4dc:	f0 e0       	ldi	r31, 0x00	; 0
    d4de:	ce 17       	cp	r28, r30
    d4e0:	df 07       	cpc	r29, r31
    d4e2:	81 f0       	breq	.+32     	; 0xd504 <_Z13conducta_mainv+0xe0>
    d4e4:	ee 0f       	add	r30, r30
    d4e6:	ff 1f       	adc	r31, r31
    d4e8:	ea 5f       	subi	r30, 0xFA	; 250
    d4ea:	fb 4f       	sbci	r31, 0xFB	; 251
    d4ec:	01 90       	ld	r0, Z+
    d4ee:	f0 81       	ld	r31, Z
    d4f0:	e0 2d       	mov	r30, r0
    d4f2:	a0 81       	ld	r26, Z
    d4f4:	b1 81       	ldd	r27, Z+1	; 0x01
    d4f6:	14 96       	adiw	r26, 0x04	; 4
    d4f8:	2d 91       	ld	r18, X+
    d4fa:	3c 91       	ld	r19, X
    d4fc:	15 97       	sbiw	r26, 0x05	; 5
    d4fe:	cf 01       	movw	r24, r30
    d500:	f9 01       	movw	r30, r18
    d502:	09 95       	icall
	actual = selected;                                   // actualiza
    d504:	10 93 04 14 	sts	0x1404, r17
	Conducta::estado = conducta[selected]->ejecutar();          // ejecuta la conducta nueva y actualiza el estado del robot
    d508:	cc 0f       	add	r28, r28
    d50a:	dd 1f       	adc	r29, r29
    d50c:	ca 5f       	subi	r28, 0xFA	; 250
    d50e:	db 4f       	sbci	r29, 0xFB	; 251
    d510:	e8 81       	ld	r30, Y
    d512:	f9 81       	ldd	r31, Y+1	; 0x01
    d514:	a0 81       	ld	r26, Z
    d516:	b1 81       	ldd	r27, Z+1	; 0x01
    d518:	12 96       	adiw	r26, 0x02	; 2
    d51a:	2d 91       	ld	r18, X+
    d51c:	3c 91       	ld	r19, X
    d51e:	13 97       	sbiw	r26, 0x03	; 3
    d520:	cf 01       	movw	r24, r30
    d522:	f9 01       	movw	r30, r18
    d524:	09 95       	icall
    d526:	80 93 f0 13 	sts	0x13F0, r24
		
    d52a:	df 91       	pop	r29
    d52c:	cf 91       	pop	r28
    d52e:	1f 91       	pop	r17
    d530:	0f 91       	pop	r16
    d532:	08 95       	ret

0000d534 <_Z13conducta_initv>:
Conducta *conducta [NUM_CONDUCTAS] = {&empujones, &reactLoad, /*&correa, &follow*/};  

void conducta_init () {     
	
	// todos los enables y disables iniciales van acá
	conducta [0]->enable ();
    d534:	a0 91 06 04 	lds	r26, 0x0406
    d538:	b0 91 07 04 	lds	r27, 0x0407
    d53c:	ed 91       	ld	r30, X+
    d53e:	fc 91       	ld	r31, X
    d540:	11 97       	sbiw	r26, 0x01	; 1
    d542:	06 80       	ldd	r0, Z+6	; 0x06
    d544:	f7 81       	ldd	r31, Z+7	; 0x07
    d546:	e0 2d       	mov	r30, r0
    d548:	cd 01       	movw	r24, r26
    d54a:	09 95       	icall
	conducta [1]->enable ();
    d54c:	a0 91 08 04 	lds	r26, 0x0408
    d550:	b0 91 09 04 	lds	r27, 0x0409
    d554:	ed 91       	ld	r30, X+
    d556:	fc 91       	ld	r31, X
    d558:	11 97       	sbiw	r26, 0x01	; 1
    d55a:	06 80       	ldd	r0, Z+6	; 0x06
    d55c:	f7 81       	ldd	r31, Z+7	; 0x07
    d55e:	e0 2d       	mov	r30, r0
    d560:	cd 01       	movw	r24, r26
    d562:	09 95       	icall
	//conducta [2]->disable ();
	//conducta [3]->disable ();
	
	// inicialiceta del sensor inteligente de distancia, es común a varias conductas
	kbza.threshMode ();        // activa los umbrales de auto-envío
    d564:	8e e8       	ldi	r24, 0x8E	; 142
    d566:	93 e1       	ldi	r25, 0x13	; 19
    d568:	0e 94 e6 4d 	call	0x9bcc	; 0x9bcc <_ZN6Cabeza10threshModeEv>
	// bitClear (timer0_int_flag, 2);    // Atención: el polling serial de la kbza no se puede apagar porque de él depende el control remoto
	                                     // de todas maneras esto equivaldría a desregistrarlo del timer0, y ya no tendría efecto porque 
																			 // ahora está harcodeado directo a la interrupción serial
	kbza.disable_send_all ();            // deshabilita la lectura automática de sensores
	kbza.noumbrales ();                  // resetea los umbrales                                     */
}
    d56c:	08 95       	ret

0000d56e <_ZN9EmpujonesC1Eh>:
//////////////////////////////////////////////////////////////////////////////////////////////////
//          constructores de las clases derivadas de Conducta (o sea de las conductas)          //
//     por alguna misteriosa razón, estos constructores tienen que ir acá y no en otro lado     //
//////////////////////////////////////////////////////////////////////////////////////////////////

Empujones::Empujones (byte in_prioridad) : Conducta (in_prioridad) {
    d56e:	cf 92       	push	r12
    d570:	df 92       	push	r13
    d572:	ef 92       	push	r14
    d574:	ff 92       	push	r15
    d576:	0f 93       	push	r16
    d578:	1f 93       	push	r17
    d57a:	df 93       	push	r29
    d57c:	cf 93       	push	r28
    d57e:	cd b7       	in	r28, 0x3d	; 61
    d580:	de b7       	in	r29, 0x3e	; 62
    d582:	c7 5e       	subi	r28, 0xE7	; 231
    d584:	d0 40       	sbci	r29, 0x00	; 0
    d586:	0f b6       	in	r0, 0x3f	; 63
    d588:	f8 94       	cli
    d58a:	de bf       	out	0x3e, r29	; 62
    d58c:	0f be       	out	0x3f, r0	; 63
    d58e:	cd bf       	out	0x3d, r28	; 61
    d590:	6c 01       	movw	r12, r24
/////////////////////////////////////////////////////////////////////////////////

byte Conducta::estado;

Conducta::Conducta (byte in_prioridad) {
	prioridad = in_prioridad;
    d592:	dc 01       	movw	r26, r24
    d594:	12 96       	adiw	r26, 0x02	; 2
    d596:	6c 93       	st	X, r22
    d598:	12 97       	sbiw	r26, 0x02	; 2
	enabled = false;                      // todas las conductas arrancan apagadas, y sus respectivos recursos también
    d59a:	13 96       	adiw	r26, 0x03	; 3
    d59c:	1c 92       	st	X, r1
    d59e:	13 97       	sbiw	r26, 0x03	; 3
//////////////////////////////////////////////////////////////////////////////////////////////////
//          constructores de las clases derivadas de Conducta (o sea de las conductas)          //
//     por alguna misteriosa razón, estos constructores tienen que ir acá y no en otro lado     //
//////////////////////////////////////////////////////////////////////////////////////////////////

Empujones::Empujones (byte in_prioridad) : Conducta (in_prioridad) {
    d5a0:	8e e9       	ldi	r24, 0x9E	; 158
    d5a2:	95 e0       	ldi	r25, 0x05	; 5
    d5a4:	8d 93       	st	X+, r24
    d5a6:	9c 93       	st	X, r25
	// setea la red neuronal de 1 capa que procesa el load
	process = (Nlayer*) malloc (sizeof(Nlayer));
    d5a8:	83 e0       	ldi	r24, 0x03	; 3
    d5aa:	90 e0       	ldi	r25, 0x00	; 0
    d5ac:	0e 94 5b 7f 	call	0xfeb6	; 0xfeb6 <malloc>
    d5b0:	f8 2e       	mov	r15, r24
    d5b2:	e9 2e       	mov	r14, r25
    d5b4:	f6 01       	movw	r30, r12
    d5b6:	84 83       	std	Z+4, r24	; 0x04
    d5b8:	95 83       	std	Z+5, r25	; 0x05
	*process = Nlayer (3, 18);
    d5ba:	8e 01       	movw	r16, r28
    d5bc:	0f 5f       	subi	r16, 0xFF	; 255
    d5be:	1f 4f       	sbci	r17, 0xFF	; 255
    d5c0:	c8 01       	movw	r24, r16
    d5c2:	63 e0       	ldi	r22, 0x03	; 3
    d5c4:	42 e1       	ldi	r20, 0x12	; 18
    d5c6:	0e 94 b0 6e 	call	0xdd60	; 0xdd60 <_ZN6NlayerC1Ehh>
    d5ca:	2f 2d       	mov	r18, r15
    d5cc:	3e 2d       	mov	r19, r14
    d5ce:	c9 01       	movw	r24, r18
    d5d0:	dc 01       	movw	r26, r24
    d5d2:	f8 01       	movw	r30, r16
    d5d4:	83 e0       	ldi	r24, 0x03	; 3
    d5d6:	01 90       	ld	r0, Z+
    d5d8:	0d 92       	st	X+, r0
    d5da:	81 50       	subi	r24, 0x01	; 1
    d5dc:	e1 f7       	brne	.-8      	; 0xd5d6 <_ZN9EmpujonesC1Eh+0x68>
	process->node[0].set_weights((float[]){0, -.5, -.25, 0, -.5, -.25, 0, -.5, -.25, 0, -.5, -.25, 0, -.5, -.25, 0, -.5, -.25, 0});             // abajo
    d5de:	d6 01       	movw	r26, r12
    d5e0:	14 96       	adiw	r26, 0x04	; 4
    d5e2:	ed 91       	ld	r30, X+
    d5e4:	fc 91       	ld	r31, X
    d5e6:	15 97       	sbiw	r26, 0x05	; 5
    d5e8:	80 81       	ld	r24, Z
    d5ea:	91 81       	ldd	r25, Z+1	; 0x01
    d5ec:	fe 01       	movw	r30, r28
    d5ee:	34 96       	adiw	r30, 0x04	; 4
    d5f0:	a0 e4       	ldi	r26, 0x40	; 64
    d5f2:	b5 e0       	ldi	r27, 0x05	; 5
    d5f4:	2c e4       	ldi	r18, 0x4C	; 76
    d5f6:	0d 90       	ld	r0, X+
    d5f8:	01 92       	st	Z+, r0
    d5fa:	21 50       	subi	r18, 0x01	; 1
    d5fc:	e1 f7       	brne	.-8      	; 0xd5f6 <_ZN9EmpujonesC1Eh+0x88>
    d5fe:	be 01       	movw	r22, r28
    d600:	6c 5f       	subi	r22, 0xFC	; 252
    d602:	7f 4f       	sbci	r23, 0xFF	; 255
    d604:	0e 94 8f 6f 	call	0xdf1e	; 0xdf1e <_ZN5Nnode11set_weightsEPf>
	process->node[1].set_weights((float[]){-.25, .005, .01, -.5, 0, 0, -.35, -.005, -.01, -.25, .005, .01, -.5, 0, 0, -.35, -.005, -.01, 0});     // atrás
    d608:	d6 01       	movw	r26, r12
    d60a:	14 96       	adiw	r26, 0x04	; 4
    d60c:	ed 91       	ld	r30, X+
    d60e:	fc 91       	ld	r31, X
    d610:	15 97       	sbiw	r26, 0x05	; 5
    d612:	80 81       	ld	r24, Z
    d614:	91 81       	ldd	r25, Z+1	; 0x01
    d616:	03 96       	adiw	r24, 0x03	; 3
    d618:	de 01       	movw	r26, r28
    d61a:	a0 5b       	subi	r26, 0xB0	; 176
    d61c:	bf 4f       	sbci	r27, 0xFF	; 255
    d61e:	e4 ef       	ldi	r30, 0xF4	; 244
    d620:	f4 e0       	ldi	r31, 0x04	; 4
    d622:	2c e4       	ldi	r18, 0x4C	; 76
    d624:	01 90       	ld	r0, Z+
    d626:	0d 92       	st	X+, r0
    d628:	21 50       	subi	r18, 0x01	; 1
    d62a:	e1 f7       	brne	.-8      	; 0xd624 <_ZN9EmpujonesC1Eh+0xb6>
    d62c:	be 01       	movw	r22, r28
    d62e:	60 5b       	subi	r22, 0xB0	; 176
    d630:	7f 4f       	sbci	r23, 0xFF	; 255
    d632:	0e 94 8f 6f 	call	0xdf1e	; 0xdf1e <_ZN5Nnode11set_weightsEPf>
	process->node[2].set_weights((float[]){.25, .005, .25, 0, .005, .5, -.25, .005, .25, -.25, -.005, -.25, 0, -.005, -.5, .25, -.005, -.25, 0});  // izquierda
    d636:	d6 01       	movw	r26, r12
    d638:	14 96       	adiw	r26, 0x04	; 4
    d63a:	ed 91       	ld	r30, X+
    d63c:	fc 91       	ld	r31, X
    d63e:	15 97       	sbiw	r26, 0x05	; 5
    d640:	80 81       	ld	r24, Z
    d642:	91 81       	ldd	r25, Z+1	; 0x01
    d644:	06 96       	adiw	r24, 0x06	; 6
    d646:	de 01       	movw	r26, r28
    d648:	a4 56       	subi	r26, 0x64	; 100
    d64a:	bf 4f       	sbci	r27, 0xFF	; 255
    d64c:	e8 ea       	ldi	r30, 0xA8	; 168
    d64e:	f4 e0       	ldi	r31, 0x04	; 4
    d650:	2c e4       	ldi	r18, 0x4C	; 76
    d652:	01 90       	ld	r0, Z+
    d654:	0d 92       	st	X+, r0
    d656:	21 50       	subi	r18, 0x01	; 1
    d658:	e1 f7       	brne	.-8      	; 0xd652 <_ZN9EmpujonesC1Eh+0xe4>
    d65a:	be 01       	movw	r22, r28
    d65c:	64 56       	subi	r22, 0x64	; 100
    d65e:	7f 4f       	sbci	r23, 0xFF	; 255
    d660:	0e 94 8f 6f 	call	0xdf1e	; 0xdf1e <_ZN5Nnode11set_weightsEPf>
} 
    d664:	c9 51       	subi	r28, 0x19	; 25
    d666:	df 4f       	sbci	r29, 0xFF	; 255
    d668:	0f b6       	in	r0, 0x3f	; 63
    d66a:	f8 94       	cli
    d66c:	de bf       	out	0x3e, r29	; 62
    d66e:	0f be       	out	0x3f, r0	; 63
    d670:	cd bf       	out	0x3d, r28	; 61
    d672:	cf 91       	pop	r28
    d674:	df 91       	pop	r29
    d676:	1f 91       	pop	r17
    d678:	0f 91       	pop	r16
    d67a:	ff 90       	pop	r15
    d67c:	ef 90       	pop	r14
    d67e:	df 90       	pop	r13
    d680:	cf 90       	pop	r12
    d682:	08 95       	ret

0000d684 <_GLOBAL__I__ZN8Conducta6estadoE>:
/////////////////////////////////////////////////////////////////////////////////////////////
//                                       "main"                                            //
/////////////////////////////////////////////////////////////////////////////////////////////

// declara y define conductas, con sus respectivas prioridades
Empujones empujones (50);    
    d684:	81 ef       	ldi	r24, 0xF1	; 241
    d686:	93 e1       	ldi	r25, 0x13	; 19
    d688:	62 e3       	ldi	r22, 0x32	; 50
    d68a:	0e 94 b7 6a 	call	0xd56e	; 0xd56e <_ZN9EmpujonesC1Eh>
/////////////////////////////////////////////////////////////////////////////////

byte Conducta::estado;

Conducta::Conducta (byte in_prioridad) {
	prioridad = in_prioridad;
    d68e:	8c e3       	ldi	r24, 0x3C	; 60
    d690:	80 93 01 14 	sts	0x1401, r24
	enabled = false;                      // todas las conductas arrancan apagadas, y sus respectivos recursos también
    d694:	10 92 02 14 	sts	0x1402, r1
	process->node[0].set_weights((float[]){0, -.5, -.25, 0, -.5, -.25, 0, -.5, -.25, 0, -.5, -.25, 0, -.5, -.25, 0, -.5, -.25, 0});             // abajo
	process->node[1].set_weights((float[]){-.25, .005, .01, -.5, 0, 0, -.35, -.005, -.01, -.25, .005, .01, -.5, 0, 0, -.35, -.005, -.01, 0});     // atrás
	process->node[2].set_weights((float[]){.25, .005, .25, 0, .005, .5, -.25, .005, .25, -.25, -.005, -.25, 0, -.005, -.5, .25, -.005, -.25, 0});  // izquierda
} 

ReactLoad::ReactLoad (byte in_prioridad) : Conducta (in_prioridad) {
    d698:	80 e9       	ldi	r24, 0x90	; 144
    d69a:	95 e0       	ldi	r25, 0x05	; 5
    d69c:	90 93 00 14 	sts	0x1400, r25
    d6a0:	80 93 ff 13 	sts	0x13FF, r24
	current_pata = -1;
    d6a4:	8f ef       	ldi	r24, 0xFF	; 255
    d6a6:	80 93 03 14 	sts	0x1403, r24
		
	if (selected != actual) {conducta[actual]->salir();}        // si cambia la conducta, ejecuta salir() en la conducta saliente
	actual = selected;                                   // actualiza
	Conducta::estado = conducta[selected]->ejecutar();          // ejecuta la conducta nueva y actualiza el estado del robot
		
    d6aa:	08 95       	ret

0000d6ac <_ZN9ReactLoad7evaluarEv>:
	float velocidad = 1.2*(modulo-71);	
	mov.recta (velocidad, 2*velocidad, angulo);  
	return WALK;
}

bool ReactLoad::evaluar () {  // también tiene que evaluar si una pata tiene poco load
    d6ac:	cf 92       	push	r12
    d6ae:	df 92       	push	r13
    d6b0:	ff 92       	push	r15
    d6b2:	0f 93       	push	r16
    d6b4:	1f 93       	push	r17
    d6b6:	df 93       	push	r29
    d6b8:	cf 93       	push	r28
    d6ba:	cd b7       	in	r28, 0x3d	; 61
    d6bc:	de b7       	in	r29, 0x3e	; 62
    d6be:	2c 97       	sbiw	r28, 0x0c	; 12
    d6c0:	0f b6       	in	r0, 0x3f	; 63
    d6c2:	f8 94       	cli
    d6c4:	de bf       	out	0x3e, r29	; 62
    d6c6:	0f be       	out	0x3f, r0	; 63
    d6c8:	cd bf       	out	0x3d, r28	; 61
    d6ca:	8c 01       	movw	r16, r24
	
	static byte count = 0;
	
	if (estado != IDLE) {return false;}       // primer filtro
    d6cc:	80 91 f0 13 	lds	r24, 0x13F0
    d6d0:	88 23       	and	r24, r24
    d6d2:	09 f0       	breq	.+2      	; 0xd6d6 <_ZN9ReactLoad7evaluarEv+0x2a>
    d6d4:	8e c0       	rjmp	.+284    	; 0xd7f2 <_ZN9ReactLoad7evaluarEv+0x146>
  
	int load_pata [6] = {0, 0, 0, 0, 0, 0};
    d6d6:	fe 01       	movw	r30, r28
    d6d8:	31 96       	adiw	r30, 0x01	; 1
    d6da:	8c e0       	ldi	r24, 0x0C	; 12
    d6dc:	df 01       	movw	r26, r30
    d6de:	1d 92       	st	X+, r1
    d6e0:	8a 95       	dec	r24
    d6e2:	e9 f7       	brne	.-6      	; 0xd6de <_ZN9ReactLoad7evaluarEv+0x32>
    d6e4:	af 01       	movw	r20, r30
    d6e6:	ac e9       	ldi	r26, 0x9C	; 156
    d6e8:	b2 e1       	ldi	r27, 0x12	; 18
    d6ea:	70 e0       	ldi	r23, 0x00	; 0
    d6ec:	ff 24       	eor	r15, r15
    d6ee:	60 e0       	ldi	r22, 0x00	; 0
	
	for (byte pata=0; pata<6; pata++) {
		for (byte anillo=0; anillo<3; anillo++) {
			load_pata[pata] += sq(load[pata][anillo]);
		}
 		if (load_pata[pata] > load_pata[max]) {max = pata;}
    d6f0:	6f 01       	movw	r12, r30
    d6f2:	14 c0       	rjmp	.+40     	; 0xd71c <_ZN9ReactLoad7evaluarEv+0x70>
	
	static byte count = 0;
	
	if (estado != IDLE) {return false;}       // primer filtro
  
	int load_pata [6] = {0, 0, 0, 0, 0, 0};
    d6f4:	76 2f       	mov	r23, r22
	for (byte pata=0; pata<6; pata++) {
		for (byte anillo=0; anillo<3; anillo++) {
			load_pata[pata] += sq(load[pata][anillo]);
		}
 		if (load_pata[pata] > load_pata[max]) {max = pata;}
		if (load_pata[pata] < load_pata[min]) {min = pata;}
    d6f6:	ef 2d       	mov	r30, r15
    d6f8:	f0 e0       	ldi	r31, 0x00	; 0
    d6fa:	ee 0f       	add	r30, r30
    d6fc:	ff 1f       	adc	r31, r31
    d6fe:	ec 0d       	add	r30, r12
    d700:	fd 1d       	adc	r31, r13
    d702:	80 81       	ld	r24, Z
    d704:	91 81       	ldd	r25, Z+1	; 0x01
    d706:	28 17       	cp	r18, r24
    d708:	39 07       	cpc	r19, r25
    d70a:	0c f4       	brge	.+2      	; 0xd70e <_ZN9ReactLoad7evaluarEv+0x62>
    d70c:	f6 2e       	mov	r15, r22
  
	int load_pata [6] = {0, 0, 0, 0, 0, 0};
	byte max = 0;
	byte min = 0;
	
	for (byte pata=0; pata<6; pata++) {
    d70e:	6f 5f       	subi	r22, 0xFF	; 255
    d710:	4e 5f       	subi	r20, 0xFE	; 254
    d712:	5f 4f       	sbci	r21, 0xFF	; 255
    d714:	13 96       	adiw	r26, 0x03	; 3
    d716:	66 30       	cpi	r22, 0x06	; 6
    d718:	09 f4       	brne	.+2      	; 0xd71c <_ZN9ReactLoad7evaluarEv+0x70>
    d71a:	40 c0       	rjmp	.+128    	; 0xd79c <_ZN9ReactLoad7evaluarEv+0xf0>
		for (byte anillo=0; anillo<3; anillo++) {
			load_pata[pata] += sq(load[pata][anillo]);
    d71c:	8c 91       	ld	r24, X
    d71e:	99 27       	eor	r25, r25
    d720:	87 fd       	sbrc	r24, 7
    d722:	90 95       	com	r25
    d724:	88 9f       	mul	r24, r24
    d726:	90 01       	movw	r18, r0
    d728:	89 9f       	mul	r24, r25
    d72a:	30 0d       	add	r19, r0
    d72c:	98 9f       	mul	r25, r24
    d72e:	30 0d       	add	r19, r0
    d730:	11 24       	eor	r1, r1
    d732:	fa 01       	movw	r30, r20
    d734:	80 81       	ld	r24, Z
    d736:	91 81       	ldd	r25, Z+1	; 0x01
    d738:	28 0f       	add	r18, r24
    d73a:	39 1f       	adc	r19, r25
    d73c:	11 96       	adiw	r26, 0x01	; 1
    d73e:	8c 91       	ld	r24, X
    d740:	11 97       	sbiw	r26, 0x01	; 1
    d742:	99 27       	eor	r25, r25
    d744:	87 fd       	sbrc	r24, 7
    d746:	90 95       	com	r25
    d748:	fc 01       	movw	r30, r24
    d74a:	ee 9f       	mul	r30, r30
    d74c:	c0 01       	movw	r24, r0
    d74e:	ef 9f       	mul	r30, r31
    d750:	90 0d       	add	r25, r0
    d752:	fe 9f       	mul	r31, r30
    d754:	90 0d       	add	r25, r0
    d756:	11 24       	eor	r1, r1
    d758:	28 0f       	add	r18, r24
    d75a:	39 1f       	adc	r19, r25
    d75c:	12 96       	adiw	r26, 0x02	; 2
    d75e:	8c 91       	ld	r24, X
    d760:	12 97       	sbiw	r26, 0x02	; 2
    d762:	99 27       	eor	r25, r25
    d764:	87 fd       	sbrc	r24, 7
    d766:	90 95       	com	r25
    d768:	fc 01       	movw	r30, r24
    d76a:	ee 9f       	mul	r30, r30
    d76c:	c0 01       	movw	r24, r0
    d76e:	ef 9f       	mul	r30, r31
    d770:	90 0d       	add	r25, r0
    d772:	fe 9f       	mul	r31, r30
    d774:	90 0d       	add	r25, r0
    d776:	11 24       	eor	r1, r1
    d778:	28 0f       	add	r18, r24
    d77a:	39 1f       	adc	r19, r25
    d77c:	fa 01       	movw	r30, r20
    d77e:	31 83       	std	Z+1, r19	; 0x01
    d780:	20 83       	st	Z, r18
		}
 		if (load_pata[pata] > load_pata[max]) {max = pata;}
    d782:	e7 2f       	mov	r30, r23
    d784:	f0 e0       	ldi	r31, 0x00	; 0
    d786:	ee 0f       	add	r30, r30
    d788:	ff 1f       	adc	r31, r31
    d78a:	ec 0d       	add	r30, r12
    d78c:	fd 1d       	adc	r31, r13
    d78e:	80 81       	ld	r24, Z
    d790:	91 81       	ldd	r25, Z+1	; 0x01
    d792:	82 17       	cp	r24, r18
    d794:	93 07       	cpc	r25, r19
    d796:	0c f4       	brge	.+2      	; 0xd79a <_ZN9ReactLoad7evaluarEv+0xee>
    d798:	ad cf       	rjmp	.-166    	; 0xd6f4 <_ZN9ReactLoad7evaluarEv+0x48>
    d79a:	ad cf       	rjmp	.-166    	; 0xd6f6 <_ZN9ReactLoad7evaluarEv+0x4a>
		if (load_pata[pata] < load_pata[min]) {min = pata;}
	}
		
	bool entrar;
	
	if (load_pata[max] > 3950) {         // corregir: número mágico
    d79c:	27 2f       	mov	r18, r23
    d79e:	30 e0       	ldi	r19, 0x00	; 0
    d7a0:	f9 01       	movw	r30, r18
    d7a2:	ee 0f       	add	r30, r30
    d7a4:	ff 1f       	adc	r31, r31
    d7a6:	ec 0f       	add	r30, r28
    d7a8:	fd 1f       	adc	r31, r29
    d7aa:	81 81       	ldd	r24, Z+1	; 0x01
    d7ac:	92 81       	ldd	r25, Z+2	; 0x02
    d7ae:	8f 56       	subi	r24, 0x6F	; 111
    d7b0:	9f 40       	sbci	r25, 0x0F	; 15
    d7b2:	e4 f0       	brlt	.+56     	; 0xd7ec <_ZN9ReactLoad7evaluarEv+0x140>
		entrar = true;
		if (current_pata == max) {count ++;} else {count = 1;}
    d7b4:	d8 01       	movw	r26, r16
    d7b6:	14 96       	adiw	r26, 0x04	; 4
    d7b8:	8c 91       	ld	r24, X
    d7ba:	99 27       	eor	r25, r25
    d7bc:	87 fd       	sbrc	r24, 7
    d7be:	90 95       	com	r25
    d7c0:	82 17       	cp	r24, r18
    d7c2:	93 07       	cpc	r25, r19
    d7c4:	21 f4       	brne	.+8      	; 0xd7ce <_ZN9ReactLoad7evaluarEv+0x122>
    d7c6:	80 91 05 14 	lds	r24, 0x1405
    d7ca:	8f 5f       	subi	r24, 0xFF	; 255
    d7cc:	01 c0       	rjmp	.+2      	; 0xd7d0 <_ZN9ReactLoad7evaluarEv+0x124>
    d7ce:	81 e0       	ldi	r24, 0x01	; 1
    d7d0:	80 93 05 14 	sts	0x1405, r24
		if (count < 3) {current_pata = max;} else {current_pata = min;}
    d7d4:	80 91 05 14 	lds	r24, 0x1405
    d7d8:	83 30       	cpi	r24, 0x03	; 3
    d7da:	18 f4       	brcc	.+6      	; 0xd7e2 <_ZN9ReactLoad7evaluarEv+0x136>
    d7dc:	f8 01       	movw	r30, r16
    d7de:	74 83       	std	Z+4, r23	; 0x04
    d7e0:	03 c0       	rjmp	.+6      	; 0xd7e8 <_ZN9ReactLoad7evaluarEv+0x13c>
    d7e2:	d8 01       	movw	r26, r16
    d7e4:	14 96       	adiw	r26, 0x04	; 4
    d7e6:	fc 92       	st	X, r15
    d7e8:	81 e0       	ldi	r24, 0x01	; 1
    d7ea:	04 c0       	rjmp	.+8      	; 0xd7f4 <_ZN9ReactLoad7evaluarEv+0x148>
	} else {
		entrar = false;
		current_pata = -1;        // significa: ninguna
    d7ec:	8f ef       	ldi	r24, 0xFF	; 255
    d7ee:	f8 01       	movw	r30, r16
    d7f0:	84 83       	std	Z+4, r24	; 0x04
    d7f2:	80 e0       	ldi	r24, 0x00	; 0
	} 
	
	return entrar;
}
    d7f4:	2c 96       	adiw	r28, 0x0c	; 12
    d7f6:	0f b6       	in	r0, 0x3f	; 63
    d7f8:	f8 94       	cli
    d7fa:	de bf       	out	0x3e, r29	; 62
    d7fc:	0f be       	out	0x3f, r0	; 63
    d7fe:	cd bf       	out	0x3d, r28	; 61
    d800:	cf 91       	pop	r28
    d802:	df 91       	pop	r29
    d804:	1f 91       	pop	r17
    d806:	0f 91       	pop	r16
    d808:	ff 90       	pop	r15
    d80a:	df 90       	pop	r13
    d80c:	cf 90       	pop	r12
    d80e:	08 95       	ret

0000d810 <_ZN9Empujones8ejecutarEv>:
	
	return (modulo > 76);

}

byte Empujones::ejecutar () {
    d810:	6f 92       	push	r6
    d812:	7f 92       	push	r7
    d814:	8f 92       	push	r8
    d816:	9f 92       	push	r9
    d818:	af 92       	push	r10
    d81a:	bf 92       	push	r11
    d81c:	cf 92       	push	r12
    d81e:	df 92       	push	r13
    d820:	ef 92       	push	r14
    d822:	ff 92       	push	r15
    d824:	0f 93       	push	r16
    d826:	1f 93       	push	r17
    d828:	7c 01       	movw	r14, r24
	float velocidad = 1.2*(modulo-71);	
    d82a:	fc 01       	movw	r30, r24
    d82c:	66 81       	ldd	r22, Z+6	; 0x06
    d82e:	77 81       	ldd	r23, Z+7	; 0x07
    d830:	80 85       	ldd	r24, Z+8	; 0x08
    d832:	91 85       	ldd	r25, Z+9	; 0x09
    d834:	20 e0       	ldi	r18, 0x00	; 0
    d836:	30 e0       	ldi	r19, 0x00	; 0
    d838:	4e e8       	ldi	r20, 0x8E	; 142
    d83a:	52 e4       	ldi	r21, 0x42	; 66
    d83c:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    d840:	2a e9       	ldi	r18, 0x9A	; 154
    d842:	39 e9       	ldi	r19, 0x99	; 153
    d844:	49 e9       	ldi	r20, 0x99	; 153
    d846:	5f e3       	ldi	r21, 0x3F	; 63
    d848:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    d84c:	4b 01       	movw	r8, r22
    d84e:	5c 01       	movw	r10, r24
	mov.recta (velocidad, 2*velocidad, angulo);  
    d850:	00 d0       	rcall	.+0      	; 0xd852 <_ZN9Empujones8ejecutarEv+0x42>
    d852:	00 d0       	rcall	.+0      	; 0xd854 <_ZN9Empujones8ejecutarEv+0x44>
    d854:	6d b6       	in	r6, 0x3d	; 61
    d856:	7e b6       	in	r7, 0x3e	; 62
    d858:	08 94       	sec
    d85a:	61 1c       	adc	r6, r1
    d85c:	71 1c       	adc	r7, r1
    d85e:	a5 01       	movw	r20, r10
    d860:	94 01       	movw	r18, r8
    d862:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    d866:	8b 01       	movw	r16, r22
    d868:	9c 01       	movw	r18, r24
    d86a:	f7 01       	movw	r30, r14
    d86c:	c2 84       	ldd	r12, Z+10	; 0x0a
    d86e:	d3 84       	ldd	r13, Z+11	; 0x0b
    d870:	e4 84       	ldd	r14, Z+12	; 0x0c
    d872:	f5 84       	ldd	r15, Z+13	; 0x0d
    d874:	80 e0       	ldi	r24, 0x00	; 0
    d876:	90 e0       	ldi	r25, 0x00	; 0
    d878:	a0 e0       	ldi	r26, 0x00	; 0
    d87a:	b0 e0       	ldi	r27, 0x00	; 0
    d87c:	f3 01       	movw	r30, r6
    d87e:	80 83       	st	Z, r24
    d880:	91 83       	std	Z+1, r25	; 0x01
    d882:	a2 83       	std	Z+2, r26	; 0x02
    d884:	b3 83       	std	Z+3, r27	; 0x03
    d886:	85 ee       	ldi	r24, 0xE5	; 229
    d888:	9f e0       	ldi	r25, 0x0F	; 15
    d88a:	b5 01       	movw	r22, r10
    d88c:	a4 01       	movw	r20, r8
    d88e:	aa 24       	eor	r10, r10
    d890:	a3 94       	inc	r10
    d892:	0e 94 72 31 	call	0x62e4	; 0x62e4 <_ZN10Movimiento5rectaEfffhf>
    d896:	0f 90       	pop	r0
    d898:	0f 90       	pop	r0
    d89a:	0f 90       	pop	r0
    d89c:	0f 90       	pop	r0
	return WALK;
}
    d89e:	82 e0       	ldi	r24, 0x02	; 2
    d8a0:	1f 91       	pop	r17
    d8a2:	0f 91       	pop	r16
    d8a4:	ff 90       	pop	r15
    d8a6:	ef 90       	pop	r14
    d8a8:	df 90       	pop	r13
    d8aa:	cf 90       	pop	r12
    d8ac:	bf 90       	pop	r11
    d8ae:	af 90       	pop	r10
    d8b0:	9f 90       	pop	r9
    d8b2:	8f 90       	pop	r8
    d8b4:	7f 90       	pop	r7
    d8b6:	6f 90       	pop	r6
    d8b8:	08 95       	ret

0000d8ba <_ZN9ReactLoad8ejecutarEv>:
	} 
	
	return entrar;
}

byte ReactLoad::ejecutar () {
    d8ba:	4f 92       	push	r4
    d8bc:	5f 92       	push	r5
    d8be:	6f 92       	push	r6
    d8c0:	7f 92       	push	r7
    d8c2:	8f 92       	push	r8
    d8c4:	9f 92       	push	r9
    d8c6:	af 92       	push	r10
    d8c8:	bf 92       	push	r11
    d8ca:	cf 92       	push	r12
    d8cc:	df 92       	push	r13
    d8ce:	ef 92       	push	r14
    d8d0:	ff 92       	push	r15
    d8d2:	0f 93       	push	r16
    d8d4:	1f 93       	push	r17
    d8d6:	df 93       	push	r29
    d8d8:	cf 93       	push	r28
    d8da:	cd b7       	in	r28, 0x3d	; 61
    d8dc:	de b7       	in	r29, 0x3e	; 62
    d8de:	cc 54       	subi	r28, 0x4C	; 76
    d8e0:	d0 40       	sbci	r29, 0x00	; 0
    d8e2:	0f b6       	in	r0, 0x3f	; 63
    d8e4:	f8 94       	cli
    d8e6:	de bf       	out	0x3e, r29	; 62
    d8e8:	0f be       	out	0x3f, r0	; 63
    d8ea:	cd bf       	out	0x3d, r28	; 61
    d8ec:	2c 01       	movw	r4, r24
	// obtengo la ecuación del plano actual del robot:
	COORD3D normal; 
	float d;
	ec_plano (pos_des, &normal, &d);    
    d8ee:	84 e5       	ldi	r24, 0x54	; 84
    d8f0:	92 e1       	ldi	r25, 0x12	; 18
    d8f2:	be 01       	movw	r22, r28
    d8f4:	6b 5f       	subi	r22, 0xFB	; 251
    d8f6:	7f 4f       	sbci	r23, 0xFF	; 255
    d8f8:	ae 01       	movw	r20, r28
    d8fa:	4f 5f       	subi	r20, 0xFF	; 255
    d8fc:	5f 4f       	sbci	r21, 0xFF	; 255
    d8fe:	0e 94 3f 44 	call	0x887e	; 0x887e <_Z8ec_planoP7COORD3DS0_Pf>
	// obtengo un punto en 2D cercano a pos_ref_ (en realidad es un vector para sumarle a la posición actual de la pata)
	COORD3D P = suma ((COORD3D){random(-2.5,2.5),0,random(-2.6,2.6)}, producto(resta(mov.get_pos_ref()[current_pata],pos_des[current_pata]), .38)); // magik numbers 
    d902:	60 e0       	ldi	r22, 0x00	; 0
    d904:	70 e0       	ldi	r23, 0x00	; 0
    d906:	80 e2       	ldi	r24, 0x20	; 32
    d908:	90 ec       	ldi	r25, 0xC0	; 192
    d90a:	20 e0       	ldi	r18, 0x00	; 0
    d90c:	30 e0       	ldi	r19, 0x00	; 0
    d90e:	40 e2       	ldi	r20, 0x20	; 32
    d910:	50 e4       	ldi	r21, 0x40	; 64
    d912:	0e 94 c7 71 	call	0xe38e	; 0xe38e <_Z6randomff>
    d916:	7b 01       	movw	r14, r22
    d918:	8c 01       	movw	r16, r24
    d91a:	66 e6       	ldi	r22, 0x66	; 102
    d91c:	76 e6       	ldi	r23, 0x66	; 102
    d91e:	86 e2       	ldi	r24, 0x26	; 38
    d920:	90 ec       	ldi	r25, 0xC0	; 192
    d922:	26 e6       	ldi	r18, 0x66	; 102
    d924:	36 e6       	ldi	r19, 0x66	; 102
    d926:	46 e2       	ldi	r20, 0x26	; 38
    d928:	50 e4       	ldi	r21, 0x40	; 64
    d92a:	0e 94 c7 71 	call	0xe38e	; 0xe38e <_Z6randomff>
    d92e:	ed 8e       	std	Y+29, r14	; 0x1d
    d930:	fe 8e       	std	Y+30, r15	; 0x1e
    d932:	0f 8f       	std	Y+31, r16	; 0x1f
    d934:	18 a3       	std	Y+32, r17	; 0x20
    d936:	20 e0       	ldi	r18, 0x00	; 0
    d938:	30 e0       	ldi	r19, 0x00	; 0
    d93a:	40 e0       	ldi	r20, 0x00	; 0
    d93c:	50 e0       	ldi	r21, 0x00	; 0
    d93e:	29 a3       	std	Y+33, r18	; 0x21
    d940:	3a a3       	std	Y+34, r19	; 0x22
    d942:	4b a3       	std	Y+35, r20	; 0x23
    d944:	5c a3       	std	Y+36, r21	; 0x24
    d946:	6d a3       	std	Y+37, r22	; 0x25
    d948:	7e a3       	std	Y+38, r23	; 0x26
    d94a:	8f a3       	std	Y+39, r24	; 0x27
    d94c:	98 a7       	std	Y+40, r25	; 0x28
    d94e:	85 ee       	ldi	r24, 0xE5	; 229
    d950:	9f e0       	ldi	r25, 0x0F	; 15
    d952:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <_ZN10Movimiento11get_pos_refEv>
    d956:	d2 01       	movw	r26, r4
    d958:	14 96       	adiw	r26, 0x04	; 4
    d95a:	4c 91       	ld	r20, X
    d95c:	ed b7       	in	r30, 0x3d	; 61
    d95e:	fe b7       	in	r31, 0x3e	; 62
    d960:	3c 97       	sbiw	r30, 0x0c	; 12
    d962:	0f b6       	in	r0, 0x3f	; 63
    d964:	f8 94       	cli
    d966:	fe bf       	out	0x3e, r31	; 62
    d968:	0f be       	out	0x3f, r0	; 63
    d96a:	ed bf       	out	0x3d, r30	; 61
    d96c:	55 27       	eor	r21, r21
    d96e:	47 fd       	sbrc	r20, 7
    d970:	50 95       	com	r21
    d972:	9a 01       	movw	r18, r20
    d974:	22 0f       	add	r18, r18
    d976:	33 1f       	adc	r19, r19
    d978:	24 0f       	add	r18, r20
    d97a:	35 1f       	adc	r19, r21
    d97c:	22 0f       	add	r18, r18
    d97e:	33 1f       	adc	r19, r19
    d980:	22 0f       	add	r18, r18
    d982:	33 1f       	adc	r19, r19
    d984:	fc 01       	movw	r30, r24
    d986:	e2 0f       	add	r30, r18
    d988:	f3 1f       	adc	r31, r19
    d98a:	4d b7       	in	r20, 0x3d	; 61
    d98c:	5e b7       	in	r21, 0x3e	; 62
    d98e:	4f 5f       	subi	r20, 0xFF	; 255
    d990:	5f 4f       	sbci	r21, 0xFF	; 255
    d992:	2c 5a       	subi	r18, 0xAC	; 172
    d994:	3d 4e       	sbci	r19, 0xED	; 237
    d996:	8c e0       	ldi	r24, 0x0C	; 12
    d998:	d9 01       	movw	r26, r18
    d99a:	0d 90       	ld	r0, X+
    d99c:	9d 01       	movw	r18, r26
    d99e:	da 01       	movw	r26, r20
    d9a0:	0d 92       	st	X+, r0
    d9a2:	ad 01       	movw	r20, r26
    d9a4:	81 50       	subi	r24, 0x01	; 1
    d9a6:	c1 f7       	brne	.-16     	; 0xd998 <_ZN9ReactLoad8ejecutarEv+0xde>
    d9a8:	ce 01       	movw	r24, r28
    d9aa:	89 96       	adiw	r24, 0x29	; 41
    d9ac:	c0 80       	ld	r12, Z
    d9ae:	d1 80       	ldd	r13, Z+1	; 0x01
    d9b0:	e2 80       	ldd	r14, Z+2	; 0x02
    d9b2:	f3 80       	ldd	r15, Z+3	; 0x03
    d9b4:	04 81       	ldd	r16, Z+4	; 0x04
    d9b6:	15 81       	ldd	r17, Z+5	; 0x05
    d9b8:	26 81       	ldd	r18, Z+6	; 0x06
    d9ba:	37 81       	ldd	r19, Z+7	; 0x07
    d9bc:	40 85       	ldd	r20, Z+8	; 0x08
    d9be:	51 85       	ldd	r21, Z+9	; 0x09
    d9c0:	62 85       	ldd	r22, Z+10	; 0x0a
    d9c2:	73 85       	ldd	r23, Z+11	; 0x0b
    d9c4:	0e 94 33 3b 	call	0x7666	; 0x7666 <_Z5resta7COORD3DS_>
    d9c8:	95 e3       	ldi	r25, 0x35	; 53
    d9ca:	69 2e       	mov	r6, r25
    d9cc:	71 2c       	mov	r7, r1
    d9ce:	6c 0e       	add	r6, r28
    d9d0:	7d 1e       	adc	r7, r29
    d9d2:	ed b7       	in	r30, 0x3d	; 61
    d9d4:	fe b7       	in	r31, 0x3e	; 62
    d9d6:	3c 96       	adiw	r30, 0x0c	; 12
    d9d8:	0f b6       	in	r0, 0x3f	; 63
    d9da:	f8 94       	cli
    d9dc:	fe bf       	out	0x3e, r31	; 62
    d9de:	0f be       	out	0x3f, r0	; 63
    d9e0:	ed bf       	out	0x3d, r30	; 61
    d9e2:	c3 01       	movw	r24, r6
    d9e4:	c9 a4       	ldd	r12, Y+41	; 0x29
    d9e6:	da a4       	ldd	r13, Y+42	; 0x2a
    d9e8:	eb a4       	ldd	r14, Y+43	; 0x2b
    d9ea:	fc a4       	ldd	r15, Y+44	; 0x2c
    d9ec:	0d a5       	ldd	r16, Y+45	; 0x2d
    d9ee:	1e a5       	ldd	r17, Y+46	; 0x2e
    d9f0:	2f a5       	ldd	r18, Y+47	; 0x2f
    d9f2:	38 a9       	ldd	r19, Y+48	; 0x30
    d9f4:	49 a9       	ldd	r20, Y+49	; 0x31
    d9f6:	5a a9       	ldd	r21, Y+50	; 0x32
    d9f8:	6b a9       	ldd	r22, Y+51	; 0x33
    d9fa:	7c a9       	ldd	r23, Y+52	; 0x34
    d9fc:	0f 2e       	mov	r0, r31
    d9fe:	fc e5       	ldi	r31, 0x5C	; 92
    da00:	8f 2e       	mov	r8, r31
    da02:	ff e8       	ldi	r31, 0x8F	; 143
    da04:	9f 2e       	mov	r9, r31
    da06:	f2 ec       	ldi	r31, 0xC2	; 194
    da08:	af 2e       	mov	r10, r31
    da0a:	fe e3       	ldi	r31, 0x3E	; 62
    da0c:	bf 2e       	mov	r11, r31
    da0e:	f0 2d       	mov	r31, r0
    da10:	0e 94 f6 3b 	call	0x77ec	; 0x77ec <_Z8producto7COORD3Df>
    da14:	2d b7       	in	r18, 0x3d	; 61
    da16:	3e b7       	in	r19, 0x3e	; 62
    da18:	2c 50       	subi	r18, 0x0C	; 12
    da1a:	30 40       	sbci	r19, 0x00	; 0
    da1c:	0f b6       	in	r0, 0x3f	; 63
    da1e:	f8 94       	cli
    da20:	3e bf       	out	0x3e, r19	; 62
    da22:	0f be       	out	0x3f, r0	; 63
    da24:	2d bf       	out	0x3d, r18	; 61
    da26:	ad b7       	in	r26, 0x3d	; 61
    da28:	be b7       	in	r27, 0x3e	; 62
    da2a:	11 96       	adiw	r26, 0x01	; 1
    da2c:	f3 01       	movw	r30, r6
    da2e:	8c e0       	ldi	r24, 0x0C	; 12
    da30:	01 90       	ld	r0, Z+
    da32:	0d 92       	st	X+, r0
    da34:	81 50       	subi	r24, 0x01	; 1
    da36:	e1 f7       	brne	.-8      	; 0xda30 <_ZN9ReactLoad8ejecutarEv+0x176>
    da38:	ce 01       	movw	r24, r28
    da3a:	41 96       	adiw	r24, 0x11	; 17
    da3c:	cd 8c       	ldd	r12, Y+29	; 0x1d
    da3e:	de 8c       	ldd	r13, Y+30	; 0x1e
    da40:	ef 8c       	ldd	r14, Y+31	; 0x1f
    da42:	f8 a0       	ldd	r15, Y+32	; 0x20
    da44:	09 a1       	ldd	r16, Y+33	; 0x21
    da46:	1a a1       	ldd	r17, Y+34	; 0x22
    da48:	2b a1       	ldd	r18, Y+35	; 0x23
    da4a:	3c a1       	ldd	r19, Y+36	; 0x24
    da4c:	4d a1       	ldd	r20, Y+37	; 0x25
    da4e:	5e a1       	ldd	r21, Y+38	; 0x26
    da50:	6f a1       	ldd	r22, Y+39	; 0x27
    da52:	78 a5       	ldd	r23, Y+40	; 0x28
    da54:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <_Z4suma7COORD3DS_>
	// calculo la coordenada 'y' del vector en cuestión, utilizando la ecuación del plano actual
	P.y = -(P.x*normal.x + P.z*normal.z) / normal.y;    // nótese que 'd' no se usa para nada
    da58:	69 89       	ldd	r22, Y+17	; 0x11
    da5a:	7a 89       	ldd	r23, Y+18	; 0x12
    da5c:	8b 89       	ldd	r24, Y+19	; 0x13
    da5e:	9c 89       	ldd	r25, Y+20	; 0x14
    da60:	2d 81       	ldd	r18, Y+5	; 0x05
    da62:	3e 81       	ldd	r19, Y+6	; 0x06
    da64:	4f 81       	ldd	r20, Y+7	; 0x07
    da66:	58 85       	ldd	r21, Y+8	; 0x08
    da68:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    da6c:	7b 01       	movw	r14, r22
    da6e:	8c 01       	movw	r16, r24
    da70:	69 8d       	ldd	r22, Y+25	; 0x19
    da72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    da74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    da76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    da78:	2d 85       	ldd	r18, Y+13	; 0x0d
    da7a:	3e 85       	ldd	r19, Y+14	; 0x0e
    da7c:	4f 85       	ldd	r20, Y+15	; 0x0f
    da7e:	58 89       	ldd	r21, Y+16	; 0x10
    da80:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    da84:	9b 01       	movw	r18, r22
    da86:	ac 01       	movw	r20, r24
    da88:	c8 01       	movw	r24, r16
    da8a:	b7 01       	movw	r22, r14
    da8c:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    da90:	90 58       	subi	r25, 0x80	; 128
    da92:	29 85       	ldd	r18, Y+9	; 0x09
    da94:	3a 85       	ldd	r19, Y+10	; 0x0a
    da96:	4b 85       	ldd	r20, Y+11	; 0x0b
    da98:	5c 85       	ldd	r21, Y+12	; 0x0c
    da9a:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    da9e:	6d 8b       	std	Y+21, r22	; 0x15
    daa0:	7e 8b       	std	Y+22, r23	; 0x16
    daa2:	8f 8b       	std	Y+23, r24	; 0x17
    daa4:	98 8f       	std	Y+24, r25	; 0x18
	// aplico el movimiento
	mov.pasito (1<<current_pata, P, false, 0, 85, 5, (COORD3D){0,10,0}); 
    daa6:	81 e0       	ldi	r24, 0x01	; 1
    daa8:	90 e0       	ldi	r25, 0x00	; 0
    daaa:	d2 01       	movw	r26, r4
    daac:	14 96       	adiw	r26, 0x04	; 4
    daae:	0c 90       	ld	r0, X
    dab0:	02 c0       	rjmp	.+4      	; 0xdab6 <_ZN9ReactLoad8ejecutarEv+0x1fc>
    dab2:	88 0f       	add	r24, r24
    dab4:	99 1f       	adc	r25, r25
    dab6:	0a 94       	dec	r0
    dab8:	e2 f7       	brpl	.-8      	; 0xdab2 <_ZN9ReactLoad8ejecutarEv+0x1f8>
    daba:	68 2f       	mov	r22, r24
    dabc:	de 01       	movw	r26, r28
    dabe:	af 5b       	subi	r26, 0xBF	; 191
    dac0:	bf 4f       	sbci	r27, 0xFF	; 255
    dac2:	e8 ea       	ldi	r30, 0xA8	; 168
    dac4:	f5 e0       	ldi	r31, 0x05	; 5
    dac6:	8c e0       	ldi	r24, 0x0C	; 12
    dac8:	01 90       	ld	r0, Z+
    daca:	0d 92       	st	X+, r0
    dacc:	81 50       	subi	r24, 0x01	; 1
    dace:	e1 f7       	brne	.-8      	; 0xdac8 <_ZN9ReactLoad8ejecutarEv+0x20e>
    dad0:	ed b7       	in	r30, 0x3d	; 61
    dad2:	fe b7       	in	r31, 0x3e	; 62
    dad4:	37 97       	sbiw	r30, 0x07	; 7
    dad6:	0f b6       	in	r0, 0x3f	; 63
    dad8:	f8 94       	cli
    dada:	fe bf       	out	0x3e, r31	; 62
    dadc:	0f be       	out	0x3f, r0	; 63
    dade:	ed bf       	out	0x3d, r30	; 61
    dae0:	31 96       	adiw	r30, 0x01	; 1
    dae2:	20 e0       	ldi	r18, 0x00	; 0
    dae4:	30 e0       	ldi	r19, 0x00	; 0
    dae6:	40 e0       	ldi	r20, 0x00	; 0
    dae8:	50 e0       	ldi	r21, 0x00	; 0
    daea:	ad b7       	in	r26, 0x3d	; 61
    daec:	be b7       	in	r27, 0x3e	; 62
    daee:	11 96       	adiw	r26, 0x01	; 1
    daf0:	2d 93       	st	X+, r18
    daf2:	3d 93       	st	X+, r19
    daf4:	4d 93       	st	X+, r20
    daf6:	5c 93       	st	X, r21
    daf8:	14 97       	sbiw	r26, 0x04	; 4
    dafa:	85 e5       	ldi	r24, 0x55	; 85
    dafc:	90 e0       	ldi	r25, 0x00	; 0
    dafe:	95 83       	std	Z+5, r25	; 0x05
    db00:	84 83       	std	Z+4, r24	; 0x04
    db02:	85 e0       	ldi	r24, 0x05	; 5
    db04:	86 83       	std	Z+6, r24	; 0x06
    db06:	18 96       	adiw	r26, 0x08	; 8
    db08:	fe 01       	movw	r30, r28
    db0a:	ef 5b       	subi	r30, 0xBF	; 191
    db0c:	ff 4f       	sbci	r31, 0xFF	; 255
    db0e:	8c e0       	ldi	r24, 0x0C	; 12
    db10:	01 90       	ld	r0, Z+
    db12:	0d 92       	st	X+, r0
    db14:	81 50       	subi	r24, 0x01	; 1
    db16:	e1 f7       	brne	.-8      	; 0xdb10 <_ZN9ReactLoad8ejecutarEv+0x256>
    db18:	85 ee       	ldi	r24, 0xE5	; 229
    db1a:	9f e0       	ldi	r25, 0x0F	; 15
    db1c:	a9 88       	ldd	r10, Y+17	; 0x11
    db1e:	ba 88       	ldd	r11, Y+18	; 0x12
    db20:	cb 88       	ldd	r12, Y+19	; 0x13
    db22:	dc 88       	ldd	r13, Y+20	; 0x14
    db24:	ed 88       	ldd	r14, Y+21	; 0x15
    db26:	fe 88       	ldd	r15, Y+22	; 0x16
    db28:	0f 89       	ldd	r16, Y+23	; 0x17
    db2a:	18 8d       	ldd	r17, Y+24	; 0x18
    db2c:	29 8d       	ldd	r18, Y+25	; 0x19
    db2e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    db30:	4b 8d       	ldd	r20, Y+27	; 0x1b
    db32:	5c 8d       	ldd	r21, Y+28	; 0x1c
    db34:	88 24       	eor	r8, r8
    db36:	0e 94 66 0a 	call	0x14cc	; 0x14cc <_ZN10Movimiento6pasitoEh7COORD3DbfihS0_>
    db3a:	ed b7       	in	r30, 0x3d	; 61
    db3c:	fe b7       	in	r31, 0x3e	; 62
    db3e:	73 96       	adiw	r30, 0x13	; 19
    db40:	0f b6       	in	r0, 0x3f	; 63
    db42:	f8 94       	cli
    db44:	fe bf       	out	0x3e, r31	; 62
    db46:	0f be       	out	0x3f, r0	; 63
    db48:	ed bf       	out	0x3d, r30	; 61
	return LEG;
}
    db4a:	87 e0       	ldi	r24, 0x07	; 7
    db4c:	c4 5b       	subi	r28, 0xB4	; 180
    db4e:	df 4f       	sbci	r29, 0xFF	; 255
    db50:	0f b6       	in	r0, 0x3f	; 63
    db52:	f8 94       	cli
    db54:	de bf       	out	0x3e, r29	; 62
    db56:	0f be       	out	0x3f, r0	; 63
    db58:	cd bf       	out	0x3d, r28	; 61
    db5a:	cf 91       	pop	r28
    db5c:	df 91       	pop	r29
    db5e:	1f 91       	pop	r17
    db60:	0f 91       	pop	r16
    db62:	ff 90       	pop	r15
    db64:	ef 90       	pop	r14
    db66:	df 90       	pop	r13
    db68:	cf 90       	pop	r12
    db6a:	bf 90       	pop	r11
    db6c:	af 90       	pop	r10
    db6e:	9f 90       	pop	r9
    db70:	8f 90       	pop	r8
    db72:	7f 90       	pop	r7
    db74:	6f 90       	pop	r6
    db76:	5f 90       	pop	r5
    db78:	4f 90       	pop	r4
    db7a:	08 95       	ret

0000db7c <_ZN9Empujones7evaluarEv>:
#include "hardware.h"
#include "movimiento.h"
#include "display.h"
#include "events.h"

bool Empujones::evaluar () {  
    db7c:	4f 92       	push	r4
    db7e:	5f 92       	push	r5
    db80:	6f 92       	push	r6
    db82:	7f 92       	push	r7
    db84:	8f 92       	push	r8
    db86:	9f 92       	push	r9
    db88:	af 92       	push	r10
    db8a:	bf 92       	push	r11
    db8c:	cf 92       	push	r12
    db8e:	df 92       	push	r13
    db90:	ef 92       	push	r14
    db92:	ff 92       	push	r15
    db94:	0f 93       	push	r16
    db96:	1f 93       	push	r17
    db98:	df 93       	push	r29
    db9a:	cf 93       	push	r28
    db9c:	cd b7       	in	r28, 0x3d	; 61
    db9e:	de b7       	in	r29, 0x3e	; 62
    dba0:	c4 55       	subi	r28, 0x54	; 84
    dba2:	d0 40       	sbci	r29, 0x00	; 0
    dba4:	0f b6       	in	r0, 0x3f	; 63
    dba6:	f8 94       	cli
    dba8:	de bf       	out	0x3e, r29	; 62
    dbaa:	0f be       	out	0x3f, r0	; 63
    dbac:	cd bf       	out	0x3d, r28	; 61
    dbae:	2c 01       	movw	r4, r24
	
	// reducir falsos positivos
	// corregir asimetría
	// habilitar balance del cuerpo
	
	if (estado != IDLE) {return false;}       // si no está en idle, ya retorna
    dbb0:	80 91 f0 13 	lds	r24, 0x13F0
    dbb4:	88 23       	and	r24, r24
    dbb6:	11 f0       	breq	.+4      	; 0xdbbc <_ZN9Empujones7evaluarEv+0x40>
    dbb8:	10 e0       	ldi	r17, 0x00	; 0
    dbba:	a5 c0       	rjmp	.+330    	; 0xdd06 <_ZN9Empujones7evaluarEv+0x18a>
    dbbc:	0c e9       	ldi	r16, 0x9C	; 156
    dbbe:	12 e1       	ldi	r17, 0x12	; 18
    dbc0:	7d e0       	ldi	r23, 0x0D	; 13
    dbc2:	e7 2e       	mov	r14, r23
    dbc4:	f1 2c       	mov	r15, r1
    dbc6:	ec 0e       	add	r14, r28
    dbc8:	fd 1e       	adc	r15, r29
		
	// comprobar empuje
	float salida [3], entrada [18];
	for (byte pata=0; pata<6; pata++) {
		for (byte anillo=0; anillo<3; anillo++) {
			entrada[pata*3+anillo] = 0.05 * load[pata][anillo];    // esto está raro
    dbca:	f8 01       	movw	r30, r16
    dbcc:	60 81       	ld	r22, Z
    dbce:	77 27       	eor	r23, r23
    dbd0:	67 fd       	sbrc	r22, 7
    dbd2:	70 95       	com	r23
    dbd4:	87 2f       	mov	r24, r23
    dbd6:	97 2f       	mov	r25, r23
    dbd8:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    dbdc:	2d ec       	ldi	r18, 0xCD	; 205
    dbde:	3c ec       	ldi	r19, 0xCC	; 204
    dbe0:	4c e4       	ldi	r20, 0x4C	; 76
    dbe2:	5d e3       	ldi	r21, 0x3D	; 61
    dbe4:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    dbe8:	f7 01       	movw	r30, r14
    dbea:	60 83       	st	Z, r22
    dbec:	71 83       	std	Z+1, r23	; 0x01
    dbee:	82 83       	std	Z+2, r24	; 0x02
    dbf0:	93 83       	std	Z+3, r25	; 0x03
    dbf2:	f8 01       	movw	r30, r16
    dbf4:	61 81       	ldd	r22, Z+1	; 0x01
    dbf6:	77 27       	eor	r23, r23
    dbf8:	67 fd       	sbrc	r22, 7
    dbfa:	70 95       	com	r23
    dbfc:	87 2f       	mov	r24, r23
    dbfe:	97 2f       	mov	r25, r23
    dc00:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    dc04:	2d ec       	ldi	r18, 0xCD	; 205
    dc06:	3c ec       	ldi	r19, 0xCC	; 204
    dc08:	4c e4       	ldi	r20, 0x4C	; 76
    dc0a:	5d e3       	ldi	r21, 0x3D	; 61
    dc0c:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    dc10:	f7 01       	movw	r30, r14
    dc12:	64 83       	std	Z+4, r22	; 0x04
    dc14:	75 83       	std	Z+5, r23	; 0x05
    dc16:	86 83       	std	Z+6, r24	; 0x06
    dc18:	97 83       	std	Z+7, r25	; 0x07
    dc1a:	f8 01       	movw	r30, r16
    dc1c:	62 81       	ldd	r22, Z+2	; 0x02
    dc1e:	77 27       	eor	r23, r23
    dc20:	67 fd       	sbrc	r22, 7
    dc22:	70 95       	com	r23
    dc24:	87 2f       	mov	r24, r23
    dc26:	97 2f       	mov	r25, r23
    dc28:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    dc2c:	2d ec       	ldi	r18, 0xCD	; 205
    dc2e:	3c ec       	ldi	r19, 0xCC	; 204
    dc30:	4c e4       	ldi	r20, 0x4C	; 76
    dc32:	5d e3       	ldi	r21, 0x3D	; 61
    dc34:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    dc38:	f7 01       	movw	r30, r14
    dc3a:	60 87       	std	Z+8, r22	; 0x08
    dc3c:	71 87       	std	Z+9, r23	; 0x09
    dc3e:	82 87       	std	Z+10, r24	; 0x0a
    dc40:	93 87       	std	Z+11, r25	; 0x0b
    dc42:	0d 5f       	subi	r16, 0xFD	; 253
    dc44:	1f 4f       	sbci	r17, 0xFF	; 255
    dc46:	8c e0       	ldi	r24, 0x0C	; 12
    dc48:	90 e0       	ldi	r25, 0x00	; 0
    dc4a:	e8 0e       	add	r14, r24
    dc4c:	f9 1e       	adc	r15, r25
	
	if (estado != IDLE) {return false;}       // si no está en idle, ya retorna
		
	// comprobar empuje
	float salida [3], entrada [18];
	for (byte pata=0; pata<6; pata++) {
    dc4e:	92 e1       	ldi	r25, 0x12	; 18
    dc50:	0e 3a       	cpi	r16, 0xAE	; 174
    dc52:	19 07       	cpc	r17, r25
    dc54:	09 f0       	breq	.+2      	; 0xdc58 <_ZN9Empujones7evaluarEv+0xdc>
    dc56:	b9 cf       	rjmp	.-142    	; 0xdbca <_ZN9Empujones7evaluarEv+0x4e>
		for (byte anillo=0; anillo<3; anillo++) {
			entrada[pata*3+anillo] = 0.05 * load[pata][anillo];    // esto está raro
		}                                             // el load cambia según el seteo del motor
	}
	process->compute (entrada, salida);  // invoca a la red neuronal
    dc58:	f2 01       	movw	r30, r4
    dc5a:	84 81       	ldd	r24, Z+4	; 0x04
    dc5c:	95 81       	ldd	r25, Z+5	; 0x05
    dc5e:	be 01       	movw	r22, r28
    dc60:	63 5f       	subi	r22, 0xF3	; 243
    dc62:	7f 4f       	sbci	r23, 0xFF	; 255
    dc64:	ae 01       	movw	r20, r28
    dc66:	4f 5f       	subi	r20, 0xFF	; 255
    dc68:	5f 4f       	sbci	r21, 0xFF	; 255
    dc6a:	0e 94 5a 6f 	call	0xdeb4	; 0xdeb4 <_ZN6Nlayer7computeEPfS0_>
	float x = 200*(salida[2]-.5);
    dc6e:	69 85       	ldd	r22, Y+9	; 0x09
    dc70:	7a 85       	ldd	r23, Y+10	; 0x0a
    dc72:	8b 85       	ldd	r24, Y+11	; 0x0b
    dc74:	9c 85       	ldd	r25, Y+12	; 0x0c
    dc76:	20 e0       	ldi	r18, 0x00	; 0
    dc78:	30 e0       	ldi	r19, 0x00	; 0
    dc7a:	40 e0       	ldi	r20, 0x00	; 0
    dc7c:	5f e3       	ldi	r21, 0x3F	; 63
    dc7e:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    dc82:	20 e0       	ldi	r18, 0x00	; 0
    dc84:	30 e0       	ldi	r19, 0x00	; 0
    dc86:	48 e4       	ldi	r20, 0x48	; 72
    dc88:	53 e4       	ldi	r21, 0x43	; 67
    dc8a:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    dc8e:	7b 01       	movw	r14, r22
    dc90:	8c 01       	movw	r16, r24
	float z = 200*(salida[1]-.5);
    dc92:	6d 81       	ldd	r22, Y+5	; 0x05
    dc94:	7e 81       	ldd	r23, Y+6	; 0x06
    dc96:	8f 81       	ldd	r24, Y+7	; 0x07
    dc98:	98 85       	ldd	r25, Y+8	; 0x08
    dc9a:	20 e0       	ldi	r18, 0x00	; 0
    dc9c:	30 e0       	ldi	r19, 0x00	; 0
    dc9e:	40 e0       	ldi	r20, 0x00	; 0
    dca0:	5f e3       	ldi	r21, 0x3F	; 63
    dca2:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    dca6:	20 e0       	ldi	r18, 0x00	; 0
    dca8:	30 e0       	ldi	r19, 0x00	; 0
    dcaa:	48 e4       	ldi	r20, 0x48	; 72
    dcac:	53 e4       	ldi	r21, 0x43	; 67
    dcae:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    dcb2:	5b 01       	movw	r10, r22
    dcb4:	6c 01       	movw	r12, r24
	modulo = hypot (x, z);
    dcb6:	b7 01       	movw	r22, r14
    dcb8:	c8 01       	movw	r24, r16
    dcba:	a6 01       	movw	r20, r12
    dcbc:	95 01       	movw	r18, r10
    dcbe:	0e 94 99 7c 	call	0xf932	; 0xf932 <hypot>
    dcc2:	3b 01       	movw	r6, r22
    dcc4:	4c 01       	movw	r8, r24
    dcc6:	f2 01       	movw	r30, r4
    dcc8:	66 83       	std	Z+6, r22	; 0x06
    dcca:	77 83       	std	Z+7, r23	; 0x07
    dccc:	80 87       	std	Z+8, r24	; 0x08
    dcce:	91 87       	std	Z+9, r25	; 0x09
	angulo = atan2 (-z, x);
    dcd0:	d7 fa       	bst	r13, 7
    dcd2:	d0 94       	com	r13
    dcd4:	d7 f8       	bld	r13, 7
    dcd6:	d0 94       	com	r13
    dcd8:	c6 01       	movw	r24, r12
    dcda:	b5 01       	movw	r22, r10
    dcdc:	97 01       	movw	r18, r14
    dcde:	a8 01       	movw	r20, r16
    dce0:	0e 94 3d 7a 	call	0xf47a	; 0xf47a <atan2>
    dce4:	f2 01       	movw	r30, r4
    dce6:	62 87       	std	Z+10, r22	; 0x0a
    dce8:	73 87       	std	Z+11, r23	; 0x0b
    dcea:	84 87       	std	Z+12, r24	; 0x0c
    dcec:	95 87       	std	Z+13, r25	; 0x0d
	
	return (modulo > 76);
    dcee:	10 e0       	ldi	r17, 0x00	; 0
    dcf0:	c4 01       	movw	r24, r8
    dcf2:	b3 01       	movw	r22, r6
    dcf4:	20 e0       	ldi	r18, 0x00	; 0
    dcf6:	30 e0       	ldi	r19, 0x00	; 0
    dcf8:	48 e9       	ldi	r20, 0x98	; 152
    dcfa:	52 e4       	ldi	r21, 0x42	; 66
    dcfc:	0e 94 8c 7c 	call	0xf918	; 0xf918 <__gesf2>
    dd00:	18 16       	cp	r1, r24
    dd02:	0c f4       	brge	.+2      	; 0xdd06 <_ZN9Empujones7evaluarEv+0x18a>
    dd04:	11 e0       	ldi	r17, 0x01	; 1

}
    dd06:	81 2f       	mov	r24, r17
    dd08:	cc 5a       	subi	r28, 0xAC	; 172
    dd0a:	df 4f       	sbci	r29, 0xFF	; 255
    dd0c:	0f b6       	in	r0, 0x3f	; 63
    dd0e:	f8 94       	cli
    dd10:	de bf       	out	0x3e, r29	; 62
    dd12:	0f be       	out	0x3f, r0	; 63
    dd14:	cd bf       	out	0x3d, r28	; 61
    dd16:	cf 91       	pop	r28
    dd18:	df 91       	pop	r29
    dd1a:	1f 91       	pop	r17
    dd1c:	0f 91       	pop	r16
    dd1e:	ff 90       	pop	r15
    dd20:	ef 90       	pop	r14
    dd22:	df 90       	pop	r13
    dd24:	cf 90       	pop	r12
    dd26:	bf 90       	pop	r11
    dd28:	af 90       	pop	r10
    dd2a:	9f 90       	pop	r9
    dd2c:	8f 90       	pop	r8
    dd2e:	7f 90       	pop	r7
    dd30:	6f 90       	pop	r6
    dd32:	5f 90       	pop	r5
    dd34:	4f 90       	pop	r4
    dd36:	08 95       	ret

0000dd38 <_ZN5NnodeC1Eh>:
#include "util.h"
#include <math.h>
#include <stdlib.h>
#include <string.h>

Nnode::Nnode (byte n_inputs) {
    dd38:	0f 93       	push	r16
    dd3a:	1f 93       	push	r17
    dd3c:	8c 01       	movw	r16, r24
    dd3e:	86 2f       	mov	r24, r22
	this->n_inputs = n_inputs;
    dd40:	f8 01       	movw	r30, r16
    dd42:	62 83       	std	Z+2, r22	; 0x02
	weight = (float*) malloc ((n_inputs+1)*sizeof(float));
    dd44:	90 e0       	ldi	r25, 0x00	; 0
    dd46:	01 96       	adiw	r24, 0x01	; 1
    dd48:	88 0f       	add	r24, r24
    dd4a:	99 1f       	adc	r25, r25
    dd4c:	88 0f       	add	r24, r24
    dd4e:	99 1f       	adc	r25, r25
    dd50:	0e 94 5b 7f 	call	0xfeb6	; 0xfeb6 <malloc>
    dd54:	f8 01       	movw	r30, r16
    dd56:	80 83       	st	Z, r24
    dd58:	91 83       	std	Z+1, r25	; 0x01
}
    dd5a:	1f 91       	pop	r17
    dd5c:	0f 91       	pop	r16
    dd5e:	08 95       	ret

0000dd60 <_ZN6NlayerC1Ehh>:
	acumulator += weight[n_inputs];                             // procesa el 'bias weight'
	// if (acumulator < -22.52) {acumulator = -22.52;}                   // esto es por algún bug 
	return sigmoide (acumulator);                               // sigmoid
}

Nlayer::Nlayer (byte n_nodes, byte n_inputs) {
    dd60:	7f 92       	push	r7
    dd62:	8f 92       	push	r8
    dd64:	9f 92       	push	r9
    dd66:	af 92       	push	r10
    dd68:	bf 92       	push	r11
    dd6a:	cf 92       	push	r12
    dd6c:	df 92       	push	r13
    dd6e:	ef 92       	push	r14
    dd70:	ff 92       	push	r15
    dd72:	0f 93       	push	r16
    dd74:	1f 93       	push	r17
    dd76:	df 93       	push	r29
    dd78:	cf 93       	push	r28
    dd7a:	00 d0       	rcall	.+0      	; 0xdd7c <_ZN6NlayerC1Ehh+0x1c>
    dd7c:	0f 92       	push	r0
    dd7e:	cd b7       	in	r28, 0x3d	; 61
    dd80:	de b7       	in	r29, 0x3e	; 62
    dd82:	6c 01       	movw	r12, r24
    dd84:	a6 2e       	mov	r10, r22
    dd86:	74 2e       	mov	r7, r20
	this->n_nodes = n_nodes;
    dd88:	fc 01       	movw	r30, r24
    dd8a:	62 83       	std	Z+2, r22	; 0x02
	node = (Nnode*) malloc (n_nodes*sizeof(Nnode));
    dd8c:	83 e0       	ldi	r24, 0x03	; 3
    dd8e:	68 9f       	mul	r22, r24
    dd90:	c0 01       	movw	r24, r0
    dd92:	11 24       	eor	r1, r1
    dd94:	0e 94 5b 7f 	call	0xfeb6	; 0xfeb6 <malloc>
    dd98:	f6 01       	movw	r30, r12
    dd9a:	80 83       	st	Z, r24
    dd9c:	91 83       	std	Z+1, r25	; 0x01
    dd9e:	bb 24       	eor	r11, r11
    dda0:	ee 24       	eor	r14, r14
    dda2:	ff 24       	eor	r15, r15
	for (byte n=0; n<n_nodes; n++) {
		node [n] = Nnode (n_inputs);
    dda4:	4e 01       	movw	r8, r28
    dda6:	08 94       	sec
    dda8:	81 1c       	adc	r8, r1
    ddaa:	91 1c       	adc	r9, r1
    ddac:	15 c0       	rjmp	.+42     	; 0xddd8 <_ZN6NlayerC1Ehh+0x78>
    ddae:	f6 01       	movw	r30, r12
    ddb0:	00 81       	ld	r16, Z
    ddb2:	11 81       	ldd	r17, Z+1	; 0x01
    ddb4:	0e 0d       	add	r16, r14
    ddb6:	1f 1d       	adc	r17, r15
    ddb8:	c4 01       	movw	r24, r8
    ddba:	67 2d       	mov	r22, r7
    ddbc:	0e 94 9c 6e 	call	0xdd38	; 0xdd38 <_ZN5NnodeC1Eh>
    ddc0:	d8 01       	movw	r26, r16
    ddc2:	f4 01       	movw	r30, r8
    ddc4:	83 e0       	ldi	r24, 0x03	; 3
    ddc6:	01 90       	ld	r0, Z+
    ddc8:	0d 92       	st	X+, r0
    ddca:	81 50       	subi	r24, 0x01	; 1
    ddcc:	e1 f7       	brne	.-8      	; 0xddc6 <_ZN6NlayerC1Ehh+0x66>
}

Nlayer::Nlayer (byte n_nodes, byte n_inputs) {
	this->n_nodes = n_nodes;
	node = (Nnode*) malloc (n_nodes*sizeof(Nnode));
	for (byte n=0; n<n_nodes; n++) {
    ddce:	b3 94       	inc	r11
    ddd0:	83 e0       	ldi	r24, 0x03	; 3
    ddd2:	90 e0       	ldi	r25, 0x00	; 0
    ddd4:	e8 0e       	add	r14, r24
    ddd6:	f9 1e       	adc	r15, r25
    ddd8:	ba 14       	cp	r11, r10
    ddda:	48 f3       	brcs	.-46     	; 0xddae <_ZN6NlayerC1Ehh+0x4e>
		node [n] = Nnode (n_inputs);
	}
}
    dddc:	0f 90       	pop	r0
    ddde:	0f 90       	pop	r0
    dde0:	0f 90       	pop	r0
    dde2:	cf 91       	pop	r28
    dde4:	df 91       	pop	r29
    dde6:	1f 91       	pop	r17
    dde8:	0f 91       	pop	r16
    ddea:	ff 90       	pop	r15
    ddec:	ef 90       	pop	r14
    ddee:	df 90       	pop	r13
    ddf0:	cf 90       	pop	r12
    ddf2:	bf 90       	pop	r11
    ddf4:	af 90       	pop	r10
    ddf6:	9f 90       	pop	r9
    ddf8:	8f 90       	pop	r8
    ddfa:	7f 90       	pop	r7
    ddfc:	08 95       	ret

0000ddfe <_ZN5Nnode7computeEPf>:

void Nnode::set_weights (float *weight_) {
	memcpy (weight, weight_, (n_inputs+1)*sizeof(float));
}
	
float Nnode::compute (float* input) {
    ddfe:	8f 92       	push	r8
    de00:	9f 92       	push	r9
    de02:	af 92       	push	r10
    de04:	bf 92       	push	r11
    de06:	cf 92       	push	r12
    de08:	df 92       	push	r13
    de0a:	ef 92       	push	r14
    de0c:	ff 92       	push	r15
    de0e:	0f 93       	push	r16
    de10:	1f 93       	push	r17
    de12:	cf 93       	push	r28
    de14:	df 93       	push	r29
    de16:	5c 01       	movw	r10, r24
    de18:	4b 01       	movw	r8, r22
	double acumulator = 0;
	for (byte n=0; n<n_inputs; n++) {
    de1a:	fc 01       	movw	r30, r24
    de1c:	c2 80       	ldd	r12, Z+2	; 0x02
    de1e:	0f 2e       	mov	r0, r31
    de20:	f0 e0       	ldi	r31, 0x00	; 0
    de22:	ef 2e       	mov	r14, r31
    de24:	f0 e0       	ldi	r31, 0x00	; 0
    de26:	ff 2e       	mov	r15, r31
    de28:	f0 e0       	ldi	r31, 0x00	; 0
    de2a:	0f 2f       	mov	r16, r31
    de2c:	f0 e0       	ldi	r31, 0x00	; 0
    de2e:	1f 2f       	mov	r17, r31
    de30:	f0 2d       	mov	r31, r0
    de32:	dd 24       	eor	r13, r13
    de34:	c0 e0       	ldi	r28, 0x00	; 0
    de36:	d0 e0       	ldi	r29, 0x00	; 0
    de38:	19 c0       	rjmp	.+50     	; 0xde6c <_ZN5Nnode7computeEPf+0x6e>
		acumulator += input[n]*weight[n];
    de3a:	f4 01       	movw	r30, r8
    de3c:	ec 0f       	add	r30, r28
    de3e:	fd 1f       	adc	r31, r29
    de40:	ac 0f       	add	r26, r28
    de42:	bd 1f       	adc	r27, r29
    de44:	60 81       	ld	r22, Z
    de46:	71 81       	ldd	r23, Z+1	; 0x01
    de48:	82 81       	ldd	r24, Z+2	; 0x02
    de4a:	93 81       	ldd	r25, Z+3	; 0x03
    de4c:	2d 91       	ld	r18, X+
    de4e:	3d 91       	ld	r19, X+
    de50:	4d 91       	ld	r20, X+
    de52:	5c 91       	ld	r21, X
    de54:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    de58:	9b 01       	movw	r18, r22
    de5a:	ac 01       	movw	r20, r24
    de5c:	c8 01       	movw	r24, r16
    de5e:	b7 01       	movw	r22, r14
    de60:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    de64:	7b 01       	movw	r14, r22
    de66:	8c 01       	movw	r16, r24
	memcpy (weight, weight_, (n_inputs+1)*sizeof(float));
}
	
float Nnode::compute (float* input) {
	double acumulator = 0;
	for (byte n=0; n<n_inputs; n++) {
    de68:	d3 94       	inc	r13
    de6a:	24 96       	adiw	r28, 0x04	; 4
    de6c:	f5 01       	movw	r30, r10
    de6e:	a0 81       	ld	r26, Z
    de70:	b1 81       	ldd	r27, Z+1	; 0x01
    de72:	dc 14       	cp	r13, r12
    de74:	10 f3       	brcs	.-60     	; 0xde3a <_ZN5Nnode7computeEPf+0x3c>
		acumulator += input[n]*weight[n];
	}
	acumulator += weight[n_inputs];                             // procesa el 'bias weight'
	// if (acumulator < -22.52) {acumulator = -22.52;}                   // esto es por algún bug 
	return sigmoide (acumulator);                               // sigmoid
    de76:	8c 2d       	mov	r24, r12
    de78:	90 e0       	ldi	r25, 0x00	; 0
    de7a:	88 0f       	add	r24, r24
    de7c:	99 1f       	adc	r25, r25
    de7e:	88 0f       	add	r24, r24
    de80:	99 1f       	adc	r25, r25
    de82:	a8 0f       	add	r26, r24
    de84:	b9 1f       	adc	r27, r25
    de86:	c8 01       	movw	r24, r16
    de88:	b7 01       	movw	r22, r14
    de8a:	2d 91       	ld	r18, X+
    de8c:	3d 91       	ld	r19, X+
    de8e:	4d 91       	ld	r20, X+
    de90:	5c 91       	ld	r21, X
    de92:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    de96:	0e 94 d5 73 	call	0xe7aa	; 0xe7aa <_Z8sigmoided>
}
    de9a:	df 91       	pop	r29
    de9c:	cf 91       	pop	r28
    de9e:	1f 91       	pop	r17
    dea0:	0f 91       	pop	r16
    dea2:	ff 90       	pop	r15
    dea4:	ef 90       	pop	r14
    dea6:	df 90       	pop	r13
    dea8:	cf 90       	pop	r12
    deaa:	bf 90       	pop	r11
    deac:	af 90       	pop	r10
    deae:	9f 90       	pop	r9
    deb0:	8f 90       	pop	r8
    deb2:	08 95       	ret

0000deb4 <_ZN6Nlayer7computeEPfS0_>:
	for (byte n=0; n<n_nodes; n++) {
		node [n] = Nnode (n_inputs);
	}
}

void Nlayer::compute (float *input, float *output) {
    deb4:	af 92       	push	r10
    deb6:	bf 92       	push	r11
    deb8:	cf 92       	push	r12
    deba:	df 92       	push	r13
    debc:	ff 92       	push	r15
    debe:	0f 93       	push	r16
    dec0:	1f 93       	push	r17
    dec2:	cf 93       	push	r28
    dec4:	df 93       	push	r29
    dec6:	ec 01       	movw	r28, r24
    dec8:	5b 01       	movw	r10, r22
    deca:	6a 01       	movw	r12, r20
    decc:	ff 24       	eor	r15, r15
    dece:	1a c0       	rjmp	.+52     	; 0xdf04 <_ZN6Nlayer7computeEPfS0_+0x50>
	for (byte n=0; n<n_nodes; n++) {
		output[n] = node[n].compute(input);
    ded0:	0f 2d       	mov	r16, r15
    ded2:	10 e0       	ldi	r17, 0x00	; 0
    ded4:	98 01       	movw	r18, r16
    ded6:	22 0f       	add	r18, r18
    ded8:	33 1f       	adc	r19, r19
    deda:	20 0f       	add	r18, r16
    dedc:	31 1f       	adc	r19, r17
    dede:	88 81       	ld	r24, Y
    dee0:	99 81       	ldd	r25, Y+1	; 0x01
    dee2:	82 0f       	add	r24, r18
    dee4:	93 1f       	adc	r25, r19
    dee6:	b5 01       	movw	r22, r10
    dee8:	0e 94 ff 6e 	call	0xddfe	; 0xddfe <_ZN5Nnode7computeEPf>
    deec:	00 0f       	add	r16, r16
    deee:	11 1f       	adc	r17, r17
    def0:	00 0f       	add	r16, r16
    def2:	11 1f       	adc	r17, r17
    def4:	0c 0d       	add	r16, r12
    def6:	1d 1d       	adc	r17, r13
    def8:	f8 01       	movw	r30, r16
    defa:	60 83       	st	Z, r22
    defc:	71 83       	std	Z+1, r23	; 0x01
    defe:	82 83       	std	Z+2, r24	; 0x02
    df00:	93 83       	std	Z+3, r25	; 0x03
		node [n] = Nnode (n_inputs);
	}
}

void Nlayer::compute (float *input, float *output) {
	for (byte n=0; n<n_nodes; n++) {
    df02:	f3 94       	inc	r15
    df04:	8a 81       	ldd	r24, Y+2	; 0x02
    df06:	f8 16       	cp	r15, r24
    df08:	18 f3       	brcs	.-58     	; 0xded0 <_ZN6Nlayer7computeEPfS0_+0x1c>
		output[n] = node[n].compute(input);
	}
}
    df0a:	df 91       	pop	r29
    df0c:	cf 91       	pop	r28
    df0e:	1f 91       	pop	r17
    df10:	0f 91       	pop	r16
    df12:	ff 90       	pop	r15
    df14:	df 90       	pop	r13
    df16:	cf 90       	pop	r12
    df18:	bf 90       	pop	r11
    df1a:	af 90       	pop	r10
    df1c:	08 95       	ret

0000df1e <_ZN5Nnode11set_weightsEPf>:
Nnode::Nnode (byte n_inputs) {
	this->n_inputs = n_inputs;
	weight = (float*) malloc ((n_inputs+1)*sizeof(float));
}

void Nnode::set_weights (float *weight_) {
    df1e:	fc 01       	movw	r30, r24
	memcpy (weight, weight_, (n_inputs+1)*sizeof(float));
    df20:	22 81       	ldd	r18, Z+2	; 0x02
    df22:	30 e0       	ldi	r19, 0x00	; 0
    df24:	2f 5f       	subi	r18, 0xFF	; 255
    df26:	3f 4f       	sbci	r19, 0xFF	; 255
    df28:	22 0f       	add	r18, r18
    df2a:	33 1f       	adc	r19, r19
    df2c:	22 0f       	add	r18, r18
    df2e:	33 1f       	adc	r19, r19
    df30:	80 81       	ld	r24, Z
    df32:	91 81       	ldd	r25, Z+1	; 0x01
    df34:	a9 01       	movw	r20, r18
    df36:	0e 94 a7 81 	call	0x1034e	; 0x1034e <memcpy>
}
    df3a:	08 95       	ret

0000df3c <_Z9setTimersv>:
void setTimers () {               // setea el timer2 del Atmega1280 para generar una interrupción periódica
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
	sbi(TCCR0A, WGM01);
    df3c:	84 b5       	in	r24, 0x24	; 36
    df3e:	82 60       	ori	r24, 0x02	; 2
    df40:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    df42:	84 b5       	in	r24, 0x24	; 36
    df44:	81 60       	ori	r24, 0x01	; 1
    df46:	84 bd       	out	0x24, r24	; 36
 
	// set timer 0 prescale factor to 64
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    df48:	85 b5       	in	r24, 0x25	; 37
    df4a:	82 60       	ori	r24, 0x02	; 2
    df4c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    df4e:	85 b5       	in	r24, 0x25	; 37
    df50:	81 60       	ori	r24, 0x01	; 1
    df52:	85 bd       	out	0x25, r24	; 37

	// timers 1 and 2 are used for phase-correct hardware pwm
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle
	TCCR1B = 0;
    df54:	e1 e8       	ldi	r30, 0x81	; 129
    df56:	f0 e0       	ldi	r31, 0x00	; 0
    df58:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    df5a:	80 81       	ld	r24, Z
    df5c:	82 60       	ori	r24, 0x02	; 2
    df5e:	80 83       	st	Z, r24
	sbi(TCCR1B, CS10);
    df60:	80 81       	ld	r24, Z
    df62:	81 60       	ori	r24, 0x01	; 1
    df64:	80 83       	st	Z, r24
	
	// put timer 1 in 8-bit phase correct pwm mode
	sbi(TCCR1A, WGM10);
    df66:	e0 e8       	ldi	r30, 0x80	; 128
    df68:	f0 e0       	ldi	r31, 0x00	; 0
    df6a:	80 81       	ld	r24, Z
    df6c:	81 60       	ori	r24, 0x01	; 1
    df6e:	80 83       	st	Z, r24

	// timer 2
	/* Configure timer2 in normal mode (pure counting, no PWM etc.) */  
  TCCR2A &= ~((1<<WGM21) | (1<<WGM20));   
    df70:	e0 eb       	ldi	r30, 0xB0	; 176
    df72:	f0 e0       	ldi	r31, 0x00	; 0
    df74:	80 81       	ld	r24, Z
    df76:	8c 7f       	andi	r24, 0xFC	; 252
    df78:	80 83       	st	Z, r24
  TCCR2B &= ~(1<<WGM22);   
    df7a:	a1 eb       	ldi	r26, 0xB1	; 177
    df7c:	b0 e0       	ldi	r27, 0x00	; 0
    df7e:	8c 91       	ld	r24, X
    df80:	87 7f       	andi	r24, 0xF7	; 247
    df82:	8c 93       	st	X, r24
  
  /* Select clock source: internal I/O clock */  
  ASSR &= ~(1<<AS2);   
    df84:	e6 eb       	ldi	r30, 0xB6	; 182
    df86:	f0 e0       	ldi	r31, 0x00	; 0
    df88:	80 81       	ld	r24, Z
    df8a:	8f 7d       	andi	r24, 0xDF	; 223
    df8c:	80 83       	st	Z, r24
  
  /* Disable Compare Match A interrupt enable (only want overflow) */  
  TIMSK2 &= ~(1<<OCIE2A);   
    df8e:	20 e7       	ldi	r18, 0x70	; 112
    df90:	30 e0       	ldi	r19, 0x00	; 0
    df92:	f9 01       	movw	r30, r18
    df94:	80 81       	ld	r24, Z
    df96:	8d 7f       	andi	r24, 0xFD	; 253
    df98:	80 83       	st	Z, r24
  
  /* Now configure the prescaler to CPU clock divided by 1024, lo cual nos da un ciclo de 16ms */  
  TCCR2B |= _BV(CS22) | _BV(CS21) | _BV(CS20);      
    df9a:	8c 91       	ld	r24, X
    df9c:	87 60       	ori	r24, 0x07	; 7
    df9e:	8c 93       	st	X, r24
  
	// timer 3
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    dfa0:	e1 e9       	ldi	r30, 0x91	; 145
    dfa2:	f0 e0       	ldi	r31, 0x00	; 0
    dfa4:	80 81       	ld	r24, Z
    dfa6:	82 60       	ori	r24, 0x02	; 2
    dfa8:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    dfaa:	80 81       	ld	r24, Z
    dfac:	81 60       	ori	r24, 0x01	; 1
    dfae:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    dfb0:	e0 e9       	ldi	r30, 0x90	; 144
    dfb2:	f0 e0       	ldi	r31, 0x00	; 0
    dfb4:	80 81       	ld	r24, Z
    dfb6:	81 60       	ori	r24, 0x01	; 1
    dfb8:	80 83       	st	Z, r24

	// timer 4
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    dfba:	e1 ea       	ldi	r30, 0xA1	; 161
    dfbc:	f0 e0       	ldi	r31, 0x00	; 0
    dfbe:	80 81       	ld	r24, Z
    dfc0:	82 60       	ori	r24, 0x02	; 2
    dfc2:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    dfc4:	80 81       	ld	r24, Z
    dfc6:	81 60       	ori	r24, 0x01	; 1
    dfc8:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    dfca:	e0 ea       	ldi	r30, 0xA0	; 160
    dfcc:	f0 e0       	ldi	r31, 0x00	; 0
    dfce:	80 81       	ld	r24, Z
    dfd0:	81 60       	ori	r24, 0x01	; 1
    dfd2:	80 83       	st	Z, r24

  // timer 5
  // lo que sigue es para setear el timer5 para generar PWM para los 2 servos de la cabeza
  // fast PWM, 16 bits, prescaler CPU/8, TOP = 40000 
  TCCR5A |= _BV(WGM51); TCCR5A &= ~_BV(WGM50);
    dfd4:	e0 e2       	ldi	r30, 0x20	; 32
    dfd6:	f1 e0       	ldi	r31, 0x01	; 1
    dfd8:	80 81       	ld	r24, Z
    dfda:	82 60       	ori	r24, 0x02	; 2
    dfdc:	80 83       	st	Z, r24
    dfde:	80 81       	ld	r24, Z
    dfe0:	8e 7f       	andi	r24, 0xFE	; 254
    dfe2:	80 83       	st	Z, r24
  TCCR5B |= _BV(WGM52) | _BV(WGM53) | _BV(CS51);
    dfe4:	e1 e2       	ldi	r30, 0x21	; 33
    dfe6:	f1 e0       	ldi	r31, 0x01	; 1
    dfe8:	80 81       	ld	r24, Z
    dfea:	8a 61       	ori	r24, 0x1A	; 26
    dfec:	80 83       	st	Z, r24
  TCCR5B &= ~(_BV(CS50) | _BV(CS52));	
    dfee:	80 81       	ld	r24, Z
    dff0:	8a 7f       	andi	r24, 0xFA	; 250
    dff2:	80 83       	st	Z, r24
  ICR5 = 40000;
    dff4:	80 e4       	ldi	r24, 0x40	; 64
    dff6:	9c e9       	ldi	r25, 0x9C	; 156
    dff8:	90 93 27 01 	sts	0x0127, r25
    dffc:	80 93 26 01 	sts	0x0126, r24
    e000:	ee e6       	ldi	r30, 0x6E	; 110
    e002:	f0 e0       	ldi	r31, 0x00	; 0
    e004:	80 81       	ld	r24, Z
    e006:	81 60       	ori	r24, 0x01	; 1
    e008:	80 83       	st	Z, r24
void delay (unsigned long);
void delayMicroseconds (unsigned int us);

extern volatile byte timer0_int_flag;                // permite registrar y desregistrar tareas en la interrupción del timer0

void inline enable_ovf2() {TIMSK2 |= _BV(TOIE2);}                 // habilita el Overflow Interrupt (timer2)
    e00a:	f9 01       	movw	r30, r18
    e00c:	80 81       	ld	r24, Z
    e00e:	81 60       	ori	r24, 0x01	; 1
    e010:	80 83       	st	Z, r24
	// reconnected in Serial.begin()
	// UCSR0B = 0;                     // otra potencial fuente de problemas, cuando la inicialización de los seriales se hace antes que esto
	
	enable_ovf0();     // enable timer0 overflow interrupt (habilita el delay(), etc.)
	enable_ovf2();     // enable timer2 overflow interrupt (habilita el movimiento)
	sei();           // habilita las interrupciones globales
    e012:	78 94       	sei
	
}  
    e014:	08 95       	ret

0000e016 <_Z9ADCconfigv>:
void ADCconfig () {
  
	/* prende el ADC, modo manual, no int, no inicia nada, 
	   prescaler a 1/128 (125KHz, 104us cada conversión [@16MHz])  */
  
	ADCSRA = _BV(ADEN)|_BV(ADPS2)|_BV(ADPS1)|_BV(ADPS0);    
    e016:	87 e8       	ldi	r24, 0x87	; 135
    e018:	80 93 7a 00 	sts	0x007A, r24
	ADMUX = _BV(REFS0);                              // setea el Vref
    e01c:	80 e4       	ldi	r24, 0x40	; 64
    e01e:	80 93 7c 00 	sts	0x007C, r24

}
    e022:	08 95       	ret

0000e024 <_Z11ADCInitConvh>:
  
	// esto es para abarajar los 16 canales de ADC del ATmega1280
	#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    e024:	eb e7       	ldi	r30, 0x7B	; 123
    e026:	f0 e0       	ldi	r31, 0x00	; 0
    e028:	90 81       	ld	r25, Z
    e02a:	28 2f       	mov	r18, r24
    e02c:	28 70       	andi	r18, 0x08	; 8
    e02e:	97 7f       	andi	r25, 0xF7	; 247
    e030:	29 2b       	or	r18, r25
    e032:	20 83       	st	Z, r18
  
	// analog reference is in the high two bits of ADMUX
	// channel is in the low 4 bits of ADMUX  
	// also, ADLAR (left-adjust result) must be setted to 0 (the default).
	
	ADMUX = (ADMUX & 0xe0) | (pin & 0x07);             // setea el canal ADC, sin alterar el Vref que se seteó antes
    e034:	ec e7       	ldi	r30, 0x7C	; 124
    e036:	f0 e0       	ldi	r31, 0x00	; 0
    e038:	90 81       	ld	r25, Z
    e03a:	87 70       	andi	r24, 0x07	; 7
    e03c:	90 7e       	andi	r25, 0xE0	; 224
    e03e:	98 2b       	or	r25, r24
    e040:	90 83       	st	Z, r25

	// busy wait
	__asm__ __volatile__ (
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
    e042:	82 e0       	ldi	r24, 0x02	; 2
    e044:	90 e0       	ldi	r25, 0x00	; 0
    e046:	01 97       	sbiw	r24, 0x01	; 1
    e048:	f1 f7       	brne	.-4      	; 0xe046 <_Z11ADCInitConvh+0x22>
	// also, ADLAR (left-adjust result) must be setted to 0 (the default).
	
	ADMUX = (ADMUX & 0xe0) | (pin & 0x07);             // setea el canal ADC, sin alterar el Vref que se seteó antes
	// ADMUX = (analog_reference << 6) | (pin & 0x07);      // versión "Arduino" de la misma línea (analog_reference=1)
	delayMicroseconds(2);
	ADCSRA |= _BV(ADSC);                     // inicia una nueva conversión manual (versión Arduino: sbi(ADCSRA, ADSC);)
    e04a:	ea e7       	ldi	r30, 0x7A	; 122
    e04c:	f0 e0       	ldi	r31, 0x00	; 0
    e04e:	80 81       	ld	r24, Z
    e050:	80 64       	ori	r24, 0x40	; 64
    e052:	80 83       	st	Z, r24
	
}
    e054:	08 95       	ret

0000e056 <_Z11ADCReadConvv>:

int ADCReadConv () {
  while (ADCSRA & _BV(ADSC)) ;                   // espera hasta que se apague ADSC (está pronta la conversión)  
    e056:	80 91 7a 00 	lds	r24, 0x007A
    e05a:	86 fd       	sbrc	r24, 6
    e05c:	fc cf       	rjmp	.-8      	; 0xe056 <_Z11ADCReadConvv>
  // while (bit_is_set(ADCSRA, ADSC));                 // versión "Arduino" de la misma línea
	return ADC;                                 // equivale al analogRead
    e05e:	20 91 78 00 	lds	r18, 0x0078
    e062:	30 91 79 00 	lds	r19, 0x0079
		low  = ADCL;
		high = ADCH;        
		return (high << 8) | low;
	*/
	
}
    e066:	c9 01       	movw	r24, r18
    e068:	08 95       	ret

0000e06a <_Z11SPItransferh>:
	SPSR |= _BV (SPI2X);  // double speed
	SPCR |= _BV (SPR0);   // clock / 8
}

byte SPItransfer (byte _data) {
  SPDR = _data;
    e06a:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF))) ;     // por alguna razón esto no anda cuando está adentro de una ISR
    e06c:	0d b4       	in	r0, 0x2d	; 45
    e06e:	07 fe       	sbrs	r0, 7
    e070:	fd cf       	rjmp	.-6      	; 0xe06c <_Z11SPItransferh+0x2>

	// busy wait
	__asm__ __volatile__ (
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
    e072:	8e e0       	ldi	r24, 0x0E	; 14
    e074:	90 e0       	ldi	r25, 0x00	; 0
    e076:	01 97       	sbiw	r24, 0x01	; 1
    e078:	f1 f7       	brne	.-4      	; 0xe076 <_Z11SPItransferh+0xc>

byte SPItransfer (byte _data) {
  SPDR = _data;
  while (!(SPSR & _BV(SPIF))) ;     // por alguna razón esto no anda cuando está adentro de una ISR
  delayMicroseconds (5);           // por otra misteriosa razón hay que poner este molesto delay acá
  return SPDR;
    e07a:	8e b5       	in	r24, 0x2e	; 46
}
    e07c:	08 95       	ret

0000e07e <_Z14all_timers_offb>:

// esto apaga los 2 overflows, y luego los vuelve a su estado anterior
// tanto al escribir como al leer en los AX12, conviene que los timers estén apagados
void all_timers_off (bool restore) {
	static byte timsk0, timsk2;
	if (restore) {
    e07e:	88 23       	and	r24, r24
    e080:	39 f0       	breq	.+14     	; 0xe090 <_Z14all_timers_offb+0x12>
		TIMSK0 = timsk0;
    e082:	80 91 10 14 	lds	r24, 0x1410
    e086:	80 93 6e 00 	sts	0x006E, r24
		TIMSK2 = timsk2;
    e08a:	80 91 0f 14 	lds	r24, 0x140F
    e08e:	10 c0       	rjmp	.+32     	; 0xe0b0 <_Z14all_timers_offb+0x32>
	} else {
		timsk0 = TIMSK0;
    e090:	80 91 6e 00 	lds	r24, 0x006E
    e094:	80 93 10 14 	sts	0x1410, r24
		timsk2 = TIMSK2;
    e098:	80 91 70 00 	lds	r24, 0x0070
    e09c:	80 93 0f 14 	sts	0x140F, r24
void inline disable_ovf2() {TIMSK2 &= ~_BV(TOIE2);}               // deshabilita el Overflow Interrupt (timer2)
void inline enable_ovf0() {TIMSK0 |= _BV(TOIE0);}                 // habilita el Overflow Interrupt (timer0)
void inline disable_ovf0() {TIMSK0 &= ~_BV(TOIE0);}               // deshabilita el Overflow Interrupt (timer0)
    e0a0:	80 91 6e 00 	lds	r24, 0x006E
    e0a4:	8e 7f       	andi	r24, 0xFE	; 254
    e0a6:	80 93 6e 00 	sts	0x006E, r24
void delayMicroseconds (unsigned int us);

extern volatile byte timer0_int_flag;                // permite registrar y desregistrar tareas en la interrupción del timer0

void inline enable_ovf2() {TIMSK2 |= _BV(TOIE2);}                 // habilita el Overflow Interrupt (timer2)
void inline disable_ovf2() {TIMSK2 &= ~_BV(TOIE2);}               // deshabilita el Overflow Interrupt (timer2)
    e0aa:	80 91 70 00 	lds	r24, 0x0070
    e0ae:	8e 7f       	andi	r24, 0xFE	; 254
    e0b0:	80 93 70 00 	sts	0x0070, r24
    e0b4:	08 95       	ret

0000e0b6 <_Z6millisv>:
//=============================================================================================================================//

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    e0b6:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    e0b8:	f8 94       	cli
	m = timer0_millis;
    e0ba:	20 91 0a 14 	lds	r18, 0x140A
    e0be:	30 91 0b 14 	lds	r19, 0x140B
    e0c2:	40 91 0c 14 	lds	r20, 0x140C
    e0c6:	50 91 0d 14 	lds	r21, 0x140D
	SREG = oldSREG;
    e0ca:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    e0cc:	b9 01       	movw	r22, r18
    e0ce:	ca 01       	movw	r24, r20
    e0d0:	08 95       	ret

0000e0d2 <_Z5delaym>:
	SREG = oldSREG;
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay (unsigned long ms)    /* volvemos a la delay() de la 0018, 
    e0d2:	ef 92       	push	r14
    e0d4:	ff 92       	push	r15
    e0d6:	0f 93       	push	r16
    e0d8:	1f 93       	push	r17
    e0da:	7b 01       	movw	r14, r22
    e0dc:	8c 01       	movw	r16, r24
//=============================================================================================================================//

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    e0de:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    e0e0:	f8 94       	cli
	m = timer0_millis;
    e0e2:	40 91 0a 14 	lds	r20, 0x140A
    e0e6:	50 91 0b 14 	lds	r21, 0x140B
    e0ea:	60 91 0c 14 	lds	r22, 0x140C
    e0ee:	70 91 0d 14 	lds	r23, 0x140D
	SREG = oldSREG;
    e0f2:	8f bf       	out	0x3f, r24	; 63
//=============================================================================================================================//

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    e0f4:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    e0f6:	f8 94       	cli
	m = timer0_millis;
    e0f8:	80 91 0a 14 	lds	r24, 0x140A
    e0fc:	90 91 0b 14 	lds	r25, 0x140B
    e100:	a0 91 0c 14 	lds	r26, 0x140C
    e104:	b0 91 0d 14 	lds	r27, 0x140D
	SREG = oldSREG;
    e108:	2f bf       	out	0x3f, r18	; 63
void delay (unsigned long ms)    /* volvemos a la delay() de la 0018, 
																		  porque la de la 0022 no es recomendable en un entorno con interrupciones */ 
{
	unsigned long start = millis();
	
	while (millis() - start < ms)   // antes era <=
    e10a:	84 1b       	sub	r24, r20
    e10c:	95 0b       	sbc	r25, r21
    e10e:	a6 0b       	sbc	r26, r22
    e110:	b7 0b       	sbc	r27, r23
    e112:	8e 15       	cp	r24, r14
    e114:	9f 05       	cpc	r25, r15
    e116:	a0 07       	cpc	r26, r16
    e118:	b1 07       	cpc	r27, r17
    e11a:	60 f3       	brcs	.-40     	; 0xe0f4 <_Z5delaym+0x22>
	      ;
}
    e11c:	1f 91       	pop	r17
    e11e:	0f 91       	pop	r16
    e120:	ff 90       	pop	r15
    e122:	ef 90       	pop	r14
    e124:	08 95       	ret

0000e126 <_Z17delayMicrosecondsj>:
#if F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    e126:	01 97       	sbiw	r24, 0x01	; 1
    e128:	39 f0       	breq	.+14     	; 0xe138 <_Z17delayMicrosecondsj+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    e12a:	88 0f       	add	r24, r24
    e12c:	99 1f       	adc	r25, r25
    e12e:	88 0f       	add	r24, r24
    e130:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    e132:	02 97       	sbiw	r24, 0x02	; 2

	// busy wait
	__asm__ __volatile__ (
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
    e134:	01 97       	sbiw	r24, 0x01	; 1
    e136:	f1 f7       	brne	.-4      	; 0xe134 <_Z17delayMicrosecondsj+0xe>
    e138:	08 95       	ret

0000e13a <__vector_15>:
	timer0_fract = f;
	timer0_millis = m;
	timer0_overflow_count++;
}

ISR (TIMER2_OVF_vect, ISR_BLOCK) {         
    e13a:	1f 92       	push	r1
    e13c:	0f 92       	push	r0
    e13e:	0f b6       	in	r0, 0x3f	; 63
    e140:	0f 92       	push	r0
    e142:	0b b6       	in	r0, 0x3b	; 59
    e144:	0f 92       	push	r0
    e146:	11 24       	eor	r1, r1
    e148:	2f 93       	push	r18
    e14a:	3f 93       	push	r19
    e14c:	4f 93       	push	r20
    e14e:	5f 93       	push	r21
    e150:	6f 93       	push	r22
    e152:	7f 93       	push	r23
    e154:	8f 93       	push	r24
    e156:	9f 93       	push	r25
    e158:	af 93       	push	r26
    e15a:	bf 93       	push	r27
    e15c:	ef 93       	push	r30
    e15e:	ff 93       	push	r31
	// corregir: poner el timer en modo CTC para evitar esto
	TCNT2 = overflow;                  // cada vez que se produce un overflow, el timer arranca en este valor y cuenta hasta 255.
    e160:	88 ec       	ldi	r24, 0xC8	; 200
    e162:	80 93 b2 00 	sts	0x00B2, r24
	byte act = eventos.process ();       /* se ejecuta cada TICK. Devuelve la cantidad de motores actualizados, 
    e166:	8f ed       	ldi	r24, 0xDF	; 223
    e168:	95 e0       	ldi	r25, 0x05	; 5
    e16a:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_ZN6Events7processEv>
	                                           dato que se puede usar para muchas cosas... */
	if (act==0) {poll_load();}          // si los motores no están trabajando, aprovecha para medir la fuerza (polling de sensores #2)
    e16e:	88 23       	and	r24, r24
    e170:	19 f4       	brne	.+6      	; 0xe178 <__vector_15+0x3e>
    e172:	0e 94 ed 32 	call	0x65da	; 0x65da <_Z9poll_loadv>
    e176:	04 c0       	rjmp	.+8      	; 0xe180 <__vector_15+0x46>
	else {idle = 0;}                  // de lo contrario resetea el contador idle (tiempo de inactividad)
    e178:	10 92 b3 12 	sts	0x12B3, r1
    e17c:	10 92 b2 12 	sts	0x12B2, r1
}
    e180:	ff 91       	pop	r31
    e182:	ef 91       	pop	r30
    e184:	bf 91       	pop	r27
    e186:	af 91       	pop	r26
    e188:	9f 91       	pop	r25
    e18a:	8f 91       	pop	r24
    e18c:	7f 91       	pop	r23
    e18e:	6f 91       	pop	r22
    e190:	5f 91       	pop	r21
    e192:	4f 91       	pop	r20
    e194:	3f 91       	pop	r19
    e196:	2f 91       	pop	r18
    e198:	0f 90       	pop	r0
    e19a:	0b be       	out	0x3b, r0	; 59
    e19c:	0f 90       	pop	r0
    e19e:	0f be       	out	0x3f, r0	; 63
    e1a0:	0f 90       	pop	r0
    e1a2:	1f 90       	pop	r1
    e1a4:	18 95       	reti

0000e1a6 <__vector_23>:

// este 7 tendría que se un or entre varios defines
volatile byte timer0_int_flag = 7;          // permite registrar y desregistrar tareas en la interrupción del timer0
											// por ahora no se está usando, pero pronto hay que empezar a administrar el tiempo

ISR (TIMER0_OVF_vect, ISR_BLOCK)   
    e1a6:	1f 92       	push	r1
    e1a8:	0f 92       	push	r0
    e1aa:	0f b6       	in	r0, 0x3f	; 63
    e1ac:	0f 92       	push	r0
    e1ae:	0b b6       	in	r0, 0x3b	; 59
    e1b0:	0f 92       	push	r0
    e1b2:	11 24       	eor	r1, r1
    e1b4:	df 92       	push	r13
    e1b6:	ef 92       	push	r14
    e1b8:	ff 92       	push	r15
    e1ba:	0f 93       	push	r16
    e1bc:	1f 93       	push	r17
    e1be:	2f 93       	push	r18
    e1c0:	3f 93       	push	r19
    e1c2:	4f 93       	push	r20
    e1c4:	5f 93       	push	r21
    e1c6:	6f 93       	push	r22
    e1c8:	7f 93       	push	r23
    e1ca:	8f 93       	push	r24
    e1cc:	9f 93       	push	r25
    e1ce:	af 93       	push	r26
    e1d0:	bf 93       	push	r27
    e1d2:	ef 93       	push	r30
    e1d4:	ff 93       	push	r31
{
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    e1d6:	e0 90 0a 14 	lds	r14, 0x140A
    e1da:	f0 90 0b 14 	lds	r15, 0x140B
    e1de:	00 91 0c 14 	lds	r16, 0x140C
    e1e2:	10 91 0d 14 	lds	r17, 0x140D
	unsigned char f = timer0_fract;
    e1e6:	80 91 0e 14 	lds	r24, 0x140E

	m += MILLIS_INC;
    e1ea:	08 94       	sec
    e1ec:	e1 1c       	adc	r14, r1
    e1ee:	f1 1c       	adc	r15, r1
    e1f0:	01 1d       	adc	r16, r1
    e1f2:	11 1d       	adc	r17, r1
	f += FRACT_INC;
    e1f4:	43 e0       	ldi	r20, 0x03	; 3
    e1f6:	d4 2e       	mov	r13, r20
    e1f8:	d8 0e       	add	r13, r24
	if (f >= FRACT_MAX) {
    e1fa:	9c e7       	ldi	r25, 0x7C	; 124
    e1fc:	9d 15       	cp	r25, r13
    e1fe:	40 f4       	brcc	.+16     	; 0xe210 <__vector_23+0x6a>
		f -= FRACT_MAX;
    e200:	36 e8       	ldi	r19, 0x86	; 134
    e202:	d3 2e       	mov	r13, r19
    e204:	d8 0e       	add	r13, r24
		m += 1;
    e206:	08 94       	sec
    e208:	e1 1c       	adc	r14, r1
    e20a:	f1 1c       	adc	r15, r1
    e20c:	01 1d       	adc	r16, r1
    e20e:	11 1d       	adc	r17, r1
	}
  
	// comienza zona de tareas automáticas
	// estos 1,2,etc deberían tener #defines
	if (timer0_int_flag & 1) {mov.update (m);}                    // caminata; esto puede durar 4,5 ms
    e210:	80 91 0a 04 	lds	r24, 0x040A
    e214:	80 ff       	sbrs	r24, 0
    e216:	06 c0       	rjmp	.+12     	; 0xe224 <__vector_23+0x7e>
    e218:	85 ee       	ldi	r24, 0xE5	; 229
    e21a:	9f e0       	ldi	r25, 0x0F	; 15
    e21c:	b8 01       	movw	r22, r16
    e21e:	a7 01       	movw	r20, r14
    e220:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <_ZN10Movimiento6updateEm>
	if (timer0_int_flag & 2) {pantalla.update (m);}                // display
    e224:	80 91 0a 04 	lds	r24, 0x040A
    e228:	81 ff       	sbrs	r24, 1
    e22a:	06 c0       	rjmp	.+12     	; 0xe238 <__vector_23+0x92>
    e22c:	83 ea       	ldi	r24, 0xA3	; 163
    e22e:	93 e1       	ldi	r25, 0x13	; 19
    e230:	b8 01       	movw	r22, r16
    e232:	a7 01       	movw	r20, r14
    e234:	0e 94 18 4f 	call	0x9e30	; 0x9e30 <_ZN7Display6updateEm>
	if (timer0_int_flag & 4) {kbza.comm.leer_serial();}               // polling del sensor inteligente de distancia (bypasseado en la ISR)
    e238:	80 91 0a 04 	lds	r24, 0x040A
    e23c:	82 ff       	sbrs	r24, 2
    e23e:	04 c0       	rjmp	.+8      	; 0xe248 <__vector_23+0xa2>
    e240:	8e e8       	ldi	r24, 0x8E	; 142
    e242:	93 e1       	ldi	r25, 0x13	; 19
    e244:	0e 94 b3 69 	call	0xd366	; 0xd366 <_ZN10Serialcomm11leer_serialEv>
	if (timer0_int_flag & 8) {poll_analog_sensor (m);}            	 // polling de sensores analógicos (por defecto desactivado)
    e248:	80 91 0a 04 	lds	r24, 0x040A
    e24c:	83 ff       	sbrs	r24, 3
    e24e:	04 c0       	rjmp	.+8      	; 0xe258 <__vector_23+0xb2>
    e250:	c8 01       	movw	r24, r16
    e252:	b7 01       	movw	r22, r14
    e254:	0e 94 aa 32 	call	0x6554	; 0x6554 <_Z18poll_analog_sensorm>
	// termina zona de tareas automáticas
	
	timer0_fract = f;
    e258:	d0 92 0e 14 	sts	0x140E, r13
	timer0_millis = m;
    e25c:	e0 92 0a 14 	sts	0x140A, r14
    e260:	f0 92 0b 14 	sts	0x140B, r15
    e264:	00 93 0c 14 	sts	0x140C, r16
    e268:	10 93 0d 14 	sts	0x140D, r17
	timer0_overflow_count++;
    e26c:	80 91 06 14 	lds	r24, 0x1406
    e270:	90 91 07 14 	lds	r25, 0x1407
    e274:	a0 91 08 14 	lds	r26, 0x1408
    e278:	b0 91 09 14 	lds	r27, 0x1409
    e27c:	01 96       	adiw	r24, 0x01	; 1
    e27e:	a1 1d       	adc	r26, r1
    e280:	b1 1d       	adc	r27, r1
    e282:	80 93 06 14 	sts	0x1406, r24
    e286:	90 93 07 14 	sts	0x1407, r25
    e28a:	a0 93 08 14 	sts	0x1408, r26
    e28e:	b0 93 09 14 	sts	0x1409, r27
}
    e292:	ff 91       	pop	r31
    e294:	ef 91       	pop	r30
    e296:	bf 91       	pop	r27
    e298:	af 91       	pop	r26
    e29a:	9f 91       	pop	r25
    e29c:	8f 91       	pop	r24
    e29e:	7f 91       	pop	r23
    e2a0:	6f 91       	pop	r22
    e2a2:	5f 91       	pop	r21
    e2a4:	4f 91       	pop	r20
    e2a6:	3f 91       	pop	r19
    e2a8:	2f 91       	pop	r18
    e2aa:	1f 91       	pop	r17
    e2ac:	0f 91       	pop	r16
    e2ae:	ff 90       	pop	r15
    e2b0:	ef 90       	pop	r14
    e2b2:	df 90       	pop	r13
    e2b4:	0f 90       	pop	r0
    e2b6:	0b be       	out	0x3b, r0	; 59
    e2b8:	0f 90       	pop	r0
    e2ba:	0f be       	out	0x3f, r0	; 63
    e2bc:	0f 90       	pop	r0
    e2be:	1f 90       	pop	r1
    e2c0:	18 95       	reti

0000e2c2 <_Z9SPIconfigv>:
}

// rutinas del SPI

void SPIconfig () {
  pinMode (SCK, OUTPUT);
    e2c2:	84 e3       	ldi	r24, 0x34	; 52
    e2c4:	61 e0       	ldi	r22, 0x01	; 1
    e2c6:	0e 94 bb 77 	call	0xef76	; 0xef76 <pinMode>
  pinMode (MOSI, OUTPUT);
    e2ca:	83 e3       	ldi	r24, 0x33	; 51
    e2cc:	61 e0       	ldi	r22, 0x01	; 1
    e2ce:	0e 94 bb 77 	call	0xef76	; 0xef76 <pinMode>
  pinMode (SS, OUTPUT);
    e2d2:	85 e3       	ldi	r24, 0x35	; 53
    e2d4:	61 e0       	ldi	r22, 0x01	; 1
    e2d6:	0e 94 bb 77 	call	0xef76	; 0xef76 <pinMode>
  digitalWrite (SCK, LOW);
    e2da:	84 e3       	ldi	r24, 0x34	; 52
    e2dc:	60 e0       	ldi	r22, 0x00	; 0
    e2de:	0e 94 54 78 	call	0xf0a8	; 0xf0a8 <digitalWrite>
  digitalWrite (MOSI, LOW);
    e2e2:	83 e3       	ldi	r24, 0x33	; 51
    e2e4:	60 e0       	ldi	r22, 0x00	; 0
    e2e6:	0e 94 54 78 	call	0xf0a8	; 0xf0a8 <digitalWrite>
  digitalWrite (SS, HIGH);
    e2ea:	85 e3       	ldi	r24, 0x35	; 53
    e2ec:	61 e0       	ldi	r22, 0x01	; 1
    e2ee:	0e 94 54 78 	call	0xf0a8	; 0xf0a8 <digitalWrite>
		
	/* Warning: if the SS pin ever becomes a LOW INPUT then SPI automatically switches to Slave,  
     so the data direction of the SS pin MUST be kept as OUTPUT.  */
	
	SPCR |= _BV (MSTR);   // master mode
    e2f2:	8c b5       	in	r24, 0x2c	; 44
    e2f4:	80 61       	ori	r24, 0x10	; 16
    e2f6:	8c bd       	out	0x2c, r24	; 44
	SPCR |= _BV (SPE);    // enable SPI
    e2f8:	8c b5       	in	r24, 0x2c	; 44
    e2fa:	80 64       	ori	r24, 0x40	; 64
    e2fc:	8c bd       	out	0x2c, r24	; 44
	SPSR |= _BV (SPI2X);  // double speed
    e2fe:	8d b5       	in	r24, 0x2d	; 45
    e300:	81 60       	ori	r24, 0x01	; 1
    e302:	8d bd       	out	0x2d, r24	; 45
	SPCR |= _BV (SPR0);   // clock / 8
    e304:	8c b5       	in	r24, 0x2c	; 44
    e306:	81 60       	ori	r24, 0x01	; 1
    e308:	8c bd       	out	0x2c, r24	; 44
}
    e30a:	08 95       	ret

0000e30c <_Z4signi>:
#include "Print.h"

char sign (int numero) {                       // numero/abs(numero)
  char signo = 0;
  if (numero > 0) {signo = 1;}
  if (numero < 0) {signo = -1;}
    e30c:	97 ff       	sbrs	r25, 7
    e30e:	02 c0       	rjmp	.+4      	; 0xe314 <_Z4signi+0x8>
    e310:	2f ef       	ldi	r18, 0xFF	; 255
    e312:	05 c0       	rjmp	.+10     	; 0xe31e <_Z4signi+0x12>
    e314:	20 e0       	ldi	r18, 0x00	; 0
    e316:	18 16       	cp	r1, r24
    e318:	19 06       	cpc	r1, r25
    e31a:	0c f4       	brge	.+2      	; 0xe31e <_Z4signi+0x12>
    e31c:	21 e0       	ldi	r18, 0x01	; 1
  return signo;
}
    e31e:	82 2f       	mov	r24, r18
    e320:	08 95       	ret

0000e322 <_Z6randomf>:
  if(seed != 0){
    srand (seed);
  }
}

float random(float howbig)
    e322:	ef 92       	push	r14
    e324:	ff 92       	push	r15
    e326:	0f 93       	push	r16
    e328:	1f 93       	push	r17
    e32a:	7b 01       	movw	r14, r22
    e32c:	8c 01       	movw	r16, r24
{
  if (howbig == 0){
    e32e:	20 e0       	ldi	r18, 0x00	; 0
    e330:	30 e0       	ldi	r19, 0x00	; 0
    e332:	40 e0       	ldi	r20, 0x00	; 0
    e334:	50 e0       	ldi	r21, 0x00	; 0
    e336:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    e33a:	88 23       	and	r24, r24
    e33c:	29 f4       	brne	.+10     	; 0xe348 <_Z6randomf+0x26>
    e33e:	e0 e0       	ldi	r30, 0x00	; 0
    e340:	70 e0       	ldi	r23, 0x00	; 0
    e342:	80 e0       	ldi	r24, 0x00	; 0
    e344:	60 e0       	ldi	r22, 0x00	; 0
    e346:	18 c0       	rjmp	.+48     	; 0xe378 <_Z6randomf+0x56>
    return 0;
  }
  return howbig*rand()/RAND_MAX;
    e348:	0e 94 bb 80 	call	0x10176	; 0x10176 <rand>
    e34c:	aa 27       	eor	r26, r26
    e34e:	97 fd       	sbrc	r25, 7
    e350:	a0 95       	com	r26
    e352:	ba 2f       	mov	r27, r26
    e354:	bc 01       	movw	r22, r24
    e356:	cd 01       	movw	r24, r26
    e358:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    e35c:	9b 01       	movw	r18, r22
    e35e:	ac 01       	movw	r20, r24
    e360:	c8 01       	movw	r24, r16
    e362:	b7 01       	movw	r22, r14
    e364:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    e368:	20 e0       	ldi	r18, 0x00	; 0
    e36a:	3e ef       	ldi	r19, 0xFE	; 254
    e36c:	4f ef       	ldi	r20, 0xFF	; 255
    e36e:	56 e4       	ldi	r21, 0x46	; 70
    e370:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
    e374:	e6 2f       	mov	r30, r22
    e376:	69 2f       	mov	r22, r25
}
    e378:	2e 2f       	mov	r18, r30
    e37a:	37 2f       	mov	r19, r23
    e37c:	48 2f       	mov	r20, r24
    e37e:	56 2f       	mov	r21, r22
    e380:	b9 01       	movw	r22, r18
    e382:	ca 01       	movw	r24, r20
    e384:	1f 91       	pop	r17
    e386:	0f 91       	pop	r16
    e388:	ff 90       	pop	r15
    e38a:	ef 90       	pop	r14
    e38c:	08 95       	ret

0000e38e <_Z6randomff>:

float random(float howsmall, float howbig)
    e38e:	af 92       	push	r10
    e390:	bf 92       	push	r11
    e392:	cf 92       	push	r12
    e394:	df 92       	push	r13
    e396:	ef 92       	push	r14
    e398:	ff 92       	push	r15
    e39a:	0f 93       	push	r16
    e39c:	1f 93       	push	r17
    e39e:	7b 01       	movw	r14, r22
    e3a0:	8c 01       	movw	r16, r24
    e3a2:	59 01       	movw	r10, r18
    e3a4:	6a 01       	movw	r12, r20
{
  if(howsmall >= howbig){
    e3a6:	0e 94 8c 7c 	call	0xf918	; 0xf918 <__gesf2>
    e3aa:	87 ff       	sbrs	r24, 7
    e3ac:	10 c0       	rjmp	.+32     	; 0xe3ce <_Z6randomff+0x40>
    return howsmall;
  }
  float diff = howbig - howsmall;
  return random(diff) + howsmall;
    e3ae:	c6 01       	movw	r24, r12
    e3b0:	b5 01       	movw	r22, r10
    e3b2:	a8 01       	movw	r20, r16
    e3b4:	97 01       	movw	r18, r14
    e3b6:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    e3ba:	0e 94 91 71 	call	0xe322	; 0xe322 <_Z6randomf>
    e3be:	9b 01       	movw	r18, r22
    e3c0:	ac 01       	movw	r20, r24
    e3c2:	c8 01       	movw	r24, r16
    e3c4:	b7 01       	movw	r22, r14
    e3c6:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    e3ca:	7b 01       	movw	r14, r22
    e3cc:	8c 01       	movw	r16, r24
}
    e3ce:	b7 01       	movw	r22, r14
    e3d0:	c8 01       	movw	r24, r16
    e3d2:	1f 91       	pop	r17
    e3d4:	0f 91       	pop	r16
    e3d6:	ff 90       	pop	r15
    e3d8:	ef 90       	pop	r14
    e3da:	df 90       	pop	r13
    e3dc:	cf 90       	pop	r12
    e3de:	bf 90       	pop	r11
    e3e0:	af 90       	pop	r10
    e3e2:	08 95       	ret

0000e3e4 <_Z14brownian_noisePffff>:
  if (numero > 0) {signo = 1;}
  if (numero < 0) {signo = -1;}
  return signo;
}

void brownian_noise (float *ptr, float center, float amp, float damper) {          // suma un valor aleatorio a la variable
    e3e4:	2f 92       	push	r2
    e3e6:	3f 92       	push	r3
    e3e8:	4f 92       	push	r4
    e3ea:	5f 92       	push	r5
    e3ec:	6f 92       	push	r6
    e3ee:	7f 92       	push	r7
    e3f0:	8f 92       	push	r8
    e3f2:	9f 92       	push	r9
    e3f4:	af 92       	push	r10
    e3f6:	bf 92       	push	r11
    e3f8:	cf 92       	push	r12
    e3fa:	df 92       	push	r13
    e3fc:	ef 92       	push	r14
    e3fe:	ff 92       	push	r15
    e400:	0f 93       	push	r16
    e402:	1f 93       	push	r17
    e404:	df 93       	push	r29
    e406:	cf 93       	push	r28
    e408:	cd b7       	in	r28, 0x3d	; 61
    e40a:	de b7       	in	r29, 0x3e	; 62
    e40c:	28 97       	sbiw	r28, 0x08	; 8
    e40e:	0f b6       	in	r0, 0x3f	; 63
    e410:	f8 94       	cli
    e412:	de bf       	out	0x3e, r29	; 62
    e414:	0f be       	out	0x3f, r0	; 63
    e416:	cd bf       	out	0x3d, r28	; 61
    e418:	1c 01       	movw	r2, r24
    e41a:	4d 83       	std	Y+5, r20	; 0x05
    e41c:	5e 83       	std	Y+6, r21	; 0x06
    e41e:	6f 83       	std	Y+7, r22	; 0x07
    e420:	78 87       	std	Y+8, r23	; 0x08
    e422:	48 01       	movw	r8, r16
    e424:	59 01       	movw	r10, r18
  *ptr += amp*damper*random(-1,1) + damper*(center - *ptr);
    e426:	60 e0       	ldi	r22, 0x00	; 0
    e428:	70 e0       	ldi	r23, 0x00	; 0
    e42a:	80 e8       	ldi	r24, 0x80	; 128
    e42c:	9f eb       	ldi	r25, 0xBF	; 191
    e42e:	20 e0       	ldi	r18, 0x00	; 0
    e430:	30 e0       	ldi	r19, 0x00	; 0
    e432:	40 e8       	ldi	r20, 0x80	; 128
    e434:	5f e3       	ldi	r21, 0x3F	; 63
    e436:	0e 94 c7 71 	call	0xe38e	; 0xe38e <_Z6randomff>
    e43a:	2b 01       	movw	r4, r22
    e43c:	3c 01       	movw	r6, r24
    e43e:	d1 01       	movw	r26, r2
    e440:	8d 91       	ld	r24, X+
    e442:	9d 91       	ld	r25, X+
    e444:	0d 90       	ld	r0, X+
    e446:	bc 91       	ld	r27, X
    e448:	a0 2d       	mov	r26, r0
    e44a:	89 83       	std	Y+1, r24	; 0x01
    e44c:	9a 83       	std	Y+2, r25	; 0x02
    e44e:	ab 83       	std	Y+3, r26	; 0x03
    e450:	bc 83       	std	Y+4, r27	; 0x04
    e452:	c5 01       	movw	r24, r10
    e454:	b4 01       	movw	r22, r8
    e456:	a7 01       	movw	r20, r14
    e458:	96 01       	movw	r18, r12
    e45a:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    e45e:	a3 01       	movw	r20, r6
    e460:	92 01       	movw	r18, r4
    e462:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    e466:	4b 01       	movw	r8, r22
    e468:	5c 01       	movw	r10, r24
    e46a:	6d 81       	ldd	r22, Y+5	; 0x05
    e46c:	7e 81       	ldd	r23, Y+6	; 0x06
    e46e:	8f 81       	ldd	r24, Y+7	; 0x07
    e470:	98 85       	ldd	r25, Y+8	; 0x08
    e472:	29 81       	ldd	r18, Y+1	; 0x01
    e474:	3a 81       	ldd	r19, Y+2	; 0x02
    e476:	4b 81       	ldd	r20, Y+3	; 0x03
    e478:	5c 81       	ldd	r21, Y+4	; 0x04
    e47a:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    e47e:	9b 01       	movw	r18, r22
    e480:	ac 01       	movw	r20, r24
    e482:	c7 01       	movw	r24, r14
    e484:	b6 01       	movw	r22, r12
    e486:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    e48a:	9b 01       	movw	r18, r22
    e48c:	ac 01       	movw	r20, r24
    e48e:	c5 01       	movw	r24, r10
    e490:	b4 01       	movw	r22, r8
    e492:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    e496:	9b 01       	movw	r18, r22
    e498:	ac 01       	movw	r20, r24
    e49a:	69 81       	ldd	r22, Y+1	; 0x01
    e49c:	7a 81       	ldd	r23, Y+2	; 0x02
    e49e:	8b 81       	ldd	r24, Y+3	; 0x03
    e4a0:	9c 81       	ldd	r25, Y+4	; 0x04
    e4a2:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    e4a6:	f1 01       	movw	r30, r2
    e4a8:	60 83       	st	Z, r22
    e4aa:	71 83       	std	Z+1, r23	; 0x01
    e4ac:	82 83       	std	Z+2, r24	; 0x02
    e4ae:	93 83       	std	Z+3, r25	; 0x03
}
    e4b0:	28 96       	adiw	r28, 0x08	; 8
    e4b2:	0f b6       	in	r0, 0x3f	; 63
    e4b4:	f8 94       	cli
    e4b6:	de bf       	out	0x3e, r29	; 62
    e4b8:	0f be       	out	0x3f, r0	; 63
    e4ba:	cd bf       	out	0x3d, r28	; 61
    e4bc:	cf 91       	pop	r28
    e4be:	df 91       	pop	r29
    e4c0:	1f 91       	pop	r17
    e4c2:	0f 91       	pop	r16
    e4c4:	ff 90       	pop	r15
    e4c6:	ef 90       	pop	r14
    e4c8:	df 90       	pop	r13
    e4ca:	cf 90       	pop	r12
    e4cc:	bf 90       	pop	r11
    e4ce:	af 90       	pop	r10
    e4d0:	9f 90       	pop	r9
    e4d2:	8f 90       	pop	r8
    e4d4:	7f 90       	pop	r7
    e4d6:	6f 90       	pop	r6
    e4d8:	5f 90       	pop	r5
    e4da:	4f 90       	pop	r4
    e4dc:	3f 90       	pop	r3
    e4de:	2f 90       	pop	r2
    e4e0:	08 95       	ret

0000e4e2 <_Z10randomSeedj>:

/////////////// importadas de "WMath.h" (en realidad de Wiring) //////////////////////

void randomSeed(unsigned int seed)
{
  if(seed != 0){
    e4e2:	00 97       	sbiw	r24, 0x00	; 0
    e4e4:	11 f0       	breq	.+4      	; 0xe4ea <_Z10randomSeedj+0x8>
    srand (seed);
    e4e6:	0e 94 c0 80 	call	0x10180	; 0x10180 <srand>
    e4ea:	08 95       	ret

0000e4ec <_Z10log_randomf>:
	String signo;
	if (number<0 && number>-1) {signo = "-";}
	return signo + String (parte_entera, DEC) + "," + String (abs(decimos), DEC) + String (abs(centesimos), DEC);
}

float log_random (float curvature) {              // curvature=1, random normal; curvature>1, valores próximos a 0; curvature<1, valores próximos a 1                      
    e4ec:	ef 92       	push	r14
    e4ee:	ff 92       	push	r15
    e4f0:	0f 93       	push	r16
    e4f2:	1f 93       	push	r17
    e4f4:	7b 01       	movw	r14, r22
    e4f6:	8c 01       	movw	r16, r24
  return pow(random(1), curvature); 
    e4f8:	60 e0       	ldi	r22, 0x00	; 0
    e4fa:	70 e0       	ldi	r23, 0x00	; 0
    e4fc:	80 e8       	ldi	r24, 0x80	; 128
    e4fe:	9f e3       	ldi	r25, 0x3F	; 63
    e500:	0e 94 91 71 	call	0xe322	; 0xe322 <_Z6randomf>
    e504:	a8 01       	movw	r20, r16
    e506:	97 01       	movw	r18, r14
    e508:	0e 94 09 7e 	call	0xfc12	; 0xfc12 <pow>
}
    e50c:	1f 91       	pop	r17
    e50e:	0f 91       	pop	r16
    e510:	ff 90       	pop	r15
    e512:	ef 90       	pop	r14
    e514:	08 95       	ret

0000e516 <_Z12float2stringf>:

float sigmoide (double x) {
	return 1.0 / (1+exp(-x));
}

String float2string (float number) {                          // esto se usa para el display, más que nada
    e516:	2f 92       	push	r2
    e518:	3f 92       	push	r3
    e51a:	4f 92       	push	r4
    e51c:	5f 92       	push	r5
    e51e:	6f 92       	push	r6
    e520:	7f 92       	push	r7
    e522:	8f 92       	push	r8
    e524:	9f 92       	push	r9
    e526:	af 92       	push	r10
    e528:	bf 92       	push	r11
    e52a:	cf 92       	push	r12
    e52c:	df 92       	push	r13
    e52e:	ef 92       	push	r14
    e530:	ff 92       	push	r15
    e532:	0f 93       	push	r16
    e534:	1f 93       	push	r17
    e536:	df 93       	push	r29
    e538:	cf 93       	push	r28
    e53a:	cd b7       	in	r28, 0x3d	; 61
    e53c:	de b7       	in	r29, 0x3e	; 62
    e53e:	ec 97       	sbiw	r28, 0x3c	; 60
    e540:	0f b6       	in	r0, 0x3f	; 63
    e542:	f8 94       	cli
    e544:	de bf       	out	0x3e, r29	; 62
    e546:	0f be       	out	0x3f, r0	; 63
    e548:	cd bf       	out	0x3d, r28	; 61
    e54a:	38 2e       	mov	r3, r24
    e54c:	29 2e       	mov	r2, r25
    e54e:	4a 01       	movw	r8, r20
    e550:	5b 01       	movw	r10, r22
	int parte_entera = number;
    e552:	cb 01       	movw	r24, r22
    e554:	ba 01       	movw	r22, r20
    e556:	0e 94 30 7b 	call	0xf660	; 0xf660 <__fixsfsi>
    e55a:	3b 01       	movw	r6, r22
	int decimos = number*10 - parte_entera*10;
    e55c:	c5 01       	movw	r24, r10
    e55e:	b4 01       	movw	r22, r8
    e560:	20 e0       	ldi	r18, 0x00	; 0
    e562:	30 e0       	ldi	r19, 0x00	; 0
    e564:	40 e2       	ldi	r20, 0x20	; 32
    e566:	51 e4       	ldi	r21, 0x41	; 65
    e568:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    e56c:	7b 01       	movw	r14, r22
    e56e:	8c 01       	movw	r16, r24
    e570:	b3 01       	movw	r22, r6
    e572:	66 0f       	add	r22, r22
    e574:	77 1f       	adc	r23, r23
    e576:	93 01       	movw	r18, r6
    e578:	e3 e0       	ldi	r30, 0x03	; 3
    e57a:	22 0f       	add	r18, r18
    e57c:	33 1f       	adc	r19, r19
    e57e:	ea 95       	dec	r30
    e580:	e1 f7       	brne	.-8      	; 0xe57a <_Z12float2stringf+0x64>
    e582:	62 0f       	add	r22, r18
    e584:	73 1f       	adc	r23, r19
    e586:	88 27       	eor	r24, r24
    e588:	77 fd       	sbrc	r23, 7
    e58a:	80 95       	com	r24
    e58c:	98 2f       	mov	r25, r24
    e58e:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    e592:	9b 01       	movw	r18, r22
    e594:	ac 01       	movw	r20, r24
    e596:	c8 01       	movw	r24, r16
    e598:	b7 01       	movw	r22, r14
    e59a:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    e59e:	0e 94 30 7b 	call	0xf660	; 0xf660 <__fixsfsi>
    e5a2:	56 2e       	mov	r5, r22
    e5a4:	47 2e       	mov	r4, r23
	int centesimos = number*100 - parte_entera*100 - decimos*10;
	String signo;
    e5a6:	7e 01       	movw	r14, r28
    e5a8:	08 94       	sec
    e5aa:	e1 1c       	adc	r14, r1
    e5ac:	f1 1c       	adc	r15, r1
    e5ae:	c7 01       	movw	r24, r14
    e5b0:	6f ec       	ldi	r22, 0xCF	; 207
    e5b2:	73 e0       	ldi	r23, 0x03	; 3
    e5b4:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
	if (number<0 && number>-1) {signo = "-";}
    e5b8:	c5 01       	movw	r24, r10
    e5ba:	b4 01       	movw	r22, r8
    e5bc:	20 e0       	ldi	r18, 0x00	; 0
    e5be:	30 e0       	ldi	r19, 0x00	; 0
    e5c0:	40 e0       	ldi	r20, 0x00	; 0
    e5c2:	50 e0       	ldi	r21, 0x00	; 0
    e5c4:	0e 94 90 7a 	call	0xf520	; 0xf520 <__cmpsf2>
    e5c8:	88 23       	and	r24, r24
    e5ca:	cc f4       	brge	.+50     	; 0xe5fe <_Z12float2stringf+0xe8>
    e5cc:	c5 01       	movw	r24, r10
    e5ce:	b4 01       	movw	r22, r8
    e5d0:	20 e0       	ldi	r18, 0x00	; 0
    e5d2:	30 e0       	ldi	r19, 0x00	; 0
    e5d4:	40 e8       	ldi	r20, 0x80	; 128
    e5d6:	5f eb       	ldi	r21, 0xBF	; 191
    e5d8:	0e 94 8c 7c 	call	0xf918	; 0xf918 <__gesf2>
    e5dc:	18 16       	cp	r1, r24
    e5de:	7c f4       	brge	.+30     	; 0xe5fe <_Z12float2stringf+0xe8>
    e5e0:	8e 01       	movw	r16, r28
    e5e2:	09 5f       	subi	r16, 0xF9	; 249
    e5e4:	1f 4f       	sbci	r17, 0xFF	; 255
    e5e6:	c8 01       	movw	r24, r16
    e5e8:	60 ed       	ldi	r22, 0xD0	; 208
    e5ea:	73 e0       	ldi	r23, 0x03	; 3
    e5ec:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    e5f0:	c7 01       	movw	r24, r14
    e5f2:	b8 01       	movw	r22, r16
    e5f4:	0e 94 0c 79 	call	0xf218	; 0xf218 <_ZN6StringaSERKS_>
    e5f8:	c8 01       	movw	r24, r16
    e5fa:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
	return signo + String (parte_entera, DEC) + "," + String (abs(decimos), DEC) + String (abs(centesimos), DEC);
    e5fe:	63 e1       	ldi	r22, 0x13	; 19
    e600:	c6 2e       	mov	r12, r22
    e602:	d1 2c       	mov	r13, r1
    e604:	cc 0e       	add	r12, r28
    e606:	dd 1e       	adc	r13, r29
    e608:	c6 01       	movw	r24, r12
    e60a:	be 01       	movw	r22, r28
    e60c:	6f 5f       	subi	r22, 0xFF	; 255
    e60e:	7f 4f       	sbci	r23, 0xFF	; 255
    e610:	0e 94 3c 79 	call	0xf278	; 0xf278 <_ZN6StringC1ERKS_>
    e614:	8e 01       	movw	r16, r28
    e616:	03 5f       	subi	r16, 0xF3	; 243
    e618:	1f 4f       	sbci	r17, 0xFF	; 255
    e61a:	c8 01       	movw	r24, r16
    e61c:	b3 01       	movw	r22, r6
    e61e:	4a e0       	ldi	r20, 0x0A	; 10
    e620:	50 e0       	ldi	r21, 0x00	; 0
    e622:	0e 94 7f 79 	call	0xf2fe	; 0xf2fe <_ZN6StringC1Eii>
    e626:	59 e1       	ldi	r21, 0x19	; 25
    e628:	e5 2e       	mov	r14, r21
    e62a:	f1 2c       	mov	r15, r1
    e62c:	ec 0e       	add	r14, r28
    e62e:	fd 1e       	adc	r15, r29
    e630:	c7 01       	movw	r24, r14
    e632:	b6 01       	movw	r22, r12
    e634:	a8 01       	movw	r20, r16
    e636:	0e 94 98 32 	call	0x6530	; 0x6530 <_Zpl6StringRKS_>
    e63a:	8e 01       	movw	r16, r28
    e63c:	01 5e       	subi	r16, 0xE1	; 225
    e63e:	1f 4f       	sbci	r17, 0xFF	; 255
    e640:	c8 01       	movw	r24, r16
    e642:	62 ed       	ldi	r22, 0xD2	; 210
    e644:	73 e0       	ldi	r23, 0x03	; 3
    e646:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <_ZN6StringC1EPKc>
    e64a:	ce 01       	movw	r24, r28
    e64c:	85 96       	adiw	r24, 0x25	; 37
    e64e:	b7 01       	movw	r22, r14
    e650:	a8 01       	movw	r20, r16
    e652:	0e 94 98 32 	call	0x6530	; 0x6530 <_Zpl6StringRKS_>
    e656:	25 2d       	mov	r18, r5
    e658:	34 2d       	mov	r19, r4
    e65a:	c9 01       	movw	r24, r18
    e65c:	bc 01       	movw	r22, r24
    e65e:	97 ff       	sbrs	r25, 7
    e660:	03 c0       	rjmp	.+6      	; 0xe668 <_Z12float2stringf+0x152>
    e662:	70 95       	com	r23
    e664:	61 95       	neg	r22
    e666:	7f 4f       	sbci	r23, 0xFF	; 255
    e668:	ce 01       	movw	r24, r28
    e66a:	8b 96       	adiw	r24, 0x2b	; 43
    e66c:	4a e0       	ldi	r20, 0x0A	; 10
    e66e:	50 e0       	ldi	r21, 0x00	; 0
    e670:	0e 94 7f 79 	call	0xf2fe	; 0xf2fe <_ZN6StringC1Eii>
    e674:	ce 01       	movw	r24, r28
    e676:	c1 96       	adiw	r24, 0x31	; 49
    e678:	be 01       	movw	r22, r28
    e67a:	6b 5d       	subi	r22, 0xDB	; 219
    e67c:	7f 4f       	sbci	r23, 0xFF	; 255
    e67e:	ae 01       	movw	r20, r28
    e680:	45 5d       	subi	r20, 0xD5	; 213
    e682:	5f 4f       	sbci	r21, 0xFF	; 255
    e684:	0e 94 98 32 	call	0x6530	; 0x6530 <_Zpl6StringRKS_>
    e688:	c5 01       	movw	r24, r10
    e68a:	b4 01       	movw	r22, r8
    e68c:	20 e0       	ldi	r18, 0x00	; 0
    e68e:	30 e0       	ldi	r19, 0x00	; 0
    e690:	48 ec       	ldi	r20, 0xC8	; 200
    e692:	52 e4       	ldi	r21, 0x42	; 66
    e694:	0e 94 a6 7d 	call	0xfb4c	; 0xfb4c <__mulsf3>
    e698:	7b 01       	movw	r14, r22
    e69a:	8c 01       	movw	r16, r24
    e69c:	84 e6       	ldi	r24, 0x64	; 100
    e69e:	90 e0       	ldi	r25, 0x00	; 0
    e6a0:	68 9e       	mul	r6, r24
    e6a2:	b0 01       	movw	r22, r0
    e6a4:	69 9e       	mul	r6, r25
    e6a6:	70 0d       	add	r23, r0
    e6a8:	78 9e       	mul	r7, r24
    e6aa:	70 0d       	add	r23, r0
    e6ac:	11 24       	eor	r1, r1
    e6ae:	88 27       	eor	r24, r24
    e6b0:	77 fd       	sbrc	r23, 7
    e6b2:	80 95       	com	r24
    e6b4:	98 2f       	mov	r25, r24
    e6b6:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    e6ba:	9b 01       	movw	r18, r22
    e6bc:	ac 01       	movw	r20, r24
    e6be:	c8 01       	movw	r24, r16
    e6c0:	b7 01       	movw	r22, r14
    e6c2:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    e6c6:	7b 01       	movw	r14, r22
    e6c8:	8c 01       	movw	r16, r24
    e6ca:	25 2d       	mov	r18, r5
    e6cc:	34 2d       	mov	r19, r4
    e6ce:	b9 01       	movw	r22, r18
    e6d0:	43 e0       	ldi	r20, 0x03	; 3
    e6d2:	66 0f       	add	r22, r22
    e6d4:	77 1f       	adc	r23, r23
    e6d6:	4a 95       	dec	r20
    e6d8:	e1 f7       	brne	.-8      	; 0xe6d2 <_Z12float2stringf+0x1bc>
    e6da:	22 0f       	add	r18, r18
    e6dc:	33 1f       	adc	r19, r19
    e6de:	62 0f       	add	r22, r18
    e6e0:	73 1f       	adc	r23, r19
    e6e2:	88 27       	eor	r24, r24
    e6e4:	77 fd       	sbrc	r23, 7
    e6e6:	80 95       	com	r24
    e6e8:	98 2f       	mov	r25, r24
    e6ea:	0e 94 63 7b 	call	0xf6c6	; 0xf6c6 <__floatsisf>
    e6ee:	9b 01       	movw	r18, r22
    e6f0:	ac 01       	movw	r20, r24
    e6f2:	c8 01       	movw	r24, r16
    e6f4:	b7 01       	movw	r22, r14
    e6f6:	0e 94 c9 79 	call	0xf392	; 0xf392 <__subsf3>
    e6fa:	0e 94 30 7b 	call	0xf660	; 0xf660 <__fixsfsi>
    e6fe:	77 ff       	sbrs	r23, 7
    e700:	03 c0       	rjmp	.+6      	; 0xe708 <_Z12float2stringf+0x1f2>
    e702:	70 95       	com	r23
    e704:	61 95       	neg	r22
    e706:	7f 4f       	sbci	r23, 0xFF	; 255
    e708:	ce 01       	movw	r24, r28
    e70a:	c7 96       	adiw	r24, 0x37	; 55
    e70c:	4a e0       	ldi	r20, 0x0A	; 10
    e70e:	50 e0       	ldi	r21, 0x00	; 0
    e710:	0e 94 7f 79 	call	0xf2fe	; 0xf2fe <_ZN6StringC1Eii>
    e714:	81 e3       	ldi	r24, 0x31	; 49
    e716:	e8 2e       	mov	r14, r24
    e718:	f1 2c       	mov	r15, r1
    e71a:	ec 0e       	add	r14, r28
    e71c:	fd 1e       	adc	r15, r29
    e71e:	8e 01       	movw	r16, r28
    e720:	09 5c       	subi	r16, 0xC9	; 201
    e722:	1f 4f       	sbci	r17, 0xFF	; 255
    e724:	83 2d       	mov	r24, r3
    e726:	92 2d       	mov	r25, r2
    e728:	b7 01       	movw	r22, r14
    e72a:	a8 01       	movw	r20, r16
    e72c:	0e 94 98 32 	call	0x6530	; 0x6530 <_Zpl6StringRKS_>
    e730:	c8 01       	movw	r24, r16
    e732:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    e736:	c7 01       	movw	r24, r14
    e738:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    e73c:	ce 01       	movw	r24, r28
    e73e:	8b 96       	adiw	r24, 0x2b	; 43
    e740:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    e744:	ce 01       	movw	r24, r28
    e746:	85 96       	adiw	r24, 0x25	; 37
    e748:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    e74c:	ce 01       	movw	r24, r28
    e74e:	4f 96       	adiw	r24, 0x1f	; 31
    e750:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    e754:	ce 01       	movw	r24, r28
    e756:	49 96       	adiw	r24, 0x19	; 25
    e758:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    e75c:	ce 01       	movw	r24, r28
    e75e:	0d 96       	adiw	r24, 0x0d	; 13
    e760:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    e764:	ce 01       	movw	r24, r28
    e766:	43 96       	adiw	r24, 0x13	; 19
    e768:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
    e76c:	ce 01       	movw	r24, r28
    e76e:	01 96       	adiw	r24, 0x01	; 1
    e770:	0e 94 8d 78 	call	0xf11a	; 0xf11a <_ZN6StringD1Ev>
}
    e774:	83 2d       	mov	r24, r3
    e776:	92 2d       	mov	r25, r2
    e778:	ec 96       	adiw	r28, 0x3c	; 60
    e77a:	0f b6       	in	r0, 0x3f	; 63
    e77c:	f8 94       	cli
    e77e:	de bf       	out	0x3e, r29	; 62
    e780:	0f be       	out	0x3f, r0	; 63
    e782:	cd bf       	out	0x3d, r28	; 61
    e784:	cf 91       	pop	r28
    e786:	df 91       	pop	r29
    e788:	1f 91       	pop	r17
    e78a:	0f 91       	pop	r16
    e78c:	ff 90       	pop	r15
    e78e:	ef 90       	pop	r14
    e790:	df 90       	pop	r13
    e792:	cf 90       	pop	r12
    e794:	bf 90       	pop	r11
    e796:	af 90       	pop	r10
    e798:	9f 90       	pop	r9
    e79a:	8f 90       	pop	r8
    e79c:	7f 90       	pop	r7
    e79e:	6f 90       	pop	r6
    e7a0:	5f 90       	pop	r5
    e7a2:	4f 90       	pop	r4
    e7a4:	3f 90       	pop	r3
    e7a6:	2f 90       	pop	r2
    e7a8:	08 95       	ret

0000e7aa <_Z8sigmoided>:
void brownian_noise (float *ptr, float center, float amp, float damper) {          // suma un valor aleatorio a la variable
  *ptr += amp*damper*random(-1,1) + damper*(center - *ptr);
}

float sigmoide (double x) {
	return 1.0 / (1+exp(-x));
    e7aa:	90 58       	subi	r25, 0x80	; 128
    e7ac:	0e 94 04 7b 	call	0xf608	; 0xf608 <exp>
    e7b0:	20 e0       	ldi	r18, 0x00	; 0
    e7b2:	30 e0       	ldi	r19, 0x00	; 0
    e7b4:	40 e8       	ldi	r20, 0x80	; 128
    e7b6:	5f e3       	ldi	r21, 0x3F	; 63
    e7b8:	0e 94 ca 79 	call	0xf394	; 0xf394 <__addsf3>
    e7bc:	9b 01       	movw	r18, r22
    e7be:	ac 01       	movw	r20, r24
    e7c0:	60 e0       	ldi	r22, 0x00	; 0
    e7c2:	70 e0       	ldi	r23, 0x00	; 0
    e7c4:	80 e8       	ldi	r24, 0x80	; 128
    e7c6:	9f e3       	ldi	r25, 0x3F	; 63
    e7c8:	0e 94 97 7a 	call	0xf52e	; 0xf52e <__divsf3>
}
    e7cc:	08 95       	ret

0000e7ce <main>:
#include "HardwareSerial.h"
#include "bluetooth.h"
#include "conducta.h"
#include "settings.h"

int main (void)
    e7ce:	ef 92       	push	r14
    e7d0:	ff 92       	push	r15
    e7d2:	0f 93       	push	r16
    e7d4:	1f 93       	push	r17
    e7d6:	df 93       	push	r29
    e7d8:	cf 93       	push	r28
    e7da:	cd b7       	in	r28, 0x3d	; 61
    e7dc:	de b7       	in	r29, 0x3e	; 62
    e7de:	6b 97       	sbiw	r28, 0x1b	; 27
    e7e0:	0f b6       	in	r0, 0x3f	; 63
    e7e2:	f8 94       	cli
    e7e4:	de bf       	out	0x3e, r29	; 62
    e7e6:	0f be       	out	0x3f, r0	; 63
    e7e8:	cd bf       	out	0x3d, r28	; 61
{
	// los objetos que usan Serial, hay que inicializarlos acá (en tiempo de ejecución)
	kbza = Cabeza();
    e7ea:	8e 01       	movw	r16, r28
    e7ec:	0f 5f       	subi	r16, 0xFF	; 255
    e7ee:	1f 4f       	sbci	r17, 0xFF	; 255
    e7f0:	c8 01       	movw	r24, r16
    e7f2:	0e 94 f1 4d 	call	0x9be2	; 0x9be2 <_ZN6CabezaC1Ev>
    e7f6:	ae e8       	ldi	r26, 0x8E	; 142
    e7f8:	b3 e1       	ldi	r27, 0x13	; 19
    e7fa:	f8 01       	movw	r30, r16
    e7fc:	8d e0       	ldi	r24, 0x0D	; 13
    e7fe:	01 90       	ld	r0, Z+
    e800:	0d 92       	st	X+, r0
    e802:	81 50       	subi	r24, 0x01	; 1
    e804:	e1 f7       	brne	.-8      	; 0xe7fe <main+0x30>
	blue = Bluetooth();
    e806:	8e 01       	movw	r16, r28
    e808:	02 5f       	subi	r16, 0xF2	; 242
    e80a:	1f 4f       	sbci	r17, 0xFF	; 255
    e80c:	c8 01       	movw	r24, r16
    e80e:	0e 94 cf 4c 	call	0x999e	; 0x999e <_ZN9BluetoothC1Ev>
    e812:	a0 e8       	ldi	r26, 0x80	; 128
    e814:	b3 e1       	ldi	r27, 0x13	; 19
    e816:	f8 01       	movw	r30, r16
    e818:	8e e0       	ldi	r24, 0x0E	; 14
    e81a:	01 90       	ld	r0, Z+
    e81c:	0d 92       	st	X+, r0
    e81e:	81 50       	subi	r24, 0x01	; 1
    e820:	e1 f7       	brne	.-8      	; 0xe81a <main+0x4c>
	// termina inicialización de objetos que usan Serial. 
	
	init_filters ();             // necesario para el poll_load
    e822:	0e 94 64 32 	call	0x64c8	; 0x64c8 <_Z12init_filtersv>
	
	setTimers();                /* configura los timers y arranca las interrupciones
    e826:	0e 94 9e 6f 	call	0xdf3c	; 0xdf3c <_Z9setTimersv>
	                                   sustituye a la antigua init() de Arduino */
	SPIconfig ();                                          			  // inicializa el SPI para el display
    e82a:	0e 94 61 71 	call	0xe2c2	; 0xe2c2 <_Z9SPIconfigv>
	pantalla.setColor (DEGRADE_H, RGB(1, 3, 0), RGB(1, 3, 3));     	  // setea el color para el display
    e82e:	83 ea       	ldi	r24, 0xA3	; 163
    e830:	93 e1       	ldi	r25, 0x13	; 19
    e832:	62 e0       	ldi	r22, 0x02	; 2
    e834:	4c e1       	ldi	r20, 0x1C	; 28
    e836:	2f e1       	ldi	r18, 0x1F	; 31
    e838:	0e 94 25 50 	call	0xa04a	; 0xa04a <_ZN7Display8setColorEhhh>
	motor_setup ();                 								  // inicializa y testea los 18 motores AX12
    e83c:	0e 94 c9 36 	call	0x6d92	; 0x6d92 <_Z11motor_setupv>
	ADCconfig ();                                          			  // configura el ADC     
    e840:	0e 94 0b 70 	call	0xe016	; 0xe016 <_Z9ADCconfigv>
	ADCInitConv (0);										          // esto equivale a un analogRead(0)...
    e844:	80 e0       	ldi	r24, 0x00	; 0
    e846:	0e 94 12 70 	call	0xe024	; 0xe024 <_Z11ADCInitConvh>
	randomSeed (ADCReadConv());                               	      // ...que se usa para inicializar el Random
    e84a:	0e 94 2b 70 	call	0xe056	; 0xe056 <_Z11ADCReadConvv>
    e84e:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <_Z10randomSeedj>
 //	kbza.set_pos (PAN, 0); 
 //	kbza.set_pos (TILT, 400);               	                              // posiciona la cabeza
	pantalla.conway (60, 10); delay (700);                        		// genera un efecto visual
    e852:	83 ea       	ldi	r24, 0xA3	; 163
    e854:	93 e1       	ldi	r25, 0x13	; 19
    e856:	6c e3       	ldi	r22, 0x3C	; 60
    e858:	70 e0       	ldi	r23, 0x00	; 0
    e85a:	4a e0       	ldi	r20, 0x0A	; 10
    e85c:	50 e0       	ldi	r21, 0x00	; 0
    e85e:	0e 94 3d 4e 	call	0x9c7a	; 0x9c7a <_ZN7Display6conwayEii>
    e862:	6c eb       	ldi	r22, 0xBC	; 188
    e864:	72 e0       	ldi	r23, 0x02	; 2
    e866:	80 e0       	ldi	r24, 0x00	; 0
    e868:	90 e0       	ldi	r25, 0x00	; 0
    e86a:	0e 94 69 70 	call	0xe0d2	; 0xe0d2 <_Z5delaym>
	}
	
	// obtengo una posición inicial con hexagono()
	// nota: en 'vectores' está toda la aritmética que permite operar con estas posiciones antes de pasárselas a ningún movimiento
	// mov.goto_pos_ref (hexagono (7, 30, 35, 35).patas);
	mov.goto_pos_ref ();  // la posición por defecto ya está definida en la clase
    e86e:	85 ee       	ldi	r24, 0xE5	; 229
    e870:	9f e0       	ldi	r25, 0x0F	; 15
    e872:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <_ZN10Movimiento12goto_pos_refEv>
	
	// inicialización del módulo bluetooth
	while (millis() < 1800) ;       // garantiza que pasaron 1,8 segundos para que inicie el hardware
    e876:	0e 94 5b 70 	call	0xe0b6	; 0xe0b6 <_Z6millisv>
    e87a:	68 50       	subi	r22, 0x08	; 8
    e87c:	77 40       	sbci	r23, 0x07	; 7
    e87e:	80 40       	sbci	r24, 0x00	; 0
    e880:	90 40       	sbci	r25, 0x00	; 0
    e882:	c8 f3       	brcs	.-14     	; 0xe876 <main+0xa8>
	bool bt = blue.connect();       // inicializa e intenta conectar el bluetooth
    e884:	80 e8       	ldi	r24, 0x80	; 128
    e886:	93 e1       	ldi	r25, 0x13	; 19
    e888:	0e 94 81 4b 	call	0x9702	; 0x9702 <_ZN9Bluetooth7connectEv>
    e88c:	08 2f       	mov	r16, r24
	
	while (pantalla.isBusy()) ;    // espera que termine el mensaje de bienvenida
    e88e:	83 ea       	ldi	r24, 0xA3	; 163
    e890:	93 e1       	ldi	r25, 0x13	; 19
    e892:	0e 94 7f 4e 	call	0x9cfe	; 0x9cfe <_ZN7Display6isBusyEv>
    e896:	88 23       	and	r24, r24
    e898:	d1 f7       	brne	.-12     	; 0xe88e <main+0xc0>
	
	if (bt) {
    e89a:	00 23       	and	r16, r16
    e89c:	29 f0       	breq	.+10     	; 0xe8a8 <main+0xda>
		pantalla.scrollText (" BT conect. ", 65);
    e89e:	83 ea       	ldi	r24, 0xA3	; 163
    e8a0:	93 e1       	ldi	r25, 0x13	; 19
    e8a2:	64 ed       	ldi	r22, 0xD4	; 212
    e8a4:	73 e0       	ldi	r23, 0x03	; 3
    e8a6:	04 c0       	rjmp	.+8      	; 0xe8b0 <main+0xe2>
	} else {
		pantalla.scrollText (" BT desconect. ", 65);
    e8a8:	83 ea       	ldi	r24, 0xA3	; 163
    e8aa:	93 e1       	ldi	r25, 0x13	; 19
    e8ac:	61 ee       	ldi	r22, 0xE1	; 225
    e8ae:	73 e0       	ldi	r23, 0x03	; 3
    e8b0:	41 e4       	ldi	r20, 0x41	; 65
    e8b2:	50 e0       	ldi	r21, 0x00	; 0
    e8b4:	20 e0       	ldi	r18, 0x00	; 0
    e8b6:	30 e0       	ldi	r19, 0x00	; 0
    e8b8:	01 e0       	ldi	r16, 0x01	; 1
    e8ba:	ee 24       	eor	r14, r14
    e8bc:	ea 94       	dec	r14
    e8be:	fe 2c       	mov	r15, r14
    e8c0:	0e 94 3b 50 	call	0xa076	; 0xa076 <_ZN7Display10scrollTextEPKciici>
		}
	}
	// fin firmwares alternativos
	// prosigue firmware normal con conductas	
	
	conducta_init ();                          // inicializa las conductas (alto nivel)
    e8c4:	0e 94 9a 6a 	call	0xd534	; 0xd534 <_Z13conducta_initv>
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//                                                  main loop                                                        //
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
	while (1) {
		delay (10);          // !!
    e8c8:	6a e0       	ldi	r22, 0x0A	; 10
    e8ca:	70 e0       	ldi	r23, 0x00	; 0
    e8cc:	80 e0       	ldi	r24, 0x00	; 0
    e8ce:	90 e0       	ldi	r25, 0x00	; 0
    e8d0:	0e 94 69 70 	call	0xe0d2	; 0xe0d2 <_Z5delaym>
		conducta_main ();
    e8d4:	0e 94 12 6a 	call	0xd424	; 0xd424 <_Z13conducta_mainv>
    e8d8:	f7 cf       	rjmp	.-18     	; 0xe8c8 <main+0xfa>

0000e8da <__vector_25>:
  }
}

// declaración de ISRs

SIGNAL (USART0_RX_vect) {            // SIG_USART0_RECV
    e8da:	1f 92       	push	r1
    e8dc:	0f 92       	push	r0
    e8de:	0f b6       	in	r0, 0x3f	; 63
    e8e0:	0f 92       	push	r0
    e8e2:	0b b6       	in	r0, 0x3b	; 59
    e8e4:	0f 92       	push	r0
    e8e6:	11 24       	eor	r1, r1
    e8e8:	2f 93       	push	r18
    e8ea:	3f 93       	push	r19
    e8ec:	4f 93       	push	r20
    e8ee:	8f 93       	push	r24
    e8f0:	9f 93       	push	r25
    e8f2:	ef 93       	push	r30
    e8f4:	ff 93       	push	r31
	unsigned char c  =  UDR0;
    e8f6:	40 91 c6 00 	lds	r20, 0x00C6
ring_buffer rx_buffer2  =  { { 0 }, 0, 0 };
// ring_buffer rx_buffer3  =  { { 0 }, 0, 0 };

inline void store_char (unsigned char c, ring_buffer *rx_buffer)
{
  int i = (unsigned int)(rx_buffer->head + 1) % RX_BUFFER_SIZE;
    e8fa:	e0 91 51 14 	lds	r30, 0x1451
    e8fe:	f0 91 52 14 	lds	r31, 0x1452

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != rx_buffer->tail) {
    e902:	31 96       	adiw	r30, 0x01	; 1
    e904:	9f 01       	movw	r18, r30
    e906:	2f 73       	andi	r18, 0x3F	; 63
    e908:	30 70       	andi	r19, 0x00	; 0
    e90a:	31 97       	sbiw	r30, 0x01	; 1
    e90c:	80 91 53 14 	lds	r24, 0x1453
    e910:	90 91 54 14 	lds	r25, 0x1454
    e914:	28 17       	cp	r18, r24
    e916:	39 07       	cpc	r19, r25
    e918:	39 f0       	breq	.+14     	; 0xe928 <__vector_25+0x4e>
    rx_buffer->buffer[rx_buffer->head] = c;
    e91a:	ef 5e       	subi	r30, 0xEF	; 239
    e91c:	fb 4e       	sbci	r31, 0xEB	; 235
    e91e:	40 83       	st	Z, r20
    rx_buffer->head = i;
    e920:	30 93 52 14 	sts	0x1452, r19
    e924:	20 93 51 14 	sts	0x1451, r18
// declaración de ISRs

SIGNAL (USART0_RX_vect) {            // SIG_USART0_RECV
	unsigned char c  =  UDR0;
	store_char(c, &rx_buffer);
}
    e928:	ff 91       	pop	r31
    e92a:	ef 91       	pop	r30
    e92c:	9f 91       	pop	r25
    e92e:	8f 91       	pop	r24
    e930:	4f 91       	pop	r20
    e932:	3f 91       	pop	r19
    e934:	2f 91       	pop	r18
    e936:	0f 90       	pop	r0
    e938:	0b be       	out	0x3b, r0	; 59
    e93a:	0f 90       	pop	r0
    e93c:	0f be       	out	0x3f, r0	; 63
    e93e:	0f 90       	pop	r0
    e940:	1f 90       	pop	r1
    e942:	18 95       	reti

0000e944 <__vector_51>:
	unsigned char c = UDR1;
	store_char(c, &rx_buffer1);
}
*/

SIGNAL (USART2_RX_vect) {
    e944:	1f 92       	push	r1
    e946:	0f 92       	push	r0
    e948:	0f b6       	in	r0, 0x3f	; 63
    e94a:	0f 92       	push	r0
    e94c:	0b b6       	in	r0, 0x3b	; 59
    e94e:	0f 92       	push	r0
    e950:	11 24       	eor	r1, r1
    e952:	2f 93       	push	r18
    e954:	3f 93       	push	r19
    e956:	4f 93       	push	r20
    e958:	8f 93       	push	r24
    e95a:	9f 93       	push	r25
    e95c:	ef 93       	push	r30
    e95e:	ff 93       	push	r31
	unsigned char c = UDR2;
    e960:	40 91 d6 00 	lds	r20, 0x00D6
ring_buffer rx_buffer2  =  { { 0 }, 0, 0 };
// ring_buffer rx_buffer3  =  { { 0 }, 0, 0 };

inline void store_char (unsigned char c, ring_buffer *rx_buffer)
{
  int i = (unsigned int)(rx_buffer->head + 1) % RX_BUFFER_SIZE;
    e964:	e0 91 95 14 	lds	r30, 0x1495
    e968:	f0 91 96 14 	lds	r31, 0x1496

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != rx_buffer->tail) {
    e96c:	31 96       	adiw	r30, 0x01	; 1
    e96e:	9f 01       	movw	r18, r30
    e970:	2f 73       	andi	r18, 0x3F	; 63
    e972:	30 70       	andi	r19, 0x00	; 0
    e974:	31 97       	sbiw	r30, 0x01	; 1
    e976:	80 91 97 14 	lds	r24, 0x1497
    e97a:	90 91 98 14 	lds	r25, 0x1498
    e97e:	28 17       	cp	r18, r24
    e980:	39 07       	cpc	r19, r25
    e982:	39 f0       	breq	.+14     	; 0xe992 <__vector_51+0x4e>
    rx_buffer->buffer[rx_buffer->head] = c;
    e984:	eb 5a       	subi	r30, 0xAB	; 171
    e986:	fb 4e       	sbci	r31, 0xEB	; 235
    e988:	40 83       	st	Z, r20
    rx_buffer->head = i;
    e98a:	30 93 96 14 	sts	0x1496, r19
    e98e:	20 93 95 14 	sts	0x1495, r18
	unsigned char c = UDR2;
	store_char(c, &rx_buffer2);            // esto no iria si va el harcodeo
	//kbza.comm.leer_serial (c);           // este harcodeo es para acelerar la cosa
	// pero provoca que se cuelgue al interpretar comandos del Control remoto, porque nunca sale de la interrupcion serial
	// corregir eso haciendo un flag o algo                 
}
    e992:	ff 91       	pop	r31
    e994:	ef 91       	pop	r30
    e996:	9f 91       	pop	r25
    e998:	8f 91       	pop	r24
    e99a:	4f 91       	pop	r20
    e99c:	3f 91       	pop	r19
    e99e:	2f 91       	pop	r18
    e9a0:	0f 90       	pop	r0
    e9a2:	0b be       	out	0x3b, r0	; 59
    e9a4:	0f 90       	pop	r0
    e9a6:	0f be       	out	0x3f, r0	; 63
    e9a8:	0f 90       	pop	r0
    e9aa:	1f 90       	pop	r1
    e9ac:	18 95       	reti

0000e9ae <_ZN14HardwareSerial5beginEl>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(long baud)
    e9ae:	cf 93       	push	r28
    e9b0:	df 93       	push	r29
    e9b2:	ec 01       	movw	r28, r24
    e9b4:	9a 01       	movw	r18, r20
    e9b6:	ab 01       	movw	r20, r22
    e9b8:	e8 85       	ldd	r30, Y+8	; 0x08
    e9ba:	f9 85       	ldd	r31, Y+9	; 0x09

#if F_CPU == 16000000UL
  // hardcoded exception for compatibility with the bootloader shipped
  // with the Duemilanove and previous boards and the firmware on the 8U2
  // on the Uno and Mega 2560.
  if (baud == 57600) {
    e9bc:	20 30       	cpi	r18, 0x00	; 0
    e9be:	81 ee       	ldi	r24, 0xE1	; 225
    e9c0:	38 07       	cpc	r19, r24
    e9c2:	80 e0       	ldi	r24, 0x00	; 0
    e9c4:	48 07       	cpc	r20, r24
    e9c6:	80 e0       	ldi	r24, 0x00	; 0
    e9c8:	58 07       	cpc	r21, r24
    e9ca:	09 f4       	brne	.+2      	; 0xe9ce <_ZN14HardwareSerial5beginEl+0x20>
    e9cc:	49 c0       	rjmp	.+146    	; 0xea60 <_ZN14HardwareSerial5beginEl+0xb2>
    use_u2x = false;
  }
#endif
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    e9ce:	81 e0       	ldi	r24, 0x01	; 1
    e9d0:	90 e0       	ldi	r25, 0x00	; 0
    e9d2:	0a 88       	ldd	r0, Y+18	; 0x12
    e9d4:	02 c0       	rjmp	.+4      	; 0xe9da <_ZN14HardwareSerial5beginEl+0x2c>
    e9d6:	88 0f       	add	r24, r24
    e9d8:	99 1f       	adc	r25, r25
    e9da:	0a 94       	dec	r0
    e9dc:	e2 f7       	brpl	.-8      	; 0xe9d6 <_ZN14HardwareSerial5beginEl+0x28>
    e9de:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    e9e0:	60 e0       	ldi	r22, 0x00	; 0
    e9e2:	79 e0       	ldi	r23, 0x09	; 9
    e9e4:	8d e3       	ldi	r24, 0x3D	; 61
    e9e6:	90 e0       	ldi	r25, 0x00	; 0
    e9e8:	0e 94 3a 7f 	call	0xfe74	; 0xfe74 <__divmodsi4>
    e9ec:	21 50       	subi	r18, 0x01	; 1
    e9ee:	30 40       	sbci	r19, 0x00	; 0
    e9f0:	40 40       	sbci	r20, 0x00	; 0
    e9f2:	50 40       	sbci	r21, 0x00	; 0
    e9f4:	ca 01       	movw	r24, r20
    e9f6:	b9 01       	movw	r22, r18
    e9f8:	22 e0       	ldi	r18, 0x02	; 2
    e9fa:	30 e0       	ldi	r19, 0x00	; 0
    e9fc:	40 e0       	ldi	r20, 0x00	; 0
    e9fe:	50 e0       	ldi	r21, 0x00	; 0
    ea00:	0e 94 3a 7f 	call	0xfe74	; 0xfe74 <__divmodsi4>
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    ea04:	ec 81       	ldd	r30, Y+4	; 0x04
    ea06:	fd 81       	ldd	r31, Y+5	; 0x05
    ea08:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    ea0a:	ee 81       	ldd	r30, Y+6	; 0x06
    ea0c:	ff 81       	ldd	r31, Y+7	; 0x07
    ea0e:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    ea10:	ea 85       	ldd	r30, Y+10	; 0x0a
    ea12:	fb 85       	ldd	r31, Y+11	; 0x0b
    ea14:	20 81       	ld	r18, Z
    ea16:	41 e0       	ldi	r20, 0x01	; 1
    ea18:	50 e0       	ldi	r21, 0x00	; 0
    ea1a:	ca 01       	movw	r24, r20
    ea1c:	0e 84       	ldd	r0, Y+14	; 0x0e
    ea1e:	02 c0       	rjmp	.+4      	; 0xea24 <_ZN14HardwareSerial5beginEl+0x76>
    ea20:	88 0f       	add	r24, r24
    ea22:	99 1f       	adc	r25, r25
    ea24:	0a 94       	dec	r0
    ea26:	e2 f7       	brpl	.-8      	; 0xea20 <_ZN14HardwareSerial5beginEl+0x72>
    ea28:	28 2b       	or	r18, r24
    ea2a:	20 83       	st	Z, r18
  sbi(*_ucsrb, _txen);
    ea2c:	ea 85       	ldd	r30, Y+10	; 0x0a
    ea2e:	fb 85       	ldd	r31, Y+11	; 0x0b
    ea30:	20 81       	ld	r18, Z
    ea32:	ca 01       	movw	r24, r20
    ea34:	0f 84       	ldd	r0, Y+15	; 0x0f
    ea36:	02 c0       	rjmp	.+4      	; 0xea3c <_ZN14HardwareSerial5beginEl+0x8e>
    ea38:	88 0f       	add	r24, r24
    ea3a:	99 1f       	adc	r25, r25
    ea3c:	0a 94       	dec	r0
    ea3e:	e2 f7       	brpl	.-8      	; 0xea38 <_ZN14HardwareSerial5beginEl+0x8a>
    ea40:	28 2b       	or	r18, r24
    ea42:	20 83       	st	Z, r18
  sbi(*_ucsrb, _rxcie);
    ea44:	ea 85       	ldd	r30, Y+10	; 0x0a
    ea46:	fb 85       	ldd	r31, Y+11	; 0x0b
    ea48:	80 81       	ld	r24, Z
    ea4a:	08 88       	ldd	r0, Y+16	; 0x10
    ea4c:	02 c0       	rjmp	.+4      	; 0xea52 <_ZN14HardwareSerial5beginEl+0xa4>
    ea4e:	44 0f       	add	r20, r20
    ea50:	55 1f       	adc	r21, r21
    ea52:	0a 94       	dec	r0
    ea54:	e2 f7       	brpl	.-8      	; 0xea4e <_ZN14HardwareSerial5beginEl+0xa0>
    ea56:	84 2b       	or	r24, r20
    ea58:	80 83       	st	Z, r24
}
    ea5a:	df 91       	pop	r29
    ea5c:	cf 91       	pop	r28
    ea5e:	08 95       	ret
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
    ea60:	10 82       	st	Z, r1
    ea62:	20 e1       	ldi	r18, 0x10	; 16
    ea64:	30 e0       	ldi	r19, 0x00	; 0
    ea66:	ce cf       	rjmp	.-100    	; 0xea04 <_ZN14HardwareSerial5beginEl+0x56>

0000ea68 <_ZN14HardwareSerial9availableEv>:
  cbi(*_ucsrb, _rxcie);  
}

int HardwareSerial::available(void)
{
  return (unsigned int)(RX_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % RX_BUFFER_SIZE;
    ea68:	dc 01       	movw	r26, r24
    ea6a:	12 96       	adiw	r26, 0x02	; 2
    ea6c:	ed 91       	ld	r30, X+
    ea6e:	fc 91       	ld	r31, X
    ea70:	13 97       	sbiw	r26, 0x03	; 3
    ea72:	e0 5c       	subi	r30, 0xC0	; 192
    ea74:	ff 4f       	sbci	r31, 0xFF	; 255
    ea76:	21 91       	ld	r18, Z+
    ea78:	31 91       	ld	r19, Z+
    ea7a:	80 81       	ld	r24, Z
    ea7c:	91 81       	ldd	r25, Z+1	; 0x01
    ea7e:	28 1b       	sub	r18, r24
    ea80:	39 0b       	sbc	r19, r25
    ea82:	2f 73       	andi	r18, 0x3F	; 63
    ea84:	30 70       	andi	r19, 0x00	; 0
}
    ea86:	c9 01       	movw	r24, r18
    ea88:	08 95       	ret

0000ea8a <_ZN14HardwareSerial4readEv>:
}

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    ea8a:	dc 01       	movw	r26, r24
    ea8c:	12 96       	adiw	r26, 0x02	; 2
    ea8e:	ed 91       	ld	r30, X+
    ea90:	fc 91       	ld	r31, X
    ea92:	13 97       	sbiw	r26, 0x03	; 3
    ea94:	df 01       	movw	r26, r30
    ea96:	ae 5b       	subi	r26, 0xBE	; 190
    ea98:	bf 4f       	sbci	r27, 0xFF	; 255
    ea9a:	2d 91       	ld	r18, X+
    ea9c:	3c 91       	ld	r19, X
    ea9e:	11 97       	sbiw	r26, 0x01	; 1
    eaa0:	e0 5c       	subi	r30, 0xC0	; 192
    eaa2:	ff 4f       	sbci	r31, 0xFF	; 255
    eaa4:	80 81       	ld	r24, Z
    eaa6:	91 81       	ldd	r25, Z+1	; 0x01
    eaa8:	e0 54       	subi	r30, 0x40	; 64
    eaaa:	f0 40       	sbci	r31, 0x00	; 0
    eaac:	82 17       	cp	r24, r18
    eaae:	93 07       	cpc	r25, r19
    eab0:	19 f4       	brne	.+6      	; 0xeab8 <_ZN14HardwareSerial4readEv+0x2e>
    eab2:	2f ef       	ldi	r18, 0xFF	; 255
    eab4:	3f ef       	ldi	r19, 0xFF	; 255
    eab6:	0b c0       	rjmp	.+22     	; 0xeace <_ZN14HardwareSerial4readEv+0x44>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    eab8:	e2 0f       	add	r30, r18
    eaba:	f3 1f       	adc	r31, r19
    eabc:	80 81       	ld	r24, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % RX_BUFFER_SIZE;
    eabe:	2f 5f       	subi	r18, 0xFF	; 255
    eac0:	3f 4f       	sbci	r19, 0xFF	; 255
    eac2:	2f 73       	andi	r18, 0x3F	; 63
    eac4:	30 70       	andi	r19, 0x00	; 0
    eac6:	2d 93       	st	X+, r18
    eac8:	3c 93       	st	X, r19
    return c;
    eaca:	28 2f       	mov	r18, r24
    eacc:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    eace:	c9 01       	movw	r24, r18
    ead0:	08 95       	ret

0000ead2 <_ZN14HardwareSerial5flushEv>:
  // don't reverse this or there may be problems if the RX interrupt
  // occurs after reading the value of rx_buffer_head but before writing
  // the value to rx_buffer_tail; the previous value of rx_buffer_head
  // may be written to rx_buffer_tail, making it appear as if the buffer
  // were full, not empty.
  _rx_buffer->head = _rx_buffer->tail;
    ead2:	dc 01       	movw	r26, r24
    ead4:	12 96       	adiw	r26, 0x02	; 2
    ead6:	ed 91       	ld	r30, X+
    ead8:	fc 91       	ld	r31, X
    eada:	13 97       	sbiw	r26, 0x03	; 3
    eadc:	ee 5b       	subi	r30, 0xBE	; 190
    eade:	ff 4f       	sbci	r31, 0xFF	; 255
    eae0:	80 81       	ld	r24, Z
    eae2:	91 81       	ldd	r25, Z+1	; 0x01
    eae4:	92 93       	st	-Z, r25
    eae6:	82 93       	st	-Z, r24
}
    eae8:	08 95       	ret

0000eaea <_ZN14HardwareSerial5writeEh>:

void HardwareSerial::write(uint8_t c)
    eaea:	fc 01       	movw	r30, r24
{
  while (!((*_ucsra) & (1 << _udre)))
    eaec:	a0 85       	ldd	r26, Z+8	; 0x08
    eaee:	b1 85       	ldd	r27, Z+9	; 0x09
    eaf0:	21 89       	ldd	r18, Z+17	; 0x11
    eaf2:	8c 91       	ld	r24, X
    eaf4:	90 e0       	ldi	r25, 0x00	; 0
    eaf6:	02 2e       	mov	r0, r18
    eaf8:	02 c0       	rjmp	.+4      	; 0xeafe <_ZN14HardwareSerial5writeEh+0x14>
    eafa:	95 95       	asr	r25
    eafc:	87 95       	ror	r24
    eafe:	0a 94       	dec	r0
    eb00:	e2 f7       	brpl	.-8      	; 0xeafa <_ZN14HardwareSerial5writeEh+0x10>
    eb02:	80 ff       	sbrs	r24, 0
    eb04:	f6 cf       	rjmp	.-20     	; 0xeaf2 <_ZN14HardwareSerial5writeEh+0x8>
    ;

  *_udr = c;
    eb06:	04 84       	ldd	r0, Z+12	; 0x0c
    eb08:	f5 85       	ldd	r31, Z+13	; 0x0d
    eb0a:	e0 2d       	mov	r30, r0
    eb0c:	60 83       	st	Z, r22
}
    eb0e:	08 95       	ret

0000eb10 <_GLOBAL__I_rx_buffer>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
    eb10:	28 eb       	ldi	r18, 0xB8	; 184
    eb12:	35 e0       	ldi	r19, 0x05	; 5
    eb14:	30 93 9a 14 	sts	0x149A, r19
    eb18:	20 93 99 14 	sts	0x1499, r18
{
  _rx_buffer = rx_buffer;
    eb1c:	81 e1       	ldi	r24, 0x11	; 17
    eb1e:	94 e1       	ldi	r25, 0x14	; 20
    eb20:	90 93 9c 14 	sts	0x149C, r25
    eb24:	80 93 9b 14 	sts	0x149B, r24
  _ubrrh = ubrrh;
    eb28:	85 ec       	ldi	r24, 0xC5	; 197
    eb2a:	90 e0       	ldi	r25, 0x00	; 0
    eb2c:	90 93 9e 14 	sts	0x149E, r25
    eb30:	80 93 9d 14 	sts	0x149D, r24
  _ubrrl = ubrrl;
    eb34:	84 ec       	ldi	r24, 0xC4	; 196
    eb36:	90 e0       	ldi	r25, 0x00	; 0
    eb38:	90 93 a0 14 	sts	0x14A0, r25
    eb3c:	80 93 9f 14 	sts	0x149F, r24
  _ucsra = ucsra;
    eb40:	80 ec       	ldi	r24, 0xC0	; 192
    eb42:	90 e0       	ldi	r25, 0x00	; 0
    eb44:	90 93 a2 14 	sts	0x14A2, r25
    eb48:	80 93 a1 14 	sts	0x14A1, r24
  _ucsrb = ucsrb;
    eb4c:	81 ec       	ldi	r24, 0xC1	; 193
    eb4e:	90 e0       	ldi	r25, 0x00	; 0
    eb50:	90 93 a4 14 	sts	0x14A4, r25
    eb54:	80 93 a3 14 	sts	0x14A3, r24
  _udr = udr;
    eb58:	86 ec       	ldi	r24, 0xC6	; 198
    eb5a:	90 e0       	ldi	r25, 0x00	; 0
    eb5c:	90 93 a6 14 	sts	0x14A6, r25
    eb60:	80 93 a5 14 	sts	0x14A5, r24
  _rxen = rxen;
    eb64:	e4 e0       	ldi	r30, 0x04	; 4
    eb66:	e0 93 a7 14 	sts	0x14A7, r30
  _txen = txen;
    eb6a:	73 e0       	ldi	r23, 0x03	; 3
    eb6c:	70 93 a8 14 	sts	0x14A8, r23
  _rxcie = rxcie;
    eb70:	67 e0       	ldi	r22, 0x07	; 7
    eb72:	60 93 a9 14 	sts	0x14A9, r22
  _udre = udre;
    eb76:	55 e0       	ldi	r21, 0x05	; 5
    eb78:	50 93 aa 14 	sts	0x14AA, r21
  _u2x = u2x;
    eb7c:	41 e0       	ldi	r20, 0x01	; 1
    eb7e:	40 93 ab 14 	sts	0x14AB, r20

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
    eb82:	30 93 ad 14 	sts	0x14AD, r19
    eb86:	20 93 ac 14 	sts	0x14AC, r18
{
  _rx_buffer = rx_buffer;
    eb8a:	85 e5       	ldi	r24, 0x55	; 85
    eb8c:	94 e1       	ldi	r25, 0x14	; 20
    eb8e:	90 93 af 14 	sts	0x14AF, r25
    eb92:	80 93 ae 14 	sts	0x14AE, r24
  _ubrrh = ubrrh;
    eb96:	85 ed       	ldi	r24, 0xD5	; 213
    eb98:	90 e0       	ldi	r25, 0x00	; 0
    eb9a:	90 93 b1 14 	sts	0x14B1, r25
    eb9e:	80 93 b0 14 	sts	0x14B0, r24
  _ubrrl = ubrrl;
    eba2:	84 ed       	ldi	r24, 0xD4	; 212
    eba4:	90 e0       	ldi	r25, 0x00	; 0
    eba6:	90 93 b3 14 	sts	0x14B3, r25
    ebaa:	80 93 b2 14 	sts	0x14B2, r24
  _ucsra = ucsra;
    ebae:	80 ed       	ldi	r24, 0xD0	; 208
    ebb0:	90 e0       	ldi	r25, 0x00	; 0
    ebb2:	90 93 b5 14 	sts	0x14B5, r25
    ebb6:	80 93 b4 14 	sts	0x14B4, r24
  _ucsrb = ucsrb;
    ebba:	81 ed       	ldi	r24, 0xD1	; 209
    ebbc:	90 e0       	ldi	r25, 0x00	; 0
    ebbe:	90 93 b7 14 	sts	0x14B7, r25
    ebc2:	80 93 b6 14 	sts	0x14B6, r24
  _udr = udr;
    ebc6:	86 ed       	ldi	r24, 0xD6	; 214
    ebc8:	90 e0       	ldi	r25, 0x00	; 0
    ebca:	90 93 b9 14 	sts	0x14B9, r25
    ebce:	80 93 b8 14 	sts	0x14B8, r24
  _rxen = rxen;
    ebd2:	e0 93 ba 14 	sts	0x14BA, r30
  _txen = txen;
    ebd6:	70 93 bb 14 	sts	0x14BB, r23
  _rxcie = rxcie;
    ebda:	60 93 bc 14 	sts	0x14BC, r22
  _udre = udre;
    ebde:	50 93 bd 14 	sts	0x14BD, r21
  _u2x = u2x;
    ebe2:	40 93 be 14 	sts	0x14BE, r20

// Preinstantiate Objects //////////////////////////////////////////////////////

HardwareSerial Serial (&rx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRE0, U2X0);
// HardwareSerial Serial1 (&rx_buffer1, &UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UDR1, RXEN1, TXEN1, RXCIE1, UDRE1, U2X1);
HardwareSerial Serial2 (&rx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRE2, U2X2);
    ebe6:	08 95       	ret

0000ebe8 <_ZN5Print5writeEPKc>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
    ebe8:	0f 93       	push	r16
    ebea:	1f 93       	push	r17
    ebec:	cf 93       	push	r28
    ebee:	df 93       	push	r29
    ebf0:	8c 01       	movw	r16, r24
    ebf2:	eb 01       	movw	r28, r22
    ebf4:	09 c0       	rjmp	.+18     	; 0xec08 <_ZN5Print5writeEPKc+0x20>
{
  while (*str)
    write(*str++);
    ebf6:	21 96       	adiw	r28, 0x01	; 1
    ebf8:	d8 01       	movw	r26, r16
    ebfa:	ed 91       	ld	r30, X+
    ebfc:	fc 91       	ld	r31, X
    ebfe:	01 90       	ld	r0, Z+
    ec00:	f0 81       	ld	r31, Z
    ec02:	e0 2d       	mov	r30, r0
    ec04:	c8 01       	movw	r24, r16
    ec06:	09 95       	icall
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
{
  while (*str)
    ec08:	68 81       	ld	r22, Y
    ec0a:	66 23       	and	r22, r22
    ec0c:	a1 f7       	brne	.-24     	; 0xebf6 <_ZN5Print5writeEPKc+0xe>
    write(*str++);
}
    ec0e:	df 91       	pop	r29
    ec10:	cf 91       	pop	r28
    ec12:	1f 91       	pop	r17
    ec14:	0f 91       	pop	r16
    ec16:	08 95       	ret

0000ec18 <_ZN5Print5writeEPKhj>:

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
    ec18:	ef 92       	push	r14
    ec1a:	ff 92       	push	r15
    ec1c:	0f 93       	push	r16
    ec1e:	1f 93       	push	r17
    ec20:	cf 93       	push	r28
    ec22:	df 93       	push	r29
    ec24:	8c 01       	movw	r16, r24
    ec26:	7b 01       	movw	r14, r22
    ec28:	ea 01       	movw	r28, r20
    ec2a:	0c c0       	rjmp	.+24     	; 0xec44 <_ZN5Print5writeEPKhj+0x2c>
{
  while (size--)
    write(*buffer++);
    ec2c:	d7 01       	movw	r26, r14
    ec2e:	6d 91       	ld	r22, X+
    ec30:	7d 01       	movw	r14, r26
    ec32:	d8 01       	movw	r26, r16
    ec34:	ed 91       	ld	r30, X+
    ec36:	fc 91       	ld	r31, X
    ec38:	01 90       	ld	r0, Z+
    ec3a:	f0 81       	ld	r31, Z
    ec3c:	e0 2d       	mov	r30, r0
    ec3e:	c8 01       	movw	r24, r16
    ec40:	09 95       	icall
    ec42:	21 97       	sbiw	r28, 0x01	; 1
}

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
{
  while (size--)
    ec44:	20 97       	sbiw	r28, 0x00	; 0
    ec46:	91 f7       	brne	.-28     	; 0xec2c <_ZN5Print5writeEPKhj+0x14>
    write(*buffer++);
}
    ec48:	df 91       	pop	r29
    ec4a:	cf 91       	pop	r28
    ec4c:	1f 91       	pop	r17
    ec4e:	0f 91       	pop	r16
    ec50:	ff 90       	pop	r15
    ec52:	ef 90       	pop	r14
    ec54:	08 95       	ret

0000ec56 <_ZN5Print5printEPKc>:
	for (int i = 0; i < s.length(); i++) {
    write(s[i]);
  }
}

void Print::print(const char str[])
    ec56:	dc 01       	movw	r26, r24
{
  write(str);
    ec58:	ed 91       	ld	r30, X+
    ec5a:	fc 91       	ld	r31, X
    ec5c:	02 80       	ldd	r0, Z+2	; 0x02
    ec5e:	f3 81       	ldd	r31, Z+3	; 0x03
    ec60:	e0 2d       	mov	r30, r0
    ec62:	09 95       	icall
}
    ec64:	08 95       	ret

0000ec66 <__vector_1>:
}
*/

#if defined(EICRA) && defined(EICRB)

SIGNAL(INT0_vect) {
    ec66:	1f 92       	push	r1
    ec68:	0f 92       	push	r0
    ec6a:	0f b6       	in	r0, 0x3f	; 63
    ec6c:	0f 92       	push	r0
    ec6e:	0b b6       	in	r0, 0x3b	; 59
    ec70:	0f 92       	push	r0
    ec72:	11 24       	eor	r1, r1
    ec74:	2f 93       	push	r18
    ec76:	3f 93       	push	r19
    ec78:	4f 93       	push	r20
    ec7a:	5f 93       	push	r21
    ec7c:	6f 93       	push	r22
    ec7e:	7f 93       	push	r23
    ec80:	8f 93       	push	r24
    ec82:	9f 93       	push	r25
    ec84:	af 93       	push	r26
    ec86:	bf 93       	push	r27
    ec88:	ef 93       	push	r30
    ec8a:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_2])
    ec8c:	80 91 c3 14 	lds	r24, 0x14C3
    ec90:	90 91 c4 14 	lds	r25, 0x14C4
    ec94:	89 2b       	or	r24, r25
    ec96:	29 f0       	breq	.+10     	; 0xeca2 <__vector_1+0x3c>
    intFunc[EXTERNAL_INT_2]();
    ec98:	e0 91 c3 14 	lds	r30, 0x14C3
    ec9c:	f0 91 c4 14 	lds	r31, 0x14C4
    eca0:	09 95       	icall
}
    eca2:	ff 91       	pop	r31
    eca4:	ef 91       	pop	r30
    eca6:	bf 91       	pop	r27
    eca8:	af 91       	pop	r26
    ecaa:	9f 91       	pop	r25
    ecac:	8f 91       	pop	r24
    ecae:	7f 91       	pop	r23
    ecb0:	6f 91       	pop	r22
    ecb2:	5f 91       	pop	r21
    ecb4:	4f 91       	pop	r20
    ecb6:	3f 91       	pop	r19
    ecb8:	2f 91       	pop	r18
    ecba:	0f 90       	pop	r0
    ecbc:	0b be       	out	0x3b, r0	; 59
    ecbe:	0f 90       	pop	r0
    ecc0:	0f be       	out	0x3f, r0	; 63
    ecc2:	0f 90       	pop	r0
    ecc4:	1f 90       	pop	r1
    ecc6:	18 95       	reti

0000ecc8 <__vector_2>:

SIGNAL(INT1_vect) {
    ecc8:	1f 92       	push	r1
    ecca:	0f 92       	push	r0
    eccc:	0f b6       	in	r0, 0x3f	; 63
    ecce:	0f 92       	push	r0
    ecd0:	0b b6       	in	r0, 0x3b	; 59
    ecd2:	0f 92       	push	r0
    ecd4:	11 24       	eor	r1, r1
    ecd6:	2f 93       	push	r18
    ecd8:	3f 93       	push	r19
    ecda:	4f 93       	push	r20
    ecdc:	5f 93       	push	r21
    ecde:	6f 93       	push	r22
    ece0:	7f 93       	push	r23
    ece2:	8f 93       	push	r24
    ece4:	9f 93       	push	r25
    ece6:	af 93       	push	r26
    ece8:	bf 93       	push	r27
    ecea:	ef 93       	push	r30
    ecec:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_3])
    ecee:	80 91 c5 14 	lds	r24, 0x14C5
    ecf2:	90 91 c6 14 	lds	r25, 0x14C6
    ecf6:	89 2b       	or	r24, r25
    ecf8:	29 f0       	breq	.+10     	; 0xed04 <__vector_2+0x3c>
    intFunc[EXTERNAL_INT_3]();
    ecfa:	e0 91 c5 14 	lds	r30, 0x14C5
    ecfe:	f0 91 c6 14 	lds	r31, 0x14C6
    ed02:	09 95       	icall
}
    ed04:	ff 91       	pop	r31
    ed06:	ef 91       	pop	r30
    ed08:	bf 91       	pop	r27
    ed0a:	af 91       	pop	r26
    ed0c:	9f 91       	pop	r25
    ed0e:	8f 91       	pop	r24
    ed10:	7f 91       	pop	r23
    ed12:	6f 91       	pop	r22
    ed14:	5f 91       	pop	r21
    ed16:	4f 91       	pop	r20
    ed18:	3f 91       	pop	r19
    ed1a:	2f 91       	pop	r18
    ed1c:	0f 90       	pop	r0
    ed1e:	0b be       	out	0x3b, r0	; 59
    ed20:	0f 90       	pop	r0
    ed22:	0f be       	out	0x3f, r0	; 63
    ed24:	0f 90       	pop	r0
    ed26:	1f 90       	pop	r1
    ed28:	18 95       	reti

0000ed2a <__vector_3>:

SIGNAL(INT2_vect) {
    ed2a:	1f 92       	push	r1
    ed2c:	0f 92       	push	r0
    ed2e:	0f b6       	in	r0, 0x3f	; 63
    ed30:	0f 92       	push	r0
    ed32:	0b b6       	in	r0, 0x3b	; 59
    ed34:	0f 92       	push	r0
    ed36:	11 24       	eor	r1, r1
    ed38:	2f 93       	push	r18
    ed3a:	3f 93       	push	r19
    ed3c:	4f 93       	push	r20
    ed3e:	5f 93       	push	r21
    ed40:	6f 93       	push	r22
    ed42:	7f 93       	push	r23
    ed44:	8f 93       	push	r24
    ed46:	9f 93       	push	r25
    ed48:	af 93       	push	r26
    ed4a:	bf 93       	push	r27
    ed4c:	ef 93       	push	r30
    ed4e:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_4])
    ed50:	80 91 c7 14 	lds	r24, 0x14C7
    ed54:	90 91 c8 14 	lds	r25, 0x14C8
    ed58:	89 2b       	or	r24, r25
    ed5a:	29 f0       	breq	.+10     	; 0xed66 <__vector_3+0x3c>
    intFunc[EXTERNAL_INT_4]();
    ed5c:	e0 91 c7 14 	lds	r30, 0x14C7
    ed60:	f0 91 c8 14 	lds	r31, 0x14C8
    ed64:	09 95       	icall
}
    ed66:	ff 91       	pop	r31
    ed68:	ef 91       	pop	r30
    ed6a:	bf 91       	pop	r27
    ed6c:	af 91       	pop	r26
    ed6e:	9f 91       	pop	r25
    ed70:	8f 91       	pop	r24
    ed72:	7f 91       	pop	r23
    ed74:	6f 91       	pop	r22
    ed76:	5f 91       	pop	r21
    ed78:	4f 91       	pop	r20
    ed7a:	3f 91       	pop	r19
    ed7c:	2f 91       	pop	r18
    ed7e:	0f 90       	pop	r0
    ed80:	0b be       	out	0x3b, r0	; 59
    ed82:	0f 90       	pop	r0
    ed84:	0f be       	out	0x3f, r0	; 63
    ed86:	0f 90       	pop	r0
    ed88:	1f 90       	pop	r1
    ed8a:	18 95       	reti

0000ed8c <__vector_4>:

SIGNAL(INT3_vect) {
    ed8c:	1f 92       	push	r1
    ed8e:	0f 92       	push	r0
    ed90:	0f b6       	in	r0, 0x3f	; 63
    ed92:	0f 92       	push	r0
    ed94:	0b b6       	in	r0, 0x3b	; 59
    ed96:	0f 92       	push	r0
    ed98:	11 24       	eor	r1, r1
    ed9a:	2f 93       	push	r18
    ed9c:	3f 93       	push	r19
    ed9e:	4f 93       	push	r20
    eda0:	5f 93       	push	r21
    eda2:	6f 93       	push	r22
    eda4:	7f 93       	push	r23
    eda6:	8f 93       	push	r24
    eda8:	9f 93       	push	r25
    edaa:	af 93       	push	r26
    edac:	bf 93       	push	r27
    edae:	ef 93       	push	r30
    edb0:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_5])
    edb2:	80 91 c9 14 	lds	r24, 0x14C9
    edb6:	90 91 ca 14 	lds	r25, 0x14CA
    edba:	89 2b       	or	r24, r25
    edbc:	29 f0       	breq	.+10     	; 0xedc8 <__vector_4+0x3c>
    intFunc[EXTERNAL_INT_5]();
    edbe:	e0 91 c9 14 	lds	r30, 0x14C9
    edc2:	f0 91 ca 14 	lds	r31, 0x14CA
    edc6:	09 95       	icall
}
    edc8:	ff 91       	pop	r31
    edca:	ef 91       	pop	r30
    edcc:	bf 91       	pop	r27
    edce:	af 91       	pop	r26
    edd0:	9f 91       	pop	r25
    edd2:	8f 91       	pop	r24
    edd4:	7f 91       	pop	r23
    edd6:	6f 91       	pop	r22
    edd8:	5f 91       	pop	r21
    edda:	4f 91       	pop	r20
    eddc:	3f 91       	pop	r19
    edde:	2f 91       	pop	r18
    ede0:	0f 90       	pop	r0
    ede2:	0b be       	out	0x3b, r0	; 59
    ede4:	0f 90       	pop	r0
    ede6:	0f be       	out	0x3f, r0	; 63
    ede8:	0f 90       	pop	r0
    edea:	1f 90       	pop	r1
    edec:	18 95       	reti

0000edee <__vector_5>:

SIGNAL(INT4_vect) {
    edee:	1f 92       	push	r1
    edf0:	0f 92       	push	r0
    edf2:	0f b6       	in	r0, 0x3f	; 63
    edf4:	0f 92       	push	r0
    edf6:	0b b6       	in	r0, 0x3b	; 59
    edf8:	0f 92       	push	r0
    edfa:	11 24       	eor	r1, r1
    edfc:	2f 93       	push	r18
    edfe:	3f 93       	push	r19
    ee00:	4f 93       	push	r20
    ee02:	5f 93       	push	r21
    ee04:	6f 93       	push	r22
    ee06:	7f 93       	push	r23
    ee08:	8f 93       	push	r24
    ee0a:	9f 93       	push	r25
    ee0c:	af 93       	push	r26
    ee0e:	bf 93       	push	r27
    ee10:	ef 93       	push	r30
    ee12:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    ee14:	80 91 bf 14 	lds	r24, 0x14BF
    ee18:	90 91 c0 14 	lds	r25, 0x14C0
    ee1c:	89 2b       	or	r24, r25
    ee1e:	29 f0       	breq	.+10     	; 0xee2a <__vector_5+0x3c>
    intFunc[EXTERNAL_INT_0]();
    ee20:	e0 91 bf 14 	lds	r30, 0x14BF
    ee24:	f0 91 c0 14 	lds	r31, 0x14C0
    ee28:	09 95       	icall
}
    ee2a:	ff 91       	pop	r31
    ee2c:	ef 91       	pop	r30
    ee2e:	bf 91       	pop	r27
    ee30:	af 91       	pop	r26
    ee32:	9f 91       	pop	r25
    ee34:	8f 91       	pop	r24
    ee36:	7f 91       	pop	r23
    ee38:	6f 91       	pop	r22
    ee3a:	5f 91       	pop	r21
    ee3c:	4f 91       	pop	r20
    ee3e:	3f 91       	pop	r19
    ee40:	2f 91       	pop	r18
    ee42:	0f 90       	pop	r0
    ee44:	0b be       	out	0x3b, r0	; 59
    ee46:	0f 90       	pop	r0
    ee48:	0f be       	out	0x3f, r0	; 63
    ee4a:	0f 90       	pop	r0
    ee4c:	1f 90       	pop	r1
    ee4e:	18 95       	reti

0000ee50 <__vector_6>:

SIGNAL(INT5_vect) {
    ee50:	1f 92       	push	r1
    ee52:	0f 92       	push	r0
    ee54:	0f b6       	in	r0, 0x3f	; 63
    ee56:	0f 92       	push	r0
    ee58:	0b b6       	in	r0, 0x3b	; 59
    ee5a:	0f 92       	push	r0
    ee5c:	11 24       	eor	r1, r1
    ee5e:	2f 93       	push	r18
    ee60:	3f 93       	push	r19
    ee62:	4f 93       	push	r20
    ee64:	5f 93       	push	r21
    ee66:	6f 93       	push	r22
    ee68:	7f 93       	push	r23
    ee6a:	8f 93       	push	r24
    ee6c:	9f 93       	push	r25
    ee6e:	af 93       	push	r26
    ee70:	bf 93       	push	r27
    ee72:	ef 93       	push	r30
    ee74:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    ee76:	80 91 c1 14 	lds	r24, 0x14C1
    ee7a:	90 91 c2 14 	lds	r25, 0x14C2
    ee7e:	89 2b       	or	r24, r25
    ee80:	29 f0       	breq	.+10     	; 0xee8c <__vector_6+0x3c>
    intFunc[EXTERNAL_INT_1]();
    ee82:	e0 91 c1 14 	lds	r30, 0x14C1
    ee86:	f0 91 c2 14 	lds	r31, 0x14C2
    ee8a:	09 95       	icall
}
    ee8c:	ff 91       	pop	r31
    ee8e:	ef 91       	pop	r30
    ee90:	bf 91       	pop	r27
    ee92:	af 91       	pop	r26
    ee94:	9f 91       	pop	r25
    ee96:	8f 91       	pop	r24
    ee98:	7f 91       	pop	r23
    ee9a:	6f 91       	pop	r22
    ee9c:	5f 91       	pop	r21
    ee9e:	4f 91       	pop	r20
    eea0:	3f 91       	pop	r19
    eea2:	2f 91       	pop	r18
    eea4:	0f 90       	pop	r0
    eea6:	0b be       	out	0x3b, r0	; 59
    eea8:	0f 90       	pop	r0
    eeaa:	0f be       	out	0x3f, r0	; 63
    eeac:	0f 90       	pop	r0
    eeae:	1f 90       	pop	r1
    eeb0:	18 95       	reti

0000eeb2 <__vector_7>:

SIGNAL(INT6_vect) {
    eeb2:	1f 92       	push	r1
    eeb4:	0f 92       	push	r0
    eeb6:	0f b6       	in	r0, 0x3f	; 63
    eeb8:	0f 92       	push	r0
    eeba:	0b b6       	in	r0, 0x3b	; 59
    eebc:	0f 92       	push	r0
    eebe:	11 24       	eor	r1, r1
    eec0:	2f 93       	push	r18
    eec2:	3f 93       	push	r19
    eec4:	4f 93       	push	r20
    eec6:	5f 93       	push	r21
    eec8:	6f 93       	push	r22
    eeca:	7f 93       	push	r23
    eecc:	8f 93       	push	r24
    eece:	9f 93       	push	r25
    eed0:	af 93       	push	r26
    eed2:	bf 93       	push	r27
    eed4:	ef 93       	push	r30
    eed6:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_6])
    eed8:	80 91 cb 14 	lds	r24, 0x14CB
    eedc:	90 91 cc 14 	lds	r25, 0x14CC
    eee0:	89 2b       	or	r24, r25
    eee2:	29 f0       	breq	.+10     	; 0xeeee <__vector_7+0x3c>
    intFunc[EXTERNAL_INT_6]();
    eee4:	e0 91 cb 14 	lds	r30, 0x14CB
    eee8:	f0 91 cc 14 	lds	r31, 0x14CC
    eeec:	09 95       	icall
}
    eeee:	ff 91       	pop	r31
    eef0:	ef 91       	pop	r30
    eef2:	bf 91       	pop	r27
    eef4:	af 91       	pop	r26
    eef6:	9f 91       	pop	r25
    eef8:	8f 91       	pop	r24
    eefa:	7f 91       	pop	r23
    eefc:	6f 91       	pop	r22
    eefe:	5f 91       	pop	r21
    ef00:	4f 91       	pop	r20
    ef02:	3f 91       	pop	r19
    ef04:	2f 91       	pop	r18
    ef06:	0f 90       	pop	r0
    ef08:	0b be       	out	0x3b, r0	; 59
    ef0a:	0f 90       	pop	r0
    ef0c:	0f be       	out	0x3f, r0	; 63
    ef0e:	0f 90       	pop	r0
    ef10:	1f 90       	pop	r1
    ef12:	18 95       	reti

0000ef14 <__vector_8>:

SIGNAL(INT7_vect) {
    ef14:	1f 92       	push	r1
    ef16:	0f 92       	push	r0
    ef18:	0f b6       	in	r0, 0x3f	; 63
    ef1a:	0f 92       	push	r0
    ef1c:	0b b6       	in	r0, 0x3b	; 59
    ef1e:	0f 92       	push	r0
    ef20:	11 24       	eor	r1, r1
    ef22:	2f 93       	push	r18
    ef24:	3f 93       	push	r19
    ef26:	4f 93       	push	r20
    ef28:	5f 93       	push	r21
    ef2a:	6f 93       	push	r22
    ef2c:	7f 93       	push	r23
    ef2e:	8f 93       	push	r24
    ef30:	9f 93       	push	r25
    ef32:	af 93       	push	r26
    ef34:	bf 93       	push	r27
    ef36:	ef 93       	push	r30
    ef38:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
    ef3a:	80 91 cd 14 	lds	r24, 0x14CD
    ef3e:	90 91 ce 14 	lds	r25, 0x14CE
    ef42:	89 2b       	or	r24, r25
    ef44:	29 f0       	breq	.+10     	; 0xef50 <__vector_8+0x3c>
    intFunc[EXTERNAL_INT_7]();
    ef46:	e0 91 cd 14 	lds	r30, 0x14CD
    ef4a:	f0 91 ce 14 	lds	r31, 0x14CE
    ef4e:	09 95       	icall
}
    ef50:	ff 91       	pop	r31
    ef52:	ef 91       	pop	r30
    ef54:	bf 91       	pop	r27
    ef56:	af 91       	pop	r26
    ef58:	9f 91       	pop	r25
    ef5a:	8f 91       	pop	r24
    ef5c:	7f 91       	pop	r23
    ef5e:	6f 91       	pop	r22
    ef60:	5f 91       	pop	r21
    ef62:	4f 91       	pop	r20
    ef64:	3f 91       	pop	r19
    ef66:	2f 91       	pop	r18
    ef68:	0f 90       	pop	r0
    ef6a:	0b be       	out	0x3b, r0	; 59
    ef6c:	0f 90       	pop	r0
    ef6e:	0f be       	out	0x3f, r0	; 63
    ef70:	0f 90       	pop	r0
    ef72:	1f 90       	pop	r1
    ef74:	18 95       	reti

0000ef76 <pinMode>:
#include "wiring.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    ef76:	48 2f       	mov	r20, r24
    ef78:	50 e0       	ldi	r21, 0x00	; 0
    ef7a:	ca 01       	movw	r24, r20
    ef7c:	8b 55       	subi	r24, 0x5B	; 91
    ef7e:	9b 4f       	sbci	r25, 0xFB	; 251
    ef80:	fc 01       	movw	r30, r24
    ef82:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    ef84:	41 5a       	subi	r20, 0xA1	; 161
    ef86:	5b 4f       	sbci	r21, 0xFB	; 251
    ef88:	fa 01       	movw	r30, r20
    ef8a:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    ef8c:	88 23       	and	r24, r24
    ef8e:	c1 f0       	breq	.+48     	; 0xefc0 <pinMode+0x4a>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    ef90:	e8 2f       	mov	r30, r24
    ef92:	f0 e0       	ldi	r31, 0x00	; 0
    ef94:	ee 0f       	add	r30, r30
    ef96:	ff 1f       	adc	r31, r31
    ef98:	ef 5e       	subi	r30, 0xEF	; 239
    ef9a:	fb 4f       	sbci	r31, 0xFB	; 251
    ef9c:	a5 91       	lpm	r26, Z+
    ef9e:	b4 91       	lpm	r27, Z+

	if (mode == INPUT) { 
    efa0:	66 23       	and	r22, r22
    efa2:	41 f4       	brne	.+16     	; 0xefb4 <pinMode+0x3e>
		uint8_t oldSREG = SREG;
    efa4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    efa6:	f8 94       	cli
		*reg &= ~bit;
    efa8:	8c 91       	ld	r24, X
    efaa:	20 95       	com	r18
    efac:	82 23       	and	r24, r18
    efae:	8c 93       	st	X, r24
		SREG = oldSREG;
    efb0:	9f bf       	out	0x3f, r25	; 63
    efb2:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
    efb4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    efb6:	f8 94       	cli
		*reg |= bit;
    efb8:	8c 91       	ld	r24, X
    efba:	82 2b       	or	r24, r18
    efbc:	8c 93       	st	X, r24
		SREG = oldSREG;
    efbe:	9f bf       	out	0x3f, r25	; 63
    efc0:	08 95       	ret

0000efc2 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    efc2:	89 30       	cpi	r24, 0x09	; 9
    efc4:	09 f4       	brne	.+2      	; 0xefc8 <turnOffPWM+0x6>
    efc6:	48 c0       	rjmp	.+144    	; 0xf058 <turnOffPWM+0x96>
    efc8:	8a 30       	cpi	r24, 0x0A	; 10
    efca:	a0 f4       	brcc	.+40     	; 0xeff4 <turnOffPWM+0x32>
    efcc:	84 30       	cpi	r24, 0x04	; 4
    efce:	49 f1       	breq	.+82     	; 0xf022 <turnOffPWM+0x60>
    efd0:	85 30       	cpi	r24, 0x05	; 5
    efd2:	40 f4       	brcc	.+16     	; 0xefe4 <turnOffPWM+0x22>
    efd4:	82 30       	cpi	r24, 0x02	; 2
    efd6:	71 f1       	breq	.+92     	; 0xf034 <turnOffPWM+0x72>
    efd8:	83 30       	cpi	r24, 0x03	; 3
    efda:	f8 f4       	brcc	.+62     	; 0xf01a <turnOffPWM+0x58>
    efdc:	81 30       	cpi	r24, 0x01	; 1
    efde:	09 f0       	breq	.+2      	; 0xefe2 <turnOffPWM+0x20>
    efe0:	62 c0       	rjmp	.+196    	; 0xf0a6 <turnOffPWM+0xe4>
    efe2:	25 c0       	rjmp	.+74     	; 0xf02e <turnOffPWM+0x6c>
    efe4:	87 30       	cpi	r24, 0x07	; 7
    efe6:	71 f1       	breq	.+92     	; 0xf044 <turnOffPWM+0x82>
    efe8:	88 30       	cpi	r24, 0x08	; 8
    efea:	90 f5       	brcc	.+100    	; 0xf050 <turnOffPWM+0x8e>
    efec:	86 30       	cpi	r24, 0x06	; 6
    efee:	09 f0       	breq	.+2      	; 0xeff2 <turnOffPWM+0x30>
    eff0:	5a c0       	rjmp	.+180    	; 0xf0a6 <turnOffPWM+0xe4>
    eff2:	24 c0       	rjmp	.+72     	; 0xf03c <turnOffPWM+0x7a>
    eff4:	8d 30       	cpi	r24, 0x0D	; 13
    eff6:	09 f4       	brne	.+2      	; 0xeffa <turnOffPWM+0x38>
    eff8:	41 c0       	rjmp	.+130    	; 0xf07c <turnOffPWM+0xba>
    effa:	8e 30       	cpi	r24, 0x0E	; 14
    effc:	28 f4       	brcc	.+10     	; 0xf008 <turnOffPWM+0x46>
    effe:	8b 30       	cpi	r24, 0x0B	; 11
    f000:	a9 f1       	breq	.+106    	; 0xf06c <turnOffPWM+0xaa>
    f002:	8c 30       	cpi	r24, 0x0C	; 12
    f004:	b8 f5       	brcc	.+110    	; 0xf074 <turnOffPWM+0xb2>
    f006:	2c c0       	rjmp	.+88     	; 0xf060 <turnOffPWM+0x9e>
    f008:	8f 30       	cpi	r24, 0x0F	; 15
    f00a:	09 f4       	brne	.+2      	; 0xf00e <turnOffPWM+0x4c>
    f00c:	41 c0       	rjmp	.+130    	; 0xf090 <turnOffPWM+0xce>
    f00e:	8f 30       	cpi	r24, 0x0F	; 15
    f010:	d8 f1       	brcs	.+118    	; 0xf088 <turnOffPWM+0xc6>
    f012:	80 31       	cpi	r24, 0x10	; 16
    f014:	09 f0       	breq	.+2      	; 0xf018 <turnOffPWM+0x56>
    f016:	47 c0       	rjmp	.+142    	; 0xf0a6 <turnOffPWM+0xe4>
    f018:	41 c0       	rjmp	.+130    	; 0xf09c <turnOffPWM+0xda>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    f01a:	80 91 80 00 	lds	r24, 0x0080
    f01e:	8f 77       	andi	r24, 0x7F	; 127
    f020:	03 c0       	rjmp	.+6      	; 0xf028 <turnOffPWM+0x66>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    f022:	80 91 80 00 	lds	r24, 0x0080
    f026:	8f 7d       	andi	r24, 0xDF	; 223
    f028:	80 93 80 00 	sts	0x0080, r24
    f02c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    f02e:	84 b5       	in	r24, 0x24	; 36
    f030:	8f 77       	andi	r24, 0x7F	; 127
    f032:	02 c0       	rjmp	.+4      	; 0xf038 <turnOffPWM+0x76>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    f034:	84 b5       	in	r24, 0x24	; 36
    f036:	8f 7d       	andi	r24, 0xDF	; 223
    f038:	84 bd       	out	0x24, r24	; 36
    f03a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    f03c:	80 91 b0 00 	lds	r24, 0x00B0
    f040:	8f 77       	andi	r24, 0x7F	; 127
    f042:	03 c0       	rjmp	.+6      	; 0xf04a <turnOffPWM+0x88>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    f044:	80 91 b0 00 	lds	r24, 0x00B0
    f048:	8f 7d       	andi	r24, 0xDF	; 223
    f04a:	80 93 b0 00 	sts	0x00B0, r24
    f04e:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    f050:	80 91 90 00 	lds	r24, 0x0090
    f054:	8f 77       	andi	r24, 0x7F	; 127
    f056:	07 c0       	rjmp	.+14     	; 0xf066 <turnOffPWM+0xa4>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    f058:	80 91 90 00 	lds	r24, 0x0090
    f05c:	8f 7d       	andi	r24, 0xDF	; 223
    f05e:	03 c0       	rjmp	.+6      	; 0xf066 <turnOffPWM+0xa4>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    f060:	80 91 90 00 	lds	r24, 0x0090
    f064:	87 7f       	andi	r24, 0xF7	; 247
    f066:	80 93 90 00 	sts	0x0090, r24
    f06a:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    f06c:	80 91 a0 00 	lds	r24, 0x00A0
    f070:	8f 77       	andi	r24, 0x7F	; 127
    f072:	07 c0       	rjmp	.+14     	; 0xf082 <turnOffPWM+0xc0>
		#endif
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    f074:	80 91 a0 00 	lds	r24, 0x00A0
    f078:	8f 7d       	andi	r24, 0xDF	; 223
    f07a:	03 c0       	rjmp	.+6      	; 0xf082 <turnOffPWM+0xc0>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    f07c:	80 91 a0 00 	lds	r24, 0x00A0
    f080:	87 7f       	andi	r24, 0xF7	; 247
    f082:	80 93 a0 00 	sts	0x00A0, r24
    f086:	08 95       	ret
		#endif
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    f088:	80 91 20 01 	lds	r24, 0x0120
    f08c:	8f 77       	andi	r24, 0x7F	; 127
    f08e:	03 c0       	rjmp	.+6      	; 0xf096 <turnOffPWM+0xd4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    f090:	80 91 20 01 	lds	r24, 0x0120
    f094:	8f 7d       	andi	r24, 0xDF	; 223
    f096:	80 93 20 01 	sts	0x0120, r24
    f09a:	08 95       	ret
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    f09c:	80 91 20 01 	lds	r24, 0x0120
    f0a0:	87 7f       	andi	r24, 0xF7	; 247
    f0a2:	80 93 20 01 	sts	0x0120, r24
    f0a6:	08 95       	ret

0000f0a8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    f0a8:	ff 92       	push	r15
    f0aa:	0f 93       	push	r16
    f0ac:	1f 93       	push	r17
    f0ae:	f6 2e       	mov	r15, r22
	uint8_t timer = digitalPinToTimer(pin);
    f0b0:	48 2f       	mov	r20, r24
    f0b2:	50 e0       	ldi	r21, 0x00	; 0
    f0b4:	ca 01       	movw	r24, r20
    f0b6:	85 51       	subi	r24, 0x15	; 21
    f0b8:	9b 4f       	sbci	r25, 0xFB	; 251
    f0ba:	fc 01       	movw	r30, r24
    f0bc:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    f0be:	ca 01       	movw	r24, r20
    f0c0:	8b 55       	subi	r24, 0x5B	; 91
    f0c2:	9b 4f       	sbci	r25, 0xFB	; 251
    f0c4:	fc 01       	movw	r30, r24
    f0c6:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
    f0c8:	41 5a       	subi	r20, 0xA1	; 161
    f0ca:	5b 4f       	sbci	r21, 0xFB	; 251
    f0cc:	fa 01       	movw	r30, r20
    f0ce:	04 91       	lpm	r16, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    f0d0:	00 23       	and	r16, r16
    f0d2:	d9 f0       	breq	.+54     	; 0xf10a <digitalWrite+0x62>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    f0d4:	22 23       	and	r18, r18
    f0d6:	19 f0       	breq	.+6      	; 0xf0de <digitalWrite+0x36>
    f0d8:	82 2f       	mov	r24, r18
    f0da:	0e 94 e1 77 	call	0xefc2	; 0xefc2 <turnOffPWM>

	out = portOutputRegister(port);
    f0de:	e0 2f       	mov	r30, r16
    f0e0:	f0 e0       	ldi	r31, 0x00	; 0
    f0e2:	ee 0f       	add	r30, r30
    f0e4:	ff 1f       	adc	r31, r31
    f0e6:	e5 5d       	subi	r30, 0xD5	; 213
    f0e8:	fb 4f       	sbci	r31, 0xFB	; 251
    f0ea:	a5 91       	lpm	r26, Z+
    f0ec:	b4 91       	lpm	r27, Z+

	if (val == LOW) {
    f0ee:	ff 20       	and	r15, r15
    f0f0:	31 f4       	brne	.+12     	; 0xf0fe <digitalWrite+0x56>
		uint8_t oldSREG = SREG;
    f0f2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    f0f4:	f8 94       	cli
		*out &= ~bit;
    f0f6:	8c 91       	ld	r24, X
    f0f8:	10 95       	com	r17
    f0fa:	81 23       	and	r24, r17
    f0fc:	04 c0       	rjmp	.+8      	; 0xf106 <digitalWrite+0x5e>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
    f0fe:	9f b7       	in	r25, 0x3f	; 63
                cli();
    f100:	f8 94       	cli
		*out |= bit;
    f102:	8c 91       	ld	r24, X
    f104:	81 2b       	or	r24, r17
    f106:	8c 93       	st	X, r24
		SREG = oldSREG;
    f108:	9f bf       	out	0x3f, r25	; 63
	}
}
    f10a:	1f 91       	pop	r17
    f10c:	0f 91       	pop	r16
    f10e:	ff 90       	pop	r15
    f110:	08 95       	ret

0000f112 <_ZN6String11toCharArrayEv>:
  if (len > _length) len = _length;
  strncpy(buf, _buffer, len);
  buf[len] = 0;
}

char* String::toCharArray()
    f112:	fc 01       	movw	r30, r24
{
  return _buffer;
}
    f114:	80 81       	ld	r24, Z
    f116:	91 81       	ldd	r25, Z+1	; 0x01
    f118:	08 95       	ret

0000f11a <_ZN6StringD1Ev>:
  _capacity = maxStrLen;
  _buffer = (char *) malloc(_capacity + 1);
  if (_buffer == NULL) _length = _capacity = 0;
}

    f11a:	0f 93       	push	r16
    f11c:	1f 93       	push	r17
    f11e:	8c 01       	movw	r16, r24
    f120:	fc 01       	movw	r30, r24
    f122:	80 81       	ld	r24, Z
    f124:	91 81       	ldd	r25, Z+1	; 0x01
    f126:	0e 94 08 80 	call	0x10010	; 0x10010 <free>
    f12a:	f8 01       	movw	r30, r16
    f12c:	13 82       	std	Z+3, r1	; 0x03
    f12e:	12 82       	std	Z+2, r1	; 0x02
    f130:	15 82       	std	Z+5, r1	; 0x05
    f132:	14 82       	std	Z+4, r1	; 0x04
    f134:	1f 91       	pop	r17
    f136:	0f 91       	pop	r16
    f138:	08 95       	ret

0000f13a <_ZNK6String7indexOfERKS_j>:
int String::indexOf( const String &s2 ) const
{
  return indexOf( s2, 0 );
}

int String::indexOf( const String &s2, unsigned int fromIndex ) const
    f13a:	cf 93       	push	r28
    f13c:	df 93       	push	r29
    f13e:	fc 01       	movw	r30, r24
    f140:	db 01       	movw	r26, r22
{
  if ( fromIndex >= _length )
    f142:	84 81       	ldd	r24, Z+4	; 0x04
    f144:	95 81       	ldd	r25, Z+5	; 0x05
    f146:	48 17       	cp	r20, r24
    f148:	59 07       	cpc	r21, r25
    f14a:	60 f4       	brcc	.+24     	; 0xf164 <_ZNK6String7indexOfERKS_j+0x2a>
    return -1;

  const char *theFind = strstr( &_buffer[ fromIndex ], s2._buffer );
    f14c:	c0 81       	ld	r28, Z
    f14e:	d1 81       	ldd	r29, Z+1	; 0x01
    f150:	6d 91       	ld	r22, X+
    f152:	7c 91       	ld	r23, X
    f154:	ce 01       	movw	r24, r28
    f156:	84 0f       	add	r24, r20
    f158:	95 1f       	adc	r25, r21
    f15a:	0e 94 c2 81 	call	0x10384	; 0x10384 <strstr>
    f15e:	9c 01       	movw	r18, r24

  if ( theFind == NULL )
    f160:	00 97       	sbiw	r24, 0x00	; 0
    f162:	19 f4       	brne	.+6      	; 0xf16a <_ZNK6String7indexOfERKS_j+0x30>
    f164:	2f ef       	ldi	r18, 0xFF	; 255
    f166:	3f ef       	ldi	r19, 0xFF	; 255
    f168:	02 c0       	rjmp	.+4      	; 0xf16e <_ZNK6String7indexOfERKS_j+0x34>
    return -1;

  return theFind - _buffer; // pointer subtraction
    f16a:	2c 1b       	sub	r18, r28
    f16c:	3d 0b       	sbc	r19, r29
}
    f16e:	c9 01       	movw	r24, r18
    f170:	df 91       	pop	r29
    f172:	cf 91       	pop	r28
    f174:	08 95       	ret

0000f176 <_ZNK6String7indexOfERKS_>:
  return temp - _buffer;
}

int String::indexOf( const String &s2 ) const
{
  return indexOf( s2, 0 );
    f176:	40 e0       	ldi	r20, 0x00	; 0
    f178:	50 e0       	ldi	r21, 0x00	; 0
    f17a:	0e 94 9d 78 	call	0xf13a	; 0xf13a <_ZNK6String7indexOfERKS_j>
}
    f17e:	08 95       	ret

0000f180 <_ZN6StringpLERKS_>:
//  _buffer[ _length++ ] = aChar;
//  _buffer[ _length ] = '\0';
//  return *this;
//}

const String & String::operator+=( const String &other )
    f180:	0f 93       	push	r16
    f182:	1f 93       	push	r17
    f184:	cf 93       	push	r28
    f186:	df 93       	push	r29
    f188:	ec 01       	movw	r28, r24
    f18a:	8b 01       	movw	r16, r22
{
  _length += other._length;
    f18c:	fb 01       	movw	r30, r22
    f18e:	64 81       	ldd	r22, Z+4	; 0x04
    f190:	75 81       	ldd	r23, Z+5	; 0x05
    f192:	8c 81       	ldd	r24, Y+4	; 0x04
    f194:	9d 81       	ldd	r25, Y+5	; 0x05
    f196:	68 0f       	add	r22, r24
    f198:	79 1f       	adc	r23, r25
    f19a:	7d 83       	std	Y+5, r23	; 0x05
    f19c:	6c 83       	std	Y+4, r22	; 0x04
  if ( _length > _capacity )
    f19e:	8a 81       	ldd	r24, Y+2	; 0x02
    f1a0:	9b 81       	ldd	r25, Y+3	; 0x03
    f1a2:	86 17       	cp	r24, r22
    f1a4:	97 07       	cpc	r25, r23
    f1a6:	b8 f4       	brcc	.+46     	; 0xf1d6 <_ZN6StringpLERKS_+0x56>
  {
    char *temp = (char *)realloc(_buffer, _length + 1);
    f1a8:	6f 5f       	subi	r22, 0xFF	; 255
    f1aa:	7f 4f       	sbci	r23, 0xFF	; 255
    f1ac:	88 81       	ld	r24, Y
    f1ae:	99 81       	ldd	r25, Y+1	; 0x01
    f1b0:	0e 94 cb 80 	call	0x10196	; 0x10196 <realloc>
    f1b4:	4c 81       	ldd	r20, Y+4	; 0x04
    f1b6:	5d 81       	ldd	r21, Y+5	; 0x05
    if ( temp != NULL ) {
    f1b8:	00 97       	sbiw	r24, 0x00	; 0
    f1ba:	29 f0       	breq	.+10     	; 0xf1c6 <_ZN6StringpLERKS_+0x46>
      _buffer = temp;
    f1bc:	99 83       	std	Y+1, r25	; 0x01
    f1be:	88 83       	st	Y, r24
      _capacity = _length;
    f1c0:	5b 83       	std	Y+3, r21	; 0x03
    f1c2:	4a 83       	std	Y+2, r20	; 0x02
    f1c4:	08 c0       	rjmp	.+16     	; 0xf1d6 <_ZN6StringpLERKS_+0x56>
    } else {
      _length -= other._length;
    f1c6:	f8 01       	movw	r30, r16
    f1c8:	84 81       	ldd	r24, Z+4	; 0x04
    f1ca:	95 81       	ldd	r25, Z+5	; 0x05
    f1cc:	48 1b       	sub	r20, r24
    f1ce:	59 0b       	sbc	r21, r25
    f1d0:	5d 83       	std	Y+5, r21	; 0x05
    f1d2:	4c 83       	std	Y+4, r20	; 0x04
    f1d4:	07 c0       	rjmp	.+14     	; 0xf1e4 <_ZN6StringpLERKS_+0x64>
      return *this;
    }
  }
  strcat( _buffer, other._buffer );
    f1d6:	f8 01       	movw	r30, r16
    f1d8:	60 81       	ld	r22, Z
    f1da:	71 81       	ldd	r23, Z+1	; 0x01
    f1dc:	88 81       	ld	r24, Y
    f1de:	99 81       	ldd	r25, Y+1	; 0x01
    f1e0:	0e 94 b0 81 	call	0x10360	; 0x10360 <strcat>
  return *this;
}
    f1e4:	ce 01       	movw	r24, r28
    f1e6:	df 91       	pop	r29
    f1e8:	cf 91       	pop	r28
    f1ea:	1f 91       	pop	r17
    f1ec:	0f 91       	pop	r16
    f1ee:	08 95       	ret

0000f1f0 <_ZN6String9getBufferEj>:
long String::toInt() {
  return atol(_buffer);
}

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
    f1f0:	cf 93       	push	r28
    f1f2:	df 93       	push	r29
    f1f4:	ec 01       	movw	r28, r24
    f1f6:	cb 01       	movw	r24, r22
{
  _capacity = maxStrLen;
    f1f8:	7b 83       	std	Y+3, r23	; 0x03
    f1fa:	6a 83       	std	Y+2, r22	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    f1fc:	01 96       	adiw	r24, 0x01	; 1
    f1fe:	0e 94 5b 7f 	call	0xfeb6	; 0xfeb6 <malloc>
    f202:	99 83       	std	Y+1, r25	; 0x01
    f204:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    f206:	00 97       	sbiw	r24, 0x00	; 0
    f208:	21 f4       	brne	.+8      	; 0xf212 <_ZN6String9getBufferEj+0x22>
    f20a:	1b 82       	std	Y+3, r1	; 0x03
    f20c:	1a 82       	std	Y+2, r1	; 0x02
    f20e:	1d 82       	std	Y+5, r1	; 0x05
    f210:	1c 82       	std	Y+4, r1	; 0x04
}
    f212:	df 91       	pop	r29
    f214:	cf 91       	pop	r28
    f216:	08 95       	ret

0000f218 <_ZN6StringaSERKS_>:
const String & String::concat( const String &s2 )
{
  return (*this) += s2;
}

const String & String::operator=( const String &rhs )
    f218:	0f 93       	push	r16
    f21a:	1f 93       	push	r17
    f21c:	cf 93       	push	r28
    f21e:	df 93       	push	r29
    f220:	ec 01       	movw	r28, r24
    f222:	8b 01       	movw	r16, r22
{
  if ( this == &rhs )
    f224:	86 17       	cp	r24, r22
    f226:	97 07       	cpc	r25, r23
    f228:	09 f1       	breq	.+66     	; 0xf26c <_ZN6StringaSERKS_+0x54>
    return *this;

  if ( rhs._length > _length )
    f22a:	fb 01       	movw	r30, r22
    f22c:	24 81       	ldd	r18, Z+4	; 0x04
    f22e:	35 81       	ldd	r19, Z+5	; 0x05
    f230:	8c 81       	ldd	r24, Y+4	; 0x04
    f232:	9d 81       	ldd	r25, Y+5	; 0x05
    f234:	82 17       	cp	r24, r18
    f236:	93 07       	cpc	r25, r19
    f238:	50 f4       	brcc	.+20     	; 0xf24e <_ZN6StringaSERKS_+0x36>
  {
    free(_buffer);
    f23a:	88 81       	ld	r24, Y
    f23c:	99 81       	ldd	r25, Y+1	; 0x01
    f23e:	0e 94 08 80 	call	0x10010	; 0x10010 <free>
    getBuffer( rhs._length );
    f242:	f8 01       	movw	r30, r16
    f244:	64 81       	ldd	r22, Z+4	; 0x04
    f246:	75 81       	ldd	r23, Z+5	; 0x05
    f248:	ce 01       	movw	r24, r28
    f24a:	0e 94 f8 78 	call	0xf1f0	; 0xf1f0 <_ZN6String9getBufferEj>
  }
  
  if ( _buffer != NULL ) {
    f24e:	28 81       	ld	r18, Y
    f250:	39 81       	ldd	r19, Y+1	; 0x01
    f252:	21 15       	cp	r18, r1
    f254:	31 05       	cpc	r19, r1
    f256:	51 f0       	breq	.+20     	; 0xf26c <_ZN6StringaSERKS_+0x54>
    _length = rhs._length;
    f258:	f8 01       	movw	r30, r16
    f25a:	84 81       	ldd	r24, Z+4	; 0x04
    f25c:	95 81       	ldd	r25, Z+5	; 0x05
    f25e:	9d 83       	std	Y+5, r25	; 0x05
    f260:	8c 83       	std	Y+4, r24	; 0x04
    strcpy( _buffer, rhs._buffer );
    f262:	60 81       	ld	r22, Z
    f264:	71 81       	ldd	r23, Z+1	; 0x01
    f266:	c9 01       	movw	r24, r18
    f268:	0e 94 bb 81 	call	0x10376	; 0x10376 <strcpy>
  }
  return *this;
}
    f26c:	ce 01       	movw	r24, r28
    f26e:	df 91       	pop	r29
    f270:	cf 91       	pop	r28
    f272:	1f 91       	pop	r17
    f274:	0f 91       	pop	r16
    f276:	08 95       	ret

0000f278 <_ZN6StringC1ERKS_>:
  getBuffer( _length = strlen( value ) );
  if ( _buffer != NULL )
    strcpy( _buffer, value ); 
}

String::String( const String &value )
    f278:	0f 93       	push	r16
    f27a:	1f 93       	push	r17
    f27c:	cf 93       	push	r28
    f27e:	df 93       	push	r29
    f280:	8c 01       	movw	r16, r24
    f282:	eb 01       	movw	r28, r22
{
  getBuffer( _length = value._length );
    f284:	6c 81       	ldd	r22, Y+4	; 0x04
    f286:	7d 81       	ldd	r23, Y+5	; 0x05
    f288:	fc 01       	movw	r30, r24
    f28a:	75 83       	std	Z+5, r23	; 0x05
    f28c:	64 83       	std	Z+4, r22	; 0x04
    f28e:	0e 94 f8 78 	call	0xf1f0	; 0xf1f0 <_ZN6String9getBufferEj>
  if ( _buffer != NULL )
    f292:	f8 01       	movw	r30, r16
    f294:	80 81       	ld	r24, Z
    f296:	91 81       	ldd	r25, Z+1	; 0x01
    f298:	00 97       	sbiw	r24, 0x00	; 0
    f29a:	21 f0       	breq	.+8      	; 0xf2a4 <_ZN6StringC1ERKS_+0x2c>
    strcpy( _buffer, value._buffer );
    f29c:	68 81       	ld	r22, Y
    f29e:	79 81       	ldd	r23, Y+1	; 0x01
    f2a0:	0e 94 bb 81 	call	0x10376	; 0x10376 <strcpy>
}
    f2a4:	df 91       	pop	r29
    f2a6:	cf 91       	pop	r28
    f2a8:	1f 91       	pop	r17
    f2aa:	0f 91       	pop	r16
    f2ac:	08 95       	ret

0000f2ae <_ZN6StringC1EPKc>:
#include "WString.h"
#include "WCharacter.h"
#include "Wiring.h"
#include <string.h>

String::String( const char *value )
    f2ae:	0f 93       	push	r16
    f2b0:	1f 93       	push	r17
    f2b2:	cf 93       	push	r28
    f2b4:	df 93       	push	r29
    f2b6:	8c 01       	movw	r16, r24
    f2b8:	eb 01       	movw	r28, r22
{
  if ( value == NULL )
    f2ba:	61 15       	cp	r22, r1
    f2bc:	71 05       	cpc	r23, r1
    f2be:	11 f4       	brne	.+4      	; 0xf2c4 <_ZN6StringC1EPKc+0x16>
    f2c0:	c1 ef       	ldi	r28, 0xF1	; 241
    f2c2:	d3 e0       	ldi	r29, 0x03	; 3
    value = "";
  getBuffer( _length = strlen( value ) );
    f2c4:	fe 01       	movw	r30, r28
    f2c6:	01 90       	ld	r0, Z+
    f2c8:	00 20       	and	r0, r0
    f2ca:	e9 f7       	brne	.-6      	; 0xf2c6 <_ZN6StringC1EPKc+0x18>
    f2cc:	31 97       	sbiw	r30, 0x01	; 1
    f2ce:	ec 1b       	sub	r30, r28
    f2d0:	fd 0b       	sbc	r31, r29
    f2d2:	d8 01       	movw	r26, r16
    f2d4:	15 96       	adiw	r26, 0x05	; 5
    f2d6:	fc 93       	st	X, r31
    f2d8:	ee 93       	st	-X, r30
    f2da:	14 97       	sbiw	r26, 0x04	; 4
    f2dc:	c8 01       	movw	r24, r16
    f2de:	bf 01       	movw	r22, r30
    f2e0:	0e 94 f8 78 	call	0xf1f0	; 0xf1f0 <_ZN6String9getBufferEj>
  if ( _buffer != NULL )
    f2e4:	f8 01       	movw	r30, r16
    f2e6:	80 81       	ld	r24, Z
    f2e8:	91 81       	ldd	r25, Z+1	; 0x01
    f2ea:	00 97       	sbiw	r24, 0x00	; 0
    f2ec:	19 f0       	breq	.+6      	; 0xf2f4 <_ZN6StringC1EPKc+0x46>
    strcpy( _buffer, value ); 
    f2ee:	be 01       	movw	r22, r28
    f2f0:	0e 94 bb 81 	call	0x10376	; 0x10376 <strcpy>
}
    f2f4:	df 91       	pop	r29
    f2f6:	cf 91       	pop	r28
    f2f8:	1f 91       	pop	r17
    f2fa:	0f 91       	pop	r16
    f2fc:	08 95       	ret

0000f2fe <_ZN6StringC1Eii>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const int value, const int base )
    f2fe:	ef 92       	push	r14
    f300:	ff 92       	push	r15
    f302:	0f 93       	push	r16
    f304:	1f 93       	push	r17
    f306:	df 93       	push	r29
    f308:	cf 93       	push	r28
    f30a:	cd b7       	in	r28, 0x3d	; 61
    f30c:	de b7       	in	r29, 0x3e	; 62
    f30e:	a1 97       	sbiw	r28, 0x21	; 33
    f310:	0f b6       	in	r0, 0x3f	; 63
    f312:	f8 94       	cli
    f314:	de bf       	out	0x3e, r29	; 62
    f316:	0f be       	out	0x3f, r0	; 63
    f318:	cd bf       	out	0x3d, r28	; 61
    f31a:	8c 01       	movw	r16, r24
    f31c:	cb 01       	movw	r24, r22
{
  char buf[33];   
  itoa((signed long)value, buf, base);
    f31e:	7e 01       	movw	r14, r28
    f320:	08 94       	sec
    f322:	e1 1c       	adc	r14, r1
    f324:	f1 1c       	adc	r15, r1
    f326:	b7 01       	movw	r22, r14
    f328:	0e 94 dc 81 	call	0x103b8	; 0x103b8 <itoa>
  getBuffer( _length = strlen(buf) );
    f32c:	f7 01       	movw	r30, r14
    f32e:	01 90       	ld	r0, Z+
    f330:	00 20       	and	r0, r0
    f332:	e9 f7       	brne	.-6      	; 0xf32e <_ZN6StringC1Eii+0x30>
    f334:	31 97       	sbiw	r30, 0x01	; 1
    f336:	ee 19       	sub	r30, r14
    f338:	ff 09       	sbc	r31, r15
    f33a:	d8 01       	movw	r26, r16
    f33c:	15 96       	adiw	r26, 0x05	; 5
    f33e:	fc 93       	st	X, r31
    f340:	ee 93       	st	-X, r30
    f342:	14 97       	sbiw	r26, 0x04	; 4
    f344:	c8 01       	movw	r24, r16
    f346:	bf 01       	movw	r22, r30
    f348:	0e 94 f8 78 	call	0xf1f0	; 0xf1f0 <_ZN6String9getBufferEj>
  if ( _buffer != NULL )
    f34c:	f8 01       	movw	r30, r16
    f34e:	80 81       	ld	r24, Z
    f350:	91 81       	ldd	r25, Z+1	; 0x01
    f352:	00 97       	sbiw	r24, 0x00	; 0
    f354:	19 f0       	breq	.+6      	; 0xf35c <_ZN6StringC1Eii+0x5e>
    strcpy( _buffer, buf );
    f356:	b7 01       	movw	r22, r14
    f358:	0e 94 bb 81 	call	0x10376	; 0x10376 <strcpy>
}
    f35c:	a1 96       	adiw	r28, 0x21	; 33
    f35e:	0f b6       	in	r0, 0x3f	; 63
    f360:	f8 94       	cli
    f362:	de bf       	out	0x3e, r29	; 62
    f364:	0f be       	out	0x3f, r0	; 63
    f366:	cd bf       	out	0x3d, r28	; 61
    f368:	cf 91       	pop	r28
    f36a:	df 91       	pop	r29
    f36c:	1f 91       	pop	r17
    f36e:	0f 91       	pop	r16
    f370:	ff 90       	pop	r15
    f372:	ef 90       	pop	r14
    f374:	08 95       	ret

0000f376 <acos>:
    f376:	9f 93       	push	r25
    f378:	9f 77       	andi	r25, 0x7F	; 127
    f37a:	e0 d1       	rcall	.+960    	; 0xf73c <__fp_arccos>
    f37c:	0f 90       	pop	r0
    f37e:	00 20       	and	r0, r0
    f380:	3a f4       	brpl	.+14     	; 0xf390 <acos+0x1a>
    f382:	90 58       	subi	r25, 0x80	; 128
    f384:	a2 ea       	ldi	r26, 0xA2	; 162
    f386:	2a ed       	ldi	r18, 0xDA	; 218
    f388:	3f e0       	ldi	r19, 0x0F	; 15
    f38a:	49 e4       	ldi	r20, 0x49	; 73
    f38c:	50 e4       	ldi	r21, 0x40	; 64
    f38e:	13 d0       	rcall	.+38     	; 0xf3b6 <__addsf3x>
    f390:	78 c2       	rjmp	.+1264   	; 0xf882 <__fp_round>

0000f392 <__subsf3>:
    f392:	50 58       	subi	r21, 0x80	; 128

0000f394 <__addsf3>:
    f394:	bb 27       	eor	r27, r27
    f396:	aa 27       	eor	r26, r26
    f398:	0e d0       	rcall	.+28     	; 0xf3b6 <__addsf3x>
    f39a:	73 c2       	rjmp	.+1254   	; 0xf882 <__fp_round>
    f39c:	3c d2       	rcall	.+1144   	; 0xf816 <__fp_pscA>
    f39e:	30 f0       	brcs	.+12     	; 0xf3ac <__addsf3+0x18>
    f3a0:	41 d2       	rcall	.+1154   	; 0xf824 <__fp_pscB>
    f3a2:	20 f0       	brcs	.+8      	; 0xf3ac <__addsf3+0x18>
    f3a4:	31 f4       	brne	.+12     	; 0xf3b2 <__addsf3+0x1e>
    f3a6:	9f 3f       	cpi	r25, 0xFF	; 255
    f3a8:	11 f4       	brne	.+4      	; 0xf3ae <__addsf3+0x1a>
    f3aa:	1e f4       	brtc	.+6      	; 0xf3b2 <__addsf3+0x1e>
    f3ac:	0c c2       	rjmp	.+1048   	; 0xf7c6 <__fp_nan>
    f3ae:	0e f4       	brtc	.+2      	; 0xf3b2 <__addsf3+0x1e>
    f3b0:	e0 95       	com	r30
    f3b2:	e7 fb       	bst	r30, 7
    f3b4:	02 c2       	rjmp	.+1028   	; 0xf7ba <__fp_inf>

0000f3b6 <__addsf3x>:
    f3b6:	e9 2f       	mov	r30, r25
    f3b8:	86 d2       	rcall	.+1292   	; 0xf8c6 <__fp_split3>
    f3ba:	80 f3       	brcs	.-32     	; 0xf39c <__addsf3+0x8>
    f3bc:	ba 17       	cp	r27, r26
    f3be:	62 07       	cpc	r22, r18
    f3c0:	73 07       	cpc	r23, r19
    f3c2:	84 07       	cpc	r24, r20
    f3c4:	95 07       	cpc	r25, r21
    f3c6:	18 f0       	brcs	.+6      	; 0xf3ce <__addsf3x+0x18>
    f3c8:	71 f4       	brne	.+28     	; 0xf3e6 <__addsf3x+0x30>
    f3ca:	9e f5       	brtc	.+102    	; 0xf432 <__addsf3x+0x7c>
    f3cc:	9e c2       	rjmp	.+1340   	; 0xf90a <__fp_zero>
    f3ce:	0e f4       	brtc	.+2      	; 0xf3d2 <__addsf3x+0x1c>
    f3d0:	e0 95       	com	r30
    f3d2:	0b 2e       	mov	r0, r27
    f3d4:	ba 2f       	mov	r27, r26
    f3d6:	a0 2d       	mov	r26, r0
    f3d8:	0b 01       	movw	r0, r22
    f3da:	b9 01       	movw	r22, r18
    f3dc:	90 01       	movw	r18, r0
    f3de:	0c 01       	movw	r0, r24
    f3e0:	ca 01       	movw	r24, r20
    f3e2:	a0 01       	movw	r20, r0
    f3e4:	11 24       	eor	r1, r1
    f3e6:	ff 27       	eor	r31, r31
    f3e8:	59 1b       	sub	r21, r25
    f3ea:	99 f0       	breq	.+38     	; 0xf412 <__addsf3x+0x5c>
    f3ec:	59 3f       	cpi	r21, 0xF9	; 249
    f3ee:	50 f4       	brcc	.+20     	; 0xf404 <__addsf3x+0x4e>
    f3f0:	50 3e       	cpi	r21, 0xE0	; 224
    f3f2:	68 f1       	brcs	.+90     	; 0xf44e <__addsf3x+0x98>
    f3f4:	1a 16       	cp	r1, r26
    f3f6:	f0 40       	sbci	r31, 0x00	; 0
    f3f8:	a2 2f       	mov	r26, r18
    f3fa:	23 2f       	mov	r18, r19
    f3fc:	34 2f       	mov	r19, r20
    f3fe:	44 27       	eor	r20, r20
    f400:	58 5f       	subi	r21, 0xF8	; 248
    f402:	f3 cf       	rjmp	.-26     	; 0xf3ea <__addsf3x+0x34>
    f404:	46 95       	lsr	r20
    f406:	37 95       	ror	r19
    f408:	27 95       	ror	r18
    f40a:	a7 95       	ror	r26
    f40c:	f0 40       	sbci	r31, 0x00	; 0
    f40e:	53 95       	inc	r21
    f410:	c9 f7       	brne	.-14     	; 0xf404 <__addsf3x+0x4e>
    f412:	7e f4       	brtc	.+30     	; 0xf432 <__addsf3x+0x7c>
    f414:	1f 16       	cp	r1, r31
    f416:	ba 0b       	sbc	r27, r26
    f418:	62 0b       	sbc	r22, r18
    f41a:	73 0b       	sbc	r23, r19
    f41c:	84 0b       	sbc	r24, r20
    f41e:	ba f0       	brmi	.+46     	; 0xf44e <__addsf3x+0x98>
    f420:	91 50       	subi	r25, 0x01	; 1
    f422:	a1 f0       	breq	.+40     	; 0xf44c <__addsf3x+0x96>
    f424:	ff 0f       	add	r31, r31
    f426:	bb 1f       	adc	r27, r27
    f428:	66 1f       	adc	r22, r22
    f42a:	77 1f       	adc	r23, r23
    f42c:	88 1f       	adc	r24, r24
    f42e:	c2 f7       	brpl	.-16     	; 0xf420 <__addsf3x+0x6a>
    f430:	0e c0       	rjmp	.+28     	; 0xf44e <__addsf3x+0x98>
    f432:	ba 0f       	add	r27, r26
    f434:	62 1f       	adc	r22, r18
    f436:	73 1f       	adc	r23, r19
    f438:	84 1f       	adc	r24, r20
    f43a:	48 f4       	brcc	.+18     	; 0xf44e <__addsf3x+0x98>
    f43c:	87 95       	ror	r24
    f43e:	77 95       	ror	r23
    f440:	67 95       	ror	r22
    f442:	b7 95       	ror	r27
    f444:	f7 95       	ror	r31
    f446:	9e 3f       	cpi	r25, 0xFE	; 254
    f448:	08 f0       	brcs	.+2      	; 0xf44c <__addsf3x+0x96>
    f44a:	b3 cf       	rjmp	.-154    	; 0xf3b2 <__addsf3+0x1e>
    f44c:	93 95       	inc	r25
    f44e:	88 0f       	add	r24, r24
    f450:	08 f0       	brcs	.+2      	; 0xf454 <__addsf3x+0x9e>
    f452:	99 27       	eor	r25, r25
    f454:	ee 0f       	add	r30, r30
    f456:	97 95       	ror	r25
    f458:	87 95       	ror	r24
    f45a:	08 95       	ret
    f45c:	dc d1       	rcall	.+952    	; 0xf816 <__fp_pscA>
    f45e:	58 f0       	brcs	.+22     	; 0xf476 <__addsf3x+0xc0>
    f460:	80 e8       	ldi	r24, 0x80	; 128
    f462:	91 e0       	ldi	r25, 0x01	; 1
    f464:	09 f4       	brne	.+2      	; 0xf468 <__addsf3x+0xb2>
    f466:	9e ef       	ldi	r25, 0xFE	; 254
    f468:	dd d1       	rcall	.+954    	; 0xf824 <__fp_pscB>
    f46a:	28 f0       	brcs	.+10     	; 0xf476 <__addsf3x+0xc0>
    f46c:	40 e8       	ldi	r20, 0x80	; 128
    f46e:	51 e0       	ldi	r21, 0x01	; 1
    f470:	59 f4       	brne	.+22     	; 0xf488 <atan2+0xe>
    f472:	5e ef       	ldi	r21, 0xFE	; 254
    f474:	09 c0       	rjmp	.+18     	; 0xf488 <atan2+0xe>
    f476:	a7 c1       	rjmp	.+846    	; 0xf7c6 <__fp_nan>
    f478:	48 c2       	rjmp	.+1168   	; 0xf90a <__fp_zero>

0000f47a <atan2>:
    f47a:	e9 2f       	mov	r30, r25
    f47c:	e0 78       	andi	r30, 0x80	; 128
    f47e:	23 d2       	rcall	.+1094   	; 0xf8c6 <__fp_split3>
    f480:	68 f3       	brcs	.-38     	; 0xf45c <__addsf3x+0xa6>
    f482:	09 2e       	mov	r0, r25
    f484:	05 2a       	or	r0, r21
    f486:	c1 f3       	breq	.-16     	; 0xf478 <__addsf3x+0xc2>
    f488:	26 17       	cp	r18, r22
    f48a:	37 07       	cpc	r19, r23
    f48c:	48 07       	cpc	r20, r24
    f48e:	59 07       	cpc	r21, r25
    f490:	38 f0       	brcs	.+14     	; 0xf4a0 <atan2+0x26>
    f492:	0e 2e       	mov	r0, r30
    f494:	07 f8       	bld	r0, 7
    f496:	e0 25       	eor	r30, r0
    f498:	69 f0       	breq	.+26     	; 0xf4b4 <atan2+0x3a>
    f49a:	e0 25       	eor	r30, r0
    f49c:	e0 64       	ori	r30, 0x40	; 64
    f49e:	0a c0       	rjmp	.+20     	; 0xf4b4 <atan2+0x3a>
    f4a0:	ef 63       	ori	r30, 0x3F	; 63
    f4a2:	07 f8       	bld	r0, 7
    f4a4:	00 94       	com	r0
    f4a6:	07 fa       	bst	r0, 7
    f4a8:	db 01       	movw	r26, r22
    f4aa:	b9 01       	movw	r22, r18
    f4ac:	9d 01       	movw	r18, r26
    f4ae:	dc 01       	movw	r26, r24
    f4b0:	ca 01       	movw	r24, r20
    f4b2:	ad 01       	movw	r20, r26
    f4b4:	ef 93       	push	r30
    f4b6:	4a d0       	rcall	.+148    	; 0xf54c <__divsf3_pse>
    f4b8:	e4 d1       	rcall	.+968    	; 0xf882 <__fp_round>
    f4ba:	0a d0       	rcall	.+20     	; 0xf4d0 <atan>
    f4bc:	5f 91       	pop	r21
    f4be:	55 23       	and	r21, r21
    f4c0:	31 f0       	breq	.+12     	; 0xf4ce <atan2+0x54>
    f4c2:	2b ed       	ldi	r18, 0xDB	; 219
    f4c4:	3f e0       	ldi	r19, 0x0F	; 15
    f4c6:	49 e4       	ldi	r20, 0x49	; 73
    f4c8:	50 fd       	sbrc	r21, 0
    f4ca:	49 ec       	ldi	r20, 0xC9	; 201
    f4cc:	63 cf       	rjmp	.-314    	; 0xf394 <__addsf3>
    f4ce:	08 95       	ret

0000f4d0 <atan>:
    f4d0:	df 93       	push	r29
    f4d2:	dd 27       	eor	r29, r29
    f4d4:	b9 2f       	mov	r27, r25
    f4d6:	bf 77       	andi	r27, 0x7F	; 127
    f4d8:	40 e8       	ldi	r20, 0x80	; 128
    f4da:	5f e3       	ldi	r21, 0x3F	; 63
    f4dc:	16 16       	cp	r1, r22
    f4de:	17 06       	cpc	r1, r23
    f4e0:	48 07       	cpc	r20, r24
    f4e2:	5b 07       	cpc	r21, r27
    f4e4:	10 f4       	brcc	.+4      	; 0xf4ea <atan+0x1a>
    f4e6:	d9 2f       	mov	r29, r25
    f4e8:	7c d2       	rcall	.+1272   	; 0xf9e2 <inverse>
    f4ea:	9f 93       	push	r25
    f4ec:	8f 93       	push	r24
    f4ee:	7f 93       	push	r23
    f4f0:	6f 93       	push	r22
    f4f2:	23 d4       	rcall	.+2118   	; 0xfd3a <square>
    f4f4:	ec e1       	ldi	r30, 0x1C	; 28
    f4f6:	f3 e0       	ldi	r31, 0x03	; 3
    f4f8:	69 d1       	rcall	.+722    	; 0xf7cc <__fp_powser>
    f4fa:	c3 d1       	rcall	.+902    	; 0xf882 <__fp_round>
    f4fc:	2f 91       	pop	r18
    f4fe:	3f 91       	pop	r19
    f500:	4f 91       	pop	r20
    f502:	5f 91       	pop	r21
    f504:	2f d3       	rcall	.+1630   	; 0xfb64 <__mulsf3x>
    f506:	dd 23       	and	r29, r29
    f508:	49 f0       	breq	.+18     	; 0xf51c <atan+0x4c>
    f50a:	90 58       	subi	r25, 0x80	; 128
    f50c:	a2 ea       	ldi	r26, 0xA2	; 162
    f50e:	2a ed       	ldi	r18, 0xDA	; 218
    f510:	3f e0       	ldi	r19, 0x0F	; 15
    f512:	49 ec       	ldi	r20, 0xC9	; 201
    f514:	5f e3       	ldi	r21, 0x3F	; 63
    f516:	d0 78       	andi	r29, 0x80	; 128
    f518:	5d 27       	eor	r21, r29
    f51a:	4d df       	rcall	.-358    	; 0xf3b6 <__addsf3x>
    f51c:	df 91       	pop	r29
    f51e:	b1 c1       	rjmp	.+866    	; 0xf882 <__fp_round>

0000f520 <__cmpsf2>:
    f520:	28 d1       	rcall	.+592    	; 0xf772 <__fp_cmp>
    f522:	08 f4       	brcc	.+2      	; 0xf526 <__cmpsf2+0x6>
    f524:	81 e0       	ldi	r24, 0x01	; 1
    f526:	08 95       	ret

0000f528 <cos>:
    f528:	85 d1       	rcall	.+778    	; 0xf834 <__fp_rempio2>
    f52a:	e3 95       	inc	r30
    f52c:	bb c1       	rjmp	.+886    	; 0xf8a4 <__fp_sinus>

0000f52e <__divsf3>:
    f52e:	0c d0       	rcall	.+24     	; 0xf548 <__divsf3x>
    f530:	a8 c1       	rjmp	.+848    	; 0xf882 <__fp_round>
    f532:	78 d1       	rcall	.+752    	; 0xf824 <__fp_pscB>
    f534:	40 f0       	brcs	.+16     	; 0xf546 <__divsf3+0x18>
    f536:	6f d1       	rcall	.+734    	; 0xf816 <__fp_pscA>
    f538:	30 f0       	brcs	.+12     	; 0xf546 <__divsf3+0x18>
    f53a:	21 f4       	brne	.+8      	; 0xf544 <__divsf3+0x16>
    f53c:	5f 3f       	cpi	r21, 0xFF	; 255
    f53e:	19 f0       	breq	.+6      	; 0xf546 <__divsf3+0x18>
    f540:	3c c1       	rjmp	.+632    	; 0xf7ba <__fp_inf>
    f542:	51 11       	cpse	r21, r1
    f544:	e3 c1       	rjmp	.+966    	; 0xf90c <__fp_szero>
    f546:	3f c1       	rjmp	.+638    	; 0xf7c6 <__fp_nan>

0000f548 <__divsf3x>:
    f548:	be d1       	rcall	.+892    	; 0xf8c6 <__fp_split3>
    f54a:	98 f3       	brcs	.-26     	; 0xf532 <__divsf3+0x4>

0000f54c <__divsf3_pse>:
    f54c:	99 23       	and	r25, r25
    f54e:	c9 f3       	breq	.-14     	; 0xf542 <__divsf3+0x14>
    f550:	55 23       	and	r21, r21
    f552:	b1 f3       	breq	.-20     	; 0xf540 <__divsf3+0x12>
    f554:	95 1b       	sub	r25, r21
    f556:	55 0b       	sbc	r21, r21
    f558:	bb 27       	eor	r27, r27
    f55a:	aa 27       	eor	r26, r26
    f55c:	62 17       	cp	r22, r18
    f55e:	73 07       	cpc	r23, r19
    f560:	84 07       	cpc	r24, r20
    f562:	38 f0       	brcs	.+14     	; 0xf572 <__divsf3_pse+0x26>
    f564:	9f 5f       	subi	r25, 0xFF	; 255
    f566:	5f 4f       	sbci	r21, 0xFF	; 255
    f568:	22 0f       	add	r18, r18
    f56a:	33 1f       	adc	r19, r19
    f56c:	44 1f       	adc	r20, r20
    f56e:	aa 1f       	adc	r26, r26
    f570:	a9 f3       	breq	.-22     	; 0xf55c <__divsf3_pse+0x10>
    f572:	33 d0       	rcall	.+102    	; 0xf5da <__divsf3_pse+0x8e>
    f574:	0e 2e       	mov	r0, r30
    f576:	3a f0       	brmi	.+14     	; 0xf586 <__divsf3_pse+0x3a>
    f578:	e0 e8       	ldi	r30, 0x80	; 128
    f57a:	30 d0       	rcall	.+96     	; 0xf5dc <__divsf3_pse+0x90>
    f57c:	91 50       	subi	r25, 0x01	; 1
    f57e:	50 40       	sbci	r21, 0x00	; 0
    f580:	e6 95       	lsr	r30
    f582:	00 1c       	adc	r0, r0
    f584:	ca f7       	brpl	.-14     	; 0xf578 <__divsf3_pse+0x2c>
    f586:	29 d0       	rcall	.+82     	; 0xf5da <__divsf3_pse+0x8e>
    f588:	fe 2f       	mov	r31, r30
    f58a:	27 d0       	rcall	.+78     	; 0xf5da <__divsf3_pse+0x8e>
    f58c:	66 0f       	add	r22, r22
    f58e:	77 1f       	adc	r23, r23
    f590:	88 1f       	adc	r24, r24
    f592:	bb 1f       	adc	r27, r27
    f594:	26 17       	cp	r18, r22
    f596:	37 07       	cpc	r19, r23
    f598:	48 07       	cpc	r20, r24
    f59a:	ab 07       	cpc	r26, r27
    f59c:	b0 e8       	ldi	r27, 0x80	; 128
    f59e:	09 f0       	breq	.+2      	; 0xf5a2 <__divsf3_pse+0x56>
    f5a0:	bb 0b       	sbc	r27, r27
    f5a2:	80 2d       	mov	r24, r0
    f5a4:	bf 01       	movw	r22, r30
    f5a6:	ff 27       	eor	r31, r31
    f5a8:	93 58       	subi	r25, 0x83	; 131
    f5aa:	5f 4f       	sbci	r21, 0xFF	; 255
    f5ac:	2a f0       	brmi	.+10     	; 0xf5b8 <__divsf3_pse+0x6c>
    f5ae:	9e 3f       	cpi	r25, 0xFE	; 254
    f5b0:	51 05       	cpc	r21, r1
    f5b2:	68 f0       	brcs	.+26     	; 0xf5ce <__divsf3_pse+0x82>
    f5b4:	02 c1       	rjmp	.+516    	; 0xf7ba <__fp_inf>
    f5b6:	aa c1       	rjmp	.+852    	; 0xf90c <__fp_szero>
    f5b8:	5f 3f       	cpi	r21, 0xFF	; 255
    f5ba:	ec f3       	brlt	.-6      	; 0xf5b6 <__divsf3_pse+0x6a>
    f5bc:	98 3e       	cpi	r25, 0xE8	; 232
    f5be:	dc f3       	brlt	.-10     	; 0xf5b6 <__divsf3_pse+0x6a>
    f5c0:	86 95       	lsr	r24
    f5c2:	77 95       	ror	r23
    f5c4:	67 95       	ror	r22
    f5c6:	b7 95       	ror	r27
    f5c8:	f7 95       	ror	r31
    f5ca:	9f 5f       	subi	r25, 0xFF	; 255
    f5cc:	c9 f7       	brne	.-14     	; 0xf5c0 <__divsf3_pse+0x74>
    f5ce:	88 0f       	add	r24, r24
    f5d0:	91 1d       	adc	r25, r1
    f5d2:	96 95       	lsr	r25
    f5d4:	87 95       	ror	r24
    f5d6:	97 f9       	bld	r25, 7
    f5d8:	08 95       	ret
    f5da:	e1 e0       	ldi	r30, 0x01	; 1
    f5dc:	66 0f       	add	r22, r22
    f5de:	77 1f       	adc	r23, r23
    f5e0:	88 1f       	adc	r24, r24
    f5e2:	bb 1f       	adc	r27, r27
    f5e4:	62 17       	cp	r22, r18
    f5e6:	73 07       	cpc	r23, r19
    f5e8:	84 07       	cpc	r24, r20
    f5ea:	ba 07       	cpc	r27, r26
    f5ec:	20 f0       	brcs	.+8      	; 0xf5f6 <__divsf3_pse+0xaa>
    f5ee:	62 1b       	sub	r22, r18
    f5f0:	73 0b       	sbc	r23, r19
    f5f2:	84 0b       	sbc	r24, r20
    f5f4:	ba 0b       	sbc	r27, r26
    f5f6:	ee 1f       	adc	r30, r30
    f5f8:	88 f7       	brcc	.-30     	; 0xf5dc <__divsf3_pse+0x90>
    f5fa:	e0 95       	com	r30
    f5fc:	08 95       	ret
    f5fe:	19 f4       	brne	.+6      	; 0xf606 <__divsf3_pse+0xba>
    f600:	0e f0       	brts	.+2      	; 0xf604 <__divsf3_pse+0xb8>
    f602:	db c0       	rjmp	.+438    	; 0xf7ba <__fp_inf>
    f604:	82 c1       	rjmp	.+772    	; 0xf90a <__fp_zero>
    f606:	df c0       	rjmp	.+446    	; 0xf7c6 <__fp_nan>

0000f608 <exp>:
    f608:	66 d1       	rcall	.+716    	; 0xf8d6 <__fp_splitA>
    f60a:	c8 f3       	brcs	.-14     	; 0xf5fe <__divsf3_pse+0xb2>
    f60c:	96 38       	cpi	r25, 0x86	; 134
    f60e:	c0 f7       	brcc	.-16     	; 0xf600 <__divsf3_pse+0xb4>
    f610:	07 f8       	bld	r0, 7
    f612:	0f 92       	push	r0
    f614:	e8 94       	clt
    f616:	2b e3       	ldi	r18, 0x3B	; 59
    f618:	3a ea       	ldi	r19, 0xAA	; 170
    f61a:	48 eb       	ldi	r20, 0xB8	; 184
    f61c:	5f e7       	ldi	r21, 0x7F	; 127
    f61e:	a4 d2       	rcall	.+1352   	; 0xfb68 <__mulsf3_pse>
    f620:	0f 92       	push	r0
    f622:	0f 92       	push	r0
    f624:	0f 92       	push	r0
    f626:	4d b7       	in	r20, 0x3d	; 61
    f628:	5e b7       	in	r21, 0x3e	; 62
    f62a:	0f 92       	push	r0
    f62c:	5c d2       	rcall	.+1208   	; 0xfae6 <modf>
    f62e:	e9 e4       	ldi	r30, 0x49	; 73
    f630:	f3 e0       	ldi	r31, 0x03	; 3
    f632:	cc d0       	rcall	.+408    	; 0xf7cc <__fp_powser>
    f634:	4f 91       	pop	r20
    f636:	5f 91       	pop	r21
    f638:	ef 91       	pop	r30
    f63a:	ff 91       	pop	r31
    f63c:	e5 95       	asr	r30
    f63e:	ee 1f       	adc	r30, r30
    f640:	ff 1f       	adc	r31, r31
    f642:	49 f0       	breq	.+18     	; 0xf656 <exp+0x4e>
    f644:	fe 57       	subi	r31, 0x7E	; 126
    f646:	e0 68       	ori	r30, 0x80	; 128
    f648:	44 27       	eor	r20, r20
    f64a:	ee 0f       	add	r30, r30
    f64c:	44 1f       	adc	r20, r20
    f64e:	fa 95       	dec	r31
    f650:	e1 f7       	brne	.-8      	; 0xf64a <exp+0x42>
    f652:	41 95       	neg	r20
    f654:	55 0b       	sbc	r21, r21
    f656:	ce d1       	rcall	.+924    	; 0xf9f4 <ldexp>
    f658:	0f 90       	pop	r0
    f65a:	07 fe       	sbrs	r0, 7
    f65c:	c2 c1       	rjmp	.+900    	; 0xf9e2 <inverse>
    f65e:	08 95       	ret

0000f660 <__fixsfsi>:
    f660:	04 d0       	rcall	.+8      	; 0xf66a <__fixunssfsi>
    f662:	68 94       	set
    f664:	b1 11       	cpse	r27, r1
    f666:	52 c1       	rjmp	.+676    	; 0xf90c <__fp_szero>
    f668:	08 95       	ret

0000f66a <__fixunssfsi>:
    f66a:	35 d1       	rcall	.+618    	; 0xf8d6 <__fp_splitA>
    f66c:	88 f0       	brcs	.+34     	; 0xf690 <__fixunssfsi+0x26>
    f66e:	9f 57       	subi	r25, 0x7F	; 127
    f670:	90 f0       	brcs	.+36     	; 0xf696 <__fixunssfsi+0x2c>
    f672:	b9 2f       	mov	r27, r25
    f674:	99 27       	eor	r25, r25
    f676:	b7 51       	subi	r27, 0x17	; 23
    f678:	a0 f0       	brcs	.+40     	; 0xf6a2 <__fixunssfsi+0x38>
    f67a:	d1 f0       	breq	.+52     	; 0xf6b0 <__fixunssfsi+0x46>
    f67c:	66 0f       	add	r22, r22
    f67e:	77 1f       	adc	r23, r23
    f680:	88 1f       	adc	r24, r24
    f682:	99 1f       	adc	r25, r25
    f684:	1a f0       	brmi	.+6      	; 0xf68c <__fixunssfsi+0x22>
    f686:	ba 95       	dec	r27
    f688:	c9 f7       	brne	.-14     	; 0xf67c <__fixunssfsi+0x12>
    f68a:	12 c0       	rjmp	.+36     	; 0xf6b0 <__fixunssfsi+0x46>
    f68c:	b1 30       	cpi	r27, 0x01	; 1
    f68e:	81 f0       	breq	.+32     	; 0xf6b0 <__fixunssfsi+0x46>
    f690:	3c d1       	rcall	.+632    	; 0xf90a <__fp_zero>
    f692:	b1 e0       	ldi	r27, 0x01	; 1
    f694:	08 95       	ret
    f696:	39 c1       	rjmp	.+626    	; 0xf90a <__fp_zero>
    f698:	67 2f       	mov	r22, r23
    f69a:	78 2f       	mov	r23, r24
    f69c:	88 27       	eor	r24, r24
    f69e:	b8 5f       	subi	r27, 0xF8	; 248
    f6a0:	39 f0       	breq	.+14     	; 0xf6b0 <__fixunssfsi+0x46>
    f6a2:	b9 3f       	cpi	r27, 0xF9	; 249
    f6a4:	cc f3       	brlt	.-14     	; 0xf698 <__fixunssfsi+0x2e>
    f6a6:	86 95       	lsr	r24
    f6a8:	77 95       	ror	r23
    f6aa:	67 95       	ror	r22
    f6ac:	b3 95       	inc	r27
    f6ae:	d9 f7       	brne	.-10     	; 0xf6a6 <__fixunssfsi+0x3c>
    f6b0:	3e f4       	brtc	.+14     	; 0xf6c0 <__fixunssfsi+0x56>
    f6b2:	90 95       	com	r25
    f6b4:	80 95       	com	r24
    f6b6:	70 95       	com	r23
    f6b8:	61 95       	neg	r22
    f6ba:	7f 4f       	sbci	r23, 0xFF	; 255
    f6bc:	8f 4f       	sbci	r24, 0xFF	; 255
    f6be:	9f 4f       	sbci	r25, 0xFF	; 255
    f6c0:	08 95       	ret

0000f6c2 <__floatunsisf>:
    f6c2:	e8 94       	clt
    f6c4:	09 c0       	rjmp	.+18     	; 0xf6d8 <__floatsisf+0x12>

0000f6c6 <__floatsisf>:
    f6c6:	97 fb       	bst	r25, 7
    f6c8:	3e f4       	brtc	.+14     	; 0xf6d8 <__floatsisf+0x12>
    f6ca:	90 95       	com	r25
    f6cc:	80 95       	com	r24
    f6ce:	70 95       	com	r23
    f6d0:	61 95       	neg	r22
    f6d2:	7f 4f       	sbci	r23, 0xFF	; 255
    f6d4:	8f 4f       	sbci	r24, 0xFF	; 255
    f6d6:	9f 4f       	sbci	r25, 0xFF	; 255
    f6d8:	99 23       	and	r25, r25
    f6da:	a9 f0       	breq	.+42     	; 0xf706 <__floatsisf+0x40>
    f6dc:	f9 2f       	mov	r31, r25
    f6de:	96 e9       	ldi	r25, 0x96	; 150
    f6e0:	bb 27       	eor	r27, r27
    f6e2:	93 95       	inc	r25
    f6e4:	f6 95       	lsr	r31
    f6e6:	87 95       	ror	r24
    f6e8:	77 95       	ror	r23
    f6ea:	67 95       	ror	r22
    f6ec:	b7 95       	ror	r27
    f6ee:	f1 11       	cpse	r31, r1
    f6f0:	f8 cf       	rjmp	.-16     	; 0xf6e2 <__floatsisf+0x1c>
    f6f2:	fa f4       	brpl	.+62     	; 0xf732 <__floatsisf+0x6c>
    f6f4:	bb 0f       	add	r27, r27
    f6f6:	11 f4       	brne	.+4      	; 0xf6fc <__floatsisf+0x36>
    f6f8:	60 ff       	sbrs	r22, 0
    f6fa:	1b c0       	rjmp	.+54     	; 0xf732 <__floatsisf+0x6c>
    f6fc:	6f 5f       	subi	r22, 0xFF	; 255
    f6fe:	7f 4f       	sbci	r23, 0xFF	; 255
    f700:	8f 4f       	sbci	r24, 0xFF	; 255
    f702:	9f 4f       	sbci	r25, 0xFF	; 255
    f704:	16 c0       	rjmp	.+44     	; 0xf732 <__floatsisf+0x6c>
    f706:	88 23       	and	r24, r24
    f708:	11 f0       	breq	.+4      	; 0xf70e <__floatsisf+0x48>
    f70a:	96 e9       	ldi	r25, 0x96	; 150
    f70c:	11 c0       	rjmp	.+34     	; 0xf730 <__floatsisf+0x6a>
    f70e:	77 23       	and	r23, r23
    f710:	21 f0       	breq	.+8      	; 0xf71a <__floatsisf+0x54>
    f712:	9e e8       	ldi	r25, 0x8E	; 142
    f714:	87 2f       	mov	r24, r23
    f716:	76 2f       	mov	r23, r22
    f718:	05 c0       	rjmp	.+10     	; 0xf724 <__floatsisf+0x5e>
    f71a:	66 23       	and	r22, r22
    f71c:	71 f0       	breq	.+28     	; 0xf73a <__floatsisf+0x74>
    f71e:	96 e8       	ldi	r25, 0x86	; 134
    f720:	86 2f       	mov	r24, r22
    f722:	70 e0       	ldi	r23, 0x00	; 0
    f724:	60 e0       	ldi	r22, 0x00	; 0
    f726:	2a f0       	brmi	.+10     	; 0xf732 <__floatsisf+0x6c>
    f728:	9a 95       	dec	r25
    f72a:	66 0f       	add	r22, r22
    f72c:	77 1f       	adc	r23, r23
    f72e:	88 1f       	adc	r24, r24
    f730:	da f7       	brpl	.-10     	; 0xf728 <__floatsisf+0x62>
    f732:	88 0f       	add	r24, r24
    f734:	96 95       	lsr	r25
    f736:	87 95       	ror	r24
    f738:	97 f9       	bld	r25, 7
    f73a:	08 95       	ret

0000f73c <__fp_arccos>:
    f73c:	df 93       	push	r29
    f73e:	cf 93       	push	r28
    f740:	1f 93       	push	r17
    f742:	0f 93       	push	r16
    f744:	8b 01       	movw	r16, r22
    f746:	ec 01       	movw	r28, r24
    f748:	e1 e7       	ldi	r30, 0x71	; 113
    f74a:	f3 e0       	ldi	r31, 0x03	; 3
    f74c:	3f d0       	rcall	.+126    	; 0xf7cc <__fp_powser>
    f74e:	99 d0       	rcall	.+306    	; 0xf882 <__fp_round>
    f750:	98 01       	movw	r18, r16
    f752:	ae 01       	movw	r20, r28
    f754:	8b 01       	movw	r16, r22
    f756:	ec 01       	movw	r28, r24
    f758:	60 e0       	ldi	r22, 0x00	; 0
    f75a:	70 e0       	ldi	r23, 0x00	; 0
    f75c:	80 e8       	ldi	r24, 0x80	; 128
    f75e:	9f e3       	ldi	r25, 0x3F	; 63
    f760:	18 de       	rcall	.-976    	; 0xf392 <__subsf3>
    f762:	ad d2       	rcall	.+1370   	; 0xfcbe <sqrt>
    f764:	98 01       	movw	r18, r16
    f766:	ae 01       	movw	r20, r28
    f768:	0f 91       	pop	r16
    f76a:	1f 91       	pop	r17
    f76c:	cf 91       	pop	r28
    f76e:	df 91       	pop	r29
    f770:	f9 c1       	rjmp	.+1010   	; 0xfb64 <__mulsf3x>

0000f772 <__fp_cmp>:
    f772:	99 0f       	add	r25, r25
    f774:	00 08       	sbc	r0, r0
    f776:	55 0f       	add	r21, r21
    f778:	aa 0b       	sbc	r26, r26
    f77a:	e0 e8       	ldi	r30, 0x80	; 128
    f77c:	fe ef       	ldi	r31, 0xFE	; 254
    f77e:	16 16       	cp	r1, r22
    f780:	17 06       	cpc	r1, r23
    f782:	e8 07       	cpc	r30, r24
    f784:	f9 07       	cpc	r31, r25
    f786:	c0 f0       	brcs	.+48     	; 0xf7b8 <__fp_cmp+0x46>
    f788:	12 16       	cp	r1, r18
    f78a:	13 06       	cpc	r1, r19
    f78c:	e4 07       	cpc	r30, r20
    f78e:	f5 07       	cpc	r31, r21
    f790:	98 f0       	brcs	.+38     	; 0xf7b8 <__fp_cmp+0x46>
    f792:	62 1b       	sub	r22, r18
    f794:	73 0b       	sbc	r23, r19
    f796:	84 0b       	sbc	r24, r20
    f798:	95 0b       	sbc	r25, r21
    f79a:	39 f4       	brne	.+14     	; 0xf7aa <__fp_cmp+0x38>
    f79c:	0a 26       	eor	r0, r26
    f79e:	61 f0       	breq	.+24     	; 0xf7b8 <__fp_cmp+0x46>
    f7a0:	23 2b       	or	r18, r19
    f7a2:	24 2b       	or	r18, r20
    f7a4:	25 2b       	or	r18, r21
    f7a6:	21 f4       	brne	.+8      	; 0xf7b0 <__fp_cmp+0x3e>
    f7a8:	08 95       	ret
    f7aa:	0a 26       	eor	r0, r26
    f7ac:	09 f4       	brne	.+2      	; 0xf7b0 <__fp_cmp+0x3e>
    f7ae:	a1 40       	sbci	r26, 0x01	; 1
    f7b0:	a6 95       	lsr	r26
    f7b2:	8f ef       	ldi	r24, 0xFF	; 255
    f7b4:	81 1d       	adc	r24, r1
    f7b6:	81 1d       	adc	r24, r1
    f7b8:	08 95       	ret

0000f7ba <__fp_inf>:
    f7ba:	97 f9       	bld	r25, 7
    f7bc:	9f 67       	ori	r25, 0x7F	; 127
    f7be:	80 e8       	ldi	r24, 0x80	; 128
    f7c0:	70 e0       	ldi	r23, 0x00	; 0
    f7c2:	60 e0       	ldi	r22, 0x00	; 0
    f7c4:	08 95       	ret

0000f7c6 <__fp_nan>:
    f7c6:	9f ef       	ldi	r25, 0xFF	; 255
    f7c8:	80 ec       	ldi	r24, 0xC0	; 192
    f7ca:	08 95       	ret

0000f7cc <__fp_powser>:
    f7cc:	df 93       	push	r29
    f7ce:	cf 93       	push	r28
    f7d0:	1f 93       	push	r17
    f7d2:	0f 93       	push	r16
    f7d4:	ff 92       	push	r15
    f7d6:	ef 92       	push	r14
    f7d8:	df 92       	push	r13
    f7da:	7b 01       	movw	r14, r22
    f7dc:	8c 01       	movw	r16, r24
    f7de:	68 94       	set
    f7e0:	05 c0       	rjmp	.+10     	; 0xf7ec <__fp_powser+0x20>
    f7e2:	da 2e       	mov	r13, r26
    f7e4:	ef 01       	movw	r28, r30
    f7e6:	be d1       	rcall	.+892    	; 0xfb64 <__mulsf3x>
    f7e8:	fe 01       	movw	r30, r28
    f7ea:	e8 94       	clt
    f7ec:	a5 91       	lpm	r26, Z+
    f7ee:	25 91       	lpm	r18, Z+
    f7f0:	35 91       	lpm	r19, Z+
    f7f2:	45 91       	lpm	r20, Z+
    f7f4:	55 91       	lpm	r21, Z+
    f7f6:	ae f3       	brts	.-22     	; 0xf7e2 <__fp_powser+0x16>
    f7f8:	ef 01       	movw	r28, r30
    f7fa:	dd dd       	rcall	.-1094   	; 0xf3b6 <__addsf3x>
    f7fc:	fe 01       	movw	r30, r28
    f7fe:	97 01       	movw	r18, r14
    f800:	a8 01       	movw	r20, r16
    f802:	da 94       	dec	r13
    f804:	79 f7       	brne	.-34     	; 0xf7e4 <__fp_powser+0x18>
    f806:	df 90       	pop	r13
    f808:	ef 90       	pop	r14
    f80a:	ff 90       	pop	r15
    f80c:	0f 91       	pop	r16
    f80e:	1f 91       	pop	r17
    f810:	cf 91       	pop	r28
    f812:	df 91       	pop	r29
    f814:	08 95       	ret

0000f816 <__fp_pscA>:
    f816:	00 24       	eor	r0, r0
    f818:	0a 94       	dec	r0
    f81a:	16 16       	cp	r1, r22
    f81c:	17 06       	cpc	r1, r23
    f81e:	18 06       	cpc	r1, r24
    f820:	09 06       	cpc	r0, r25
    f822:	08 95       	ret

0000f824 <__fp_pscB>:
    f824:	00 24       	eor	r0, r0
    f826:	0a 94       	dec	r0
    f828:	12 16       	cp	r1, r18
    f82a:	13 06       	cpc	r1, r19
    f82c:	14 06       	cpc	r1, r20
    f82e:	05 06       	cpc	r0, r21
    f830:	08 95       	ret
    f832:	c9 cf       	rjmp	.-110    	; 0xf7c6 <__fp_nan>

0000f834 <__fp_rempio2>:
    f834:	50 d0       	rcall	.+160    	; 0xf8d6 <__fp_splitA>
    f836:	e8 f3       	brcs	.-6      	; 0xf832 <__fp_pscB+0xe>
    f838:	e8 94       	clt
    f83a:	e0 e0       	ldi	r30, 0x00	; 0
    f83c:	bb 27       	eor	r27, r27
    f83e:	9f 57       	subi	r25, 0x7F	; 127
    f840:	f0 f0       	brcs	.+60     	; 0xf87e <__fp_rempio2+0x4a>
    f842:	2a ed       	ldi	r18, 0xDA	; 218
    f844:	3f e0       	ldi	r19, 0x0F	; 15
    f846:	49 ec       	ldi	r20, 0xC9	; 201
    f848:	06 c0       	rjmp	.+12     	; 0xf856 <__fp_rempio2+0x22>
    f84a:	ee 0f       	add	r30, r30
    f84c:	bb 0f       	add	r27, r27
    f84e:	66 1f       	adc	r22, r22
    f850:	77 1f       	adc	r23, r23
    f852:	88 1f       	adc	r24, r24
    f854:	28 f0       	brcs	.+10     	; 0xf860 <__fp_rempio2+0x2c>
    f856:	b2 3a       	cpi	r27, 0xA2	; 162
    f858:	62 07       	cpc	r22, r18
    f85a:	73 07       	cpc	r23, r19
    f85c:	84 07       	cpc	r24, r20
    f85e:	28 f0       	brcs	.+10     	; 0xf86a <__fp_rempio2+0x36>
    f860:	b2 5a       	subi	r27, 0xA2	; 162
    f862:	62 0b       	sbc	r22, r18
    f864:	73 0b       	sbc	r23, r19
    f866:	84 0b       	sbc	r24, r20
    f868:	e3 95       	inc	r30
    f86a:	9a 95       	dec	r25
    f86c:	72 f7       	brpl	.-36     	; 0xf84a <__fp_rempio2+0x16>
    f86e:	80 38       	cpi	r24, 0x80	; 128
    f870:	30 f4       	brcc	.+12     	; 0xf87e <__fp_rempio2+0x4a>
    f872:	9a 95       	dec	r25
    f874:	bb 0f       	add	r27, r27
    f876:	66 1f       	adc	r22, r22
    f878:	77 1f       	adc	r23, r23
    f87a:	88 1f       	adc	r24, r24
    f87c:	d2 f7       	brpl	.-12     	; 0xf872 <__fp_rempio2+0x3e>
    f87e:	90 48       	sbci	r25, 0x80	; 128
    f880:	61 c2       	rjmp	.+1218   	; 0xfd44 <__fp_mpack_finite>

0000f882 <__fp_round>:
    f882:	09 2e       	mov	r0, r25
    f884:	03 94       	inc	r0
    f886:	00 0c       	add	r0, r0
    f888:	11 f4       	brne	.+4      	; 0xf88e <__fp_round+0xc>
    f88a:	88 23       	and	r24, r24
    f88c:	52 f0       	brmi	.+20     	; 0xf8a2 <__fp_round+0x20>
    f88e:	bb 0f       	add	r27, r27
    f890:	40 f4       	brcc	.+16     	; 0xf8a2 <__fp_round+0x20>
    f892:	bf 2b       	or	r27, r31
    f894:	11 f4       	brne	.+4      	; 0xf89a <__fp_round+0x18>
    f896:	60 ff       	sbrs	r22, 0
    f898:	04 c0       	rjmp	.+8      	; 0xf8a2 <__fp_round+0x20>
    f89a:	6f 5f       	subi	r22, 0xFF	; 255
    f89c:	7f 4f       	sbci	r23, 0xFF	; 255
    f89e:	8f 4f       	sbci	r24, 0xFF	; 255
    f8a0:	9f 4f       	sbci	r25, 0xFF	; 255
    f8a2:	08 95       	ret

0000f8a4 <__fp_sinus>:
    f8a4:	ef 93       	push	r30
    f8a6:	e0 ff       	sbrs	r30, 0
    f8a8:	06 c0       	rjmp	.+12     	; 0xf8b6 <__fp_sinus+0x12>
    f8aa:	a2 ea       	ldi	r26, 0xA2	; 162
    f8ac:	2a ed       	ldi	r18, 0xDA	; 218
    f8ae:	3f e0       	ldi	r19, 0x0F	; 15
    f8b0:	49 ec       	ldi	r20, 0xC9	; 201
    f8b2:	5f eb       	ldi	r21, 0xBF	; 191
    f8b4:	80 dd       	rcall	.-1280   	; 0xf3b6 <__addsf3x>
    f8b6:	e5 df       	rcall	.-54     	; 0xf882 <__fp_round>
    f8b8:	0f 90       	pop	r0
    f8ba:	03 94       	inc	r0
    f8bc:	01 fc       	sbrc	r0, 1
    f8be:	90 58       	subi	r25, 0x80	; 128
    f8c0:	e9 e9       	ldi	r30, 0x99	; 153
    f8c2:	f3 e0       	ldi	r31, 0x03	; 3
    f8c4:	52 c2       	rjmp	.+1188   	; 0xfd6a <__fp_powsodd>

0000f8c6 <__fp_split3>:
    f8c6:	57 fd       	sbrc	r21, 7
    f8c8:	90 58       	subi	r25, 0x80	; 128
    f8ca:	44 0f       	add	r20, r20
    f8cc:	55 1f       	adc	r21, r21
    f8ce:	59 f0       	breq	.+22     	; 0xf8e6 <__fp_splitA+0x10>
    f8d0:	5f 3f       	cpi	r21, 0xFF	; 255
    f8d2:	71 f0       	breq	.+28     	; 0xf8f0 <__fp_splitA+0x1a>
    f8d4:	47 95       	ror	r20

0000f8d6 <__fp_splitA>:
    f8d6:	88 0f       	add	r24, r24
    f8d8:	97 fb       	bst	r25, 7
    f8da:	99 1f       	adc	r25, r25
    f8dc:	61 f0       	breq	.+24     	; 0xf8f6 <__fp_splitA+0x20>
    f8de:	9f 3f       	cpi	r25, 0xFF	; 255
    f8e0:	79 f0       	breq	.+30     	; 0xf900 <__fp_splitA+0x2a>
    f8e2:	87 95       	ror	r24
    f8e4:	08 95       	ret
    f8e6:	12 16       	cp	r1, r18
    f8e8:	13 06       	cpc	r1, r19
    f8ea:	14 06       	cpc	r1, r20
    f8ec:	55 1f       	adc	r21, r21
    f8ee:	f2 cf       	rjmp	.-28     	; 0xf8d4 <__fp_split3+0xe>
    f8f0:	46 95       	lsr	r20
    f8f2:	f1 df       	rcall	.-30     	; 0xf8d6 <__fp_splitA>
    f8f4:	08 c0       	rjmp	.+16     	; 0xf906 <__fp_splitA+0x30>
    f8f6:	16 16       	cp	r1, r22
    f8f8:	17 06       	cpc	r1, r23
    f8fa:	18 06       	cpc	r1, r24
    f8fc:	99 1f       	adc	r25, r25
    f8fe:	f1 cf       	rjmp	.-30     	; 0xf8e2 <__fp_splitA+0xc>
    f900:	86 95       	lsr	r24
    f902:	71 05       	cpc	r23, r1
    f904:	61 05       	cpc	r22, r1
    f906:	08 94       	sec
    f908:	08 95       	ret

0000f90a <__fp_zero>:
    f90a:	e8 94       	clt

0000f90c <__fp_szero>:
    f90c:	bb 27       	eor	r27, r27
    f90e:	66 27       	eor	r22, r22
    f910:	77 27       	eor	r23, r23
    f912:	cb 01       	movw	r24, r22
    f914:	97 f9       	bld	r25, 7
    f916:	08 95       	ret

0000f918 <__gesf2>:
    f918:	2c df       	rcall	.-424    	; 0xf772 <__fp_cmp>
    f91a:	08 f4       	brcc	.+2      	; 0xf91e <__gesf2+0x6>
    f91c:	8f ef       	ldi	r24, 0xFF	; 255
    f91e:	08 95       	ret
    f920:	7a df       	rcall	.-268    	; 0xf816 <__fp_pscA>
    f922:	19 f0       	breq	.+6      	; 0xf92a <__gesf2+0x12>
    f924:	7f df       	rcall	.-258    	; 0xf824 <__fp_pscB>
    f926:	09 f0       	breq	.+2      	; 0xf92a <__gesf2+0x12>
    f928:	4e cf       	rjmp	.-356    	; 0xf7c6 <__fp_nan>
    f92a:	47 cf       	rjmp	.-370    	; 0xf7ba <__fp_inf>
    f92c:	b9 01       	movw	r22, r18
    f92e:	ca 01       	movw	r24, r20
    f930:	07 c2       	rjmp	.+1038   	; 0xfd40 <__fp_mpack>

0000f932 <hypot>:
    f932:	9f 77       	andi	r25, 0x7F	; 127
    f934:	5f 77       	andi	r21, 0x7F	; 127
    f936:	c7 df       	rcall	.-114    	; 0xf8c6 <__fp_split3>
    f938:	98 f3       	brcs	.-26     	; 0xf920 <__gesf2+0x8>
    f93a:	99 23       	and	r25, r25
    f93c:	b9 f3       	breq	.-18     	; 0xf92c <__gesf2+0x14>
    f93e:	55 23       	and	r21, r21
    f940:	b9 f3       	breq	.-18     	; 0xf930 <__gesf2+0x18>
    f942:	ff 27       	eor	r31, r31
    f944:	95 17       	cp	r25, r21
    f946:	58 f4       	brcc	.+22     	; 0xf95e <hypot+0x2c>
    f948:	e5 2f       	mov	r30, r21
    f94a:	e9 1b       	sub	r30, r25
    f94c:	ed 30       	cpi	r30, 0x0D	; 13
    f94e:	70 f7       	brcc	.-36     	; 0xf92c <__gesf2+0x14>
    f950:	5e 3b       	cpi	r21, 0xBE	; 190
    f952:	10 f0       	brcs	.+4      	; 0xf958 <hypot+0x26>
    f954:	f1 e4       	ldi	r31, 0x41	; 65
    f956:	1c c0       	rjmp	.+56     	; 0xf990 <hypot+0x5e>
    f958:	90 34       	cpi	r25, 0x40	; 64
    f95a:	e0 f4       	brcc	.+56     	; 0xf994 <hypot+0x62>
    f95c:	0a c0       	rjmp	.+20     	; 0xf972 <hypot+0x40>
    f95e:	e9 2f       	mov	r30, r25
    f960:	e5 1b       	sub	r30, r21
    f962:	ed 30       	cpi	r30, 0x0D	; 13
    f964:	28 f7       	brcc	.-54     	; 0xf930 <__gesf2+0x18>
    f966:	9e 3b       	cpi	r25, 0xBE	; 190
    f968:	10 f0       	brcs	.+4      	; 0xf96e <hypot+0x3c>
    f96a:	f1 e4       	ldi	r31, 0x41	; 65
    f96c:	11 c0       	rjmp	.+34     	; 0xf990 <hypot+0x5e>
    f96e:	50 34       	cpi	r21, 0x40	; 64
    f970:	88 f4       	brcc	.+34     	; 0xf994 <hypot+0x62>
    f972:	f9 ea       	ldi	r31, 0xA9	; 169
    f974:	88 23       	and	r24, r24
    f976:	2a f0       	brmi	.+10     	; 0xf982 <hypot+0x50>
    f978:	9a 95       	dec	r25
    f97a:	66 0f       	add	r22, r22
    f97c:	77 1f       	adc	r23, r23
    f97e:	88 1f       	adc	r24, r24
    f980:	da f7       	brpl	.-10     	; 0xf978 <hypot+0x46>
    f982:	44 23       	and	r20, r20
    f984:	2a f0       	brmi	.+10     	; 0xf990 <hypot+0x5e>
    f986:	5a 95       	dec	r21
    f988:	22 0f       	add	r18, r18
    f98a:	33 1f       	adc	r19, r19
    f98c:	44 1f       	adc	r20, r20
    f98e:	da f7       	brpl	.-10     	; 0xf986 <hypot+0x54>
    f990:	9f 1b       	sub	r25, r31
    f992:	5f 1b       	sub	r21, r31
    f994:	ff 93       	push	r31
    f996:	1f 93       	push	r17
    f998:	0f 93       	push	r16
    f99a:	ff 92       	push	r15
    f99c:	ef 92       	push	r14
    f99e:	79 01       	movw	r14, r18
    f9a0:	8a 01       	movw	r16, r20
    f9a2:	bb 27       	eor	r27, r27
    f9a4:	ab 2f       	mov	r26, r27
    f9a6:	9b 01       	movw	r18, r22
    f9a8:	ac 01       	movw	r20, r24
    f9aa:	de d0       	rcall	.+444    	; 0xfb68 <__mulsf3_pse>
    f9ac:	97 01       	movw	r18, r14
    f9ae:	a8 01       	movw	r20, r16
    f9b0:	bf 93       	push	r27
    f9b2:	7b 01       	movw	r14, r22
    f9b4:	8c 01       	movw	r16, r24
    f9b6:	aa 27       	eor	r26, r26
    f9b8:	ba 2f       	mov	r27, r26
    f9ba:	b9 01       	movw	r22, r18
    f9bc:	ca 01       	movw	r24, r20
    f9be:	d4 d0       	rcall	.+424    	; 0xfb68 <__mulsf3_pse>
    f9c0:	af 91       	pop	r26
    f9c2:	97 01       	movw	r18, r14
    f9c4:	a8 01       	movw	r20, r16
    f9c6:	ef 90       	pop	r14
    f9c8:	ff 90       	pop	r15
    f9ca:	0f 91       	pop	r16
    f9cc:	1f 91       	pop	r17
    f9ce:	f3 dc       	rcall	.-1562   	; 0xf3b6 <__addsf3x>
    f9d0:	58 df       	rcall	.-336    	; 0xf882 <__fp_round>
    f9d2:	75 d1       	rcall	.+746    	; 0xfcbe <sqrt>
    f9d4:	4f 91       	pop	r20
    f9d6:	40 ff       	sbrs	r20, 0
    f9d8:	08 95       	ret
    f9da:	55 27       	eor	r21, r21
    f9dc:	47 fd       	sbrc	r20, 7
    f9de:	50 95       	com	r21
    f9e0:	09 c0       	rjmp	.+18     	; 0xf9f4 <ldexp>

0000f9e2 <inverse>:
    f9e2:	9b 01       	movw	r18, r22
    f9e4:	ac 01       	movw	r20, r24
    f9e6:	60 e0       	ldi	r22, 0x00	; 0
    f9e8:	70 e0       	ldi	r23, 0x00	; 0
    f9ea:	80 e8       	ldi	r24, 0x80	; 128
    f9ec:	9f e3       	ldi	r25, 0x3F	; 63
    f9ee:	9f cd       	rjmp	.-1218   	; 0xf52e <__divsf3>
    f9f0:	e4 ce       	rjmp	.-568    	; 0xf7ba <__fp_inf>
    f9f2:	a6 c1       	rjmp	.+844    	; 0xfd40 <__fp_mpack>

0000f9f4 <ldexp>:
    f9f4:	70 df       	rcall	.-288    	; 0xf8d6 <__fp_splitA>
    f9f6:	e8 f3       	brcs	.-6      	; 0xf9f2 <inverse+0x10>
    f9f8:	99 23       	and	r25, r25
    f9fa:	d9 f3       	breq	.-10     	; 0xf9f2 <inverse+0x10>
    f9fc:	94 0f       	add	r25, r20
    f9fe:	51 1d       	adc	r21, r1
    fa00:	bb f3       	brvs	.-18     	; 0xf9f0 <inverse+0xe>
    fa02:	91 50       	subi	r25, 0x01	; 1
    fa04:	50 40       	sbci	r21, 0x00	; 0
    fa06:	94 f0       	brlt	.+36     	; 0xfa2c <ldexp+0x38>
    fa08:	59 f0       	breq	.+22     	; 0xfa20 <ldexp+0x2c>
    fa0a:	88 23       	and	r24, r24
    fa0c:	32 f0       	brmi	.+12     	; 0xfa1a <ldexp+0x26>
    fa0e:	66 0f       	add	r22, r22
    fa10:	77 1f       	adc	r23, r23
    fa12:	88 1f       	adc	r24, r24
    fa14:	91 50       	subi	r25, 0x01	; 1
    fa16:	50 40       	sbci	r21, 0x00	; 0
    fa18:	c1 f7       	brne	.-16     	; 0xfa0a <ldexp+0x16>
    fa1a:	9e 3f       	cpi	r25, 0xFE	; 254
    fa1c:	51 05       	cpc	r21, r1
    fa1e:	44 f7       	brge	.-48     	; 0xf9f0 <inverse+0xe>
    fa20:	88 0f       	add	r24, r24
    fa22:	91 1d       	adc	r25, r1
    fa24:	96 95       	lsr	r25
    fa26:	87 95       	ror	r24
    fa28:	97 f9       	bld	r25, 7
    fa2a:	08 95       	ret
    fa2c:	5f 3f       	cpi	r21, 0xFF	; 255
    fa2e:	ac f0       	brlt	.+42     	; 0xfa5a <ldexp+0x66>
    fa30:	98 3e       	cpi	r25, 0xE8	; 232
    fa32:	9c f0       	brlt	.+38     	; 0xfa5a <ldexp+0x66>
    fa34:	bb 27       	eor	r27, r27
    fa36:	86 95       	lsr	r24
    fa38:	77 95       	ror	r23
    fa3a:	67 95       	ror	r22
    fa3c:	b7 95       	ror	r27
    fa3e:	08 f4       	brcc	.+2      	; 0xfa42 <ldexp+0x4e>
    fa40:	b1 60       	ori	r27, 0x01	; 1
    fa42:	93 95       	inc	r25
    fa44:	c1 f7       	brne	.-16     	; 0xfa36 <ldexp+0x42>
    fa46:	bb 0f       	add	r27, r27
    fa48:	58 f7       	brcc	.-42     	; 0xfa20 <ldexp+0x2c>
    fa4a:	11 f4       	brne	.+4      	; 0xfa50 <ldexp+0x5c>
    fa4c:	60 ff       	sbrs	r22, 0
    fa4e:	e8 cf       	rjmp	.-48     	; 0xfa20 <ldexp+0x2c>
    fa50:	6f 5f       	subi	r22, 0xFF	; 255
    fa52:	7f 4f       	sbci	r23, 0xFF	; 255
    fa54:	8f 4f       	sbci	r24, 0xFF	; 255
    fa56:	9f 4f       	sbci	r25, 0xFF	; 255
    fa58:	e3 cf       	rjmp	.-58     	; 0xfa20 <ldexp+0x2c>
    fa5a:	58 cf       	rjmp	.-336    	; 0xf90c <__fp_szero>
    fa5c:	0e f0       	brts	.+2      	; 0xfa60 <ldexp+0x6c>
    fa5e:	70 c1       	rjmp	.+736    	; 0xfd40 <__fp_mpack>
    fa60:	b2 ce       	rjmp	.-668    	; 0xf7c6 <__fp_nan>
    fa62:	68 94       	set
    fa64:	aa ce       	rjmp	.-684    	; 0xf7ba <__fp_inf>

0000fa66 <log>:
    fa66:	37 df       	rcall	.-402    	; 0xf8d6 <__fp_splitA>
    fa68:	c8 f3       	brcs	.-14     	; 0xfa5c <ldexp+0x68>
    fa6a:	99 23       	and	r25, r25
    fa6c:	d1 f3       	breq	.-12     	; 0xfa62 <ldexp+0x6e>
    fa6e:	c6 f3       	brts	.-16     	; 0xfa60 <ldexp+0x6c>
    fa70:	df 93       	push	r29
    fa72:	cf 93       	push	r28
    fa74:	1f 93       	push	r17
    fa76:	0f 93       	push	r16
    fa78:	ff 92       	push	r15
    fa7a:	c9 2f       	mov	r28, r25
    fa7c:	dd 27       	eor	r29, r29
    fa7e:	88 23       	and	r24, r24
    fa80:	2a f0       	brmi	.+10     	; 0xfa8c <log+0x26>
    fa82:	21 97       	sbiw	r28, 0x01	; 1
    fa84:	66 0f       	add	r22, r22
    fa86:	77 1f       	adc	r23, r23
    fa88:	88 1f       	adc	r24, r24
    fa8a:	da f7       	brpl	.-10     	; 0xfa82 <log+0x1c>
    fa8c:	20 e0       	ldi	r18, 0x00	; 0
    fa8e:	30 e0       	ldi	r19, 0x00	; 0
    fa90:	40 e8       	ldi	r20, 0x80	; 128
    fa92:	5f eb       	ldi	r21, 0xBF	; 191
    fa94:	9f e3       	ldi	r25, 0x3F	; 63
    fa96:	88 39       	cpi	r24, 0x98	; 152
    fa98:	20 f0       	brcs	.+8      	; 0xfaa2 <log+0x3c>
    fa9a:	80 3e       	cpi	r24, 0xE0	; 224
    fa9c:	30 f0       	brcs	.+12     	; 0xfaaa <log+0x44>
    fa9e:	21 96       	adiw	r28, 0x01	; 1
    faa0:	8f 77       	andi	r24, 0x7F	; 127
    faa2:	78 dc       	rcall	.-1808   	; 0xf394 <__addsf3>
    faa4:	e7 eb       	ldi	r30, 0xB7	; 183
    faa6:	f3 e0       	ldi	r31, 0x03	; 3
    faa8:	03 c0       	rjmp	.+6      	; 0xfab0 <log+0x4a>
    faaa:	74 dc       	rcall	.-1816   	; 0xf394 <__addsf3>
    faac:	e4 ee       	ldi	r30, 0xE4	; 228
    faae:	f3 e0       	ldi	r31, 0x03	; 3
    fab0:	8d de       	rcall	.-742    	; 0xf7cc <__fp_powser>
    fab2:	8b 01       	movw	r16, r22
    fab4:	be 01       	movw	r22, r28
    fab6:	ec 01       	movw	r28, r24
    fab8:	fb 2e       	mov	r15, r27
    faba:	6f 57       	subi	r22, 0x7F	; 127
    fabc:	71 09       	sbc	r23, r1
    fabe:	75 95       	asr	r23
    fac0:	77 1f       	adc	r23, r23
    fac2:	88 0b       	sbc	r24, r24
    fac4:	99 0b       	sbc	r25, r25
    fac6:	ff dd       	rcall	.-1026   	; 0xf6c6 <__floatsisf>
    fac8:	28 e1       	ldi	r18, 0x18	; 24
    faca:	32 e7       	ldi	r19, 0x72	; 114
    facc:	41 e3       	ldi	r20, 0x31	; 49
    face:	5f e3       	ldi	r21, 0x3F	; 63
    fad0:	49 d0       	rcall	.+146    	; 0xfb64 <__mulsf3x>
    fad2:	af 2d       	mov	r26, r15
    fad4:	98 01       	movw	r18, r16
    fad6:	ae 01       	movw	r20, r28
    fad8:	ff 90       	pop	r15
    fada:	0f 91       	pop	r16
    fadc:	1f 91       	pop	r17
    fade:	cf 91       	pop	r28
    fae0:	df 91       	pop	r29
    fae2:	69 dc       	rcall	.-1838   	; 0xf3b6 <__addsf3x>
    fae4:	ce ce       	rjmp	.-612    	; 0xf882 <__fp_round>

0000fae6 <modf>:
    fae6:	fa 01       	movw	r30, r20
    fae8:	dc 01       	movw	r26, r24
    faea:	aa 0f       	add	r26, r26
    faec:	bb 1f       	adc	r27, r27
    faee:	9b 01       	movw	r18, r22
    faf0:	ac 01       	movw	r20, r24
    faf2:	bf 57       	subi	r27, 0x7F	; 127
    faf4:	28 f4       	brcc	.+10     	; 0xfb00 <modf+0x1a>
    faf6:	22 27       	eor	r18, r18
    faf8:	33 27       	eor	r19, r19
    fafa:	44 27       	eor	r20, r20
    fafc:	50 78       	andi	r21, 0x80	; 128
    fafe:	1f c0       	rjmp	.+62     	; 0xfb3e <modf+0x58>
    fb00:	b7 51       	subi	r27, 0x17	; 23
    fb02:	88 f4       	brcc	.+34     	; 0xfb26 <modf+0x40>
    fb04:	ab 2f       	mov	r26, r27
    fb06:	00 24       	eor	r0, r0
    fb08:	46 95       	lsr	r20
    fb0a:	37 95       	ror	r19
    fb0c:	27 95       	ror	r18
    fb0e:	01 1c       	adc	r0, r1
    fb10:	a3 95       	inc	r26
    fb12:	d2 f3       	brmi	.-12     	; 0xfb08 <modf+0x22>
    fb14:	00 20       	and	r0, r0
    fb16:	69 f0       	breq	.+26     	; 0xfb32 <modf+0x4c>
    fb18:	22 0f       	add	r18, r18
    fb1a:	33 1f       	adc	r19, r19
    fb1c:	44 1f       	adc	r20, r20
    fb1e:	b3 95       	inc	r27
    fb20:	da f3       	brmi	.-10     	; 0xfb18 <modf+0x32>
    fb22:	0d d0       	rcall	.+26     	; 0xfb3e <modf+0x58>
    fb24:	36 cc       	rjmp	.-1940   	; 0xf392 <__subsf3>
    fb26:	61 30       	cpi	r22, 0x01	; 1
    fb28:	71 05       	cpc	r23, r1
    fb2a:	a0 e8       	ldi	r26, 0x80	; 128
    fb2c:	8a 07       	cpc	r24, r26
    fb2e:	b9 46       	sbci	r27, 0x69	; 105
    fb30:	30 f4       	brcc	.+12     	; 0xfb3e <modf+0x58>
    fb32:	9b 01       	movw	r18, r22
    fb34:	ac 01       	movw	r20, r24
    fb36:	66 27       	eor	r22, r22
    fb38:	77 27       	eor	r23, r23
    fb3a:	88 27       	eor	r24, r24
    fb3c:	90 78       	andi	r25, 0x80	; 128
    fb3e:	30 96       	adiw	r30, 0x00	; 0
    fb40:	21 f0       	breq	.+8      	; 0xfb4a <modf+0x64>
    fb42:	20 83       	st	Z, r18
    fb44:	31 83       	std	Z+1, r19	; 0x01
    fb46:	42 83       	std	Z+2, r20	; 0x02
    fb48:	53 83       	std	Z+3, r21	; 0x03
    fb4a:	08 95       	ret

0000fb4c <__mulsf3>:
    fb4c:	0b d0       	rcall	.+22     	; 0xfb64 <__mulsf3x>
    fb4e:	99 ce       	rjmp	.-718    	; 0xf882 <__fp_round>
    fb50:	62 de       	rcall	.-828    	; 0xf816 <__fp_pscA>
    fb52:	28 f0       	brcs	.+10     	; 0xfb5e <__mulsf3+0x12>
    fb54:	67 de       	rcall	.-818    	; 0xf824 <__fp_pscB>
    fb56:	18 f0       	brcs	.+6      	; 0xfb5e <__mulsf3+0x12>
    fb58:	95 23       	and	r25, r21
    fb5a:	09 f0       	breq	.+2      	; 0xfb5e <__mulsf3+0x12>
    fb5c:	2e ce       	rjmp	.-932    	; 0xf7ba <__fp_inf>
    fb5e:	33 ce       	rjmp	.-922    	; 0xf7c6 <__fp_nan>
    fb60:	11 24       	eor	r1, r1
    fb62:	d4 ce       	rjmp	.-600    	; 0xf90c <__fp_szero>

0000fb64 <__mulsf3x>:
    fb64:	b0 de       	rcall	.-672    	; 0xf8c6 <__fp_split3>
    fb66:	a0 f3       	brcs	.-24     	; 0xfb50 <__mulsf3+0x4>

0000fb68 <__mulsf3_pse>:
    fb68:	95 9f       	mul	r25, r21
    fb6a:	d1 f3       	breq	.-12     	; 0xfb60 <__mulsf3+0x14>
    fb6c:	95 0f       	add	r25, r21
    fb6e:	50 e0       	ldi	r21, 0x00	; 0
    fb70:	55 1f       	adc	r21, r21
    fb72:	62 9f       	mul	r22, r18
    fb74:	f0 01       	movw	r30, r0
    fb76:	72 9f       	mul	r23, r18
    fb78:	bb 27       	eor	r27, r27
    fb7a:	f0 0d       	add	r31, r0
    fb7c:	b1 1d       	adc	r27, r1
    fb7e:	63 9f       	mul	r22, r19
    fb80:	aa 27       	eor	r26, r26
    fb82:	f0 0d       	add	r31, r0
    fb84:	b1 1d       	adc	r27, r1
    fb86:	aa 1f       	adc	r26, r26
    fb88:	64 9f       	mul	r22, r20
    fb8a:	66 27       	eor	r22, r22
    fb8c:	b0 0d       	add	r27, r0
    fb8e:	a1 1d       	adc	r26, r1
    fb90:	66 1f       	adc	r22, r22
    fb92:	82 9f       	mul	r24, r18
    fb94:	22 27       	eor	r18, r18
    fb96:	b0 0d       	add	r27, r0
    fb98:	a1 1d       	adc	r26, r1
    fb9a:	62 1f       	adc	r22, r18
    fb9c:	73 9f       	mul	r23, r19
    fb9e:	b0 0d       	add	r27, r0
    fba0:	a1 1d       	adc	r26, r1
    fba2:	62 1f       	adc	r22, r18
    fba4:	83 9f       	mul	r24, r19
    fba6:	a0 0d       	add	r26, r0
    fba8:	61 1d       	adc	r22, r1
    fbaa:	22 1f       	adc	r18, r18
    fbac:	74 9f       	mul	r23, r20
    fbae:	33 27       	eor	r19, r19
    fbb0:	a0 0d       	add	r26, r0
    fbb2:	61 1d       	adc	r22, r1
    fbb4:	23 1f       	adc	r18, r19
    fbb6:	84 9f       	mul	r24, r20
    fbb8:	60 0d       	add	r22, r0
    fbba:	21 1d       	adc	r18, r1
    fbbc:	82 2f       	mov	r24, r18
    fbbe:	76 2f       	mov	r23, r22
    fbc0:	6a 2f       	mov	r22, r26
    fbc2:	11 24       	eor	r1, r1
    fbc4:	9f 57       	subi	r25, 0x7F	; 127
    fbc6:	50 40       	sbci	r21, 0x00	; 0
    fbc8:	8a f0       	brmi	.+34     	; 0xfbec <__mulsf3_pse+0x84>
    fbca:	e1 f0       	breq	.+56     	; 0xfc04 <__mulsf3_pse+0x9c>
    fbcc:	88 23       	and	r24, r24
    fbce:	4a f0       	brmi	.+18     	; 0xfbe2 <__mulsf3_pse+0x7a>
    fbd0:	ee 0f       	add	r30, r30
    fbd2:	ff 1f       	adc	r31, r31
    fbd4:	bb 1f       	adc	r27, r27
    fbd6:	66 1f       	adc	r22, r22
    fbd8:	77 1f       	adc	r23, r23
    fbda:	88 1f       	adc	r24, r24
    fbdc:	91 50       	subi	r25, 0x01	; 1
    fbde:	50 40       	sbci	r21, 0x00	; 0
    fbe0:	a9 f7       	brne	.-22     	; 0xfbcc <__mulsf3_pse+0x64>
    fbe2:	9e 3f       	cpi	r25, 0xFE	; 254
    fbe4:	51 05       	cpc	r21, r1
    fbe6:	70 f0       	brcs	.+28     	; 0xfc04 <__mulsf3_pse+0x9c>
    fbe8:	e8 cd       	rjmp	.-1072   	; 0xf7ba <__fp_inf>
    fbea:	90 ce       	rjmp	.-736    	; 0xf90c <__fp_szero>
    fbec:	5f 3f       	cpi	r21, 0xFF	; 255
    fbee:	ec f3       	brlt	.-6      	; 0xfbea <__mulsf3_pse+0x82>
    fbf0:	98 3e       	cpi	r25, 0xE8	; 232
    fbf2:	dc f3       	brlt	.-10     	; 0xfbea <__mulsf3_pse+0x82>
    fbf4:	86 95       	lsr	r24
    fbf6:	77 95       	ror	r23
    fbf8:	67 95       	ror	r22
    fbfa:	b7 95       	ror	r27
    fbfc:	f7 95       	ror	r31
    fbfe:	e7 95       	ror	r30
    fc00:	9f 5f       	subi	r25, 0xFF	; 255
    fc02:	c1 f7       	brne	.-16     	; 0xfbf4 <__mulsf3_pse+0x8c>
    fc04:	fe 2b       	or	r31, r30
    fc06:	88 0f       	add	r24, r24
    fc08:	91 1d       	adc	r25, r1
    fc0a:	96 95       	lsr	r25
    fc0c:	87 95       	ror	r24
    fc0e:	97 f9       	bld	r25, 7
    fc10:	08 95       	ret

0000fc12 <pow>:
    fc12:	fa 01       	movw	r30, r20
    fc14:	ee 0f       	add	r30, r30
    fc16:	ff 1f       	adc	r31, r31
    fc18:	30 96       	adiw	r30, 0x00	; 0
    fc1a:	21 05       	cpc	r18, r1
    fc1c:	31 05       	cpc	r19, r1
    fc1e:	99 f1       	breq	.+102    	; 0xfc86 <pow+0x74>
    fc20:	61 15       	cp	r22, r1
    fc22:	71 05       	cpc	r23, r1
    fc24:	61 f4       	brne	.+24     	; 0xfc3e <pow+0x2c>
    fc26:	80 38       	cpi	r24, 0x80	; 128
    fc28:	bf e3       	ldi	r27, 0x3F	; 63
    fc2a:	9b 07       	cpc	r25, r27
    fc2c:	49 f1       	breq	.+82     	; 0xfc80 <pow+0x6e>
    fc2e:	68 94       	set
    fc30:	90 38       	cpi	r25, 0x80	; 128
    fc32:	81 05       	cpc	r24, r1
    fc34:	61 f0       	breq	.+24     	; 0xfc4e <pow+0x3c>
    fc36:	80 38       	cpi	r24, 0x80	; 128
    fc38:	bf ef       	ldi	r27, 0xFF	; 255
    fc3a:	9b 07       	cpc	r25, r27
    fc3c:	41 f0       	breq	.+16     	; 0xfc4e <pow+0x3c>
    fc3e:	99 23       	and	r25, r25
    fc40:	42 f5       	brpl	.+80     	; 0xfc92 <pow+0x80>
    fc42:	ff 3f       	cpi	r31, 0xFF	; 255
    fc44:	e1 05       	cpc	r30, r1
    fc46:	31 05       	cpc	r19, r1
    fc48:	21 05       	cpc	r18, r1
    fc4a:	11 f1       	breq	.+68     	; 0xfc90 <pow+0x7e>
    fc4c:	e8 94       	clt
    fc4e:	08 94       	sec
    fc50:	e7 95       	ror	r30
    fc52:	d9 01       	movw	r26, r18
    fc54:	aa 23       	and	r26, r26
    fc56:	29 f4       	brne	.+10     	; 0xfc62 <pow+0x50>
    fc58:	ab 2f       	mov	r26, r27
    fc5a:	be 2f       	mov	r27, r30
    fc5c:	f8 5f       	subi	r31, 0xF8	; 248
    fc5e:	d0 f3       	brcs	.-12     	; 0xfc54 <pow+0x42>
    fc60:	10 c0       	rjmp	.+32     	; 0xfc82 <pow+0x70>
    fc62:	ff 5f       	subi	r31, 0xFF	; 255
    fc64:	70 f4       	brcc	.+28     	; 0xfc82 <pow+0x70>
    fc66:	a6 95       	lsr	r26
    fc68:	e0 f7       	brcc	.-8      	; 0xfc62 <pow+0x50>
    fc6a:	f7 39       	cpi	r31, 0x97	; 151
    fc6c:	50 f0       	brcs	.+20     	; 0xfc82 <pow+0x70>
    fc6e:	19 f0       	breq	.+6      	; 0xfc76 <pow+0x64>
    fc70:	ff 3a       	cpi	r31, 0xAF	; 175
    fc72:	38 f4       	brcc	.+14     	; 0xfc82 <pow+0x70>
    fc74:	9f 77       	andi	r25, 0x7F	; 127
    fc76:	9f 93       	push	r25
    fc78:	0c d0       	rcall	.+24     	; 0xfc92 <pow+0x80>
    fc7a:	0f 90       	pop	r0
    fc7c:	07 fc       	sbrc	r0, 7
    fc7e:	90 58       	subi	r25, 0x80	; 128
    fc80:	08 95       	ret
    fc82:	3e f0       	brts	.+14     	; 0xfc92 <pow+0x80>
    fc84:	a0 cd       	rjmp	.-1216   	; 0xf7c6 <__fp_nan>
    fc86:	60 e0       	ldi	r22, 0x00	; 0
    fc88:	70 e0       	ldi	r23, 0x00	; 0
    fc8a:	80 e8       	ldi	r24, 0x80	; 128
    fc8c:	9f e3       	ldi	r25, 0x3F	; 63
    fc8e:	08 95       	ret
    fc90:	4f e7       	ldi	r20, 0x7F	; 127
    fc92:	9f 77       	andi	r25, 0x7F	; 127
    fc94:	5f 93       	push	r21
    fc96:	4f 93       	push	r20
    fc98:	3f 93       	push	r19
    fc9a:	2f 93       	push	r18
    fc9c:	e4 de       	rcall	.-568    	; 0xfa66 <log>
    fc9e:	2f 91       	pop	r18
    fca0:	3f 91       	pop	r19
    fca2:	4f 91       	pop	r20
    fca4:	5f 91       	pop	r21
    fca6:	52 df       	rcall	.-348    	; 0xfb4c <__mulsf3>
    fca8:	af cc       	rjmp	.-1698   	; 0xf608 <exp>

0000fcaa <sin>:
    fcaa:	9f 93       	push	r25
    fcac:	c3 dd       	rcall	.-1146   	; 0xf834 <__fp_rempio2>
    fcae:	0f 90       	pop	r0
    fcb0:	07 fc       	sbrc	r0, 7
    fcb2:	ee 5f       	subi	r30, 0xFE	; 254
    fcb4:	f7 cd       	rjmp	.-1042   	; 0xf8a4 <__fp_sinus>
    fcb6:	11 f4       	brne	.+4      	; 0xfcbc <sin+0x12>
    fcb8:	0e f4       	brtc	.+2      	; 0xfcbc <sin+0x12>
    fcba:	85 cd       	rjmp	.-1270   	; 0xf7c6 <__fp_nan>
    fcbc:	41 c0       	rjmp	.+130    	; 0xfd40 <__fp_mpack>

0000fcbe <sqrt>:
    fcbe:	0b de       	rcall	.-1002   	; 0xf8d6 <__fp_splitA>
    fcc0:	d0 f3       	brcs	.-12     	; 0xfcb6 <sin+0xc>
    fcc2:	99 23       	and	r25, r25
    fcc4:	d9 f3       	breq	.-10     	; 0xfcbc <sin+0x12>
    fcc6:	ce f3       	brts	.-14     	; 0xfcba <sin+0x10>
    fcc8:	9f 57       	subi	r25, 0x7F	; 127
    fcca:	55 0b       	sbc	r21, r21
    fccc:	87 ff       	sbrs	r24, 7
    fcce:	46 d0       	rcall	.+140    	; 0xfd5c <__fp_norm2>
    fcd0:	00 24       	eor	r0, r0
    fcd2:	a0 e6       	ldi	r26, 0x60	; 96
    fcd4:	40 ea       	ldi	r20, 0xA0	; 160
    fcd6:	90 01       	movw	r18, r0
    fcd8:	80 58       	subi	r24, 0x80	; 128
    fcda:	56 95       	lsr	r21
    fcdc:	97 95       	ror	r25
    fcde:	28 f4       	brcc	.+10     	; 0xfcea <sqrt+0x2c>
    fce0:	80 5c       	subi	r24, 0xC0	; 192
    fce2:	66 0f       	add	r22, r22
    fce4:	77 1f       	adc	r23, r23
    fce6:	88 1f       	adc	r24, r24
    fce8:	20 f0       	brcs	.+8      	; 0xfcf2 <sqrt+0x34>
    fcea:	26 17       	cp	r18, r22
    fcec:	37 07       	cpc	r19, r23
    fcee:	48 07       	cpc	r20, r24
    fcf0:	30 f4       	brcc	.+12     	; 0xfcfe <sqrt+0x40>
    fcf2:	62 1b       	sub	r22, r18
    fcf4:	73 0b       	sbc	r23, r19
    fcf6:	84 0b       	sbc	r24, r20
    fcf8:	20 29       	or	r18, r0
    fcfa:	31 29       	or	r19, r1
    fcfc:	4a 2b       	or	r20, r26
    fcfe:	a6 95       	lsr	r26
    fd00:	17 94       	ror	r1
    fd02:	07 94       	ror	r0
    fd04:	20 25       	eor	r18, r0
    fd06:	31 25       	eor	r19, r1
    fd08:	4a 27       	eor	r20, r26
    fd0a:	58 f7       	brcc	.-42     	; 0xfce2 <sqrt+0x24>
    fd0c:	66 0f       	add	r22, r22
    fd0e:	77 1f       	adc	r23, r23
    fd10:	88 1f       	adc	r24, r24
    fd12:	20 f0       	brcs	.+8      	; 0xfd1c <sqrt+0x5e>
    fd14:	26 17       	cp	r18, r22
    fd16:	37 07       	cpc	r19, r23
    fd18:	48 07       	cpc	r20, r24
    fd1a:	30 f4       	brcc	.+12     	; 0xfd28 <sqrt+0x6a>
    fd1c:	62 0b       	sbc	r22, r18
    fd1e:	73 0b       	sbc	r23, r19
    fd20:	84 0b       	sbc	r24, r20
    fd22:	20 0d       	add	r18, r0
    fd24:	31 1d       	adc	r19, r1
    fd26:	41 1d       	adc	r20, r1
    fd28:	a0 95       	com	r26
    fd2a:	81 f7       	brne	.-32     	; 0xfd0c <sqrt+0x4e>
    fd2c:	b9 01       	movw	r22, r18
    fd2e:	84 2f       	mov	r24, r20
    fd30:	91 58       	subi	r25, 0x81	; 129
    fd32:	88 0f       	add	r24, r24
    fd34:	96 95       	lsr	r25
    fd36:	87 95       	ror	r24
    fd38:	08 95       	ret

0000fd3a <square>:
    fd3a:	9b 01       	movw	r18, r22
    fd3c:	ac 01       	movw	r20, r24
    fd3e:	06 cf       	rjmp	.-500    	; 0xfb4c <__mulsf3>

0000fd40 <__fp_mpack>:
    fd40:	9f 3f       	cpi	r25, 0xFF	; 255
    fd42:	31 f0       	breq	.+12     	; 0xfd50 <__fp_mpack_finite+0xc>

0000fd44 <__fp_mpack_finite>:
    fd44:	91 50       	subi	r25, 0x01	; 1
    fd46:	20 f4       	brcc	.+8      	; 0xfd50 <__fp_mpack_finite+0xc>
    fd48:	87 95       	ror	r24
    fd4a:	77 95       	ror	r23
    fd4c:	67 95       	ror	r22
    fd4e:	b7 95       	ror	r27
    fd50:	88 0f       	add	r24, r24
    fd52:	91 1d       	adc	r25, r1
    fd54:	96 95       	lsr	r25
    fd56:	87 95       	ror	r24
    fd58:	97 f9       	bld	r25, 7
    fd5a:	08 95       	ret

0000fd5c <__fp_norm2>:
    fd5c:	91 50       	subi	r25, 0x01	; 1
    fd5e:	50 40       	sbci	r21, 0x00	; 0
    fd60:	66 0f       	add	r22, r22
    fd62:	77 1f       	adc	r23, r23
    fd64:	88 1f       	adc	r24, r24
    fd66:	d2 f7       	brpl	.-12     	; 0xfd5c <__fp_norm2>
    fd68:	08 95       	ret

0000fd6a <__fp_powsodd>:
    fd6a:	9f 93       	push	r25
    fd6c:	8f 93       	push	r24
    fd6e:	7f 93       	push	r23
    fd70:	6f 93       	push	r22
    fd72:	ff 93       	push	r31
    fd74:	ef 93       	push	r30
    fd76:	9b 01       	movw	r18, r22
    fd78:	ac 01       	movw	r20, r24
    fd7a:	e8 de       	rcall	.-560    	; 0xfb4c <__mulsf3>
    fd7c:	ef 91       	pop	r30
    fd7e:	ff 91       	pop	r31
    fd80:	25 dd       	rcall	.-1462   	; 0xf7cc <__fp_powser>
    fd82:	2f 91       	pop	r18
    fd84:	3f 91       	pop	r19
    fd86:	4f 91       	pop	r20
    fd88:	5f 91       	pop	r21
    fd8a:	e0 ce       	rjmp	.-576    	; 0xfb4c <__mulsf3>

0000fd8c <__mulsi3>:
    fd8c:	62 9f       	mul	r22, r18
    fd8e:	d0 01       	movw	r26, r0
    fd90:	73 9f       	mul	r23, r19
    fd92:	f0 01       	movw	r30, r0
    fd94:	82 9f       	mul	r24, r18
    fd96:	e0 0d       	add	r30, r0
    fd98:	f1 1d       	adc	r31, r1
    fd9a:	64 9f       	mul	r22, r20
    fd9c:	e0 0d       	add	r30, r0
    fd9e:	f1 1d       	adc	r31, r1
    fda0:	92 9f       	mul	r25, r18
    fda2:	f0 0d       	add	r31, r0
    fda4:	83 9f       	mul	r24, r19
    fda6:	f0 0d       	add	r31, r0
    fda8:	74 9f       	mul	r23, r20
    fdaa:	f0 0d       	add	r31, r0
    fdac:	65 9f       	mul	r22, r21
    fdae:	f0 0d       	add	r31, r0
    fdb0:	99 27       	eor	r25, r25
    fdb2:	72 9f       	mul	r23, r18
    fdb4:	b0 0d       	add	r27, r0
    fdb6:	e1 1d       	adc	r30, r1
    fdb8:	f9 1f       	adc	r31, r25
    fdba:	63 9f       	mul	r22, r19
    fdbc:	b0 0d       	add	r27, r0
    fdbe:	e1 1d       	adc	r30, r1
    fdc0:	f9 1f       	adc	r31, r25
    fdc2:	bd 01       	movw	r22, r26
    fdc4:	cf 01       	movw	r24, r30
    fdc6:	11 24       	eor	r1, r1
    fdc8:	08 95       	ret

0000fdca <__udivmodqi4>:
    fdca:	99 1b       	sub	r25, r25
    fdcc:	79 e0       	ldi	r23, 0x09	; 9
    fdce:	04 c0       	rjmp	.+8      	; 0xfdd8 <__udivmodqi4_ep>

0000fdd0 <__udivmodqi4_loop>:
    fdd0:	99 1f       	adc	r25, r25
    fdd2:	96 17       	cp	r25, r22
    fdd4:	08 f0       	brcs	.+2      	; 0xfdd8 <__udivmodqi4_ep>
    fdd6:	96 1b       	sub	r25, r22

0000fdd8 <__udivmodqi4_ep>:
    fdd8:	88 1f       	adc	r24, r24
    fdda:	7a 95       	dec	r23
    fddc:	c9 f7       	brne	.-14     	; 0xfdd0 <__udivmodqi4_loop>
    fdde:	80 95       	com	r24
    fde0:	08 95       	ret

0000fde2 <__udivmodhi4>:
    fde2:	aa 1b       	sub	r26, r26
    fde4:	bb 1b       	sub	r27, r27
    fde6:	51 e1       	ldi	r21, 0x11	; 17
    fde8:	07 c0       	rjmp	.+14     	; 0xfdf8 <__udivmodhi4_ep>

0000fdea <__udivmodhi4_loop>:
    fdea:	aa 1f       	adc	r26, r26
    fdec:	bb 1f       	adc	r27, r27
    fdee:	a6 17       	cp	r26, r22
    fdf0:	b7 07       	cpc	r27, r23
    fdf2:	10 f0       	brcs	.+4      	; 0xfdf8 <__udivmodhi4_ep>
    fdf4:	a6 1b       	sub	r26, r22
    fdf6:	b7 0b       	sbc	r27, r23

0000fdf8 <__udivmodhi4_ep>:
    fdf8:	88 1f       	adc	r24, r24
    fdfa:	99 1f       	adc	r25, r25
    fdfc:	5a 95       	dec	r21
    fdfe:	a9 f7       	brne	.-22     	; 0xfdea <__udivmodhi4_loop>
    fe00:	80 95       	com	r24
    fe02:	90 95       	com	r25
    fe04:	bc 01       	movw	r22, r24
    fe06:	cd 01       	movw	r24, r26
    fe08:	08 95       	ret

0000fe0a <__divmodhi4>:
    fe0a:	97 fb       	bst	r25, 7
    fe0c:	09 2e       	mov	r0, r25
    fe0e:	07 26       	eor	r0, r23
    fe10:	0a d0       	rcall	.+20     	; 0xfe26 <__divmodhi4_neg1>
    fe12:	77 fd       	sbrc	r23, 7
    fe14:	04 d0       	rcall	.+8      	; 0xfe1e <__divmodhi4_neg2>
    fe16:	e5 df       	rcall	.-54     	; 0xfde2 <__udivmodhi4>
    fe18:	06 d0       	rcall	.+12     	; 0xfe26 <__divmodhi4_neg1>
    fe1a:	00 20       	and	r0, r0
    fe1c:	1a f4       	brpl	.+6      	; 0xfe24 <__divmodhi4_exit>

0000fe1e <__divmodhi4_neg2>:
    fe1e:	70 95       	com	r23
    fe20:	61 95       	neg	r22
    fe22:	7f 4f       	sbci	r23, 0xFF	; 255

0000fe24 <__divmodhi4_exit>:
    fe24:	08 95       	ret

0000fe26 <__divmodhi4_neg1>:
    fe26:	f6 f7       	brtc	.-4      	; 0xfe24 <__divmodhi4_exit>
    fe28:	90 95       	com	r25
    fe2a:	81 95       	neg	r24
    fe2c:	9f 4f       	sbci	r25, 0xFF	; 255
    fe2e:	08 95       	ret

0000fe30 <__udivmodsi4>:
    fe30:	a1 e2       	ldi	r26, 0x21	; 33
    fe32:	1a 2e       	mov	r1, r26
    fe34:	aa 1b       	sub	r26, r26
    fe36:	bb 1b       	sub	r27, r27
    fe38:	fd 01       	movw	r30, r26
    fe3a:	0d c0       	rjmp	.+26     	; 0xfe56 <__udivmodsi4_ep>

0000fe3c <__udivmodsi4_loop>:
    fe3c:	aa 1f       	adc	r26, r26
    fe3e:	bb 1f       	adc	r27, r27
    fe40:	ee 1f       	adc	r30, r30
    fe42:	ff 1f       	adc	r31, r31
    fe44:	a2 17       	cp	r26, r18
    fe46:	b3 07       	cpc	r27, r19
    fe48:	e4 07       	cpc	r30, r20
    fe4a:	f5 07       	cpc	r31, r21
    fe4c:	20 f0       	brcs	.+8      	; 0xfe56 <__udivmodsi4_ep>
    fe4e:	a2 1b       	sub	r26, r18
    fe50:	b3 0b       	sbc	r27, r19
    fe52:	e4 0b       	sbc	r30, r20
    fe54:	f5 0b       	sbc	r31, r21

0000fe56 <__udivmodsi4_ep>:
    fe56:	66 1f       	adc	r22, r22
    fe58:	77 1f       	adc	r23, r23
    fe5a:	88 1f       	adc	r24, r24
    fe5c:	99 1f       	adc	r25, r25
    fe5e:	1a 94       	dec	r1
    fe60:	69 f7       	brne	.-38     	; 0xfe3c <__udivmodsi4_loop>
    fe62:	60 95       	com	r22
    fe64:	70 95       	com	r23
    fe66:	80 95       	com	r24
    fe68:	90 95       	com	r25
    fe6a:	9b 01       	movw	r18, r22
    fe6c:	ac 01       	movw	r20, r24
    fe6e:	bd 01       	movw	r22, r26
    fe70:	cf 01       	movw	r24, r30
    fe72:	08 95       	ret

0000fe74 <__divmodsi4>:
    fe74:	97 fb       	bst	r25, 7
    fe76:	09 2e       	mov	r0, r25
    fe78:	05 26       	eor	r0, r21
    fe7a:	0e d0       	rcall	.+28     	; 0xfe98 <__divmodsi4_neg1>
    fe7c:	57 fd       	sbrc	r21, 7
    fe7e:	04 d0       	rcall	.+8      	; 0xfe88 <__divmodsi4_neg2>
    fe80:	d7 df       	rcall	.-82     	; 0xfe30 <__udivmodsi4>
    fe82:	0a d0       	rcall	.+20     	; 0xfe98 <__divmodsi4_neg1>
    fe84:	00 1c       	adc	r0, r0
    fe86:	38 f4       	brcc	.+14     	; 0xfe96 <__divmodsi4_exit>

0000fe88 <__divmodsi4_neg2>:
    fe88:	50 95       	com	r21
    fe8a:	40 95       	com	r20
    fe8c:	30 95       	com	r19
    fe8e:	21 95       	neg	r18
    fe90:	3f 4f       	sbci	r19, 0xFF	; 255
    fe92:	4f 4f       	sbci	r20, 0xFF	; 255
    fe94:	5f 4f       	sbci	r21, 0xFF	; 255

0000fe96 <__divmodsi4_exit>:
    fe96:	08 95       	ret

0000fe98 <__divmodsi4_neg1>:
    fe98:	f6 f7       	brtc	.-4      	; 0xfe96 <__divmodsi4_exit>
    fe9a:	90 95       	com	r25
    fe9c:	80 95       	com	r24
    fe9e:	70 95       	com	r23
    fea0:	61 95       	neg	r22
    fea2:	7f 4f       	sbci	r23, 0xFF	; 255
    fea4:	8f 4f       	sbci	r24, 0xFF	; 255
    fea6:	9f 4f       	sbci	r25, 0xFF	; 255
    fea8:	08 95       	ret

0000feaa <__tablejump2__>:
    feaa:	ee 0f       	add	r30, r30
    feac:	ff 1f       	adc	r31, r31

0000feae <__tablejump__>:
    feae:	05 90       	lpm	r0, Z+
    feb0:	f4 91       	lpm	r31, Z+
    feb2:	e0 2d       	mov	r30, r0
    feb4:	09 94       	ijmp

0000feb6 <malloc>:
    feb6:	cf 93       	push	r28
    feb8:	df 93       	push	r29
    feba:	bc 01       	movw	r22, r24
    febc:	82 30       	cpi	r24, 0x02	; 2
    febe:	91 05       	cpc	r25, r1
    fec0:	10 f4       	brcc	.+4      	; 0xfec6 <malloc+0x10>
    fec2:	62 e0       	ldi	r22, 0x02	; 2
    fec4:	70 e0       	ldi	r23, 0x00	; 0
    fec6:	a0 91 d1 14 	lds	r26, 0x14D1
    feca:	b0 91 d2 14 	lds	r27, 0x14D2
    fece:	ed 01       	movw	r28, r26
    fed0:	e0 e0       	ldi	r30, 0x00	; 0
    fed2:	f0 e0       	ldi	r31, 0x00	; 0
    fed4:	40 e0       	ldi	r20, 0x00	; 0
    fed6:	50 e0       	ldi	r21, 0x00	; 0
    fed8:	21 c0       	rjmp	.+66     	; 0xff1c <malloc+0x66>
    feda:	88 81       	ld	r24, Y
    fedc:	99 81       	ldd	r25, Y+1	; 0x01
    fede:	86 17       	cp	r24, r22
    fee0:	97 07       	cpc	r25, r23
    fee2:	69 f4       	brne	.+26     	; 0xfefe <malloc+0x48>
    fee4:	8a 81       	ldd	r24, Y+2	; 0x02
    fee6:	9b 81       	ldd	r25, Y+3	; 0x03
    fee8:	30 97       	sbiw	r30, 0x00	; 0
    feea:	19 f0       	breq	.+6      	; 0xfef2 <malloc+0x3c>
    feec:	93 83       	std	Z+3, r25	; 0x03
    feee:	82 83       	std	Z+2, r24	; 0x02
    fef0:	04 c0       	rjmp	.+8      	; 0xfefa <malloc+0x44>
    fef2:	90 93 d2 14 	sts	0x14D2, r25
    fef6:	80 93 d1 14 	sts	0x14D1, r24
    fefa:	fe 01       	movw	r30, r28
    fefc:	34 c0       	rjmp	.+104    	; 0xff66 <malloc+0xb0>
    fefe:	68 17       	cp	r22, r24
    ff00:	79 07       	cpc	r23, r25
    ff02:	38 f4       	brcc	.+14     	; 0xff12 <malloc+0x5c>
    ff04:	41 15       	cp	r20, r1
    ff06:	51 05       	cpc	r21, r1
    ff08:	19 f0       	breq	.+6      	; 0xff10 <malloc+0x5a>
    ff0a:	84 17       	cp	r24, r20
    ff0c:	95 07       	cpc	r25, r21
    ff0e:	08 f4       	brcc	.+2      	; 0xff12 <malloc+0x5c>
    ff10:	ac 01       	movw	r20, r24
    ff12:	fe 01       	movw	r30, r28
    ff14:	8a 81       	ldd	r24, Y+2	; 0x02
    ff16:	9b 81       	ldd	r25, Y+3	; 0x03
    ff18:	9c 01       	movw	r18, r24
    ff1a:	e9 01       	movw	r28, r18
    ff1c:	20 97       	sbiw	r28, 0x00	; 0
    ff1e:	e9 f6       	brne	.-70     	; 0xfeda <malloc+0x24>
    ff20:	41 15       	cp	r20, r1
    ff22:	51 05       	cpc	r21, r1
    ff24:	a9 f1       	breq	.+106    	; 0xff90 <malloc+0xda>
    ff26:	ca 01       	movw	r24, r20
    ff28:	86 1b       	sub	r24, r22
    ff2a:	97 0b       	sbc	r25, r23
    ff2c:	04 97       	sbiw	r24, 0x04	; 4
    ff2e:	08 f4       	brcc	.+2      	; 0xff32 <malloc+0x7c>
    ff30:	ba 01       	movw	r22, r20
    ff32:	e0 e0       	ldi	r30, 0x00	; 0
    ff34:	f0 e0       	ldi	r31, 0x00	; 0
    ff36:	2a c0       	rjmp	.+84     	; 0xff8c <malloc+0xd6>
    ff38:	8d 91       	ld	r24, X+
    ff3a:	9c 91       	ld	r25, X
    ff3c:	11 97       	sbiw	r26, 0x01	; 1
    ff3e:	84 17       	cp	r24, r20
    ff40:	95 07       	cpc	r25, r21
    ff42:	f9 f4       	brne	.+62     	; 0xff82 <malloc+0xcc>
    ff44:	64 17       	cp	r22, r20
    ff46:	75 07       	cpc	r23, r21
    ff48:	81 f4       	brne	.+32     	; 0xff6a <malloc+0xb4>
    ff4a:	12 96       	adiw	r26, 0x02	; 2
    ff4c:	8d 91       	ld	r24, X+
    ff4e:	9c 91       	ld	r25, X
    ff50:	13 97       	sbiw	r26, 0x03	; 3
    ff52:	30 97       	sbiw	r30, 0x00	; 0
    ff54:	19 f0       	breq	.+6      	; 0xff5c <malloc+0xa6>
    ff56:	93 83       	std	Z+3, r25	; 0x03
    ff58:	82 83       	std	Z+2, r24	; 0x02
    ff5a:	04 c0       	rjmp	.+8      	; 0xff64 <malloc+0xae>
    ff5c:	90 93 d2 14 	sts	0x14D2, r25
    ff60:	80 93 d1 14 	sts	0x14D1, r24
    ff64:	fd 01       	movw	r30, r26
    ff66:	32 96       	adiw	r30, 0x02	; 2
    ff68:	4f c0       	rjmp	.+158    	; 0x10008 <malloc+0x152>
    ff6a:	ca 01       	movw	r24, r20
    ff6c:	86 1b       	sub	r24, r22
    ff6e:	97 0b       	sbc	r25, r23
    ff70:	fd 01       	movw	r30, r26
    ff72:	e8 0f       	add	r30, r24
    ff74:	f9 1f       	adc	r31, r25
    ff76:	61 93       	st	Z+, r22
    ff78:	71 93       	st	Z+, r23
    ff7a:	02 97       	sbiw	r24, 0x02	; 2
    ff7c:	8d 93       	st	X+, r24
    ff7e:	9c 93       	st	X, r25
    ff80:	43 c0       	rjmp	.+134    	; 0x10008 <malloc+0x152>
    ff82:	fd 01       	movw	r30, r26
    ff84:	82 81       	ldd	r24, Z+2	; 0x02
    ff86:	93 81       	ldd	r25, Z+3	; 0x03
    ff88:	9c 01       	movw	r18, r24
    ff8a:	d9 01       	movw	r26, r18
    ff8c:	10 97       	sbiw	r26, 0x00	; 0
    ff8e:	a1 f6       	brne	.-88     	; 0xff38 <malloc+0x82>
    ff90:	80 91 cf 14 	lds	r24, 0x14CF
    ff94:	90 91 d0 14 	lds	r25, 0x14D0
    ff98:	89 2b       	or	r24, r25
    ff9a:	41 f4       	brne	.+16     	; 0xffac <malloc+0xf6>
    ff9c:	80 91 f4 03 	lds	r24, 0x03F4
    ffa0:	90 91 f5 03 	lds	r25, 0x03F5
    ffa4:	90 93 d0 14 	sts	0x14D0, r25
    ffa8:	80 93 cf 14 	sts	0x14CF, r24
    ffac:	40 91 f6 03 	lds	r20, 0x03F6
    ffb0:	50 91 f7 03 	lds	r21, 0x03F7
    ffb4:	41 15       	cp	r20, r1
    ffb6:	51 05       	cpc	r21, r1
    ffb8:	41 f4       	brne	.+16     	; 0xffca <malloc+0x114>
    ffba:	4d b7       	in	r20, 0x3d	; 61
    ffbc:	5e b7       	in	r21, 0x3e	; 62
    ffbe:	80 91 f2 03 	lds	r24, 0x03F2
    ffc2:	90 91 f3 03 	lds	r25, 0x03F3
    ffc6:	48 1b       	sub	r20, r24
    ffc8:	59 0b       	sbc	r21, r25
    ffca:	20 91 cf 14 	lds	r18, 0x14CF
    ffce:	30 91 d0 14 	lds	r19, 0x14D0
    ffd2:	24 17       	cp	r18, r20
    ffd4:	35 07       	cpc	r19, r21
    ffd6:	b0 f4       	brcc	.+44     	; 0x10004 <malloc+0x14e>
    ffd8:	ca 01       	movw	r24, r20
    ffda:	82 1b       	sub	r24, r18
    ffdc:	93 0b       	sbc	r25, r19
    ffde:	86 17       	cp	r24, r22
    ffe0:	97 07       	cpc	r25, r23
    ffe2:	80 f0       	brcs	.+32     	; 0x10004 <malloc+0x14e>
    ffe4:	ab 01       	movw	r20, r22
    ffe6:	4e 5f       	subi	r20, 0xFE	; 254
    ffe8:	5f 4f       	sbci	r21, 0xFF	; 255
    ffea:	84 17       	cp	r24, r20
    ffec:	95 07       	cpc	r25, r21
    ffee:	50 f0       	brcs	.+20     	; 0x10004 <malloc+0x14e>
    fff0:	42 0f       	add	r20, r18
    fff2:	53 1f       	adc	r21, r19
    fff4:	50 93 d0 14 	sts	0x14D0, r21
    fff8:	40 93 cf 14 	sts	0x14CF, r20
    fffc:	f9 01       	movw	r30, r18
    fffe:	61 93       	st	Z+, r22
   10000:	71 93       	st	Z+, r23
   10002:	02 c0       	rjmp	.+4      	; 0x10008 <malloc+0x152>
   10004:	e0 e0       	ldi	r30, 0x00	; 0
   10006:	f0 e0       	ldi	r31, 0x00	; 0
   10008:	cf 01       	movw	r24, r30
   1000a:	df 91       	pop	r29
   1000c:	cf 91       	pop	r28
   1000e:	08 95       	ret

00010010 <free>:
   10010:	cf 93       	push	r28
   10012:	df 93       	push	r29
   10014:	00 97       	sbiw	r24, 0x00	; 0
   10016:	09 f4       	brne	.+2      	; 0x1001a <free+0xa>
   10018:	50 c0       	rjmp	.+160    	; 0x100ba <free+0xaa>
   1001a:	ec 01       	movw	r28, r24
   1001c:	22 97       	sbiw	r28, 0x02	; 2
   1001e:	1b 82       	std	Y+3, r1	; 0x03
   10020:	1a 82       	std	Y+2, r1	; 0x02
   10022:	a0 91 d1 14 	lds	r26, 0x14D1
   10026:	b0 91 d2 14 	lds	r27, 0x14D2
   1002a:	10 97       	sbiw	r26, 0x00	; 0
   1002c:	09 f1       	breq	.+66     	; 0x10070 <free+0x60>
   1002e:	40 e0       	ldi	r20, 0x00	; 0
   10030:	50 e0       	ldi	r21, 0x00	; 0
   10032:	ac 17       	cp	r26, r28
   10034:	bd 07       	cpc	r27, r29
   10036:	08 f1       	brcs	.+66     	; 0x1007a <free+0x6a>
   10038:	bb 83       	std	Y+3, r27	; 0x03
   1003a:	aa 83       	std	Y+2, r26	; 0x02
   1003c:	fe 01       	movw	r30, r28
   1003e:	21 91       	ld	r18, Z+
   10040:	31 91       	ld	r19, Z+
   10042:	e2 0f       	add	r30, r18
   10044:	f3 1f       	adc	r31, r19
   10046:	ae 17       	cp	r26, r30
   10048:	bf 07       	cpc	r27, r31
   1004a:	79 f4       	brne	.+30     	; 0x1006a <free+0x5a>
   1004c:	8d 91       	ld	r24, X+
   1004e:	9c 91       	ld	r25, X
   10050:	11 97       	sbiw	r26, 0x01	; 1
   10052:	28 0f       	add	r18, r24
   10054:	39 1f       	adc	r19, r25
   10056:	2e 5f       	subi	r18, 0xFE	; 254
   10058:	3f 4f       	sbci	r19, 0xFF	; 255
   1005a:	39 83       	std	Y+1, r19	; 0x01
   1005c:	28 83       	st	Y, r18
   1005e:	12 96       	adiw	r26, 0x02	; 2
   10060:	8d 91       	ld	r24, X+
   10062:	9c 91       	ld	r25, X
   10064:	13 97       	sbiw	r26, 0x03	; 3
   10066:	9b 83       	std	Y+3, r25	; 0x03
   10068:	8a 83       	std	Y+2, r24	; 0x02
   1006a:	41 15       	cp	r20, r1
   1006c:	51 05       	cpc	r21, r1
   1006e:	71 f4       	brne	.+28     	; 0x1008c <free+0x7c>
   10070:	d0 93 d2 14 	sts	0x14D2, r29
   10074:	c0 93 d1 14 	sts	0x14D1, r28
   10078:	20 c0       	rjmp	.+64     	; 0x100ba <free+0xaa>
   1007a:	12 96       	adiw	r26, 0x02	; 2
   1007c:	8d 91       	ld	r24, X+
   1007e:	9c 91       	ld	r25, X
   10080:	13 97       	sbiw	r26, 0x03	; 3
   10082:	ad 01       	movw	r20, r26
   10084:	00 97       	sbiw	r24, 0x00	; 0
   10086:	11 f0       	breq	.+4      	; 0x1008c <free+0x7c>
   10088:	dc 01       	movw	r26, r24
   1008a:	d3 cf       	rjmp	.-90     	; 0x10032 <free+0x22>
   1008c:	fa 01       	movw	r30, r20
   1008e:	d3 83       	std	Z+3, r29	; 0x03
   10090:	c2 83       	std	Z+2, r28	; 0x02
   10092:	21 91       	ld	r18, Z+
   10094:	31 91       	ld	r19, Z+
   10096:	e2 0f       	add	r30, r18
   10098:	f3 1f       	adc	r31, r19
   1009a:	ce 17       	cp	r28, r30
   1009c:	df 07       	cpc	r29, r31
   1009e:	69 f4       	brne	.+26     	; 0x100ba <free+0xaa>
   100a0:	88 81       	ld	r24, Y
   100a2:	99 81       	ldd	r25, Y+1	; 0x01
   100a4:	28 0f       	add	r18, r24
   100a6:	39 1f       	adc	r19, r25
   100a8:	2e 5f       	subi	r18, 0xFE	; 254
   100aa:	3f 4f       	sbci	r19, 0xFF	; 255
   100ac:	fa 01       	movw	r30, r20
   100ae:	31 83       	std	Z+1, r19	; 0x01
   100b0:	20 83       	st	Z, r18
   100b2:	8a 81       	ldd	r24, Y+2	; 0x02
   100b4:	9b 81       	ldd	r25, Y+3	; 0x03
   100b6:	93 83       	std	Z+3, r25	; 0x03
   100b8:	82 83       	std	Z+2, r24	; 0x02
   100ba:	df 91       	pop	r29
   100bc:	cf 91       	pop	r28
   100be:	08 95       	ret

000100c0 <do_rand>:
   100c0:	af 92       	push	r10
   100c2:	bf 92       	push	r11
   100c4:	cf 92       	push	r12
   100c6:	df 92       	push	r13
   100c8:	ef 92       	push	r14
   100ca:	ff 92       	push	r15
   100cc:	0f 93       	push	r16
   100ce:	1f 93       	push	r17
   100d0:	cf 93       	push	r28
   100d2:	df 93       	push	r29
   100d4:	ec 01       	movw	r28, r24
   100d6:	a8 80       	ld	r10, Y
   100d8:	b9 80       	ldd	r11, Y+1	; 0x01
   100da:	ca 80       	ldd	r12, Y+2	; 0x02
   100dc:	db 80       	ldd	r13, Y+3	; 0x03
   100de:	a1 14       	cp	r10, r1
   100e0:	b1 04       	cpc	r11, r1
   100e2:	c1 04       	cpc	r12, r1
   100e4:	d1 04       	cpc	r13, r1
   100e6:	41 f4       	brne	.+16     	; 0x100f8 <do_rand+0x38>
   100e8:	84 e2       	ldi	r24, 0x24	; 36
   100ea:	a8 2e       	mov	r10, r24
   100ec:	89 ed       	ldi	r24, 0xD9	; 217
   100ee:	b8 2e       	mov	r11, r24
   100f0:	8b e5       	ldi	r24, 0x5B	; 91
   100f2:	c8 2e       	mov	r12, r24
   100f4:	87 e0       	ldi	r24, 0x07	; 7
   100f6:	d8 2e       	mov	r13, r24
   100f8:	c6 01       	movw	r24, r12
   100fa:	b5 01       	movw	r22, r10
   100fc:	2d e1       	ldi	r18, 0x1D	; 29
   100fe:	33 ef       	ldi	r19, 0xF3	; 243
   10100:	41 e0       	ldi	r20, 0x01	; 1
   10102:	50 e0       	ldi	r21, 0x00	; 0
   10104:	0e 94 3a 7f 	call	0xfe74	; 0xfe74 <__divmodsi4>
   10108:	27 ea       	ldi	r18, 0xA7	; 167
   1010a:	31 e4       	ldi	r19, 0x41	; 65
   1010c:	40 e0       	ldi	r20, 0x00	; 0
   1010e:	50 e0       	ldi	r21, 0x00	; 0
   10110:	0e 94 c6 7e 	call	0xfd8c	; 0xfd8c <__mulsi3>
   10114:	7b 01       	movw	r14, r22
   10116:	8c 01       	movw	r16, r24
   10118:	c6 01       	movw	r24, r12
   1011a:	b5 01       	movw	r22, r10
   1011c:	2d e1       	ldi	r18, 0x1D	; 29
   1011e:	33 ef       	ldi	r19, 0xF3	; 243
   10120:	41 e0       	ldi	r20, 0x01	; 1
   10122:	50 e0       	ldi	r21, 0x00	; 0
   10124:	0e 94 3a 7f 	call	0xfe74	; 0xfe74 <__divmodsi4>
   10128:	ca 01       	movw	r24, r20
   1012a:	b9 01       	movw	r22, r18
   1012c:	2c ee       	ldi	r18, 0xEC	; 236
   1012e:	34 ef       	ldi	r19, 0xF4	; 244
   10130:	4f ef       	ldi	r20, 0xFF	; 255
   10132:	5f ef       	ldi	r21, 0xFF	; 255
   10134:	0e 94 c6 7e 	call	0xfd8c	; 0xfd8c <__mulsi3>
   10138:	6e 0d       	add	r22, r14
   1013a:	7f 1d       	adc	r23, r15
   1013c:	80 1f       	adc	r24, r16
   1013e:	91 1f       	adc	r25, r17
   10140:	97 ff       	sbrs	r25, 7
   10142:	04 c0       	rjmp	.+8      	; 0x1014c <do_rand+0x8c>
   10144:	61 50       	subi	r22, 0x01	; 1
   10146:	70 40       	sbci	r23, 0x00	; 0
   10148:	80 40       	sbci	r24, 0x00	; 0
   1014a:	90 48       	sbci	r25, 0x80	; 128
   1014c:	68 83       	st	Y, r22
   1014e:	79 83       	std	Y+1, r23	; 0x01
   10150:	8a 83       	std	Y+2, r24	; 0x02
   10152:	9b 83       	std	Y+3, r25	; 0x03
   10154:	9b 01       	movw	r18, r22
   10156:	3f 77       	andi	r19, 0x7F	; 127
   10158:	c9 01       	movw	r24, r18
   1015a:	df 91       	pop	r29
   1015c:	cf 91       	pop	r28
   1015e:	1f 91       	pop	r17
   10160:	0f 91       	pop	r16
   10162:	ff 90       	pop	r15
   10164:	ef 90       	pop	r14
   10166:	df 90       	pop	r13
   10168:	cf 90       	pop	r12
   1016a:	bf 90       	pop	r11
   1016c:	af 90       	pop	r10
   1016e:	08 95       	ret

00010170 <rand_r>:
   10170:	0e 94 60 80 	call	0x100c0	; 0x100c0 <do_rand>
   10174:	08 95       	ret

00010176 <rand>:
   10176:	88 ef       	ldi	r24, 0xF8	; 248
   10178:	93 e0       	ldi	r25, 0x03	; 3
   1017a:	0e 94 60 80 	call	0x100c0	; 0x100c0 <do_rand>
   1017e:	08 95       	ret

00010180 <srand>:
   10180:	a0 e0       	ldi	r26, 0x00	; 0
   10182:	b0 e0       	ldi	r27, 0x00	; 0
   10184:	80 93 f8 03 	sts	0x03F8, r24
   10188:	90 93 f9 03 	sts	0x03F9, r25
   1018c:	a0 93 fa 03 	sts	0x03FA, r26
   10190:	b0 93 fb 03 	sts	0x03FB, r27
   10194:	08 95       	ret

00010196 <realloc>:
   10196:	8f 92       	push	r8
   10198:	9f 92       	push	r9
   1019a:	af 92       	push	r10
   1019c:	bf 92       	push	r11
   1019e:	cf 92       	push	r12
   101a0:	df 92       	push	r13
   101a2:	ef 92       	push	r14
   101a4:	ff 92       	push	r15
   101a6:	0f 93       	push	r16
   101a8:	1f 93       	push	r17
   101aa:	cf 93       	push	r28
   101ac:	df 93       	push	r29
   101ae:	8c 01       	movw	r16, r24
   101b0:	00 97       	sbiw	r24, 0x00	; 0
   101b2:	29 f4       	brne	.+10     	; 0x101be <realloc+0x28>
   101b4:	cb 01       	movw	r24, r22
   101b6:	0e 94 5b 7f 	call	0xfeb6	; 0xfeb6 <malloc>
   101ba:	8c 01       	movw	r16, r24
   101bc:	ba c0       	rjmp	.+372    	; 0x10332 <realloc+0x19c>
   101be:	9e ef       	ldi	r25, 0xFE	; 254
   101c0:	e9 2e       	mov	r14, r25
   101c2:	9f ef       	ldi	r25, 0xFF	; 255
   101c4:	f9 2e       	mov	r15, r25
   101c6:	e0 0e       	add	r14, r16
   101c8:	f1 1e       	adc	r15, r17
   101ca:	58 01       	movw	r10, r16
   101cc:	a6 0e       	add	r10, r22
   101ce:	b7 1e       	adc	r11, r23
   101d0:	ae 14       	cp	r10, r14
   101d2:	bf 04       	cpc	r11, r15
   101d4:	08 f4       	brcc	.+2      	; 0x101d8 <realloc+0x42>
   101d6:	ab c0       	rjmp	.+342    	; 0x1032e <realloc+0x198>
   101d8:	8e ef       	ldi	r24, 0xFE	; 254
   101da:	88 2e       	mov	r8, r24
   101dc:	8f ef       	ldi	r24, 0xFF	; 255
   101de:	98 2e       	mov	r9, r24
   101e0:	8a 0c       	add	r8, r10
   101e2:	9b 1c       	adc	r9, r11
   101e4:	e7 01       	movw	r28, r14
   101e6:	48 81       	ld	r20, Y
   101e8:	59 81       	ldd	r21, Y+1	; 0x01
   101ea:	46 17       	cp	r20, r22
   101ec:	57 07       	cpc	r21, r23
   101ee:	b8 f0       	brcs	.+46     	; 0x1021e <realloc+0x88>
   101f0:	45 30       	cpi	r20, 0x05	; 5
   101f2:	51 05       	cpc	r21, r1
   101f4:	08 f4       	brcc	.+2      	; 0x101f8 <realloc+0x62>
   101f6:	9d c0       	rjmp	.+314    	; 0x10332 <realloc+0x19c>
   101f8:	ca 01       	movw	r24, r20
   101fa:	04 97       	sbiw	r24, 0x04	; 4
   101fc:	86 17       	cp	r24, r22
   101fe:	97 07       	cpc	r25, r23
   10200:	08 f4       	brcc	.+2      	; 0x10204 <realloc+0x6e>
   10202:	97 c0       	rjmp	.+302    	; 0x10332 <realloc+0x19c>
   10204:	42 50       	subi	r20, 0x02	; 2
   10206:	50 40       	sbci	r21, 0x00	; 0
   10208:	46 1b       	sub	r20, r22
   1020a:	57 0b       	sbc	r21, r23
   1020c:	f4 01       	movw	r30, r8
   1020e:	51 83       	std	Z+1, r21	; 0x01
   10210:	40 83       	st	Z, r20
   10212:	79 83       	std	Y+1, r23	; 0x01
   10214:	68 83       	st	Y, r22
   10216:	c5 01       	movw	r24, r10
   10218:	0e 94 08 80 	call	0x10010	; 0x10010 <free>
   1021c:	8a c0       	rjmp	.+276    	; 0x10332 <realloc+0x19c>
   1021e:	6b 01       	movw	r12, r22
   10220:	c4 1a       	sub	r12, r20
   10222:	d5 0a       	sbc	r13, r21
   10224:	e0 91 d1 14 	lds	r30, 0x14D1
   10228:	f0 91 d2 14 	lds	r31, 0x14D2
   1022c:	a0 e0       	ldi	r26, 0x00	; 0
   1022e:	b0 e0       	ldi	r27, 0x00	; 0
   10230:	c0 e0       	ldi	r28, 0x00	; 0
   10232:	d0 e0       	ldi	r29, 0x00	; 0
   10234:	42 c0       	rjmp	.+132    	; 0x102ba <realloc+0x124>
   10236:	e8 15       	cp	r30, r8
   10238:	f9 05       	cpc	r31, r9
   1023a:	a1 f5       	brne	.+104    	; 0x102a4 <realloc+0x10e>
   1023c:	20 81       	ld	r18, Z
   1023e:	31 81       	ldd	r19, Z+1	; 0x01
   10240:	2c 15       	cp	r18, r12
   10242:	3d 05       	cpc	r19, r13
   10244:	78 f1       	brcs	.+94     	; 0x102a4 <realloc+0x10e>
   10246:	c9 01       	movw	r24, r18
   10248:	02 96       	adiw	r24, 0x02	; 2
   1024a:	8c 15       	cp	r24, r12
   1024c:	9d 05       	cpc	r25, r13
   1024e:	a8 f0       	brcs	.+42     	; 0x1027a <realloc+0xe4>
   10250:	4e 5f       	subi	r20, 0xFE	; 254
   10252:	5f 4f       	sbci	r21, 0xFF	; 255
   10254:	42 0f       	add	r20, r18
   10256:	53 1f       	adc	r21, r19
   10258:	e7 01       	movw	r28, r14
   1025a:	59 83       	std	Y+1, r21	; 0x01
   1025c:	48 83       	st	Y, r20
   1025e:	22 81       	ldd	r18, Z+2	; 0x02
   10260:	33 81       	ldd	r19, Z+3	; 0x03
   10262:	10 97       	sbiw	r26, 0x00	; 0
   10264:	29 f0       	breq	.+10     	; 0x10270 <realloc+0xda>
   10266:	13 96       	adiw	r26, 0x03	; 3
   10268:	3c 93       	st	X, r19
   1026a:	2e 93       	st	-X, r18
   1026c:	12 97       	sbiw	r26, 0x02	; 2
   1026e:	61 c0       	rjmp	.+194    	; 0x10332 <realloc+0x19c>
   10270:	30 93 d2 14 	sts	0x14D2, r19
   10274:	20 93 d1 14 	sts	0x14D1, r18
   10278:	5c c0       	rjmp	.+184    	; 0x10332 <realloc+0x19c>
   1027a:	22 50       	subi	r18, 0x02	; 2
   1027c:	30 40       	sbci	r19, 0x00	; 0
   1027e:	2c 19       	sub	r18, r12
   10280:	3d 09       	sbc	r19, r13
   10282:	31 83       	std	Z+1, r19	; 0x01
   10284:	20 83       	st	Z, r18
   10286:	10 97       	sbiw	r26, 0x00	; 0
   10288:	29 f0       	breq	.+10     	; 0x10294 <realloc+0xfe>
   1028a:	13 96       	adiw	r26, 0x03	; 3
   1028c:	fc 93       	st	X, r31
   1028e:	ee 93       	st	-X, r30
   10290:	12 97       	sbiw	r26, 0x02	; 2
   10292:	04 c0       	rjmp	.+8      	; 0x1029c <realloc+0x106>
   10294:	f0 93 d2 14 	sts	0x14D2, r31
   10298:	e0 93 d1 14 	sts	0x14D1, r30
   1029c:	f7 01       	movw	r30, r14
   1029e:	71 83       	std	Z+1, r23	; 0x01
   102a0:	60 83       	st	Z, r22
   102a2:	47 c0       	rjmp	.+142    	; 0x10332 <realloc+0x19c>
   102a4:	80 81       	ld	r24, Z
   102a6:	91 81       	ldd	r25, Z+1	; 0x01
   102a8:	c8 17       	cp	r28, r24
   102aa:	d9 07       	cpc	r29, r25
   102ac:	08 f4       	brcc	.+2      	; 0x102b0 <realloc+0x11a>
   102ae:	ec 01       	movw	r28, r24
   102b0:	df 01       	movw	r26, r30
   102b2:	82 81       	ldd	r24, Z+2	; 0x02
   102b4:	93 81       	ldd	r25, Z+3	; 0x03
   102b6:	9c 01       	movw	r18, r24
   102b8:	f9 01       	movw	r30, r18
   102ba:	30 97       	sbiw	r30, 0x00	; 0
   102bc:	09 f0       	breq	.+2      	; 0x102c0 <realloc+0x12a>
   102be:	bb cf       	rjmp	.-138    	; 0x10236 <realloc+0xa0>
   102c0:	40 0f       	add	r20, r16
   102c2:	51 1f       	adc	r21, r17
   102c4:	80 91 cf 14 	lds	r24, 0x14CF
   102c8:	90 91 d0 14 	lds	r25, 0x14D0
   102cc:	84 17       	cp	r24, r20
   102ce:	95 07       	cpc	r25, r21
   102d0:	e9 f4       	brne	.+58     	; 0x1030c <realloc+0x176>
   102d2:	c6 17       	cp	r28, r22
   102d4:	d7 07       	cpc	r29, r23
   102d6:	d0 f4       	brcc	.+52     	; 0x1030c <realloc+0x176>
   102d8:	20 91 f6 03 	lds	r18, 0x03F6
   102dc:	30 91 f7 03 	lds	r19, 0x03F7
   102e0:	21 15       	cp	r18, r1
   102e2:	31 05       	cpc	r19, r1
   102e4:	41 f4       	brne	.+16     	; 0x102f6 <realloc+0x160>
   102e6:	2d b7       	in	r18, 0x3d	; 61
   102e8:	3e b7       	in	r19, 0x3e	; 62
   102ea:	80 91 f2 03 	lds	r24, 0x03F2
   102ee:	90 91 f3 03 	lds	r25, 0x03F3
   102f2:	28 1b       	sub	r18, r24
   102f4:	39 0b       	sbc	r19, r25
   102f6:	a2 16       	cp	r10, r18
   102f8:	b3 06       	cpc	r11, r19
   102fa:	c8 f4       	brcc	.+50     	; 0x1032e <realloc+0x198>
   102fc:	b0 92 d0 14 	sts	0x14D0, r11
   10300:	a0 92 cf 14 	sts	0x14CF, r10
   10304:	e7 01       	movw	r28, r14
   10306:	79 83       	std	Y+1, r23	; 0x01
   10308:	68 83       	st	Y, r22
   1030a:	13 c0       	rjmp	.+38     	; 0x10332 <realloc+0x19c>
   1030c:	cb 01       	movw	r24, r22
   1030e:	0e 94 5b 7f 	call	0xfeb6	; 0xfeb6 <malloc>
   10312:	ec 01       	movw	r28, r24
   10314:	00 97       	sbiw	r24, 0x00	; 0
   10316:	59 f0       	breq	.+22     	; 0x1032e <realloc+0x198>
   10318:	f7 01       	movw	r30, r14
   1031a:	40 81       	ld	r20, Z
   1031c:	51 81       	ldd	r21, Z+1	; 0x01
   1031e:	b8 01       	movw	r22, r16
   10320:	0e 94 a7 81 	call	0x1034e	; 0x1034e <memcpy>
   10324:	c8 01       	movw	r24, r16
   10326:	0e 94 08 80 	call	0x10010	; 0x10010 <free>
   1032a:	8e 01       	movw	r16, r28
   1032c:	02 c0       	rjmp	.+4      	; 0x10332 <realloc+0x19c>
   1032e:	00 e0       	ldi	r16, 0x00	; 0
   10330:	10 e0       	ldi	r17, 0x00	; 0
   10332:	c8 01       	movw	r24, r16
   10334:	df 91       	pop	r29
   10336:	cf 91       	pop	r28
   10338:	1f 91       	pop	r17
   1033a:	0f 91       	pop	r16
   1033c:	ff 90       	pop	r15
   1033e:	ef 90       	pop	r14
   10340:	df 90       	pop	r13
   10342:	cf 90       	pop	r12
   10344:	bf 90       	pop	r11
   10346:	af 90       	pop	r10
   10348:	9f 90       	pop	r9
   1034a:	8f 90       	pop	r8
   1034c:	08 95       	ret

0001034e <memcpy>:
   1034e:	fb 01       	movw	r30, r22
   10350:	dc 01       	movw	r26, r24
   10352:	02 c0       	rjmp	.+4      	; 0x10358 <memcpy+0xa>
   10354:	01 90       	ld	r0, Z+
   10356:	0d 92       	st	X+, r0
   10358:	41 50       	subi	r20, 0x01	; 1
   1035a:	50 40       	sbci	r21, 0x00	; 0
   1035c:	d8 f7       	brcc	.-10     	; 0x10354 <memcpy+0x6>
   1035e:	08 95       	ret

00010360 <strcat>:
   10360:	fb 01       	movw	r30, r22
   10362:	dc 01       	movw	r26, r24
   10364:	0d 90       	ld	r0, X+
   10366:	00 20       	and	r0, r0
   10368:	e9 f7       	brne	.-6      	; 0x10364 <strcat+0x4>
   1036a:	11 97       	sbiw	r26, 0x01	; 1
   1036c:	01 90       	ld	r0, Z+
   1036e:	0d 92       	st	X+, r0
   10370:	00 20       	and	r0, r0
   10372:	e1 f7       	brne	.-8      	; 0x1036c <strcat+0xc>
   10374:	08 95       	ret

00010376 <strcpy>:
   10376:	fb 01       	movw	r30, r22
   10378:	dc 01       	movw	r26, r24
   1037a:	01 90       	ld	r0, Z+
   1037c:	0d 92       	st	X+, r0
   1037e:	00 20       	and	r0, r0
   10380:	e1 f7       	brne	.-8      	; 0x1037a <strcpy+0x4>
   10382:	08 95       	ret

00010384 <strstr>:
   10384:	fb 01       	movw	r30, r22
   10386:	51 91       	ld	r21, Z+
   10388:	55 23       	and	r21, r21
   1038a:	a9 f0       	breq	.+42     	; 0x103b6 <strstr+0x32>
   1038c:	bf 01       	movw	r22, r30
   1038e:	dc 01       	movw	r26, r24
   10390:	4d 91       	ld	r20, X+
   10392:	45 17       	cp	r20, r21
   10394:	41 11       	cpse	r20, r1
   10396:	e1 f7       	brne	.-8      	; 0x10390 <strstr+0xc>
   10398:	59 f4       	brne	.+22     	; 0x103b0 <strstr+0x2c>
   1039a:	cd 01       	movw	r24, r26
   1039c:	01 90       	ld	r0, Z+
   1039e:	00 20       	and	r0, r0
   103a0:	49 f0       	breq	.+18     	; 0x103b4 <strstr+0x30>
   103a2:	4d 91       	ld	r20, X+
   103a4:	40 15       	cp	r20, r0
   103a6:	41 11       	cpse	r20, r1
   103a8:	c9 f3       	breq	.-14     	; 0x1039c <strstr+0x18>
   103aa:	fb 01       	movw	r30, r22
   103ac:	41 11       	cpse	r20, r1
   103ae:	ef cf       	rjmp	.-34     	; 0x1038e <strstr+0xa>
   103b0:	81 e0       	ldi	r24, 0x01	; 1
   103b2:	90 e0       	ldi	r25, 0x00	; 0
   103b4:	01 97       	sbiw	r24, 0x01	; 1
   103b6:	08 95       	ret

000103b8 <itoa>:
   103b8:	fb 01       	movw	r30, r22
   103ba:	9f 01       	movw	r18, r30
   103bc:	e8 94       	clt
   103be:	42 30       	cpi	r20, 0x02	; 2
   103c0:	c4 f0       	brlt	.+48     	; 0x103f2 <itoa+0x3a>
   103c2:	45 32       	cpi	r20, 0x25	; 37
   103c4:	b4 f4       	brge	.+44     	; 0x103f2 <itoa+0x3a>
   103c6:	4a 30       	cpi	r20, 0x0A	; 10
   103c8:	29 f4       	brne	.+10     	; 0x103d4 <itoa+0x1c>
   103ca:	97 fb       	bst	r25, 7
   103cc:	1e f4       	brtc	.+6      	; 0x103d4 <itoa+0x1c>
   103ce:	90 95       	com	r25
   103d0:	81 95       	neg	r24
   103d2:	9f 4f       	sbci	r25, 0xFF	; 255
   103d4:	64 2f       	mov	r22, r20
   103d6:	77 27       	eor	r23, r23
   103d8:	0e 94 f1 7e 	call	0xfde2	; 0xfde2 <__udivmodhi4>
   103dc:	80 5d       	subi	r24, 0xD0	; 208
   103de:	8a 33       	cpi	r24, 0x3A	; 58
   103e0:	0c f0       	brlt	.+2      	; 0x103e4 <itoa+0x2c>
   103e2:	89 5d       	subi	r24, 0xD9	; 217
   103e4:	81 93       	st	Z+, r24
   103e6:	cb 01       	movw	r24, r22
   103e8:	00 97       	sbiw	r24, 0x00	; 0
   103ea:	a1 f7       	brne	.-24     	; 0x103d4 <itoa+0x1c>
   103ec:	16 f4       	brtc	.+4      	; 0x103f2 <itoa+0x3a>
   103ee:	5d e2       	ldi	r21, 0x2D	; 45
   103f0:	51 93       	st	Z+, r21
   103f2:	10 82       	st	Z, r1
   103f4:	c9 01       	movw	r24, r18
   103f6:	0c 94 fd 81 	jmp	0x103fa	; 0x103fa <strrev>

000103fa <strrev>:
   103fa:	dc 01       	movw	r26, r24
   103fc:	fc 01       	movw	r30, r24
   103fe:	67 2f       	mov	r22, r23
   10400:	71 91       	ld	r23, Z+
   10402:	77 23       	and	r23, r23
   10404:	e1 f7       	brne	.-8      	; 0x103fe <strrev+0x4>
   10406:	32 97       	sbiw	r30, 0x02	; 2
   10408:	04 c0       	rjmp	.+8      	; 0x10412 <strrev+0x18>
   1040a:	7c 91       	ld	r23, X
   1040c:	6d 93       	st	X+, r22
   1040e:	70 83       	st	Z, r23
   10410:	62 91       	ld	r22, -Z
   10412:	ae 17       	cp	r26, r30
   10414:	bf 07       	cpc	r27, r31
   10416:	c8 f3       	brcs	.-14     	; 0x1040a <strrev+0x10>
   10418:	08 95       	ret

0001041a <__do_global_dtors>:
   1041a:	15 e0       	ldi	r17, 0x05	; 5
   1041c:	c4 e4       	ldi	r28, 0x44	; 68
   1041e:	d5 e0       	ldi	r29, 0x05	; 5
   10420:	04 c0       	rjmp	.+8      	; 0x1042a <.do_global_dtors_start>

00010422 <.do_global_dtors_loop>:
   10422:	fe 01       	movw	r30, r28
   10424:	0e 94 57 7f 	call	0xfeae	; 0xfeae <__tablejump__>
   10428:	22 96       	adiw	r28, 0x02	; 2

0001042a <.do_global_dtors_start>:
   1042a:	c6 34       	cpi	r28, 0x46	; 70
   1042c:	d1 07       	cpc	r29, r17
   1042e:	c9 f7       	brne	.-14     	; 0x10422 <.do_global_dtors_loop>
   10430:	f8 94       	cli

00010432 <__stop_program>:
   10432:	ff cf       	rjmp	.-2      	; 0x10432 <__stop_program>
